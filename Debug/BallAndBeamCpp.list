
BallAndBeamCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013bc  080108c8  080108c8  000208c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c84  08011c84  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08011c84  08011c84  00021c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c8c  08011c8c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011c8c  08011c8c  00021c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c94  08011c94  00021c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08011c98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000208  08011e9c  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  08011e9c  00030a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037c68  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dda  00000000  00000000  00067e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0006cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  0006e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e74c  00000000  00000000  00070148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff94  00000000  00000000  0009e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001195f1  00000000  00000000  000be828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d7e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a174  00000000  00000000  001d7e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	080108b0 	.word	0x080108b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	080108b0 	.word	0x080108b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2uiz>:
 8000c0c:	004a      	lsls	r2, r1, #1
 8000c0e:	d211      	bcs.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d211      	bcs.n	8000c3a <__aeabi_d2uiz+0x2e>
 8000c16:	d50d      	bpl.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d40e      	bmi.n	8000c40 <__aeabi_d2uiz+0x34>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_d2uiz+0x3a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 b9aa 	b.w	8001058 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f83c 	bl	8000d88 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	460d      	mov	r5, r1
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_dcmplt>
 8000d2a:	b928      	cbnz	r0, 8000d38 <__aeabi_d2lz+0x1c>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d34:	f000 b80a 	b.w	8000d4c <__aeabi_d2ulz>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3e:	f000 f805 	bl	8000d4c <__aeabi_d2ulz>
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop

08000d4c <__aeabi_d2ulz>:
 8000d4c:	b5d0      	push	{r4, r6, r7, lr}
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__aeabi_d2ulz+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc81 	bl	800065c <__aeabi_dmul>
 8000d5a:	f7ff ff57 	bl	8000c0c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <__aeabi_d2ulz+0x38>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc78 	bl	800065c <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff faba 	bl	80002ec <__aeabi_dsub>
 8000d78:	f7ff ff48 	bl	8000c0c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <__udivmoddi4>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	9d08      	ldr	r5, [sp, #32]
 8000d8e:	4604      	mov	r4, r0
 8000d90:	468e      	mov	lr, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14d      	bne.n	8000e32 <__udivmoddi4+0xaa>
 8000d96:	428a      	cmp	r2, r1
 8000d98:	4694      	mov	ip, r2
 8000d9a:	d969      	bls.n	8000e70 <__udivmoddi4+0xe8>
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b152      	cbz	r2, 8000db8 <__udivmoddi4+0x30>
 8000da2:	fa01 f302 	lsl.w	r3, r1, r2
 8000da6:	f1c2 0120 	rsb	r1, r2, #32
 8000daa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db2:	ea41 0e03 	orr.w	lr, r1, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	0c21      	lsrs	r1, r4, #16
 8000dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000dc2:	fa1f f78c 	uxth.w	r7, ip
 8000dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dce:	fb06 f107 	mul.w	r1, r6, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x64>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dde:	f080 811f 	bcs.w	8001020 <__udivmoddi4+0x298>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 811c 	bls.w	8001020 <__udivmoddi4+0x298>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb00 f707 	mul.w	r7, r0, r7
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x92>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0c:	f080 810a 	bcs.w	8001024 <__udivmoddi4+0x29c>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f240 8107 	bls.w	8001024 <__udivmoddi4+0x29c>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1e:	1be4      	subs	r4, r4, r7
 8000e20:	2600      	movs	r6, #0
 8000e22:	b11d      	cbz	r5, 8000e2c <__udivmoddi4+0xa4>
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c5 4300 	strd	r4, r3, [r5]
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0xc2>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80ef 	beq.w	800101a <__udivmoddi4+0x292>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x160>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xd4>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80f9 	bhi.w	800104e <__udivmoddi4+0x2c6>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	469e      	mov	lr, r3
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e0      	beq.n	8000e2c <__udivmoddi4+0xa4>
 8000e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6e:	e7dd      	b.n	8000e2c <__udivmoddi4+0xa4>
 8000e70:	b902      	cbnz	r2, 8000e74 <__udivmoddi4+0xec>
 8000e72:	deff      	udf	#255	; 0xff
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 8092 	bne.w	8000fa2 <__udivmoddi4+0x21a>
 8000e7e:	eba1 010c 	sub.w	r1, r1, ip
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f fe8c 	uxth.w	lr, ip
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	0c20      	lsrs	r0, r4, #16
 8000e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e92:	fb07 1113 	mls	r1, r7, r3, r1
 8000e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9a:	fb0e f003 	mul.w	r0, lr, r3
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x12c>
 8000ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x12a>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f200 80cb 	bhi.w	8001048 <__udivmoddi4+0x2c0>
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	1a09      	subs	r1, r1, r0
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x156>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x154>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f200 80bb 	bhi.w	8001052 <__udivmoddi4+0x2ca>
 8000edc:	4608      	mov	r0, r1
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee6:	e79c      	b.n	8000e22 <__udivmoddi4+0x9a>
 8000ee8:	f1c6 0720 	rsb	r7, r6, #32
 8000eec:	40b3      	lsls	r3, r6
 8000eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	431c      	orrs	r4, r3
 8000f00:	40f9      	lsrs	r1, r7
 8000f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f06:	fa00 f306 	lsl.w	r3, r0, r6
 8000f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0e:	0c20      	lsrs	r0, r4, #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fb09 1118 	mls	r1, r9, r8, r1
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f20:	4288      	cmp	r0, r1
 8000f22:	fa02 f206 	lsl.w	r2, r2, r6
 8000f26:	d90b      	bls.n	8000f40 <__udivmoddi4+0x1b8>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f30:	f080 8088 	bcs.w	8001044 <__udivmoddi4+0x2bc>
 8000f34:	4288      	cmp	r0, r1
 8000f36:	f240 8085 	bls.w	8001044 <__udivmoddi4+0x2bc>
 8000f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f48:	fb09 1110 	mls	r1, r9, r0, r1
 8000f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f54:	458e      	cmp	lr, r1
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x1e2>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f60:	d26c      	bcs.n	800103c <__udivmoddi4+0x2b4>
 8000f62:	458e      	cmp	lr, r1
 8000f64:	d96a      	bls.n	800103c <__udivmoddi4+0x2b4>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4461      	add	r1, ip
 8000f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f72:	eba1 010e 	sub.w	r1, r1, lr
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	46a6      	mov	lr, r4
 8000f7c:	d356      	bcc.n	800102c <__udivmoddi4+0x2a4>
 8000f7e:	d053      	beq.n	8001028 <__udivmoddi4+0x2a0>
 8000f80:	b15d      	cbz	r5, 8000f9a <__udivmoddi4+0x212>
 8000f82:	ebb3 0208 	subs.w	r2, r3, r8
 8000f86:	eb61 010e 	sbc.w	r1, r1, lr
 8000f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f92:	40f1      	lsrs	r1, r6
 8000f94:	431f      	orrs	r7, r3
 8000f96:	e9c5 7100 	strd	r7, r1, [r5]
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	40d8      	lsrs	r0, r3
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fca:	fb00 f60e 	mul.w	r6, r0, lr
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x260>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fde:	d22f      	bcs.n	8001040 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d92d      	bls.n	8001040 <__udivmoddi4+0x2b8>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	b289      	uxth	r1, r1
 8000fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x28a>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001008:	d216      	bcs.n	8001038 <__udivmoddi4+0x2b0>
 800100a:	428b      	cmp	r3, r1
 800100c:	d914      	bls.n	8001038 <__udivmoddi4+0x2b0>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001018:	e738      	b.n	8000e8c <__udivmoddi4+0x104>
 800101a:	462e      	mov	r6, r5
 800101c:	4628      	mov	r0, r5
 800101e:	e705      	b.n	8000e2c <__udivmoddi4+0xa4>
 8001020:	4606      	mov	r6, r0
 8001022:	e6e3      	b.n	8000dec <__udivmoddi4+0x64>
 8001024:	4618      	mov	r0, r3
 8001026:	e6f8      	b.n	8000e1a <__udivmoddi4+0x92>
 8001028:	454b      	cmp	r3, r9
 800102a:	d2a9      	bcs.n	8000f80 <__udivmoddi4+0x1f8>
 800102c:	ebb9 0802 	subs.w	r8, r9, r2
 8001030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001034:	3801      	subs	r0, #1
 8001036:	e7a3      	b.n	8000f80 <__udivmoddi4+0x1f8>
 8001038:	4646      	mov	r6, r8
 800103a:	e7ea      	b.n	8001012 <__udivmoddi4+0x28a>
 800103c:	4620      	mov	r0, r4
 800103e:	e794      	b.n	8000f6a <__udivmoddi4+0x1e2>
 8001040:	4640      	mov	r0, r8
 8001042:	e7d1      	b.n	8000fe8 <__udivmoddi4+0x260>
 8001044:	46d0      	mov	r8, sl
 8001046:	e77b      	b.n	8000f40 <__udivmoddi4+0x1b8>
 8001048:	3b02      	subs	r3, #2
 800104a:	4461      	add	r1, ip
 800104c:	e732      	b.n	8000eb4 <__udivmoddi4+0x12c>
 800104e:	4630      	mov	r0, r6
 8001050:	e709      	b.n	8000e66 <__udivmoddi4+0xde>
 8001052:	4464      	add	r4, ip
 8001054:	3802      	subs	r0, #2
 8001056:	e742      	b.n	8000ede <__udivmoddi4+0x156>

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	80fb      	strh	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	2b3f      	cmp	r3, #63	; 0x3f
 8001074:	dc01      	bgt.n	800107a <_Z12bytestowritett+0x1e>
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	e003      	b.n	8001082 <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001080:	b29b      	uxth	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <_Z12EEPROM_WritettPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af04      	add	r7, sp, #16
 8001096:	60ba      	str	r2, [r7, #8]
 8001098:	461a      	mov	r2, r3
 800109a:	4603      	mov	r3, r0
 800109c:	81fb      	strh	r3, [r7, #14]
 800109e:	460b      	mov	r3, r1
 80010a0:	81bb      	strh	r3, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80010a6:	2306      	movs	r3, #6
 80010a8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da00      	bge.n	80010ba <_Z12EEPROM_WritettPht+0x2a>
 80010b8:	333f      	adds	r3, #63	; 0x3f
 80010ba:	119b      	asrs	r3, r3, #6
 80010bc:	b29a      	uxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	4413      	add	r3, r2
 80010c2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80010c4:	8b7a      	ldrh	r2, [r7, #26]
 80010c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	8b3b      	ldrh	r3, [r7, #24]
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	429a      	cmp	r2, r3
 80010de:	da35      	bge.n	800114c <_Z12EEPROM_WritettPht+0xbc>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80010e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80010f4:	89ba      	ldrh	r2, [r7, #12]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffae 	bl	800105c <_Z12bytestowritett>
 8001100:	4603      	mov	r3, r0
 8001102:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8001104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	8af9      	ldrh	r1, [r7, #22]
 800110c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001110:	9202      	str	r2, [sp, #8]
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	9201      	str	r2, [sp, #4]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	460a      	mov	r2, r1
 800111c:	21a0      	movs	r1, #160	; 0xa0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <_Z12EEPROM_WritettPht+0xc4>)
 8001120:	f005 f8c2 	bl	80062a8 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8001124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001126:	3301      	adds	r3, #1
 8001128:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800112a:	2300      	movs	r3, #0
 800112c:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	8abb      	ldrh	r3, [r7, #20]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8001136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001138:	8abb      	ldrh	r3, [r7, #20]
 800113a:	4413      	add	r3, r2
 800113c:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 800113e:	2005      	movs	r0, #5
 8001140:	f003 fb88 	bl	8004854 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	3301      	adds	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
 800114a:	e7c5      	b.n	80010d8 <_Z12EEPROM_WritettPht+0x48>
	}
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000028c 	.word	0x2000028c

08001158 <_Z11float2BytesPhf>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d80c      	bhi.n	800118c <_Z11float2BytesPhf+0x34>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	440b      	add	r3, r1
 800117a:	3210      	adds	r2, #16
 800117c:	443a      	add	r2, r7
 800117e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001182:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3301      	adds	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e7ef      	b.n	800116c <_Z11float2BytesPhf+0x14>
    }

}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_Z11Bytes2floatPh>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d80c      	bhi.n	80011c4 <_Z11Bytes2floatPh+0x2c>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	441a      	add	r2, r3
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	3318      	adds	r3, #24
 80011b6:	443b      	add	r3, r7
 80011b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	3301      	adds	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
 80011c2:	e7ef      	b.n	80011a4 <_Z11Bytes2floatPh+0xc>
    }

   float float_variable =  thing.a;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	613b      	str	r3, [r7, #16]
   return float_variable;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	ee07 3a90 	vmov	s15, r3
}
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_Z16EEPROM_Write_NUMttf>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	ed87 0a00 	vstr	s0, [r7]
 80011ea:	80fb      	strh	r3, [r7, #6]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 80011f0:	ed97 0a00 	vldr	s0, [r7]
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <_Z16EEPROM_Write_NUMttf+0x34>)
 80011f6:	f7ff ffaf 	bl	8001158 <_Z11float2BytesPhf>

	EEPROM_Write(page, offset, bytes_temp, 4);
 80011fa:	88b9      	ldrh	r1, [r7, #4]
 80011fc:	88f8      	ldrh	r0, [r7, #6]
 80011fe:	2304      	movs	r3, #4
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <_Z16EEPROM_Write_NUMttf+0x34>)
 8001202:	f7ff ff45 	bl	8001090 <_Z12EEPROM_WritettPht>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000224 	.word	0x20000224

08001214 <_Z15EEPROM_Read_NUMtt>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	88b9      	ldrh	r1, [r7, #4]
 800122a:	88f8      	ldrh	r0, [r7, #6]
 800122c:	2304      	movs	r3, #4
 800122e:	f000 f80d 	bl	800124c <_Z11EEPROM_ReadttPht>

	return (Bytes2float(buffer));
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffae 	bl	8001198 <_Z11Bytes2floatPh>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af04      	add	r7, sp, #16
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	81fb      	strh	r3, [r7, #14]
 800125a:	460b      	mov	r3, r1
 800125c:	81bb      	strh	r3, [r7, #12]
 800125e:	4613      	mov	r3, r2
 8001260:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8001262:	2306      	movs	r3, #6
 8001264:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	da00      	bge.n	8001276 <_Z11EEPROM_ReadttPht+0x2a>
 8001274:	333f      	adds	r3, #63	; 0x3f
 8001276:	119b      	asrs	r3, r3, #6
 8001278:	b29a      	uxth	r2, r3
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	4413      	add	r3, r2
 800127e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8001280:	8b7a      	ldrh	r2, [r7, #26]
 8001282:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800128c:	2300      	movs	r3, #0
 800128e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	8b3b      	ldrh	r3, [r7, #24]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	429a      	cmp	r2, r3
 800129a:	da32      	bge.n	8001302 <_Z11EEPROM_ReadttPht+0xb6>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800129c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80012b0:	89ba      	ldrh	r2, [r7, #12]
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fed0 	bl	800105c <_Z12bytestowritett>
 80012bc:	4603      	mov	r3, r0
 80012be:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80012c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	8af9      	ldrh	r1, [r7, #22]
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	8aba      	ldrh	r2, [r7, #20]
 80012d0:	9201      	str	r2, [sp, #4]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2302      	movs	r3, #2
 80012d6:	460a      	mov	r2, r1
 80012d8:	21a0      	movs	r1, #160	; 0xa0
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <_Z11EEPROM_ReadttPht+0xc0>)
 80012dc:	f005 f8f8 	bl	80064d0 <HAL_I2C_Mem_Read>
		startPage += 1;
 80012e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012e2:	3301      	adds	r3, #1
 80012e4:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	8abb      	ldrh	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80012f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012f4:	8abb      	ldrh	r3, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	3301      	adds	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	e7c8      	b.n	8001294 <_Z11EEPROM_ReadttPht+0x48>
	}
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000028c 	.word	0x2000028c

08001310 <_ZN10controllib11generic_pidC1Eddddd>:
#include <math.h>
#endif

namespace controllib{

       generic_pid::generic_pid(double _kp, double _ki, double _kd, double _bias,double _T):kp(_kp),ki(_ki),kd(_kd),bias(_bias),T(_T){
 8001310:	b480      	push	{r7}
 8001312:	b08d      	sub	sp, #52	; 0x34
 8001314:	af00      	add	r7, sp, #0
 8001316:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001318:	ed87 0b08 	vstr	d0, [r7, #32]
 800131c:	ed87 1b06 	vstr	d1, [r7, #24]
 8001320:	ed87 2b04 	vstr	d2, [r7, #16]
 8001324:	ed87 3b02 	vstr	d3, [r7, #8]
 8001328:	ed87 4b00 	vstr	d4, [r7]
 800132c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800132e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001332:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800133c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001342:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001346:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800134a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800134c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001350:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            
        }
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	3734      	adds	r7, #52	; 0x34
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_ZN10controllib11generic_pid6set_kpEd>:
        void generic_pid::set_kp(double _kp){
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	ed87 0b00 	vstr	d0, [r7]
            kp=_kp;
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN10controllib11generic_pid6set_kiEd>:
        void generic_pid::set_ki(double _ki){
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	ed87 0b00 	vstr	d0, [r7]
            ki=_ki;
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
        }
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN10controllib11generic_pid6set_kdEd>:
        void generic_pid::set_kd(double _kd){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	ed87 0b00 	vstr	d0, [r7]
            kd=_kd;
 80013bc:	68f9      	ldr	r1, [r7, #12]
 80013be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        }
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZN10controllib11generic_pid8set_biasEd>:
        void generic_pid::set_bias(double _bias){
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0b00 	vstr	d0, [r7]
            bias=_bias;
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
        }
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_ZN10controllib11generic_pid15update_setpointEd>:
        void generic_pid::update_setpoint(double _setpoint){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	ed87 0b00 	vstr	d0, [r7]
            setpoint=_setpoint;
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001406:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        }
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_ZN10controllib11generic_pid16calculate_outputEd>:
        double generic_pid::calculate_output(double _input){
 8001416:	b5b0      	push	{r4, r5, r7, lr}
 8001418:	b088      	sub	sp, #32
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	ed87 0b00 	vstr	d0, [r7]
            auto e = setpoint - _input;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800142c:	f7fe ff5e 	bl	80002ec <__aeabi_dsub>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9c7 2306 	strd	r2, r3, [r7, #24]
            auto output = kp * e + ki * e * T + (kd * e) / T;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800143e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001442:	f7ff f90b 	bl	800065c <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001458:	f7ff f900 	bl	800065c <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800146a:	f7ff f8f7 	bl	800065c <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe ff3b 	bl	80002f0 <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4614      	mov	r4, r2
 8001480:	461d      	mov	r5, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800148c:	f7ff f8e6 	bl	800065c <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800149e:	f7ff fa07 	bl	80008b0 <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7fe ff21 	bl	80002f0 <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef ENABLE_L1_PLOTTING
    		printf("%f,%f,%f\r\n",setpoint,_input,abs(output));
#endif
            return output;
 80014b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ba:	ec43 2b17 	vmov	d7, r2, r3
        }
 80014be:	eeb0 0a47 	vmov.f32	s0, s14
 80014c2:	eef0 0a67 	vmov.f32	s1, s15
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}

080014cc <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80014da:	f00a fa8b 	bl	800b9f4 <asinf>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>:
ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w, int addr) {
	_wire = w;
	i2cAddress = addr;
}

ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	_wire = w;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	601a      	str	r2, [r3, #0]
	i2cAddress = 210; //0x68;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	22d2      	movs	r2, #210	; 0xd2
 8001500:	605a      	str	r2, [r3, #4]
}
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_ZN11ICM20948_WE4initEv>:

/************ Basic Settings ************/

bool ICM20948_WE::init() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	currentBank = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	721a      	strb	r2, [r3, #8]
	if (!reset_ICM20948()) {
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fb94 	bl	8001c4c <_ZN11ICM20948_WE14reset_ICM20948Ev>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZN11ICM20948_WE4initEv+0x28>
		return false;
 8001534:	2300      	movs	r3, #0
 8001536:	e03a      	b.n	80015ae <_ZN11ICM20948_WE4initEv+0x9e>
	}

	accOffsetVal.x = 0.0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
	accCorrFactor.x = 1.0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = 1.0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = 1.0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
	accRangeFactor = 1.0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gyrOffsetVal.x = 0.0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
	gyrOffsetVal.y = 0.0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
	gyrOffsetVal.z = 0.0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
	gyrRangeFactor = 1.0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	fifoType = ICM20948_FIFO_ACC;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2210      	movs	r2, #16
 8001594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	sleep(false);
 8001598:	2100      	movs	r1, #0
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9e6 	bl	800196c <_ZN11ICM20948_WE5sleepEb>
	writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR 
 80015a0:	2301      	movs	r3, #1
 80015a2:	2209      	movs	r2, #9
 80015a4:	2102      	movs	r1, #2
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 faa9 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>

	return true;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_ZN11ICM20948_WE9enableAccEb>:

uint8_t ICM20948_WE::whoAmI() {
	return readRegister8(0, ICM20948_WHO_AM_I);
}

void ICM20948_WE::enableAcc(bool enAcc) {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_2);
 80015c2:	2207      	movs	r2, #7
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 faef 	bl	8001baa <_ZN11ICM20948_WE13readRegister8Ehh>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (enAcc) {
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <_ZN11ICM20948_WE9enableAccEb+0x3a>
		regVal &= ~ICM20948_ACC_EN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80015e2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80015ee:	e008      	b.n	8001602 <_ZN11ICM20948_WE9enableAccEb+0x4c>
	} else {
		regVal |= ICM20948_ACC_EN;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80015f6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, 0x00); //regVal);
 8001602:	2300      	movs	r3, #0
 8001604:	2207      	movs	r2, #7
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fa78 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>:

void ICM20948_WE::setAccRange(ICM20948_accRange accRange) {
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 8001622:	2214      	movs	r2, #20
 8001624:	2102      	movs	r1, #2
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fabf 	bl	8001baa <_ZN11ICM20948_WE13readRegister8Ehh>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800163c:	f023 0306 	bic.w	r3, r3, #6
 8001640:	b2da      	uxtb	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (accRange << 1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800164e:	b25a      	sxtb	r2, r3
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001668:	2214      	movs	r2, #20
 800166a:	2102      	movs	r1, #2
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fa46 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
	accRangeFactor = 1 << accRange;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2201      	movs	r2, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setAccDLPF(ICM20948_dlpf dlpf) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 8001696:	2214      	movs	r2, #20
 8001698:	2102      	movs	r1, #2
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa85 	bl	8001baa <_ZN11ICM20948_WE13readRegister8Ehh>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d111      	bne.n	80016d4 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016c8:	2214      	movs	r2, #20
 80016ca:	2102      	movs	r1, #2
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fa16 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 80016d2:	e026      	b.n	8001722 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001718:	2214      	movs	r2, #20
 800171a:	2102      	movs	r1, #2
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f9ee 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>:

void ICM20948_WE::setAccSampleRateDivider(uint16_t accSplRateDiv) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
	writeRegister16(2, ICM20948_ACCEL_SMPLRT_DIV_1, accSplRateDiv);
 8001734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001738:	2210      	movs	r2, #16
 800173a:	2102      	movs	r1, #2
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fa05 	bl	8001b4c <_ZN11ICM20948_WE15writeRegister16Ehhs>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_ZN11ICM20948_WE10readSensorEv>:
	}
}

/************* x,y,z results *************/

void ICM20948_WE::readSensor() {
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	readAllData(buffer);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3309      	adds	r3, #9
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa51 	bl	8001c00 <_ZN11ICM20948_WE11readAllDataEPh>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZN11ICM20948_WE15getAccRawValuesEv>:

xyzFloat ICM20948_WE::getAccRawValues() {
 8001766:	b580      	push	{r7, lr}
 8001768:	b08c      	sub	sp, #48	; 0x30
 800176a:	af00      	add	r7, sp, #0
 800176c:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal;
	accRawVal.x = (int16_t) (((buffer[0]) << 8) | buffer[1]) * 1.0;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	7a5b      	ldrb	r3, [r3, #9]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	7a9b      	ldrb	r3, [r3, #10]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe ff01 	bl	8000588 <__aeabi_i2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fa5d 	bl	8000c4c <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
	accRawVal.y = (int16_t) (((buffer[2]) << 8) | (int16_t) buffer[3]) * 1.0;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	7adb      	ldrb	r3, [r3, #11]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe feed 	bl	8000588 <__aeabi_i2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff fa49 	bl	8000c4c <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	61fb      	str	r3, [r7, #28]
	accRawVal.z = (int16_t) (((buffer[4]) << 8) | buffer[5]) * 1.0;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	7b5b      	ldrb	r3, [r3, #13]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	7b9b      	ldrb	r3, [r3, #14]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fed9 	bl	8000588 <__aeabi_i2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa35 	bl	8000c4c <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	623b      	str	r3, [r7, #32]
	return accRawVal;
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	f107 0218 	add.w	r2, r7, #24
 80017ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	ee06 1a90 	vmov	s13, r1
 80017fe:	ee07 2a10 	vmov	s14, r2
 8001802:	ee07 3a90 	vmov	s15, r3
}
 8001806:	eeb0 0a66 	vmov.f32	s0, s13
 800180a:	eef0 0a47 	vmov.f32	s1, s14
 800180e:	eeb0 1a67 	vmov.f32	s2, s15
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>:

xyzFloat ICM20948_WE::getCorrectedAccRawValues() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal = getAccRawValues();
 8001820:	6978      	ldr	r0, [r7, #20]
 8001822:	f7ff ffa0 	bl	8001766 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8001826:	eef0 6a40 	vmov.f32	s13, s0
 800182a:	eeb0 7a60 	vmov.f32	s14, s1
 800182e:	eef0 7a41 	vmov.f32	s15, s2
 8001832:	edc7 6a06 	vstr	s13, [r7, #24]
 8001836:	ed87 7a07 	vstr	s14, [r7, #28]
 800183a:	edc7 7a08 	vstr	s15, [r7, #32]
	accRawVal = correctAccRawValues(accRawVal);
 800183e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001842:	ed97 7a07 	vldr	s14, [r7, #28]
 8001846:	edd7 7a08 	vldr	s15, [r7, #32]
 800184a:	eeb0 0a66 	vmov.f32	s0, s13
 800184e:	eef0 0a47 	vmov.f32	s1, s14
 8001852:	eeb0 1a67 	vmov.f32	s2, s15
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f000 f8ba 	bl	80019d0 <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>
 800185c:	eef0 6a40 	vmov.f32	s13, s0
 8001860:	eeb0 7a60 	vmov.f32	s14, s1
 8001864:	eef0 7a41 	vmov.f32	s15, s2
 8001868:	edc7 6a06 	vstr	s13, [r7, #24]
 800186c:	ed87 7a07 	vstr	s14, [r7, #28]
 8001870:	edc7 7a08 	vstr	s15, [r7, #32]

	return accRawVal;
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	f107 0218 	add.w	r2, r7, #24
 800187c:	ca07      	ldmia	r2, {r0, r1, r2}
 800187e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	ee06 1a90 	vmov	s13, r1
 800188c:	ee07 2a10 	vmov	s14, r2
 8001890:	ee07 3a90 	vmov	s15, r3
}
 8001894:	eeb0 0a66 	vmov.f32	s0, s13
 8001898:	eef0 0a47 	vmov.f32	s1, s14
 800189c:	eeb0 1a67 	vmov.f32	s2, s15
 80018a0:	3730      	adds	r7, #48	; 0x30
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <_ZN11ICM20948_WE10getGValuesEv>:

xyzFloat ICM20948_WE::getGValues() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b090      	sub	sp, #64	; 0x40
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6178      	str	r0, [r7, #20]
	xyzFloat gVal, accRawVal;
	accRawVal = getCorrectedAccRawValues();
 80018b0:	6978      	ldr	r0, [r7, #20]
 80018b2:	f7ff ffb1 	bl	8001818 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>
 80018b6:	eef0 6a40 	vmov.f32	s13, s0
 80018ba:	eeb0 7a60 	vmov.f32	s14, s1
 80018be:	eef0 7a41 	vmov.f32	s15, s2
 80018c2:	edc7 6a07 	vstr	s13, [r7, #28]
 80018c6:	ed87 7a08 	vstr	s14, [r7, #32]
 80018ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	gVal.x = accRawVal.x * accRangeFactor / 16384.0;
 80018ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001968 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	gVal.y = accRawVal.y * accRangeFactor / 16384.0;
 80018f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001968 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	gVal.z = accRawVal.z * accRangeFactor / 16384.0;
 8001912:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001928:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001968 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 800192c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001930:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	return gVal;
 8001934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001938:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193c:	ca07      	ldmia	r2, {r0, r1, r2}
 800193e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	ee06 1a90 	vmov	s13, r1
 800194c:	ee07 2a10 	vmov	s14, r2
 8001950:	ee07 3a90 	vmov	s15, r3
}
 8001954:	eeb0 0a66 	vmov.f32	s0, s13
 8001958:	eef0 0a47 	vmov.f32	s1, s14
 800195c:	eeb0 1a67 	vmov.f32	s2, s15
 8001960:	3740      	adds	r7, #64	; 0x40
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	46800000 	.word	0x46800000

0800196c <_ZN11ICM20948_WE5sleepEb>:

void ICM20948_WE::setAccAverageInCycleMode(ICM20948_accAvgLowPower avg) {
	writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
}

void ICM20948_WE::sleep(bool sleep) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 8001978:	2206      	movs	r2, #6
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f914 	bl	8001baa <_ZN11ICM20948_WE13readRegister8Ehh>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (sleep) {
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <_ZN11ICM20948_WE5sleepEb+0x3a>
		regVal |= ICM20948_SLEEP;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019a4:	e008      	b.n	80019b8 <_ZN11ICM20948_WE5sleepEb+0x4c>
	} else {
		regVal &= ~ICM20948_SLEEP;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019be:	2206      	movs	r2, #6
 80019c0:	2100      	movs	r1, #0
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f89b 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>:
	regVal |= 0x01;
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
	HAL_Delay(10);
}

xyzFloat ICM20948_WE::correctAccRawValues(xyzFloat accRawVal) {
 80019d0:	b480      	push	{r7}
 80019d2:	b08d      	sub	sp, #52	; 0x34
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	61f8      	str	r0, [r7, #28]
 80019d8:	eef0 6a40 	vmov.f32	s13, s0
 80019dc:	eeb0 7a60 	vmov.f32	s14, s1
 80019e0:	eef0 7a41 	vmov.f32	s15, s2
 80019e4:	edc7 6a04 	vstr	s13, [r7, #16]
 80019e8:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ec:	edc7 7a06 	vstr	s15, [r7, #24]
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 80019f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	ed93 6a08 	vldr	s12, [r3, #32]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a08:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a0c:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.x;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 8001a1a:	edc7 7a04 	vstr	s15, [r7, #16]
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 8001a1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a3a:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.y;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 8001a48:	edc7 7a05 	vstr	s15, [r7, #20]
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 8001a4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a64:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a68:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.z;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 8001a76:	edc7 7a06 	vstr	s15, [r7, #24]

	return accRawVal;
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	f107 0210 	add.w	r2, r7, #16
 8001a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	ee06 1a90 	vmov	s13, r1
 8001a92:	ee07 2a10 	vmov	s14, r2
 8001a96:	ee07 3a90 	vmov	s15, r3
}
 8001a9a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a9e:	eef0 0a47 	vmov.f32	s1, s14
 8001aa2:	eeb0 1a67 	vmov.f32	s2, s15
 8001aa6:	3734      	adds	r7, #52	; 0x34
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN11ICM20948_WE10switchBankEh>:
	gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);

	return gyrRawVal;
}

void ICM20948_WE::switchBank(uint8_t newBank) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
	if (newBank != currentBank) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7a1b      	ldrb	r3, [r3, #8]
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d017      	beq.n	8001af6 <_ZN11ICM20948_WE10switchBankEh+0x46>
		currentBank = newBank;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	721a      	strb	r2, [r3, #8]

		std::uint8_t pData[2] = { ICM20948_REG_BANK_SEL, currentBank << 4 };
 8001acc:	2300      	movs	r3, #0
 8001ace:	81bb      	strh	r3, [r7, #12]
 8001ad0:	237f      	movs	r3, #127	; 0x7f
 8001ad2:	733b      	strb	r3, [r7, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7a1b      	ldrb	r3, [r3, #8]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	f107 020c 	add.w	r2, r7, #12
 8001aec:	230a      	movs	r3, #10
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2302      	movs	r3, #2
 8001af2:	f004 f9ef 	bl	8005ed4 <HAL_I2C_Master_Transmit>
	}
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>:

uint8_t ICM20948_WE::writeRegister8(uint8_t bank, uint8_t reg, uint8_t val) {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	4608      	mov	r0, r1
 8001b08:	4611      	mov	r1, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	70fb      	strb	r3, [r7, #3]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70bb      	strb	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
	switchBank(bank);
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffc7 	bl	8001ab0 <_ZN11ICM20948_WE10switchBankEh>
	std::uint8_t pData[2] = { reg, val };
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	733b      	strb	r3, [r7, #12]
 8001b26:	787b      	ldrb	r3, [r7, #1]
 8001b28:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	b299      	uxth	r1, r3
 8001b34:	f107 020c 	add.w	r2, r7, #12
 8001b38:	230a      	movs	r3, #10
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f004 f9c9 	bl	8005ed4 <HAL_I2C_Master_Transmit>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZN11ICM20948_WE15writeRegister16Ehhs>:

uint8_t ICM20948_WE::writeRegister16(uint8_t bank, uint8_t reg, int16_t val) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	70fb      	strb	r3, [r7, #3]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70bb      	strb	r3, [r7, #2]
 8001b62:	4613      	mov	r3, r2
 8001b64:	803b      	strh	r3, [r7, #0]
	switchBank(bank);
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa0 	bl	8001ab0 <_ZN11ICM20948_WE10switchBankEh>
	int8_t MSByte = (int8_t) ((val >> 8) & 0xFF);
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	73fb      	strb	r3, [r7, #15]
	uint8_t LSByte = val & 0xFF;
 8001b78:	883b      	ldrh	r3, [r7, #0]
 8001b7a:	73bb      	strb	r3, [r7, #14]
	std::uint8_t pData[3] = { reg, MSByte, LSByte };
 8001b7c:	78bb      	ldrb	r3, [r7, #2]
 8001b7e:	723b      	strb	r3, [r7, #8]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	727b      	strb	r3, [r7, #9]
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 3, 10);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	b299      	uxth	r1, r3
 8001b92:	f107 0208 	add.w	r2, r7, #8
 8001b96:	230a      	movs	r3, #10
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f004 f99a 	bl	8005ed4 <HAL_I2C_Master_Transmit>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN11ICM20948_WE13readRegister8Ehh>:

uint8_t ICM20948_WE::readRegister8(uint8_t bank, uint8_t reg) {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af02      	add	r7, sp, #8
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	70bb      	strb	r3, [r7, #2]
	switchBank(bank);
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff76 	bl	8001ab0 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t regValue = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &reg, 2, 10);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	1cba      	adds	r2, r7, #2
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f004 f97b 	bl	8005ed4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_wire, i2cAddress, &regValue, 1, 10);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	b299      	uxth	r1, r3
 8001be8:	f107 020f 	add.w	r2, r7, #15
 8001bec:	230a      	movs	r3, #10
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f004 fa63 	bl	80060bc <HAL_I2C_Master_Receive>
	return regValue;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZN11ICM20948_WE11readAllDataEPh>:
	MSByte = reg16Val[1];
	MSByte = reg16Val[0];
	return (MSByte << 8) + LSByte;
}

void ICM20948_WE::readAllData(uint8_t *data) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	switchBank(0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff4f 	bl	8001ab0 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t x_acc_h = 0x2D;
 8001c12:	232d      	movs	r3, #45	; 0x2d
 8001c14:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &x_acc_h, 1, 10);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	b299      	uxth	r1, r3
 8001c20:	f107 020f 	add.w	r2, r7, #15
 8001c24:	230a      	movs	r3, #10
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f004 f953 	bl	8005ed4 <HAL_I2C_Master_Transmit>
//    HAL_I2C_Master_Transmit(_wire, i2cAddress, ICM20948_ACCEL_OUT, 1, 10);
	HAL_I2C_Master_Receive(_wire, i2cAddress, data, 20, 10);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	b299      	uxth	r1, r3
 8001c38:	230a      	movs	r3, #10
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	f004 fa3c 	bl	80060bc <HAL_I2C_Master_Receive>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZN11ICM20948_WE14reset_ICM20948Ev>:
	regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
	enableMagDataRead(AK09916_HXL, 0x08);
	return regValue;
}

uint8_t ICM20948_WE::reset_ICM20948() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	uint8_t ack = writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	2206      	movs	r2, #6
 8001c58:	2100      	movs	r1, #0
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff4f 	bl	8001afe <_ZN11ICM20948_WE14writeRegister8Ehhh>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);  // wait for registers to reset
 8001c64:	200a      	movs	r0, #10
 8001c66:	f002 fdf5 	bl	8004854 <HAL_Delay>
	return (ack == 0);
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f009 fe5a 	bl	800b946 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4904      	ldr	r1, [pc, #16]	; (8001cac <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8001c9e:	f001 f808 	bl	8002cb2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001ca2:	4603      	mov	r3, r0
					__idx, __base); }
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	080108c8 	.word	0x080108c8
 8001cb0:	0800e381 	.word	0x0800e381

08001cb4 <_ZN13configuration9l1_params7save_kpEd>:
	double ki;
	double kd;
	double bias;
};
void save_kp(double kp)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	ed87 0b00 	vstr	d0, [r7]
	EEPROM_Write_NUM(l1_page, 0, kp);
 8001cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc2:	f7fe ffc3 	bl	8000c4c <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	ee00 3a10 	vmov	s0, r3
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fa84 	bl	80011dc <_Z16EEPROM_Write_NUMttf>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZN13configuration9l1_params7save_kiEd>:
void save_ki(double ki)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	ed87 0b00 	vstr	d0, [r7]
	EEPROM_Write_NUM(l1_page, 4, ki);
 8001ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cea:	f7fe ffaf 	bl	8000c4c <__aeabi_d2f>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	ee00 3a10 	vmov	s0, r3
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fa70 	bl	80011dc <_Z16EEPROM_Write_NUMttf>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN13configuration9l1_params7save_kdEd>:
void save_kd(double kd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	ed87 0b00 	vstr	d0, [r7]
	EEPROM_Write_NUM(l1_page, 8, kd);
 8001d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d12:	f7fe ff9b 	bl	8000c4c <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	ee00 3a10 	vmov	s0, r3
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fa5c 	bl	80011dc <_Z16EEPROM_Write_NUMttf>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZN13configuration9l1_params9save_biasEd>:
void save_bias(double bias)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0b00 	vstr	d0, [r7]
	EEPROM_Write_NUM(l1_page, 12, bias);
 8001d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d3a:	f7fe ff87 	bl	8000c4c <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	ee00 3a10 	vmov	s0, r3
 8001d44:	210c      	movs	r1, #12
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fa48 	bl	80011dc <_Z16EEPROM_Write_NUMttf>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN13configuration9l1_params9load_pageEv>:
	save_ki(ki);
	save_kd(kd);
	save_bias(bias);
}
page_content load_page()
{
 8001d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d58:	b09e      	sub	sp, #120	; 0x78
 8001d5a:	af06      	add	r7, sp, #24
	page_content cont;
	cont.kp = EEPROM_Read_NUM(l1_page, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fa58 	bl	8001214 <_Z15EEPROM_Read_NUMtt>
 8001d64:	ee10 3a10 	vmov	r3, s0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc1f 	bl	80005ac <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9c7 2308 	strd	r2, r3, [r7, #32]
	cont.ki = EEPROM_Read_NUM(l1_page, 4);
 8001d76:	2104      	movs	r1, #4
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fa4b 	bl	8001214 <_Z15EEPROM_Read_NUMtt>
 8001d7e:	ee10 3a10 	vmov	r3, s0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fc12 	bl	80005ac <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	cont.kd = EEPROM_Read_NUM(l1_page, 8);
 8001d90:	2108      	movs	r1, #8
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fa3e 	bl	8001214 <_Z15EEPROM_Read_NUMtt>
 8001d98:	ee10 3a10 	vmov	r3, s0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fc05 	bl	80005ac <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	cont.bias = EEPROM_Read_NUM(l1_page, 12);
 8001daa:	210c      	movs	r1, #12
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff fa31 	bl	8001214 <_Z15EEPROM_Read_NUMtt>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbf8 	bl	80005ac <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	printf(" Kp = %.4f\r\n Ki= %.4f \r\n kd= %.4f \r\n bias = %.4f \r\n",
 8001dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dd0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001dd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ddc:	e9cd 2300 	strd	r2, r3, [sp]
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <_ZN13configuration9l1_params9load_pageEv+0xf4>)
 8001de6:	f00b fa47 	bl	800d278 <iprintf>
			cont.kp,cont.ki,cont.kd,cont.bias);
	return cont;
 8001dea:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001dee:	f107 0520 	add.w	r5, r7, #32
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dfe:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e02:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e0e:	ec49 8b14 	vmov	d4, r8, r9
 8001e12:	ec45 4b15 	vmov	d5, r4, r5
 8001e16:	ec41 0b16 	vmov	d6, r0, r1
 8001e1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e1e:	eeb0 0a44 	vmov.f32	s0, s8
 8001e22:	eef0 0a64 	vmov.f32	s1, s9
 8001e26:	eeb0 1a45 	vmov.f32	s2, s10
 8001e2a:	eef0 1a65 	vmov.f32	s3, s11
 8001e2e:	eeb0 2a46 	vmov.f32	s4, s12
 8001e32:	eef0 2a66 	vmov.f32	s5, s13
 8001e36:	eeb0 3a47 	vmov.f32	s6, s14
 8001e3a:	eef0 3a67 	vmov.f32	s7, s15
 8001e3e:	3760      	adds	r7, #96	; 0x60
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e46:	bf00      	nop
 8001e48:	080108d0 	.word	0x080108d0

08001e4c <_Z13set_dutycycleiPPc>:
static void MX_TIM5_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t set_dutycycle(int argc, char *argv[]) {
 8001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4e:	b08d      	sub	sp, #52	; 0x34
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	uint64_t pulse_width = std::stoi(argv[1]);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	681e      	ldr	r6, [r3, #0]
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f009 fd19 	bl	800b898 <_ZNSaIcEC1Ev>
 8001e66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4631      	mov	r1, r6
 8001e70:	4618      	mov	r0, r3
 8001e72:	f009 fd8f 	bl	800b994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fefe 	bl	8001c80 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001e84:	4603      	mov	r3, r0
 8001e86:	17da      	asrs	r2, r3, #31
 8001e88:	461c      	mov	r4, r3
 8001e8a:	4615      	mov	r5, r2
 8001e8c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4618      	mov	r0, r3
 8001e96:	f009 fd50 	bl	800b93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f009 fcfb 	bl	800b89a <_ZNSaIcED1Ev>
	if (pulse_width <= 1000) {
 8001ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea8:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001eac:	428a      	cmp	r2, r1
 8001eae:	f173 0300 	sbcs.w	r3, r3, #0
 8001eb2:	d205      	bcs.n	8001ec0 <_Z13set_dutycycleiPPc+0x74>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse_width);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <_Z13set_dutycycleiPPc+0x80>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
		return EXIT_SUCCESS;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <_Z13set_dutycycleiPPc+0x76>
	} else {
		return EXIT_FAILURE;
 8001ec0:	2301      	movs	r3, #1
	}
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3734      	adds	r7, #52	; 0x34
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200002d8 	.word	0x200002d8

08001ed0 <_Z15set_pid1_paramsiPPc>:

uint8_t set_pid1_params(int argc, char *argv[]) {
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b08f      	sub	sp, #60	; 0x3c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
	using namespace configuration::l1_params;
	char option = argv[1][0];
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3304      	adds	r3, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	double param = std::stoi(argv[2]);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f009 fcd1 	bl	800b898 <_ZNSaIcEC1Ev>
 8001ef6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4621      	mov	r1, r4
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fd47 	bl	800b994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	220a      	movs	r2, #10
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff feb6 	bl	8001c80 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb36 	bl	8000588 <__aeabi_i2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f009 fd06 	bl	800b93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f009 fcb1 	bl	800b89a <_ZNSaIcED1Ev>

	//switch((*argv)[1][0])
	switch (option) {
 8001f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f3c:	3b62      	subs	r3, #98	; 0x62
 8001f3e:	2b16      	cmp	r3, #22
 8001f40:	d85e      	bhi.n	8002000 <_Z15set_pid1_paramsiPPc+0x130>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <_Z15set_pid1_paramsiPPc+0x78>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fe1 	.word	0x08001fe1
 8001f4c:	08002001 	.word	0x08002001
 8001f50:	08001fcd 	.word	0x08001fcd
 8001f54:	08002001 	.word	0x08002001
 8001f58:	08002001 	.word	0x08002001
 8001f5c:	08002001 	.word	0x08002001
 8001f60:	08002001 	.word	0x08002001
 8001f64:	08001fb9 	.word	0x08001fb9
 8001f68:	08002001 	.word	0x08002001
 8001f6c:	08002001 	.word	0x08002001
 8001f70:	08002001 	.word	0x08002001
 8001f74:	08002001 	.word	0x08002001
 8001f78:	08002001 	.word	0x08002001
 8001f7c:	08002001 	.word	0x08002001
 8001f80:	08001fa5 	.word	0x08001fa5
 8001f84:	08002001 	.word	0x08002001
 8001f88:	08002001 	.word	0x08002001
 8001f8c:	08002001 	.word	0x08002001
 8001f90:	08002001 	.word	0x08002001
 8001f94:	08002001 	.word	0x08002001
 8001f98:	08002001 	.word	0x08002001
 8001f9c:	08002001 	.word	0x08002001
 8001fa0:	08001ff5 	.word	0x08001ff5
	case 'p':
		tilt_angle_controller.set_kp(param);
 8001fa4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fa8:	481d      	ldr	r0, [pc, #116]	; (8002020 <_Z15set_pid1_paramsiPPc+0x150>)
 8001faa:	f7ff f9df 	bl	800136c <_ZN10controllib11generic_pid6set_kpEd>
		save_kp(param);
 8001fae:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fb2:	f7ff fe7f 	bl	8001cb4 <_ZN13configuration9l1_params7save_kpEd>
		break;
 8001fb6:	e02d      	b.n	8002014 <_Z15set_pid1_paramsiPPc+0x144>
	case 'i':
		tilt_angle_controller.set_ki(param);
 8001fb8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fbc:	4818      	ldr	r0, [pc, #96]	; (8002020 <_Z15set_pid1_paramsiPPc+0x150>)
 8001fbe:	f7ff f9e6 	bl	800138e <_ZN10controllib11generic_pid6set_kiEd>
		save_ki(param);
 8001fc2:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fc6:	f7ff fe89 	bl	8001cdc <_ZN13configuration9l1_params7save_kiEd>
		break;
 8001fca:	e023      	b.n	8002014 <_Z15set_pid1_paramsiPPc+0x144>
	case 'd':
		tilt_angle_controller.set_kd(param);
 8001fcc:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fd0:	4813      	ldr	r0, [pc, #76]	; (8002020 <_Z15set_pid1_paramsiPPc+0x150>)
 8001fd2:	f7ff f9ed 	bl	80013b0 <_ZN10controllib11generic_pid6set_kdEd>
		save_kd(param);
 8001fd6:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fda:	f7ff fe93 	bl	8001d04 <_ZN13configuration9l1_params7save_kdEd>
		break;
 8001fde:	e019      	b.n	8002014 <_Z15set_pid1_paramsiPPc+0x144>
	case 'b':
		tilt_angle_controller.set_bias(param);
 8001fe0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <_Z15set_pid1_paramsiPPc+0x150>)
 8001fe6:	f7ff f9f4 	bl	80013d2 <_ZN10controllib11generic_pid8set_biasEd>
		save_bias(param);
 8001fea:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001fee:	f7ff fe9d 	bl	8001d2c <_ZN13configuration9l1_params9save_biasEd>
		break;
 8001ff2:	e00f      	b.n	8002014 <_Z15set_pid1_paramsiPPc+0x144>
	case 'x':
		tilt_angle_controller.update_setpoint(param);
 8001ff4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <_Z15set_pid1_paramsiPPc+0x150>)
 8001ffa:	f7ff f9fb 	bl	80013f4 <_ZN10controllib11generic_pid15update_setpointEd>
		break;
 8001ffe:	e009      	b.n	8002014 <_Z15set_pid1_paramsiPPc+0x144>
	default:
		printf("Invalid Argument 0x%x\r\n", argv[1][0]);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3304      	adds	r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <_Z15set_pid1_paramsiPPc+0x154>)
 800200c:	f00b f934 	bl	800d278 <iprintf>
		return EXIT_FAILURE;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <_Z15set_pid1_paramsiPPc+0x146>
		break;
	}

	return EXIT_SUCCESS;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	373c      	adds	r7, #60	; 0x3c
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
 8002020:	20000448 	.word	0x20000448
 8002024:	08010904 	.word	0x08010904

08002028 <_Z12tilt_requestiPPc>:

uint8_t tilt_request(int argc, char *argv[]) {
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b08b      	sub	sp, #44	; 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
// IO Access needs to be done via direct Register Access! NO HAL!
//	for(int i=0;i<10;i++){
//	GPIOA->ODR^=1<<5;  // blink the led//	  HAL_Delay(500);
//	HAL_Delay(100);
//}
	int t = std::stoi(argv[2]);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3308      	adds	r3, #8
 8002036:	681c      	ldr	r4, [r3, #0]
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4618      	mov	r0, r3
 800203e:	f009 fc2b 	bl	800b898 <_ZNSaIcEC1Ev>
 8002042:	f107 0220 	add.w	r2, r7, #32
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	4621      	mov	r1, r4
 800204c:	4618      	mov	r0, r3
 800204e:	f009 fca1 	bl	800b994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	220a      	movs	r2, #10
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fe10 	bl	8001c80 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002060:	6278      	str	r0, [r7, #36]	; 0x24
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f009 fc67 	bl	800b93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4618      	mov	r0, r3
 8002072:	f009 fc12 	bl	800b89a <_ZNSaIcED1Ev>
	if (strcmp(argv[1], "down") == 0) {
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	491f      	ldr	r1, [pc, #124]	; (80020fc <_Z12tilt_requestiPPc+0xd4>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f91e 	bl	80002c0 <strcmp>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <_Z12tilt_requestiPPc+0x7a>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot CC", sizeof(argv[1]), 10);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002090:	481b      	ldr	r0, [pc, #108]	; (8002100 <_Z12tilt_requestiPPc+0xd8>)
 8002092:	f003 fe3b 	bl	8005d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	2104      	movs	r1, #4
 800209a:	481a      	ldr	r0, [pc, #104]	; (8002104 <_Z12tilt_requestiPPc+0xdc>)
 800209c:	f003 fe36 	bl	8005d0c <HAL_GPIO_WritePin>
 80020a0:	e017      	b.n	80020d2 <_Z12tilt_requestiPPc+0xaa>
	} else if (strcmp(argv[1], "up") == 0) {
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3304      	adds	r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4917      	ldr	r1, [pc, #92]	; (8002108 <_Z12tilt_requestiPPc+0xe0>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f908 	bl	80002c0 <strcmp>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <_Z12tilt_requestiPPc+0xa6>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot AC", sizeof(argv[1]), 10);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	4810      	ldr	r0, [pc, #64]	; (8002100 <_Z12tilt_requestiPPc+0xd8>)
 80020be:	f003 fe25 	bl	8005d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2104      	movs	r1, #4
 80020c6:	480f      	ldr	r0, [pc, #60]	; (8002104 <_Z12tilt_requestiPPc+0xdc>)
 80020c8:	f003 fe20 	bl	8005d0c <HAL_GPIO_WritePin>
 80020cc:	e001      	b.n	80020d2 <_Z12tilt_requestiPPc+0xaa>
	} else {
		return EXIT_FAILURE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <_Z12tilt_requestiPPc+0xca>
	}

	// Wont work, bad hal stuff!
	//HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
	HAL_Delay(t);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fbbd 	bl	8004854 <HAL_Delay>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <_Z12tilt_requestiPPc+0xd8>)
 80020e2:	f003 fe13 	bl	8005d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2104      	movs	r1, #4
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <_Z12tilt_requestiPPc+0xdc>)
 80020ec:	f003 fe0e 	bl	8005d0c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
	return EXIT_SUCCESS;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	372c      	adds	r7, #44	; 0x2c
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0801091c 	.word	0x0801091c
 8002100:	48000800 	.word	0x48000800
 8002104:	48000c00 	.word	0x48000c00
 8002108:	08010924 	.word	0x08010924

0800210c <_ZL11BufferCmp8bPhS_t>:
  * @retval
  *   0: pBuffer1 identical to pBuffer2
  *   1: pBuffer1 differs from pBuffer2
  */
static uint32_t BufferCmp8b(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	80fa      	strh	r2, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <_ZL11BufferCmp8bPhS_t+0x40>
  {
    if(*pBuffer1 != *pBuffer2)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <_ZL11BufferCmp8bPhS_t+0x32>
    {
      return 1;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <_ZL11BufferCmp8bPhS_t+0x42>
    }

    pBuffer1++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3301      	adds	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
  while(BufferLength--)
 800214a:	e7e6      	b.n	800211a <_ZL11BufferCmp8bPhS_t+0xe>
  }
  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8002162:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002164:	f002 fb06 	bl	8004774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002168:	f000 fa38 	bl	80025dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216c:	f000 fc78 	bl	8002a60 <_ZL12MX_GPIO_Initv>
  MX_I2C3_Init();
 8002170:	f000 fad6 	bl	8002720 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8002174:	f000 fc14 	bl	80029a0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM5_Init();
 8002178:	f000 fb20 	bl	80027bc <_ZL12MX_TIM5_Initv>
  MX_USART1_UART_Init();
 800217c:	f000 fbb0 	bl	80028e0 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 8002180:	f000 fa82 	bl	8002688 <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
#define DEV_ADDR 0xa0
uint8_t dataw1[] = "hello world from EEPROM";
 8002184:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <main+0x1a0>)
 8002186:	f507 74ce 	add.w	r4, r7, #412	; 0x19c
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002194:	e884 0003 	stmia.w	r4, {r0, r1}
uint8_t dataw2[] = "This is the second string from EEPROM";
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <main+0x1a4>)
 800219a:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 800219e:	461d      	mov	r5, r3
 80021a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ac:	6020      	str	r0, [r4, #0]
 80021ae:	3404      	adds	r4, #4
 80021b0:	8021      	strh	r1, [r4, #0]
float dataw3 = 1234.5678;
 80021b2:	4b54      	ldr	r3, [pc, #336]	; (8002304 <main+0x1a8>)
 80021b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
float datar3;
//for (int i=0; i<512; i++)
//  {
//	  EEPROM_PageErase(i);
//  }
  EEPROM_Write(3, 0, dataw1, strlen((char *)dataw1));
 80021b8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f889 	bl	80002d4 <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80021ca:	2100      	movs	r1, #0
 80021cc:	2003      	movs	r0, #3
 80021ce:	f7fe ff5f 	bl	8001090 <_Z12EEPROM_WritettPht>
  EEPROM_Write(5, 20, dataw2, strlen((char *)dataw2));
 80021d2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f87c 	bl	80002d4 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80021e4:	2114      	movs	r1, #20
 80021e6:	2005      	movs	r0, #5
 80021e8:	f7fe ff52 	bl	8001090 <_Z12EEPROM_WritettPht>
  EEPROM_Write_NUM (6, 0, dataw3);
 80021ec:	ed97 0a72 	vldr	s0, [r7, #456]	; 0x1c8
 80021f0:	2100      	movs	r1, #0
 80021f2:	2006      	movs	r0, #6
 80021f4:	f7fe fff2 	bl	80011dc <_Z16EEPROM_Write_NUMttf>
  EEPROM_Read(3, 0, datar1, 50);
 80021f8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021fc:	2332      	movs	r3, #50	; 0x32
 80021fe:	2100      	movs	r1, #0
 8002200:	2003      	movs	r0, #3
 8002202:	f7ff f823 	bl	800124c <_Z11EEPROM_ReadttPht>
  EEPROM_Read(5, 15, datar2, 50);
 8002206:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800220a:	2332      	movs	r3, #50	; 0x32
 800220c:	210f      	movs	r1, #15
 800220e:	2005      	movs	r0, #5
 8002210:	f7ff f81c 	bl	800124c <_Z11EEPROM_ReadttPht>
  datar3 = EEPROM_Read_NUM (6, 0);
 8002214:	2100      	movs	r1, #0
 8002216:	2006      	movs	r0, #6
 8002218:	f7fe fffc 	bl	8001214 <_Z15EEPROM_Read_NUMtt>
 800221c:	ed87 0a71 	vstr	s0, [r7, #452]	; 0x1c4

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002220:	2104      	movs	r1, #4
 8002222:	4839      	ldr	r0, [pc, #228]	; (8002308 <main+0x1ac>)
 8002224:	f006 f81c 	bl	8008260 <HAL_TIM_PWM_Start>
	CLI_INIT(&huart2);
 8002228:	4838      	ldr	r0, [pc, #224]	; (800230c <main+0x1b0>)
 800222a:	f001 f923 	bl	8003474 <cli_init>
	CLI_ADD_CMD("tilt", "tilt [up] / [down] [ms-time=100]", tilt_request);
 800222e:	4a38      	ldr	r2, [pc, #224]	; (8002310 <main+0x1b4>)
 8002230:	4938      	ldr	r1, [pc, #224]	; (8002314 <main+0x1b8>)
 8002232:	4839      	ldr	r0, [pc, #228]	; (8002318 <main+0x1bc>)
 8002234:	f001 fe64 	bl	8003f00 <cli_add_command>
	CLI_ADD_CMD("set_pwm", "lambda[0...1000]", set_dutycycle);
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <main+0x1c0>)
 800223a:	4939      	ldr	r1, [pc, #228]	; (8002320 <main+0x1c4>)
 800223c:	4839      	ldr	r0, [pc, #228]	; (8002324 <main+0x1c8>)
 800223e:	f001 fe5f 	bl	8003f00 <cli_add_command>
	CLI_ADD_CMD("l1_param", "inner PID-Controller params:[p,i,d,b,x]",
 8002242:	4a39      	ldr	r2, [pc, #228]	; (8002328 <main+0x1cc>)
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <main+0x1d0>)
 8002246:	483a      	ldr	r0, [pc, #232]	; (8002330 <main+0x1d4>)
 8002248:	f001 fe5a 	bl	8003f00 <cli_add_command>
			set_pid1_params);
	CLI_RUN();
 800224c:	f001 fc74 	bl	8003b38 <cli_run>

	ICM20948_WE myIMU = ICM20948_WE(&hi2c3);
 8002250:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002254:	4937      	ldr	r1, [pc, #220]	; (8002334 <main+0x1d8>)
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f948 	bl	80014ec <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>

	if (!myIMU.init()) {
 800225c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f955 	bl	8001510 <_ZN11ICM20948_WE4initEv>
 8002266:	4603      	mov	r3, r0
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <main+0x11e>
		printf("ICM20948 does not respond\r\n");
 8002272:	4831      	ldr	r0, [pc, #196]	; (8002338 <main+0x1dc>)
 8002274:	f00b f89c 	bl	800d3b0 <puts>
 8002278:	e002      	b.n	8002280 <main+0x124>
	} else {
		printf("ICM20948 is connected\r\n");
 800227a:	4830      	ldr	r0, [pc, #192]	; (800233c <main+0x1e0>)
 800227c:	f00b f898 	bl	800d3b0 <puts>
	}
	myIMU.enableAcc(true);
 8002280:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f995 	bl	80015b6 <_ZN11ICM20948_WE9enableAccEb>

	myIMU.setAccRange(ICM20948_ACC_RANGE_2G);
 800228c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f9bf 	bl	8001616 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
	myIMU.setAccSampleRateDivider(10);
 8002298:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800229c:	210a      	movs	r1, #10
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fa42 	bl	8001728 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>
	myIMU.setAccDLPF(ICM20948_DLPF_6);
 80022a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022a8:	2106      	movs	r1, #6
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f9ed 	bl	800168a <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
//  myIMU.setAccOffsets(-16330.0, 16450.0, -16600.0, 16180.0, -16640.0, 16560.0);
//  myIMU.autoOffsets();
	printf("Done!\r\n");
 80022b0:	4823      	ldr	r0, [pc, #140]	; (8002340 <main+0x1e4>)
 80022b2:	f00b f87d 	bl	800d3b0 <puts>

	// Check if configuration eeprom responnds...
	for (uint8_t addr = 0; addr < 255; addr++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80022bc:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80022c0:	2bff      	cmp	r3, #255	; 0xff
 80022c2:	d041      	beq.n	8002348 <main+0x1ec>
		if (HAL_I2C_IsDeviceReady(&hi2c3, addr, 3, 10) == HAL_OK) {
 80022c4:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80022c8:	b299      	uxth	r1, r3
 80022ca:	230a      	movs	r3, #10
 80022cc:	2203      	movs	r2, #3
 80022ce:	4819      	ldr	r0, [pc, #100]	; (8002334 <main+0x1d8>)
 80022d0:	f004 fa18 	bl	8006704 <HAL_I2C_IsDeviceReady>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <main+0x194>
			printf("Found i2c device @ %04x\r\n", addr);
 80022e4:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80022e8:	4619      	mov	r1, r3
 80022ea:	4816      	ldr	r0, [pc, #88]	; (8002344 <main+0x1e8>)
 80022ec:	f00a ffc4 	bl	800d278 <iprintf>
	for (uint8_t addr = 0; addr < 255; addr++) {
 80022f0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80022f4:	3301      	adds	r3, #1
 80022f6:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80022fa:	e7df      	b.n	80022bc <main+0x160>
 80022fc:	080109fc 	.word	0x080109fc
 8002300:	08010a14 	.word	0x08010a14
 8002304:	449a522b 	.word	0x449a522b
 8002308:	200002d8 	.word	0x200002d8
 800230c:	200003b4 	.word	0x200003b4
 8002310:	08002029 	.word	0x08002029
 8002314:	08010928 	.word	0x08010928
 8002318:	0801094c 	.word	0x0801094c
 800231c:	08001e4d 	.word	0x08001e4d
 8002320:	08010954 	.word	0x08010954
 8002324:	08010968 	.word	0x08010968
 8002328:	08001ed1 	.word	0x08001ed1
 800232c:	08010970 	.word	0x08010970
 8002330:	08010998 	.word	0x08010998
 8002334:	2000028c 	.word	0x2000028c
 8002338:	080109a4 	.word	0x080109a4
 800233c:	080109c0 	.word	0x080109c0
 8002340:	080109d8 	.word	0x080109d8
 8002344:	080109e0 	.word	0x080109e0
	}

    FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002348:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800234c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8002354:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002358:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002360:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002364:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002368:	2202      	movs	r2, #2
 800236a:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800236c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002370:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002374:	2201      	movs	r2, #1
 8002376:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x321;
 8002378:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800237c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002380:	f240 3221 	movw	r2, #801	; 0x321
 8002384:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x7FF;
 8002386:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800238a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800238e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002392:	615a      	str	r2, [r3, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002394:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002398:	4619      	mov	r1, r3
 800239a:	4888      	ldr	r0, [pc, #544]	; (80025bc <main+0x460>)
 800239c:	f002 fdf2 	bl	8004f84 <HAL_FDCAN_ConfigFilter>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <main+0x258>
    {
      Error_Handler();
 80023b0:	f000 fc40 	bl	8002c34 <Error_Handler>
    }

    /* Configure global filter:
       Filter all remote frames with STD and EXT ID
       Reject non matching frames with STD ID and EXT ID */
    if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	2202      	movs	r2, #2
 80023bc:	2102      	movs	r1, #2
 80023be:	487f      	ldr	r0, [pc, #508]	; (80025bc <main+0x460>)
 80023c0:	f002 fe3a 	bl	8005038 <HAL_FDCAN_ConfigGlobalFilter>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <main+0x27c>
    {
      Error_Handler();
 80023d4:	f000 fc2e 	bl	8002c34 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	4877      	ldr	r0, [pc, #476]	; (80025bc <main+0x460>)
 80023de:	f002 ffa3 	bl	8005328 <HAL_FDCAN_ActivateNotification>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <main+0x29a>
    {
      Error_Handler();
 80023f2:	f000 fc1f 	bl	8002c34 <Error_Handler>
    }

    /* Prepare Tx Header */
    TxHeader.Identifier =0x321;
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <main+0x464>)
 80023f8:	f240 3221 	movw	r2, #801	; 0x321
 80023fc:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <main+0x464>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002404:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <main+0x464>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 800240a:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <main+0x464>)
 800240c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002410:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002412:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <main+0x464>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002418:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <main+0x464>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800241e:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <main+0x464>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <main+0x464>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <main+0x464>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    /* Start the FDCAN module on both FDCAN instances */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8002430:	4862      	ldr	r0, [pc, #392]	; (80025bc <main+0x460>)
 8002432:	f002 fe32 	bl	800509a <HAL_FDCAN_Start>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <main+0x2ee>
    {
      Error_Handler();
 8002446:	f000 fbf5 	bl	8002c34 <Error_Handler>
	configuration::l1_params::save_kp(1);
	configuration::l1_params::save_ki(2);
	configuration::l1_params::save_kd(0);
	configuration::l1_params::save_bias(0);
	*/
	auto c = configuration::l1_params::load_page();
 800244a:	f7ff fc83 	bl	8001d54 <_ZN13configuration9l1_params9load_pageEv>
 800244e:	eeb0 4a40 	vmov.f32	s8, s0
 8002452:	eef0 4a60 	vmov.f32	s9, s1
 8002456:	eeb0 5a41 	vmov.f32	s10, s2
 800245a:	eef0 5a61 	vmov.f32	s11, s3
 800245e:	eeb0 6a42 	vmov.f32	s12, s4
 8002462:	eef0 6a62 	vmov.f32	s13, s5
 8002466:	eeb0 7a43 	vmov.f32	s14, s6
 800246a:	eef0 7a63 	vmov.f32	s15, s7
 800246e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002472:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002476:	ed83 4b00 	vstr	d4, [r3]
 800247a:	ed83 5b02 	vstr	d5, [r3, #8]
 800247e:	ed83 6b04 	vstr	d6, [r3, #16]
 8002482:	ed83 7b06 	vstr	d7, [r3, #24]

	// Alle sensoren testen:
	Init::sensor_checkup(myIMU);
 8002486:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800248a:	f5a3 76b6 	sub.w	r6, r3, #364	; 0x16c
 800248e:	466d      	mov	r5, sp
 8002490:	f106 0410 	add.w	r4, r6, #16
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024ac:	f002 f89e 	bl	80045ec <_ZN4Init14sensor_checkupE11ICM20948_WE>
	Init::sensor_checkup(myIMU);
 80024b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024b4:	f5a3 76b6 	sub.w	r6, r3, #364	; 0x16c
 80024b8:	466d      	mov	r5, sp
 80024ba:	f106 0410 	add.w	r4, r6, #16
 80024be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80024d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024d6:	f002 f889 	bl	80045ec <_ZN4Init14sensor_checkupE11ICM20948_WE>
//	tilt_angle_controller.update_setpoint(0);
	double l1_check[5] = { -20, -10, 5, 10, 20 };
 80024da:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024e2:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <main+0x468>)
 80024e4:	461c      	mov	r4, r3
 80024e6:	4615      	mov	r5, r2
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024f4:	e884 0003 	stmia.w	r4, {r0, r1}
	int i = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80024fe:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <main+0x46c>)
 8002500:	492f      	ldr	r1, [pc, #188]	; (80025c0 <main+0x464>)
 8002502:	482e      	ldr	r0, [pc, #184]	; (80025bc <main+0x460>)
 8002504:	f002 fdf1 	bl	80050ea <HAL_FDCAN_AddMessageToTxFifoQ>
		CLI_RUN();
 8002508:	f001 fb16 	bl	8003b38 <cli_run>
						__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, dutycycle);
						HAL_Delay(10);
			}
		}
	#endif
		double y = tilt_angle_controller.calculate_output(
 800250c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002510:	f5a3 76b6 	sub.w	r6, r3, #364	; 0x16c
 8002514:	466d      	mov	r5, sp
 8002516:	f106 0410 	add.w	r4, r6, #16
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800252a:	e885 0003 	stmia.w	r5, {r0, r1}
 800252e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002532:	f001 fff5 	bl	8004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8002536:	eeb0 7a40 	vmov.f32	s14, s0
 800253a:	eef0 7a60 	vmov.f32	s15, s1
 800253e:	eeb0 0a47 	vmov.f32	s0, s14
 8002542:	eef0 0a67 	vmov.f32	s1, s15
 8002546:	4821      	ldr	r0, [pc, #132]	; (80025cc <main+0x470>)
 8002548:	f7fe ff65 	bl	8001416 <_ZN10controllib11generic_pid16calculate_outputEd>
 800254c:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
				Init::read_tilt_angle(myIMU));
		// Change Direction according to y's sign:
		if (y < 0) { // Raise the beam!
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800255c:	f7fe faf0 	bl	8000b40 <__aeabi_dcmplt>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <main+0x422>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <main+0x474>)
 800256e:	f003 fbcd 	bl	8005d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	2104      	movs	r1, #4
 8002576:	4817      	ldr	r0, [pc, #92]	; (80025d4 <main+0x478>)
 8002578:	f003 fbc8 	bl	8005d0c <HAL_GPIO_WritePin>
 800257c:	e00a      	b.n	8002594 <main+0x438>
		} else // Lower the beam!
		{
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <main+0x474>)
 8002586:	f003 fbc1 	bl	8005d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	2104      	movs	r1, #4
 800258e:	4811      	ldr	r0, [pc, #68]	; (80025d4 <main+0x478>)
 8002590:	f003 fbbc 	bl	8005d0c <HAL_GPIO_WritePin>
		}
		// Change the dutycycle according to y's absolute value
		int dutycycle = abs(y);
 8002594:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8002598:	f7fe fb10 	bl	8000bbc <__aeabi_d2iz>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bfb8      	it	lt
 80025a2:	425b      	neglt	r3, r3
 80025a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, dutycycle);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <main+0x47c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(100);
 80025b2:	2064      	movs	r0, #100	; 0x64
 80025b4:	f002 f94e 	bl	8004854 <HAL_Delay>
		//		  HAL_Delay(10);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 80025b8:	e7a1      	b.n	80024fe <main+0x3a2>
 80025ba:	bf00      	nop
 80025bc:	20000228 	.word	0x20000228
 80025c0:	20000480 	.word	0x20000480
 80025c4:	08010a40 	.word	0x08010a40
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000448 	.word	0x20000448
 80025d0:	48000800 	.word	0x48000800
 80025d4:	48000c00 	.word	0x48000c00
 80025d8:	200002d8 	.word	0x200002d8

080025dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	; 0x50
 80025e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	f107 0318 	add.w	r3, r7, #24
 80025e6:	2238      	movs	r2, #56	; 0x38
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 fd88 	bl	800c100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025fe:	2000      	movs	r0, #0
 8002600:	f004 fd40 	bl	8007084 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002612:	2302      	movs	r3, #2
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002616:	2302      	movs	r3, #2
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800261a:	2301      	movs	r3, #1
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800261e:	2314      	movs	r3, #20
 8002620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002622:	2302      	movs	r3, #2
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8002626:	2304      	movs	r3, #4
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800262a:	2302      	movs	r3, #2
 800262c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262e:	f107 0318 	add.w	r3, r7, #24
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fdda 	bl	80071ec <HAL_RCC_OscConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002648:	f000 faf4 	bl	8002c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264c:	230f      	movs	r3, #15
 800264e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002650:	2303      	movs	r3, #3
 8002652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2104      	movs	r1, #4
 8002664:	4618      	mov	r0, r3
 8002666:	f005 f8d9 	bl	800781c <HAL_RCC_ClockConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800267a:	f000 fadb 	bl	8002c34 <Error_Handler>
  }
}
 800267e:	bf00      	nop
 8002680:	3750      	adds	r7, #80	; 0x50
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <_ZL14MX_FDCAN1_Initv+0x94>)
 8002690:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026be:	2210      	movs	r2, #16
 80026c0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026c4:	223f      	movs	r2, #63	; 0x3f
 80026c6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026ca:	2210      	movs	r2, #16
 80026cc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026dc:	2205      	movs	r2, #5
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026e2:	2204      	movs	r2, #4
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <_ZL14MX_FDCAN1_Initv+0x90>)
 80026fa:	f002 fae9 	bl	8004cd0 <HAL_FDCAN_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800270e:	f000 fa91 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000228 	.word	0x20000228
 800271c:	40006400 	.word	0x40006400

08002720 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <_ZL12MX_I2C3_Initv+0x94>)
 8002728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <_ZL12MX_I2C3_Initv+0x98>)
 800272e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002738:	2201      	movs	r2, #1
 800273a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800275a:	4815      	ldr	r0, [pc, #84]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 800275c:	f003 fb2b 	bl	8005db6 <HAL_I2C_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8002770:	f000 fa60 	bl	8002c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	480e      	ldr	r0, [pc, #56]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002778:	f004 fbec 	bl	8006f54 <HAL_I2CEx_ConfigAnalogFilter>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 800278c:	f000 fa52 	bl	8002c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002790:	2100      	movs	r1, #0
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <_ZL12MX_I2C3_Initv+0x90>)
 8002794:	f004 fc29 	bl	8006fea <HAL_I2CEx_ConfigDigitalFilter>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf14      	ite	ne
 800279e:	2301      	movne	r3, #1
 80027a0:	2300      	moveq	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 80027a8:	f000 fa44 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000028c 	.word	0x2000028c
 80027b4:	40007800 	.word	0x40007800
 80027b8:	30909dec 	.word	0x30909dec

080027bc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08e      	sub	sp, #56	; 0x38
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027dc:	463b      	mov	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	615a      	str	r2, [r3, #20]
 80027ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 80027f0:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <_ZL12MX_TIM5_Initv+0x120>)
 80027f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 80027f4:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 8002802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002806:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002814:	4830      	ldr	r0, [pc, #192]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 8002816:	f005 fc6b 	bl	80080f0 <HAL_TIM_Base_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800282a:	f000 fa03 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002838:	4619      	mov	r1, r3
 800283a:	4827      	ldr	r0, [pc, #156]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 800283c:	f005 ff36 	bl	80086ac <HAL_TIM_ConfigClockSource>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8002850:	f000 f9f0 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002854:	4820      	ldr	r0, [pc, #128]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 8002856:	f005 fca2 	bl	800819e <HAL_TIM_PWM_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800286a:	f000 f9e3 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4816      	ldr	r0, [pc, #88]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 800287e:	f006 fcbf 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002892:	f000 f9cf 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002896:	2360      	movs	r3, #96	; 0x60
 8002898:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800289a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800289e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	2204      	movs	r2, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	480a      	ldr	r0, [pc, #40]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 80028b0:	f005 fde8 	bl	8008484 <HAL_TIM_PWM_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <_ZL12MX_TIM5_Initv+0x10c>
  {
    Error_Handler();
 80028c4:	f000 f9b6 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <_ZL12MX_TIM5_Initv+0x11c>)
 80028ca:	f000 fb79 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 80028ce:	bf00      	nop
 80028d0:	3738      	adds	r7, #56	; 0x38
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200002d8 	.word	0x200002d8
 80028dc:	40000c00 	.word	0x40000c00

080028e0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028e6:	4a2d      	ldr	r2, [pc, #180]	; (800299c <_ZL19MX_USART1_UART_Initv+0xbc>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002906:	220c      	movs	r2, #12
 8002908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002924:	2200      	movs	r2, #0
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002928:	481b      	ldr	r0, [pc, #108]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800292a:	f006 fcff 	bl	800932c <HAL_UART_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800293e:	f000 f979 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002942:	2100      	movs	r1, #0
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002946:	f008 fedc 	bl	800b702 <HAL_UARTEx_SetTxFifoThreshold>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800295a:	f000 f96b 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295e:	2100      	movs	r1, #0
 8002960:	480d      	ldr	r0, [pc, #52]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002962:	f008 ff0c 	bl	800b77e <HAL_UARTEx_SetRxFifoThreshold>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8002976:	f000 f95d 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800297c:	f008 fe88 	bl	800b690 <HAL_UARTEx_DisableFifoMode>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002990:	f000 f950 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000324 	.word	0x20000324
 800299c:	40013800 	.word	0x40013800

080029a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029a6:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <_ZL19MX_USART2_UART_Initv+0xbc>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029e8:	481b      	ldr	r0, [pc, #108]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80029ea:	f006 fc9f 	bl	800932c <HAL_UART_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80029fe:	f000 f919 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a02:	2100      	movs	r1, #0
 8002a04:	4814      	ldr	r0, [pc, #80]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002a06:	f008 fe7c 	bl	800b702 <HAL_UARTEx_SetTxFifoThreshold>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8002a1a:	f000 f90b 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1e:	2100      	movs	r1, #0
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002a22:	f008 feac 	bl	800b77e <HAL_UARTEx_SetRxFifoThreshold>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8002a36:	f000 f8fd 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002a3c:	f008 fe28 	bl	800b690 <HAL_UARTEx_DisableFifoMode>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002a50:	f000 f8f0 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200003b4 	.word	0x200003b4
 8002a5c:	40004400 	.word	0x40004400

08002a60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a82:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a94:	f043 0320 	orr.w	r3, r3, #32
 8002a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	4a36      	ldr	r2, [pc, #216]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <_ZL12MX_GPIO_Initv+0x13c>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2120      	movs	r1, #32
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af6:	f003 f909 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b00:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <_ZL12MX_GPIO_Initv+0x140>)
 8002b02:	f003 f903 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4826      	ldr	r0, [pc, #152]	; (8002ba4 <_ZL12MX_GPIO_Initv+0x144>)
 8002b0c:	f003 f8fe 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4619      	mov	r1, r3
 8002b26:	481e      	ldr	r0, [pc, #120]	; (8002ba0 <_ZL12MX_GPIO_Initv+0x140>)
 8002b28:	f002 ff6e 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f002 ff5f 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 8002b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	480f      	ldr	r0, [pc, #60]	; (8002ba0 <_ZL12MX_GPIO_Initv+0x140>)
 8002b64:	f002 ff50 	bl	8005a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <_ZL12MX_GPIO_Initv+0x144>)
 8002b80:	f002 ff42 	bl	8005a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2028      	movs	r0, #40	; 0x28
 8002b8a:	f001 ff9a 	bl	8004ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b8e:	2028      	movs	r0, #40	; 0x28
 8002b90:	f001 ffb1 	bl	8004af6 <HAL_NVIC_EnableIRQ>

}
 8002b94:	bf00      	nop
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00

08002ba8 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02c      	beq.n	8002c16 <HAL_FDCAN_RxFifo0Callback+0x6e>
  {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc2:	f003 f8bb 	bl	8005d3c <HAL_GPIO_TogglePin>

    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8002bc8:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f002 fad1 	bl	8005174 <HAL_FDCAN_GetRxMessage>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
    {
      //Error_Handler();
    }
    for(int i=0;i<16;i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	dc0b      	bgt.n	8002bf8 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
    	printf("%04x ",RxData[i]);
 8002be0:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	480f      	ldr	r0, [pc, #60]	; (8002c28 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8002bec:	f00a fb44 	bl	800d278 <iprintf>
    for(int i=0;i<16;i++)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e7f0      	b.n	8002bda <HAL_FDCAN_RxFifo0Callback+0x32>
    }
    printf("\r\n");
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <HAL_FDCAN_RxFifo0Callback+0x84>)
 8002bfa:	f00a fbd9 	bl	800d3b0 <puts>
    /* Compare payload to expected data */
    if (BufferCmp8b(TxData, RxData, 16) != 0)
 8002bfe:	2210      	movs	r2, #16
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8002c04:	f7ff fa82 	bl	800210c <_ZL11BufferCmp8bPhS_t>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
        /* Turn LED4 on */
     //   BSP_LED_On(LED4);
      }
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200004cc 	.word	0x200004cc
 8002c24:	200004a4 	.word	0x200004a4
 8002c28:	08010a68 	.word	0x08010a68
 8002c2c:	08010a70 	.word	0x08010a70
 8002c30:	20000000 	.word	0x20000000

08002c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c38:	b672      	cpsid	i
}
 8002c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c3c:	e7fe      	b.n	8002c3c <Error_Handler+0x8>

08002c3e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	f009 f809 	bl	800bc5c <__errno>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f009 f803 	bl	800bc5c <__errno>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	f008 fff5 	bl	800bc5c <__errno>
 8002c72:	4603      	mov	r3, r0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002c84:	f008 ffea 	bl	800bc5c <__errno>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002ca4:	2300      	movs	r3, #0
	  }
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002cb2:	b590      	push	{r4, r7, lr}
 8002cb4:	b08b      	sub	sp, #44	; 0x2c
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffba 	bl	8002c3e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002cca:	f107 0118 	add.w	r1, r7, #24
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d102      	bne.n	8002ce6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8002ce0:	68b8      	ldr	r0, [r7, #8]
 8002ce2:	f008 fde1 	bl	800b8a8 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002ce6:	f008 ffb9 	bl	800bc5c <__errno>
 8002cea:	4603      	mov	r3, r0
 8002cec:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002cee:	2b22      	cmp	r3, #34	; 0x22
 8002cf0:	d006      	beq.n	8002d00 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf6:	f7ff ffd0 	bl	8002c9a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002d04:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002d0a:	68b8      	ldr	r0, [r7, #8]
 8002d0c:	f008 fdd2 	bl	800b8b4 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	601a      	str	r2, [r3, #0]

      return __ret;
 8002d26:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff9a 	bl	8002c66 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002d32:	4623      	mov	r3, r4
    }
 8002d34:	4618      	mov	r0, r3
 8002d36:	372c      	adds	r7, #44	; 0x2c
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	0000      	movs	r0, r0
	...

08002d40 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d111      	bne.n	8002d74 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <_Z41__static_initialization_and_destruction_0ii+0x34>
controllib::generic_pid tilt_angle_controller(20, 0, 0, 0, 10); // Kp = 1 ,Ts= 10ms
 8002d5a:	ed9f 4b09 	vldr	d4, [pc, #36]	; 8002d80 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002d5e:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 8002d88 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002d62:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8002d88 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002d66:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8002d88 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002d6a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002d90 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002d6e:	480a      	ldr	r0, [pc, #40]	; (8002d98 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002d70:	f7fe face 	bl	8001310 <_ZN10controllib11generic_pidC1Eddddd>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	f3af 8000 	nop.w
 8002d80:	00000000 	.word	0x00000000
 8002d84:	40240000 	.word	0x40240000
	...
 8002d94:	40340000 	.word	0x40340000
 8002d98:	20000448 	.word	0x20000448

08002d9c <_GLOBAL__sub_I__ZN13configuration9l1_params7save_kpEd>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002da4:	2001      	movs	r0, #1
 8002da6:	f7ff ffcb 	bl	8002d40 <_Z41__static_initialization_and_destruction_0ii>
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_MspInit+0x44>)
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_MspInit+0x44>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_MspInit+0x44>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_MspInit+0x44>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_MspInit+0x44>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_MspInit+0x44>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002de2:	f004 f9f3 	bl	80071cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b09e      	sub	sp, #120	; 0x78
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	2254      	movs	r2, #84	; 0x54
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f009 f973 	bl	800c100 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_FDCAN_MspInit+0xcc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d148      	bne.n	8002eb6 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 ff0d 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002e40:	f7ff fef8 	bl	8002c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_FDCAN_MspInit+0xd0>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e78:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002e86:	2309      	movs	r3, #9
 8002e88:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <HAL_FDCAN_MspInit+0xd4>)
 8002e92:	f002 fdb9 	bl	8005a08 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2015      	movs	r0, #21
 8002e9c:	f001 fe11 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002ea0:	2015      	movs	r0, #21
 8002ea2:	f001 fe28 	bl	8004af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	2016      	movs	r0, #22
 8002eac:	f001 fe09 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002eb0:	2016      	movs	r0, #22
 8002eb2:	f001 fe20 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3778      	adds	r7, #120	; 0x78
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40006400 	.word	0x40006400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	48000400 	.word	0x48000400

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b09e      	sub	sp, #120	; 0x78
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2254      	movs	r2, #84	; 0x54
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f009 f907 	bl	800c100 <memset>
  if(hi2c->Instance==I2C3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_I2C_MspInit+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d137      	bne.n	8002f6c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fea2 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002f16:	f7ff fe8d 	bl	8002c34 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f38:	2312      	movs	r3, #18
 8002f3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002f44:	2308      	movs	r3, #8
 8002f46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480b      	ldr	r0, [pc, #44]	; (8002f7c <HAL_I2C_MspInit+0xb0>)
 8002f50:	f002 fd5a 	bl	8005a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_I2C_MspInit+0xac>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3778      	adds	r7, #120	; 0x78
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40007800 	.word	0x40007800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	48000800 	.word	0x48000800

08002f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_TIM_Base_MspInit+0x38>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10b      	bne.n	8002faa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_TIM_Base_MspInit+0x3c>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_TIM_Base_MspInit+0x3c>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_TIM_Base_MspInit+0x3c>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_TIM_MspPostInit+0x64>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d11c      	bne.n	800301c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_TIM_MspPostInit+0x68>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_TIM_MspPostInit+0x68>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_TIM_MspPostInit+0x68>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800300c:	2301      	movs	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4619      	mov	r1, r3
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <HAL_TIM_MspPostInit+0x6c>)
 8003018:	f002 fcf6 	bl	8005a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800301c:	bf00      	nop
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40021000 	.word	0x40021000
 800302c:	48000800 	.word	0x48000800

08003030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0a0      	sub	sp, #128	; 0x80
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	2254      	movs	r2, #84	; 0x54
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f009 f855 	bl	800c100 <memset>
  if(huart->Instance==USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a41      	ldr	r2, [pc, #260]	; (8003160 <HAL_UART_MspInit+0x130>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d136      	bne.n	80030ce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003060:	2301      	movs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003068:	f107 0318 	add.w	r3, r7, #24
 800306c:	4618      	mov	r0, r3
 800306e:	f004 fdf1 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003078:	f7ff fddc 	bl	8002c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_UART_MspInit+0x134>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_UART_MspInit+0x134>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6613      	str	r3, [r2, #96]	; 0x60
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_UART_MspInit+0x134>)
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_UART_MspInit+0x134>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_UART_MspInit+0x134>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_UART_MspInit+0x134>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030ac:	2330      	movs	r3, #48	; 0x30
 80030ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030bc:	2307      	movs	r3, #7
 80030be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030c4:	4619      	mov	r1, r3
 80030c6:	4828      	ldr	r0, [pc, #160]	; (8003168 <HAL_UART_MspInit+0x138>)
 80030c8:	f002 fc9e 	bl	8005a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030cc:	e043      	b.n	8003156 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a26      	ldr	r2, [pc, #152]	; (800316c <HAL_UART_MspInit+0x13c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d13e      	bne.n	8003156 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030d8:	2302      	movs	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030dc:	2300      	movs	r3, #0
 80030de:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e0:	f107 0318 	add.w	r3, r7, #24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fdb5 	bl	8007c54 <HAL_RCCEx_PeriphCLKConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80030f0:	f7ff fda0 	bl	8002c34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_UART_MspInit+0x134>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_UART_MspInit+0x134>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_UART_MspInit+0x134>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_UART_MspInit+0x134>)
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_UART_MspInit+0x134>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_UART_MspInit+0x134>)
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003124:	230c      	movs	r3, #12
 8003126:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003134:	2307      	movs	r3, #7
 8003136:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800313c:	4619      	mov	r1, r3
 800313e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003142:	f002 fc61 	bl	8005a08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2026      	movs	r0, #38	; 0x26
 800314c:	f001 fcb9 	bl	8004ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003150:	2026      	movs	r0, #38	; 0x26
 8003152:	f001 fcd0 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3780      	adds	r7, #128	; 0x80
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40013800 	.word	0x40013800
 8003164:	40021000 	.word	0x40021000
 8003168:	48000800 	.word	0x48000800
 800316c:	40004400 	.word	0x40004400

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x4>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031bc:	f001 fb2c 	bl	8004818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80031ca:	f002 f993 	bl	80054f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000228 	.word	0x20000228

080031d8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <FDCAN1_IT1_IRQHandler+0x10>)
 80031de:	f002 f989 	bl	80054f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000228 	.word	0x20000228

080031ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <USART2_IRQHandler+0x10>)
 80031f2:	f006 fa7f 	bl	80096f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200003b4 	.word	0x200003b4

08003200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003208:	f002 fdb2 	bl	8005d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <_write>:
 * 	These functions need to be redefined over the [_weak] versions defined by
 * 	GCC (or in syscalls.c by cubeMX) to make the stdio library functional.
 *
 ******************************************************************************/

int _write(int file, char *data, int len){
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
	if(file != STDOUT_FILENO && file != STDERR_FILENO){
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d00a      	beq.n	8003238 <_write+0x28>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d007      	beq.n	8003238 <_write+0x28>
		errno = EBADF;
 8003228:	f008 fd18 	bl	800bc5c <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	2209      	movs	r2, #9
 8003230:	601a      	str	r2, [r3, #0]
		return -1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003236:	e041      	b.n	80032bc <_write+0xac>
	}

	if(cli_password_ok == false){
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <_write+0xb4>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <_write+0x3a>
		return len;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	e038      	b.n	80032bc <_write+0xac>
	}

	HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

	if (!(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) ) {
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <_write+0xb8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <_write+0x7e>
		cli_tx_isr_flag = true;
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <_write+0xbc>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
		/* Disable interrupts to prevent UART from throwing an RX interrupt while the peripheral is locked as
		 * this would prevent the RX interrupt from restarting HAL_UART_Receive_IT  */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003260:	2025      	movs	r0, #37	; 0x25
 8003262:	f001 fc56 	bl	8004b12 <HAL_NVIC_DisableIRQ>

		/* Transmits with interrupts. This must be done this way so that we can re-activate USART interrupts
		 * before the transfer terminates so that we can continue reading from the terminal*/
		status = HAL_UART_Transmit_IT(huart_shell, (uint8_t *)data, len);
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <_write+0xc0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	b292      	uxth	r2, r2
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f006 f941 	bl	80094f8 <HAL_UART_Transmit_IT>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]

		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800327a:	2025      	movs	r0, #37	; 0x25
 800327c:	f001 fc3b 	bl	8004af6 <HAL_NVIC_EnableIRQ>

		/* Wait for the transfer to terminate*/
		while(cli_tx_isr_flag == true){
 8003280:	bf00      	nop
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <_write+0xbc>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1fa      	bne.n	8003282 <_write+0x72>
 800328c:	e010      	b.n	80032b0 <_write+0xa0>
			/* flag will be set to false in HAL_UART_TxCpltCallback*/
		}
	}else{
		/* We are called from an interrupt, using Transmit_IT would not work */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 800328e:	2025      	movs	r0, #37	; 0x25
 8003290:	f001 fc3f 	bl	8004b12 <HAL_NVIC_DisableIRQ>
		status = HAL_UART_Transmit(huart_shell, (uint8_t *)data, len, 1000);
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <_write+0xc0>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b29a      	uxth	r2, r3
 800329c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	f006 f893 	bl	80093cc <HAL_UART_Transmit>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032aa:	2025      	movs	r0, #37	; 0x25
 80032ac:	f001 fc23 	bl	8004af6 <HAL_NVIC_EnableIRQ>
	}



	if(status == HAL_OK){
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <_write+0xaa>
		return len;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e000      	b.n	80032bc <_write+0xac>
	}else{
		return 0;
 80032ba:	2300      	movs	r3, #0
	}
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200009af 	.word	0x200009af
 80032c8:	e000ed00 	.word	0xe000ed00
 80032cc:	200009b0 	.word	0x200009b0
 80032d0:	20000508 	.word	0x20000508

080032d4 <cli_history_add>:
  * @brief          add a command to the history
  * @param  buff:   command
  * @retval         null
  */
static void cli_history_add(char* buff)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    uint16_t len;
    uint8_t index = history.latest;
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <cli_history_add+0xe4>)
 80032de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80032e2:	73fb      	strb	r3, [r7, #15]

    if (NULL == buff) return;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d060      	beq.n	80033ac <cli_history_add+0xd8>

    len = strlen((const char *)buff);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fc fff2 	bl	80002d4 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	81bb      	strh	r3, [r7, #12]
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	2b4f      	cmp	r3, #79	; 0x4f
 80032f8:	d85a      	bhi.n	80033b0 <cli_history_add+0xdc>

    /* find the latest one */
    if (0 != index) {
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <cli_history_add+0x34>
        index--;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3b01      	subs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e001      	b.n	800330c <cli_history_add+0x38>
    } else {
        index = HISTORY_MAX - 1;
 8003308:	2309      	movs	r3, #9
 800330a:	73fb      	strb	r3, [r7, #15]
    }

    if (0 != memcmp(history.cmd[index], buff, len)) {
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <cli_history_add+0xe4>)
 8003318:	4413      	add	r3, r2
 800331a:	89ba      	ldrh	r2, [r7, #12]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	f008 feb6 	bl	800c090 <memcmp>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03b      	beq.n	80033a2 <cli_history_add+0xce>
        /* if the new one is different with the latest one, the save */
        memset((void *)history.cmd[history.latest], 0x00, MAX_LINE_LEN);
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <cli_history_add+0xe4>)
 800332c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8003330:	461a      	mov	r2, r3
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <cli_history_add+0xe4>)
 800333c:	4413      	add	r3, r2
 800333e:	2250      	movs	r2, #80	; 0x50
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f008 fedc 	bl	800c100 <memset>
        memcpy((void *)history.cmd[history.latest], (const void *)buff, len);
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <cli_history_add+0xe4>)
 800334a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800334e:	461a      	mov	r2, r3
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <cli_history_add+0xe4>)
 800335a:	4413      	add	r3, r2
 800335c:	89ba      	ldrh	r2, [r7, #12]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	f008 fea5 	bl	800c0b0 <memcpy>
        if (history.count < HISTORY_MAX) {
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <cli_history_add+0xe4>)
 8003368:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800336c:	2b09      	cmp	r3, #9
 800336e:	d807      	bhi.n	8003380 <cli_history_add+0xac>
            history.count++;
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <cli_history_add+0xe4>)
 8003372:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8003376:	3301      	adds	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <cli_history_add+0xe4>)
 800337c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
        }

        history.latest++;
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <cli_history_add+0xe4>)
 8003382:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <cli_history_add+0xe4>)
 800338c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        if (history.latest >= HISTORY_MAX) {
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <cli_history_add+0xe4>)
 8003392:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8003396:	2b09      	cmp	r3, #9
 8003398:	d903      	bls.n	80033a2 <cli_history_add+0xce>
            history.latest = 0;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <cli_history_add+0xe4>)
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        }
    }

    history.show = 0;
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <cli_history_add+0xe4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80033aa:	e002      	b.n	80033b2 <cli_history_add+0xde>
    if (NULL == buff) return;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <cli_history_add+0xde>
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80033b0:	bf00      	nop
}
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	2000068c 	.word	0x2000068c

080033bc <cli_history_show>:
  * @param  mode:       TRUE for look up, FALSE for look down
  * @param  p_history:  target history command
  * @retval             TRUE for no history found, FALSE for success
  */
static uint8_t cli_history_show(uint8_t mode, char** p_history)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
    uint8_t err = true;
 80033c8:	2301      	movs	r3, #1
 80033ca:	737b      	strb	r3, [r7, #13]
    uint8_t num;
    uint8_t index;

    if (0 == history.count) return err;
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <cli_history_show+0xb4>)
 80033ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <cli_history_show+0x1e>
 80033d6:	7b7b      	ldrb	r3, [r7, #13]
 80033d8:	e044      	b.n	8003464 <cli_history_show+0xa8>

    if (true == mode) {
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d110      	bne.n	8003402 <cli_history_show+0x46>
        /* look up */
        if (history.show < history.count) {
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <cli_history_show+0xb4>)
 80033e2:	f893 2322 	ldrb.w	r2, [r3, #802]	; 0x322
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <cli_history_show+0xb4>)
 80033e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d215      	bcs.n	800341c <cli_history_show+0x60>
            history.show++;
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <cli_history_show+0xb4>)
 80033f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <cli_history_show+0xb4>)
 80033fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8003400:	e00c      	b.n	800341c <cli_history_show+0x60>
        }
    } else {
        /* look down */
        if (1 < history.show) {
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <cli_history_show+0xb4>)
 8003404:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8003408:	2b01      	cmp	r3, #1
 800340a:	d907      	bls.n	800341c <cli_history_show+0x60>
            history.show--;
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <cli_history_show+0xb4>)
 800340e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8003412:	3b01      	subs	r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <cli_history_show+0xb4>)
 8003418:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
        }
    }

    num = history.show;
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <cli_history_show+0xb4>)
 800341e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8003422:	73fb      	strb	r3, [r7, #15]
    index = history.latest;
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <cli_history_show+0xb4>)
 8003426:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800342a:	73bb      	strb	r3, [r7, #14]
    while (num) {
 800342c:	e00b      	b.n	8003446 <cli_history_show+0x8a>
        if (0 != index) {
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <cli_history_show+0x80>
            index--;
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	3b01      	subs	r3, #1
 8003438:	73bb      	strb	r3, [r7, #14]
 800343a:	e001      	b.n	8003440 <cli_history_show+0x84>
        } else {
            index = HISTORY_MAX - 1;
 800343c:	2309      	movs	r3, #9
 800343e:	73bb      	strb	r3, [r7, #14]
        }
        num--;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3b01      	subs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
    while (num) {
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <cli_history_show+0x72>
    }

    err = false;
 800344c:	2300      	movs	r3, #0
 800344e:	737b      	strb	r3, [r7, #13]
    *p_history = history.cmd[index];
 8003450:	7bba      	ldrb	r2, [r7, #14]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4a05      	ldr	r2, [pc, #20]	; (8003470 <cli_history_show+0xb4>)
 800345c:	441a      	add	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	601a      	str	r2, [r3, #0]

    return err;
 8003462:	7b7b      	ldrb	r3, [r7, #13]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	2000068c 	.word	0x2000068c

08003474 <cli_init>:

void cli_init(UART_HandleTypeDef *handle_uart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	huart_shell = handle_uart;
 800347c:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <cli_init+0xc4>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
	shell_queue_init(&cli_rx_buff);
 8003482:	482e      	ldr	r0, [pc, #184]	; (800353c <cli_init+0xc8>)
 8003484:	f000 fee6 	bl	8004254 <shell_queue_init>
    memset((uint8_t *)&history, 0, sizeof(history));
 8003488:	f240 3223 	movw	r2, #803	; 0x323
 800348c:	2100      	movs	r1, #0
 800348e:	482c      	ldr	r0, [pc, #176]	; (8003540 <cli_init+0xcc>)
 8003490:	f008 fe36 	bl	800c100 <memset>

    HAL_UART_MspInit(huart_shell);
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <cli_init+0xc4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fdc9 	bl	8003030 <HAL_UART_MspInit>
    HAL_UART_Receive_IT(huart_shell, &cBuffer, 1);
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <cli_init+0xc4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	4927      	ldr	r1, [pc, #156]	; (8003544 <cli_init+0xd0>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f006 f8ce 	bl	8009648 <HAL_UART_Receive_IT>

    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e015      	b.n	80034de <cli_init+0x6a>
    	CLI_commands[j].pCmd = "";
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <cli_init+0xd4>)
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <cli_init+0xd8>)
 80034c2:	601a      	str	r2, [r3, #0]
    	CLI_commands[j].pFun = NULL;
 80034c4:	4920      	ldr	r1, [pc, #128]	; (8003548 <cli_init+0xd4>)
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3308      	adds	r3, #8
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b1f      	cmp	r3, #31
 80034e2:	d9e6      	bls.n	80034b2 <cli_init+0x3e>
    }

#ifndef CLI_PASSWORD
    cli_password_ok = true;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <cli_init+0xdc>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
    greet();
 80034ea:	f000 fb31 	bl	8003b50 <greet>
#endif

    CLI_ADD_CMD("help", cli_help_help, cli_help);
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <cli_init+0xe0>)
 80034f0:	4919      	ldr	r1, [pc, #100]	; (8003558 <cli_init+0xe4>)
 80034f2:	481a      	ldr	r0, [pc, #104]	; (800355c <cli_init+0xe8>)
 80034f4:	f000 fd04 	bl	8003f00 <cli_add_command>
    CLI_ADD_CMD("cls", cli_clear_help, cli_clear);
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <cli_init+0xec>)
 80034fa:	491a      	ldr	r1, [pc, #104]	; (8003564 <cli_init+0xf0>)
 80034fc:	481a      	ldr	r0, [pc, #104]	; (8003568 <cli_init+0xf4>)
 80034fe:	f000 fcff 	bl	8003f00 <cli_add_command>
    CLI_ADD_CMD("reset", cli_reset_help, cli_reset);
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <cli_init+0xf8>)
 8003504:	491a      	ldr	r1, [pc, #104]	; (8003570 <cli_init+0xfc>)
 8003506:	481b      	ldr	r0, [pc, #108]	; (8003574 <cli_init+0x100>)
 8003508:	f000 fcfa 	bl	8003f00 <cli_add_command>
    CLI_ADD_CMD("log", cli_log_help, cli_log);
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <cli_init+0x104>)
 800350e:	491b      	ldr	r1, [pc, #108]	; (800357c <cli_init+0x108>)
 8003510:	481b      	ldr	r0, [pc, #108]	; (8003580 <cli_init+0x10c>)
 8003512:	f000 fcf5 	bl	8003f00 <cli_add_command>

    if(CLI_LAST_LOG_CATEGORY > 32){
    	ERR("Too many log categories defined. The max number of log categories that can be user defined is 31.\n");
    }

    LOG(CLI_LOG_SHELL, "Command line successfully initialized.\n");
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <cli_init+0x110>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <cli_init+0xba>
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <cli_init+0x114>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	4818      	ldr	r0, [pc, #96]	; (800358c <cli_init+0x118>)
 800352a:	f009 fea5 	bl	800d278 <iprintf>

}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000508 	.word	0x20000508
 800353c:	200004e0 	.word	0x200004e0
 8003540:	2000068c 	.word	0x2000068c
 8003544:	200004dc 	.word	0x200004dc
 8003548:	2000050c 	.word	0x2000050c
 800354c:	08010ab0 	.word	0x08010ab0
 8003550:	200009af 	.word	0x200009af
 8003554:	08003d01 	.word	0x08003d01
 8003558:	080115e4 	.word	0x080115e4
 800355c:	08010ab4 	.word	0x08010ab4
 8003560:	08003e55 	.word	0x08003e55
 8003564:	080115f4 	.word	0x080115f4
 8003568:	08010abc 	.word	0x08010abc
 800356c:	08003eb1 	.word	0x08003eb1
 8003570:	08011608 	.word	0x08011608
 8003574:	08010ac0 	.word	0x08010ac0
 8003578:	08003fd5 	.word	0x08003fd5
 800357c:	08011614 	.word	0x08011614
 8003580:	08010ac8 	.word	0x08010ac8
 8003584:	20000020 	.word	0x20000020
 8003588:	20000004 	.word	0x20000004
 800358c:	08010acc 	.word	0x08010acc

08003590 <HAL_UART_RxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done receiving a char
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	shell_queue_in(&cli_rx_buff, &cBuffer);
 8003598:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_UART_RxCpltCallback+0x24>)
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <HAL_UART_RxCpltCallback+0x28>)
 800359c:	f000 fe9a 	bl	80042d4 <shell_queue_in>
	HAL_UART_Receive_IT(huart, &cBuffer, 1);
 80035a0:	2201      	movs	r2, #1
 80035a2:	4904      	ldr	r1, [pc, #16]	; (80035b4 <HAL_UART_RxCpltCallback+0x24>)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f006 f84f 	bl	8009648 <HAL_UART_Receive_IT>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200004dc 	.word	0x200004dc
 80035b8:	200004e0 	.word	0x200004e0

080035bc <HAL_UART_TxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done transmitting data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	cli_tx_isr_flag = false;
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_UART_TxCpltCallback+0x1c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	200009b0 	.word	0x200009b0

080035dc <cli_rx_handle>:
  * @brief  handle commands from the terminal
  * @param  commands
  * @retval null
  */
static void cli_rx_handle(shell_queue_s *rx_buff)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b091      	sub	sp, #68	; 0x44
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    static HANDLE_TYPE_S Handle = {.buff = {0},.len = 0};
    uint8_t i = Handle.len;
 80035e4:	4bb9      	ldr	r3, [pc, #740]	; (80038cc <cli_rx_handle+0x2f0>)
 80035e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cmd_match = false;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t exec_req = false;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*  ---------------------------------------
        Step1: save chars from the terminal
        ---------------------------------------
     */
    bool newChar = true;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    while(newChar) {
 8003600:	e15e      	b.n	80038c0 <cli_rx_handle+0x2e4>
        if(Handle.len < MAX_LINE_LEN) {  /* check the buffer */
 8003602:	4bb2      	ldr	r3, [pc, #712]	; (80038cc <cli_rx_handle+0x2f0>)
 8003604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003608:	2b4f      	cmp	r3, #79	; 0x4f
 800360a:	f200 8173 	bhi.w	80038f4 <cli_rx_handle+0x318>
        	newChar = shell_queue_out(rx_buff, Handle.buff+Handle.len);
 800360e:	4baf      	ldr	r3, [pc, #700]	; (80038cc <cli_rx_handle+0x2f0>)
 8003610:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003614:	461a      	mov	r2, r3
 8003616:	4bad      	ldr	r3, [pc, #692]	; (80038cc <cli_rx_handle+0x2f0>)
 8003618:	4413      	add	r3, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fe7a 	bl	8004316 <shell_queue_out>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

            /* new char coming from the terminal, copy it to Handle.buff */
            if(newChar) {
 8003630:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d069      	beq.n	800370c <cli_rx_handle+0x130>
                /* KEY_BACKSPACE -->get DELETE key from keyboard */
                if (Handle.buff[Handle.len] == KEY_BACKSPACE || Handle.buff[Handle.len] == KEY_DEL) {
 8003638:	4ba4      	ldr	r3, [pc, #656]	; (80038cc <cli_rx_handle+0x2f0>)
 800363a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800363e:	461a      	mov	r2, r3
 8003640:	4ba2      	ldr	r3, [pc, #648]	; (80038cc <cli_rx_handle+0x2f0>)
 8003642:	5c9b      	ldrb	r3, [r3, r2]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d007      	beq.n	8003658 <cli_rx_handle+0x7c>
 8003648:	4ba0      	ldr	r3, [pc, #640]	; (80038cc <cli_rx_handle+0x2f0>)
 800364a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800364e:	461a      	mov	r2, r3
 8003650:	4b9e      	ldr	r3, [pc, #632]	; (80038cc <cli_rx_handle+0x2f0>)
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	2b7f      	cmp	r3, #127	; 0x7f
 8003656:	d11c      	bne.n	8003692 <cli_rx_handle+0xb6>
                    /* buffer not empty */
                    if (Handle.len > 0) {
 8003658:	4b9c      	ldr	r3, [pc, #624]	; (80038cc <cli_rx_handle+0x2f0>)
 800365a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 812e 	beq.w	80038c0 <cli_rx_handle+0x2e4>
                        /* delete a char in terminal */
                        TERMINAL_MOVE_LEFT(1);
 8003664:	2101      	movs	r1, #1
 8003666:	489a      	ldr	r0, [pc, #616]	; (80038d0 <cli_rx_handle+0x2f4>)
 8003668:	f009 fe06 	bl	800d278 <iprintf>
                        TERMINAL_CLEAR_END();
 800366c:	4899      	ldr	r0, [pc, #612]	; (80038d4 <cli_rx_handle+0x2f8>)
 800366e:	f009 fe03 	bl	800d278 <iprintf>
                        Handle.buff[Handle.len] = '\0';
 8003672:	4b96      	ldr	r3, [pc, #600]	; (80038cc <cli_rx_handle+0x2f0>)
 8003674:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003678:	461a      	mov	r2, r3
 800367a:	4b94      	ldr	r3, [pc, #592]	; (80038cc <cli_rx_handle+0x2f0>)
 800367c:	2100      	movs	r1, #0
 800367e:	5499      	strb	r1, [r3, r2]
                        Handle.len--;
 8003680:	4b92      	ldr	r3, [pc, #584]	; (80038cc <cli_rx_handle+0x2f0>)
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003686:	3b01      	subs	r3, #1
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b90      	ldr	r3, [pc, #576]	; (80038cc <cli_rx_handle+0x2f0>)
 800368c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    if (Handle.len > 0) {
 8003690:	e116      	b.n	80038c0 <cli_rx_handle+0x2e4>
                    }

                } else if(Handle.buff[Handle.len] == KEY_ENTER){
 8003692:	4b8e      	ldr	r3, [pc, #568]	; (80038cc <cli_rx_handle+0x2f0>)
 8003694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003698:	461a      	mov	r2, r3
 800369a:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <cli_rx_handle+0x2f0>)
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	2b0d      	cmp	r3, #13
 80036a0:	d10b      	bne.n	80036ba <cli_rx_handle+0xde>
                	exec_req = true;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                	Handle.len++;
 80036a8:	4b88      	ldr	r3, [pc, #544]	; (80038cc <cli_rx_handle+0x2f0>)
 80036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4b86      	ldr	r3, [pc, #536]	; (80038cc <cli_rx_handle+0x2f0>)
 80036b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80036b8:	e102      	b.n	80038c0 <cli_rx_handle+0x2e4>
                }else if(strstr((const char *)Handle.buff, KEY_DELETE) != NULL){
 80036ba:	4987      	ldr	r1, [pc, #540]	; (80038d8 <cli_rx_handle+0x2fc>)
 80036bc:	4883      	ldr	r0, [pc, #524]	; (80038cc <cli_rx_handle+0x2f0>)
 80036be:	f009 ff3e 	bl	800d53e <strstr>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d018      	beq.n	80036fa <cli_rx_handle+0x11e>
                	strcpy((char *)&Handle.buff[Handle.len-3], (char *)&Handle.buff[Handle.len+1]);
 80036c8:	4b80      	ldr	r3, [pc, #512]	; (80038cc <cli_rx_handle+0x2f0>)
 80036ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ce:	3b03      	subs	r3, #3
 80036d0:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <cli_rx_handle+0x2f0>)
 80036d2:	441a      	add	r2, r3
 80036d4:	4b7d      	ldr	r3, [pc, #500]	; (80038cc <cli_rx_handle+0x2f0>)
 80036d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036da:	3301      	adds	r3, #1
 80036dc:	497b      	ldr	r1, [pc, #492]	; (80038cc <cli_rx_handle+0x2f0>)
 80036de:	440b      	add	r3, r1
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f009 ff23 	bl	800d52e <strcpy>
                	Handle.len -= 3;
 80036e8:	4b78      	ldr	r3, [pc, #480]	; (80038cc <cli_rx_handle+0x2f0>)
 80036ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ee:	3b03      	subs	r3, #3
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <cli_rx_handle+0x2f0>)
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80036f8:	e0e2      	b.n	80038c0 <cli_rx_handle+0x2e4>
            	}else{
                    Handle.len++;
 80036fa:	4b74      	ldr	r3, [pc, #464]	; (80038cc <cli_rx_handle+0x2f0>)
 80036fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003700:	3301      	adds	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b71      	ldr	r3, [pc, #452]	; (80038cc <cli_rx_handle+0x2f0>)
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800370a:	e0d9      	b.n	80038c0 <cli_rx_handle+0x2e4>
                }

            } else if(cli_password_ok){
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <cli_rx_handle+0x300>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80d5 	beq.w	80038c0 <cli_rx_handle+0x2e4>
                /* all chars copied to Handle.buff */
                uint8_t key = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                uint8_t err = 0xff;
 800371c:	23ff      	movs	r3, #255	; 0xff
 800371e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                char *p_hist_cmd = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28

                if (Handle.len >= 3) {
 8003726:	4b69      	ldr	r3, [pc, #420]	; (80038cc <cli_rx_handle+0x2f0>)
 8003728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800372c:	2b02      	cmp	r3, #2
 800372e:	f240 80a7 	bls.w	8003880 <cli_rx_handle+0x2a4>
                    if (strstr((const char *)Handle.buff, KEY_UP) != NULL) {
 8003732:	496b      	ldr	r1, [pc, #428]	; (80038e0 <cli_rx_handle+0x304>)
 8003734:	4865      	ldr	r0, [pc, #404]	; (80038cc <cli_rx_handle+0x2f0>)
 8003736:	f009 ff02 	bl	800d53e <strstr>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <cli_rx_handle+0x19e>
                        key = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <cli_rx_handle+0x2f0>)
 8003748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800374c:	2b03      	cmp	r3, #3
 800374e:	d907      	bls.n	8003760 <cli_rx_handle+0x184>
 8003750:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <cli_rx_handle+0x2f0>)
 8003752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003756:	3b03      	subs	r3, #3
 8003758:	4619      	mov	r1, r3
 800375a:	485d      	ldr	r0, [pc, #372]	; (80038d0 <cli_rx_handle+0x2f4>)
 800375c:	f009 fd8c 	bl	800d278 <iprintf>
                        TERMINAL_CLEAR_END();
 8003760:	485c      	ldr	r0, [pc, #368]	; (80038d4 <cli_rx_handle+0x2f8>)
 8003762:	f009 fd89 	bl	800d278 <iprintf>
                        err = cli_history_show(true, &p_hist_cmd);
 8003766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800376a:	4619      	mov	r1, r3
 800376c:	2001      	movs	r0, #1
 800376e:	f7ff fe25 	bl	80033bc <cli_history_show>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003778:	e038      	b.n	80037ec <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_DOWN) != NULL) {
 800377a:	495a      	ldr	r1, [pc, #360]	; (80038e4 <cli_rx_handle+0x308>)
 800377c:	4853      	ldr	r0, [pc, #332]	; (80038cc <cli_rx_handle+0x2f0>)
 800377e:	f009 fede 	bl	800d53e <strstr>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <cli_rx_handle+0x1e6>
                        key = 2;
 8003788:	2302      	movs	r3, #2
 800378a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 800378e:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <cli_rx_handle+0x2f0>)
 8003790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003794:	2b03      	cmp	r3, #3
 8003796:	d907      	bls.n	80037a8 <cli_rx_handle+0x1cc>
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <cli_rx_handle+0x2f0>)
 800379a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379e:	3b03      	subs	r3, #3
 80037a0:	4619      	mov	r1, r3
 80037a2:	484b      	ldr	r0, [pc, #300]	; (80038d0 <cli_rx_handle+0x2f4>)
 80037a4:	f009 fd68 	bl	800d278 <iprintf>
                        TERMINAL_CLEAR_END();
 80037a8:	484a      	ldr	r0, [pc, #296]	; (80038d4 <cli_rx_handle+0x2f8>)
 80037aa:	f009 fd65 	bl	800d278 <iprintf>
                        err = cli_history_show(false, &p_hist_cmd);
 80037ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b2:	4619      	mov	r1, r3
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7ff fe01 	bl	80033bc <cli_history_show>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80037c0:	e014      	b.n	80037ec <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_RIGHT) != NULL) {
 80037c2:	4949      	ldr	r1, [pc, #292]	; (80038e8 <cli_rx_handle+0x30c>)
 80037c4:	4841      	ldr	r0, [pc, #260]	; (80038cc <cli_rx_handle+0x2f0>)
 80037c6:	f009 feba 	bl	800d53e <strstr>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <cli_rx_handle+0x1fc>
                        key = 3;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80037d6:	e009      	b.n	80037ec <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_LEFT) != NULL) {
 80037d8:	4944      	ldr	r1, [pc, #272]	; (80038ec <cli_rx_handle+0x310>)
 80037da:	483c      	ldr	r0, [pc, #240]	; (80038cc <cli_rx_handle+0x2f0>)
 80037dc:	f009 feaf 	bl	800d53e <strstr>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <cli_rx_handle+0x210>
                        key = 4;
 80037e6:	2304      	movs	r3, #4
 80037e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }

                    if (key != 0) {
 80037ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d045      	beq.n	8003880 <cli_rx_handle+0x2a4>
                        if (!err) {
 80037f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d124      	bne.n	8003846 <cli_rx_handle+0x26a>
                            memset(&Handle, 0x00, sizeof(Handle));
 80037fc:	2251      	movs	r2, #81	; 0x51
 80037fe:	2100      	movs	r1, #0
 8003800:	4832      	ldr	r0, [pc, #200]	; (80038cc <cli_rx_handle+0x2f0>)
 8003802:	f008 fc7d 	bl	800c100 <memset>
                            memcpy(Handle.buff, p_hist_cmd, strlen(p_hist_cmd));
 8003806:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fd62 	bl	80002d4 <strlen>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	4621      	mov	r1, r4
 8003816:	482d      	ldr	r0, [pc, #180]	; (80038cc <cli_rx_handle+0x2f0>)
 8003818:	f008 fc4a 	bl	800c0b0 <memcpy>
                            Handle.len = strlen(p_hist_cmd);
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fd58 	bl	80002d4 <strlen>
 8003824:	4603      	mov	r3, r0
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <cli_rx_handle+0x2f0>)
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            Handle.buff[Handle.len] = '\0';
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <cli_rx_handle+0x2f0>)
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003834:	461a      	mov	r2, r3
 8003836:	4b25      	ldr	r3, [pc, #148]	; (80038cc <cli_rx_handle+0x2f0>)
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
                            printf("%s", Handle.buff);  /* display history command */
 800383c:	4923      	ldr	r1, [pc, #140]	; (80038cc <cli_rx_handle+0x2f0>)
 800383e:	482c      	ldr	r0, [pc, #176]	; (80038f0 <cli_rx_handle+0x314>)
 8003840:	f009 fd1a 	bl	800d278 <iprintf>
 8003844:	e01c      	b.n	8003880 <cli_rx_handle+0x2a4>
                        } else if (err && (0 != key)) {
 8003846:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <cli_rx_handle+0x2a4>
 800384e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003852:	2b00      	cmp	r3, #0
 8003854:	d014      	beq.n	8003880 <cli_rx_handle+0x2a4>
                            /* no history found */
                            TERMINAL_MOVE_LEFT(Handle.len-3);
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <cli_rx_handle+0x2f0>)
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385c:	2b03      	cmp	r3, #3
 800385e:	d907      	bls.n	8003870 <cli_rx_handle+0x294>
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <cli_rx_handle+0x2f0>)
 8003862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003866:	3b03      	subs	r3, #3
 8003868:	4619      	mov	r1, r3
 800386a:	4819      	ldr	r0, [pc, #100]	; (80038d0 <cli_rx_handle+0x2f4>)
 800386c:	f009 fd04 	bl	800d278 <iprintf>
                            TERMINAL_CLEAR_END();
 8003870:	4818      	ldr	r0, [pc, #96]	; (80038d4 <cli_rx_handle+0x2f8>)
 8003872:	f009 fd01 	bl	800d278 <iprintf>
                            memset(&Handle, 0x00, sizeof(Handle));
 8003876:	2251      	movs	r2, #81	; 0x51
 8003878:	2100      	movs	r1, #0
 800387a:	4814      	ldr	r0, [pc, #80]	; (80038cc <cli_rx_handle+0x2f0>)
 800387c:	f008 fc40 	bl	800c100 <memset>
                        }
                    }
                }

                if ((key == 0) && (Handle.len > i)) {
 8003880:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003884:	2b00      	cmp	r3, #0
 8003886:	d137      	bne.n	80038f8 <cli_rx_handle+0x31c>
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <cli_rx_handle+0x2f0>)
 800388a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800388e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003892:	429a      	cmp	r2, r3
 8003894:	d230      	bcs.n	80038f8 <cli_rx_handle+0x31c>
                    /* display char in terminal */
                    for (; i < Handle.len; i++) {
 8003896:	e00b      	b.n	80038b0 <cli_rx_handle+0x2d4>
                    	printf("%c", Handle.buff[i]);
 8003898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <cli_rx_handle+0x2f0>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f009 fd01 	bl	800d2a8 <putchar>
                    for (; i < Handle.len; i++) {
 80038a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038aa:	3301      	adds	r3, #1
 80038ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <cli_rx_handle+0x2f0>)
 80038b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3ec      	bcc.n	8003898 <cli_rx_handle+0x2bc>

                    }
                }
                break;
 80038be:	e01b      	b.n	80038f8 <cli_rx_handle+0x31c>
    while(newChar) {
 80038c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f ae9c 	bne.w	8003602 <cli_rx_handle+0x26>
 80038ca:	e016      	b.n	80038fa <cli_rx_handle+0x31e>
 80038cc:	200009b4 	.word	0x200009b4
 80038d0:	08010b08 	.word	0x08010b08
 80038d4:	08010b10 	.word	0x08010b10
 80038d8:	08010b14 	.word	0x08010b14
 80038dc:	200009af 	.word	0x200009af
 80038e0:	08010b1c 	.word	0x08010b1c
 80038e4:	08010b20 	.word	0x08010b20
 80038e8:	08010b24 	.word	0x08010b24
 80038ec:	08010b28 	.word	0x08010b28
 80038f0:	08010b2c 	.word	0x08010b2c
            }

        } else {
            /* buffer full */
            break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <cli_rx_handle+0x31e>
                break;
 80038f8:	bf00      	nop

    /*  ---------------------------------------
        Step2: handle the commands
        ---------------------------------------
     */
    if(exec_req && !cli_password_ok){
 80038fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <cli_rx_handle+0x340>
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <cli_rx_handle+0x510>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <cli_rx_handle+0x340>
    		cli_password_ok = true;
    		greet();
    	}
    	Handle.len = 0;
#else
    	cli_password_ok = true;
 8003910:	4b76      	ldr	r3, [pc, #472]	; (8003aec <cli_rx_handle+0x510>)
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
    	greet();
 8003916:	f000 f91b 	bl	8003b50 <greet>
 800391a:	e0d2      	b.n	8003ac2 <cli_rx_handle+0x4e6>
#endif
    }else if(exec_req && (Handle.len == 1)) {
 800391c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <cli_rx_handle+0x362>
 8003924:	4b72      	ldr	r3, [pc, #456]	; (8003af0 <cli_rx_handle+0x514>)
 8003926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <cli_rx_handle+0x362>
        /* KEY_ENTER -->ENTER key from terminal */
    	PRINT_CLI_NAME();
 800392e:	4871      	ldr	r0, [pc, #452]	; (8003af4 <cli_rx_handle+0x518>)
 8003930:	f009 fca2 	bl	800d278 <iprintf>
        Handle.len = 0;
 8003934:	4b6e      	ldr	r3, [pc, #440]	; (8003af0 <cli_rx_handle+0x514>)
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800393c:	e0c1      	b.n	8003ac2 <cli_rx_handle+0x4e6>
    } else if(exec_req && Handle.len > 1) {  /* check for the length of command */
 800393e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80bd 	beq.w	8003ac2 <cli_rx_handle+0x4e6>
 8003948:	4b69      	ldr	r3, [pc, #420]	; (8003af0 <cli_rx_handle+0x514>)
 800394a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394e:	2b01      	cmp	r3, #1
 8003950:	f240 80b7 	bls.w	8003ac2 <cli_rx_handle+0x4e6>
		NL1();
 8003954:	200a      	movs	r0, #10
 8003956:	f009 fca7 	bl	800d2a8 <putchar>
		Handle.buff[Handle.len - 1] = '\0';
 800395a:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <cli_rx_handle+0x514>)
 800395c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003960:	3b01      	subs	r3, #1
 8003962:	4a63      	ldr	r2, [pc, #396]	; (8003af0 <cli_rx_handle+0x514>)
 8003964:	2100      	movs	r1, #0
 8003966:	54d1      	strb	r1, [r2, r3]
		cli_history_add((char *)Handle.buff);
 8003968:	4861      	ldr	r0, [pc, #388]	; (8003af0 <cli_rx_handle+0x514>)
 800396a:	f7ff fcb3 	bl	80032d4 <cli_history_add>
		char *command = strtok((char *)Handle.buff, " \t");
 800396e:	4962      	ldr	r1, [pc, #392]	; (8003af8 <cli_rx_handle+0x51c>)
 8003970:	485f      	ldr	r0, [pc, #380]	; (8003af0 <cli_rx_handle+0x514>)
 8003972:	f00a fc25 	bl	800e1c0 <strtok>
 8003976:	6338      	str	r0, [r7, #48]	; 0x30

		/* looking for a match */
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8003978:	2300      	movs	r3, #0
 800397a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800397e:	e089      	b.n	8003a94 <cli_rx_handle+0x4b8>
			if(0 == strcmp(command, CLI_commands[i].pCmd)) {
 8003980:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003984:	495d      	ldr	r1, [pc, #372]	; (8003afc <cli_rx_handle+0x520>)
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f7fc fc93 	bl	80002c0 <strcmp>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d174      	bne.n	8003a8a <cli_rx_handle+0x4ae>
				cmd_match = true;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				//Split arguments string to argc/argv
				uint8_t argc = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				char 	*argv[MAX_ARGC];
				argv[0] = command;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	60bb      	str	r3, [r7, #8]

				char *token = strtok(NULL, " \t");
 80039b0:	4951      	ldr	r1, [pc, #324]	; (8003af8 <cli_rx_handle+0x51c>)
 80039b2:	2000      	movs	r0, #0
 80039b4:	f00a fc04 	bl	800e1c0 <strtok>
 80039b8:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 80039ba:	e01d      	b.n	80039f8 <cli_rx_handle+0x41c>
					if(argc >= MAX_ARGC){
 80039bc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d907      	bls.n	80039d4 <cli_rx_handle+0x3f8>
						printf(CLI_FONT_RED "Maximum number of arguments is %d. Ignoring the rest of the arguments."CLI_FONT_DEFAULT, MAX_ARGC-1);NL1();
 80039c4:	2107      	movs	r1, #7
 80039c6:	484e      	ldr	r0, [pc, #312]	; (8003b00 <cli_rx_handle+0x524>)
 80039c8:	f009 fc56 	bl	800d278 <iprintf>
 80039cc:	200a      	movs	r0, #10
 80039ce:	f009 fc6b 	bl	800d2a8 <putchar>
						break;
 80039d2:	e014      	b.n	80039fe <cli_rx_handle+0x422>
					}
					argv[argc] = token;
 80039d4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	3340      	adds	r3, #64	; 0x40
 80039dc:	443b      	add	r3, r7
 80039de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e0:	f843 2c38 	str.w	r2, [r3, #-56]
					argc++;
 80039e4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80039e8:	3301      	adds	r3, #1
 80039ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					token = strtok(NULL, " \t");
 80039ee:	4942      	ldr	r1, [pc, #264]	; (8003af8 <cli_rx_handle+0x51c>)
 80039f0:	2000      	movs	r0, #0
 80039f2:	f00a fbe5 	bl	800e1c0 <strtok>
 80039f6:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1de      	bne.n	80039bc <cli_rx_handle+0x3e0>
				}

				if(CLI_commands[i].pFun != NULL) {
 80039fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a02:	493e      	ldr	r1, [pc, #248]	; (8003afc <cli_rx_handle+0x520>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3308      	adds	r3, #8
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d032      	beq.n	8003a7c <cli_rx_handle+0x4a0>
					/* call the func. */
					TERMINAL_HIDE_CURSOR();
 8003a16:	483b      	ldr	r0, [pc, #236]	; (8003b04 <cli_rx_handle+0x528>)
 8003a18:	f009 fc2e 	bl	800d278 <iprintf>
					uint8_t result = CLI_commands[i].pFun(argc, argv);
 8003a1c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a20:	4936      	ldr	r1, [pc, #216]	; (8003afc <cli_rx_handle+0x520>)
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003a34:	f107 0108 	add.w	r1, r7, #8
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if(result == EXIT_SUCCESS){
 8003a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <cli_rx_handle+0x484>
						printf(CLI_FONT_GREEN "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8003a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a52:	482d      	ldr	r0, [pc, #180]	; (8003b08 <cli_rx_handle+0x52c>)
 8003a54:	f009 fc10 	bl	800d278 <iprintf>
 8003a58:	200a      	movs	r0, #10
 8003a5a:	f009 fc25 	bl	800d2a8 <putchar>
 8003a5e:	e009      	b.n	8003a74 <cli_rx_handle+0x498>
					}else{
						printf(CLI_FONT_RED "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8003a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a64:	461a      	mov	r2, r3
 8003a66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a68:	4828      	ldr	r0, [pc, #160]	; (8003b0c <cli_rx_handle+0x530>)
 8003a6a:	f009 fc05 	bl	800d278 <iprintf>
 8003a6e:	200a      	movs	r0, #10
 8003a70:	f009 fc1a 	bl	800d2a8 <putchar>
					}
					TERMINAL_SHOW_CURSOR();
 8003a74:	4826      	ldr	r0, [pc, #152]	; (8003b10 <cli_rx_handle+0x534>)
 8003a76:	f009 fbff 	bl	800d278 <iprintf>
					break;
 8003a7a:	e010      	b.n	8003a9e <cli_rx_handle+0x4c2>
				} else {
					/* func. is void */
					printf(CLI_FONT_RED "Command %s exists but no function is associated to it.", command);NL1();
 8003a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7e:	4825      	ldr	r0, [pc, #148]	; (8003b14 <cli_rx_handle+0x538>)
 8003a80:	f009 fbfa 	bl	800d278 <iprintf>
 8003a84:	200a      	movs	r0, #10
 8003a86:	f009 fc0f 	bl	800d2a8 <putchar>
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8003a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a98:	2b1f      	cmp	r3, #31
 8003a9a:	f67f af71 	bls.w	8003980 <cli_rx_handle+0x3a4>
				}
			}
		}

		if(!cmd_match) {
 8003a9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <cli_rx_handle+0x4d8>
			/* no matching command */
			printf("\r\nCommand \"%s\" unknown, try: help", Handle.buff);NL1();
 8003aa6:	4912      	ldr	r1, [pc, #72]	; (8003af0 <cli_rx_handle+0x514>)
 8003aa8:	481b      	ldr	r0, [pc, #108]	; (8003b18 <cli_rx_handle+0x53c>)
 8003aaa:	f009 fbe5 	bl	800d278 <iprintf>
 8003aae:	200a      	movs	r0, #10
 8003ab0:	f009 fbfa 	bl	800d2a8 <putchar>
		}

		Handle.len = 0;
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <cli_rx_handle+0x514>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		PRINT_CLI_NAME();
 8003abc:	480d      	ldr	r0, [pc, #52]	; (8003af4 <cli_rx_handle+0x518>)
 8003abe:	f009 fbdb 	bl	800d278 <iprintf>

    }


    if(Handle.len >= MAX_LINE_LEN) {
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <cli_rx_handle+0x514>)
 8003ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac8:	2b4f      	cmp	r3, #79	; 0x4f
 8003aca:	d90a      	bls.n	8003ae2 <cli_rx_handle+0x506>
        /* full, so restart the count */
    	printf(CLI_FONT_RED "\r\nMax command length is %d.\r\n" CLI_FONT_DEFAULT, MAX_LINE_LEN-1);
 8003acc:	214f      	movs	r1, #79	; 0x4f
 8003ace:	4813      	ldr	r0, [pc, #76]	; (8003b1c <cli_rx_handle+0x540>)
 8003ad0:	f009 fbd2 	bl	800d278 <iprintf>
    	PRINT_CLI_NAME();
 8003ad4:	4807      	ldr	r0, [pc, #28]	; (8003af4 <cli_rx_handle+0x518>)
 8003ad6:	f009 fbcf 	bl	800d278 <iprintf>
        Handle.len = 0;
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <cli_rx_handle+0x514>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
}
 8003ae2:	bf00      	nop
 8003ae4:	3744      	adds	r7, #68	; 0x44
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd90      	pop	{r4, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200009af 	.word	0x200009af
 8003af0:	200009b4 	.word	0x200009b4
 8003af4:	08010b30 	.word	0x08010b30
 8003af8:	08010b3c 	.word	0x08010b3c
 8003afc:	2000050c 	.word	0x2000050c
 8003b00:	08010b40 	.word	0x08010b40
 8003b04:	08010b98 	.word	0x08010b98
 8003b08:	08010ba0 	.word	0x08010ba0
 8003b0c:	08010bc0 	.word	0x08010bc0
 8003b10:	08010be0 	.word	0x08010be0
 8003b14:	08010be8 	.word	0x08010be8
 8003b18:	08010c28 	.word	0x08010c28
 8003b1c:	08010c4c 	.word	0x08010c4c

08003b20 <cli_tx_handle>:
  * @brief  tx handle, flushes stdout buffer
  * @param  null
  * @retval null
  */
static void cli_tx_handle(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
    fflush(stdout);
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <cli_tx_handle+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f008 f95e 	bl	800bdec <fflush>
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000030 	.word	0x20000030

08003b38 <cli_run>:

void cli_run(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
    cli_rx_handle(&cli_rx_buff);
 8003b3c:	4803      	ldr	r0, [pc, #12]	; (8003b4c <cli_run+0x14>)
 8003b3e:	f7ff fd4d 	bl	80035dc <cli_rx_handle>
    cli_tx_handle();
 8003b42:	f7ff ffed 	bl	8003b20 <cli_tx_handle>
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200004e0 	.word	0x200004e0

08003b50 <greet>:

void greet(void){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    NL1();
 8003b54:	200a      	movs	r0, #10
 8003b56:	f009 fba7 	bl	800d2a8 <putchar>
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8003b5a:	484d      	ldr	r0, [pc, #308]	; (8003c90 <greet+0x140>)
 8003b5c:	f009 fb8c 	bl	800d278 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003b60:	484c      	ldr	r0, [pc, #304]	; (8003c94 <greet+0x144>)
 8003b62:	f009 fb89 	bl	800d278 <iprintf>
    TERMINAL_RESET_CURSOR();
 8003b66:	484c      	ldr	r0, [pc, #304]	; (8003c98 <greet+0x148>)
 8003b68:	f009 fb86 	bl	800d278 <iprintf>
    TERMINAL_FONT_BLUE();
 8003b6c:	484b      	ldr	r0, [pc, #300]	; (8003c9c <greet+0x14c>)
 8003b6e:	f009 fb83 	bl	800d278 <iprintf>
    printf("                             ///////////////////////////////////////////    ");NL1();
 8003b72:	484b      	ldr	r0, [pc, #300]	; (8003ca0 <greet+0x150>)
 8003b74:	f009 fb80 	bl	800d278 <iprintf>
 8003b78:	200a      	movs	r0, #10
 8003b7a:	f009 fb95 	bl	800d2a8 <putchar>
    printf("                             /////*   .////////////////////////     *///    ");NL1();
 8003b7e:	4849      	ldr	r0, [pc, #292]	; (8003ca4 <greet+0x154>)
 8003b80:	f009 fb7a 	bl	800d278 <iprintf>
 8003b84:	200a      	movs	r0, #10
 8003b86:	f009 fb8f 	bl	800d2a8 <putchar>
    printf("            %%%%%%         %%%%%%  ///   ////  //   //////////  //   ////   //    ");NL1();
 8003b8a:	4847      	ldr	r0, [pc, #284]	; (8003ca8 <greet+0x158>)
 8003b8c:	f009 fb74 	bl	800d278 <iprintf>
 8003b90:	200a      	movs	r0, #10
 8003b92:	f009 fb89 	bl	800d2a8 <putchar>
    printf("            %%%%%%        %%%%%%   ///  //////////   ////////  ///  //////////    ");NL1();
 8003b96:	4845      	ldr	r0, [pc, #276]	; (8003cac <greet+0x15c>)
 8003b98:	f009 fb6e 	bl	800d278 <iprintf>
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f009 fb83 	bl	800d2a8 <putchar>
    printf("           %%%%%%        %%%%%%%%   ((((   (((((((((   ((((((  (((((   .(((((((    ");NL1();
 8003ba2:	4843      	ldr	r0, [pc, #268]	; (8003cb0 <greet+0x160>)
 8003ba4:	f009 fb68 	bl	800d278 <iprintf>
 8003ba8:	200a      	movs	r0, #10
 8003baa:	f009 fb7d 	bl	800d2a8 <putchar>
    printf("          %%%%%%        %%%%%%%%    (((((((    (((((((  ((((  (((((((((    ((((    ");NL1();
 8003bae:	4841      	ldr	r0, [pc, #260]	; (8003cb4 <greet+0x164>)
 8003bb0:	f009 fb62 	bl	800d278 <iprintf>
 8003bb4:	200a      	movs	r0, #10
 8003bb6:	f009 fb77 	bl	800d2a8 <putchar>
    printf("          %%%%%%      %%%%  %%%%    ((((((((((   ((((((  ((  ((((((((((((((  ((    ");NL1();
 8003bba:	483f      	ldr	r0, [pc, #252]	; (8003cb8 <greet+0x168>)
 8003bbc:	f009 fb5c 	bl	800d278 <iprintf>
 8003bc0:	200a      	movs	r0, #10
 8003bc2:	f009 fb71 	bl	800d2a8 <putchar>
    printf("         %%%%%%%%    %%%%%%   %%%%%%%%  (((*((((((  .(((((((    ((((((( ((((((   ((    ");NL1();
 8003bc6:	483d      	ldr	r0, [pc, #244]	; (8003cbc <greet+0x16c>)
 8003bc8:	f009 fb56 	bl	800d278 <iprintf>
 8003bcc:	200a      	movs	r0, #10
 8003bce:	f009 fb6b 	bl	800d2a8 <putchar>
    printf("         %%%%*%%%%%%%%%%%%           (((        (((((((((   ((((((((        ((((    ");NL1();
 8003bd2:	483b      	ldr	r0, [pc, #236]	; (8003cc0 <greet+0x170>)
 8003bd4:	f009 fb50 	bl	800d278 <iprintf>
 8003bd8:	200a      	movs	r0, #10
 8003bda:	f009 fb65 	bl	800d2a8 <putchar>
    printf("        %%%%   %%%%.             ###################   ##################### (((");NL1();
 8003bde:	4839      	ldr	r0, [pc, #228]	; (8003cc4 <greet+0x174>)
 8003be0:	f009 fb4a 	bl	800d278 <iprintf>
 8003be4:	200a      	movs	r0, #10
 8003be6:	f009 fb5f 	bl	800d2a8 <putchar>
    printf("       %%%%%%          (((      ##################   ##################((((((( ");NL1();
 8003bea:	4837      	ldr	r0, [pc, #220]	; (8003cc8 <greet+0x178>)
 8003bec:	f009 fb44 	bl	800d278 <iprintf>
 8003bf0:	200a      	movs	r0, #10
 8003bf2:	f009 fb59 	bl	800d2a8 <putchar>
    printf("       %%%%               (((( #################   ##############(((((((##    ");NL1();
 8003bf6:	4835      	ldr	r0, [pc, #212]	; (8003ccc <greet+0x17c>)
 8003bf8:	f009 fb3e 	bl	800d278 <iprintf>
 8003bfc:	200a      	movs	r0, #10
 8003bfe:	f009 fb53 	bl	800d2a8 <putchar>
    printf("      %%%%%%                   (((((((((##################((((((((((#######    ");NL1();
 8003c02:	4833      	ldr	r0, [pc, #204]	; (8003cd0 <greet+0x180>)
 8003c04:	f009 fb38 	bl	800d278 <iprintf>
 8003c08:	200a      	movs	r0, #10
 8003c0a:	f009 fb4d 	bl	800d2a8 <putchar>
    printf("     %%%%%%                     ########(((((((((((((((((((################    ");NL1();
 8003c0e:	4831      	ldr	r0, [pc, #196]	; (8003cd4 <greet+0x184>)
 8003c10:	f009 fb32 	bl	800d278 <iprintf>
 8003c14:	200a      	movs	r0, #10
 8003c16:	f009 fb47 	bl	800d2a8 <putchar>
    printf("     %%%%%%                     ##%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%    ");NL1();
 8003c1a:	482f      	ldr	r0, [pc, #188]	; (8003cd8 <greet+0x188>)
 8003c1c:	f009 fb2c 	bl	800d278 <iprintf>
 8003c20:	200a      	movs	r0, #10
 8003c22:	f009 fb41 	bl	800d2a8 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003c26:	482d      	ldr	r0, [pc, #180]	; (8003cdc <greet+0x18c>)
 8003c28:	f009 fb26 	bl	800d278 <iprintf>
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f009 fb3b 	bl	800d2a8 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003c32:	482a      	ldr	r0, [pc, #168]	; (8003cdc <greet+0x18c>)
 8003c34:	f009 fb20 	bl	800d278 <iprintf>
 8003c38:	200a      	movs	r0, #10
 8003c3a:	f009 fb35 	bl	800d2a8 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003c3e:	4828      	ldr	r0, [pc, #160]	; (8003ce0 <greet+0x190>)
 8003c40:	f009 fb1a 	bl	800d278 <iprintf>
 8003c44:	200a      	movs	r0, #10
 8003c46:	f009 fb2f 	bl	800d2a8 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003c4a:	4825      	ldr	r0, [pc, #148]	; (8003ce0 <greet+0x190>)
 8003c4c:	f009 fb14 	bl	800d278 <iprintf>
 8003c50:	200a      	movs	r0, #10
 8003c52:	f009 fb29 	bl	800d2a8 <putchar>
    printf("µShell v0.1 - by Morgan Diepart (mdiepart@uliege.be)");NL1();
 8003c56:	4823      	ldr	r0, [pc, #140]	; (8003ce4 <greet+0x194>)
 8003c58:	f009 fb0e 	bl	800d278 <iprintf>
 8003c5c:	200a      	movs	r0, #10
 8003c5e:	f009 fb23 	bl	800d2a8 <putchar>
    printf("Original work from https://github.com/ShareCat/STM32CommandLine");NL1();
 8003c62:	4821      	ldr	r0, [pc, #132]	; (8003ce8 <greet+0x198>)
 8003c64:	f009 fb08 	bl	800d278 <iprintf>
 8003c68:	200a      	movs	r0, #10
 8003c6a:	f009 fb1d 	bl	800d2a8 <putchar>
    printf("-------------------------------");
 8003c6e:	481f      	ldr	r0, [pc, #124]	; (8003cec <greet+0x19c>)
 8003c70:	f009 fb02 	bl	800d278 <iprintf>
    NL2();
 8003c74:	481e      	ldr	r0, [pc, #120]	; (8003cf0 <greet+0x1a0>)
 8003c76:	f009 fb9b 	bl	800d3b0 <puts>
    TERMINAL_FONT_DEFAULT();
 8003c7a:	481e      	ldr	r0, [pc, #120]	; (8003cf4 <greet+0x1a4>)
 8003c7c:	f009 fafc 	bl	800d278 <iprintf>
    PRINT_CLI_NAME();
 8003c80:	481d      	ldr	r0, [pc, #116]	; (8003cf8 <greet+0x1a8>)
 8003c82:	f009 faf9 	bl	800d278 <iprintf>
    TERMINAL_SHOW_CURSOR();
 8003c86:	481d      	ldr	r0, [pc, #116]	; (8003cfc <greet+0x1ac>)
 8003c88:	f009 faf6 	bl	800d278 <iprintf>
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	08010c78 	.word	0x08010c78
 8003c94:	08010c80 	.word	0x08010c80
 8003c98:	08010c88 	.word	0x08010c88
 8003c9c:	08010c8c 	.word	0x08010c8c
 8003ca0:	08010c94 	.word	0x08010c94
 8003ca4:	08010ce4 	.word	0x08010ce4
 8003ca8:	08010d34 	.word	0x08010d34
 8003cac:	08010d88 	.word	0x08010d88
 8003cb0:	08010ddc 	.word	0x08010ddc
 8003cb4:	08010e30 	.word	0x08010e30
 8003cb8:	08010e84 	.word	0x08010e84
 8003cbc:	08010ed8 	.word	0x08010ed8
 8003cc0:	08010f30 	.word	0x08010f30
 8003cc4:	08010f88 	.word	0x08010f88
 8003cc8:	08010fdc 	.word	0x08010fdc
 8003ccc:	0801102c 	.word	0x0801102c
 8003cd0:	0801107c 	.word	0x0801107c
 8003cd4:	080110cc 	.word	0x080110cc
 8003cd8:	0801111c 	.word	0x0801111c
 8003cdc:	08011184 	.word	0x08011184
 8003ce0:	08011200 	.word	0x08011200
 8003ce4:	08011278 	.word	0x08011278
 8003ce8:	080112b0 	.word	0x080112b0
 8003cec:	080112f0 	.word	0x080112f0
 8003cf0:	08011310 	.word	0x08011310
 8003cf4:	08011314 	.word	0x08011314
 8003cf8:	08010b30 	.word	0x08010b30
 8003cfc:	08010be0 	.word	0x08010be0

08003d00 <cli_help>:
  * @brief  printf the help info.
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_help(int argc, char *argv[])
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	if(argc == 1){
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d13e      	bne.n	8003d8e <cli_help+0x8e>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e036      	b.n	8003d84 <cli_help+0x84>
	    	if(strcmp(CLI_commands[i].pCmd, "") != 0){
 8003d16:	494a      	ldr	r1, [pc, #296]	; (8003e40 <cli_help+0x140>)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d028      	beq.n	8003d7e <cli_help+0x7e>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 8003d2c:	4944      	ldr	r1, [pc, #272]	; (8003e40 <cli_help+0x140>)
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4841      	ldr	r0, [pc, #260]	; (8003e44 <cli_help+0x144>)
 8003d40:	f009 fa9a 	bl	800d278 <iprintf>
 8003d44:	200a      	movs	r0, #10
 8003d46:	f009 faaf 	bl	800d2a8 <putchar>
		        if (CLI_commands[i].pHelp) {
 8003d4a:	493d      	ldr	r1, [pc, #244]	; (8003e40 <cli_help+0x140>)
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <cli_help+0x7e>
		            printf(CLI_commands[i].pHelp);NL2();
 8003d60:	4937      	ldr	r1, [pc, #220]	; (8003e40 <cli_help+0x140>)
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3304      	adds	r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f009 fa80 	bl	800d278 <iprintf>
 8003d78:	4833      	ldr	r0, [pc, #204]	; (8003e48 <cli_help+0x148>)
 8003d7a:	f009 fb19 	bl	800d3b0 <puts>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b1f      	cmp	r3, #31
 8003d88:	d9c5      	bls.n	8003d16 <cli_help+0x16>
		        }
	    	}
	    }
	    return EXIT_SUCCESS;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e053      	b.n	8003e36 <cli_help+0x136>
	}else if(argc == 2){
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d146      	bne.n	8003e22 <cli_help+0x122>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	e034      	b.n	8003e04 <cli_help+0x104>
	    	if(strcmp(CLI_commands[i].pCmd, argv[1]) == 0){
 8003d9a:	4929      	ldr	r1, [pc, #164]	; (8003e40 <cli_help+0x140>)
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fc fa84 	bl	80002c0 <strcmp>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11f      	bne.n	8003dfe <cli_help+0xfe>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 8003dbe:	4920      	ldr	r1, [pc, #128]	; (8003e40 <cli_help+0x140>)
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	481c      	ldr	r0, [pc, #112]	; (8003e44 <cli_help+0x144>)
 8003dd2:	f009 fa51 	bl	800d278 <iprintf>
 8003dd6:	200a      	movs	r0, #10
 8003dd8:	f009 fa66 	bl	800d2a8 <putchar>
	    		printf(CLI_commands[i].pHelp);NL1();
 8003ddc:	4918      	ldr	r1, [pc, #96]	; (8003e40 <cli_help+0x140>)
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3304      	adds	r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f009 fa42 	bl	800d278 <iprintf>
 8003df4:	200a      	movs	r0, #10
 8003df6:	f009 fa57 	bl	800d2a8 <putchar>
	    		return EXIT_SUCCESS;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e01b      	b.n	8003e36 <cli_help+0x136>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b1f      	cmp	r3, #31
 8003e08:	d9c7      	bls.n	8003d9a <cli_help+0x9a>
	    	}
	    }
	    printf("No help found for command %s.", argv[1]);NL1();
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	480e      	ldr	r0, [pc, #56]	; (8003e4c <cli_help+0x14c>)
 8003e14:	f009 fa30 	bl	800d278 <iprintf>
 8003e18:	200a      	movs	r0, #10
 8003e1a:	f009 fa45 	bl	800d2a8 <putchar>
	    return EXIT_FAILURE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e009      	b.n	8003e36 <cli_help+0x136>
	}else{
		printf("Command \"%s\" takes at most 1 argument.", argv[0]);NL1();
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4619      	mov	r1, r3
 8003e28:	4809      	ldr	r0, [pc, #36]	; (8003e50 <cli_help+0x150>)
 8003e2a:	f009 fa25 	bl	800d278 <iprintf>
 8003e2e:	200a      	movs	r0, #10
 8003e30:	f009 fa3a 	bl	800d2a8 <putchar>
		return EXIT_FAILURE;
 8003e34:	2301      	movs	r3, #1
	}
    return EXIT_FAILURE;
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000050c 	.word	0x2000050c
 8003e44:	0801131c 	.word	0x0801131c
 8003e48:	08011310 	.word	0x08011310
 8003e4c:	08011324 	.word	0x08011324
 8003e50:	08011344 	.word	0x08011344

08003e54 <cli_clear>:
  * @brief  clear the screen
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_clear(int argc, char *argv[])
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	if(argc != 1){
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d00a      	beq.n	8003e7a <cli_clear+0x26>
		printf("command \"%s\" does not take any argument.", argv[0]);NL1();
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	480c      	ldr	r0, [pc, #48]	; (8003e9c <cli_clear+0x48>)
 8003e6c:	f009 fa04 	bl	800d278 <iprintf>
 8003e70:	200a      	movs	r0, #10
 8003e72:	f009 fa19 	bl	800d2a8 <putchar>
		return EXIT_FAILURE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00c      	b.n	8003e94 <cli_clear+0x40>
	}
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8003e7a:	4809      	ldr	r0, [pc, #36]	; (8003ea0 <cli_clear+0x4c>)
 8003e7c:	f009 f9fc 	bl	800d278 <iprintf>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8003e80:	4808      	ldr	r0, [pc, #32]	; (8003ea4 <cli_clear+0x50>)
 8003e82:	f009 f9f9 	bl	800d278 <iprintf>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 8003e86:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <cli_clear+0x54>)
 8003e88:	f009 f9f6 	bl	800d278 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003e8c:	4807      	ldr	r0, [pc, #28]	; (8003eac <cli_clear+0x58>)
 8003e8e:	f009 f9f3 	bl	800d278 <iprintf>

    return EXIT_SUCCESS;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	0801136c 	.word	0x0801136c
 8003ea0:	08010c78 	.word	0x08010c78
 8003ea4:	08011314 	.word	0x08011314
 8003ea8:	08010c88 	.word	0x08010c88
 8003eac:	08010c80 	.word	0x08010c80

08003eb0 <cli_reset>:
  * @brief  MCU reboot
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_reset(int argc, char *argv[])
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	if(argc > 1){
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	dd0a      	ble.n	8003ed6 <cli_reset+0x26>
		printf("Command \"%s\" takes no argument.", argv[0]);NL1();
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <cli_reset+0x48>)
 8003ec8:	f009 f9d6 	bl	800d278 <iprintf>
 8003ecc:	200a      	movs	r0, #10
 8003ece:	f009 f9eb 	bl	800d2a8 <putchar>
		return EXIT_FAILURE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00b      	b.n	8003eee <cli_reset+0x3e>
	}

	NL1();printf("[END]: System Rebooting");NL1();
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f009 f9e6 	bl	800d2a8 <putchar>
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <cli_reset+0x4c>)
 8003ede:	f009 f9cb 	bl	800d278 <iprintf>
 8003ee2:	200a      	movs	r0, #10
 8003ee4:	f009 f9e0 	bl	800d2a8 <putchar>
	HAL_NVIC_SystemReset();
 8003ee8:	f000 fe21 	bl	8004b2e <HAL_NVIC_SystemReset>
	return EXIT_SUCCESS;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08011398 	.word	0x08011398
 8003efc:	080113b8 	.word	0x080113b8

08003f00 <cli_add_command>:

void cli_add_command(const char *command, const char *help, uint8_t (*exec)(int argc, char *argv[])){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
	for(; i < MAX_COMMAND_NB; i++){
 8003f10:	e02b      	b.n	8003f6a <cli_add_command+0x6a>
		if(strcmp(CLI_commands[i].pCmd, "") == 0){
 8003f12:	4929      	ldr	r1, [pc, #164]	; (8003fb8 <cli_add_command+0xb8>)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11d      	bne.n	8003f64 <cli_add_command+0x64>
			CLI_commands[i].pCmd = command;
 8003f28:	4923      	ldr	r1, [pc, #140]	; (8003fb8 <cli_add_command+0xb8>)
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pFun = exec;
 8003f3a:	491f      	ldr	r1, [pc, #124]	; (8003fb8 <cli_add_command+0xb8>)
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	3308      	adds	r3, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pHelp = help;
 8003f4e:	491a      	ldr	r1, [pc, #104]	; (8003fb8 <cli_add_command+0xb8>)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	601a      	str	r2, [r3, #0]
			break;
 8003f62:	e005      	b.n	8003f70 <cli_add_command+0x70>
	for(; i < MAX_COMMAND_NB; i++){
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b1f      	cmp	r3, #31
 8003f6e:	d9d0      	bls.n	8003f12 <cli_add_command+0x12>
		}
	}
	if(i == MAX_COMMAND_NB){
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d10f      	bne.n	8003f96 <cli_add_command+0x96>
		ERR("Cannot add command %s, max number of commands "
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <cli_add_command+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68d8      	ldr	r0, [r3, #12]
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	f240 237d 	movw	r3, #637	; 0x27d
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <cli_add_command+0xc0>)
 8003f8a:	490e      	ldr	r1, [pc, #56]	; (8003fc4 <cli_add_command+0xc4>)
 8003f8c:	f008 f816 	bl	800bfbc <fiprintf>
				"reached. The maximum number of command is set to %d.\n" CLI_FONT_DEFAULT,
				command, MAX_COMMAND_NB); NL1();
 8003f90:	200a      	movs	r0, #10
 8003f92:	f009 f989 	bl	800d2a8 <putchar>
	}
	LOG(CLI_LOG_SHELL, "Command %s added to shell.\n", command);
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <cli_add_command+0xc8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <cli_add_command+0xb0>
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <cli_add_command+0xcc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <cli_add_command+0xd0>)
 8003fac:	f009 f964 	bl	800d278 <iprintf>
}
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	2000050c 	.word	0x2000050c
 8003fbc:	20000030 	.word	0x20000030
 8003fc0:	080113d0 	.word	0x080113d0
 8003fc4:	080113f0 	.word	0x080113f0
 8003fc8:	20000020 	.word	0x20000020
 8003fcc:	20000004 	.word	0x20000004
 8003fd0:	08011478 	.word	0x08011478

08003fd4 <cli_log>:

uint8_t cli_log(int argc, char *argv[]){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	if(argc < 2){
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	dc09      	bgt.n	8003ff8 <cli_log+0x24>
		printf("Command %s takes at least one argument. Use \"help %s\" for usage.\n", argv[0], argv[0]);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	4859      	ldr	r0, [pc, #356]	; (8004154 <cli_log+0x180>)
 8003ff0:	f009 f942 	bl	800d278 <iprintf>
		return EXIT_FAILURE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0a8      	b.n	800414a <cli_log+0x176>
	}

	if(strcmp(argv[1], "on") == 0){
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4956      	ldr	r1, [pc, #344]	; (8004158 <cli_log+0x184>)
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc f95d 	bl	80002c0 <strcmp>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d131      	bne.n	8004070 <cli_log+0x9c>
		if(argc < 3){
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	dc07      	bgt.n	8004022 <cli_log+0x4e>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4850      	ldr	r0, [pc, #320]	; (800415c <cli_log+0x188>)
 800401a:	f009 f92d 	bl	800d278 <iprintf>
			return EXIT_FAILURE;
 800401e:	2301      	movs	r3, #1
 8004020:	e093      	b.n	800414a <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	494d      	ldr	r1, [pc, #308]	; (8004160 <cli_log+0x18c>)
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc f948 	bl	80002c0 <strcmp>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <cli_log+0x74>
			cli_log_stat = 0xFFFFFFFF;
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <cli_log+0x190>)
 8004038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403c:	601a      	str	r2, [r3, #0]
			printf("All logs enabled.\n");
 800403e:	484a      	ldr	r0, [pc, #296]	; (8004168 <cli_log+0x194>)
 8004040:	f009 f9b6 	bl	800d3b0 <puts>
			return EXIT_SUCCESS;
 8004044:	2300      	movs	r3, #0
 8004046:	e080      	b.n	800414a <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 8004048:	2302      	movs	r3, #2
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e00a      	b.n	8004064 <cli_log+0x90>
				cli_enable_log_entry(argv[i]);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f8c9 	bl	80041f0 <cli_enable_log_entry>
			for(int i = 2; i < argc; i++){
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	dbf0      	blt.n	800404e <cli_log+0x7a>
			}
			return EXIT_SUCCESS;
 800406c:	2300      	movs	r3, #0
 800406e:	e06c      	b.n	800414a <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "off") == 0){
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	3304      	adds	r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	493d      	ldr	r1, [pc, #244]	; (800416c <cli_log+0x198>)
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc f921 	bl	80002c0 <strcmp>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d133      	bne.n	80040ec <cli_log+0x118>
		printf("Turning off all logs\n");
 8004084:	483a      	ldr	r0, [pc, #232]	; (8004170 <cli_log+0x19c>)
 8004086:	f009 f993 	bl	800d3b0 <puts>
		if(argc < 3){
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	dc07      	bgt.n	80040a0 <cli_log+0xcc>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	4831      	ldr	r0, [pc, #196]	; (800415c <cli_log+0x188>)
 8004098:	f009 f8ee 	bl	800d278 <iprintf>
			return EXIT_FAILURE;
 800409c:	2301      	movs	r3, #1
 800409e:	e054      	b.n	800414a <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	492e      	ldr	r1, [pc, #184]	; (8004160 <cli_log+0x18c>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc f909 	bl	80002c0 <strcmp>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <cli_log+0xf0>
			cli_log_stat = 0;
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <cli_log+0x190>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
			printf("All logs disabled.\n");
 80040ba:	482e      	ldr	r0, [pc, #184]	; (8004174 <cli_log+0x1a0>)
 80040bc:	f009 f978 	bl	800d3b0 <puts>
			return EXIT_SUCCESS;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e042      	b.n	800414a <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 80040c4:	2302      	movs	r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e00a      	b.n	80040e0 <cli_log+0x10c>
				cli_disable_log_entry(argv[i]);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f859 	bl	800418c <cli_disable_log_entry>
			for(int i = 2; i < argc; i++){
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	dbf0      	blt.n	80040ca <cli_log+0xf6>
			}
			return EXIT_SUCCESS;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e02e      	b.n	800414a <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "show") == 0){
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	3304      	adds	r3, #4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <cli_log+0x1a4>)
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc f8e3 	bl	80002c0 <strcmp>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d123      	bne.n	8004148 <cli_log+0x174>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e01b      	b.n	800413e <cli_log+0x16a>
			printf("%16s:\t", cli_logs_names[i]);
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <cli_log+0x1a8>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	4619      	mov	r1, r3
 8004110:	481b      	ldr	r0, [pc, #108]	; (8004180 <cli_log+0x1ac>)
 8004112:	f009 f8b1 	bl	800d278 <iprintf>
			if(cli_log_stat&(1<<i)){
 8004116:	2201      	movs	r2, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	461a      	mov	r2, r3
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <cli_log+0x190>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <cli_log+0x15e>
				printf(CLI_FONT_GREEN"Enabled"CLI_FONT_DEFAULT"\n");
 800412a:	4816      	ldr	r0, [pc, #88]	; (8004184 <cli_log+0x1b0>)
 800412c:	f009 f940 	bl	800d3b0 <puts>
 8004130:	e002      	b.n	8004138 <cli_log+0x164>
			}else{
				printf(CLI_FONT_RED"Disabled"CLI_FONT_DEFAULT"\n");
 8004132:	4815      	ldr	r0, [pc, #84]	; (8004188 <cli_log+0x1b4>)
 8004134:	f009 f93c 	bl	800d3b0 <puts>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b06      	cmp	r3, #6
 8004142:	d9e0      	bls.n	8004106 <cli_log+0x132>
			}
		}
		return EXIT_SUCCESS;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <cli_log+0x176>
	}

	return EXIT_FAILURE;
 8004148:	2301      	movs	r3, #1
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	080114a8 	.word	0x080114a8
 8004158:	080114ec 	.word	0x080114ec
 800415c:	080114f0 	.word	0x080114f0
 8004160:	0801151c 	.word	0x0801151c
 8004164:	20000020 	.word	0x20000020
 8004168:	08011520 	.word	0x08011520
 800416c:	08011534 	.word	0x08011534
 8004170:	08011538 	.word	0x08011538
 8004174:	08011550 	.word	0x08011550
 8004178:	08011564 	.word	0x08011564
 800417c:	20000004 	.word	0x20000004
 8004180:	0801156c 	.word	0x0801156c
 8004184:	08011574 	.word	0x08011574
 8004188:	0801158c 	.word	0x0801158c

0800418c <cli_disable_log_entry>:

void cli_disable_log_entry(char *str){
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e01c      	b.n	80041d4 <cli_disable_log_entry+0x48>
		if(strcmp(str, cli_logs_names[i]) == 0){
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <cli_disable_log_entry+0x58>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fc f88b 	bl	80002c0 <strcmp>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <cli_disable_log_entry+0x42>
			printf("LOG disabled for category %s.\n", str);
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	480d      	ldr	r0, [pc, #52]	; (80041e8 <cli_disable_log_entry+0x5c>)
 80041b4:	f009 f860 	bl	800d278 <iprintf>
			cli_log_stat &= ~(1<<i);
 80041b8:	2201      	movs	r2, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <cli_disable_log_entry+0x60>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4013      	ands	r3, r2
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <cli_disable_log_entry+0x60>)
 80041cc:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d9df      	bls.n	800419a <cli_disable_log_entry+0xe>
		}
	}
}
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000004 	.word	0x20000004
 80041e8:	080115a4 	.word	0x080115a4
 80041ec:	20000020 	.word	0x20000020

080041f0 <cli_enable_log_entry>:

void cli_enable_log_entry(char *str){
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e01b      	b.n	8004236 <cli_enable_log_entry+0x46>
		if(strcmp(str, cli_logs_names[i]) == 0){
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <cli_enable_log_entry+0x58>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc f859 	bl	80002c0 <strcmp>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <cli_enable_log_entry+0x40>
			printf("LOG enabled for category %s.\n", str);
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	480d      	ldr	r0, [pc, #52]	; (800424c <cli_enable_log_entry+0x5c>)
 8004218:	f009 f82e 	bl	800d278 <iprintf>
			cli_log_stat |= (1<<i);
 800421c:	2201      	movs	r2, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	461a      	mov	r2, r3
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <cli_enable_log_entry+0x60>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <cli_enable_log_entry+0x60>)
 800422e:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d9e0      	bls.n	80041fe <cli_enable_log_entry+0xe>
		}
	}
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000004 	.word	0x20000004
 800424c:	080115c4 	.word	0x080115c4
 8004250:	20000020 	.word	0x20000020

08004254 <shell_queue_init>:
 * @brief  shell_queue_init inits the contents of the queue to zeros
 * @param  queue
 * @retval True
 */
uint8_t shell_queue_init(shell_queue_s *queue)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = 0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]

    memset(queue->PBase, 0, SHELL_QUEUE_LENGTH);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3308      	adds	r3, #8
 800426e:	2220      	movs	r2, #32
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f007 ff44 	bl	800c100 <memset>

    return true;
 8004278:	2301      	movs	r3, #1
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <shell_queue_full>:
 * @brief  shell_queue_full checks if the queue is full
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_full(shell_queue_s *queue)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
    if((((queue->Rear) + 1) % SHELL_QUEUE_LENGTH) == queue->Front) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	3301      	adds	r3, #1
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d101      	bne.n	80042a0 <shell_queue_full+0x1e>
        return true;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <shell_queue_full+0x20>
    } else {
        return false;
 80042a0:	2300      	movs	r3, #0
    }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <shell_queue_empty>:
 * @brief  shell_queue_empty checks if the queue is empty
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_empty(shell_queue_s *queue)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
    if(queue->Front == queue->Rear) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d101      	bne.n	80042c6 <shell_queue_empty+0x18>
        return true;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <shell_queue_empty+0x1a>
    } else {
        return false;
 80042c6:	2300      	movs	r3, #0
    }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <shell_queue_in>:
 * @brief  shell_queue_in inserts a byte in the queue
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_in(shell_queue_s *queue, uint8_t *PData)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

    if(shell_queue_full(queue)) {
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffcf 	bl	8004282 <shell_queue_full>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <shell_queue_in+0x1a>
        return false;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e00f      	b.n	800430e <shell_queue_in+0x3a>
    }

    queue->PBase[queue->Rear] = *PData;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	7811      	ldrb	r1, [r2, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	460a      	mov	r2, r1
 80042fc:	721a      	strb	r2, [r3, #8]
    queue->Rear = ((queue->Rear) + 1) % SHELL_QUEUE_LENGTH;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3301      	adds	r3, #1
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

    return true;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <shell_queue_out>:
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */

uint8_t shell_queue_out(shell_queue_s *queue, uint8_t *PData)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
    if(shell_queue_empty(queue)) {
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffc4 	bl	80042ae <shell_queue_empty>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <shell_queue_out+0x1a>
        return false;
 800432c:	2300      	movs	r3, #0
 800432e:	e00e      	b.n	800434e <shell_queue_out+0x38>
    }

    *PData = queue->PBase[queue->Front];
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	7a1a      	ldrb	r2, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	701a      	strb	r2, [r3, #0]
    queue->Front = ((queue->Front) + 1) % SHELL_QUEUE_LENGTH;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]

    return true;
 800434c:	2301      	movs	r3, #1
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
	return 1;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <_kill>:

int _kill(int pid, int sig)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004370:	f007 fc74 	bl	800bc5c <__errno>
 8004374:	4603      	mov	r3, r0
 8004376:	2216      	movs	r2, #22
 8004378:	601a      	str	r2, [r3, #0]
	return -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <_exit>:

void _exit (int status)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800438e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffe7 	bl	8004366 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004398:	e7fe      	b.n	8004398 <_exit+0x12>

0800439a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e00a      	b.n	80043c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043ac:	f3af 8000 	nop.w
 80043b0:	4601      	mov	r1, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	60ba      	str	r2, [r7, #8]
 80043b8:	b2ca      	uxtb	r2, r1
 80043ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	3301      	adds	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	dbf0      	blt.n	80043ac <_read+0x12>
	}

return len;
 80043ca:	687b      	ldr	r3, [r7, #4]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	return -1;
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043fc:	605a      	str	r2, [r3, #4]
	return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_isatty>:

int _isatty(int file)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	return 1;
 8004414:	2301      	movs	r3, #1
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
	return 0;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <_sbrk+0x5c>)
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <_sbrk+0x60>)
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <_sbrk+0x64>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <_sbrk+0x64>)
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <_sbrk+0x68>)
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <_sbrk+0x64>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d207      	bcs.n	800447c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800446c:	f007 fbf6 	bl	800bc5c <__errno>
 8004470:	4603      	mov	r3, r0
 8004472:	220c      	movs	r2, #12
 8004474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800447a:	e009      	b.n	8004490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <_sbrk+0x64>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <_sbrk+0x64>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <_sbrk+0x64>)
 800448c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800448e:	68fb      	ldr	r3, [r7, #12]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20020000 	.word	0x20020000
 800449c:	00000400 	.word	0x00000400
 80044a0:	20000a08 	.word	0x20000a08
 80044a4:	20000a28 	.word	0x20000a28

080044a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <SystemInit+0x20>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <SystemInit+0x20>)
 80044b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044cc:	480d      	ldr	r0, [pc, #52]	; (8004504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044d0:	480d      	ldr	r0, [pc, #52]	; (8004508 <LoopForever+0x6>)
  ldr r1, =_edata
 80044d2:	490e      	ldr	r1, [pc, #56]	; (800450c <LoopForever+0xa>)
  ldr r2, =_sidata
 80044d4:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <LoopForever+0xe>)
  movs r3, #0
 80044d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044d8:	e002      	b.n	80044e0 <LoopCopyDataInit>

080044da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044de:	3304      	adds	r3, #4

080044e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e4:	d3f9      	bcc.n	80044da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e6:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044e8:	4c0b      	ldr	r4, [pc, #44]	; (8004518 <LoopForever+0x16>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044ec:	e001      	b.n	80044f2 <LoopFillZerobss>

080044ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044f0:	3204      	adds	r2, #4

080044f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f4:	d3fb      	bcc.n	80044ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044f6:	f7ff ffd7 	bl	80044a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044fa:	f007 fd91 	bl	800c020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044fe:	f7fd fe2d 	bl	800215c <main>

08004502 <LoopForever>:

LoopForever:
    b LoopForever
 8004502:	e7fe      	b.n	8004502 <LoopForever>
  ldr   r0, =_estack
 8004504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800450c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004510:	08011c98 	.word	0x08011c98
  ldr r2, =_sbss
 8004514:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004518:	20000a24 	.word	0x20000a24

0800451c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800451c:	e7fe      	b.n	800451c <ADC1_2_IRQHandler>
	...

08004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>:
#include "stm32g4xx_hal_gpio.h"
#include "math.h"
namespace Init{

double read_tilt_angle(ICM20948_WE myIMU)
{
 8004520:	b084      	sub	sp, #16
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800452c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  myIMU.readSensor();
 8004530:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004534:	f7fd f909 	bl	800174a <_ZN11ICM20948_WE10readSensorEv>
	  myIMU.getAccRawValues();
 8004538:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800453c:	f7fd f913 	bl	8001766 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8004540:	eef0 6a40 	vmov.f32	s13, s0
 8004544:	eeb0 7a60 	vmov.f32	s14, s1
 8004548:	eef0 7a41 	vmov.f32	s15, s2
 800454c:	edc7 6a03 	vstr	s13, [r7, #12]
 8004550:	ed87 7a04 	vstr	s14, [r7, #16]
 8004554:	edc7 7a05 	vstr	s15, [r7, #20]
	  auto val = myIMU.getGValues();
 8004558:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800455c:	f7fd f9a4 	bl	80018a8 <_ZN11ICM20948_WE10getGValuesEv>
 8004560:	eef0 6a40 	vmov.f32	s13, s0
 8004564:	eeb0 7a60 	vmov.f32	s14, s1
 8004568:	eef0 7a41 	vmov.f32	s15, s2
 800456c:	edc7 6a00 	vstr	s13, [r7]
 8004570:	ed87 7a01 	vstr	s14, [r7, #4]
 8004574:	edc7 7a02 	vstr	s15, [r7, #8]
	  if((val.x ==0) and (val.y==0) and (val.z == 0))
 8004578:	edd7 7a00 	vldr	s15, [r7]
 800457c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	d105      	bne.n	8004592 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0x72>
 8004586:	edd7 7a01 	vldr	s15, [r7, #4]
 800458a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  {

	  }
	  double tilt_angle = asin(val.z/1)*180/3.14159265;
 8004592:	edd7 7a02 	vldr	s15, [r7, #8]
 8004596:	eeb0 0a67 	vmov.f32	s0, s15
 800459a:	f7fc ff97 	bl	80014cc <_ZSt4asinf>
 800459e:	eef0 7a40 	vmov.f32	s15, s0
 80045a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80045e8 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xc8>
 80045a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045aa:	ee17 0a90 	vmov	r0, s15
 80045ae:	f7fb fffd 	bl	80005ac <__aeabi_f2d>
 80045b2:	a30b      	add	r3, pc, #44	; (adr r3, 80045e0 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xc0>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fc f97a 	bl	80008b0 <__aeabi_ddiv>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  return tilt_angle;
 80045c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80045cc:	eeb0 0a47 	vmov.f32	s0, s14
 80045d0:	eef0 0a67 	vmov.f32	s1, s15
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045dc:	b004      	add	sp, #16
 80045de:	4770      	bx	lr
 80045e0:	53c8d4f1 	.word	0x53c8d4f1
 80045e4:	400921fb 	.word	0x400921fb
 80045e8:	43340000 	.word	0x43340000

080045ec <_ZN4Init14sensor_checkupE11ICM20948_WE>:

LightBarrierCheck sensor_checkup(ICM20948_WE myIMU)
{
 80045ec:	b084      	sub	sp, #16
 80045ee:	b5b0      	push	{r4, r5, r7, lr}
 80045f0:	b092      	sub	sp, #72	; 0x48
 80045f2:	af0e      	add	r7, sp, #56	; 0x38
 80045f4:	f107 0420 	add.w	r4, r7, #32
 80045f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LightBarrierCheck ret;
	  // Alle sensoren testen:
	  // Distanz-Sensor:
	  double tilt_angle = read_tilt_angle(myIMU);
 80045fc:	466d      	mov	r5, sp
 80045fe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800460c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004612:	e885 0003 	stmia.w	r5, {r0, r1}
 8004616:	f107 0320 	add.w	r3, r7, #32
 800461a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800461c:	f7ff ff80 	bl	8004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004620:	ed87 0b00 	vstr	d0, [r7]
	  if(read_tilt_angle(myIMU) > 0)
 8004624:	466d      	mov	r5, sp
 8004626:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800463a:	e885 0003 	stmia.w	r5, {r0, r1}
 800463e:	f107 0320 	add.w	r3, r7, #32
 8004642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004644:	f7ff ff6c 	bl	8004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004648:	ec51 0b10 	vmov	r0, r1, d0
 800464c:	2301      	movs	r3, #1
 800464e:	461c      	mov	r4, r3
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	f7fc fa90 	bl	8000b7c <__aeabi_dcmpgt>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x7a>
 8004662:	2300      	movs	r3, #0
 8004664:	461c      	mov	r4, r3
 8004666:	b2e3      	uxtb	r3, r4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d033      	beq.n	80046d4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe8>
	  {
	  //	// Sensor senken, bis untere Kalibrierposition -30° erreicht ist
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004672:	483c      	ldr	r0, [pc, #240]	; (8004764 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8004674:	f001 fb4a 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8004678:	2201      	movs	r2, #1
 800467a:	2104      	movs	r1, #4
 800467c:	483a      	ldr	r0, [pc, #232]	; (8004768 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 800467e:	f001 fb45 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 8004682:	200a      	movs	r0, #10
 8004684:	f000 f8e6 	bl	8004854 <HAL_Delay>
	  	  ret = LightBarrierCheck::RightLBTriggered;
 8004688:	2301      	movs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
	  	while(read_tilt_angle(myIMU) > -20);
 800468c:	466d      	mov	r5, sp
 800468e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a6:	f107 0320 	add.w	r3, r7, #32
 80046aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ac:	f7ff ff38 	bl	8004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 80046b0:	ec51 0b10 	vmov	r0, r1, d0
 80046b4:	2301      	movs	r3, #1
 80046b6:	461c      	mov	r4, r3
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x180>)
 80046be:	f7fc fa5d 	bl	8000b7c <__aeabi_dcmpgt>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe0>
 80046c8:	2300      	movs	r3, #0
 80046ca:	461c      	mov	r4, r3
 80046cc:	b2e3      	uxtb	r3, r4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d034      	beq.n	800473c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 80046d2:	e7db      	b.n	800468c <_ZN4Init14sensor_checkupE11ICM20948_WE+0xa0>
	  }
	  else
	  {
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046da:	4822      	ldr	r0, [pc, #136]	; (8004764 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 80046dc:	f001 fb16 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80046e0:	2200      	movs	r2, #0
 80046e2:	2104      	movs	r1, #4
 80046e4:	4820      	ldr	r0, [pc, #128]	; (8004768 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 80046e6:	f001 fb11 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 80046ea:	200a      	movs	r0, #10
 80046ec:	f000 f8b2 	bl	8004854 <HAL_Delay>

	  	  ret = LightBarrierCheck::LeftLBTriggered;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
	  //	// Sensor heben, bis obere Kalibrierposition erreicht ist:
	  	while(read_tilt_angle(myIMU) < 20);
 80046f4:	466d      	mov	r5, sp
 80046f6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80046fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800470a:	e885 0003 	stmia.w	r5, {r0, r1}
 800470e:	f107 0320 	add.w	r3, r7, #32
 8004712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004714:	f7ff ff04 	bl	8004520 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004718:	ec51 0b10 	vmov	r0, r1, d0
 800471c:	2301      	movs	r3, #1
 800471e:	461c      	mov	r4, r3
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x184>)
 8004726:	f7fc fa0b 	bl	8000b40 <__aeabi_dcmplt>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x148>
 8004730:	2300      	movs	r3, #0
 8004732:	461c      	mov	r4, r3
 8004734:	b2e3      	uxtb	r3, r4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d000      	beq.n	800473c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 800473a:	e7db      	b.n	80046f4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x108>
	  }
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004742:	4808      	ldr	r0, [pc, #32]	; (8004764 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8004744:	f001 fae2 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8004748:	2200      	movs	r2, #0
 800474a:	2104      	movs	r1, #4
 800474c:	4806      	ldr	r0, [pc, #24]	; (8004768 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 800474e:	f001 fadd 	bl	8005d0c <HAL_GPIO_WritePin>
	  	  return ret;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800475e:	b004      	add	sp, #16
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	48000800 	.word	0x48000800
 8004768:	48000c00 	.word	0x48000c00
 800476c:	c0340000 	.word	0xc0340000
 8004770:	40340000 	.word	0x40340000

08004774 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800477e:	2003      	movs	r0, #3
 8004780:	f000 f994 	bl	8004aac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004784:	2000      	movs	r0, #0
 8004786:	f000 f80d 	bl	80047a4 <HAL_InitTick>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	71fb      	strb	r3, [r7, #7]
 8004794:	e001      	b.n	800479a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004796:	f7fe fb09 	bl	8002dac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800479a:	79fb      	ldrb	r3, [r7, #7]

}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_InitTick+0x68>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d022      	beq.n	80047fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_InitTick+0x6c>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_InitTick+0x68>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f9b2 	bl	8004b36 <HAL_SYSTICK_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d809      	bhi.n	80047f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047de:	2200      	movs	r2, #0
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e6:	f000 f96c 	bl	8004ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_InitTick+0x70>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e007      	b.n	8004802 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e004      	b.n	8004802 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e001      	b.n	8004802 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000002c 	.word	0x2000002c
 8004810:	20000024 	.word	0x20000024
 8004814:	20000028 	.word	0x20000028

08004818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_IncTick+0x1c>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_IncTick+0x20>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4413      	add	r3, r2
 8004826:	4a03      	ldr	r2, [pc, #12]	; (8004834 <HAL_IncTick+0x1c>)
 8004828:	6013      	str	r3, [r2, #0]
}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000a0c 	.word	0x20000a0c
 8004838:	2000002c 	.word	0x2000002c

0800483c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return uwTick;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_GetTick+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000a0c 	.word	0x20000a0c

08004854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff ffee 	bl	800483c <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486c:	d004      	beq.n	8004878 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_Delay+0x40>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004878:	bf00      	nop
 800487a:	f7ff ffdf 	bl	800483c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	429a      	cmp	r2, r3
 8004888:	d8f7      	bhi.n	800487a <HAL_Delay+0x26>
  {
  }
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000002c 	.word	0x2000002c

08004898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ca:	4a04      	ldr	r2, [pc, #16]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60d3      	str	r3, [r2, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <__NVIC_GetPriorityGrouping+0x18>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 0307 	and.w	r3, r3, #7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	; (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db12      	blt.n	8004970 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	490a      	ldr	r1, [pc, #40]	; (800497c <__NVIC_DisableIRQ+0x44>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	3320      	adds	r3, #32
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004964:	f3bf 8f4f 	dsb	sy
}
 8004968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800496a:	f3bf 8f6f 	isb	sy
}
 800496e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db0a      	blt.n	80049aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	490c      	ldr	r1, [pc, #48]	; (80049cc <__NVIC_SetPriority+0x4c>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a8:	e00a      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <__NVIC_SetPriority+0x50>)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000e100 	.word	0xe000e100
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f1c3 0307 	rsb	r3, r3, #7
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	bf28      	it	cs
 80049f2:	2304      	movcs	r3, #4
 80049f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d902      	bls.n	8004a04 <NVIC_EncodePriority+0x30>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3b03      	subs	r3, #3
 8004a02:	e000      	b.n	8004a06 <NVIC_EncodePriority+0x32>
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	401a      	ands	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	4313      	orrs	r3, r2
         );
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004a40:	f3bf 8f4f 	dsb	sy
}
 8004a44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <__NVIC_SystemReset+0x24>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a4e:	4904      	ldr	r1, [pc, #16]	; (8004a60 <__NVIC_SystemReset+0x24>)
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <__NVIC_SystemReset+0x28>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a56:	f3bf 8f4f 	dsb	sy
}
 8004a5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <__NVIC_SystemReset+0x20>
 8004a60:	e000ed00 	.word	0xe000ed00
 8004a64:	05fa0004 	.word	0x05fa0004

08004a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a78:	d301      	bcc.n	8004a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00f      	b.n	8004a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <SysTick_Config+0x40>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a86:	210f      	movs	r1, #15
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a8c:	f7ff ff78 	bl	8004980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <SysTick_Config+0x40>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a96:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <SysTick_Config+0x40>)
 8004a98:	2207      	movs	r2, #7
 8004a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	e000e010 	.word	0xe000e010

08004aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff feef 	bl	8004898 <__NVIC_SetPriorityGrouping>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad0:	f7ff ff06 	bl	80048e0 <__NVIC_GetPriorityGrouping>
 8004ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff7a 	bl	80049d4 <NVIC_EncodePriority>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff49 	bl	8004980 <__NVIC_SetPriority>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fef9 	bl	80048fc <__NVIC_EnableIRQ>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff09 	bl	8004938 <__NVIC_DisableIRQ>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004b32:	f7ff ff83 	bl	8004a3c <__NVIC_SystemReset>

08004b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff92 	bl	8004a68 <SysTick_Config>
 8004b44:	4603      	mov	r3, r0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d005      	beq.n	8004b72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
 8004b70:	e037      	b.n	8004be2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 020e 	bic.w	r2, r2, #14
 8004b80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f003 021f 	and.w	r2, r3, #31
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004be0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d00d      	beq.n	8004c34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e047      	b.n	8004cc4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020e 	bic.w	r2, r2, #14
 8004c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f202 	lsl.w	r2, r1, r2
 8004c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
    }
  }
  return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e147      	b.n	8004f72 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fe f87c 	bl	8002df4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0210 	bic.w	r2, r2, #16
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d0c:	f7ff fd96 	bl	800483c <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d12:	e012      	b.n	8004d3a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d14:	f7ff fd92 	bl	800483c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b0a      	cmp	r3, #10
 8004d20:	d90b      	bls.n	8004d3a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2203      	movs	r2, #3
 8004d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e11b      	b.n	8004f72 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d0e5      	beq.n	8004d14 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7ff fd70 	bl	800483c <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d5e:	e012      	b.n	8004d86 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d60:	f7ff fd6c 	bl	800483c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b0a      	cmp	r3, #10
 8004d6c:	d90b      	bls.n	8004d86 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0f5      	b.n	8004f72 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0e5      	beq.n	8004d60 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0202 	orr.w	r2, r2, #2
 8004da2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a74      	ldr	r2, [pc, #464]	; (8004f7c <HAL_FDCAN_Init+0x2ac>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d103      	bne.n	8004db6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004dae:	4a74      	ldr	r2, [pc, #464]	; (8004f80 <HAL_FDCAN_Init+0x2b0>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7c1b      	ldrb	r3, [r3, #16]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d108      	bne.n	8004dd0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	619a      	str	r2, [r3, #24]
 8004dce:	e007      	b.n	8004de0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dde:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7c5b      	ldrb	r3, [r3, #17]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d108      	bne.n	8004dfa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df6:	619a      	str	r2, [r3, #24]
 8004df8:	e007      	b.n	8004e0a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e08:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7c9b      	ldrb	r3, [r3, #18]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d108      	bne.n	8004e24 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e20:	619a      	str	r2, [r3, #24]
 8004e22:	e007      	b.n	8004e34 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e32:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004e58:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0210 	bic.w	r2, r2, #16
 8004e68:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d108      	bne.n	8004e84 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0204 	orr.w	r2, r2, #4
 8004e80:	619a      	str	r2, [r3, #24]
 8004e82:	e02c      	b.n	8004ede <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d028      	beq.n	8004ede <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d01c      	beq.n	8004ece <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0210 	orr.w	r2, r2, #16
 8004eb2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d110      	bne.n	8004ede <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0220 	orr.w	r2, r2, #32
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	e007      	b.n	8004ede <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0220 	orr.w	r2, r2, #32
 8004edc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ef6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f06:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f08:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f12:	d115      	bne.n	8004f40 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f22:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f2c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f3c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f3e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fc6e 	bl	8005838 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40006400 	.word	0x40006400
 8004f80:	40006500 	.word	0x40006500

08004f84 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f94:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d002      	beq.n	8004fa2 <HAL_FDCAN_ConfigFilter+0x1e>
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d13d      	bne.n	800501e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004fb6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004fbe:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e01d      	b.n	800501a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	075a      	lsls	r2, r3, #29
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	079a      	lsls	r2, r3, #30
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3304      	adds	r3, #4
 8005012:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e006      	b.n	800502c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d116      	bne.n	8005080 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	431a      	orrs	r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	431a      	orrs	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	431a      	orrs	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e006      	b.n	800508e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	f043 0204 	orr.w	r2, r3, #4
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d110      	bne.n	80050d0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699a      	ldr	r2, [r3, #24]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e006      	b.n	80050de <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	f043 0204 	orr.w	r2, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d12c      	bne.n	800515c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800510a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e023      	b.n	800516a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fbe9 	bl	8005910 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2101      	movs	r1, #1
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800514e:	2201      	movs	r2, #1
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	409a      	lsls	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e006      	b.n	800516a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	f043 0208 	orr.w	r2, r3, #8
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005174:	b480      	push	{r7}
 8005176:	b08b      	sub	sp, #44	; 0x2c
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005188:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800518a:	7efb      	ldrb	r3, [r7, #27]
 800518c:	2b02      	cmp	r3, #2
 800518e:	f040 80bc 	bne.w	800530a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d121      	bne.n	80051dc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0af      	b.n	8005318 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	e020      	b.n	800521e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e08d      	b.n	8005318 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0c9b      	lsrs	r3, r3, #18
 8005238:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e005      	b.n	800524e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	3304      	adds	r3, #4
 800526a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	0e1b      	lsrs	r3, r3, #24
 80052a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	0fda      	lsrs	r2, r3, #31
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	3304      	adds	r3, #4
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80052bc:	2300      	movs	r3, #0
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	e00a      	b.n	80052d8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	441a      	add	r2, r3
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	440b      	add	r3, r1
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	3301      	adds	r3, #1
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	4a11      	ldr	r2, [pc, #68]	; (8005324 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80052e0:	5cd3      	ldrb	r3, [r2, r3]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d3eb      	bcc.n	80052c2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d105      	bne.n	80052fc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80052fa:	e004      	b.n	8005306 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e006      	b.n	8005318 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530e:	f043 0208 	orr.w	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	372c      	adds	r7, #44	; 0x2c
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	08011708 	.word	0x08011708

08005328 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800533a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d003      	beq.n	800534a <HAL_FDCAN_ActivateNotification+0x22>
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b02      	cmp	r3, #2
 8005346:	f040 80c8 	bne.w	80054da <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d03b      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d031      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d027      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01d      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00c      	beq.n	80053ee <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d13b      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d131      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d127      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11d      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d113      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0202 	orr.w	r2, r2, #2
 8005488:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e006      	b.n	80054e8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054de:	f043 0202 	orr.w	r2, r3, #2
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	4013      	ands	r3, r2
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	4013      	ands	r3, r2
 800552a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005536:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	4013      	ands	r3, r2
 8005542:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800554e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005566:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4013      	ands	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f92e 	bl	80057fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01b      	beq.n	80055e4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d014      	beq.n	80055e4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055c2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80055dc:	6939      	ldr	r1, [r7, #16]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8ec 	bl	80057bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80055f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f8b6 	bl	8005766 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005608:	6a39      	ldr	r1, [r7, #32]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fd facc 	bl	8002ba8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800561e:	69f9      	ldr	r1, [r7, #28]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8ab 	bl	800577c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8a0 	bl	8005792 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01a      	beq.n	8005696 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d013      	beq.n	8005696 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005676:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4013      	ands	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f888 	bl	80057a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f888 	bl	80057d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f87c 	bl	80057e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d011      	beq.n	8005720 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005712:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f876 	bl	8005822 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f858 	bl	800580e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800575e:	bf00      	nop
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005840:	4b30      	ldr	r3, [pc, #192]	; (8005904 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005842:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2f      	ldr	r2, [pc, #188]	; (8005908 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d103      	bne.n	8005856 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005854:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2c      	ldr	r2, [pc, #176]	; (800590c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005866:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005876:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	041a      	lsls	r2, r3, #16
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	061a      	lsls	r2, r3, #24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e005      	b.n	80058ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d3f3      	bcc.n	80058de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	4000a400 	.word	0x4000a400
 8005908:	40006800 	.word	0x40006800
 800590c:	40006c00 	.word	0x40006c00

08005910 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800592e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005936:	4313      	orrs	r3, r2
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	e00a      	b.n	8005952 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005944:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800594a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800594c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005950:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800595c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005962:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005968:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3304      	adds	r3, #4
 800598e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3304      	adds	r3, #4
 800599a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e020      	b.n	80059e4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3303      	adds	r3, #3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3302      	adds	r3, #2
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	440b      	add	r3, r1
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059ba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3301      	adds	r3, #1
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	440b      	add	r3, r1
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059c8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	440a      	add	r2, r1
 80059d0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80059d2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	3304      	adds	r3, #4
 80059dc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3304      	adds	r3, #4
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	4a06      	ldr	r2, [pc, #24]	; (8005a04 <FDCAN_CopyMessageToRAM+0xf4>)
 80059ec:	5cd3      	ldrb	r3, [r2, r3]
 80059ee:	461a      	mov	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d3d5      	bcc.n	80059a2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	3724      	adds	r7, #36	; 0x24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	08011708 	.word	0x08011708

08005a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a16:	e15a      	b.n	8005cce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 814c 	beq.w	8005cc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d005      	beq.n	8005a48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d130      	bne.n	8005aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0201 	and.w	r2, r3, #1
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d017      	beq.n	8005ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d123      	bne.n	8005b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	6939      	ldr	r1, [r7, #16]
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80a6 	beq.w	8005cc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7c:	4b5b      	ldr	r3, [pc, #364]	; (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	4a5a      	ldr	r2, [pc, #360]	; (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6613      	str	r3, [r2, #96]	; 0x60
 8005b88:	4b58      	ldr	r3, [pc, #352]	; (8005cec <HAL_GPIO_Init+0x2e4>)
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b94:	4a56      	ldr	r2, [pc, #344]	; (8005cf0 <HAL_GPIO_Init+0x2e8>)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	220f      	movs	r2, #15
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005bbe:	d01f      	beq.n	8005c00 <HAL_GPIO_Init+0x1f8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a4c      	ldr	r2, [pc, #304]	; (8005cf4 <HAL_GPIO_Init+0x2ec>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d019      	beq.n	8005bfc <HAL_GPIO_Init+0x1f4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a4b      	ldr	r2, [pc, #300]	; (8005cf8 <HAL_GPIO_Init+0x2f0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_GPIO_Init+0x1f0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a4a      	ldr	r2, [pc, #296]	; (8005cfc <HAL_GPIO_Init+0x2f4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_GPIO_Init+0x1ec>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a49      	ldr	r2, [pc, #292]	; (8005d00 <HAL_GPIO_Init+0x2f8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <HAL_GPIO_Init+0x1e8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a48      	ldr	r2, [pc, #288]	; (8005d04 <HAL_GPIO_Init+0x2fc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_GPIO_Init+0x1e4>
 8005be8:	2305      	movs	r3, #5
 8005bea:	e00a      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bec:	2306      	movs	r3, #6
 8005bee:	e008      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e006      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e004      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e002      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <HAL_GPIO_Init+0x1fa>
 8005c00:	2300      	movs	r3, #0
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	f002 0203 	and.w	r2, r2, #3
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	4093      	lsls	r3, r2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c12:	4937      	ldr	r1, [pc, #220]	; (8005cf0 <HAL_GPIO_Init+0x2e8>)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c20:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c44:	4a30      	ldr	r2, [pc, #192]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4013      	ands	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cc2:	4a11      	ldr	r2, [pc, #68]	; (8005d08 <HAL_GPIO_Init+0x300>)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f ae9d 	bne.w	8005a18 <HAL_GPIO_Init+0x10>
  }
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	48000800 	.word	0x48000800
 8005cfc:	48000c00 	.word	0x48000c00
 8005d00:	48001000 	.word	0x48001000
 8005d04:	48001400 	.word	0x48001400
 8005d08:	40010400 	.word	0x40010400

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d28:	e002      	b.n	8005d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d4e:	887a      	ldrh	r2, [r7, #2]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4013      	ands	r3, r2
 8005d54:	041a      	lsls	r2, r3, #16
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	43d9      	mvns	r1, r3
 8005d5a:	887b      	ldrh	r3, [r7, #2]
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	619a      	str	r2, [r3, #24]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d86:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f806 	bl	8005da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40010400 	.word	0x40010400

08005da0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e081      	b.n	8005ecc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fd f875 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2224      	movs	r2, #36	; 0x24
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	e006      	b.n	8005e3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d104      	bne.n	8005e50 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e62:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69d9      	ldr	r1, [r3, #28]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	817b      	strh	r3, [r7, #10]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 80da 	bne.w	80060aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_I2C_Master_Transmit+0x30>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e0d3      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f0c:	f7fe fc96 	bl	800483c <HAL_GetTick>
 8005f10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2319      	movs	r3, #25
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fdc4 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e0be      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2221      	movs	r2, #33	; 0x21
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	893a      	ldrh	r2, [r7, #8]
 8005f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2bff      	cmp	r3, #255	; 0xff
 8005f5e:	d90e      	bls.n	8005f7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	4b51      	ldr	r3, [pc, #324]	; (80060b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 ffba 	bl	8006ef0 <I2C_TransferConfig>
 8005f7c:	e06c      	b.n	8006058 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	8979      	ldrh	r1, [r7, #10]
 8005f90:	4b48      	ldr	r3, [pc, #288]	; (80060b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 ffa9 	bl	8006ef0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f9e:	e05b      	b.n	8006058 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	6a39      	ldr	r1, [r7, #32]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fdc1 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e07b      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d034      	beq.n	8006058 <HAL_I2C_Master_Transmit+0x184>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d130      	bne.n	8006058 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fd53 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e04d      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2bff      	cmp	r3, #255	; 0xff
 8006018:	d90e      	bls.n	8006038 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	22ff      	movs	r2, #255	; 0xff
 800601e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	b2da      	uxtb	r2, r3
 8006026:	8979      	ldrh	r1, [r7, #10]
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 ff5d 	bl	8006ef0 <I2C_TransferConfig>
 8006036:	e00f      	b.n	8006058 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	b2da      	uxtb	r2, r3
 8006048:	8979      	ldrh	r1, [r7, #10]
 800604a:	2300      	movs	r3, #0
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 ff4c 	bl	8006ef0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d19e      	bne.n	8005fa0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fda0 	bl	8006bac <I2C_WaitOnSTOPFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e01a      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2220      	movs	r2, #32
 800607c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800608a:	400b      	ands	r3, r1
 800608c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e000      	b.n	80060ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
  }
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	80002000 	.word	0x80002000
 80060b8:	fe00e800 	.word	0xfe00e800

080060bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	461a      	mov	r2, r3
 80060c8:	460b      	mov	r3, r1
 80060ca:	817b      	strh	r3, [r7, #10]
 80060cc:	4613      	mov	r3, r2
 80060ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	f040 80db 	bne.w	8006294 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_I2C_Master_Receive+0x30>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e0d4      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060f4:	f7fe fba2 	bl	800483c <HAL_GetTick>
 80060f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	2319      	movs	r3, #25
 8006100:	2201      	movs	r2, #1
 8006102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fcd0 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0bf      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2222      	movs	r2, #34	; 0x22
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2210      	movs	r2, #16
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	893a      	ldrh	r2, [r7, #8]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2bff      	cmp	r3, #255	; 0xff
 8006146:	d90e      	bls.n	8006166 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	22ff      	movs	r2, #255	; 0xff
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	b2da      	uxtb	r2, r3
 8006154:	8979      	ldrh	r1, [r7, #10]
 8006156:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <HAL_I2C_Master_Receive+0x1e4>)
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fec6 	bl	8006ef0 <I2C_TransferConfig>
 8006164:	e06d      	b.n	8006242 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006174:	b2da      	uxtb	r2, r3
 8006176:	8979      	ldrh	r1, [r7, #10]
 8006178:	4b49      	ldr	r3, [pc, #292]	; (80062a0 <HAL_I2C_Master_Receive+0x1e4>)
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 feb5 	bl	8006ef0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006186:	e05c      	b.n	8006242 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	6a39      	ldr	r1, [r7, #32]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fd49 	bl	8006c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e07c      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d034      	beq.n	8006242 <HAL_I2C_Master_Receive+0x186>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d130      	bne.n	8006242 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fc5e 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e04d      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2bff      	cmp	r3, #255	; 0xff
 8006202:	d90e      	bls.n	8006222 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	b2da      	uxtb	r2, r3
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fe68 	bl	8006ef0 <I2C_TransferConfig>
 8006220:	e00f      	b.n	8006242 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	b2da      	uxtb	r2, r3
 8006232:	8979      	ldrh	r1, [r7, #10]
 8006234:	2300      	movs	r3, #0
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fe57 	bl	8006ef0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d19d      	bne.n	8006188 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	6a39      	ldr	r1, [r7, #32]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fcab 	bl	8006bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e01a      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2220      	movs	r2, #32
 8006266:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_I2C_Master_Receive+0x1e8>)
 8006274:	400b      	ands	r3, r1
 8006276:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	80002400 	.word	0x80002400
 80062a4:	fe00e800 	.word	0xfe00e800

080062a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	817b      	strh	r3, [r7, #10]
 80062ba:	460b      	mov	r3, r1
 80062bc:	813b      	strh	r3, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 80f9 	bne.w	80064c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_I2C_Mem_Write+0x34>
 80062d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0ed      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_I2C_Mem_Write+0x4e>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e0e6      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062fe:	f7fe fa9d 	bl	800483c <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2319      	movs	r3, #25
 800630a:	2201      	movs	r2, #1
 800630c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fbcb 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0d1      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2221      	movs	r2, #33	; 0x21
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2240      	movs	r2, #64	; 0x40
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006348:	88f8      	ldrh	r0, [r7, #6]
 800634a:	893a      	ldrh	r2, [r7, #8]
 800634c:	8979      	ldrh	r1, [r7, #10]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	4603      	mov	r3, r0
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fadb 	bl	8006914 <I2C_RequestMemoryWrite>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0a9      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2bff      	cmp	r3, #255	; 0xff
 8006378:	d90e      	bls.n	8006398 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8979      	ldrh	r1, [r7, #10]
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fdad 	bl	8006ef0 <I2C_TransferConfig>
 8006396:	e00f      	b.n	80063b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	8979      	ldrh	r1, [r7, #10]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fd9c 	bl	8006ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fbb5 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e07b      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d034      	beq.n	8006470 <HAL_I2C_Mem_Write+0x1c8>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d130      	bne.n	8006470 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	2200      	movs	r2, #0
 8006416:	2180      	movs	r1, #128	; 0x80
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fb47 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e04d      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2bff      	cmp	r3, #255	; 0xff
 8006430:	d90e      	bls.n	8006450 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643c:	b2da      	uxtb	r2, r3
 800643e:	8979      	ldrh	r1, [r7, #10]
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fd51 	bl	8006ef0 <I2C_TransferConfig>
 800644e:	e00f      	b.n	8006470 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	b2da      	uxtb	r2, r3
 8006460:	8979      	ldrh	r1, [r7, #10]
 8006462:	2300      	movs	r3, #0
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fd40 	bl	8006ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d19e      	bne.n	80063b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fb94 	bl	8006bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e01a      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2220      	movs	r2, #32
 8006494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <HAL_I2C_Mem_Write+0x224>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e000      	b.n	80064c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	fe00e800 	.word	0xfe00e800

080064d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	817b      	strh	r3, [r7, #10]
 80064e2:	460b      	mov	r3, r1
 80064e4:	813b      	strh	r3, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	f040 80fd 	bne.w	80066f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_I2C_Mem_Read+0x34>
 80064fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0f1      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_I2C_Mem_Read+0x4e>
 800651a:	2302      	movs	r3, #2
 800651c:	e0ea      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006526:	f7fe f989 	bl	800483c <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2319      	movs	r3, #25
 8006532:	2201      	movs	r2, #1
 8006534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fab7 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0d5      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2222      	movs	r2, #34	; 0x22
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006570:	88f8      	ldrh	r0, [r7, #6]
 8006572:	893a      	ldrh	r2, [r7, #8]
 8006574:	8979      	ldrh	r1, [r7, #10]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4603      	mov	r3, r0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fa1b 	bl	80069bc <I2C_RequestMemoryRead>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0ad      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d90e      	bls.n	80065c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	8979      	ldrh	r1, [r7, #10]
 80065b0:	4b52      	ldr	r3, [pc, #328]	; (80066fc <HAL_I2C_Mem_Read+0x22c>)
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fc99 	bl	8006ef0 <I2C_TransferConfig>
 80065be:	e00f      	b.n	80065e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	8979      	ldrh	r1, [r7, #10]
 80065d2:	4b4a      	ldr	r3, [pc, #296]	; (80066fc <HAL_I2C_Mem_Read+0x22c>)
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fc88 	bl	8006ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2200      	movs	r2, #0
 80065e8:	2104      	movs	r1, #4
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fa5e 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e07c      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d034      	beq.n	80066a0 <HAL_I2C_Mem_Read+0x1d0>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d130      	bne.n	80066a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fa2f 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e04d      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bff      	cmp	r3, #255	; 0xff
 8006660:	d90e      	bls.n	8006680 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	b2da      	uxtb	r2, r3
 800666e:	8979      	ldrh	r1, [r7, #10]
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fc39 	bl	8006ef0 <I2C_TransferConfig>
 800667e:	e00f      	b.n	80066a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	b2da      	uxtb	r2, r3
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	2300      	movs	r3, #0
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fc28 	bl	8006ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d19a      	bne.n	80065e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fa7c 	bl	8006bac <I2C_WaitOnSTOPFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e01a      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2220      	movs	r2, #32
 80066c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6859      	ldr	r1, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_I2C_Mem_Read+0x230>)
 80066d2:	400b      	ands	r3, r1
 80066d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	80002400 	.word	0x80002400
 8006700:	fe00e800 	.word	0xfe00e800

08006704 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	460b      	mov	r3, r1
 8006712:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b20      	cmp	r3, #32
 8006722:	f040 80f1 	bne.w	8006908 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006734:	d101      	bne.n	800673a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006736:	2302      	movs	r3, #2
 8006738:	e0e7      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_I2C_IsDeviceReady+0x44>
 8006744:	2302      	movs	r3, #2
 8006746:	e0e0      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2224      	movs	r2, #36	; 0x24
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_I2C_IsDeviceReady+0x72>
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006774:	e004      	b.n	8006780 <HAL_I2C_IsDeviceReady+0x7c>
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006786:	f7fe f859 	bl	800483c <HAL_GetTick>
 800678a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b20      	cmp	r3, #32
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067b8:	e034      	b.n	8006824 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c0:	d01a      	beq.n	80067f8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fe f83b 	bl	800483c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <HAL_I2C_IsDeviceReady+0xd4>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e088      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b10      	cmp	r3, #16
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006824:	7ffb      	ldrb	r3, [r7, #31]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_I2C_IsDeviceReady+0x12c>
 800682a:	7fbb      	ldrb	r3, [r7, #30]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0c4      	beq.n	80067ba <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b10      	cmp	r3, #16
 800683c:	d01a      	beq.n	8006874 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	2120      	movs	r1, #32
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f92f 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e058      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2220      	movs	r2, #32
 800685e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e04a      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	2120      	movs	r1, #32
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f914 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e03d      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2210      	movs	r2, #16
 8006894:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2220      	movs	r2, #32
 800689c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d118      	bne.n	80068d8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	2120      	movs	r1, #32
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f8f3 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e01c      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2220      	movs	r2, #32
 80068d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3301      	adds	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f63f af3b 	bhi.w	800675e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4603      	mov	r3, r0
 8006924:	817b      	strh	r3, [r7, #10]
 8006926:	460b      	mov	r3, r1
 8006928:	813b      	strh	r3, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	8979      	ldrh	r1, [r7, #10]
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <I2C_RequestMemoryWrite+0xa4>)
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fad7 	bl	8006ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f8f0 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e02c      	b.n	80069b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d105      	bne.n	8006968 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800695c:	893b      	ldrh	r3, [r7, #8]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	629a      	str	r2, [r3, #40]	; 0x28
 8006966:	e015      	b.n	8006994 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006968:	893b      	ldrh	r3, [r7, #8]
 800696a:	0a1b      	lsrs	r3, r3, #8
 800696c:	b29b      	uxth	r3, r3
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f8d6 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e012      	b.n	80069b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800698a:	893b      	ldrh	r3, [r7, #8]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f884 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	80002000 	.word	0x80002000

080069bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	817b      	strh	r3, [r7, #10]
 80069ce:	460b      	mov	r3, r1
 80069d0:	813b      	strh	r3, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	8979      	ldrh	r1, [r7, #10]
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <I2C_RequestMemoryRead+0xa4>)
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2300      	movs	r3, #0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fa84 	bl	8006ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	69b9      	ldr	r1, [r7, #24]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f89d 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e02c      	b.n	8006a56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a0c:	e015      	b.n	8006a3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a0e:	893b      	ldrh	r3, [r7, #8]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	69b9      	ldr	r1, [r7, #24]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f883 	bl	8006b2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e012      	b.n	8006a56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2140      	movs	r1, #64	; 0x40
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f831 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	80002000 	.word	0x80002000

08006a64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d103      	bne.n	8006a82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d007      	beq.n	8006aa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	619a      	str	r2, [r3, #24]
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abc:	e022      	b.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac4:	d01e      	beq.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac6:	f7fd feb9 	bl	800483c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d302      	bcc.n	8006adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d113      	bne.n	8006b04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e00f      	b.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d0cd      	beq.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b38:	e02c      	b.n	8006b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f8ea 	bl	8006d18 <I2C_IsErrorOccurred>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e02a      	b.n	8006ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b54:	d01e      	beq.n	8006b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fd fe71 	bl	800483c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d113      	bne.n	8006b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e007      	b.n	8006ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d1cb      	bne.n	8006b3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bb8:	e028      	b.n	8006c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f8aa 	bl	8006d18 <I2C_IsErrorOccurred>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e026      	b.n	8006c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fd fe35 	bl	800483c <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d113      	bne.n	8006c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e007      	b.n	8006c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d1cf      	bne.n	8006bba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c30:	e064      	b.n	8006cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f86e 	bl	8006d18 <I2C_IsErrorOccurred>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e062      	b.n	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d138      	bne.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d105      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e04e      	b.n	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d107      	bne.n	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2210      	movs	r2, #16
 8006c82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2204      	movs	r2, #4
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44
 8006c8a:	e002      	b.n	8006c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2220      	movs	r2, #32
 8006c98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006ca6:	400b      	ands	r3, r1
 8006ca8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e022      	b.n	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc6:	f7fd fdb9 	bl	800483c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d302      	bcc.n	8006cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10f      	bne.n	8006cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e007      	b.n	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d193      	bne.n	8006c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	fe00e800 	.word	0xfe00e800

08006d18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d075      	beq.n	8006e30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2210      	movs	r2, #16
 8006d4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d4c:	e056      	b.n	8006dfc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d54:	d052      	beq.n	8006dfc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fd fd71 	bl	800483c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <I2C_IsErrorOccurred+0x54>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d147      	bne.n	8006dfc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8e:	d12e      	bne.n	8006dee <I2C_IsErrorOccurred+0xd6>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d96:	d02a      	beq.n	8006dee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006d98:	7cfb      	ldrb	r3, [r7, #19]
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d027      	beq.n	8006dee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dac:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006dae:	f7fd fd45 	bl	800483c <HAL_GetTick>
 8006db2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006db4:	e01b      	b.n	8006dee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006db6:	f7fd fd41 	bl	800483c <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b19      	cmp	r3, #25
 8006dc2:	d914      	bls.n	8006dee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d1dc      	bne.n	8006db6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d003      	beq.n	8006e12 <I2C_IsErrorOccurred+0xfa>
 8006e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d09d      	beq.n	8006d4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f043 0304 	orr.w	r3, r3, #4
 8006e28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	f043 0308 	orr.w	r3, r3, #8
 8006e6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01c      	beq.n	8006ee0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fddc 	bl	8006a64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6859      	ldr	r1, [r3, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <I2C_IsErrorOccurred+0x1d4>)
 8006eb8:	400b      	ands	r3, r1
 8006eba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3728      	adds	r7, #40	; 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	fe00e800 	.word	0xfe00e800

08006ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	817b      	strh	r3, [r7, #10]
 8006efe:	4613      	mov	r3, r2
 8006f00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f02:	897b      	ldrh	r3, [r7, #10]
 8006f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f08:	7a7b      	ldrb	r3, [r7, #9]
 8006f0a:	041b      	lsls	r3, r3, #16
 8006f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f10:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	0d5b      	lsrs	r3, r3, #21
 8006f2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <I2C_TransferConfig+0x60>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	43db      	mvns	r3, r3
 8006f34:	ea02 0103 	and.w	r1, r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	03ff63ff 	.word	0x03ff63ff

08006f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d138      	bne.n	8006fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e032      	b.n	8006fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	; 0x24
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6819      	ldr	r1, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d139      	bne.n	8007074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800700a:	2302      	movs	r3, #2
 800700c:	e033      	b.n	8007076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	; 0x24
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800703c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d141      	bne.n	8007116 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007092:	4b4b      	ldr	r3, [pc, #300]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800709a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709e:	d131      	bne.n	8007104 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070a0:	4b47      	ldr	r3, [pc, #284]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a6:	4a46      	ldr	r2, [pc, #280]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070b0:	4b43      	ldr	r3, [pc, #268]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070b8:	4a41      	ldr	r2, [pc, #260]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070c0:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2232      	movs	r2, #50	; 0x32
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	4a3f      	ldr	r2, [pc, #252]	; (80071c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	0c9b      	lsrs	r3, r3, #18
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070d6:	e002      	b.n	80070de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3b01      	subs	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070de:	4b38      	ldr	r3, [pc, #224]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ea:	d102      	bne.n	80070f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f2      	bne.n	80070d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070f2:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fe:	d158      	bne.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e057      	b.n	80071b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007104:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800710a:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800710c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007114:	e04d      	b.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800711c:	d141      	bne.n	80071a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800711e:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712a:	d131      	bne.n	8007190 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800712c:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007132:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800713c:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007144:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800714a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800714c:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2232      	movs	r2, #50	; 0x32
 8007152:	fb02 f303 	mul.w	r3, r2, r3
 8007156:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	0c9b      	lsrs	r3, r3, #18
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007162:	e002      	b.n	800716a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3b01      	subs	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800716a:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007176:	d102      	bne.n	800717e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f2      	bne.n	8007164 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718a:	d112      	bne.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e011      	b.n	80071b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80071a0:	e007      	b.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071aa:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	40007000 	.word	0x40007000
 80071c4:	20000024 	.word	0x20000024
 80071c8:	431bde83 	.word	0x431bde83

080071cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071da:	6093      	str	r3, [r2, #8]
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40007000 	.word	0x40007000

080071ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e306      	b.n	800780c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d075      	beq.n	80072f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800720a:	4b97      	ldr	r3, [pc, #604]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007214:	4b94      	ldr	r3, [pc, #592]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d102      	bne.n	800722a <HAL_RCC_OscConfig+0x3e>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d002      	beq.n	8007230 <HAL_RCC_OscConfig+0x44>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b08      	cmp	r3, #8
 800722e:	d10b      	bne.n	8007248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	4b8d      	ldr	r3, [pc, #564]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d05b      	beq.n	80072f4 <HAL_RCC_OscConfig+0x108>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d157      	bne.n	80072f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e2e1      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007250:	d106      	bne.n	8007260 <HAL_RCC_OscConfig+0x74>
 8007252:	4b85      	ldr	r3, [pc, #532]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a84      	ldr	r2, [pc, #528]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e01d      	b.n	800729c <HAL_RCC_OscConfig+0xb0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007268:	d10c      	bne.n	8007284 <HAL_RCC_OscConfig+0x98>
 800726a:	4b7f      	ldr	r3, [pc, #508]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a7e      	ldr	r2, [pc, #504]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4b7c      	ldr	r3, [pc, #496]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a7b      	ldr	r2, [pc, #492]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800727c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e00b      	b.n	800729c <HAL_RCC_OscConfig+0xb0>
 8007284:	4b78      	ldr	r3, [pc, #480]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a77      	ldr	r2, [pc, #476]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	4b75      	ldr	r3, [pc, #468]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a74      	ldr	r2, [pc, #464]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800729a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d013      	beq.n	80072cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fd faca 	bl	800483c <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fd fac6 	bl	800483c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	; 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e2a6      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072be:	4b6a      	ldr	r3, [pc, #424]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0xc0>
 80072ca:	e014      	b.n	80072f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fd fab6 	bl	800483c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d4:	f7fd fab2 	bl	800483c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	; 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e292      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072e6:	4b60      	ldr	r3, [pc, #384]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0xe8>
 80072f2:	e000      	b.n	80072f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d075      	beq.n	80073ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007302:	4b59      	ldr	r3, [pc, #356]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800730c:	4b56      	ldr	r3, [pc, #344]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b0c      	cmp	r3, #12
 800731a:	d102      	bne.n	8007322 <HAL_RCC_OscConfig+0x136>
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d002      	beq.n	8007328 <HAL_RCC_OscConfig+0x13c>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b04      	cmp	r3, #4
 8007326:	d11f      	bne.n	8007368 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007328:	4b4f      	ldr	r3, [pc, #316]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <HAL_RCC_OscConfig+0x154>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e265      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	4946      	ldr	r1, [pc, #280]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007350:	4313      	orrs	r3, r2
 8007352:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007354:	4b45      	ldr	r3, [pc, #276]	; (800746c <HAL_RCC_OscConfig+0x280>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7fd fa23 	bl	80047a4 <HAL_InitTick>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d043      	beq.n	80073ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e251      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d023      	beq.n	80073b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007370:	4b3d      	ldr	r3, [pc, #244]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fd fa5e 	bl	800483c <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007384:	f7fd fa5a 	bl	800483c <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e23a      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f0      	beq.n	8007384 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a2:	4b31      	ldr	r3, [pc, #196]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	061b      	lsls	r3, r3, #24
 80073b0:	492d      	ldr	r1, [pc, #180]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	604b      	str	r3, [r1, #4]
 80073b6:	e01a      	b.n	80073ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073b8:	4b2b      	ldr	r3, [pc, #172]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80073be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fd fa3a 	bl	800483c <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073cc:	f7fd fa36 	bl	800483c <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e216      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x1e0>
 80073ea:	e000      	b.n	80073ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d041      	beq.n	800747e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01c      	beq.n	800743c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007402:	4b19      	ldr	r3, [pc, #100]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007412:	f7fd fa13 	bl	800483c <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800741a:	f7fd fa0f 	bl	800483c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e1ef      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800742e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ef      	beq.n	800741a <HAL_RCC_OscConfig+0x22e>
 800743a:	e020      	b.n	800747e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 800743e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007442:	4a09      	ldr	r2, [pc, #36]	; (8007468 <HAL_RCC_OscConfig+0x27c>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744c:	f7fd f9f6 	bl	800483c <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007452:	e00d      	b.n	8007470 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007454:	f7fd f9f2 	bl	800483c <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d906      	bls.n	8007470 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e1d2      	b.n	800780c <HAL_RCC_OscConfig+0x620>
 8007466:	bf00      	nop
 8007468:	40021000 	.word	0x40021000
 800746c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007470:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1ea      	bne.n	8007454 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80a6 	beq.w	80075d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800748c:	2300      	movs	r3, #0
 800748e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007490:	4b84      	ldr	r3, [pc, #528]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_OscConfig+0x2b4>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x2b6>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a6:	4b7f      	ldr	r3, [pc, #508]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	4a7e      	ldr	r2, [pc, #504]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6593      	str	r3, [r2, #88]	; 0x58
 80074b2:	4b7c      	ldr	r3, [pc, #496]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80074be:	2301      	movs	r3, #1
 80074c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074c2:	4b79      	ldr	r3, [pc, #484]	; (80076a8 <HAL_RCC_OscConfig+0x4bc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d118      	bne.n	8007500 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ce:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <HAL_RCC_OscConfig+0x4bc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <HAL_RCC_OscConfig+0x4bc>)
 80074d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074da:	f7fd f9af 	bl	800483c <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e2:	f7fd f9ab 	bl	800483c <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e18b      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074f4:	4b6c      	ldr	r3, [pc, #432]	; (80076a8 <HAL_RCC_OscConfig+0x4bc>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0f0      	beq.n	80074e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d108      	bne.n	800751a <HAL_RCC_OscConfig+0x32e>
 8007508:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	4a65      	ldr	r2, [pc, #404]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007518:	e024      	b.n	8007564 <HAL_RCC_OscConfig+0x378>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b05      	cmp	r3, #5
 8007520:	d110      	bne.n	8007544 <HAL_RCC_OscConfig+0x358>
 8007522:	4b60      	ldr	r3, [pc, #384]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007528:	4a5e      	ldr	r2, [pc, #376]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f043 0304 	orr.w	r3, r3, #4
 800752e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007532:	4b5c      	ldr	r3, [pc, #368]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	4a5a      	ldr	r2, [pc, #360]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007542:	e00f      	b.n	8007564 <HAL_RCC_OscConfig+0x378>
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754a:	4a56      	ldr	r2, [pc, #344]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007554:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755a:	4a52      	ldr	r2, [pc, #328]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800755c:	f023 0304 	bic.w	r3, r3, #4
 8007560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d016      	beq.n	800759a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756c:	f7fd f966 	bl	800483c <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007572:	e00a      	b.n	800758a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007574:	f7fd f962 	bl	800483c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007582:	4293      	cmp	r3, r2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e140      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800758a:	4b46      	ldr	r3, [pc, #280]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0ed      	beq.n	8007574 <HAL_RCC_OscConfig+0x388>
 8007598:	e015      	b.n	80075c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759a:	f7fd f94f 	bl	800483c <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075a0:	e00a      	b.n	80075b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a2:	f7fd f94b 	bl	800483c <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e129      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075b8:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1ed      	bne.n	80075a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075c6:	7ffb      	ldrb	r3, [r7, #31]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d105      	bne.n	80075d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075cc:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d0:	4a34      	ldr	r2, [pc, #208]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80075d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d03c      	beq.n	800765e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01c      	beq.n	8007626 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80075ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075f2:	4a2c      	ldr	r2, [pc, #176]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fc:	f7fd f91e 	bl	800483c <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007604:	f7fd f91a 	bl	800483c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e0fa      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007616:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0ef      	beq.n	8007604 <HAL_RCC_OscConfig+0x418>
 8007624:	e01b      	b.n	800765e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007626:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762c:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007636:	f7fd f901 	bl	800483c <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800763e:	f7fd f8fd 	bl	800483c <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e0dd      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1ef      	bne.n	800763e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80d1 	beq.w	800780a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007668:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b0c      	cmp	r3, #12
 8007672:	f000 808b 	beq.w	800778c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d15e      	bne.n	800773c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <HAL_RCC_OscConfig+0x4b8>)
 8007684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fd f8d7 	bl	800483c <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007690:	e00c      	b.n	80076ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007692:	f7fd f8d3 	bl	800483c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d905      	bls.n	80076ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0b3      	b.n	800780c <HAL_RCC_OscConfig+0x620>
 80076a4:	40021000 	.word	0x40021000
 80076a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076ac:	4b59      	ldr	r3, [pc, #356]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ec      	bne.n	8007692 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b8:	4b56      	ldr	r3, [pc, #344]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	4b56      	ldr	r3, [pc, #344]	; (8007818 <HAL_RCC_OscConfig+0x62c>)
 80076be:	4013      	ands	r3, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6a11      	ldr	r1, [r2, #32]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076c8:	3a01      	subs	r2, #1
 80076ca:	0112      	lsls	r2, r2, #4
 80076cc:	4311      	orrs	r1, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076d2:	0212      	lsls	r2, r2, #8
 80076d4:	4311      	orrs	r1, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076da:	0852      	lsrs	r2, r2, #1
 80076dc:	3a01      	subs	r2, #1
 80076de:	0552      	lsls	r2, r2, #21
 80076e0:	4311      	orrs	r1, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076e6:	0852      	lsrs	r2, r2, #1
 80076e8:	3a01      	subs	r2, #1
 80076ea:	0652      	lsls	r2, r2, #25
 80076ec:	4311      	orrs	r1, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076f2:	06d2      	lsls	r2, r2, #27
 80076f4:	430a      	orrs	r2, r1
 80076f6:	4947      	ldr	r1, [pc, #284]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076fc:	4b45      	ldr	r3, [pc, #276]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a44      	ldr	r2, [pc, #272]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 8007702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007706:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007708:	4b42      	ldr	r3, [pc, #264]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a41      	ldr	r2, [pc, #260]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800770e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007712:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fd f892 	bl	800483c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800771c:	f7fd f88e 	bl	800483c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e06e      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772e:	4b39      	ldr	r3, [pc, #228]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x530>
 800773a:	e066      	b.n	800780a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773c:	4b35      	ldr	r3, [pc, #212]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a34      	ldr	r2, [pc, #208]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 8007742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007746:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007748:	4b32      	ldr	r3, [pc, #200]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4a31      	ldr	r2, [pc, #196]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800774e:	f023 0303 	bic.w	r3, r3, #3
 8007752:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007754:	4b2f      	ldr	r3, [pc, #188]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800775a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800775e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007762:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fd f86a 	bl	800483c <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776c:	f7fd f866 	bl	800483c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e046      	b.n	800780c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800777e:	4b25      	ldr	r3, [pc, #148]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x580>
 800778a:	e03e      	b.n	800780a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e039      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007798:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <HAL_RCC_OscConfig+0x628>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 0203 	and.w	r2, r3, #3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d12c      	bne.n	8007806 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	3b01      	subs	r3, #1
 80077b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d123      	bne.n	8007806 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d11b      	bne.n	8007806 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077da:	429a      	cmp	r2, r3
 80077dc:	d113      	bne.n	8007806 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	3b01      	subs	r3, #1
 80077ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d109      	bne.n	8007806 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	3b01      	subs	r3, #1
 8007800:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007802:	429a      	cmp	r2, r3
 8007804:	d001      	beq.n	800780a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40021000 	.word	0x40021000
 8007818:	019f800c 	.word	0x019f800c

0800781c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e11e      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007834:	4b91      	ldr	r3, [pc, #580]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d910      	bls.n	8007864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007842:	4b8e      	ldr	r3, [pc, #568]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f023 020f 	bic.w	r2, r3, #15
 800784a:	498c      	ldr	r1, [pc, #560]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	4313      	orrs	r3, r2
 8007850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007852:	4b8a      	ldr	r3, [pc, #552]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d001      	beq.n	8007864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e106      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d073      	beq.n	8007958 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d129      	bne.n	80078cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007878:	4b81      	ldr	r3, [pc, #516]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e0f4      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007888:	f000 f99e 	bl	8007bc8 <RCC_GetSysClockFreqFromPLLSource>
 800788c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	4a7c      	ldr	r2, [pc, #496]	; (8007a84 <HAL_RCC_ClockConfig+0x268>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d93f      	bls.n	8007916 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007896:	4b7a      	ldr	r3, [pc, #488]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d033      	beq.n	8007916 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d12f      	bne.n	8007916 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078b6:	4b72      	ldr	r3, [pc, #456]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078be:	4a70      	ldr	r2, [pc, #448]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e024      	b.n	8007916 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d107      	bne.n	80078e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d4:	4b6a      	ldr	r3, [pc, #424]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0c6      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078e4:	4b66      	ldr	r3, [pc, #408]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0be      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078f4:	f000 f8ce 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4a61      	ldr	r2, [pc, #388]	; (8007a84 <HAL_RCC_ClockConfig+0x268>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d909      	bls.n	8007916 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007902:	4b5f      	ldr	r3, [pc, #380]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800790a:	4a5d      	ldr	r2, [pc, #372]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 800790c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007910:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007916:	4b5a      	ldr	r3, [pc, #360]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f023 0203 	bic.w	r2, r3, #3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4957      	ldr	r1, [pc, #348]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007924:	4313      	orrs	r3, r2
 8007926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007928:	f7fc ff88 	bl	800483c <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800792e:	e00a      	b.n	8007946 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007930:	f7fc ff84 	bl	800483c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f241 3288 	movw	r2, #5000	; 0x1388
 800793e:	4293      	cmp	r3, r2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e095      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007946:	4b4e      	ldr	r3, [pc, #312]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 020c 	and.w	r2, r3, #12
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	429a      	cmp	r2, r3
 8007956:	d1eb      	bne.n	8007930 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d023      	beq.n	80079ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007970:	4b43      	ldr	r3, [pc, #268]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4a42      	ldr	r2, [pc, #264]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800797a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d007      	beq.n	8007998 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007988:	4b3d      	ldr	r3, [pc, #244]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007990:	4a3b      	ldr	r2, [pc, #236]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007998:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4936      	ldr	r1, [pc, #216]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	608b      	str	r3, [r1, #8]
 80079aa:	e008      	b.n	80079be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2b80      	cmp	r3, #128	; 0x80
 80079b0:	d105      	bne.n	80079be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	4a32      	ldr	r2, [pc, #200]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 80079b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079be:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d21d      	bcs.n	8007a08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079cc:	4b2b      	ldr	r3, [pc, #172]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f023 020f 	bic.w	r2, r3, #15
 80079d4:	4929      	ldr	r1, [pc, #164]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	4313      	orrs	r3, r2
 80079da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079dc:	f7fc ff2e 	bl	800483c <HAL_GetTick>
 80079e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e2:	e00a      	b.n	80079fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079e4:	f7fc ff2a 	bl	800483c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e03b      	b.n	8007a72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <HAL_RCC_ClockConfig+0x260>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d1ed      	bne.n	80079e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	4917      	ldr	r1, [pc, #92]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	490f      	ldr	r1, [pc, #60]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a46:	f000 f825 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_RCC_ClockConfig+0x264>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	490c      	ldr	r1, [pc, #48]	; (8007a88 <HAL_RCC_ClockConfig+0x26c>)
 8007a58:	5ccb      	ldrb	r3, [r1, r3]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <HAL_RCC_ClockConfig+0x270>)
 8007a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a66:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <HAL_RCC_ClockConfig+0x274>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fc fe9a 	bl	80047a4 <HAL_InitTick>
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40022000 	.word	0x40022000
 8007a80:	40021000 	.word	0x40021000
 8007a84:	04c4b400 	.word	0x04c4b400
 8007a88:	080116f0 	.word	0x080116f0
 8007a8c:	20000024 	.word	0x20000024
 8007a90:	20000028 	.word	0x20000028

08007a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a9a:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 030c 	and.w	r3, r3, #12
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d102      	bne.n	8007aac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aa6:	4b2a      	ldr	r3, [pc, #168]	; (8007b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	e047      	b.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007aac:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 030c 	and.w	r3, r3, #12
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d102      	bne.n	8007abe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ab8:	4b26      	ldr	r3, [pc, #152]	; (8007b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	e03e      	b.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007abe:	4b23      	ldr	r3, [pc, #140]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 030c 	and.w	r3, r3, #12
 8007ac6:	2b0c      	cmp	r3, #12
 8007ac8:	d136      	bne.n	8007b38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aca:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d10c      	bne.n	8007b02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ae8:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007af2:	68d2      	ldr	r2, [r2, #12]
 8007af4:	0a12      	lsrs	r2, r2, #8
 8007af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	617b      	str	r3, [r7, #20]
      break;
 8007b00:	e00c      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b02:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	4a10      	ldr	r2, [pc, #64]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b0c:	68d2      	ldr	r2, [r2, #12]
 8007b0e:	0a12      	lsrs	r2, r2, #8
 8007b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]
      break;
 8007b1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	0e5b      	lsrs	r3, r3, #25
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	3301      	adds	r3, #1
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e001      	b.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b3c:	693b      	ldr	r3, [r7, #16]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	00f42400 	.word	0x00f42400
 8007b54:	016e3600 	.word	0x016e3600

08007b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000024 	.word	0x20000024

08007b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b74:	f7ff fff0 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b86:	5ccb      	ldrb	r3, [r1, r3]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40021000 	.word	0x40021000
 8007b98:	08011700 	.word	0x08011700

08007b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ba0:	f7ff ffda 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0adb      	lsrs	r3, r3, #11
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bb2:	5ccb      	ldrb	r3, [r1, r3]
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	08011700 	.word	0x08011700

08007bc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007bce:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d10c      	bne.n	8007c06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bec:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bf6:	68d2      	ldr	r2, [r2, #12]
 8007bf8:	0a12      	lsrs	r2, r2, #8
 8007bfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
 8007c02:	617b      	str	r3, [r7, #20]
    break;
 8007c04:	e00c      	b.n	8007c20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c10:	68d2      	ldr	r2, [r2, #12]
 8007c12:	0a12      	lsrs	r2, r2, #8
 8007c14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	617b      	str	r3, [r7, #20]
    break;
 8007c1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c20:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	0e5b      	lsrs	r3, r3, #25
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c3a:	687b      	ldr	r3, [r7, #4]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	016e3600 	.word	0x016e3600
 8007c50:	00f42400 	.word	0x00f42400

08007c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c60:	2300      	movs	r3, #0
 8007c62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8098 	beq.w	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c72:	2300      	movs	r3, #0
 8007c74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c76:	4b43      	ldr	r3, [pc, #268]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10d      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c82:	4b40      	ldr	r3, [pc, #256]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	4a3f      	ldr	r2, [pc, #252]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c8e:	4b3d      	ldr	r3, [pc, #244]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c9e:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007caa:	f7fc fdc7 	bl	800483c <HAL_GetTick>
 8007cae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cb0:	e009      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb2:	f7fc fdc3 	bl	800483c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d902      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	74fb      	strb	r3, [r7, #19]
        break;
 8007cc4:	e005      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cc6:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ef      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007cd2:	7cfb      	ldrb	r3, [r7, #19]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d159      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cd8:	4b2a      	ldr	r3, [pc, #168]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01e      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d019      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cf4:	4b23      	ldr	r3, [pc, #140]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d00:	4b20      	ldr	r3, [pc, #128]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	4a1f      	ldr	r2, [pc, #124]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d10:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	4a1b      	ldr	r2, [pc, #108]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d32:	f7fc fd83 	bl	800483c <HAL_GetTick>
 8007d36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d38:	e00b      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3a:	f7fc fd7f 	bl	800483c <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d902      	bls.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	74fb      	strb	r3, [r7, #19]
            break;
 8007d50:	e006      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d52:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0ec      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d60:	7cfb      	ldrb	r3, [r7, #19]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10b      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	4903      	ldr	r1, [pc, #12]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d7c:	e008      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
 8007d80:	74bb      	strb	r3, [r7, #18]
 8007d82:	e005      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d84:	40021000 	.word	0x40021000
 8007d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d90:	7c7b      	ldrb	r3, [r7, #17]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d105      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d96:	4ba7      	ldr	r3, [pc, #668]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9a:	4aa6      	ldr	r2, [pc, #664]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dae:	4ba1      	ldr	r3, [pc, #644]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f023 0203 	bic.w	r2, r3, #3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	499d      	ldr	r1, [pc, #628]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dd0:	4b98      	ldr	r3, [pc, #608]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd6:	f023 020c 	bic.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	4995      	ldr	r1, [pc, #596]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007df2:	4b90      	ldr	r3, [pc, #576]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	498c      	ldr	r1, [pc, #560]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e14:	4b87      	ldr	r3, [pc, #540]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	4984      	ldr	r1, [pc, #528]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e36:	4b7f      	ldr	r3, [pc, #508]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	497b      	ldr	r1, [pc, #492]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e58:	4b76      	ldr	r3, [pc, #472]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4973      	ldr	r1, [pc, #460]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e7a:	4b6e      	ldr	r3, [pc, #440]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	496a      	ldr	r1, [pc, #424]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e9c:	4b65      	ldr	r3, [pc, #404]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	4962      	ldr	r1, [pc, #392]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ebe:	4b5d      	ldr	r3, [pc, #372]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	4959      	ldr	r1, [pc, #356]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ee0:	4b54      	ldr	r3, [pc, #336]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ee6:	f023 0203 	bic.w	r2, r3, #3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	4951      	ldr	r1, [pc, #324]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f02:	4b4c      	ldr	r3, [pc, #304]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4948      	ldr	r1, [pc, #288]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f24:	4b43      	ldr	r3, [pc, #268]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	4940      	ldr	r1, [pc, #256]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f42:	d105      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f44:	4b3b      	ldr	r3, [pc, #236]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a3a      	ldr	r2, [pc, #232]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d015      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f5c:	4b35      	ldr	r3, [pc, #212]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6a:	4932      	ldr	r1, [pc, #200]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f7c:	4b2d      	ldr	r3, [pc, #180]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d015      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	4924      	ldr	r1, [pc, #144]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb2:	d105      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fb4:	4b1f      	ldr	r3, [pc, #124]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4a1e      	ldr	r2, [pc, #120]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d015      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	4916      	ldr	r1, [pc, #88]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fea:	d105      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fec:	4b11      	ldr	r3, [pc, #68]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	4a10      	ldr	r2, [pc, #64]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ff6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d019      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008004:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	4908      	ldr	r1, [pc, #32]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008022:	d109      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4a02      	ldr	r2, [pc, #8]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800802e:	60d3      	str	r3, [r2, #12]
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008032:	bf00      	nop
 8008034:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d015      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008044:	4b29      	ldr	r3, [pc, #164]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008052:	4926      	ldr	r1, [pc, #152]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008062:	d105      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4a20      	ldr	r2, [pc, #128]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800806a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800806e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d015      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800807e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008082:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808a:	4918      	ldr	r1, [pc, #96]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800808c:	4313      	orrs	r3, r2
 800808e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809a:	d105      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	4a12      	ldr	r2, [pc, #72]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d015      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080b4:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c2:	490a      	ldr	r1, [pc, #40]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d2:	d105      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a04      	ldr	r2, [pc, #16]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80080da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80080e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40021000 	.word	0x40021000

080080f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e049      	b.n	8008196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fa ff32 	bl	8002f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f000 fbd2 	bl	80088d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e049      	b.n	8008244 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f841 	bl	800824c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f000 fb7b 	bl	80088d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d109      	bne.n	8008284 <HAL_TIM_PWM_Start+0x24>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b01      	cmp	r3, #1
 800827a:	bf14      	ite	ne
 800827c:	2301      	movne	r3, #1
 800827e:	2300      	moveq	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	e03c      	b.n	80082fe <HAL_TIM_PWM_Start+0x9e>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b04      	cmp	r3, #4
 8008288:	d109      	bne.n	800829e <HAL_TIM_PWM_Start+0x3e>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b01      	cmp	r3, #1
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	e02f      	b.n	80082fe <HAL_TIM_PWM_Start+0x9e>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d109      	bne.n	80082b8 <HAL_TIM_PWM_Start+0x58>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	bf14      	ite	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	2300      	moveq	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	e022      	b.n	80082fe <HAL_TIM_PWM_Start+0x9e>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b0c      	cmp	r3, #12
 80082bc:	d109      	bne.n	80082d2 <HAL_TIM_PWM_Start+0x72>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	bf14      	ite	ne
 80082ca:	2301      	movne	r3, #1
 80082cc:	2300      	moveq	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	e015      	b.n	80082fe <HAL_TIM_PWM_Start+0x9e>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d109      	bne.n	80082ec <HAL_TIM_PWM_Start+0x8c>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e008      	b.n	80082fe <HAL_TIM_PWM_Start+0x9e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e0a6      	b.n	8008454 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <HAL_TIM_PWM_Start+0xb6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008314:	e023      	b.n	800835e <HAL_TIM_PWM_Start+0xfe>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b04      	cmp	r3, #4
 800831a:	d104      	bne.n	8008326 <HAL_TIM_PWM_Start+0xc6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008324:	e01b      	b.n	800835e <HAL_TIM_PWM_Start+0xfe>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xd6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008334:	e013      	b.n	800835e <HAL_TIM_PWM_Start+0xfe>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0xe6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008344:	e00b      	b.n	800835e <HAL_TIM_PWM_Start+0xfe>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b10      	cmp	r3, #16
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0xf6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008354:	e003      	b.n	800835e <HAL_TIM_PWM_Start+0xfe>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2201      	movs	r2, #1
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 ff24 	bl	80091b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a3a      	ldr	r2, [pc, #232]	; (800845c <HAL_TIM_PWM_Start+0x1fc>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <HAL_TIM_PWM_Start+0x148>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a39      	ldr	r2, [pc, #228]	; (8008460 <HAL_TIM_PWM_Start+0x200>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <HAL_TIM_PWM_Start+0x148>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a37      	ldr	r2, [pc, #220]	; (8008464 <HAL_TIM_PWM_Start+0x204>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <HAL_TIM_PWM_Start+0x148>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a36      	ldr	r2, [pc, #216]	; (8008468 <HAL_TIM_PWM_Start+0x208>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <HAL_TIM_PWM_Start+0x148>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a34      	ldr	r2, [pc, #208]	; (800846c <HAL_TIM_PWM_Start+0x20c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIM_PWM_Start+0x148>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a33      	ldr	r2, [pc, #204]	; (8008470 <HAL_TIM_PWM_Start+0x210>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d101      	bne.n	80083ac <HAL_TIM_PWM_Start+0x14c>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <HAL_TIM_PWM_Start+0x14e>
 80083ac:	2300      	movs	r3, #0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a25      	ldr	r2, [pc, #148]	; (800845c <HAL_TIM_PWM_Start+0x1fc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d022      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d4:	d01d      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a26      	ldr	r2, [pc, #152]	; (8008474 <HAL_TIM_PWM_Start+0x214>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d018      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a24      	ldr	r2, [pc, #144]	; (8008478 <HAL_TIM_PWM_Start+0x218>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a23      	ldr	r2, [pc, #140]	; (800847c <HAL_TIM_PWM_Start+0x21c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00e      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a19      	ldr	r2, [pc, #100]	; (8008460 <HAL_TIM_PWM_Start+0x200>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d009      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a18      	ldr	r2, [pc, #96]	; (8008464 <HAL_TIM_PWM_Start+0x204>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <HAL_TIM_PWM_Start+0x1b2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a18      	ldr	r2, [pc, #96]	; (8008470 <HAL_TIM_PWM_Start+0x210>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d115      	bne.n	800843e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <HAL_TIM_PWM_Start+0x220>)
 800841a:	4013      	ands	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b06      	cmp	r3, #6
 8008422:	d015      	beq.n	8008450 <HAL_TIM_PWM_Start+0x1f0>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842a:	d011      	beq.n	8008450 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843c:	e008      	b.n	8008450 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e000      	b.n	8008452 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400
 800846c:	40014800 	.word	0x40014800
 8008470:	40015000 	.word	0x40015000
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	00010007 	.word	0x00010007

08008484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800849e:	2302      	movs	r3, #2
 80084a0:	e0ff      	b.n	80086a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b14      	cmp	r3, #20
 80084ae:	f200 80f0 	bhi.w	8008692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008693 	.word	0x08008693
 80084c0:	08008693 	.word	0x08008693
 80084c4:	08008693 	.word	0x08008693
 80084c8:	0800854d 	.word	0x0800854d
 80084cc:	08008693 	.word	0x08008693
 80084d0:	08008693 	.word	0x08008693
 80084d4:	08008693 	.word	0x08008693
 80084d8:	0800858f 	.word	0x0800858f
 80084dc:	08008693 	.word	0x08008693
 80084e0:	08008693 	.word	0x08008693
 80084e4:	08008693 	.word	0x08008693
 80084e8:	080085cf 	.word	0x080085cf
 80084ec:	08008693 	.word	0x08008693
 80084f0:	08008693 	.word	0x08008693
 80084f4:	08008693 	.word	0x08008693
 80084f8:	08008611 	.word	0x08008611
 80084fc:	08008693 	.word	0x08008693
 8008500:	08008693 	.word	0x08008693
 8008504:	08008693 	.word	0x08008693
 8008508:	08008651 	.word	0x08008651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fa88 	bl	8008a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0208 	orr.w	r2, r2, #8
 8008526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 0204 	bic.w	r2, r2, #4
 8008536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6999      	ldr	r1, [r3, #24]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	619a      	str	r2, [r3, #24]
      break;
 800854a:	e0a5      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fb02 	bl	8008b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699a      	ldr	r2, [r3, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6999      	ldr	r1, [r3, #24]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	021a      	lsls	r2, r3, #8
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	619a      	str	r2, [r3, #24]
      break;
 800858c:	e084      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fb75 	bl	8008c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0208 	orr.w	r2, r2, #8
 80085a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 0204 	bic.w	r2, r2, #4
 80085b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69d9      	ldr	r1, [r3, #28]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	61da      	str	r2, [r3, #28]
      break;
 80085cc:	e064      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fbe7 	bl	8008da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69d9      	ldr	r1, [r3, #28]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	021a      	lsls	r2, r3, #8
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	61da      	str	r2, [r3, #28]
      break;
 800860e:	e043      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fc5a 	bl	8008ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0208 	orr.w	r2, r2, #8
 800862a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0204 	bic.w	r2, r2, #4
 800863a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800864e:	e023      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fca4 	bl	8008fa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800866a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800867a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	021a      	lsls	r2, r3, #8
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008690:	e002      	b.n	8008698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
      break;
 8008696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIM_ConfigClockSource+0x1c>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e0f6      	b.n	80088b6 <HAL_TIM_ConfigClockSource+0x20a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80086e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a6f      	ldr	r2, [pc, #444]	; (80088c0 <HAL_TIM_ConfigClockSource+0x214>)
 8008702:	4293      	cmp	r3, r2
 8008704:	f000 80c1 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008708:	4a6d      	ldr	r2, [pc, #436]	; (80088c0 <HAL_TIM_ConfigClockSource+0x214>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f200 80c6 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008710:	4a6c      	ldr	r2, [pc, #432]	; (80088c4 <HAL_TIM_ConfigClockSource+0x218>)
 8008712:	4293      	cmp	r3, r2
 8008714:	f000 80b9 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008718:	4a6a      	ldr	r2, [pc, #424]	; (80088c4 <HAL_TIM_ConfigClockSource+0x218>)
 800871a:	4293      	cmp	r3, r2
 800871c:	f200 80be 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008720:	4a69      	ldr	r2, [pc, #420]	; (80088c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f000 80b1 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008728:	4a67      	ldr	r2, [pc, #412]	; (80088c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	f200 80b6 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008730:	4a66      	ldr	r2, [pc, #408]	; (80088cc <HAL_TIM_ConfigClockSource+0x220>)
 8008732:	4293      	cmp	r3, r2
 8008734:	f000 80a9 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008738:	4a64      	ldr	r2, [pc, #400]	; (80088cc <HAL_TIM_ConfigClockSource+0x220>)
 800873a:	4293      	cmp	r3, r2
 800873c:	f200 80ae 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008740:	4a63      	ldr	r2, [pc, #396]	; (80088d0 <HAL_TIM_ConfigClockSource+0x224>)
 8008742:	4293      	cmp	r3, r2
 8008744:	f000 80a1 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008748:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <HAL_TIM_ConfigClockSource+0x224>)
 800874a:	4293      	cmp	r3, r2
 800874c:	f200 80a6 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008750:	4a60      	ldr	r2, [pc, #384]	; (80088d4 <HAL_TIM_ConfigClockSource+0x228>)
 8008752:	4293      	cmp	r3, r2
 8008754:	f000 8099 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008758:	4a5e      	ldr	r2, [pc, #376]	; (80088d4 <HAL_TIM_ConfigClockSource+0x228>)
 800875a:	4293      	cmp	r3, r2
 800875c:	f200 809e 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008760:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008764:	f000 8091 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008768:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800876c:	f200 8096 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008774:	f000 8089 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x1de>
 8008778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877c:	f200 808e 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 8008780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008784:	d03e      	beq.n	8008804 <HAL_TIM_ConfigClockSource+0x158>
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878a:	f200 8087 	bhi.w	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 800878e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008792:	f000 8086 	beq.w	80088a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8008796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879a:	d87f      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 800879c:	2b70      	cmp	r3, #112	; 0x70
 800879e:	d01a      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x12a>
 80087a0:	2b70      	cmp	r3, #112	; 0x70
 80087a2:	d87b      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087a4:	2b60      	cmp	r3, #96	; 0x60
 80087a6:	d050      	beq.n	800884a <HAL_TIM_ConfigClockSource+0x19e>
 80087a8:	2b60      	cmp	r3, #96	; 0x60
 80087aa:	d877      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087ac:	2b50      	cmp	r3, #80	; 0x50
 80087ae:	d03c      	beq.n	800882a <HAL_TIM_ConfigClockSource+0x17e>
 80087b0:	2b50      	cmp	r3, #80	; 0x50
 80087b2:	d873      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087b4:	2b40      	cmp	r3, #64	; 0x40
 80087b6:	d058      	beq.n	800886a <HAL_TIM_ConfigClockSource+0x1be>
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d86f      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087bc:	2b30      	cmp	r3, #48	; 0x30
 80087be:	d064      	beq.n	800888a <HAL_TIM_ConfigClockSource+0x1de>
 80087c0:	2b30      	cmp	r3, #48	; 0x30
 80087c2:	d86b      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d060      	beq.n	800888a <HAL_TIM_ConfigClockSource+0x1de>
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d867      	bhi.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d05c      	beq.n	800888a <HAL_TIM_ConfigClockSource+0x1de>
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d05a      	beq.n	800888a <HAL_TIM_ConfigClockSource+0x1de>
 80087d4:	e062      	b.n	800889c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6899      	ldr	r1, [r3, #8]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f000 fcc5 	bl	8009174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	609a      	str	r2, [r3, #8]
      break;
 8008802:	e04f      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6899      	ldr	r1, [r3, #8]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f000 fcae 	bl	8009174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008826:	609a      	str	r2, [r3, #8]
      break;
 8008828:	e03c      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6859      	ldr	r1, [r3, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	461a      	mov	r2, r3
 8008838:	f000 fc20 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2150      	movs	r1, #80	; 0x50
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fc79 	bl	800913a <TIM_ITRx_SetConfig>
      break;
 8008848:	e02c      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6859      	ldr	r1, [r3, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	461a      	mov	r2, r3
 8008858:	f000 fc3f 	bl	80090da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2160      	movs	r1, #96	; 0x60
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fc69 	bl	800913a <TIM_ITRx_SetConfig>
      break;
 8008868:	e01c      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6859      	ldr	r1, [r3, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	461a      	mov	r2, r3
 8008878:	f000 fc00 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2140      	movs	r1, #64	; 0x40
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fc59 	bl	800913a <TIM_ITRx_SetConfig>
      break;
 8008888:	e00c      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f000 fc50 	bl	800913a <TIM_ITRx_SetConfig>
      break;
 800889a:	e003      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
      break;
 80088a0:	e000      	b.n	80088a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80088a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	00100070 	.word	0x00100070
 80088c4:	00100060 	.word	0x00100060
 80088c8:	00100050 	.word	0x00100050
 80088cc:	00100040 	.word	0x00100040
 80088d0:	00100030 	.word	0x00100030
 80088d4:	00100020 	.word	0x00100020

080088d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a46      	ldr	r2, [pc, #280]	; (8008a04 <TIM_Base_SetConfig+0x12c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d017      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f6:	d013      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a43      	ldr	r2, [pc, #268]	; (8008a08 <TIM_Base_SetConfig+0x130>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00f      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a42      	ldr	r2, [pc, #264]	; (8008a0c <TIM_Base_SetConfig+0x134>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00b      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a41      	ldr	r2, [pc, #260]	; (8008a10 <TIM_Base_SetConfig+0x138>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d007      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a40      	ldr	r2, [pc, #256]	; (8008a14 <TIM_Base_SetConfig+0x13c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0x48>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a3f      	ldr	r2, [pc, #252]	; (8008a18 <TIM_Base_SetConfig+0x140>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <TIM_Base_SetConfig+0x12c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d023      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d01f      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a30      	ldr	r2, [pc, #192]	; (8008a08 <TIM_Base_SetConfig+0x130>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01b      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2f      	ldr	r2, [pc, #188]	; (8008a0c <TIM_Base_SetConfig+0x134>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d017      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2e      	ldr	r2, [pc, #184]	; (8008a10 <TIM_Base_SetConfig+0x138>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d013      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <TIM_Base_SetConfig+0x13c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00f      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2d      	ldr	r2, [pc, #180]	; (8008a1c <TIM_Base_SetConfig+0x144>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00b      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2c      	ldr	r2, [pc, #176]	; (8008a20 <TIM_Base_SetConfig+0x148>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d007      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2b      	ldr	r2, [pc, #172]	; (8008a24 <TIM_Base_SetConfig+0x14c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d003      	beq.n	8008982 <TIM_Base_SetConfig+0xaa>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a26      	ldr	r2, [pc, #152]	; (8008a18 <TIM_Base_SetConfig+0x140>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d108      	bne.n	8008994 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <TIM_Base_SetConfig+0x12c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d013      	beq.n	80089e8 <TIM_Base_SetConfig+0x110>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <TIM_Base_SetConfig+0x13c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00f      	beq.n	80089e8 <TIM_Base_SetConfig+0x110>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a14      	ldr	r2, [pc, #80]	; (8008a1c <TIM_Base_SetConfig+0x144>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <TIM_Base_SetConfig+0x110>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a13      	ldr	r2, [pc, #76]	; (8008a20 <TIM_Base_SetConfig+0x148>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_Base_SetConfig+0x110>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a12      	ldr	r2, [pc, #72]	; (8008a24 <TIM_Base_SetConfig+0x14c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_Base_SetConfig+0x110>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a0d      	ldr	r2, [pc, #52]	; (8008a18 <TIM_Base_SetConfig+0x140>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d103      	bne.n	80089f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	615a      	str	r2, [r3, #20]
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	40000400 	.word	0x40000400
 8008a0c:	40000800 	.word	0x40000800
 8008a10:	40000c00 	.word	0x40000c00
 8008a14:	40013400 	.word	0x40013400
 8008a18:	40015000 	.word	0x40015000
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800

08008a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0303 	bic.w	r3, r3, #3
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f023 0302 	bic.w	r3, r3, #2
 8008a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a30      	ldr	r2, [pc, #192]	; (8008b44 <TIM_OC1_SetConfig+0x11c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d013      	beq.n	8008ab0 <TIM_OC1_SetConfig+0x88>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a2f      	ldr	r2, [pc, #188]	; (8008b48 <TIM_OC1_SetConfig+0x120>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00f      	beq.n	8008ab0 <TIM_OC1_SetConfig+0x88>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a2e      	ldr	r2, [pc, #184]	; (8008b4c <TIM_OC1_SetConfig+0x124>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00b      	beq.n	8008ab0 <TIM_OC1_SetConfig+0x88>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a2d      	ldr	r2, [pc, #180]	; (8008b50 <TIM_OC1_SetConfig+0x128>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d007      	beq.n	8008ab0 <TIM_OC1_SetConfig+0x88>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a2c      	ldr	r2, [pc, #176]	; (8008b54 <TIM_OC1_SetConfig+0x12c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_OC1_SetConfig+0x88>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a2b      	ldr	r2, [pc, #172]	; (8008b58 <TIM_OC1_SetConfig+0x130>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10c      	bne.n	8008aca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f023 0308 	bic.w	r3, r3, #8
 8008ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f023 0304 	bic.w	r3, r3, #4
 8008ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <TIM_OC1_SetConfig+0x11c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <TIM_OC1_SetConfig+0xd2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	; (8008b48 <TIM_OC1_SetConfig+0x120>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00f      	beq.n	8008afa <TIM_OC1_SetConfig+0xd2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <TIM_OC1_SetConfig+0x124>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00b      	beq.n	8008afa <TIM_OC1_SetConfig+0xd2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a1a      	ldr	r2, [pc, #104]	; (8008b50 <TIM_OC1_SetConfig+0x128>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_OC1_SetConfig+0xd2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a19      	ldr	r2, [pc, #100]	; (8008b54 <TIM_OC1_SetConfig+0x12c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC1_SetConfig+0xd2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <TIM_OC1_SetConfig+0x130>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d111      	bne.n	8008b1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	621a      	str	r2, [r3, #32]
}
 8008b38:	bf00      	nop
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40012c00 	.word	0x40012c00
 8008b48:	40013400 	.word	0x40013400
 8008b4c:	40014000 	.word	0x40014000
 8008b50:	40014400 	.word	0x40014400
 8008b54:	40014800 	.word	0x40014800
 8008b58:	40015000 	.word	0x40015000

08008b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f023 0210 	bic.w	r2, r3, #16
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0320 	bic.w	r3, r3, #32
 8008baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a2c      	ldr	r2, [pc, #176]	; (8008c6c <TIM_OC2_SetConfig+0x110>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d007      	beq.n	8008bd0 <TIM_OC2_SetConfig+0x74>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a2b      	ldr	r2, [pc, #172]	; (8008c70 <TIM_OC2_SetConfig+0x114>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC2_SetConfig+0x74>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a2a      	ldr	r2, [pc, #168]	; (8008c74 <TIM_OC2_SetConfig+0x118>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d10d      	bne.n	8008bec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <TIM_OC2_SetConfig+0x110>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d013      	beq.n	8008c1c <TIM_OC2_SetConfig+0xc0>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <TIM_OC2_SetConfig+0x114>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00f      	beq.n	8008c1c <TIM_OC2_SetConfig+0xc0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <TIM_OC2_SetConfig+0x11c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <TIM_OC2_SetConfig+0xc0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1d      	ldr	r2, [pc, #116]	; (8008c7c <TIM_OC2_SetConfig+0x120>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_OC2_SetConfig+0xc0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a1c      	ldr	r2, [pc, #112]	; (8008c80 <TIM_OC2_SetConfig+0x124>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_OC2_SetConfig+0xc0>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a17      	ldr	r2, [pc, #92]	; (8008c74 <TIM_OC2_SetConfig+0x118>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d113      	bne.n	8008c44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40013400 	.word	0x40013400
 8008c74:	40015000 	.word	0x40015000
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40014400 	.word	0x40014400
 8008c80:	40014800 	.word	0x40014800

08008c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	021b      	lsls	r3, r3, #8
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2b      	ldr	r2, [pc, #172]	; (8008d90 <TIM_OC3_SetConfig+0x10c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d007      	beq.n	8008cf6 <TIM_OC3_SetConfig+0x72>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <TIM_OC3_SetConfig+0x110>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d003      	beq.n	8008cf6 <TIM_OC3_SetConfig+0x72>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a29      	ldr	r2, [pc, #164]	; (8008d98 <TIM_OC3_SetConfig+0x114>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d10d      	bne.n	8008d12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <TIM_OC3_SetConfig+0x10c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d013      	beq.n	8008d42 <TIM_OC3_SetConfig+0xbe>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	; (8008d94 <TIM_OC3_SetConfig+0x110>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00f      	beq.n	8008d42 <TIM_OC3_SetConfig+0xbe>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a1d      	ldr	r2, [pc, #116]	; (8008d9c <TIM_OC3_SetConfig+0x118>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00b      	beq.n	8008d42 <TIM_OC3_SetConfig+0xbe>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <TIM_OC3_SetConfig+0x11c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_OC3_SetConfig+0xbe>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a1b      	ldr	r2, [pc, #108]	; (8008da4 <TIM_OC3_SetConfig+0x120>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_OC3_SetConfig+0xbe>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <TIM_OC3_SetConfig+0x114>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d113      	bne.n	8008d6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	621a      	str	r2, [r3, #32]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40013400 	.word	0x40013400
 8008d98:	40015000 	.word	0x40015000
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800

08008da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	031b      	lsls	r3, r3, #12
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a2c      	ldr	r2, [pc, #176]	; (8008eb8 <TIM_OC4_SetConfig+0x110>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_OC4_SetConfig+0x74>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a2b      	ldr	r2, [pc, #172]	; (8008ebc <TIM_OC4_SetConfig+0x114>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_OC4_SetConfig+0x74>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <TIM_OC4_SetConfig+0x118>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d10d      	bne.n	8008e38 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	031b      	lsls	r3, r3, #12
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <TIM_OC4_SetConfig+0x110>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <TIM_OC4_SetConfig+0xc0>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1e      	ldr	r2, [pc, #120]	; (8008ebc <TIM_OC4_SetConfig+0x114>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00f      	beq.n	8008e68 <TIM_OC4_SetConfig+0xc0>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <TIM_OC4_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00b      	beq.n	8008e68 <TIM_OC4_SetConfig+0xc0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <TIM_OC4_SetConfig+0x120>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d007      	beq.n	8008e68 <TIM_OC4_SetConfig+0xc0>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <TIM_OC4_SetConfig+0x124>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_OC4_SetConfig+0xc0>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a17      	ldr	r2, [pc, #92]	; (8008ec0 <TIM_OC4_SetConfig+0x118>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d113      	bne.n	8008e90 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	019b      	lsls	r3, r3, #6
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	019b      	lsls	r3, r3, #6
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	621a      	str	r2, [r3, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40012c00 	.word	0x40012c00
 8008ebc:	40013400 	.word	0x40013400
 8008ec0:	40015000 	.word	0x40015000
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40014400 	.word	0x40014400
 8008ecc:	40014800 	.word	0x40014800

08008ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <TIM_OC5_SetConfig+0xbc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d013      	beq.n	8008f52 <TIM_OC5_SetConfig+0x82>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <TIM_OC5_SetConfig+0xc0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC5_SetConfig+0x82>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC5_SetConfig+0xc4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC5_SetConfig+0x82>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC5_SetConfig+0xc8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC5_SetConfig+0x82>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <TIM_OC5_SetConfig+0xcc>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC5_SetConfig+0x82>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <TIM_OC5_SetConfig+0xd0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d109      	bne.n	8008f66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	621a      	str	r2, [r3, #32]
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	40012c00 	.word	0x40012c00
 8008f90:	40013400 	.word	0x40013400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800
 8008fa0:	40015000 	.word	0x40015000

08008fa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	051b      	lsls	r3, r3, #20
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <TIM_OC6_SetConfig+0xc0>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d013      	beq.n	8009028 <TIM_OC6_SetConfig+0x84>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a19      	ldr	r2, [pc, #100]	; (8009068 <TIM_OC6_SetConfig+0xc4>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00f      	beq.n	8009028 <TIM_OC6_SetConfig+0x84>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a18      	ldr	r2, [pc, #96]	; (800906c <TIM_OC6_SetConfig+0xc8>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00b      	beq.n	8009028 <TIM_OC6_SetConfig+0x84>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a17      	ldr	r2, [pc, #92]	; (8009070 <TIM_OC6_SetConfig+0xcc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d007      	beq.n	8009028 <TIM_OC6_SetConfig+0x84>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a16      	ldr	r2, [pc, #88]	; (8009074 <TIM_OC6_SetConfig+0xd0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d003      	beq.n	8009028 <TIM_OC6_SetConfig+0x84>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <TIM_OC6_SetConfig+0xd4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d109      	bne.n	800903c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800902e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	029b      	lsls	r3, r3, #10
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	621a      	str	r2, [r3, #32]
}
 8009056:	bf00      	nop
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40013400 	.word	0x40013400
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800
 8009078:	40015000 	.word	0x40015000

0800907c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f023 030a 	bic.w	r3, r3, #10
 80090b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090da:	b480      	push	{r7}
 80090dc:	b087      	sub	sp, #28
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f023 0210 	bic.w	r2, r3, #16
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	031b      	lsls	r3, r3, #12
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	f043 0307 	orr.w	r3, r3, #7
 8009160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	609a      	str	r2, [r3, #8]
}
 8009168:	bf00      	nop
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800918e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	021a      	lsls	r2, r3, #8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	431a      	orrs	r2, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4313      	orrs	r3, r2
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	4313      	orrs	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	609a      	str	r2, [r3, #8]
}
 80091a8:	bf00      	nop
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f003 031f 	and.w	r3, r3, #31
 80091c6:	2201      	movs	r2, #1
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a1a      	ldr	r2, [r3, #32]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	43db      	mvns	r3, r3
 80091d6:	401a      	ands	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1a      	ldr	r2, [r3, #32]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	621a      	str	r2, [r3, #32]
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009210:	2b01      	cmp	r3, #1
 8009212:	d101      	bne.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009214:	2302      	movs	r3, #2
 8009216:	e074      	b.n	8009302 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a34      	ldr	r2, [pc, #208]	; (8009310 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d009      	beq.n	8009256 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a33      	ldr	r2, [pc, #204]	; (8009314 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d004      	beq.n	8009256 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a31      	ldr	r2, [pc, #196]	; (8009318 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d108      	bne.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800925c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800926e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a21      	ldr	r2, [pc, #132]	; (8009310 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d022      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009298:	d01d      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1f      	ldr	r2, [pc, #124]	; (800931c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d018      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1c      	ldr	r2, [pc, #112]	; (8009324 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00e      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a15      	ldr	r2, [pc, #84]	; (8009314 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d009      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a18      	ldr	r2, [pc, #96]	; (8009328 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d004      	beq.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a11      	ldr	r2, [pc, #68]	; (8009318 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d10c      	bne.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40012c00 	.word	0x40012c00
 8009314:	40013400 	.word	0x40013400
 8009318:	40015000 	.word	0x40015000
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40014000 	.word	0x40014000

0800932c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e042      	b.n	80093c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7f9 fe6d 	bl	8003030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	; 0x24
 800935a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fcee 	bl	8009d50 <UART_SetConfig>
 8009374:	4603      	mov	r3, r0
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e022      	b.n	80093c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 ffde 	bl	800a348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800939a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 f865 	bl	800a48c <UART_CheckIdleState>
 80093c2:	4603      	mov	r3, r0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	; 0x28
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	f040 8083 	bne.w	80094ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_UART_Transmit+0x28>
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e07b      	b.n	80094f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UART_Transmit+0x3a>
 8009402:	2302      	movs	r3, #2
 8009404:	e074      	b.n	80094f0 <HAL_UART_Transmit+0x124>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2221      	movs	r2, #33	; 0x21
 800941a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800941e:	f7fb fa0d 	bl	800483c <HAL_GetTick>
 8009422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	88fa      	ldrh	r2, [r7, #6]
 8009428:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	88fa      	ldrh	r2, [r7, #6]
 8009430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943c:	d108      	bne.n	8009450 <HAL_UART_Transmit+0x84>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d104      	bne.n	8009450 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	61bb      	str	r3, [r7, #24]
 800944e:	e003      	b.n	8009458 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009460:	e02c      	b.n	80094bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	2180      	movs	r1, #128	; 0x80
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f001 f858 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e039      	b.n	80094f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009490:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	3302      	adds	r3, #2
 8009496:	61bb      	str	r3, [r7, #24]
 8009498:	e007      	b.n	80094aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	781a      	ldrb	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	3301      	adds	r3, #1
 80094a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1cc      	bne.n	8009462 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2200      	movs	r2, #0
 80094d0:	2140      	movs	r1, #64	; 0x40
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f001 f825 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e006      	b.n	80094f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b091      	sub	sp, #68	; 0x44
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950c:	2b20      	cmp	r3, #32
 800950e:	f040 808c 	bne.w	800962a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HAL_UART_Transmit_IT+0x26>
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e084      	b.n	800962c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_UART_Transmit_IT+0x38>
 800952c:	2302      	movs	r3, #2
 800952e:	e07d      	b.n	800962c <HAL_UART_Transmit_IT+0x134>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	88fa      	ldrh	r2, [r7, #6]
 8009542:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	88fa      	ldrh	r2, [r7, #6]
 800954a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2221      	movs	r2, #33	; 0x21
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956c:	d12e      	bne.n	80095cc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009576:	d107      	bne.n	8009588 <HAL_UART_Transmit_IT+0x90>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a2d      	ldr	r2, [pc, #180]	; (8009638 <HAL_UART_Transmit_IT+0x140>)
 8009584:	675a      	str	r2, [r3, #116]	; 0x74
 8009586:	e002      	b.n	800958e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4a2c      	ldr	r2, [pc, #176]	; (800963c <HAL_UART_Transmit_IT+0x144>)
 800958c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b6:	637a      	str	r2, [r7, #52]	; 0x34
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e5      	bne.n	8009596 <HAL_UART_Transmit_IT+0x9e>
 80095ca:	e02c      	b.n	8009626 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d4:	d107      	bne.n	80095e6 <HAL_UART_Transmit_IT+0xee>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <HAL_UART_Transmit_IT+0x148>)
 80095e2:	675a      	str	r2, [r3, #116]	; 0x74
 80095e4:	e002      	b.n	80095ec <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4a16      	ldr	r2, [pc, #88]	; (8009644 <HAL_UART_Transmit_IT+0x14c>)
 80095ea:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	613b      	str	r3, [r7, #16]
   return(result);
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009612:	623b      	str	r3, [r7, #32]
 8009614:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69f9      	ldr	r1, [r7, #28]
 8009618:	6a3a      	ldr	r2, [r7, #32]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	e000      	b.n	800962c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800962a:	2302      	movs	r3, #2
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	3744      	adds	r7, #68	; 0x44
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	0800ac5b 	.word	0x0800ac5b
 800963c:	0800ab7b 	.word	0x0800ab7b
 8009640:	0800aab9 	.word	0x0800aab9
 8009644:	0800aa01 	.word	0x0800aa01

08009648 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	; 0x28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965c:	2b20      	cmp	r3, #32
 800965e:	d142      	bne.n	80096e6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <HAL_UART_Receive_IT+0x24>
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e03b      	b.n	80096e8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_UART_Receive_IT+0x36>
 800967a:	2302      	movs	r3, #2
 800967c:	e034      	b.n	80096e8 <HAL_UART_Receive_IT+0xa0>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <HAL_UART_Receive_IT+0xa8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d01f      	beq.n	80096d6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d018      	beq.n	80096d6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	613b      	str	r3, [r7, #16]
   return(result);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	623b      	str	r3, [r7, #32]
 80096c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	69f9      	ldr	r1, [r7, #28]
 80096c8:	6a3a      	ldr	r2, [r7, #32]
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e6      	bne.n	80096a4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80096d6:	88fb      	ldrh	r3, [r7, #6]
 80096d8:	461a      	mov	r2, r3
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 ffe9 	bl	800a6b4 <UART_Start_Receive_IT>
 80096e2:	4603      	mov	r3, r0
 80096e4:	e000      	b.n	80096e8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80096e6:	2302      	movs	r3, #2
  }
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3728      	adds	r7, #40	; 0x28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	40008000 	.word	0x40008000

080096f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b0ba      	sub	sp, #232	; 0xe8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800971a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800971e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009722:	4013      	ands	r3, r2
 8009724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11b      	bne.n	8009768 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d015      	beq.n	8009768 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800973c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009740:	f003 0320 	and.w	r3, r3, #32
 8009744:	2b00      	cmp	r3, #0
 8009746:	d105      	bne.n	8009754 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800974c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d009      	beq.n	8009768 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 82d6 	beq.w	8009d0a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
      }
      return;
 8009766:	e2d0      	b.n	8009d0a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 811f 	beq.w	80099b0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009772:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009776:	4b8b      	ldr	r3, [pc, #556]	; (80099a4 <HAL_UART_IRQHandler+0x2b0>)
 8009778:	4013      	ands	r3, r2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800977e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009782:	4b89      	ldr	r3, [pc, #548]	; (80099a8 <HAL_UART_IRQHandler+0x2b4>)
 8009784:	4013      	ands	r3, r2
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8112 	beq.w	80099b0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d011      	beq.n	80097bc <HAL_UART_IRQHandler+0xc8>
 8009798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2201      	movs	r2, #1
 80097aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b2:	f043 0201 	orr.w	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d011      	beq.n	80097ec <HAL_UART_IRQHandler+0xf8>
 80097c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2202      	movs	r2, #2
 80097da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e2:	f043 0204 	orr.w	r2, r3, #4
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d011      	beq.n	800981c <HAL_UART_IRQHandler+0x128>
 80097f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2204      	movs	r2, #4
 800980a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009812:	f043 0202 	orr.w	r2, r3, #2
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800981c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	d017      	beq.n	8009858 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009834:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009838:	4b5a      	ldr	r3, [pc, #360]	; (80099a4 <HAL_UART_IRQHandler+0x2b0>)
 800983a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2208      	movs	r2, #8
 8009846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984e:	f043 0208 	orr.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009860:	2b00      	cmp	r3, #0
 8009862:	d012      	beq.n	800988a <HAL_UART_IRQHandler+0x196>
 8009864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009880:	f043 0220 	orr.w	r2, r3, #32
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 823c 	beq.w	8009d0e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989a:	f003 0320 	and.w	r3, r3, #32
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d013      	beq.n	80098ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d105      	bne.n	80098ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d007      	beq.n	80098ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098de:	2b40      	cmp	r3, #64	; 0x40
 80098e0:	d005      	beq.n	80098ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d04f      	beq.n	800998e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 f80a 	bl	800a908 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fe:	2b40      	cmp	r3, #64	; 0x40
 8009900:	d141      	bne.n	8009986 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800991c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3308      	adds	r3, #8
 800992a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800992e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800993a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1d9      	bne.n	8009902 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d013      	beq.n	800997e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	4a14      	ldr	r2, [pc, #80]	; (80099ac <HAL_UART_IRQHandler+0x2b8>)
 800995c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	4618      	mov	r0, r3
 8009964:	f7fb f94c 	bl	8004c00 <HAL_DMA_Abort_IT>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d017      	beq.n	800999e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	e00f      	b.n	800999e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9d0 	bl	8009d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009984:	e00b      	b.n	800999e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9cc 	bl	8009d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998c:	e007      	b.n	800999e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9c8 	bl	8009d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800999c:	e1b7      	b.n	8009d0e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999e:	bf00      	nop
    return;
 80099a0:	e1b5      	b.n	8009d0e <HAL_UART_IRQHandler+0x61a>
 80099a2:	bf00      	nop
 80099a4:	10000001 	.word	0x10000001
 80099a8:	04000120 	.word	0x04000120
 80099ac:	0800a9d5 	.word	0x0800a9d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	f040 814a 	bne.w	8009c4e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8143 	beq.w	8009c4e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099cc:	f003 0310 	and.w	r3, r3, #16
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 813c 	beq.w	8009c4e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2210      	movs	r2, #16
 80099dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b40      	cmp	r3, #64	; 0x40
 80099ea:	f040 80b5 	bne.w	8009b58 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 8187 	beq.w	8009d12 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	f080 817f 	bcs.w	8009d12 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f040 8086 	bne.w	8009b3c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1da      	bne.n	8009a30 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e1      	bne.n	8009a7a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e3      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0c:	f023 0310 	bic.w	r3, r3, #16
 8009b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e4      	bne.n	8009afc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fb f809 	bl	8004b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8f1 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b56:	e0dc      	b.n	8009d12 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 80ce 	beq.w	8009d16 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80c9 	beq.w	8009d16 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ba8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e4      	bne.n	8009b84 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009be2:	633a      	str	r2, [r7, #48]	; 0x30
 8009be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e1      	bne.n	8009bba <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 0310 	bic.w	r3, r3, #16
 8009c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	69b9      	ldr	r1, [r7, #24]
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	617b      	str	r3, [r7, #20]
   return(result);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e4      	bne.n	8009c0a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f876 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c4c:	e063      	b.n	8009d16 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00e      	beq.n	8009c78 <HAL_UART_IRQHandler+0x584>
 8009c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 fcef 	bl	800b654 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c76:	e051      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d014      	beq.n	8009cae <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d105      	bne.n	8009c9c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d008      	beq.n	8009cae <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d03a      	beq.n	8009d1a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
    }
    return;
 8009cac:	e035      	b.n	8009d1a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d009      	beq.n	8009cce <HAL_UART_IRQHandler+0x5da>
 8009cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 f83c 	bl	800ad44 <UART_EndTransmit_IT>
    return;
 8009ccc:	e026      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d009      	beq.n	8009cee <HAL_UART_IRQHandler+0x5fa>
 8009cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fcc8 	bl	800b67c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cec:	e016      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d010      	beq.n	8009d1c <HAL_UART_IRQHandler+0x628>
 8009cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	da0c      	bge.n	8009d1c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fcb0 	bl	800b668 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d08:	e008      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
      return;
 8009d0a:	bf00      	nop
 8009d0c:	e006      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
    return;
 8009d0e:	bf00      	nop
 8009d10:	e004      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
      return;
 8009d12:	bf00      	nop
 8009d14:	e002      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
      return;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_UART_IRQHandler+0x628>
    return;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	37e8      	adds	r7, #232	; 0xe8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop

08009d24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d54:	b08c      	sub	sp, #48	; 0x30
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	4baa      	ldr	r3, [pc, #680]	; (800a028 <UART_SetConfig+0x2d8>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a9f      	ldr	r2, [pc, #636]	; (800a02c <UART_SetConfig+0x2dc>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d004      	beq.n	8009dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009db8:	4313      	orrs	r3, r2
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009dc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	6812      	ldr	r2, [r2, #0]
 8009dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	f023 010f 	bic.w	r1, r3, #15
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a90      	ldr	r2, [pc, #576]	; (800a030 <UART_SetConfig+0x2e0>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d125      	bne.n	8009e40 <UART_SetConfig+0xf0>
 8009df4:	4b8f      	ldr	r3, [pc, #572]	; (800a034 <UART_SetConfig+0x2e4>)
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d81a      	bhi.n	8009e38 <UART_SetConfig+0xe8>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0xb8>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e21 	.word	0x08009e21
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1e:	e116      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e20:	2302      	movs	r3, #2
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e26:	e112      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e2e:	e10e      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e36:	e10a      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e3e:	e106      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a7c      	ldr	r2, [pc, #496]	; (800a038 <UART_SetConfig+0x2e8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d138      	bne.n	8009ebc <UART_SetConfig+0x16c>
 8009e4a:	4b7a      	ldr	r3, [pc, #488]	; (800a034 <UART_SetConfig+0x2e4>)
 8009e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e50:	f003 030c 	and.w	r3, r3, #12
 8009e54:	2b0c      	cmp	r3, #12
 8009e56:	d82d      	bhi.n	8009eb4 <UART_SetConfig+0x164>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x110>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e95 	.word	0x08009e95
 8009e64:	08009eb5 	.word	0x08009eb5
 8009e68:	08009eb5 	.word	0x08009eb5
 8009e6c:	08009eb5 	.word	0x08009eb5
 8009e70:	08009ea5 	.word	0x08009ea5
 8009e74:	08009eb5 	.word	0x08009eb5
 8009e78:	08009eb5 	.word	0x08009eb5
 8009e7c:	08009eb5 	.word	0x08009eb5
 8009e80:	08009e9d 	.word	0x08009e9d
 8009e84:	08009eb5 	.word	0x08009eb5
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	08009eb5 	.word	0x08009eb5
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9a:	e0d8      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea2:	e0d4      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eaa:	e0d0      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009eac:	2308      	movs	r3, #8
 8009eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb2:	e0cc      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eba:	e0c8      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a5e      	ldr	r2, [pc, #376]	; (800a03c <UART_SetConfig+0x2ec>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d125      	bne.n	8009f12 <UART_SetConfig+0x1c2>
 8009ec6:	4b5b      	ldr	r3, [pc, #364]	; (800a034 <UART_SetConfig+0x2e4>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ed0:	2b30      	cmp	r3, #48	; 0x30
 8009ed2:	d016      	beq.n	8009f02 <UART_SetConfig+0x1b2>
 8009ed4:	2b30      	cmp	r3, #48	; 0x30
 8009ed6:	d818      	bhi.n	8009f0a <UART_SetConfig+0x1ba>
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d00a      	beq.n	8009ef2 <UART_SetConfig+0x1a2>
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d814      	bhi.n	8009f0a <UART_SetConfig+0x1ba>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <UART_SetConfig+0x19a>
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d008      	beq.n	8009efa <UART_SetConfig+0x1aa>
 8009ee8:	e00f      	b.n	8009f0a <UART_SetConfig+0x1ba>
 8009eea:	2300      	movs	r3, #0
 8009eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef0:	e0ad      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef8:	e0a9      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009efa:	2304      	movs	r3, #4
 8009efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f00:	e0a5      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f02:	2308      	movs	r3, #8
 8009f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f08:	e0a1      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f0a:	2310      	movs	r3, #16
 8009f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f10:	e09d      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a4a      	ldr	r2, [pc, #296]	; (800a040 <UART_SetConfig+0x2f0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d125      	bne.n	8009f68 <UART_SetConfig+0x218>
 8009f1c:	4b45      	ldr	r3, [pc, #276]	; (800a034 <UART_SetConfig+0x2e4>)
 8009f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f26:	2bc0      	cmp	r3, #192	; 0xc0
 8009f28:	d016      	beq.n	8009f58 <UART_SetConfig+0x208>
 8009f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f2c:	d818      	bhi.n	8009f60 <UART_SetConfig+0x210>
 8009f2e:	2b80      	cmp	r3, #128	; 0x80
 8009f30:	d00a      	beq.n	8009f48 <UART_SetConfig+0x1f8>
 8009f32:	2b80      	cmp	r3, #128	; 0x80
 8009f34:	d814      	bhi.n	8009f60 <UART_SetConfig+0x210>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <UART_SetConfig+0x1f0>
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d008      	beq.n	8009f50 <UART_SetConfig+0x200>
 8009f3e:	e00f      	b.n	8009f60 <UART_SetConfig+0x210>
 8009f40:	2300      	movs	r3, #0
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f46:	e082      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f4e:	e07e      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f56:	e07a      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f5e:	e076      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f66:	e072      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a35      	ldr	r2, [pc, #212]	; (800a044 <UART_SetConfig+0x2f4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d12a      	bne.n	8009fc8 <UART_SetConfig+0x278>
 8009f72:	4b30      	ldr	r3, [pc, #192]	; (800a034 <UART_SetConfig+0x2e4>)
 8009f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f80:	d01a      	beq.n	8009fb8 <UART_SetConfig+0x268>
 8009f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f86:	d81b      	bhi.n	8009fc0 <UART_SetConfig+0x270>
 8009f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f8c:	d00c      	beq.n	8009fa8 <UART_SetConfig+0x258>
 8009f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f92:	d815      	bhi.n	8009fc0 <UART_SetConfig+0x270>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <UART_SetConfig+0x250>
 8009f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9c:	d008      	beq.n	8009fb0 <UART_SetConfig+0x260>
 8009f9e:	e00f      	b.n	8009fc0 <UART_SetConfig+0x270>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fa6:	e052      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fae:	e04e      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fb6:	e04a      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fbe:	e046      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fc6:	e042      	b.n	800a04e <UART_SetConfig+0x2fe>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a17      	ldr	r2, [pc, #92]	; (800a02c <UART_SetConfig+0x2dc>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d13a      	bne.n	800a048 <UART_SetConfig+0x2f8>
 8009fd2:	4b18      	ldr	r3, [pc, #96]	; (800a034 <UART_SetConfig+0x2e4>)
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fe0:	d01a      	beq.n	800a018 <UART_SetConfig+0x2c8>
 8009fe2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fe6:	d81b      	bhi.n	800a020 <UART_SetConfig+0x2d0>
 8009fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fec:	d00c      	beq.n	800a008 <UART_SetConfig+0x2b8>
 8009fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff2:	d815      	bhi.n	800a020 <UART_SetConfig+0x2d0>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <UART_SetConfig+0x2b0>
 8009ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ffc:	d008      	beq.n	800a010 <UART_SetConfig+0x2c0>
 8009ffe:	e00f      	b.n	800a020 <UART_SetConfig+0x2d0>
 800a000:	2300      	movs	r3, #0
 800a002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a006:	e022      	b.n	800a04e <UART_SetConfig+0x2fe>
 800a008:	2302      	movs	r3, #2
 800a00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a00e:	e01e      	b.n	800a04e <UART_SetConfig+0x2fe>
 800a010:	2304      	movs	r3, #4
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a016:	e01a      	b.n	800a04e <UART_SetConfig+0x2fe>
 800a018:	2308      	movs	r3, #8
 800a01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a01e:	e016      	b.n	800a04e <UART_SetConfig+0x2fe>
 800a020:	2310      	movs	r3, #16
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a026:	e012      	b.n	800a04e <UART_SetConfig+0x2fe>
 800a028:	cfff69f3 	.word	0xcfff69f3
 800a02c:	40008000 	.word	0x40008000
 800a030:	40013800 	.word	0x40013800
 800a034:	40021000 	.word	0x40021000
 800a038:	40004400 	.word	0x40004400
 800a03c:	40004800 	.word	0x40004800
 800a040:	40004c00 	.word	0x40004c00
 800a044:	40005000 	.word	0x40005000
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4aae      	ldr	r2, [pc, #696]	; (800a30c <UART_SetConfig+0x5bc>)
 800a054:	4293      	cmp	r3, r2
 800a056:	f040 8097 	bne.w	800a188 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a05a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d823      	bhi.n	800a0aa <UART_SetConfig+0x35a>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <UART_SetConfig+0x318>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a0ab 	.word	0x0800a0ab
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a0ab 	.word	0x0800a0ab
 800a078:	0800a09b 	.word	0x0800a09b
 800a07c:	0800a0ab 	.word	0x0800a0ab
 800a080:	0800a0ab 	.word	0x0800a0ab
 800a084:	0800a0ab 	.word	0x0800a0ab
 800a088:	0800a0a3 	.word	0x0800a0a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a08c:	f7fd fd70 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a092:	e010      	b.n	800a0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a094:	4b9e      	ldr	r3, [pc, #632]	; (800a310 <UART_SetConfig+0x5c0>)
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a098:	e00d      	b.n	800a0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a09a:	f7fd fcfb 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 800a09e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0a0:	e009      	b.n	800a0b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0a8:	e005      	b.n	800a0b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 8130 	beq.w	800a31e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c2:	4a94      	ldr	r2, [pc, #592]	; (800a314 <UART_SetConfig+0x5c4>)
 800a0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	4413      	add	r3, r2
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d305      	bcc.n	800a0ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d903      	bls.n	800a0f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a0f4:	e113      	b.n	800a31e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	60bb      	str	r3, [r7, #8]
 800a0fc:	60fa      	str	r2, [r7, #12]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	4a84      	ldr	r2, [pc, #528]	; (800a314 <UART_SetConfig+0x5c4>)
 800a104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	2200      	movs	r2, #0
 800a10c:	603b      	str	r3, [r7, #0]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a118:	f7f6 fde8 	bl	8000cec <__aeabi_uldivmod>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4610      	mov	r0, r2
 800a122:	4619      	mov	r1, r3
 800a124:	f04f 0200 	mov.w	r2, #0
 800a128:	f04f 0300 	mov.w	r3, #0
 800a12c:	020b      	lsls	r3, r1, #8
 800a12e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a132:	0202      	lsls	r2, r0, #8
 800a134:	6979      	ldr	r1, [r7, #20]
 800a136:	6849      	ldr	r1, [r1, #4]
 800a138:	0849      	lsrs	r1, r1, #1
 800a13a:	2000      	movs	r0, #0
 800a13c:	460c      	mov	r4, r1
 800a13e:	4605      	mov	r5, r0
 800a140:	eb12 0804 	adds.w	r8, r2, r4
 800a144:	eb43 0905 	adc.w	r9, r3, r5
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	469a      	mov	sl, r3
 800a150:	4693      	mov	fp, r2
 800a152:	4652      	mov	r2, sl
 800a154:	465b      	mov	r3, fp
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 fdc7 	bl	8000cec <__aeabi_uldivmod>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4613      	mov	r3, r2
 800a164:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a16c:	d308      	bcc.n	800a180 <UART_SetConfig+0x430>
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a174:	d204      	bcs.n	800a180 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6a3a      	ldr	r2, [r7, #32]
 800a17c:	60da      	str	r2, [r3, #12]
 800a17e:	e0ce      	b.n	800a31e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a186:	e0ca      	b.n	800a31e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a190:	d166      	bne.n	800a260 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a196:	2b08      	cmp	r3, #8
 800a198:	d827      	bhi.n	800a1ea <UART_SetConfig+0x49a>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x450>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1c5 	.word	0x0800a1c5
 800a1a4:	0800a1cd 	.word	0x0800a1cd
 800a1a8:	0800a1d5 	.word	0x0800a1d5
 800a1ac:	0800a1eb 	.word	0x0800a1eb
 800a1b0:	0800a1db 	.word	0x0800a1db
 800a1b4:	0800a1eb 	.word	0x0800a1eb
 800a1b8:	0800a1eb 	.word	0x0800a1eb
 800a1bc:	0800a1eb 	.word	0x0800a1eb
 800a1c0:	0800a1e3 	.word	0x0800a1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1c4:	f7fd fcd4 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a1c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1ca:	e014      	b.n	800a1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1cc:	f7fd fce6 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800a1d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1d2:	e010      	b.n	800a1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1d4:	4b4e      	ldr	r3, [pc, #312]	; (800a310 <UART_SetConfig+0x5c0>)
 800a1d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1d8:	e00d      	b.n	800a1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1da:	f7fd fc5b 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 800a1de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1e0:	e009      	b.n	800a1f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1e8:	e005      	b.n	800a1f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 8090 	beq.w	800a31e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	4a44      	ldr	r2, [pc, #272]	; (800a314 <UART_SetConfig+0x5c4>)
 800a204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a208:	461a      	mov	r2, r3
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a210:	005a      	lsls	r2, r3, #1
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	085b      	lsrs	r3, r3, #1
 800a218:	441a      	add	r2, r3
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2b0f      	cmp	r3, #15
 800a228:	d916      	bls.n	800a258 <UART_SetConfig+0x508>
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a230:	d212      	bcs.n	800a258 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	b29b      	uxth	r3, r3
 800a236:	f023 030f 	bic.w	r3, r3, #15
 800a23a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	b29b      	uxth	r3, r3
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	b29a      	uxth	r2, r3
 800a248:	8bfb      	ldrh	r3, [r7, #30]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	8bfa      	ldrh	r2, [r7, #30]
 800a254:	60da      	str	r2, [r3, #12]
 800a256:	e062      	b.n	800a31e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a25e:	e05e      	b.n	800a31e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a264:	2b08      	cmp	r3, #8
 800a266:	d828      	bhi.n	800a2ba <UART_SetConfig+0x56a>
 800a268:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x520>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a295 	.word	0x0800a295
 800a274:	0800a29d 	.word	0x0800a29d
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	0800a2bb 	.word	0x0800a2bb
 800a280:	0800a2ab 	.word	0x0800a2ab
 800a284:	0800a2bb 	.word	0x0800a2bb
 800a288:	0800a2bb 	.word	0x0800a2bb
 800a28c:	0800a2bb 	.word	0x0800a2bb
 800a290:	0800a2b3 	.word	0x0800a2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a294:	f7fd fc6c 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a29a:	e014      	b.n	800a2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a29c:	f7fd fc7e 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800a2a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2a2:	e010      	b.n	800a2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <UART_SetConfig+0x5c0>)
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2a8:	e00d      	b.n	800a2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2aa:	f7fd fbf3 	bl	8007a94 <HAL_RCC_GetSysClockFreq>
 800a2ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2b0:	e009      	b.n	800a2c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2b8:	e005      	b.n	800a2c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2c4:	bf00      	nop
    }

    if (pclk != 0U)
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d028      	beq.n	800a31e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	4a10      	ldr	r2, [pc, #64]	; (800a314 <UART_SetConfig+0x5c4>)
 800a2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	085b      	lsrs	r3, r3, #1
 800a2e4:	441a      	add	r2, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	2b0f      	cmp	r3, #15
 800a2f4:	d910      	bls.n	800a318 <UART_SetConfig+0x5c8>
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2fc:	d20c      	bcs.n	800a318 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	b29a      	uxth	r2, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60da      	str	r2, [r3, #12]
 800a308:	e009      	b.n	800a31e <UART_SetConfig+0x5ce>
 800a30a:	bf00      	nop
 800a30c:	40008000 	.word	0x40008000
 800a310:	00f42400 	.word	0x00f42400
 800a314:	08011718 	.word	0x08011718
      }
      else
      {
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2201      	movs	r2, #1
 800a322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2201      	movs	r2, #1
 800a32a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2200      	movs	r2, #0
 800a332:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2200      	movs	r2, #0
 800a338:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a33a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3730      	adds	r7, #48	; 0x30
 800a342:	46bd      	mov	sp, r7
 800a344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	f003 0308 	and.w	r3, r3, #8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01a      	beq.n	800a45e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a446:	d10a      	bne.n	800a45e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]
  }
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a49c:	f7fa f9ce 	bl	800483c <HAL_GetTick>
 800a4a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d10e      	bne.n	800a4ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f82f 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e025      	b.n	800a51a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d10e      	bne.n	800a4fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f819 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e00f      	b.n	800a51a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b09c      	sub	sp, #112	; 0x70
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	603b      	str	r3, [r7, #0]
 800a52e:	4613      	mov	r3, r2
 800a530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a532:	e0a9      	b.n	800a688 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53a:	f000 80a5 	beq.w	800a688 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a53e:	f7fa f97d 	bl	800483c <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d302      	bcc.n	800a554 <UART_WaitOnFlagUntilTimeout+0x32>
 800a54e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a550:	2b00      	cmp	r3, #0
 800a552:	d140      	bne.n	800a5d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a55c:	e853 3f00 	ldrex	r3, [r3]
 800a560:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a568:	667b      	str	r3, [r7, #100]	; 0x64
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a572:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a574:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e6      	bne.n	800a554 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	663b      	str	r3, [r7, #96]	; 0x60
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e5      	bne.n	800a586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e069      	b.n	800a6aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d051      	beq.n	800a688 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5f2:	d149      	bne.n	800a688 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a612:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
 800a61e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e6      	bne.n	800a5fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	613b      	str	r3, [r7, #16]
   return(result);
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	f023 0301 	bic.w	r3, r3, #1
 800a646:	66bb      	str	r3, [r7, #104]	; 0x68
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3308      	adds	r3, #8
 800a64e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a650:	623a      	str	r2, [r7, #32]
 800a652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	69f9      	ldr	r1, [r7, #28]
 800a656:	6a3a      	ldr	r2, [r7, #32]
 800a658:	e841 2300 	strex	r3, r2, [r1]
 800a65c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e5      	bne.n	800a630 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e010      	b.n	800a6aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	69da      	ldr	r2, [r3, #28]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4013      	ands	r3, r2
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	429a      	cmp	r2, r3
 800a696:	bf0c      	ite	eq
 800a698:	2301      	moveq	r3, #1
 800a69a:	2300      	movne	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	461a      	mov	r2, r3
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	f43f af46 	beq.w	800a534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3770      	adds	r7, #112	; 0x70
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b0a3      	sub	sp, #140	; 0x8c
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e6:	d10e      	bne.n	800a706 <UART_Start_Receive_IT+0x52>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d105      	bne.n	800a6fc <UART_Start_Receive_IT+0x48>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a6f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a6fa:	e02d      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	22ff      	movs	r2, #255	; 0xff
 800a700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a704:	e028      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <UART_Start_Receive_IT+0x76>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d104      	bne.n	800a720 <UART_Start_Receive_IT+0x6c>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	22ff      	movs	r2, #255	; 0xff
 800a71a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a71e:	e01b      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	227f      	movs	r2, #127	; 0x7f
 800a724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a728:	e016      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a732:	d10d      	bne.n	800a750 <UART_Start_Receive_IT+0x9c>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <UART_Start_Receive_IT+0x92>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	227f      	movs	r2, #127	; 0x7f
 800a740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a744:	e008      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	223f      	movs	r2, #63	; 0x3f
 800a74a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a74e:	e003      	b.n	800a758 <UART_Start_Receive_IT+0xa4>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2222      	movs	r2, #34	; 0x22
 800a764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3308      	adds	r3, #8
 800a788:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a78c:	673a      	str	r2, [r7, #112]	; 0x70
 800a78e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a790:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a792:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a794:	e841 2300 	strex	r3, r2, [r1]
 800a798:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a79a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e3      	bne.n	800a768 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a8:	d153      	bne.n	800a852 <UART_Start_Receive_IT+0x19e>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7b0:	88fa      	ldrh	r2, [r7, #6]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d34d      	bcc.n	800a852 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7be:	d107      	bne.n	800a7d0 <UART_Start_Receive_IT+0x11c>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4a4b      	ldr	r2, [pc, #300]	; (800a8f8 <UART_Start_Receive_IT+0x244>)
 800a7cc:	671a      	str	r2, [r3, #112]	; 0x70
 800a7ce:	e002      	b.n	800a7d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a4a      	ldr	r2, [pc, #296]	; (800a8fc <UART_Start_Receive_IT+0x248>)
 800a7d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01a      	beq.n	800a81c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a80a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a80e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e4      	bne.n	800a7e6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a832:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a83c:	64ba      	str	r2, [r7, #72]	; 0x48
 800a83e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e5      	bne.n	800a81c <UART_Start_Receive_IT+0x168>
 800a850:	e04a      	b.n	800a8e8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85a:	d107      	bne.n	800a86c <UART_Start_Receive_IT+0x1b8>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d103      	bne.n	800a86c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4a26      	ldr	r2, [pc, #152]	; (800a900 <UART_Start_Receive_IT+0x24c>)
 800a868:	671a      	str	r2, [r3, #112]	; 0x70
 800a86a:	e002      	b.n	800a872 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4a25      	ldr	r2, [pc, #148]	; (800a904 <UART_Start_Receive_IT+0x250>)
 800a870:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d019      	beq.n	800a8b6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	e853 3f00 	ldrex	r3, [r3]
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a896:	677b      	str	r3, [r7, #116]	; 0x74
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e6      	bne.n	800a882 <UART_Start_Receive_IT+0x1ce>
 800a8b4:	e018      	b.n	800a8e8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f043 0320 	orr.w	r3, r3, #32
 800a8ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d8:	69f9      	ldr	r1, [r7, #28]
 800a8da:	6a3a      	ldr	r2, [r7, #32]
 800a8dc:	e841 2300 	strex	r3, r2, [r1]
 800a8e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e6      	bne.n	800a8b6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	378c      	adds	r7, #140	; 0x8c
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	0800b355 	.word	0x0800b355
 800a8fc:	0800b05d 	.word	0x0800b05d
 800a900:	0800aefb 	.word	0x0800aefb
 800a904:	0800ad9b 	.word	0x0800ad9b

0800a908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b095      	sub	sp, #84	; 0x54
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a924:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a92e:	643b      	str	r3, [r7, #64]	; 0x40
 800a930:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e6      	bne.n	800a910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	61fb      	str	r3, [r7, #28]
   return(result);
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a966:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e3      	bne.n	800a942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d118      	bne.n	800a9b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	e853 3f00 	ldrex	r3, [r3]
 800a98e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f023 0310 	bic.w	r3, r3, #16
 800a996:	647b      	str	r3, [r7, #68]	; 0x44
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a0:	61bb      	str	r3, [r7, #24]
 800a9a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a4:	6979      	ldr	r1, [r7, #20]
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	e841 2300 	strex	r3, r2, [r1]
 800a9ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1e6      	bne.n	800a982 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a9c8:	bf00      	nop
 800a9ca:	3754      	adds	r7, #84	; 0x54
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff f996 	bl	8009d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b08f      	sub	sp, #60	; 0x3c
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa0e:	2b21      	cmp	r3, #33	; 0x21
 800aa10:	d14c      	bne.n	800aaac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d132      	bne.n	800aa84 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	e853 3f00 	ldrex	r3, [r3]
 800aa2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa32:	637b      	str	r3, [r7, #52]	; 0x34
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa44:	e841 2300 	strex	r3, r2, [r1]
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e6      	bne.n	800aa1e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6979      	ldr	r1, [r7, #20]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e6      	bne.n	800aa50 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800aa82:	e013      	b.n	800aaac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800aaac:	bf00      	nop
 800aaae:	373c      	adds	r7, #60	; 0x3c
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b091      	sub	sp, #68	; 0x44
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac6:	2b21      	cmp	r3, #33	; 0x21
 800aac8:	d151      	bne.n	800ab6e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d132      	bne.n	800ab3c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	623b      	str	r3, [r7, #32]
   return(result);
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaea:	63bb      	str	r3, [r7, #56]	; 0x38
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	633b      	str	r3, [r7, #48]	; 0x30
 800aaf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e6      	bne.n	800aad6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	e853 3f00 	ldrex	r3, [r3]
 800ab14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2a:	69b9      	ldr	r1, [r7, #24]
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	e841 2300 	strex	r3, r2, [r1]
 800ab32:	617b      	str	r3, [r7, #20]
   return(result);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1e6      	bne.n	800ab08 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ab3a:	e018      	b.n	800ab6e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ab42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab50:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab56:	1c9a      	adds	r2, r3, #2
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ab6e:	bf00      	nop
 800ab70:	3744      	adds	r7, #68	; 0x44
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b091      	sub	sp, #68	; 0x44
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab88:	2b21      	cmp	r3, #33	; 0x21
 800ab8a:	d160      	bne.n	800ac4e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab92:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ab94:	e057      	b.n	800ac46 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d133      	bne.n	800ac0a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3308      	adds	r3, #8
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	623b      	str	r3, [r7, #32]
   return(result);
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abc2:	633a      	str	r2, [r7, #48]	; 0x30
 800abc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abca:	e841 2300 	strex	r3, r2, [r1]
 800abce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e5      	bne.n	800aba2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	60fb      	str	r3, [r7, #12]
   return(result);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abea:	637b      	str	r3, [r7, #52]	; 0x34
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf4:	61fb      	str	r3, [r7, #28]
 800abf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	69b9      	ldr	r1, [r7, #24]
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	e841 2300 	strex	r3, r2, [r1]
 800ac00:	617b      	str	r3, [r7, #20]
   return(result);
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e6      	bne.n	800abd6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ac08:	e021      	b.n	800ac4e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d013      	beq.n	800ac40 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1c:	781a      	ldrb	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ac40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac42:	3b01      	subs	r3, #1
 800ac44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1a4      	bne.n	800ab96 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ac4c:	e7ff      	b.n	800ac4e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ac4e:	bf00      	nop
 800ac50:	3744      	adds	r7, #68	; 0x44
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b091      	sub	sp, #68	; 0x44
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac68:	2b21      	cmp	r3, #33	; 0x21
 800ac6a:	d165      	bne.n	800ad38 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac72:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac74:	e05c      	b.n	800ad30 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d133      	bne.n	800acea <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	e853 3f00 	ldrex	r3, [r3]
 800acc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acca:	633b      	str	r3, [r7, #48]	; 0x30
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	6979      	ldr	r1, [r7, #20]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	613b      	str	r3, [r7, #16]
   return(result);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e6      	bne.n	800acb6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ace8:	e026      	b.n	800ad38 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d018      	beq.n	800ad2a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad0c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad12:	1c9a      	adds	r2, r3, #2
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	3b01      	subs	r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ad2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ad30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d19f      	bne.n	800ac76 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ad36:	e7ff      	b.n	800ad38 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ad38:	bf00      	nop
 800ad3a:	3744      	adds	r7, #68	; 0x44
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	e853 3f00 	ldrex	r3, [r3]
 800ad58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad60:	61fb      	str	r3, [r7, #28]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6e:	6979      	ldr	r1, [r7, #20]
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	613b      	str	r3, [r7, #16]
   return(result);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e6      	bne.n	800ad4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7f8 fc15 	bl	80035bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad92:	bf00      	nop
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b096      	sub	sp, #88	; 0x58
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ada8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb2:	2b22      	cmp	r3, #34	; 0x22
 800adb4:	f040 8095 	bne.w	800aee2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800adc2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800adc6:	b2d9      	uxtb	r1, r3
 800adc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	400a      	ands	r2, r1
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d178      	bne.n	800aef2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e6      	bne.n	800ae00 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3308      	adds	r3, #8
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	e853 3f00 	ldrex	r3, [r3]
 800ae40:	623b      	str	r3, [r7, #32]
   return(result);
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	f023 0301 	bic.w	r3, r3, #1
 800ae48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae52:	633a      	str	r2, [r7, #48]	; 0x30
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae5a:	e841 2300 	strex	r3, r2, [r1]
 800ae5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1e5      	bne.n	800ae32 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2220      	movs	r2, #32
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d12e      	bne.n	800aeda <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0310 	bic.w	r3, r3, #16
 800ae96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea0:	61fb      	str	r3, [r7, #28]
 800aea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea4:	69b9      	ldr	r1, [r7, #24]
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	e841 2300 	strex	r3, r2, [r1]
 800aeac:	617b      	str	r3, [r7, #20]
   return(result);
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e6      	bne.n	800ae82 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	f003 0310 	and.w	r3, r3, #16
 800aebe:	2b10      	cmp	r3, #16
 800aec0:	d103      	bne.n	800aeca <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2210      	movs	r2, #16
 800aec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fe ff30 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aed8:	e00b      	b.n	800aef2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7f8 fb58 	bl	8003590 <HAL_UART_RxCpltCallback>
}
 800aee0:	e007      	b.n	800aef2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	699a      	ldr	r2, [r3, #24]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f042 0208 	orr.w	r2, r2, #8
 800aef0:	619a      	str	r2, [r3, #24]
}
 800aef2:	bf00      	nop
 800aef4:	3758      	adds	r7, #88	; 0x58
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b096      	sub	sp, #88	; 0x58
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af12:	2b22      	cmp	r3, #34	; 0x22
 800af14:	f040 8095 	bne.w	800b042 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af26:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800af28:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800af2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af30:	4013      	ands	r3, r2
 800af32:	b29a      	uxth	r2, r3
 800af34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3c:	1c9a      	adds	r2, r3, #2
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d178      	bne.n	800b052 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af7e:	643b      	str	r3, [r7, #64]	; 0x40
 800af80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e6      	bne.n	800af60 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3308      	adds	r3, #8
 800af98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e5      	bne.n	800af92 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d12e      	bne.n	800b03a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	e853 3f00 	ldrex	r3, [r3]
 800afee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f023 0310 	bic.w	r3, r3, #16
 800aff6:	647b      	str	r3, [r7, #68]	; 0x44
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b000:	61bb      	str	r3, [r7, #24]
 800b002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6979      	ldr	r1, [r7, #20]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	613b      	str	r3, [r7, #16]
   return(result);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e6      	bne.n	800afe2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	f003 0310 	and.w	r3, r3, #16
 800b01e:	2b10      	cmp	r3, #16
 800b020:	d103      	bne.n	800b02a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2210      	movs	r2, #16
 800b028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe fe80 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b038:	e00b      	b.n	800b052 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7f8 faa8 	bl	8003590 <HAL_UART_RxCpltCallback>
}
 800b040:	e007      	b.n	800b052 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	699a      	ldr	r2, [r3, #24]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f042 0208 	orr.w	r2, r2, #8
 800b050:	619a      	str	r2, [r3, #24]
}
 800b052:	bf00      	nop
 800b054:	3758      	adds	r7, #88	; 0x58
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0a6      	sub	sp, #152	; 0x98
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b06a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b092:	2b22      	cmp	r3, #34	; 0x22
 800b094:	f040 814f 	bne.w	800b336 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b09e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0a2:	e0f6      	b.n	800b292 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0ae:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b0b2:	b2d9      	uxtb	r1, r3
 800b0b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0be:	400a      	ands	r2, r1
 800b0c0:	b2d2      	uxtb	r2, r2
 800b0c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d053      	beq.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d011      	beq.n	800b126 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2201      	movs	r2, #1
 800b114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b11c:	f043 0201 	orr.w	r2, r3, #1
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d011      	beq.n	800b156 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00b      	beq.n	800b156 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2202      	movs	r2, #2
 800b144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b14c:	f043 0204 	orr.w	r2, r3, #4
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b156:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b15a:	f003 0304 	and.w	r3, r3, #4
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d011      	beq.n	800b186 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00b      	beq.n	800b186 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2204      	movs	r2, #4
 800b174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b17c:	f043 0202 	orr.w	r2, r3, #2
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d006      	beq.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7fe fdc7 	bl	8009d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d173      	bne.n	800b292 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b1b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1ce:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b1d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b1da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e4      	bne.n	800b1aa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1f6:	f023 0301 	bic.w	r3, r3, #1
 800b1fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3308      	adds	r3, #8
 800b202:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b204:	657a      	str	r2, [r7, #84]	; 0x54
 800b206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b20a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e3      	bne.n	800b1e0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2220      	movs	r2, #32
 800b21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d12e      	bne.n	800b28c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	f023 0310 	bic.w	r3, r3, #16
 800b248:	67bb      	str	r3, [r7, #120]	; 0x78
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b252:	643b      	str	r3, [r7, #64]	; 0x40
 800b254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e6      	bne.n	800b234 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b10      	cmp	r3, #16
 800b272:	d103      	bne.n	800b27c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2210      	movs	r2, #16
 800b27a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7fe fd57 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
 800b28a:	e002      	b.n	800b292 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7f8 f97f 	bl	8003590 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b296:	2b00      	cmp	r3, #0
 800b298:	d006      	beq.n	800b2a8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b29a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f47f aefe 	bne.w	800b0a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b2b2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d045      	beq.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d23e      	bcs.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2de:	673b      	str	r3, [r7, #112]	; 0x70
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b2e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e5      	bne.n	800b2c8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800b300:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f043 0320 	orr.w	r3, r3, #32
 800b316:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6979      	ldr	r1, [r7, #20]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	613b      	str	r3, [r7, #16]
   return(result);
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e6      	bne.n	800b302 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b334:	e007      	b.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	699a      	ldr	r2, [r3, #24]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f042 0208 	orr.w	r2, r2, #8
 800b344:	619a      	str	r2, [r3, #24]
}
 800b346:	bf00      	nop
 800b348:	3798      	adds	r7, #152	; 0x98
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	0800ad9b 	.word	0x0800ad9b

0800b354 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b0a8      	sub	sp, #160	; 0xa0
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b362:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38a:	2b22      	cmp	r3, #34	; 0x22
 800b38c:	f040 8153 	bne.w	800b636 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b396:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b39a:	e0fa      	b.n	800b592 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b3ae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b3b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c4:	1c9a      	adds	r2, r3, #2
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d053      	beq.n	800b49a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d011      	beq.n	800b422 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b3fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00b      	beq.n	800b422 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2201      	movs	r2, #1
 800b410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b418:	f043 0201 	orr.w	r2, r3, #1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d011      	beq.n	800b452 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b42e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00b      	beq.n	800b452 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2202      	movs	r2, #2
 800b440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b448:	f043 0204 	orr.w	r2, r3, #4
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b452:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d011      	beq.n	800b482 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b45e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2204      	movs	r2, #4
 800b470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b478:	f043 0202 	orr.w	r2, r3, #2
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d006      	beq.n	800b49a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7fe fc49 	bl	8009d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d175      	bne.n	800b592 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4ca:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e4      	bne.n	800b4a6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4f2:	f023 0301 	bic.w	r3, r3, #1
 800b4f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b504:	65ba      	str	r2, [r7, #88]	; 0x58
 800b506:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b50a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e1      	bne.n	800b4dc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d12e      	bne.n	800b58c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b544:	f023 0310 	bic.w	r3, r3, #16
 800b548:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b552:	647b      	str	r3, [r7, #68]	; 0x44
 800b554:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e6      	bne.n	800b534 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	69db      	ldr	r3, [r3, #28]
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b10      	cmp	r3, #16
 800b572:	d103      	bne.n	800b57c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2210      	movs	r2, #16
 800b57a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7fe fbd7 	bl	8009d38 <HAL_UARTEx_RxEventCallback>
 800b58a:	e002      	b.n	800b592 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7f7 ffff 	bl	8003590 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b592:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b596:	2b00      	cmp	r3, #0
 800b598:	d006      	beq.n	800b5a8 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b59a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b59e:	f003 0320 	and.w	r3, r3, #32
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f47f aefa 	bne.w	800b39c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d045      	beq.n	800b646 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d23e      	bcs.n	800b646 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	623b      	str	r3, [r7, #32]
   return(result);
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5de:	677b      	str	r3, [r7, #116]	; 0x74
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b5e8:	633a      	str	r2, [r7, #48]	; 0x30
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e5      	bne.n	800b5c8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a14      	ldr	r2, [pc, #80]	; (800b650 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b600:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f043 0320 	orr.w	r3, r3, #32
 800b616:	673b      	str	r3, [r7, #112]	; 0x70
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b620:	61fb      	str	r3, [r7, #28]
 800b622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	69b9      	ldr	r1, [r7, #24]
 800b626:	69fa      	ldr	r2, [r7, #28]
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	617b      	str	r3, [r7, #20]
   return(result);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e6      	bne.n	800b602 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b634:	e007      	b.n	800b646 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0208 	orr.w	r2, r2, #8
 800b644:	619a      	str	r2, [r3, #24]
}
 800b646:	bf00      	nop
 800b648:	37a0      	adds	r7, #160	; 0xa0
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	0800aefb 	.word	0x0800aefb

0800b654 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d101      	bne.n	800b6a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e027      	b.n	800b6f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2224      	movs	r2, #36	; 0x24
 800b6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f022 0201 	bic.w	r2, r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b716:	2302      	movs	r3, #2
 800b718:	e02d      	b.n	800b776 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2224      	movs	r2, #36	; 0x24
 800b726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f022 0201 	bic.w	r2, r2, #1
 800b740:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f850 	bl	800b7fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2220      	movs	r2, #32
 800b768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b792:	2302      	movs	r3, #2
 800b794:	e02d      	b.n	800b7f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2224      	movs	r2, #36	; 0x24
 800b7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f022 0201 	bic.w	r2, r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f812 	bl	800b7fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d108      	bne.n	800b81e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b81c:	e031      	b.n	800b882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b81e:	2308      	movs	r3, #8
 800b820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b822:	2308      	movs	r3, #8
 800b824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	0e5b      	lsrs	r3, r3, #25
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	0f5b      	lsrs	r3, r3, #29
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 0307 	and.w	r3, r3, #7
 800b844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	7b3a      	ldrb	r2, [r7, #12]
 800b84a:	4911      	ldr	r1, [pc, #68]	; (800b890 <UARTEx_SetNbDataToProcess+0x94>)
 800b84c:	5c8a      	ldrb	r2, [r1, r2]
 800b84e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b852:	7b3a      	ldrb	r2, [r7, #12]
 800b854:	490f      	ldr	r1, [pc, #60]	; (800b894 <UARTEx_SetNbDataToProcess+0x98>)
 800b856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b858:	fb93 f3f2 	sdiv	r3, r3, r2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	7b7a      	ldrb	r2, [r7, #13]
 800b868:	4909      	ldr	r1, [pc, #36]	; (800b890 <UARTEx_SetNbDataToProcess+0x94>)
 800b86a:	5c8a      	ldrb	r2, [r1, r2]
 800b86c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b870:	7b7a      	ldrb	r2, [r7, #13]
 800b872:	4908      	ldr	r1, [pc, #32]	; (800b894 <UARTEx_SetNbDataToProcess+0x98>)
 800b874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b876:	fb93 f3f2 	sdiv	r3, r3, r2
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b882:	bf00      	nop
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	08011730 	.word	0x08011730
 800b894:	08011738 	.word	0x08011738

0800b898 <_ZNSaIcEC1Ev>:
 800b898:	4770      	bx	lr

0800b89a <_ZNSaIcED1Ev>:
 800b89a:	4770      	bx	lr

0800b89c <_ZSt17__throw_bad_allocv>:
 800b89c:	b508      	push	{r3, lr}
 800b89e:	f000 f9d5 	bl	800bc4c <abort>

0800b8a2 <_ZSt19__throw_logic_errorPKc>:
 800b8a2:	b508      	push	{r3, lr}
 800b8a4:	f000 f9d2 	bl	800bc4c <abort>

0800b8a8 <_ZSt24__throw_invalid_argumentPKc>:
 800b8a8:	b508      	push	{r3, lr}
 800b8aa:	f000 f9cf 	bl	800bc4c <abort>

0800b8ae <_ZSt20__throw_length_errorPKc>:
 800b8ae:	b508      	push	{r3, lr}
 800b8b0:	f000 f9cc 	bl	800bc4c <abort>

0800b8b4 <_ZSt20__throw_out_of_rangePKc>:
 800b8b4:	b508      	push	{r3, lr}
 800b8b6:	f000 f9c9 	bl	800bc4c <abort>

0800b8ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b8ba:	b10a      	cbz	r2, 800b8c0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b8bc:	f000 bbf8 	b.w	800c0b0 <memcpy>
 800b8c0:	4770      	bx	lr
	...

0800b8c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b8c4:	b508      	push	{r3, lr}
 800b8c6:	680b      	ldr	r3, [r1, #0]
 800b8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8cc:	d302      	bcc.n	800b8d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b8ce:	480d      	ldr	r0, [pc, #52]	; (800b904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b8d0:	f7ff ffed 	bl	800b8ae <_ZSt20__throw_length_errorPKc>
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d90b      	bls.n	800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b8d8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b8dc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b8e0:	d206      	bcs.n	800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b8e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b8e6:	bf2a      	itet	cs
 800b8e8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b8ec:	6008      	strcc	r0, [r1, #0]
 800b8ee:	600b      	strcs	r3, [r1, #0]
 800b8f0:	6808      	ldr	r0, [r1, #0]
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	d501      	bpl.n	800b8fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b8f6:	f7ff ffd1 	bl	800b89c <_ZSt17__throw_bad_allocv>
 800b8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b8fe:	f000 b860 	b.w	800b9c2 <_Znwj>
 800b902:	bf00      	nop
 800b904:	08011740 	.word	0x08011740

0800b908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b908:	f850 3b08 	ldr.w	r3, [r0], #8
 800b90c:	4283      	cmp	r3, r0
 800b90e:	d002      	beq.n	800b916 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b910:	4618      	mov	r0, r3
 800b912:	f000 b854 	b.w	800b9be <_ZdlPv>
 800b916:	4770      	bx	lr

0800b918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b918:	2a01      	cmp	r2, #1
 800b91a:	b410      	push	{r4}
 800b91c:	d104      	bne.n	800b928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b91e:	780a      	ldrb	r2, [r1, #0]
 800b920:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b924:	7002      	strb	r2, [r0, #0]
 800b926:	4770      	bx	lr
 800b928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92c:	f7ff bfc5 	b.w	800b8ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b930:	b508      	push	{r3, lr}
 800b932:	1a52      	subs	r2, r2, r1
 800b934:	f7ff fff0 	bl	800b918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b938:	bd08      	pop	{r3, pc}

0800b93a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b93a:	b510      	push	{r4, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	f7ff ffe3 	bl	800b908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b942:	4620      	mov	r0, r4
 800b944:	bd10      	pop	{r4, pc}

0800b946 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	4770      	bx	lr
	...

0800b94c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b94c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	4616      	mov	r6, r2
 800b952:	460d      	mov	r5, r1
 800b954:	b919      	cbnz	r1, 800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b956:	b112      	cbz	r2, 800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b958:	480d      	ldr	r0, [pc, #52]	; (800b990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b95a:	f7ff ffa2 	bl	800b8a2 <_ZSt19__throw_logic_errorPKc>
 800b95e:	1b73      	subs	r3, r6, r5
 800b960:	2b0f      	cmp	r3, #15
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	d907      	bls.n	800b976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b966:	2200      	movs	r2, #0
 800b968:	a901      	add	r1, sp, #4
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff ffaa 	bl	800b8c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b970:	9b01      	ldr	r3, [sp, #4]
 800b972:	6020      	str	r0, [r4, #0]
 800b974:	60a3      	str	r3, [r4, #8]
 800b976:	4632      	mov	r2, r6
 800b978:	4629      	mov	r1, r5
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	f7ff ffd8 	bl	800b930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	6063      	str	r3, [r4, #4]
 800b986:	2100      	movs	r1, #0
 800b988:	54d1      	strb	r1, [r2, r3]
 800b98a:	b002      	add	sp, #8
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	bf00      	nop
 800b990:	08011758 	.word	0x08011758

0800b994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	f100 0308 	add.w	r3, r0, #8
 800b99a:	4604      	mov	r4, r0
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	460d      	mov	r5, r1
 800b9a0:	b159      	cbz	r1, 800b9ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b9a2:	4608      	mov	r0, r1
 800b9a4:	f7f4 fc96 	bl	80002d4 <strlen>
 800b9a8:	182a      	adds	r2, r5, r0
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7ff ffcb 	bl	800b94c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	e7f5      	b.n	800b9aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b9be <_ZdlPv>:
 800b9be:	f000 bb5f 	b.w	800c080 <free>

0800b9c2 <_Znwj>:
 800b9c2:	2801      	cmp	r0, #1
 800b9c4:	bf38      	it	cc
 800b9c6:	2001      	movcc	r0, #1
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 fb4f 	bl	800c070 <malloc>
 800b9d2:	b930      	cbnz	r0, 800b9e2 <_Znwj+0x20>
 800b9d4:	f000 f806 	bl	800b9e4 <_ZSt15get_new_handlerv>
 800b9d8:	b908      	cbnz	r0, 800b9de <_Znwj+0x1c>
 800b9da:	f000 f937 	bl	800bc4c <abort>
 800b9de:	4780      	blx	r0
 800b9e0:	e7f4      	b.n	800b9cc <_Znwj+0xa>
 800b9e2:	bd10      	pop	{r4, pc}

0800b9e4 <_ZSt15get_new_handlerv>:
 800b9e4:	4b02      	ldr	r3, [pc, #8]	; (800b9f0 <_ZSt15get_new_handlerv+0xc>)
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	f3bf 8f5b 	dmb	ish
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000a10 	.word	0x20000a10

0800b9f4 <asinf>:
 800b9f4:	b508      	push	{r3, lr}
 800b9f6:	ed2d 8b02 	vpush	{d8}
 800b9fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b9fe:	f000 f825 	bl	800ba4c <__ieee754_asinf>
 800ba02:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	eef0 8a40 	vmov.f32	s17, s0
 800ba0e:	d615      	bvs.n	800ba3c <asinf+0x48>
 800ba10:	eeb0 0a48 	vmov.f32	s0, s16
 800ba14:	f000 f90c 	bl	800bc30 <fabsf>
 800ba18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba24:	dd0a      	ble.n	800ba3c <asinf+0x48>
 800ba26:	f000 f919 	bl	800bc5c <__errno>
 800ba2a:	ecbd 8b02 	vpop	{d8}
 800ba2e:	2321      	movs	r3, #33	; 0x21
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba36:	4804      	ldr	r0, [pc, #16]	; (800ba48 <asinf+0x54>)
 800ba38:	f000 b902 	b.w	800bc40 <nanf>
 800ba3c:	eeb0 0a68 	vmov.f32	s0, s17
 800ba40:	ecbd 8b02 	vpop	{d8}
 800ba44:	bd08      	pop	{r3, pc}
 800ba46:	bf00      	nop
 800ba48:	08011937 	.word	0x08011937

0800ba4c <__ieee754_asinf>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	ee10 5a10 	vmov	r5, s0
 800ba52:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ba56:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ba5a:	ed2d 8b04 	vpush	{d8-d9}
 800ba5e:	d10c      	bne.n	800ba7a <__ieee754_asinf+0x2e>
 800ba60:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800bbd8 <__ieee754_asinf+0x18c>
 800ba64:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800bbdc <__ieee754_asinf+0x190>
 800ba68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba6c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba70:	eeb0 0a67 	vmov.f32	s0, s15
 800ba74:	ecbd 8b04 	vpop	{d8-d9}
 800ba78:	bd38      	pop	{r3, r4, r5, pc}
 800ba7a:	dd04      	ble.n	800ba86 <__ieee754_asinf+0x3a>
 800ba7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba80:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ba84:	e7f6      	b.n	800ba74 <__ieee754_asinf+0x28>
 800ba86:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ba8a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ba8e:	da0b      	bge.n	800baa8 <__ieee754_asinf+0x5c>
 800ba90:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ba94:	da52      	bge.n	800bb3c <__ieee754_asinf+0xf0>
 800ba96:	eddf 7a52 	vldr	s15, [pc, #328]	; 800bbe0 <__ieee754_asinf+0x194>
 800ba9a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ba9e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800baa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa6:	dce5      	bgt.n	800ba74 <__ieee754_asinf+0x28>
 800baa8:	f000 f8c2 	bl	800bc30 <fabsf>
 800baac:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800bab0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800bab4:	ee20 8a08 	vmul.f32	s16, s0, s16
 800bab8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800bbe4 <__ieee754_asinf+0x198>
 800babc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bbe8 <__ieee754_asinf+0x19c>
 800bac0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800bbec <__ieee754_asinf+0x1a0>
 800bac4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800bac8:	eddf 7a49 	vldr	s15, [pc, #292]	; 800bbf0 <__ieee754_asinf+0x1a4>
 800bacc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bad0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800bbf4 <__ieee754_asinf+0x1a8>
 800bad4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bad8:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bbf8 <__ieee754_asinf+0x1ac>
 800badc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bae0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bbfc <__ieee754_asinf+0x1b0>
 800bae4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800bae8:	eddf 7a45 	vldr	s15, [pc, #276]	; 800bc00 <__ieee754_asinf+0x1b4>
 800baec:	eee8 7a07 	vfma.f32	s15, s16, s14
 800baf0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bc04 <__ieee754_asinf+0x1b8>
 800baf4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800baf8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bc08 <__ieee754_asinf+0x1bc>
 800bafc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bb00:	eeb0 0a48 	vmov.f32	s0, s16
 800bb04:	eee7 8a88 	vfma.f32	s17, s15, s16
 800bb08:	f000 f886 	bl	800bc18 <__ieee754_sqrtf>
 800bb0c:	4b3f      	ldr	r3, [pc, #252]	; (800bc0c <__ieee754_asinf+0x1c0>)
 800bb0e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800bb12:	429c      	cmp	r4, r3
 800bb14:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800bb18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bb1c:	dd3d      	ble.n	800bb9a <__ieee754_asinf+0x14e>
 800bb1e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800bb22:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800bc10 <__ieee754_asinf+0x1c4>
 800bb26:	eee0 7a26 	vfma.f32	s15, s0, s13
 800bb2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bbdc <__ieee754_asinf+0x190>
 800bb2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb32:	2d00      	cmp	r5, #0
 800bb34:	bfd8      	it	le
 800bb36:	eeb1 0a40 	vnegle.f32	s0, s0
 800bb3a:	e79b      	b.n	800ba74 <__ieee754_asinf+0x28>
 800bb3c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bb40:	eddf 6a28 	vldr	s13, [pc, #160]	; 800bbe4 <__ieee754_asinf+0x198>
 800bb44:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bbe8 <__ieee754_asinf+0x19c>
 800bb48:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800bbfc <__ieee754_asinf+0x1b0>
 800bb4c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bb50:	eddf 6a27 	vldr	s13, [pc, #156]	; 800bbf0 <__ieee754_asinf+0x1a4>
 800bb54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb58:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800bbf4 <__ieee754_asinf+0x1a8>
 800bb5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bb60:	eddf 6a25 	vldr	s13, [pc, #148]	; 800bbf8 <__ieee754_asinf+0x1ac>
 800bb64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800bbec <__ieee754_asinf+0x1a0>
 800bb6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bb70:	eddf 6a23 	vldr	s13, [pc, #140]	; 800bc00 <__ieee754_asinf+0x1b4>
 800bb74:	eee7 6a86 	vfma.f32	s13, s15, s12
 800bb78:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800bc04 <__ieee754_asinf+0x1b8>
 800bb7c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800bb80:	eddf 6a21 	vldr	s13, [pc, #132]	; 800bc08 <__ieee754_asinf+0x1bc>
 800bb84:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bb88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb8c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800bb90:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800bb94:	eea0 0a27 	vfma.f32	s0, s0, s15
 800bb98:	e76c      	b.n	800ba74 <__ieee754_asinf+0x28>
 800bb9a:	ee10 3a10 	vmov	r3, s0
 800bb9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bba2:	f023 030f 	bic.w	r3, r3, #15
 800bba6:	ee07 3a10 	vmov	s14, r3
 800bbaa:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bbae:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bbb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbb6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800bbba:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bbd8 <__ieee754_asinf+0x18c>
 800bbbe:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800bbc2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800bbc6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800bc14 <__ieee754_asinf+0x1c8>
 800bbca:	eeb0 6a40 	vmov.f32	s12, s0
 800bbce:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bbd2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bbd6:	e7aa      	b.n	800bb2e <__ieee754_asinf+0xe2>
 800bbd8:	b33bbd2e 	.word	0xb33bbd2e
 800bbdc:	3fc90fdb 	.word	0x3fc90fdb
 800bbe0:	7149f2ca 	.word	0x7149f2ca
 800bbe4:	3811ef08 	.word	0x3811ef08
 800bbe8:	3a4f7f04 	.word	0x3a4f7f04
 800bbec:	3e2aaaab 	.word	0x3e2aaaab
 800bbf0:	bd241146 	.word	0xbd241146
 800bbf4:	3e4e0aa8 	.word	0x3e4e0aa8
 800bbf8:	bea6b090 	.word	0xbea6b090
 800bbfc:	3d9dc62e 	.word	0x3d9dc62e
 800bc00:	bf303361 	.word	0xbf303361
 800bc04:	4001572d 	.word	0x4001572d
 800bc08:	c019d139 	.word	0xc019d139
 800bc0c:	3f799999 	.word	0x3f799999
 800bc10:	333bbd2e 	.word	0x333bbd2e
 800bc14:	3f490fdb 	.word	0x3f490fdb

0800bc18 <__ieee754_sqrtf>:
 800bc18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc1c:	4770      	bx	lr
	...

0800bc20 <nan>:
 800bc20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc28 <nan+0x8>
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	7ff80000 	.word	0x7ff80000

0800bc30 <fabsf>:
 800bc30:	ee10 3a10 	vmov	r3, s0
 800bc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	ee00 3a10 	vmov	s0, r3
 800bc3c:	4770      	bx	lr
	...

0800bc40 <nanf>:
 800bc40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc48 <nanf+0x8>
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	7fc00000 	.word	0x7fc00000

0800bc4c <abort>:
 800bc4c:	b508      	push	{r3, lr}
 800bc4e:	2006      	movs	r0, #6
 800bc50:	f001 fbee 	bl	800d430 <raise>
 800bc54:	2001      	movs	r0, #1
 800bc56:	f7f8 fb96 	bl	8004386 <_exit>
	...

0800bc5c <__errno>:
 800bc5c:	4b01      	ldr	r3, [pc, #4]	; (800bc64 <__errno+0x8>)
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20000030 	.word	0x20000030

0800bc68 <__sflush_r>:
 800bc68:	898a      	ldrh	r2, [r1, #12]
 800bc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6e:	4605      	mov	r5, r0
 800bc70:	0710      	lsls	r0, r2, #28
 800bc72:	460c      	mov	r4, r1
 800bc74:	d458      	bmi.n	800bd28 <__sflush_r+0xc0>
 800bc76:	684b      	ldr	r3, [r1, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dc05      	bgt.n	800bc88 <__sflush_r+0x20>
 800bc7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	dc02      	bgt.n	800bc88 <__sflush_r+0x20>
 800bc82:	2000      	movs	r0, #0
 800bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc8a:	2e00      	cmp	r6, #0
 800bc8c:	d0f9      	beq.n	800bc82 <__sflush_r+0x1a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc94:	682f      	ldr	r7, [r5, #0]
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	d032      	beq.n	800bd00 <__sflush_r+0x98>
 800bc9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	075a      	lsls	r2, r3, #29
 800bca0:	d505      	bpl.n	800bcae <__sflush_r+0x46>
 800bca2:	6863      	ldr	r3, [r4, #4]
 800bca4:	1ac0      	subs	r0, r0, r3
 800bca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bca8:	b10b      	cbz	r3, 800bcae <__sflush_r+0x46>
 800bcaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcac:	1ac0      	subs	r0, r0, r3
 800bcae:	2300      	movs	r3, #0
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcb4:	6a21      	ldr	r1, [r4, #32]
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b0      	blx	r6
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	d106      	bne.n	800bcce <__sflush_r+0x66>
 800bcc0:	6829      	ldr	r1, [r5, #0]
 800bcc2:	291d      	cmp	r1, #29
 800bcc4:	d82c      	bhi.n	800bd20 <__sflush_r+0xb8>
 800bcc6:	4a2a      	ldr	r2, [pc, #168]	; (800bd70 <__sflush_r+0x108>)
 800bcc8:	40ca      	lsrs	r2, r1
 800bcca:	07d6      	lsls	r6, r2, #31
 800bccc:	d528      	bpl.n	800bd20 <__sflush_r+0xb8>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6062      	str	r2, [r4, #4]
 800bcd2:	04d9      	lsls	r1, r3, #19
 800bcd4:	6922      	ldr	r2, [r4, #16]
 800bcd6:	6022      	str	r2, [r4, #0]
 800bcd8:	d504      	bpl.n	800bce4 <__sflush_r+0x7c>
 800bcda:	1c42      	adds	r2, r0, #1
 800bcdc:	d101      	bne.n	800bce2 <__sflush_r+0x7a>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b903      	cbnz	r3, 800bce4 <__sflush_r+0x7c>
 800bce2:	6560      	str	r0, [r4, #84]	; 0x54
 800bce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bce6:	602f      	str	r7, [r5, #0]
 800bce8:	2900      	cmp	r1, #0
 800bcea:	d0ca      	beq.n	800bc82 <__sflush_r+0x1a>
 800bcec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	d002      	beq.n	800bcfa <__sflush_r+0x92>
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 fa0b 	bl	800c110 <_free_r>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	6360      	str	r0, [r4, #52]	; 0x34
 800bcfe:	e7c1      	b.n	800bc84 <__sflush_r+0x1c>
 800bd00:	6a21      	ldr	r1, [r4, #32]
 800bd02:	2301      	movs	r3, #1
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b0      	blx	r6
 800bd08:	1c41      	adds	r1, r0, #1
 800bd0a:	d1c7      	bne.n	800bc9c <__sflush_r+0x34>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0c4      	beq.n	800bc9c <__sflush_r+0x34>
 800bd12:	2b1d      	cmp	r3, #29
 800bd14:	d001      	beq.n	800bd1a <__sflush_r+0xb2>
 800bd16:	2b16      	cmp	r3, #22
 800bd18:	d101      	bne.n	800bd1e <__sflush_r+0xb6>
 800bd1a:	602f      	str	r7, [r5, #0]
 800bd1c:	e7b1      	b.n	800bc82 <__sflush_r+0x1a>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	e7ad      	b.n	800bc84 <__sflush_r+0x1c>
 800bd28:	690f      	ldr	r7, [r1, #16]
 800bd2a:	2f00      	cmp	r7, #0
 800bd2c:	d0a9      	beq.n	800bc82 <__sflush_r+0x1a>
 800bd2e:	0793      	lsls	r3, r2, #30
 800bd30:	680e      	ldr	r6, [r1, #0]
 800bd32:	bf08      	it	eq
 800bd34:	694b      	ldreq	r3, [r1, #20]
 800bd36:	600f      	str	r7, [r1, #0]
 800bd38:	bf18      	it	ne
 800bd3a:	2300      	movne	r3, #0
 800bd3c:	eba6 0807 	sub.w	r8, r6, r7
 800bd40:	608b      	str	r3, [r1, #8]
 800bd42:	f1b8 0f00 	cmp.w	r8, #0
 800bd46:	dd9c      	ble.n	800bc82 <__sflush_r+0x1a>
 800bd48:	6a21      	ldr	r1, [r4, #32]
 800bd4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd4c:	4643      	mov	r3, r8
 800bd4e:	463a      	mov	r2, r7
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b0      	blx	r6
 800bd54:	2800      	cmp	r0, #0
 800bd56:	dc06      	bgt.n	800bd66 <__sflush_r+0xfe>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd64:	e78e      	b.n	800bc84 <__sflush_r+0x1c>
 800bd66:	4407      	add	r7, r0
 800bd68:	eba8 0800 	sub.w	r8, r8, r0
 800bd6c:	e7e9      	b.n	800bd42 <__sflush_r+0xda>
 800bd6e:	bf00      	nop
 800bd70:	20400001 	.word	0x20400001

0800bd74 <_fflush_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	690b      	ldr	r3, [r1, #16]
 800bd78:	4605      	mov	r5, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	b913      	cbnz	r3, 800bd84 <_fflush_r+0x10>
 800bd7e:	2500      	movs	r5, #0
 800bd80:	4628      	mov	r0, r5
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
 800bd84:	b118      	cbz	r0, 800bd8e <_fflush_r+0x1a>
 800bd86:	6983      	ldr	r3, [r0, #24]
 800bd88:	b90b      	cbnz	r3, 800bd8e <_fflush_r+0x1a>
 800bd8a:	f000 f899 	bl	800bec0 <__sinit>
 800bd8e:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <_fflush_r+0x6c>)
 800bd90:	429c      	cmp	r4, r3
 800bd92:	d11b      	bne.n	800bdcc <_fflush_r+0x58>
 800bd94:	686c      	ldr	r4, [r5, #4]
 800bd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0ef      	beq.n	800bd7e <_fflush_r+0xa>
 800bd9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bda0:	07d0      	lsls	r0, r2, #31
 800bda2:	d404      	bmi.n	800bdae <_fflush_r+0x3a>
 800bda4:	0599      	lsls	r1, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_fflush_r+0x3a>
 800bda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdaa:	f000 f95e 	bl	800c06a <__retarget_lock_acquire_recursive>
 800bdae:	4628      	mov	r0, r5
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	f7ff ff59 	bl	800bc68 <__sflush_r>
 800bdb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdb8:	07da      	lsls	r2, r3, #31
 800bdba:	4605      	mov	r5, r0
 800bdbc:	d4e0      	bmi.n	800bd80 <_fflush_r+0xc>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	059b      	lsls	r3, r3, #22
 800bdc2:	d4dd      	bmi.n	800bd80 <_fflush_r+0xc>
 800bdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdc6:	f000 f951 	bl	800c06c <__retarget_lock_release_recursive>
 800bdca:	e7d9      	b.n	800bd80 <_fflush_r+0xc>
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <_fflush_r+0x70>)
 800bdce:	429c      	cmp	r4, r3
 800bdd0:	d101      	bne.n	800bdd6 <_fflush_r+0x62>
 800bdd2:	68ac      	ldr	r4, [r5, #8]
 800bdd4:	e7df      	b.n	800bd96 <_fflush_r+0x22>
 800bdd6:	4b04      	ldr	r3, [pc, #16]	; (800bde8 <_fflush_r+0x74>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	bf08      	it	eq
 800bddc:	68ec      	ldreq	r4, [r5, #12]
 800bdde:	e7da      	b.n	800bd96 <_fflush_r+0x22>
 800bde0:	080117a4 	.word	0x080117a4
 800bde4:	080117c4 	.word	0x080117c4
 800bde8:	08011784 	.word	0x08011784

0800bdec <fflush>:
 800bdec:	4601      	mov	r1, r0
 800bdee:	b920      	cbnz	r0, 800bdfa <fflush+0xe>
 800bdf0:	4b04      	ldr	r3, [pc, #16]	; (800be04 <fflush+0x18>)
 800bdf2:	4905      	ldr	r1, [pc, #20]	; (800be08 <fflush+0x1c>)
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	f000 b8f3 	b.w	800bfe0 <_fwalk_reent>
 800bdfa:	4b04      	ldr	r3, [pc, #16]	; (800be0c <fflush+0x20>)
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	f7ff bfb9 	b.w	800bd74 <_fflush_r>
 800be02:	bf00      	nop
 800be04:	080117e4 	.word	0x080117e4
 800be08:	0800bd75 	.word	0x0800bd75
 800be0c:	20000030 	.word	0x20000030

0800be10 <std>:
 800be10:	2300      	movs	r3, #0
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	e9c0 3300 	strd	r3, r3, [r0]
 800be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	6643      	str	r3, [r0, #100]	; 0x64
 800be24:	81c2      	strh	r2, [r0, #14]
 800be26:	6183      	str	r3, [r0, #24]
 800be28:	4619      	mov	r1, r3
 800be2a:	2208      	movs	r2, #8
 800be2c:	305c      	adds	r0, #92	; 0x5c
 800be2e:	f000 f967 	bl	800c100 <memset>
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <std+0x38>)
 800be34:	6263      	str	r3, [r4, #36]	; 0x24
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <std+0x3c>)
 800be38:	62a3      	str	r3, [r4, #40]	; 0x28
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x40>)
 800be3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x44>)
 800be40:	6224      	str	r4, [r4, #32]
 800be42:	6323      	str	r3, [r4, #48]	; 0x30
 800be44:	bd10      	pop	{r4, pc}
 800be46:	bf00      	nop
 800be48:	0800d4a9 	.word	0x0800d4a9
 800be4c:	0800d4cb 	.word	0x0800d4cb
 800be50:	0800d503 	.word	0x0800d503
 800be54:	0800d527 	.word	0x0800d527

0800be58 <_cleanup_r>:
 800be58:	4901      	ldr	r1, [pc, #4]	; (800be60 <_cleanup_r+0x8>)
 800be5a:	f000 b8c1 	b.w	800bfe0 <_fwalk_reent>
 800be5e:	bf00      	nop
 800be60:	0800bd75 	.word	0x0800bd75

0800be64 <__sfmoreglue>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	2268      	movs	r2, #104	; 0x68
 800be68:	1e4d      	subs	r5, r1, #1
 800be6a:	4355      	muls	r5, r2
 800be6c:	460e      	mov	r6, r1
 800be6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be72:	f000 f9b9 	bl	800c1e8 <_malloc_r>
 800be76:	4604      	mov	r4, r0
 800be78:	b140      	cbz	r0, 800be8c <__sfmoreglue+0x28>
 800be7a:	2100      	movs	r1, #0
 800be7c:	e9c0 1600 	strd	r1, r6, [r0]
 800be80:	300c      	adds	r0, #12
 800be82:	60a0      	str	r0, [r4, #8]
 800be84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be88:	f000 f93a 	bl	800c100 <memset>
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}

0800be90 <__sfp_lock_acquire>:
 800be90:	4801      	ldr	r0, [pc, #4]	; (800be98 <__sfp_lock_acquire+0x8>)
 800be92:	f000 b8ea 	b.w	800c06a <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	20000a15 	.word	0x20000a15

0800be9c <__sfp_lock_release>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__sfp_lock_release+0x8>)
 800be9e:	f000 b8e5 	b.w	800c06c <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	20000a15 	.word	0x20000a15

0800bea8 <__sinit_lock_acquire>:
 800bea8:	4801      	ldr	r0, [pc, #4]	; (800beb0 <__sinit_lock_acquire+0x8>)
 800beaa:	f000 b8de 	b.w	800c06a <__retarget_lock_acquire_recursive>
 800beae:	bf00      	nop
 800beb0:	20000a16 	.word	0x20000a16

0800beb4 <__sinit_lock_release>:
 800beb4:	4801      	ldr	r0, [pc, #4]	; (800bebc <__sinit_lock_release+0x8>)
 800beb6:	f000 b8d9 	b.w	800c06c <__retarget_lock_release_recursive>
 800beba:	bf00      	nop
 800bebc:	20000a16 	.word	0x20000a16

0800bec0 <__sinit>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	f7ff fff0 	bl	800bea8 <__sinit_lock_acquire>
 800bec8:	69a3      	ldr	r3, [r4, #24]
 800beca:	b11b      	cbz	r3, 800bed4 <__sinit+0x14>
 800becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed0:	f7ff bff0 	b.w	800beb4 <__sinit_lock_release>
 800bed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bed8:	6523      	str	r3, [r4, #80]	; 0x50
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <__sinit+0x68>)
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <__sinit+0x6c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	bf04      	itt	eq
 800bee6:	2301      	moveq	r3, #1
 800bee8:	61a3      	streq	r3, [r4, #24]
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f820 	bl	800bf30 <__sfp>
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f81c 	bl	800bf30 <__sfp>
 800bef8:	60a0      	str	r0, [r4, #8]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f818 	bl	800bf30 <__sfp>
 800bf00:	2200      	movs	r2, #0
 800bf02:	60e0      	str	r0, [r4, #12]
 800bf04:	2104      	movs	r1, #4
 800bf06:	6860      	ldr	r0, [r4, #4]
 800bf08:	f7ff ff82 	bl	800be10 <std>
 800bf0c:	68a0      	ldr	r0, [r4, #8]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	2109      	movs	r1, #9
 800bf12:	f7ff ff7d 	bl	800be10 <std>
 800bf16:	68e0      	ldr	r0, [r4, #12]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	2112      	movs	r1, #18
 800bf1c:	f7ff ff78 	bl	800be10 <std>
 800bf20:	2301      	movs	r3, #1
 800bf22:	61a3      	str	r3, [r4, #24]
 800bf24:	e7d2      	b.n	800becc <__sinit+0xc>
 800bf26:	bf00      	nop
 800bf28:	080117e4 	.word	0x080117e4
 800bf2c:	0800be59 	.word	0x0800be59

0800bf30 <__sfp>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	4607      	mov	r7, r0
 800bf34:	f7ff ffac 	bl	800be90 <__sfp_lock_acquire>
 800bf38:	4b1e      	ldr	r3, [pc, #120]	; (800bfb4 <__sfp+0x84>)
 800bf3a:	681e      	ldr	r6, [r3, #0]
 800bf3c:	69b3      	ldr	r3, [r6, #24]
 800bf3e:	b913      	cbnz	r3, 800bf46 <__sfp+0x16>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff ffbd 	bl	800bec0 <__sinit>
 800bf46:	3648      	adds	r6, #72	; 0x48
 800bf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	d503      	bpl.n	800bf58 <__sfp+0x28>
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	b30b      	cbz	r3, 800bf98 <__sfp+0x68>
 800bf54:	6836      	ldr	r6, [r6, #0]
 800bf56:	e7f7      	b.n	800bf48 <__sfp+0x18>
 800bf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf5c:	b9d5      	cbnz	r5, 800bf94 <__sfp+0x64>
 800bf5e:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <__sfp+0x88>)
 800bf60:	60e3      	str	r3, [r4, #12]
 800bf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf66:	6665      	str	r5, [r4, #100]	; 0x64
 800bf68:	f000 f87e 	bl	800c068 <__retarget_lock_init_recursive>
 800bf6c:	f7ff ff96 	bl	800be9c <__sfp_lock_release>
 800bf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf78:	6025      	str	r5, [r4, #0]
 800bf7a:	61a5      	str	r5, [r4, #24]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf84:	f000 f8bc 	bl	800c100 <memset>
 800bf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf90:	4620      	mov	r0, r4
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	3468      	adds	r4, #104	; 0x68
 800bf96:	e7d9      	b.n	800bf4c <__sfp+0x1c>
 800bf98:	2104      	movs	r1, #4
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7ff ff62 	bl	800be64 <__sfmoreglue>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	6030      	str	r0, [r6, #0]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1d5      	bne.n	800bf54 <__sfp+0x24>
 800bfa8:	f7ff ff78 	bl	800be9c <__sfp_lock_release>
 800bfac:	230c      	movs	r3, #12
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	e7ee      	b.n	800bf90 <__sfp+0x60>
 800bfb2:	bf00      	nop
 800bfb4:	080117e4 	.word	0x080117e4
 800bfb8:	ffff0001 	.word	0xffff0001

0800bfbc <fiprintf>:
 800bfbc:	b40e      	push	{r1, r2, r3}
 800bfbe:	b503      	push	{r0, r1, lr}
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	ab03      	add	r3, sp, #12
 800bfc4:	4805      	ldr	r0, [pc, #20]	; (800bfdc <fiprintf+0x20>)
 800bfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	f000 f9a9 	bl	800c324 <_vfiprintf_r>
 800bfd2:	b002      	add	sp, #8
 800bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd8:	b003      	add	sp, #12
 800bfda:	4770      	bx	lr
 800bfdc:	20000030 	.word	0x20000030

0800bfe0 <_fwalk_reent>:
 800bfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	4688      	mov	r8, r1
 800bfe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfec:	2700      	movs	r7, #0
 800bfee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bff2:	f1b9 0901 	subs.w	r9, r9, #1
 800bff6:	d505      	bpl.n	800c004 <_fwalk_reent+0x24>
 800bff8:	6824      	ldr	r4, [r4, #0]
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	d1f7      	bne.n	800bfee <_fwalk_reent+0xe>
 800bffe:	4638      	mov	r0, r7
 800c000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d907      	bls.n	800c01a <_fwalk_reent+0x3a>
 800c00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c00e:	3301      	adds	r3, #1
 800c010:	d003      	beq.n	800c01a <_fwalk_reent+0x3a>
 800c012:	4629      	mov	r1, r5
 800c014:	4630      	mov	r0, r6
 800c016:	47c0      	blx	r8
 800c018:	4307      	orrs	r7, r0
 800c01a:	3568      	adds	r5, #104	; 0x68
 800c01c:	e7e9      	b.n	800bff2 <_fwalk_reent+0x12>
	...

0800c020 <__libc_init_array>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	4d0d      	ldr	r5, [pc, #52]	; (800c058 <__libc_init_array+0x38>)
 800c024:	4c0d      	ldr	r4, [pc, #52]	; (800c05c <__libc_init_array+0x3c>)
 800c026:	1b64      	subs	r4, r4, r5
 800c028:	10a4      	asrs	r4, r4, #2
 800c02a:	2600      	movs	r6, #0
 800c02c:	42a6      	cmp	r6, r4
 800c02e:	d109      	bne.n	800c044 <__libc_init_array+0x24>
 800c030:	4d0b      	ldr	r5, [pc, #44]	; (800c060 <__libc_init_array+0x40>)
 800c032:	4c0c      	ldr	r4, [pc, #48]	; (800c064 <__libc_init_array+0x44>)
 800c034:	f004 fc3c 	bl	80108b0 <_init>
 800c038:	1b64      	subs	r4, r4, r5
 800c03a:	10a4      	asrs	r4, r4, #2
 800c03c:	2600      	movs	r6, #0
 800c03e:	42a6      	cmp	r6, r4
 800c040:	d105      	bne.n	800c04e <__libc_init_array+0x2e>
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	f855 3b04 	ldr.w	r3, [r5], #4
 800c048:	4798      	blx	r3
 800c04a:	3601      	adds	r6, #1
 800c04c:	e7ee      	b.n	800c02c <__libc_init_array+0xc>
 800c04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c052:	4798      	blx	r3
 800c054:	3601      	adds	r6, #1
 800c056:	e7f2      	b.n	800c03e <__libc_init_array+0x1e>
 800c058:	08011c8c 	.word	0x08011c8c
 800c05c:	08011c8c 	.word	0x08011c8c
 800c060:	08011c8c 	.word	0x08011c8c
 800c064:	08011c94 	.word	0x08011c94

0800c068 <__retarget_lock_init_recursive>:
 800c068:	4770      	bx	lr

0800c06a <__retarget_lock_acquire_recursive>:
 800c06a:	4770      	bx	lr

0800c06c <__retarget_lock_release_recursive>:
 800c06c:	4770      	bx	lr
	...

0800c070 <malloc>:
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <malloc+0xc>)
 800c072:	4601      	mov	r1, r0
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	f000 b8b7 	b.w	800c1e8 <_malloc_r>
 800c07a:	bf00      	nop
 800c07c:	20000030 	.word	0x20000030

0800c080 <free>:
 800c080:	4b02      	ldr	r3, [pc, #8]	; (800c08c <free+0xc>)
 800c082:	4601      	mov	r1, r0
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f000 b843 	b.w	800c110 <_free_r>
 800c08a:	bf00      	nop
 800c08c:	20000030 	.word	0x20000030

0800c090 <memcmp>:
 800c090:	b510      	push	{r4, lr}
 800c092:	3901      	subs	r1, #1
 800c094:	4402      	add	r2, r0
 800c096:	4290      	cmp	r0, r2
 800c098:	d101      	bne.n	800c09e <memcmp+0xe>
 800c09a:	2000      	movs	r0, #0
 800c09c:	e005      	b.n	800c0aa <memcmp+0x1a>
 800c09e:	7803      	ldrb	r3, [r0, #0]
 800c0a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	d001      	beq.n	800c0ac <memcmp+0x1c>
 800c0a8:	1b18      	subs	r0, r3, r4
 800c0aa:	bd10      	pop	{r4, pc}
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	e7f2      	b.n	800c096 <memcmp+0x6>

0800c0b0 <memcpy>:
 800c0b0:	440a      	add	r2, r1
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c0b8:	d100      	bne.n	800c0bc <memcpy+0xc>
 800c0ba:	4770      	bx	lr
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c6:	4291      	cmp	r1, r2
 800c0c8:	d1f9      	bne.n	800c0be <memcpy+0xe>
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <memmove>:
 800c0cc:	4288      	cmp	r0, r1
 800c0ce:	b510      	push	{r4, lr}
 800c0d0:	eb01 0402 	add.w	r4, r1, r2
 800c0d4:	d902      	bls.n	800c0dc <memmove+0x10>
 800c0d6:	4284      	cmp	r4, r0
 800c0d8:	4623      	mov	r3, r4
 800c0da:	d807      	bhi.n	800c0ec <memmove+0x20>
 800c0dc:	1e43      	subs	r3, r0, #1
 800c0de:	42a1      	cmp	r1, r4
 800c0e0:	d008      	beq.n	800c0f4 <memmove+0x28>
 800c0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0ea:	e7f8      	b.n	800c0de <memmove+0x12>
 800c0ec:	4402      	add	r2, r0
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	428a      	cmp	r2, r1
 800c0f2:	d100      	bne.n	800c0f6 <memmove+0x2a>
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0fe:	e7f7      	b.n	800c0f0 <memmove+0x24>

0800c100 <memset>:
 800c100:	4402      	add	r2, r0
 800c102:	4603      	mov	r3, r0
 800c104:	4293      	cmp	r3, r2
 800c106:	d100      	bne.n	800c10a <memset+0xa>
 800c108:	4770      	bx	lr
 800c10a:	f803 1b01 	strb.w	r1, [r3], #1
 800c10e:	e7f9      	b.n	800c104 <memset+0x4>

0800c110 <_free_r>:
 800c110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c112:	2900      	cmp	r1, #0
 800c114:	d044      	beq.n	800c1a0 <_free_r+0x90>
 800c116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c11a:	9001      	str	r0, [sp, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f1a1 0404 	sub.w	r4, r1, #4
 800c122:	bfb8      	it	lt
 800c124:	18e4      	addlt	r4, r4, r3
 800c126:	f003 fcaf 	bl	800fa88 <__malloc_lock>
 800c12a:	4a1e      	ldr	r2, [pc, #120]	; (800c1a4 <_free_r+0x94>)
 800c12c:	9801      	ldr	r0, [sp, #4]
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	b933      	cbnz	r3, 800c140 <_free_r+0x30>
 800c132:	6063      	str	r3, [r4, #4]
 800c134:	6014      	str	r4, [r2, #0]
 800c136:	b003      	add	sp, #12
 800c138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c13c:	f003 bcaa 	b.w	800fa94 <__malloc_unlock>
 800c140:	42a3      	cmp	r3, r4
 800c142:	d908      	bls.n	800c156 <_free_r+0x46>
 800c144:	6825      	ldr	r5, [r4, #0]
 800c146:	1961      	adds	r1, r4, r5
 800c148:	428b      	cmp	r3, r1
 800c14a:	bf01      	itttt	eq
 800c14c:	6819      	ldreq	r1, [r3, #0]
 800c14e:	685b      	ldreq	r3, [r3, #4]
 800c150:	1949      	addeq	r1, r1, r5
 800c152:	6021      	streq	r1, [r4, #0]
 800c154:	e7ed      	b.n	800c132 <_free_r+0x22>
 800c156:	461a      	mov	r2, r3
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	b10b      	cbz	r3, 800c160 <_free_r+0x50>
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	d9fa      	bls.n	800c156 <_free_r+0x46>
 800c160:	6811      	ldr	r1, [r2, #0]
 800c162:	1855      	adds	r5, r2, r1
 800c164:	42a5      	cmp	r5, r4
 800c166:	d10b      	bne.n	800c180 <_free_r+0x70>
 800c168:	6824      	ldr	r4, [r4, #0]
 800c16a:	4421      	add	r1, r4
 800c16c:	1854      	adds	r4, r2, r1
 800c16e:	42a3      	cmp	r3, r4
 800c170:	6011      	str	r1, [r2, #0]
 800c172:	d1e0      	bne.n	800c136 <_free_r+0x26>
 800c174:	681c      	ldr	r4, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	6053      	str	r3, [r2, #4]
 800c17a:	4421      	add	r1, r4
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	e7da      	b.n	800c136 <_free_r+0x26>
 800c180:	d902      	bls.n	800c188 <_free_r+0x78>
 800c182:	230c      	movs	r3, #12
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	e7d6      	b.n	800c136 <_free_r+0x26>
 800c188:	6825      	ldr	r5, [r4, #0]
 800c18a:	1961      	adds	r1, r4, r5
 800c18c:	428b      	cmp	r3, r1
 800c18e:	bf04      	itt	eq
 800c190:	6819      	ldreq	r1, [r3, #0]
 800c192:	685b      	ldreq	r3, [r3, #4]
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	bf04      	itt	eq
 800c198:	1949      	addeq	r1, r1, r5
 800c19a:	6021      	streq	r1, [r4, #0]
 800c19c:	6054      	str	r4, [r2, #4]
 800c19e:	e7ca      	b.n	800c136 <_free_r+0x26>
 800c1a0:	b003      	add	sp, #12
 800c1a2:	bd30      	pop	{r4, r5, pc}
 800c1a4:	20000a18 	.word	0x20000a18

0800c1a8 <sbrk_aligned>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	4e0e      	ldr	r6, [pc, #56]	; (800c1e4 <sbrk_aligned+0x3c>)
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	6831      	ldr	r1, [r6, #0]
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	b911      	cbnz	r1, 800c1ba <sbrk_aligned+0x12>
 800c1b4:	f001 f904 	bl	800d3c0 <_sbrk_r>
 800c1b8:	6030      	str	r0, [r6, #0]
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f001 f8ff 	bl	800d3c0 <_sbrk_r>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	d00a      	beq.n	800c1dc <sbrk_aligned+0x34>
 800c1c6:	1cc4      	adds	r4, r0, #3
 800c1c8:	f024 0403 	bic.w	r4, r4, #3
 800c1cc:	42a0      	cmp	r0, r4
 800c1ce:	d007      	beq.n	800c1e0 <sbrk_aligned+0x38>
 800c1d0:	1a21      	subs	r1, r4, r0
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f001 f8f4 	bl	800d3c0 <_sbrk_r>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d101      	bne.n	800c1e0 <sbrk_aligned+0x38>
 800c1dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	bd70      	pop	{r4, r5, r6, pc}
 800c1e4:	20000a1c 	.word	0x20000a1c

0800c1e8 <_malloc_r>:
 800c1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ec:	1ccd      	adds	r5, r1, #3
 800c1ee:	f025 0503 	bic.w	r5, r5, #3
 800c1f2:	3508      	adds	r5, #8
 800c1f4:	2d0c      	cmp	r5, #12
 800c1f6:	bf38      	it	cc
 800c1f8:	250c      	movcc	r5, #12
 800c1fa:	2d00      	cmp	r5, #0
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	db01      	blt.n	800c204 <_malloc_r+0x1c>
 800c200:	42a9      	cmp	r1, r5
 800c202:	d905      	bls.n	800c210 <_malloc_r+0x28>
 800c204:	230c      	movs	r3, #12
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	2600      	movs	r6, #0
 800c20a:	4630      	mov	r0, r6
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	4e2e      	ldr	r6, [pc, #184]	; (800c2cc <_malloc_r+0xe4>)
 800c212:	f003 fc39 	bl	800fa88 <__malloc_lock>
 800c216:	6833      	ldr	r3, [r6, #0]
 800c218:	461c      	mov	r4, r3
 800c21a:	bb34      	cbnz	r4, 800c26a <_malloc_r+0x82>
 800c21c:	4629      	mov	r1, r5
 800c21e:	4638      	mov	r0, r7
 800c220:	f7ff ffc2 	bl	800c1a8 <sbrk_aligned>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	4604      	mov	r4, r0
 800c228:	d14d      	bne.n	800c2c6 <_malloc_r+0xde>
 800c22a:	6834      	ldr	r4, [r6, #0]
 800c22c:	4626      	mov	r6, r4
 800c22e:	2e00      	cmp	r6, #0
 800c230:	d140      	bne.n	800c2b4 <_malloc_r+0xcc>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	4631      	mov	r1, r6
 800c236:	4638      	mov	r0, r7
 800c238:	eb04 0803 	add.w	r8, r4, r3
 800c23c:	f001 f8c0 	bl	800d3c0 <_sbrk_r>
 800c240:	4580      	cmp	r8, r0
 800c242:	d13a      	bne.n	800c2ba <_malloc_r+0xd2>
 800c244:	6821      	ldr	r1, [r4, #0]
 800c246:	3503      	adds	r5, #3
 800c248:	1a6d      	subs	r5, r5, r1
 800c24a:	f025 0503 	bic.w	r5, r5, #3
 800c24e:	3508      	adds	r5, #8
 800c250:	2d0c      	cmp	r5, #12
 800c252:	bf38      	it	cc
 800c254:	250c      	movcc	r5, #12
 800c256:	4629      	mov	r1, r5
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff ffa5 	bl	800c1a8 <sbrk_aligned>
 800c25e:	3001      	adds	r0, #1
 800c260:	d02b      	beq.n	800c2ba <_malloc_r+0xd2>
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	442b      	add	r3, r5
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	e00e      	b.n	800c288 <_malloc_r+0xa0>
 800c26a:	6822      	ldr	r2, [r4, #0]
 800c26c:	1b52      	subs	r2, r2, r5
 800c26e:	d41e      	bmi.n	800c2ae <_malloc_r+0xc6>
 800c270:	2a0b      	cmp	r2, #11
 800c272:	d916      	bls.n	800c2a2 <_malloc_r+0xba>
 800c274:	1961      	adds	r1, r4, r5
 800c276:	42a3      	cmp	r3, r4
 800c278:	6025      	str	r5, [r4, #0]
 800c27a:	bf18      	it	ne
 800c27c:	6059      	strne	r1, [r3, #4]
 800c27e:	6863      	ldr	r3, [r4, #4]
 800c280:	bf08      	it	eq
 800c282:	6031      	streq	r1, [r6, #0]
 800c284:	5162      	str	r2, [r4, r5]
 800c286:	604b      	str	r3, [r1, #4]
 800c288:	4638      	mov	r0, r7
 800c28a:	f104 060b 	add.w	r6, r4, #11
 800c28e:	f003 fc01 	bl	800fa94 <__malloc_unlock>
 800c292:	f026 0607 	bic.w	r6, r6, #7
 800c296:	1d23      	adds	r3, r4, #4
 800c298:	1af2      	subs	r2, r6, r3
 800c29a:	d0b6      	beq.n	800c20a <_malloc_r+0x22>
 800c29c:	1b9b      	subs	r3, r3, r6
 800c29e:	50a3      	str	r3, [r4, r2]
 800c2a0:	e7b3      	b.n	800c20a <_malloc_r+0x22>
 800c2a2:	6862      	ldr	r2, [r4, #4]
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	bf0c      	ite	eq
 800c2a8:	6032      	streq	r2, [r6, #0]
 800c2aa:	605a      	strne	r2, [r3, #4]
 800c2ac:	e7ec      	b.n	800c288 <_malloc_r+0xa0>
 800c2ae:	4623      	mov	r3, r4
 800c2b0:	6864      	ldr	r4, [r4, #4]
 800c2b2:	e7b2      	b.n	800c21a <_malloc_r+0x32>
 800c2b4:	4634      	mov	r4, r6
 800c2b6:	6876      	ldr	r6, [r6, #4]
 800c2b8:	e7b9      	b.n	800c22e <_malloc_r+0x46>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	603b      	str	r3, [r7, #0]
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f003 fbe8 	bl	800fa94 <__malloc_unlock>
 800c2c4:	e7a1      	b.n	800c20a <_malloc_r+0x22>
 800c2c6:	6025      	str	r5, [r4, #0]
 800c2c8:	e7de      	b.n	800c288 <_malloc_r+0xa0>
 800c2ca:	bf00      	nop
 800c2cc:	20000a18 	.word	0x20000a18

0800c2d0 <__sfputc_r>:
 800c2d0:	6893      	ldr	r3, [r2, #8]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	b410      	push	{r4}
 800c2d8:	6093      	str	r3, [r2, #8]
 800c2da:	da08      	bge.n	800c2ee <__sfputc_r+0x1e>
 800c2dc:	6994      	ldr	r4, [r2, #24]
 800c2de:	42a3      	cmp	r3, r4
 800c2e0:	db01      	blt.n	800c2e6 <__sfputc_r+0x16>
 800c2e2:	290a      	cmp	r1, #10
 800c2e4:	d103      	bne.n	800c2ee <__sfputc_r+0x1e>
 800c2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ea:	f002 b853 	b.w	800e394 <__swbuf_r>
 800c2ee:	6813      	ldr	r3, [r2, #0]
 800c2f0:	1c58      	adds	r0, r3, #1
 800c2f2:	6010      	str	r0, [r2, #0]
 800c2f4:	7019      	strb	r1, [r3, #0]
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <__sfputs_r>:
 800c2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c300:	4606      	mov	r6, r0
 800c302:	460f      	mov	r7, r1
 800c304:	4614      	mov	r4, r2
 800c306:	18d5      	adds	r5, r2, r3
 800c308:	42ac      	cmp	r4, r5
 800c30a:	d101      	bne.n	800c310 <__sfputs_r+0x12>
 800c30c:	2000      	movs	r0, #0
 800c30e:	e007      	b.n	800c320 <__sfputs_r+0x22>
 800c310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c314:	463a      	mov	r2, r7
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ffda 	bl	800c2d0 <__sfputc_r>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d1f3      	bne.n	800c308 <__sfputs_r+0xa>
 800c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c324 <_vfiprintf_r>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	460d      	mov	r5, r1
 800c32a:	b09d      	sub	sp, #116	; 0x74
 800c32c:	4614      	mov	r4, r2
 800c32e:	4698      	mov	r8, r3
 800c330:	4606      	mov	r6, r0
 800c332:	b118      	cbz	r0, 800c33c <_vfiprintf_r+0x18>
 800c334:	6983      	ldr	r3, [r0, #24]
 800c336:	b90b      	cbnz	r3, 800c33c <_vfiprintf_r+0x18>
 800c338:	f7ff fdc2 	bl	800bec0 <__sinit>
 800c33c:	4b89      	ldr	r3, [pc, #548]	; (800c564 <_vfiprintf_r+0x240>)
 800c33e:	429d      	cmp	r5, r3
 800c340:	d11b      	bne.n	800c37a <_vfiprintf_r+0x56>
 800c342:	6875      	ldr	r5, [r6, #4]
 800c344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c346:	07d9      	lsls	r1, r3, #31
 800c348:	d405      	bmi.n	800c356 <_vfiprintf_r+0x32>
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	059a      	lsls	r2, r3, #22
 800c34e:	d402      	bmi.n	800c356 <_vfiprintf_r+0x32>
 800c350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c352:	f7ff fe8a 	bl	800c06a <__retarget_lock_acquire_recursive>
 800c356:	89ab      	ldrh	r3, [r5, #12]
 800c358:	071b      	lsls	r3, r3, #28
 800c35a:	d501      	bpl.n	800c360 <_vfiprintf_r+0x3c>
 800c35c:	692b      	ldr	r3, [r5, #16]
 800c35e:	b9eb      	cbnz	r3, 800c39c <_vfiprintf_r+0x78>
 800c360:	4629      	mov	r1, r5
 800c362:	4630      	mov	r0, r6
 800c364:	f002 f87a 	bl	800e45c <__swsetup_r>
 800c368:	b1c0      	cbz	r0, 800c39c <_vfiprintf_r+0x78>
 800c36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c36c:	07dc      	lsls	r4, r3, #31
 800c36e:	d50e      	bpl.n	800c38e <_vfiprintf_r+0x6a>
 800c370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c374:	b01d      	add	sp, #116	; 0x74
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	4b7b      	ldr	r3, [pc, #492]	; (800c568 <_vfiprintf_r+0x244>)
 800c37c:	429d      	cmp	r5, r3
 800c37e:	d101      	bne.n	800c384 <_vfiprintf_r+0x60>
 800c380:	68b5      	ldr	r5, [r6, #8]
 800c382:	e7df      	b.n	800c344 <_vfiprintf_r+0x20>
 800c384:	4b79      	ldr	r3, [pc, #484]	; (800c56c <_vfiprintf_r+0x248>)
 800c386:	429d      	cmp	r5, r3
 800c388:	bf08      	it	eq
 800c38a:	68f5      	ldreq	r5, [r6, #12]
 800c38c:	e7da      	b.n	800c344 <_vfiprintf_r+0x20>
 800c38e:	89ab      	ldrh	r3, [r5, #12]
 800c390:	0598      	lsls	r0, r3, #22
 800c392:	d4ed      	bmi.n	800c370 <_vfiprintf_r+0x4c>
 800c394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c396:	f7ff fe69 	bl	800c06c <__retarget_lock_release_recursive>
 800c39a:	e7e9      	b.n	800c370 <_vfiprintf_r+0x4c>
 800c39c:	2300      	movs	r3, #0
 800c39e:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a0:	2320      	movs	r3, #32
 800c3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3aa:	2330      	movs	r3, #48	; 0x30
 800c3ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c570 <_vfiprintf_r+0x24c>
 800c3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b4:	f04f 0901 	mov.w	r9, #1
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	469a      	mov	sl, r3
 800c3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c0:	b10a      	cbz	r2, 800c3c6 <_vfiprintf_r+0xa2>
 800c3c2:	2a25      	cmp	r2, #37	; 0x25
 800c3c4:	d1f9      	bne.n	800c3ba <_vfiprintf_r+0x96>
 800c3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ca:	d00b      	beq.n	800c3e4 <_vfiprintf_r+0xc0>
 800c3cc:	465b      	mov	r3, fp
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7ff ff93 	bl	800c2fe <__sfputs_r>
 800c3d8:	3001      	adds	r0, #1
 800c3da:	f000 80aa 	beq.w	800c532 <_vfiprintf_r+0x20e>
 800c3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e0:	445a      	add	r2, fp
 800c3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 80a2 	beq.w	800c532 <_vfiprintf_r+0x20e>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f8:	f10a 0a01 	add.w	sl, sl, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c404:	931a      	str	r3, [sp, #104]	; 0x68
 800c406:	4654      	mov	r4, sl
 800c408:	2205      	movs	r2, #5
 800c40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40e:	4858      	ldr	r0, [pc, #352]	; (800c570 <_vfiprintf_r+0x24c>)
 800c410:	f7f3 ff06 	bl	8000220 <memchr>
 800c414:	9a04      	ldr	r2, [sp, #16]
 800c416:	b9d8      	cbnz	r0, 800c450 <_vfiprintf_r+0x12c>
 800c418:	06d1      	lsls	r1, r2, #27
 800c41a:	bf44      	itt	mi
 800c41c:	2320      	movmi	r3, #32
 800c41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c422:	0713      	lsls	r3, r2, #28
 800c424:	bf44      	itt	mi
 800c426:	232b      	movmi	r3, #43	; 0x2b
 800c428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c42c:	f89a 3000 	ldrb.w	r3, [sl]
 800c430:	2b2a      	cmp	r3, #42	; 0x2a
 800c432:	d015      	beq.n	800c460 <_vfiprintf_r+0x13c>
 800c434:	9a07      	ldr	r2, [sp, #28]
 800c436:	4654      	mov	r4, sl
 800c438:	2000      	movs	r0, #0
 800c43a:	f04f 0c0a 	mov.w	ip, #10
 800c43e:	4621      	mov	r1, r4
 800c440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c444:	3b30      	subs	r3, #48	; 0x30
 800c446:	2b09      	cmp	r3, #9
 800c448:	d94e      	bls.n	800c4e8 <_vfiprintf_r+0x1c4>
 800c44a:	b1b0      	cbz	r0, 800c47a <_vfiprintf_r+0x156>
 800c44c:	9207      	str	r2, [sp, #28]
 800c44e:	e014      	b.n	800c47a <_vfiprintf_r+0x156>
 800c450:	eba0 0308 	sub.w	r3, r0, r8
 800c454:	fa09 f303 	lsl.w	r3, r9, r3
 800c458:	4313      	orrs	r3, r2
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	46a2      	mov	sl, r4
 800c45e:	e7d2      	b.n	800c406 <_vfiprintf_r+0xe2>
 800c460:	9b03      	ldr	r3, [sp, #12]
 800c462:	1d19      	adds	r1, r3, #4
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	9103      	str	r1, [sp, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	bfbb      	ittet	lt
 800c46c:	425b      	neglt	r3, r3
 800c46e:	f042 0202 	orrlt.w	r2, r2, #2
 800c472:	9307      	strge	r3, [sp, #28]
 800c474:	9307      	strlt	r3, [sp, #28]
 800c476:	bfb8      	it	lt
 800c478:	9204      	strlt	r2, [sp, #16]
 800c47a:	7823      	ldrb	r3, [r4, #0]
 800c47c:	2b2e      	cmp	r3, #46	; 0x2e
 800c47e:	d10c      	bne.n	800c49a <_vfiprintf_r+0x176>
 800c480:	7863      	ldrb	r3, [r4, #1]
 800c482:	2b2a      	cmp	r3, #42	; 0x2a
 800c484:	d135      	bne.n	800c4f2 <_vfiprintf_r+0x1ce>
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	1d1a      	adds	r2, r3, #4
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	9203      	str	r2, [sp, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bfb8      	it	lt
 800c492:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c496:	3402      	adds	r4, #2
 800c498:	9305      	str	r3, [sp, #20]
 800c49a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c580 <_vfiprintf_r+0x25c>
 800c49e:	7821      	ldrb	r1, [r4, #0]
 800c4a0:	2203      	movs	r2, #3
 800c4a2:	4650      	mov	r0, sl
 800c4a4:	f7f3 febc 	bl	8000220 <memchr>
 800c4a8:	b140      	cbz	r0, 800c4bc <_vfiprintf_r+0x198>
 800c4aa:	2340      	movs	r3, #64	; 0x40
 800c4ac:	eba0 000a 	sub.w	r0, r0, sl
 800c4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800c4b4:	9b04      	ldr	r3, [sp, #16]
 800c4b6:	4303      	orrs	r3, r0
 800c4b8:	3401      	adds	r4, #1
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c0:	482c      	ldr	r0, [pc, #176]	; (800c574 <_vfiprintf_r+0x250>)
 800c4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4c6:	2206      	movs	r2, #6
 800c4c8:	f7f3 feaa 	bl	8000220 <memchr>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d03f      	beq.n	800c550 <_vfiprintf_r+0x22c>
 800c4d0:	4b29      	ldr	r3, [pc, #164]	; (800c578 <_vfiprintf_r+0x254>)
 800c4d2:	bb1b      	cbnz	r3, 800c51c <_vfiprintf_r+0x1f8>
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	3307      	adds	r3, #7
 800c4d8:	f023 0307 	bic.w	r3, r3, #7
 800c4dc:	3308      	adds	r3, #8
 800c4de:	9303      	str	r3, [sp, #12]
 800c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e2:	443b      	add	r3, r7
 800c4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e6:	e767      	b.n	800c3b8 <_vfiprintf_r+0x94>
 800c4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	2001      	movs	r0, #1
 800c4f0:	e7a5      	b.n	800c43e <_vfiprintf_r+0x11a>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	3401      	adds	r4, #1
 800c4f6:	9305      	str	r3, [sp, #20]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	f04f 0c0a 	mov.w	ip, #10
 800c4fe:	4620      	mov	r0, r4
 800c500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c504:	3a30      	subs	r2, #48	; 0x30
 800c506:	2a09      	cmp	r2, #9
 800c508:	d903      	bls.n	800c512 <_vfiprintf_r+0x1ee>
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0c5      	beq.n	800c49a <_vfiprintf_r+0x176>
 800c50e:	9105      	str	r1, [sp, #20]
 800c510:	e7c3      	b.n	800c49a <_vfiprintf_r+0x176>
 800c512:	fb0c 2101 	mla	r1, ip, r1, r2
 800c516:	4604      	mov	r4, r0
 800c518:	2301      	movs	r3, #1
 800c51a:	e7f0      	b.n	800c4fe <_vfiprintf_r+0x1da>
 800c51c:	ab03      	add	r3, sp, #12
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	462a      	mov	r2, r5
 800c522:	4b16      	ldr	r3, [pc, #88]	; (800c57c <_vfiprintf_r+0x258>)
 800c524:	a904      	add	r1, sp, #16
 800c526:	4630      	mov	r0, r6
 800c528:	f000 f8cc 	bl	800c6c4 <_printf_float>
 800c52c:	4607      	mov	r7, r0
 800c52e:	1c78      	adds	r0, r7, #1
 800c530:	d1d6      	bne.n	800c4e0 <_vfiprintf_r+0x1bc>
 800c532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c534:	07d9      	lsls	r1, r3, #31
 800c536:	d405      	bmi.n	800c544 <_vfiprintf_r+0x220>
 800c538:	89ab      	ldrh	r3, [r5, #12]
 800c53a:	059a      	lsls	r2, r3, #22
 800c53c:	d402      	bmi.n	800c544 <_vfiprintf_r+0x220>
 800c53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c540:	f7ff fd94 	bl	800c06c <__retarget_lock_release_recursive>
 800c544:	89ab      	ldrh	r3, [r5, #12]
 800c546:	065b      	lsls	r3, r3, #25
 800c548:	f53f af12 	bmi.w	800c370 <_vfiprintf_r+0x4c>
 800c54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54e:	e711      	b.n	800c374 <_vfiprintf_r+0x50>
 800c550:	ab03      	add	r3, sp, #12
 800c552:	9300      	str	r3, [sp, #0]
 800c554:	462a      	mov	r2, r5
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <_vfiprintf_r+0x258>)
 800c558:	a904      	add	r1, sp, #16
 800c55a:	4630      	mov	r0, r6
 800c55c:	f000 fb56 	bl	800cc0c <_printf_i>
 800c560:	e7e4      	b.n	800c52c <_vfiprintf_r+0x208>
 800c562:	bf00      	nop
 800c564:	080117a4 	.word	0x080117a4
 800c568:	080117c4 	.word	0x080117c4
 800c56c:	08011784 	.word	0x08011784
 800c570:	080117e8 	.word	0x080117e8
 800c574:	080117f2 	.word	0x080117f2
 800c578:	0800c6c5 	.word	0x0800c6c5
 800c57c:	0800c2ff 	.word	0x0800c2ff
 800c580:	080117ee 	.word	0x080117ee

0800c584 <__cvt>:
 800c584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	ec55 4b10 	vmov	r4, r5, d0
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	460e      	mov	r6, r1
 800c590:	4619      	mov	r1, r3
 800c592:	462b      	mov	r3, r5
 800c594:	bfbb      	ittet	lt
 800c596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c59a:	461d      	movlt	r5, r3
 800c59c:	2300      	movge	r3, #0
 800c59e:	232d      	movlt	r3, #45	; 0x2d
 800c5a0:	700b      	strb	r3, [r1, #0]
 800c5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c5a8:	4691      	mov	r9, r2
 800c5aa:	f023 0820 	bic.w	r8, r3, #32
 800c5ae:	bfbc      	itt	lt
 800c5b0:	4622      	movlt	r2, r4
 800c5b2:	4614      	movlt	r4, r2
 800c5b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5b8:	d005      	beq.n	800c5c6 <__cvt+0x42>
 800c5ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c5be:	d100      	bne.n	800c5c2 <__cvt+0x3e>
 800c5c0:	3601      	adds	r6, #1
 800c5c2:	2102      	movs	r1, #2
 800c5c4:	e000      	b.n	800c5c8 <__cvt+0x44>
 800c5c6:	2103      	movs	r1, #3
 800c5c8:	ab03      	add	r3, sp, #12
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	ab02      	add	r3, sp, #8
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	ec45 4b10 	vmov	d0, r4, r5
 800c5d4:	4653      	mov	r3, sl
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	f002 f86a 	bl	800e6b0 <_dtoa_r>
 800c5dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	d102      	bne.n	800c5ea <__cvt+0x66>
 800c5e4:	f019 0f01 	tst.w	r9, #1
 800c5e8:	d022      	beq.n	800c630 <__cvt+0xac>
 800c5ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5ee:	eb07 0906 	add.w	r9, r7, r6
 800c5f2:	d110      	bne.n	800c616 <__cvt+0x92>
 800c5f4:	783b      	ldrb	r3, [r7, #0]
 800c5f6:	2b30      	cmp	r3, #48	; 0x30
 800c5f8:	d10a      	bne.n	800c610 <__cvt+0x8c>
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4620      	mov	r0, r4
 800c600:	4629      	mov	r1, r5
 800c602:	f7f4 fa93 	bl	8000b2c <__aeabi_dcmpeq>
 800c606:	b918      	cbnz	r0, 800c610 <__cvt+0x8c>
 800c608:	f1c6 0601 	rsb	r6, r6, #1
 800c60c:	f8ca 6000 	str.w	r6, [sl]
 800c610:	f8da 3000 	ldr.w	r3, [sl]
 800c614:	4499      	add	r9, r3
 800c616:	2200      	movs	r2, #0
 800c618:	2300      	movs	r3, #0
 800c61a:	4620      	mov	r0, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	f7f4 fa85 	bl	8000b2c <__aeabi_dcmpeq>
 800c622:	b108      	cbz	r0, 800c628 <__cvt+0xa4>
 800c624:	f8cd 900c 	str.w	r9, [sp, #12]
 800c628:	2230      	movs	r2, #48	; 0x30
 800c62a:	9b03      	ldr	r3, [sp, #12]
 800c62c:	454b      	cmp	r3, r9
 800c62e:	d307      	bcc.n	800c640 <__cvt+0xbc>
 800c630:	9b03      	ldr	r3, [sp, #12]
 800c632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c634:	1bdb      	subs	r3, r3, r7
 800c636:	4638      	mov	r0, r7
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	b004      	add	sp, #16
 800c63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c640:	1c59      	adds	r1, r3, #1
 800c642:	9103      	str	r1, [sp, #12]
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	e7f0      	b.n	800c62a <__cvt+0xa6>

0800c648 <__exponent>:
 800c648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c64a:	4603      	mov	r3, r0
 800c64c:	2900      	cmp	r1, #0
 800c64e:	bfb8      	it	lt
 800c650:	4249      	neglt	r1, r1
 800c652:	f803 2b02 	strb.w	r2, [r3], #2
 800c656:	bfb4      	ite	lt
 800c658:	222d      	movlt	r2, #45	; 0x2d
 800c65a:	222b      	movge	r2, #43	; 0x2b
 800c65c:	2909      	cmp	r1, #9
 800c65e:	7042      	strb	r2, [r0, #1]
 800c660:	dd2a      	ble.n	800c6b8 <__exponent+0x70>
 800c662:	f10d 0407 	add.w	r4, sp, #7
 800c666:	46a4      	mov	ip, r4
 800c668:	270a      	movs	r7, #10
 800c66a:	46a6      	mov	lr, r4
 800c66c:	460a      	mov	r2, r1
 800c66e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c672:	fb07 1516 	mls	r5, r7, r6, r1
 800c676:	3530      	adds	r5, #48	; 0x30
 800c678:	2a63      	cmp	r2, #99	; 0x63
 800c67a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c67e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c682:	4631      	mov	r1, r6
 800c684:	dcf1      	bgt.n	800c66a <__exponent+0x22>
 800c686:	3130      	adds	r1, #48	; 0x30
 800c688:	f1ae 0502 	sub.w	r5, lr, #2
 800c68c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c690:	1c44      	adds	r4, r0, #1
 800c692:	4629      	mov	r1, r5
 800c694:	4561      	cmp	r1, ip
 800c696:	d30a      	bcc.n	800c6ae <__exponent+0x66>
 800c698:	f10d 0209 	add.w	r2, sp, #9
 800c69c:	eba2 020e 	sub.w	r2, r2, lr
 800c6a0:	4565      	cmp	r5, ip
 800c6a2:	bf88      	it	hi
 800c6a4:	2200      	movhi	r2, #0
 800c6a6:	4413      	add	r3, r2
 800c6a8:	1a18      	subs	r0, r3, r0
 800c6aa:	b003      	add	sp, #12
 800c6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c6b6:	e7ed      	b.n	800c694 <__exponent+0x4c>
 800c6b8:	2330      	movs	r3, #48	; 0x30
 800c6ba:	3130      	adds	r1, #48	; 0x30
 800c6bc:	7083      	strb	r3, [r0, #2]
 800c6be:	70c1      	strb	r1, [r0, #3]
 800c6c0:	1d03      	adds	r3, r0, #4
 800c6c2:	e7f1      	b.n	800c6a8 <__exponent+0x60>

0800c6c4 <_printf_float>:
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	ed2d 8b02 	vpush	{d8}
 800c6cc:	b08d      	sub	sp, #52	; 0x34
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	461f      	mov	r7, r3
 800c6d8:	4605      	mov	r5, r0
 800c6da:	f003 f947 	bl	800f96c <_localeconv_r>
 800c6de:	f8d0 a000 	ldr.w	sl, [r0]
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	f7f3 fdf6 	bl	80002d4 <strlen>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	9305      	str	r3, [sp, #20]
 800c6f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c6f8:	3307      	adds	r3, #7
 800c6fa:	f023 0307 	bic.w	r3, r3, #7
 800c6fe:	f103 0208 	add.w	r2, r3, #8
 800c702:	f8c8 2000 	str.w	r2, [r8]
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c70e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	f8cd 8018 	str.w	r8, [sp, #24]
 800c71c:	ee08 0a10 	vmov	s16, r0
 800c720:	4b9f      	ldr	r3, [pc, #636]	; (800c9a0 <_printf_float+0x2dc>)
 800c722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c72a:	f7f4 fa31 	bl	8000b90 <__aeabi_dcmpun>
 800c72e:	bb88      	cbnz	r0, 800c794 <_printf_float+0xd0>
 800c730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c734:	4b9a      	ldr	r3, [pc, #616]	; (800c9a0 <_printf_float+0x2dc>)
 800c736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c73a:	f7f4 fa0b 	bl	8000b54 <__aeabi_dcmple>
 800c73e:	bb48      	cbnz	r0, 800c794 <_printf_float+0xd0>
 800c740:	2200      	movs	r2, #0
 800c742:	2300      	movs	r3, #0
 800c744:	4640      	mov	r0, r8
 800c746:	4649      	mov	r1, r9
 800c748:	f7f4 f9fa 	bl	8000b40 <__aeabi_dcmplt>
 800c74c:	b110      	cbz	r0, 800c754 <_printf_float+0x90>
 800c74e:	232d      	movs	r3, #45	; 0x2d
 800c750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c754:	4b93      	ldr	r3, [pc, #588]	; (800c9a4 <_printf_float+0x2e0>)
 800c756:	4894      	ldr	r0, [pc, #592]	; (800c9a8 <_printf_float+0x2e4>)
 800c758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c75c:	bf94      	ite	ls
 800c75e:	4698      	movls	r8, r3
 800c760:	4680      	movhi	r8, r0
 800c762:	2303      	movs	r3, #3
 800c764:	6123      	str	r3, [r4, #16]
 800c766:	9b05      	ldr	r3, [sp, #20]
 800c768:	f023 0204 	bic.w	r2, r3, #4
 800c76c:	6022      	str	r2, [r4, #0]
 800c76e:	f04f 0900 	mov.w	r9, #0
 800c772:	9700      	str	r7, [sp, #0]
 800c774:	4633      	mov	r3, r6
 800c776:	aa0b      	add	r2, sp, #44	; 0x2c
 800c778:	4621      	mov	r1, r4
 800c77a:	4628      	mov	r0, r5
 800c77c:	f000 f9d8 	bl	800cb30 <_printf_common>
 800c780:	3001      	adds	r0, #1
 800c782:	f040 8090 	bne.w	800c8a6 <_printf_float+0x1e2>
 800c786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c78a:	b00d      	add	sp, #52	; 0x34
 800c78c:	ecbd 8b02 	vpop	{d8}
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	4642      	mov	r2, r8
 800c796:	464b      	mov	r3, r9
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	f7f4 f9f8 	bl	8000b90 <__aeabi_dcmpun>
 800c7a0:	b140      	cbz	r0, 800c7b4 <_printf_float+0xf0>
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfbc      	itt	lt
 800c7a8:	232d      	movlt	r3, #45	; 0x2d
 800c7aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c7ae:	487f      	ldr	r0, [pc, #508]	; (800c9ac <_printf_float+0x2e8>)
 800c7b0:	4b7f      	ldr	r3, [pc, #508]	; (800c9b0 <_printf_float+0x2ec>)
 800c7b2:	e7d1      	b.n	800c758 <_printf_float+0x94>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c7ba:	9206      	str	r2, [sp, #24]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	d13f      	bne.n	800c840 <_printf_float+0x17c>
 800c7c0:	2306      	movs	r3, #6
 800c7c2:	6063      	str	r3, [r4, #4]
 800c7c4:	9b05      	ldr	r3, [sp, #20]
 800c7c6:	6861      	ldr	r1, [r4, #4]
 800c7c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	ab0a      	add	r3, sp, #40	; 0x28
 800c7d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c7d6:	ab09      	add	r3, sp, #36	; 0x24
 800c7d8:	ec49 8b10 	vmov	d0, r8, r9
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	6022      	str	r2, [r4, #0]
 800c7e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f7ff fecd 	bl	800c584 <__cvt>
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7ee:	2b47      	cmp	r3, #71	; 0x47
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	d108      	bne.n	800c806 <_printf_float+0x142>
 800c7f4:	1cc8      	adds	r0, r1, #3
 800c7f6:	db02      	blt.n	800c7fe <_printf_float+0x13a>
 800c7f8:	6863      	ldr	r3, [r4, #4]
 800c7fa:	4299      	cmp	r1, r3
 800c7fc:	dd41      	ble.n	800c882 <_printf_float+0x1be>
 800c7fe:	f1ab 0b02 	sub.w	fp, fp, #2
 800c802:	fa5f fb8b 	uxtb.w	fp, fp
 800c806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c80a:	d820      	bhi.n	800c84e <_printf_float+0x18a>
 800c80c:	3901      	subs	r1, #1
 800c80e:	465a      	mov	r2, fp
 800c810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c814:	9109      	str	r1, [sp, #36]	; 0x24
 800c816:	f7ff ff17 	bl	800c648 <__exponent>
 800c81a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c81c:	1813      	adds	r3, r2, r0
 800c81e:	2a01      	cmp	r2, #1
 800c820:	4681      	mov	r9, r0
 800c822:	6123      	str	r3, [r4, #16]
 800c824:	dc02      	bgt.n	800c82c <_printf_float+0x168>
 800c826:	6822      	ldr	r2, [r4, #0]
 800c828:	07d2      	lsls	r2, r2, #31
 800c82a:	d501      	bpl.n	800c830 <_printf_float+0x16c>
 800c82c:	3301      	adds	r3, #1
 800c82e:	6123      	str	r3, [r4, #16]
 800c830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c834:	2b00      	cmp	r3, #0
 800c836:	d09c      	beq.n	800c772 <_printf_float+0xae>
 800c838:	232d      	movs	r3, #45	; 0x2d
 800c83a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c83e:	e798      	b.n	800c772 <_printf_float+0xae>
 800c840:	9a06      	ldr	r2, [sp, #24]
 800c842:	2a47      	cmp	r2, #71	; 0x47
 800c844:	d1be      	bne.n	800c7c4 <_printf_float+0x100>
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1bc      	bne.n	800c7c4 <_printf_float+0x100>
 800c84a:	2301      	movs	r3, #1
 800c84c:	e7b9      	b.n	800c7c2 <_printf_float+0xfe>
 800c84e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c852:	d118      	bne.n	800c886 <_printf_float+0x1c2>
 800c854:	2900      	cmp	r1, #0
 800c856:	6863      	ldr	r3, [r4, #4]
 800c858:	dd0b      	ble.n	800c872 <_printf_float+0x1ae>
 800c85a:	6121      	str	r1, [r4, #16]
 800c85c:	b913      	cbnz	r3, 800c864 <_printf_float+0x1a0>
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	07d0      	lsls	r0, r2, #31
 800c862:	d502      	bpl.n	800c86a <_printf_float+0x1a6>
 800c864:	3301      	adds	r3, #1
 800c866:	440b      	add	r3, r1
 800c868:	6123      	str	r3, [r4, #16]
 800c86a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c86c:	f04f 0900 	mov.w	r9, #0
 800c870:	e7de      	b.n	800c830 <_printf_float+0x16c>
 800c872:	b913      	cbnz	r3, 800c87a <_printf_float+0x1b6>
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	07d2      	lsls	r2, r2, #31
 800c878:	d501      	bpl.n	800c87e <_printf_float+0x1ba>
 800c87a:	3302      	adds	r3, #2
 800c87c:	e7f4      	b.n	800c868 <_printf_float+0x1a4>
 800c87e:	2301      	movs	r3, #1
 800c880:	e7f2      	b.n	800c868 <_printf_float+0x1a4>
 800c882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c888:	4299      	cmp	r1, r3
 800c88a:	db05      	blt.n	800c898 <_printf_float+0x1d4>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	6121      	str	r1, [r4, #16]
 800c890:	07d8      	lsls	r0, r3, #31
 800c892:	d5ea      	bpl.n	800c86a <_printf_float+0x1a6>
 800c894:	1c4b      	adds	r3, r1, #1
 800c896:	e7e7      	b.n	800c868 <_printf_float+0x1a4>
 800c898:	2900      	cmp	r1, #0
 800c89a:	bfd4      	ite	le
 800c89c:	f1c1 0202 	rsble	r2, r1, #2
 800c8a0:	2201      	movgt	r2, #1
 800c8a2:	4413      	add	r3, r2
 800c8a4:	e7e0      	b.n	800c868 <_printf_float+0x1a4>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	055a      	lsls	r2, r3, #21
 800c8aa:	d407      	bmi.n	800c8bc <_printf_float+0x1f8>
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	4642      	mov	r2, r8
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d12c      	bne.n	800c914 <_printf_float+0x250>
 800c8ba:	e764      	b.n	800c786 <_printf_float+0xc2>
 800c8bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8c0:	f240 80e0 	bls.w	800ca84 <_printf_float+0x3c0>
 800c8c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f7f4 f92e 	bl	8000b2c <__aeabi_dcmpeq>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d034      	beq.n	800c93e <_printf_float+0x27a>
 800c8d4:	4a37      	ldr	r2, [pc, #220]	; (800c9b4 <_printf_float+0x2f0>)
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	4631      	mov	r1, r6
 800c8da:	4628      	mov	r0, r5
 800c8dc:	47b8      	blx	r7
 800c8de:	3001      	adds	r0, #1
 800c8e0:	f43f af51 	beq.w	800c786 <_printf_float+0xc2>
 800c8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	db02      	blt.n	800c8f2 <_printf_float+0x22e>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	07d8      	lsls	r0, r3, #31
 800c8f0:	d510      	bpl.n	800c914 <_printf_float+0x250>
 800c8f2:	ee18 3a10 	vmov	r3, s16
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	f43f af41 	beq.w	800c786 <_printf_float+0xc2>
 800c904:	f04f 0800 	mov.w	r8, #0
 800c908:	f104 091a 	add.w	r9, r4, #26
 800c90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90e:	3b01      	subs	r3, #1
 800c910:	4543      	cmp	r3, r8
 800c912:	dc09      	bgt.n	800c928 <_printf_float+0x264>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	079b      	lsls	r3, r3, #30
 800c918:	f100 8105 	bmi.w	800cb26 <_printf_float+0x462>
 800c91c:	68e0      	ldr	r0, [r4, #12]
 800c91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c920:	4298      	cmp	r0, r3
 800c922:	bfb8      	it	lt
 800c924:	4618      	movlt	r0, r3
 800c926:	e730      	b.n	800c78a <_printf_float+0xc6>
 800c928:	2301      	movs	r3, #1
 800c92a:	464a      	mov	r2, r9
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af27 	beq.w	800c786 <_printf_float+0xc2>
 800c938:	f108 0801 	add.w	r8, r8, #1
 800c93c:	e7e6      	b.n	800c90c <_printf_float+0x248>
 800c93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c940:	2b00      	cmp	r3, #0
 800c942:	dc39      	bgt.n	800c9b8 <_printf_float+0x2f4>
 800c944:	4a1b      	ldr	r2, [pc, #108]	; (800c9b4 <_printf_float+0x2f0>)
 800c946:	2301      	movs	r3, #1
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	f43f af19 	beq.w	800c786 <_printf_float+0xc2>
 800c954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c958:	4313      	orrs	r3, r2
 800c95a:	d102      	bne.n	800c962 <_printf_float+0x29e>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	07d9      	lsls	r1, r3, #31
 800c960:	d5d8      	bpl.n	800c914 <_printf_float+0x250>
 800c962:	ee18 3a10 	vmov	r3, s16
 800c966:	4652      	mov	r2, sl
 800c968:	4631      	mov	r1, r6
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b8      	blx	r7
 800c96e:	3001      	adds	r0, #1
 800c970:	f43f af09 	beq.w	800c786 <_printf_float+0xc2>
 800c974:	f04f 0900 	mov.w	r9, #0
 800c978:	f104 0a1a 	add.w	sl, r4, #26
 800c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97e:	425b      	negs	r3, r3
 800c980:	454b      	cmp	r3, r9
 800c982:	dc01      	bgt.n	800c988 <_printf_float+0x2c4>
 800c984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c986:	e792      	b.n	800c8ae <_printf_float+0x1ea>
 800c988:	2301      	movs	r3, #1
 800c98a:	4652      	mov	r2, sl
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f aef7 	beq.w	800c786 <_printf_float+0xc2>
 800c998:	f109 0901 	add.w	r9, r9, #1
 800c99c:	e7ee      	b.n	800c97c <_printf_float+0x2b8>
 800c99e:	bf00      	nop
 800c9a0:	7fefffff 	.word	0x7fefffff
 800c9a4:	080117f9 	.word	0x080117f9
 800c9a8:	080117fd 	.word	0x080117fd
 800c9ac:	08011805 	.word	0x08011805
 800c9b0:	08011801 	.word	0x08011801
 800c9b4:	08011809 	.word	0x08011809
 800c9b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	bfa8      	it	ge
 800c9c0:	461a      	movge	r2, r3
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	4691      	mov	r9, r2
 800c9c6:	dc37      	bgt.n	800ca38 <_printf_float+0x374>
 800c9c8:	f04f 0b00 	mov.w	fp, #0
 800c9cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9d0:	f104 021a 	add.w	r2, r4, #26
 800c9d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9d6:	9305      	str	r3, [sp, #20]
 800c9d8:	eba3 0309 	sub.w	r3, r3, r9
 800c9dc:	455b      	cmp	r3, fp
 800c9de:	dc33      	bgt.n	800ca48 <_printf_float+0x384>
 800c9e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	db3b      	blt.n	800ca60 <_printf_float+0x39c>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	07da      	lsls	r2, r3, #31
 800c9ec:	d438      	bmi.n	800ca60 <_printf_float+0x39c>
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f0:	9a05      	ldr	r2, [sp, #20]
 800c9f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9f4:	1a9a      	subs	r2, r3, r2
 800c9f6:	eba3 0901 	sub.w	r9, r3, r1
 800c9fa:	4591      	cmp	r9, r2
 800c9fc:	bfa8      	it	ge
 800c9fe:	4691      	movge	r9, r2
 800ca00:	f1b9 0f00 	cmp.w	r9, #0
 800ca04:	dc35      	bgt.n	800ca72 <_printf_float+0x3ae>
 800ca06:	f04f 0800 	mov.w	r8, #0
 800ca0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca0e:	f104 0a1a 	add.w	sl, r4, #26
 800ca12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca16:	1a9b      	subs	r3, r3, r2
 800ca18:	eba3 0309 	sub.w	r3, r3, r9
 800ca1c:	4543      	cmp	r3, r8
 800ca1e:	f77f af79 	ble.w	800c914 <_printf_float+0x250>
 800ca22:	2301      	movs	r3, #1
 800ca24:	4652      	mov	r2, sl
 800ca26:	4631      	mov	r1, r6
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b8      	blx	r7
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	f43f aeaa 	beq.w	800c786 <_printf_float+0xc2>
 800ca32:	f108 0801 	add.w	r8, r8, #1
 800ca36:	e7ec      	b.n	800ca12 <_printf_float+0x34e>
 800ca38:	4613      	mov	r3, r2
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b8      	blx	r7
 800ca42:	3001      	adds	r0, #1
 800ca44:	d1c0      	bne.n	800c9c8 <_printf_float+0x304>
 800ca46:	e69e      	b.n	800c786 <_printf_float+0xc2>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	9205      	str	r2, [sp, #20]
 800ca50:	47b8      	blx	r7
 800ca52:	3001      	adds	r0, #1
 800ca54:	f43f ae97 	beq.w	800c786 <_printf_float+0xc2>
 800ca58:	9a05      	ldr	r2, [sp, #20]
 800ca5a:	f10b 0b01 	add.w	fp, fp, #1
 800ca5e:	e7b9      	b.n	800c9d4 <_printf_float+0x310>
 800ca60:	ee18 3a10 	vmov	r3, s16
 800ca64:	4652      	mov	r2, sl
 800ca66:	4631      	mov	r1, r6
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b8      	blx	r7
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d1be      	bne.n	800c9ee <_printf_float+0x32a>
 800ca70:	e689      	b.n	800c786 <_printf_float+0xc2>
 800ca72:	9a05      	ldr	r2, [sp, #20]
 800ca74:	464b      	mov	r3, r9
 800ca76:	4442      	add	r2, r8
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47b8      	blx	r7
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d1c1      	bne.n	800ca06 <_printf_float+0x342>
 800ca82:	e680      	b.n	800c786 <_printf_float+0xc2>
 800ca84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca86:	2a01      	cmp	r2, #1
 800ca88:	dc01      	bgt.n	800ca8e <_printf_float+0x3ca>
 800ca8a:	07db      	lsls	r3, r3, #31
 800ca8c:	d538      	bpl.n	800cb00 <_printf_float+0x43c>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4642      	mov	r2, r8
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae74 	beq.w	800c786 <_printf_float+0xc2>
 800ca9e:	ee18 3a10 	vmov	r3, s16
 800caa2:	4652      	mov	r2, sl
 800caa4:	4631      	mov	r1, r6
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b8      	blx	r7
 800caaa:	3001      	adds	r0, #1
 800caac:	f43f ae6b 	beq.w	800c786 <_printf_float+0xc2>
 800cab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cab4:	2200      	movs	r2, #0
 800cab6:	2300      	movs	r3, #0
 800cab8:	f7f4 f838 	bl	8000b2c <__aeabi_dcmpeq>
 800cabc:	b9d8      	cbnz	r0, 800caf6 <_printf_float+0x432>
 800cabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cac0:	f108 0201 	add.w	r2, r8, #1
 800cac4:	3b01      	subs	r3, #1
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	d10e      	bne.n	800caee <_printf_float+0x42a>
 800cad0:	e659      	b.n	800c786 <_printf_float+0xc2>
 800cad2:	2301      	movs	r3, #1
 800cad4:	4652      	mov	r2, sl
 800cad6:	4631      	mov	r1, r6
 800cad8:	4628      	mov	r0, r5
 800cada:	47b8      	blx	r7
 800cadc:	3001      	adds	r0, #1
 800cade:	f43f ae52 	beq.w	800c786 <_printf_float+0xc2>
 800cae2:	f108 0801 	add.w	r8, r8, #1
 800cae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae8:	3b01      	subs	r3, #1
 800caea:	4543      	cmp	r3, r8
 800caec:	dcf1      	bgt.n	800cad2 <_printf_float+0x40e>
 800caee:	464b      	mov	r3, r9
 800caf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800caf4:	e6dc      	b.n	800c8b0 <_printf_float+0x1ec>
 800caf6:	f04f 0800 	mov.w	r8, #0
 800cafa:	f104 0a1a 	add.w	sl, r4, #26
 800cafe:	e7f2      	b.n	800cae6 <_printf_float+0x422>
 800cb00:	2301      	movs	r3, #1
 800cb02:	4642      	mov	r2, r8
 800cb04:	e7df      	b.n	800cac6 <_printf_float+0x402>
 800cb06:	2301      	movs	r3, #1
 800cb08:	464a      	mov	r2, r9
 800cb0a:	4631      	mov	r1, r6
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	47b8      	blx	r7
 800cb10:	3001      	adds	r0, #1
 800cb12:	f43f ae38 	beq.w	800c786 <_printf_float+0xc2>
 800cb16:	f108 0801 	add.w	r8, r8, #1
 800cb1a:	68e3      	ldr	r3, [r4, #12]
 800cb1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb1e:	1a5b      	subs	r3, r3, r1
 800cb20:	4543      	cmp	r3, r8
 800cb22:	dcf0      	bgt.n	800cb06 <_printf_float+0x442>
 800cb24:	e6fa      	b.n	800c91c <_printf_float+0x258>
 800cb26:	f04f 0800 	mov.w	r8, #0
 800cb2a:	f104 0919 	add.w	r9, r4, #25
 800cb2e:	e7f4      	b.n	800cb1a <_printf_float+0x456>

0800cb30 <_printf_common>:
 800cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	4616      	mov	r6, r2
 800cb36:	4699      	mov	r9, r3
 800cb38:	688a      	ldr	r2, [r1, #8]
 800cb3a:	690b      	ldr	r3, [r1, #16]
 800cb3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	bfb8      	it	lt
 800cb44:	4613      	movlt	r3, r2
 800cb46:	6033      	str	r3, [r6, #0]
 800cb48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	460c      	mov	r4, r1
 800cb50:	b10a      	cbz	r2, 800cb56 <_printf_common+0x26>
 800cb52:	3301      	adds	r3, #1
 800cb54:	6033      	str	r3, [r6, #0]
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	0699      	lsls	r1, r3, #26
 800cb5a:	bf42      	ittt	mi
 800cb5c:	6833      	ldrmi	r3, [r6, #0]
 800cb5e:	3302      	addmi	r3, #2
 800cb60:	6033      	strmi	r3, [r6, #0]
 800cb62:	6825      	ldr	r5, [r4, #0]
 800cb64:	f015 0506 	ands.w	r5, r5, #6
 800cb68:	d106      	bne.n	800cb78 <_printf_common+0x48>
 800cb6a:	f104 0a19 	add.w	sl, r4, #25
 800cb6e:	68e3      	ldr	r3, [r4, #12]
 800cb70:	6832      	ldr	r2, [r6, #0]
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	42ab      	cmp	r3, r5
 800cb76:	dc26      	bgt.n	800cbc6 <_printf_common+0x96>
 800cb78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb7c:	1e13      	subs	r3, r2, #0
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	bf18      	it	ne
 800cb82:	2301      	movne	r3, #1
 800cb84:	0692      	lsls	r2, r2, #26
 800cb86:	d42b      	bmi.n	800cbe0 <_printf_common+0xb0>
 800cb88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	4638      	mov	r0, r7
 800cb90:	47c0      	blx	r8
 800cb92:	3001      	adds	r0, #1
 800cb94:	d01e      	beq.n	800cbd4 <_printf_common+0xa4>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	68e5      	ldr	r5, [r4, #12]
 800cb9a:	6832      	ldr	r2, [r6, #0]
 800cb9c:	f003 0306 	and.w	r3, r3, #6
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	bf08      	it	eq
 800cba4:	1aad      	subeq	r5, r5, r2
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	6922      	ldr	r2, [r4, #16]
 800cbaa:	bf0c      	ite	eq
 800cbac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbb0:	2500      	movne	r5, #0
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	bfc4      	itt	gt
 800cbb6:	1a9b      	subgt	r3, r3, r2
 800cbb8:	18ed      	addgt	r5, r5, r3
 800cbba:	2600      	movs	r6, #0
 800cbbc:	341a      	adds	r4, #26
 800cbbe:	42b5      	cmp	r5, r6
 800cbc0:	d11a      	bne.n	800cbf8 <_printf_common+0xc8>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	e008      	b.n	800cbd8 <_printf_common+0xa8>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4652      	mov	r2, sl
 800cbca:	4649      	mov	r1, r9
 800cbcc:	4638      	mov	r0, r7
 800cbce:	47c0      	blx	r8
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d103      	bne.n	800cbdc <_printf_common+0xac>
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbdc:	3501      	adds	r5, #1
 800cbde:	e7c6      	b.n	800cb6e <_printf_common+0x3e>
 800cbe0:	18e1      	adds	r1, r4, r3
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	2030      	movs	r0, #48	; 0x30
 800cbe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbea:	4422      	add	r2, r4
 800cbec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbf4:	3302      	adds	r3, #2
 800cbf6:	e7c7      	b.n	800cb88 <_printf_common+0x58>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	4638      	mov	r0, r7
 800cc00:	47c0      	blx	r8
 800cc02:	3001      	adds	r0, #1
 800cc04:	d0e6      	beq.n	800cbd4 <_printf_common+0xa4>
 800cc06:	3601      	adds	r6, #1
 800cc08:	e7d9      	b.n	800cbbe <_printf_common+0x8e>
	...

0800cc0c <_printf_i>:
 800cc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc10:	7e0f      	ldrb	r7, [r1, #24]
 800cc12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc14:	2f78      	cmp	r7, #120	; 0x78
 800cc16:	4691      	mov	r9, r2
 800cc18:	4680      	mov	r8, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	469a      	mov	sl, r3
 800cc1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc22:	d807      	bhi.n	800cc34 <_printf_i+0x28>
 800cc24:	2f62      	cmp	r7, #98	; 0x62
 800cc26:	d80a      	bhi.n	800cc3e <_printf_i+0x32>
 800cc28:	2f00      	cmp	r7, #0
 800cc2a:	f000 80d8 	beq.w	800cdde <_printf_i+0x1d2>
 800cc2e:	2f58      	cmp	r7, #88	; 0x58
 800cc30:	f000 80a3 	beq.w	800cd7a <_printf_i+0x16e>
 800cc34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc3c:	e03a      	b.n	800ccb4 <_printf_i+0xa8>
 800cc3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc42:	2b15      	cmp	r3, #21
 800cc44:	d8f6      	bhi.n	800cc34 <_printf_i+0x28>
 800cc46:	a101      	add	r1, pc, #4	; (adr r1, 800cc4c <_printf_i+0x40>)
 800cc48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc4c:	0800cca5 	.word	0x0800cca5
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800cc35 	.word	0x0800cc35
 800cc58:	0800cc35 	.word	0x0800cc35
 800cc5c:	0800cc35 	.word	0x0800cc35
 800cc60:	0800cc35 	.word	0x0800cc35
 800cc64:	0800ccb9 	.word	0x0800ccb9
 800cc68:	0800cc35 	.word	0x0800cc35
 800cc6c:	0800cc35 	.word	0x0800cc35
 800cc70:	0800cc35 	.word	0x0800cc35
 800cc74:	0800cc35 	.word	0x0800cc35
 800cc78:	0800cdc5 	.word	0x0800cdc5
 800cc7c:	0800cce9 	.word	0x0800cce9
 800cc80:	0800cda7 	.word	0x0800cda7
 800cc84:	0800cc35 	.word	0x0800cc35
 800cc88:	0800cc35 	.word	0x0800cc35
 800cc8c:	0800cde7 	.word	0x0800cde7
 800cc90:	0800cc35 	.word	0x0800cc35
 800cc94:	0800cce9 	.word	0x0800cce9
 800cc98:	0800cc35 	.word	0x0800cc35
 800cc9c:	0800cc35 	.word	0x0800cc35
 800cca0:	0800cdaf 	.word	0x0800cdaf
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	1d1a      	adds	r2, r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	602a      	str	r2, [r5, #0]
 800ccac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e0a3      	b.n	800ce00 <_printf_i+0x1f4>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	6829      	ldr	r1, [r5, #0]
 800ccbc:	0606      	lsls	r6, r0, #24
 800ccbe:	f101 0304 	add.w	r3, r1, #4
 800ccc2:	d50a      	bpl.n	800ccda <_printf_i+0xce>
 800ccc4:	680e      	ldr	r6, [r1, #0]
 800ccc6:	602b      	str	r3, [r5, #0]
 800ccc8:	2e00      	cmp	r6, #0
 800ccca:	da03      	bge.n	800ccd4 <_printf_i+0xc8>
 800cccc:	232d      	movs	r3, #45	; 0x2d
 800ccce:	4276      	negs	r6, r6
 800ccd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd4:	485e      	ldr	r0, [pc, #376]	; (800ce50 <_printf_i+0x244>)
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	e019      	b.n	800cd0e <_printf_i+0x102>
 800ccda:	680e      	ldr	r6, [r1, #0]
 800ccdc:	602b      	str	r3, [r5, #0]
 800ccde:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cce2:	bf18      	it	ne
 800cce4:	b236      	sxthne	r6, r6
 800cce6:	e7ef      	b.n	800ccc8 <_printf_i+0xbc>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	1d19      	adds	r1, r3, #4
 800ccee:	6029      	str	r1, [r5, #0]
 800ccf0:	0601      	lsls	r1, r0, #24
 800ccf2:	d501      	bpl.n	800ccf8 <_printf_i+0xec>
 800ccf4:	681e      	ldr	r6, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <_printf_i+0xf2>
 800ccf8:	0646      	lsls	r6, r0, #25
 800ccfa:	d5fb      	bpl.n	800ccf4 <_printf_i+0xe8>
 800ccfc:	881e      	ldrh	r6, [r3, #0]
 800ccfe:	4854      	ldr	r0, [pc, #336]	; (800ce50 <_printf_i+0x244>)
 800cd00:	2f6f      	cmp	r7, #111	; 0x6f
 800cd02:	bf0c      	ite	eq
 800cd04:	2308      	moveq	r3, #8
 800cd06:	230a      	movne	r3, #10
 800cd08:	2100      	movs	r1, #0
 800cd0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd0e:	6865      	ldr	r5, [r4, #4]
 800cd10:	60a5      	str	r5, [r4, #8]
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	bfa2      	ittt	ge
 800cd16:	6821      	ldrge	r1, [r4, #0]
 800cd18:	f021 0104 	bicge.w	r1, r1, #4
 800cd1c:	6021      	strge	r1, [r4, #0]
 800cd1e:	b90e      	cbnz	r6, 800cd24 <_printf_i+0x118>
 800cd20:	2d00      	cmp	r5, #0
 800cd22:	d04d      	beq.n	800cdc0 <_printf_i+0x1b4>
 800cd24:	4615      	mov	r5, r2
 800cd26:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd2a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd2e:	5dc7      	ldrb	r7, [r0, r7]
 800cd30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd34:	4637      	mov	r7, r6
 800cd36:	42bb      	cmp	r3, r7
 800cd38:	460e      	mov	r6, r1
 800cd3a:	d9f4      	bls.n	800cd26 <_printf_i+0x11a>
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d10b      	bne.n	800cd58 <_printf_i+0x14c>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	07de      	lsls	r6, r3, #31
 800cd44:	d508      	bpl.n	800cd58 <_printf_i+0x14c>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	6861      	ldr	r1, [r4, #4]
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	bfde      	ittt	le
 800cd4e:	2330      	movle	r3, #48	; 0x30
 800cd50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd58:	1b52      	subs	r2, r2, r5
 800cd5a:	6122      	str	r2, [r4, #16]
 800cd5c:	f8cd a000 	str.w	sl, [sp]
 800cd60:	464b      	mov	r3, r9
 800cd62:	aa03      	add	r2, sp, #12
 800cd64:	4621      	mov	r1, r4
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fee2 	bl	800cb30 <_printf_common>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d14c      	bne.n	800ce0a <_printf_i+0x1fe>
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd74:	b004      	add	sp, #16
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	4835      	ldr	r0, [pc, #212]	; (800ce50 <_printf_i+0x244>)
 800cd7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd80:	6829      	ldr	r1, [r5, #0]
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd88:	6029      	str	r1, [r5, #0]
 800cd8a:	061d      	lsls	r5, r3, #24
 800cd8c:	d514      	bpl.n	800cdb8 <_printf_i+0x1ac>
 800cd8e:	07df      	lsls	r7, r3, #31
 800cd90:	bf44      	itt	mi
 800cd92:	f043 0320 	orrmi.w	r3, r3, #32
 800cd96:	6023      	strmi	r3, [r4, #0]
 800cd98:	b91e      	cbnz	r6, 800cda2 <_printf_i+0x196>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	f023 0320 	bic.w	r3, r3, #32
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	2310      	movs	r3, #16
 800cda4:	e7b0      	b.n	800cd08 <_printf_i+0xfc>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	f043 0320 	orr.w	r3, r3, #32
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	2378      	movs	r3, #120	; 0x78
 800cdb0:	4828      	ldr	r0, [pc, #160]	; (800ce54 <_printf_i+0x248>)
 800cdb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdb6:	e7e3      	b.n	800cd80 <_printf_i+0x174>
 800cdb8:	0659      	lsls	r1, r3, #25
 800cdba:	bf48      	it	mi
 800cdbc:	b2b6      	uxthmi	r6, r6
 800cdbe:	e7e6      	b.n	800cd8e <_printf_i+0x182>
 800cdc0:	4615      	mov	r5, r2
 800cdc2:	e7bb      	b.n	800cd3c <_printf_i+0x130>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	6826      	ldr	r6, [r4, #0]
 800cdc8:	6961      	ldr	r1, [r4, #20]
 800cdca:	1d18      	adds	r0, r3, #4
 800cdcc:	6028      	str	r0, [r5, #0]
 800cdce:	0635      	lsls	r5, r6, #24
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	d501      	bpl.n	800cdd8 <_printf_i+0x1cc>
 800cdd4:	6019      	str	r1, [r3, #0]
 800cdd6:	e002      	b.n	800cdde <_printf_i+0x1d2>
 800cdd8:	0670      	lsls	r0, r6, #25
 800cdda:	d5fb      	bpl.n	800cdd4 <_printf_i+0x1c8>
 800cddc:	8019      	strh	r1, [r3, #0]
 800cdde:	2300      	movs	r3, #0
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	4615      	mov	r5, r2
 800cde4:	e7ba      	b.n	800cd5c <_printf_i+0x150>
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	602a      	str	r2, [r5, #0]
 800cdec:	681d      	ldr	r5, [r3, #0]
 800cdee:	6862      	ldr	r2, [r4, #4]
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f7f3 fa14 	bl	8000220 <memchr>
 800cdf8:	b108      	cbz	r0, 800cdfe <_printf_i+0x1f2>
 800cdfa:	1b40      	subs	r0, r0, r5
 800cdfc:	6060      	str	r0, [r4, #4]
 800cdfe:	6863      	ldr	r3, [r4, #4]
 800ce00:	6123      	str	r3, [r4, #16]
 800ce02:	2300      	movs	r3, #0
 800ce04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce08:	e7a8      	b.n	800cd5c <_printf_i+0x150>
 800ce0a:	6923      	ldr	r3, [r4, #16]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4649      	mov	r1, r9
 800ce10:	4640      	mov	r0, r8
 800ce12:	47d0      	blx	sl
 800ce14:	3001      	adds	r0, #1
 800ce16:	d0ab      	beq.n	800cd70 <_printf_i+0x164>
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	079b      	lsls	r3, r3, #30
 800ce1c:	d413      	bmi.n	800ce46 <_printf_i+0x23a>
 800ce1e:	68e0      	ldr	r0, [r4, #12]
 800ce20:	9b03      	ldr	r3, [sp, #12]
 800ce22:	4298      	cmp	r0, r3
 800ce24:	bfb8      	it	lt
 800ce26:	4618      	movlt	r0, r3
 800ce28:	e7a4      	b.n	800cd74 <_printf_i+0x168>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	4649      	mov	r1, r9
 800ce30:	4640      	mov	r0, r8
 800ce32:	47d0      	blx	sl
 800ce34:	3001      	adds	r0, #1
 800ce36:	d09b      	beq.n	800cd70 <_printf_i+0x164>
 800ce38:	3501      	adds	r5, #1
 800ce3a:	68e3      	ldr	r3, [r4, #12]
 800ce3c:	9903      	ldr	r1, [sp, #12]
 800ce3e:	1a5b      	subs	r3, r3, r1
 800ce40:	42ab      	cmp	r3, r5
 800ce42:	dcf2      	bgt.n	800ce2a <_printf_i+0x21e>
 800ce44:	e7eb      	b.n	800ce1e <_printf_i+0x212>
 800ce46:	2500      	movs	r5, #0
 800ce48:	f104 0619 	add.w	r6, r4, #25
 800ce4c:	e7f5      	b.n	800ce3a <_printf_i+0x22e>
 800ce4e:	bf00      	nop
 800ce50:	0801180b 	.word	0x0801180b
 800ce54:	0801181c 	.word	0x0801181c

0800ce58 <_scanf_float>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	b087      	sub	sp, #28
 800ce5e:	4617      	mov	r7, r2
 800ce60:	9303      	str	r3, [sp, #12]
 800ce62:	688b      	ldr	r3, [r1, #8]
 800ce64:	1e5a      	subs	r2, r3, #1
 800ce66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ce6a:	bf83      	ittte	hi
 800ce6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ce70:	195b      	addhi	r3, r3, r5
 800ce72:	9302      	strhi	r3, [sp, #8]
 800ce74:	2300      	movls	r3, #0
 800ce76:	bf86      	itte	hi
 800ce78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ce7c:	608b      	strhi	r3, [r1, #8]
 800ce7e:	9302      	strls	r3, [sp, #8]
 800ce80:	680b      	ldr	r3, [r1, #0]
 800ce82:	468b      	mov	fp, r1
 800ce84:	2500      	movs	r5, #0
 800ce86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ce8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800ce8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ce92:	4680      	mov	r8, r0
 800ce94:	460c      	mov	r4, r1
 800ce96:	465e      	mov	r6, fp
 800ce98:	46aa      	mov	sl, r5
 800ce9a:	46a9      	mov	r9, r5
 800ce9c:	9501      	str	r5, [sp, #4]
 800ce9e:	68a2      	ldr	r2, [r4, #8]
 800cea0:	b152      	cbz	r2, 800ceb8 <_scanf_float+0x60>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b4e      	cmp	r3, #78	; 0x4e
 800cea8:	d864      	bhi.n	800cf74 <_scanf_float+0x11c>
 800ceaa:	2b40      	cmp	r3, #64	; 0x40
 800ceac:	d83c      	bhi.n	800cf28 <_scanf_float+0xd0>
 800ceae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ceb2:	b2c8      	uxtb	r0, r1
 800ceb4:	280e      	cmp	r0, #14
 800ceb6:	d93a      	bls.n	800cf2e <_scanf_float+0xd6>
 800ceb8:	f1b9 0f00 	cmp.w	r9, #0
 800cebc:	d003      	beq.n	800cec6 <_scanf_float+0x6e>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ceca:	f1ba 0f01 	cmp.w	sl, #1
 800cece:	f200 8113 	bhi.w	800d0f8 <_scanf_float+0x2a0>
 800ced2:	455e      	cmp	r6, fp
 800ced4:	f200 8105 	bhi.w	800d0e2 <_scanf_float+0x28a>
 800ced8:	2501      	movs	r5, #1
 800ceda:	4628      	mov	r0, r5
 800cedc:	b007      	add	sp, #28
 800cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cee6:	2a0d      	cmp	r2, #13
 800cee8:	d8e6      	bhi.n	800ceb8 <_scanf_float+0x60>
 800ceea:	a101      	add	r1, pc, #4	; (adr r1, 800cef0 <_scanf_float+0x98>)
 800ceec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cef0:	0800d02f 	.word	0x0800d02f
 800cef4:	0800ceb9 	.word	0x0800ceb9
 800cef8:	0800ceb9 	.word	0x0800ceb9
 800cefc:	0800ceb9 	.word	0x0800ceb9
 800cf00:	0800d08f 	.word	0x0800d08f
 800cf04:	0800d067 	.word	0x0800d067
 800cf08:	0800ceb9 	.word	0x0800ceb9
 800cf0c:	0800ceb9 	.word	0x0800ceb9
 800cf10:	0800d03d 	.word	0x0800d03d
 800cf14:	0800ceb9 	.word	0x0800ceb9
 800cf18:	0800ceb9 	.word	0x0800ceb9
 800cf1c:	0800ceb9 	.word	0x0800ceb9
 800cf20:	0800ceb9 	.word	0x0800ceb9
 800cf24:	0800cff5 	.word	0x0800cff5
 800cf28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cf2c:	e7db      	b.n	800cee6 <_scanf_float+0x8e>
 800cf2e:	290e      	cmp	r1, #14
 800cf30:	d8c2      	bhi.n	800ceb8 <_scanf_float+0x60>
 800cf32:	a001      	add	r0, pc, #4	; (adr r0, 800cf38 <_scanf_float+0xe0>)
 800cf34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cf38:	0800cfe7 	.word	0x0800cfe7
 800cf3c:	0800ceb9 	.word	0x0800ceb9
 800cf40:	0800cfe7 	.word	0x0800cfe7
 800cf44:	0800d07b 	.word	0x0800d07b
 800cf48:	0800ceb9 	.word	0x0800ceb9
 800cf4c:	0800cf95 	.word	0x0800cf95
 800cf50:	0800cfd1 	.word	0x0800cfd1
 800cf54:	0800cfd1 	.word	0x0800cfd1
 800cf58:	0800cfd1 	.word	0x0800cfd1
 800cf5c:	0800cfd1 	.word	0x0800cfd1
 800cf60:	0800cfd1 	.word	0x0800cfd1
 800cf64:	0800cfd1 	.word	0x0800cfd1
 800cf68:	0800cfd1 	.word	0x0800cfd1
 800cf6c:	0800cfd1 	.word	0x0800cfd1
 800cf70:	0800cfd1 	.word	0x0800cfd1
 800cf74:	2b6e      	cmp	r3, #110	; 0x6e
 800cf76:	d809      	bhi.n	800cf8c <_scanf_float+0x134>
 800cf78:	2b60      	cmp	r3, #96	; 0x60
 800cf7a:	d8b2      	bhi.n	800cee2 <_scanf_float+0x8a>
 800cf7c:	2b54      	cmp	r3, #84	; 0x54
 800cf7e:	d077      	beq.n	800d070 <_scanf_float+0x218>
 800cf80:	2b59      	cmp	r3, #89	; 0x59
 800cf82:	d199      	bne.n	800ceb8 <_scanf_float+0x60>
 800cf84:	2d07      	cmp	r5, #7
 800cf86:	d197      	bne.n	800ceb8 <_scanf_float+0x60>
 800cf88:	2508      	movs	r5, #8
 800cf8a:	e029      	b.n	800cfe0 <_scanf_float+0x188>
 800cf8c:	2b74      	cmp	r3, #116	; 0x74
 800cf8e:	d06f      	beq.n	800d070 <_scanf_float+0x218>
 800cf90:	2b79      	cmp	r3, #121	; 0x79
 800cf92:	e7f6      	b.n	800cf82 <_scanf_float+0x12a>
 800cf94:	6821      	ldr	r1, [r4, #0]
 800cf96:	05c8      	lsls	r0, r1, #23
 800cf98:	d51a      	bpl.n	800cfd0 <_scanf_float+0x178>
 800cf9a:	9b02      	ldr	r3, [sp, #8]
 800cf9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cfa0:	6021      	str	r1, [r4, #0]
 800cfa2:	f109 0901 	add.w	r9, r9, #1
 800cfa6:	b11b      	cbz	r3, 800cfb0 <_scanf_float+0x158>
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	3201      	adds	r2, #1
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	68a3      	ldr	r3, [r4, #8]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	60a3      	str	r3, [r4, #8]
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	607b      	str	r3, [r7, #4]
 800cfc4:	f340 8084 	ble.w	800d0d0 <_scanf_float+0x278>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	603b      	str	r3, [r7, #0]
 800cfce:	e766      	b.n	800ce9e <_scanf_float+0x46>
 800cfd0:	eb1a 0f05 	cmn.w	sl, r5
 800cfd4:	f47f af70 	bne.w	800ceb8 <_scanf_float+0x60>
 800cfd8:	6822      	ldr	r2, [r4, #0]
 800cfda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cfde:	6022      	str	r2, [r4, #0]
 800cfe0:	f806 3b01 	strb.w	r3, [r6], #1
 800cfe4:	e7e4      	b.n	800cfb0 <_scanf_float+0x158>
 800cfe6:	6822      	ldr	r2, [r4, #0]
 800cfe8:	0610      	lsls	r0, r2, #24
 800cfea:	f57f af65 	bpl.w	800ceb8 <_scanf_float+0x60>
 800cfee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cff2:	e7f4      	b.n	800cfde <_scanf_float+0x186>
 800cff4:	f1ba 0f00 	cmp.w	sl, #0
 800cff8:	d10e      	bne.n	800d018 <_scanf_float+0x1c0>
 800cffa:	f1b9 0f00 	cmp.w	r9, #0
 800cffe:	d10e      	bne.n	800d01e <_scanf_float+0x1c6>
 800d000:	6822      	ldr	r2, [r4, #0]
 800d002:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d006:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d00a:	d108      	bne.n	800d01e <_scanf_float+0x1c6>
 800d00c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d010:	6022      	str	r2, [r4, #0]
 800d012:	f04f 0a01 	mov.w	sl, #1
 800d016:	e7e3      	b.n	800cfe0 <_scanf_float+0x188>
 800d018:	f1ba 0f02 	cmp.w	sl, #2
 800d01c:	d055      	beq.n	800d0ca <_scanf_float+0x272>
 800d01e:	2d01      	cmp	r5, #1
 800d020:	d002      	beq.n	800d028 <_scanf_float+0x1d0>
 800d022:	2d04      	cmp	r5, #4
 800d024:	f47f af48 	bne.w	800ceb8 <_scanf_float+0x60>
 800d028:	3501      	adds	r5, #1
 800d02a:	b2ed      	uxtb	r5, r5
 800d02c:	e7d8      	b.n	800cfe0 <_scanf_float+0x188>
 800d02e:	f1ba 0f01 	cmp.w	sl, #1
 800d032:	f47f af41 	bne.w	800ceb8 <_scanf_float+0x60>
 800d036:	f04f 0a02 	mov.w	sl, #2
 800d03a:	e7d1      	b.n	800cfe0 <_scanf_float+0x188>
 800d03c:	b97d      	cbnz	r5, 800d05e <_scanf_float+0x206>
 800d03e:	f1b9 0f00 	cmp.w	r9, #0
 800d042:	f47f af3c 	bne.w	800cebe <_scanf_float+0x66>
 800d046:	6822      	ldr	r2, [r4, #0]
 800d048:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d04c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d050:	f47f af39 	bne.w	800cec6 <_scanf_float+0x6e>
 800d054:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d058:	6022      	str	r2, [r4, #0]
 800d05a:	2501      	movs	r5, #1
 800d05c:	e7c0      	b.n	800cfe0 <_scanf_float+0x188>
 800d05e:	2d03      	cmp	r5, #3
 800d060:	d0e2      	beq.n	800d028 <_scanf_float+0x1d0>
 800d062:	2d05      	cmp	r5, #5
 800d064:	e7de      	b.n	800d024 <_scanf_float+0x1cc>
 800d066:	2d02      	cmp	r5, #2
 800d068:	f47f af26 	bne.w	800ceb8 <_scanf_float+0x60>
 800d06c:	2503      	movs	r5, #3
 800d06e:	e7b7      	b.n	800cfe0 <_scanf_float+0x188>
 800d070:	2d06      	cmp	r5, #6
 800d072:	f47f af21 	bne.w	800ceb8 <_scanf_float+0x60>
 800d076:	2507      	movs	r5, #7
 800d078:	e7b2      	b.n	800cfe0 <_scanf_float+0x188>
 800d07a:	6822      	ldr	r2, [r4, #0]
 800d07c:	0591      	lsls	r1, r2, #22
 800d07e:	f57f af1b 	bpl.w	800ceb8 <_scanf_float+0x60>
 800d082:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d086:	6022      	str	r2, [r4, #0]
 800d088:	f8cd 9004 	str.w	r9, [sp, #4]
 800d08c:	e7a8      	b.n	800cfe0 <_scanf_float+0x188>
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d094:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d098:	d006      	beq.n	800d0a8 <_scanf_float+0x250>
 800d09a:	0550      	lsls	r0, r2, #21
 800d09c:	f57f af0c 	bpl.w	800ceb8 <_scanf_float+0x60>
 800d0a0:	f1b9 0f00 	cmp.w	r9, #0
 800d0a4:	f43f af0f 	beq.w	800cec6 <_scanf_float+0x6e>
 800d0a8:	0591      	lsls	r1, r2, #22
 800d0aa:	bf58      	it	pl
 800d0ac:	9901      	ldrpl	r1, [sp, #4]
 800d0ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0b2:	bf58      	it	pl
 800d0b4:	eba9 0101 	subpl.w	r1, r9, r1
 800d0b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d0bc:	bf58      	it	pl
 800d0be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d0c2:	6022      	str	r2, [r4, #0]
 800d0c4:	f04f 0900 	mov.w	r9, #0
 800d0c8:	e78a      	b.n	800cfe0 <_scanf_float+0x188>
 800d0ca:	f04f 0a03 	mov.w	sl, #3
 800d0ce:	e787      	b.n	800cfe0 <_scanf_float+0x188>
 800d0d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d0d4:	4639      	mov	r1, r7
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	4798      	blx	r3
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	f43f aedf 	beq.w	800ce9e <_scanf_float+0x46>
 800d0e0:	e6ea      	b.n	800ceb8 <_scanf_float+0x60>
 800d0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d0ea:	463a      	mov	r2, r7
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	4798      	blx	r3
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	6123      	str	r3, [r4, #16]
 800d0f6:	e6ec      	b.n	800ced2 <_scanf_float+0x7a>
 800d0f8:	1e6b      	subs	r3, r5, #1
 800d0fa:	2b06      	cmp	r3, #6
 800d0fc:	d825      	bhi.n	800d14a <_scanf_float+0x2f2>
 800d0fe:	2d02      	cmp	r5, #2
 800d100:	d836      	bhi.n	800d170 <_scanf_float+0x318>
 800d102:	455e      	cmp	r6, fp
 800d104:	f67f aee8 	bls.w	800ced8 <_scanf_float+0x80>
 800d108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d10c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d110:	463a      	mov	r2, r7
 800d112:	4640      	mov	r0, r8
 800d114:	4798      	blx	r3
 800d116:	6923      	ldr	r3, [r4, #16]
 800d118:	3b01      	subs	r3, #1
 800d11a:	6123      	str	r3, [r4, #16]
 800d11c:	e7f1      	b.n	800d102 <_scanf_float+0x2aa>
 800d11e:	9802      	ldr	r0, [sp, #8]
 800d120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d124:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d128:	9002      	str	r0, [sp, #8]
 800d12a:	463a      	mov	r2, r7
 800d12c:	4640      	mov	r0, r8
 800d12e:	4798      	blx	r3
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	3b01      	subs	r3, #1
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d13a:	fa5f fa8a 	uxtb.w	sl, sl
 800d13e:	f1ba 0f02 	cmp.w	sl, #2
 800d142:	d1ec      	bne.n	800d11e <_scanf_float+0x2c6>
 800d144:	3d03      	subs	r5, #3
 800d146:	b2ed      	uxtb	r5, r5
 800d148:	1b76      	subs	r6, r6, r5
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	05da      	lsls	r2, r3, #23
 800d14e:	d52f      	bpl.n	800d1b0 <_scanf_float+0x358>
 800d150:	055b      	lsls	r3, r3, #21
 800d152:	d510      	bpl.n	800d176 <_scanf_float+0x31e>
 800d154:	455e      	cmp	r6, fp
 800d156:	f67f aebf 	bls.w	800ced8 <_scanf_float+0x80>
 800d15a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d15e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d162:	463a      	mov	r2, r7
 800d164:	4640      	mov	r0, r8
 800d166:	4798      	blx	r3
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	6123      	str	r3, [r4, #16]
 800d16e:	e7f1      	b.n	800d154 <_scanf_float+0x2fc>
 800d170:	46aa      	mov	sl, r5
 800d172:	9602      	str	r6, [sp, #8]
 800d174:	e7df      	b.n	800d136 <_scanf_float+0x2de>
 800d176:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	2965      	cmp	r1, #101	; 0x65
 800d17e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d182:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	d00c      	beq.n	800d1a4 <_scanf_float+0x34c>
 800d18a:	2945      	cmp	r1, #69	; 0x45
 800d18c:	d00a      	beq.n	800d1a4 <_scanf_float+0x34c>
 800d18e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d192:	463a      	mov	r2, r7
 800d194:	4640      	mov	r0, r8
 800d196:	4798      	blx	r3
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	1eb5      	subs	r5, r6, #2
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4798      	blx	r3
 800d1ae:	462e      	mov	r6, r5
 800d1b0:	6825      	ldr	r5, [r4, #0]
 800d1b2:	f015 0510 	ands.w	r5, r5, #16
 800d1b6:	d159      	bne.n	800d26c <_scanf_float+0x414>
 800d1b8:	7035      	strb	r5, [r6, #0]
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d1c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1c4:	d11b      	bne.n	800d1fe <_scanf_float+0x3a6>
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	454b      	cmp	r3, r9
 800d1ca:	eba3 0209 	sub.w	r2, r3, r9
 800d1ce:	d123      	bne.n	800d218 <_scanf_float+0x3c0>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4659      	mov	r1, fp
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	f000 ffed 	bl	800e1b4 <_strtod_r>
 800d1da:	6822      	ldr	r2, [r4, #0]
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	f012 0f02 	tst.w	r2, #2
 800d1e2:	ec57 6b10 	vmov	r6, r7, d0
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	d021      	beq.n	800d22e <_scanf_float+0x3d6>
 800d1ea:	9903      	ldr	r1, [sp, #12]
 800d1ec:	1d1a      	adds	r2, r3, #4
 800d1ee:	600a      	str	r2, [r1, #0]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	e9c3 6700 	strd	r6, r7, [r3]
 800d1f6:	68e3      	ldr	r3, [r4, #12]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	60e3      	str	r3, [r4, #12]
 800d1fc:	e66d      	b.n	800ceda <_scanf_float+0x82>
 800d1fe:	9b04      	ldr	r3, [sp, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0e5      	beq.n	800d1d0 <_scanf_float+0x378>
 800d204:	9905      	ldr	r1, [sp, #20]
 800d206:	230a      	movs	r3, #10
 800d208:	462a      	mov	r2, r5
 800d20a:	3101      	adds	r1, #1
 800d20c:	4640      	mov	r0, r8
 800d20e:	f001 f8b5 	bl	800e37c <_strtol_r>
 800d212:	9b04      	ldr	r3, [sp, #16]
 800d214:	9e05      	ldr	r6, [sp, #20]
 800d216:	1ac2      	subs	r2, r0, r3
 800d218:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d21c:	429e      	cmp	r6, r3
 800d21e:	bf28      	it	cs
 800d220:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d224:	4912      	ldr	r1, [pc, #72]	; (800d270 <_scanf_float+0x418>)
 800d226:	4630      	mov	r0, r6
 800d228:	f000 f91e 	bl	800d468 <siprintf>
 800d22c:	e7d0      	b.n	800d1d0 <_scanf_float+0x378>
 800d22e:	9903      	ldr	r1, [sp, #12]
 800d230:	f012 0f04 	tst.w	r2, #4
 800d234:	f103 0204 	add.w	r2, r3, #4
 800d238:	600a      	str	r2, [r1, #0]
 800d23a:	d1d9      	bne.n	800d1f0 <_scanf_float+0x398>
 800d23c:	f8d3 8000 	ldr.w	r8, [r3]
 800d240:	ee10 2a10 	vmov	r2, s0
 800d244:	ee10 0a10 	vmov	r0, s0
 800d248:	463b      	mov	r3, r7
 800d24a:	4639      	mov	r1, r7
 800d24c:	f7f3 fca0 	bl	8000b90 <__aeabi_dcmpun>
 800d250:	b128      	cbz	r0, 800d25e <_scanf_float+0x406>
 800d252:	4808      	ldr	r0, [pc, #32]	; (800d274 <_scanf_float+0x41c>)
 800d254:	f7fe fcf4 	bl	800bc40 <nanf>
 800d258:	ed88 0a00 	vstr	s0, [r8]
 800d25c:	e7cb      	b.n	800d1f6 <_scanf_float+0x39e>
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 fcf3 	bl	8000c4c <__aeabi_d2f>
 800d266:	f8c8 0000 	str.w	r0, [r8]
 800d26a:	e7c4      	b.n	800d1f6 <_scanf_float+0x39e>
 800d26c:	2500      	movs	r5, #0
 800d26e:	e634      	b.n	800ceda <_scanf_float+0x82>
 800d270:	0801182d 	.word	0x0801182d
 800d274:	08011937 	.word	0x08011937

0800d278 <iprintf>:
 800d278:	b40f      	push	{r0, r1, r2, r3}
 800d27a:	4b0a      	ldr	r3, [pc, #40]	; (800d2a4 <iprintf+0x2c>)
 800d27c:	b513      	push	{r0, r1, r4, lr}
 800d27e:	681c      	ldr	r4, [r3, #0]
 800d280:	b124      	cbz	r4, 800d28c <iprintf+0x14>
 800d282:	69a3      	ldr	r3, [r4, #24]
 800d284:	b913      	cbnz	r3, 800d28c <iprintf+0x14>
 800d286:	4620      	mov	r0, r4
 800d288:	f7fe fe1a 	bl	800bec0 <__sinit>
 800d28c:	ab05      	add	r3, sp, #20
 800d28e:	9a04      	ldr	r2, [sp, #16]
 800d290:	68a1      	ldr	r1, [r4, #8]
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	4620      	mov	r0, r4
 800d296:	f7ff f845 	bl	800c324 <_vfiprintf_r>
 800d29a:	b002      	add	sp, #8
 800d29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a0:	b004      	add	sp, #16
 800d2a2:	4770      	bx	lr
 800d2a4:	20000030 	.word	0x20000030

0800d2a8 <putchar>:
 800d2a8:	4b09      	ldr	r3, [pc, #36]	; (800d2d0 <putchar+0x28>)
 800d2aa:	b513      	push	{r0, r1, r4, lr}
 800d2ac:	681c      	ldr	r4, [r3, #0]
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	b134      	cbz	r4, 800d2c0 <putchar+0x18>
 800d2b2:	69a3      	ldr	r3, [r4, #24]
 800d2b4:	b923      	cbnz	r3, 800d2c0 <putchar+0x18>
 800d2b6:	9001      	str	r0, [sp, #4]
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f7fe fe01 	bl	800bec0 <__sinit>
 800d2be:	9901      	ldr	r1, [sp, #4]
 800d2c0:	68a2      	ldr	r2, [r4, #8]
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	b002      	add	sp, #8
 800d2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ca:	f003 ba4b 	b.w	8010764 <_putc_r>
 800d2ce:	bf00      	nop
 800d2d0:	20000030 	.word	0x20000030

0800d2d4 <_puts_r>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	460e      	mov	r6, r1
 800d2d8:	4605      	mov	r5, r0
 800d2da:	b118      	cbz	r0, 800d2e4 <_puts_r+0x10>
 800d2dc:	6983      	ldr	r3, [r0, #24]
 800d2de:	b90b      	cbnz	r3, 800d2e4 <_puts_r+0x10>
 800d2e0:	f7fe fdee 	bl	800bec0 <__sinit>
 800d2e4:	69ab      	ldr	r3, [r5, #24]
 800d2e6:	68ac      	ldr	r4, [r5, #8]
 800d2e8:	b913      	cbnz	r3, 800d2f0 <_puts_r+0x1c>
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f7fe fde8 	bl	800bec0 <__sinit>
 800d2f0:	4b2c      	ldr	r3, [pc, #176]	; (800d3a4 <_puts_r+0xd0>)
 800d2f2:	429c      	cmp	r4, r3
 800d2f4:	d120      	bne.n	800d338 <_puts_r+0x64>
 800d2f6:	686c      	ldr	r4, [r5, #4]
 800d2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2fa:	07db      	lsls	r3, r3, #31
 800d2fc:	d405      	bmi.n	800d30a <_puts_r+0x36>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	0598      	lsls	r0, r3, #22
 800d302:	d402      	bmi.n	800d30a <_puts_r+0x36>
 800d304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d306:	f7fe feb0 	bl	800c06a <__retarget_lock_acquire_recursive>
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	0719      	lsls	r1, r3, #28
 800d30e:	d51d      	bpl.n	800d34c <_puts_r+0x78>
 800d310:	6923      	ldr	r3, [r4, #16]
 800d312:	b1db      	cbz	r3, 800d34c <_puts_r+0x78>
 800d314:	3e01      	subs	r6, #1
 800d316:	68a3      	ldr	r3, [r4, #8]
 800d318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d31c:	3b01      	subs	r3, #1
 800d31e:	60a3      	str	r3, [r4, #8]
 800d320:	bb39      	cbnz	r1, 800d372 <_puts_r+0x9e>
 800d322:	2b00      	cmp	r3, #0
 800d324:	da38      	bge.n	800d398 <_puts_r+0xc4>
 800d326:	4622      	mov	r2, r4
 800d328:	210a      	movs	r1, #10
 800d32a:	4628      	mov	r0, r5
 800d32c:	f001 f832 	bl	800e394 <__swbuf_r>
 800d330:	3001      	adds	r0, #1
 800d332:	d011      	beq.n	800d358 <_puts_r+0x84>
 800d334:	250a      	movs	r5, #10
 800d336:	e011      	b.n	800d35c <_puts_r+0x88>
 800d338:	4b1b      	ldr	r3, [pc, #108]	; (800d3a8 <_puts_r+0xd4>)
 800d33a:	429c      	cmp	r4, r3
 800d33c:	d101      	bne.n	800d342 <_puts_r+0x6e>
 800d33e:	68ac      	ldr	r4, [r5, #8]
 800d340:	e7da      	b.n	800d2f8 <_puts_r+0x24>
 800d342:	4b1a      	ldr	r3, [pc, #104]	; (800d3ac <_puts_r+0xd8>)
 800d344:	429c      	cmp	r4, r3
 800d346:	bf08      	it	eq
 800d348:	68ec      	ldreq	r4, [r5, #12]
 800d34a:	e7d5      	b.n	800d2f8 <_puts_r+0x24>
 800d34c:	4621      	mov	r1, r4
 800d34e:	4628      	mov	r0, r5
 800d350:	f001 f884 	bl	800e45c <__swsetup_r>
 800d354:	2800      	cmp	r0, #0
 800d356:	d0dd      	beq.n	800d314 <_puts_r+0x40>
 800d358:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d35c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d35e:	07da      	lsls	r2, r3, #31
 800d360:	d405      	bmi.n	800d36e <_puts_r+0x9a>
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	059b      	lsls	r3, r3, #22
 800d366:	d402      	bmi.n	800d36e <_puts_r+0x9a>
 800d368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d36a:	f7fe fe7f 	bl	800c06c <__retarget_lock_release_recursive>
 800d36e:	4628      	mov	r0, r5
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	2b00      	cmp	r3, #0
 800d374:	da04      	bge.n	800d380 <_puts_r+0xac>
 800d376:	69a2      	ldr	r2, [r4, #24]
 800d378:	429a      	cmp	r2, r3
 800d37a:	dc06      	bgt.n	800d38a <_puts_r+0xb6>
 800d37c:	290a      	cmp	r1, #10
 800d37e:	d004      	beq.n	800d38a <_puts_r+0xb6>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	6022      	str	r2, [r4, #0]
 800d386:	7019      	strb	r1, [r3, #0]
 800d388:	e7c5      	b.n	800d316 <_puts_r+0x42>
 800d38a:	4622      	mov	r2, r4
 800d38c:	4628      	mov	r0, r5
 800d38e:	f001 f801 	bl	800e394 <__swbuf_r>
 800d392:	3001      	adds	r0, #1
 800d394:	d1bf      	bne.n	800d316 <_puts_r+0x42>
 800d396:	e7df      	b.n	800d358 <_puts_r+0x84>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	250a      	movs	r5, #10
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	6022      	str	r2, [r4, #0]
 800d3a0:	701d      	strb	r5, [r3, #0]
 800d3a2:	e7db      	b.n	800d35c <_puts_r+0x88>
 800d3a4:	080117a4 	.word	0x080117a4
 800d3a8:	080117c4 	.word	0x080117c4
 800d3ac:	08011784 	.word	0x08011784

0800d3b0 <puts>:
 800d3b0:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <puts+0xc>)
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	f7ff bf8d 	b.w	800d2d4 <_puts_r>
 800d3ba:	bf00      	nop
 800d3bc:	20000030 	.word	0x20000030

0800d3c0 <_sbrk_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d06      	ldr	r5, [pc, #24]	; (800d3dc <_sbrk_r+0x1c>)
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4608      	mov	r0, r1
 800d3ca:	602b      	str	r3, [r5, #0]
 800d3cc:	f7f7 f836 	bl	800443c <_sbrk>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d102      	bne.n	800d3da <_sbrk_r+0x1a>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	b103      	cbz	r3, 800d3da <_sbrk_r+0x1a>
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	20000a20 	.word	0x20000a20

0800d3e0 <_raise_r>:
 800d3e0:	291f      	cmp	r1, #31
 800d3e2:	b538      	push	{r3, r4, r5, lr}
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	460d      	mov	r5, r1
 800d3e8:	d904      	bls.n	800d3f4 <_raise_r+0x14>
 800d3ea:	2316      	movs	r3, #22
 800d3ec:	6003      	str	r3, [r0, #0]
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3f6:	b112      	cbz	r2, 800d3fe <_raise_r+0x1e>
 800d3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3fc:	b94b      	cbnz	r3, 800d412 <_raise_r+0x32>
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 f830 	bl	800d464 <_getpid_r>
 800d404:	462a      	mov	r2, r5
 800d406:	4601      	mov	r1, r0
 800d408:	4620      	mov	r0, r4
 800d40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d40e:	f000 b817 	b.w	800d440 <_kill_r>
 800d412:	2b01      	cmp	r3, #1
 800d414:	d00a      	beq.n	800d42c <_raise_r+0x4c>
 800d416:	1c59      	adds	r1, r3, #1
 800d418:	d103      	bne.n	800d422 <_raise_r+0x42>
 800d41a:	2316      	movs	r3, #22
 800d41c:	6003      	str	r3, [r0, #0]
 800d41e:	2001      	movs	r0, #1
 800d420:	e7e7      	b.n	800d3f2 <_raise_r+0x12>
 800d422:	2400      	movs	r4, #0
 800d424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d428:	4628      	mov	r0, r5
 800d42a:	4798      	blx	r3
 800d42c:	2000      	movs	r0, #0
 800d42e:	e7e0      	b.n	800d3f2 <_raise_r+0x12>

0800d430 <raise>:
 800d430:	4b02      	ldr	r3, [pc, #8]	; (800d43c <raise+0xc>)
 800d432:	4601      	mov	r1, r0
 800d434:	6818      	ldr	r0, [r3, #0]
 800d436:	f7ff bfd3 	b.w	800d3e0 <_raise_r>
 800d43a:	bf00      	nop
 800d43c:	20000030 	.word	0x20000030

0800d440 <_kill_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4d07      	ldr	r5, [pc, #28]	; (800d460 <_kill_r+0x20>)
 800d444:	2300      	movs	r3, #0
 800d446:	4604      	mov	r4, r0
 800d448:	4608      	mov	r0, r1
 800d44a:	4611      	mov	r1, r2
 800d44c:	602b      	str	r3, [r5, #0]
 800d44e:	f7f6 ff8a 	bl	8004366 <_kill>
 800d452:	1c43      	adds	r3, r0, #1
 800d454:	d102      	bne.n	800d45c <_kill_r+0x1c>
 800d456:	682b      	ldr	r3, [r5, #0]
 800d458:	b103      	cbz	r3, 800d45c <_kill_r+0x1c>
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	bd38      	pop	{r3, r4, r5, pc}
 800d45e:	bf00      	nop
 800d460:	20000a20 	.word	0x20000a20

0800d464 <_getpid_r>:
 800d464:	f7f6 bf77 	b.w	8004356 <_getpid>

0800d468 <siprintf>:
 800d468:	b40e      	push	{r1, r2, r3}
 800d46a:	b500      	push	{lr}
 800d46c:	b09c      	sub	sp, #112	; 0x70
 800d46e:	ab1d      	add	r3, sp, #116	; 0x74
 800d470:	9002      	str	r0, [sp, #8]
 800d472:	9006      	str	r0, [sp, #24]
 800d474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d478:	4809      	ldr	r0, [pc, #36]	; (800d4a0 <siprintf+0x38>)
 800d47a:	9107      	str	r1, [sp, #28]
 800d47c:	9104      	str	r1, [sp, #16]
 800d47e:	4909      	ldr	r1, [pc, #36]	; (800d4a4 <siprintf+0x3c>)
 800d480:	f853 2b04 	ldr.w	r2, [r3], #4
 800d484:	9105      	str	r1, [sp, #20]
 800d486:	6800      	ldr	r0, [r0, #0]
 800d488:	9301      	str	r3, [sp, #4]
 800d48a:	a902      	add	r1, sp, #8
 800d48c:	f003 f86a 	bl	8010564 <_svfiprintf_r>
 800d490:	9b02      	ldr	r3, [sp, #8]
 800d492:	2200      	movs	r2, #0
 800d494:	701a      	strb	r2, [r3, #0]
 800d496:	b01c      	add	sp, #112	; 0x70
 800d498:	f85d eb04 	ldr.w	lr, [sp], #4
 800d49c:	b003      	add	sp, #12
 800d49e:	4770      	bx	lr
 800d4a0:	20000030 	.word	0x20000030
 800d4a4:	ffff0208 	.word	0xffff0208

0800d4a8 <__sread>:
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b0:	f003 f9a0 	bl	80107f4 <_read_r>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	bfab      	itete	ge
 800d4b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d4bc:	181b      	addge	r3, r3, r0
 800d4be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4c2:	bfac      	ite	ge
 800d4c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4c6:	81a3      	strhlt	r3, [r4, #12]
 800d4c8:	bd10      	pop	{r4, pc}

0800d4ca <__swrite>:
 800d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	461f      	mov	r7, r3
 800d4d0:	898b      	ldrh	r3, [r1, #12]
 800d4d2:	05db      	lsls	r3, r3, #23
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	4616      	mov	r6, r2
 800d4da:	d505      	bpl.n	800d4e8 <__swrite+0x1e>
 800d4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f002 fa46 	bl	800f974 <_lseek_r>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	4632      	mov	r2, r6
 800d4f6:	463b      	mov	r3, r7
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fe:	f000 bf9b 	b.w	800e438 <_write_r>

0800d502 <__sseek>:
 800d502:	b510      	push	{r4, lr}
 800d504:	460c      	mov	r4, r1
 800d506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d50a:	f002 fa33 	bl	800f974 <_lseek_r>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	bf15      	itete	ne
 800d514:	6560      	strne	r0, [r4, #84]	; 0x54
 800d516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d51a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d51e:	81a3      	strheq	r3, [r4, #12]
 800d520:	bf18      	it	ne
 800d522:	81a3      	strhne	r3, [r4, #12]
 800d524:	bd10      	pop	{r4, pc}

0800d526 <__sclose>:
 800d526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52a:	f001 b823 	b.w	800e574 <_close_r>

0800d52e <strcpy>:
 800d52e:	4603      	mov	r3, r0
 800d530:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d534:	f803 2b01 	strb.w	r2, [r3], #1
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d1f9      	bne.n	800d530 <strcpy+0x2>
 800d53c:	4770      	bx	lr

0800d53e <strstr>:
 800d53e:	780a      	ldrb	r2, [r1, #0]
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	b96a      	cbnz	r2, 800d560 <strstr+0x22>
 800d544:	bd70      	pop	{r4, r5, r6, pc}
 800d546:	429a      	cmp	r2, r3
 800d548:	d109      	bne.n	800d55e <strstr+0x20>
 800d54a:	460c      	mov	r4, r1
 800d54c:	4605      	mov	r5, r0
 800d54e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0f6      	beq.n	800d544 <strstr+0x6>
 800d556:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d55a:	429e      	cmp	r6, r3
 800d55c:	d0f7      	beq.n	800d54e <strstr+0x10>
 800d55e:	3001      	adds	r0, #1
 800d560:	7803      	ldrb	r3, [r0, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1ef      	bne.n	800d546 <strstr+0x8>
 800d566:	4618      	mov	r0, r3
 800d568:	e7ec      	b.n	800d544 <strstr+0x6>

0800d56a <sulp>:
 800d56a:	b570      	push	{r4, r5, r6, lr}
 800d56c:	4604      	mov	r4, r0
 800d56e:	460d      	mov	r5, r1
 800d570:	ec45 4b10 	vmov	d0, r4, r5
 800d574:	4616      	mov	r6, r2
 800d576:	f002 fe05 	bl	8010184 <__ulp>
 800d57a:	ec51 0b10 	vmov	r0, r1, d0
 800d57e:	b17e      	cbz	r6, 800d5a0 <sulp+0x36>
 800d580:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d584:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dd09      	ble.n	800d5a0 <sulp+0x36>
 800d58c:	051b      	lsls	r3, r3, #20
 800d58e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d592:	2400      	movs	r4, #0
 800d594:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d598:	4622      	mov	r2, r4
 800d59a:	462b      	mov	r3, r5
 800d59c:	f7f3 f85e 	bl	800065c <__aeabi_dmul>
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
 800d5a2:	0000      	movs	r0, r0
 800d5a4:	0000      	movs	r0, r0
	...

0800d5a8 <_strtod_l>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	ed2d 8b02 	vpush	{d8}
 800d5b0:	b09d      	sub	sp, #116	; 0x74
 800d5b2:	461f      	mov	r7, r3
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9318      	str	r3, [sp, #96]	; 0x60
 800d5b8:	4ba2      	ldr	r3, [pc, #648]	; (800d844 <_strtod_l+0x29c>)
 800d5ba:	9213      	str	r2, [sp, #76]	; 0x4c
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	9305      	str	r3, [sp, #20]
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	4688      	mov	r8, r1
 800d5c6:	f7f2 fe85 	bl	80002d4 <strlen>
 800d5ca:	f04f 0a00 	mov.w	sl, #0
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	f04f 0b00 	mov.w	fp, #0
 800d5d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d5d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5da:	781a      	ldrb	r2, [r3, #0]
 800d5dc:	2a2b      	cmp	r2, #43	; 0x2b
 800d5de:	d04e      	beq.n	800d67e <_strtod_l+0xd6>
 800d5e0:	d83b      	bhi.n	800d65a <_strtod_l+0xb2>
 800d5e2:	2a0d      	cmp	r2, #13
 800d5e4:	d834      	bhi.n	800d650 <_strtod_l+0xa8>
 800d5e6:	2a08      	cmp	r2, #8
 800d5e8:	d834      	bhi.n	800d654 <_strtod_l+0xac>
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	d03e      	beq.n	800d66c <_strtod_l+0xc4>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d5f4:	7833      	ldrb	r3, [r6, #0]
 800d5f6:	2b30      	cmp	r3, #48	; 0x30
 800d5f8:	f040 80b0 	bne.w	800d75c <_strtod_l+0x1b4>
 800d5fc:	7873      	ldrb	r3, [r6, #1]
 800d5fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d602:	2b58      	cmp	r3, #88	; 0x58
 800d604:	d168      	bne.n	800d6d8 <_strtod_l+0x130>
 800d606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	ab18      	add	r3, sp, #96	; 0x60
 800d60c:	9702      	str	r7, [sp, #8]
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	4a8d      	ldr	r2, [pc, #564]	; (800d848 <_strtod_l+0x2a0>)
 800d612:	ab19      	add	r3, sp, #100	; 0x64
 800d614:	a917      	add	r1, sp, #92	; 0x5c
 800d616:	4620      	mov	r0, r4
 800d618:	f001 fea0 	bl	800f35c <__gethex>
 800d61c:	f010 0707 	ands.w	r7, r0, #7
 800d620:	4605      	mov	r5, r0
 800d622:	d005      	beq.n	800d630 <_strtod_l+0x88>
 800d624:	2f06      	cmp	r7, #6
 800d626:	d12c      	bne.n	800d682 <_strtod_l+0xda>
 800d628:	3601      	adds	r6, #1
 800d62a:	2300      	movs	r3, #0
 800d62c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d62e:	930a      	str	r3, [sp, #40]	; 0x28
 800d630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 8590 	bne.w	800e158 <_strtod_l+0xbb0>
 800d638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d63a:	b1eb      	cbz	r3, 800d678 <_strtod_l+0xd0>
 800d63c:	4652      	mov	r2, sl
 800d63e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d642:	ec43 2b10 	vmov	d0, r2, r3
 800d646:	b01d      	add	sp, #116	; 0x74
 800d648:	ecbd 8b02 	vpop	{d8}
 800d64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d650:	2a20      	cmp	r2, #32
 800d652:	d1cc      	bne.n	800d5ee <_strtod_l+0x46>
 800d654:	3301      	adds	r3, #1
 800d656:	9317      	str	r3, [sp, #92]	; 0x5c
 800d658:	e7be      	b.n	800d5d8 <_strtod_l+0x30>
 800d65a:	2a2d      	cmp	r2, #45	; 0x2d
 800d65c:	d1c7      	bne.n	800d5ee <_strtod_l+0x46>
 800d65e:	2201      	movs	r2, #1
 800d660:	920a      	str	r2, [sp, #40]	; 0x28
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	9217      	str	r2, [sp, #92]	; 0x5c
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1c2      	bne.n	800d5f2 <_strtod_l+0x4a>
 800d66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d66e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d672:	2b00      	cmp	r3, #0
 800d674:	f040 856e 	bne.w	800e154 <_strtod_l+0xbac>
 800d678:	4652      	mov	r2, sl
 800d67a:	465b      	mov	r3, fp
 800d67c:	e7e1      	b.n	800d642 <_strtod_l+0x9a>
 800d67e:	2200      	movs	r2, #0
 800d680:	e7ee      	b.n	800d660 <_strtod_l+0xb8>
 800d682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d684:	b13a      	cbz	r2, 800d696 <_strtod_l+0xee>
 800d686:	2135      	movs	r1, #53	; 0x35
 800d688:	a81a      	add	r0, sp, #104	; 0x68
 800d68a:	f002 fe86 	bl	801039a <__copybits>
 800d68e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d690:	4620      	mov	r0, r4
 800d692:	f002 fa45 	bl	800fb20 <_Bfree>
 800d696:	3f01      	subs	r7, #1
 800d698:	2f04      	cmp	r7, #4
 800d69a:	d806      	bhi.n	800d6aa <_strtod_l+0x102>
 800d69c:	e8df f007 	tbb	[pc, r7]
 800d6a0:	1714030a 	.word	0x1714030a
 800d6a4:	0a          	.byte	0x0a
 800d6a5:	00          	.byte	0x00
 800d6a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d6aa:	0728      	lsls	r0, r5, #28
 800d6ac:	d5c0      	bpl.n	800d630 <_strtod_l+0x88>
 800d6ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d6b2:	e7bd      	b.n	800d630 <_strtod_l+0x88>
 800d6b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d6b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d6ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d6be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d6c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d6c6:	e7f0      	b.n	800d6aa <_strtod_l+0x102>
 800d6c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d84c <_strtod_l+0x2a4>
 800d6cc:	e7ed      	b.n	800d6aa <_strtod_l+0x102>
 800d6ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d6d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d6d6:	e7e8      	b.n	800d6aa <_strtod_l+0x102>
 800d6d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6de:	785b      	ldrb	r3, [r3, #1]
 800d6e0:	2b30      	cmp	r3, #48	; 0x30
 800d6e2:	d0f9      	beq.n	800d6d8 <_strtod_l+0x130>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0a3      	beq.n	800d630 <_strtod_l+0x88>
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	f04f 0900 	mov.w	r9, #0
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6f2:	9308      	str	r3, [sp, #32]
 800d6f4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d6f8:	464f      	mov	r7, r9
 800d6fa:	220a      	movs	r2, #10
 800d6fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d6fe:	7806      	ldrb	r6, [r0, #0]
 800d700:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d704:	b2d9      	uxtb	r1, r3
 800d706:	2909      	cmp	r1, #9
 800d708:	d92a      	bls.n	800d760 <_strtod_l+0x1b8>
 800d70a:	9905      	ldr	r1, [sp, #20]
 800d70c:	462a      	mov	r2, r5
 800d70e:	f003 f883 	bl	8010818 <strncmp>
 800d712:	b398      	cbz	r0, 800d77c <_strtod_l+0x1d4>
 800d714:	2000      	movs	r0, #0
 800d716:	4632      	mov	r2, r6
 800d718:	463d      	mov	r5, r7
 800d71a:	9005      	str	r0, [sp, #20]
 800d71c:	4603      	mov	r3, r0
 800d71e:	2a65      	cmp	r2, #101	; 0x65
 800d720:	d001      	beq.n	800d726 <_strtod_l+0x17e>
 800d722:	2a45      	cmp	r2, #69	; 0x45
 800d724:	d118      	bne.n	800d758 <_strtod_l+0x1b0>
 800d726:	b91d      	cbnz	r5, 800d730 <_strtod_l+0x188>
 800d728:	9a04      	ldr	r2, [sp, #16]
 800d72a:	4302      	orrs	r2, r0
 800d72c:	d09e      	beq.n	800d66c <_strtod_l+0xc4>
 800d72e:	2500      	movs	r5, #0
 800d730:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d734:	f108 0201 	add.w	r2, r8, #1
 800d738:	9217      	str	r2, [sp, #92]	; 0x5c
 800d73a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d73e:	2a2b      	cmp	r2, #43	; 0x2b
 800d740:	d075      	beq.n	800d82e <_strtod_l+0x286>
 800d742:	2a2d      	cmp	r2, #45	; 0x2d
 800d744:	d07b      	beq.n	800d83e <_strtod_l+0x296>
 800d746:	f04f 0c00 	mov.w	ip, #0
 800d74a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d74e:	2909      	cmp	r1, #9
 800d750:	f240 8082 	bls.w	800d858 <_strtod_l+0x2b0>
 800d754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d758:	2600      	movs	r6, #0
 800d75a:	e09d      	b.n	800d898 <_strtod_l+0x2f0>
 800d75c:	2300      	movs	r3, #0
 800d75e:	e7c4      	b.n	800d6ea <_strtod_l+0x142>
 800d760:	2f08      	cmp	r7, #8
 800d762:	bfd8      	it	le
 800d764:	9907      	ldrle	r1, [sp, #28]
 800d766:	f100 0001 	add.w	r0, r0, #1
 800d76a:	bfda      	itte	le
 800d76c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d770:	9307      	strle	r3, [sp, #28]
 800d772:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d776:	3701      	adds	r7, #1
 800d778:	9017      	str	r0, [sp, #92]	; 0x5c
 800d77a:	e7bf      	b.n	800d6fc <_strtod_l+0x154>
 800d77c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d77e:	195a      	adds	r2, r3, r5
 800d780:	9217      	str	r2, [sp, #92]	; 0x5c
 800d782:	5d5a      	ldrb	r2, [r3, r5]
 800d784:	2f00      	cmp	r7, #0
 800d786:	d037      	beq.n	800d7f8 <_strtod_l+0x250>
 800d788:	9005      	str	r0, [sp, #20]
 800d78a:	463d      	mov	r5, r7
 800d78c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d790:	2b09      	cmp	r3, #9
 800d792:	d912      	bls.n	800d7ba <_strtod_l+0x212>
 800d794:	2301      	movs	r3, #1
 800d796:	e7c2      	b.n	800d71e <_strtod_l+0x176>
 800d798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d79e:	785a      	ldrb	r2, [r3, #1]
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	2a30      	cmp	r2, #48	; 0x30
 800d7a4:	d0f8      	beq.n	800d798 <_strtod_l+0x1f0>
 800d7a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d7aa:	2b08      	cmp	r3, #8
 800d7ac:	f200 84d9 	bhi.w	800e162 <_strtod_l+0xbba>
 800d7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7b2:	9005      	str	r0, [sp, #20]
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	9308      	str	r3, [sp, #32]
 800d7b8:	4605      	mov	r5, r0
 800d7ba:	3a30      	subs	r2, #48	; 0x30
 800d7bc:	f100 0301 	add.w	r3, r0, #1
 800d7c0:	d014      	beq.n	800d7ec <_strtod_l+0x244>
 800d7c2:	9905      	ldr	r1, [sp, #20]
 800d7c4:	4419      	add	r1, r3
 800d7c6:	9105      	str	r1, [sp, #20]
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	eb00 0e05 	add.w	lr, r0, r5
 800d7ce:	210a      	movs	r1, #10
 800d7d0:	4573      	cmp	r3, lr
 800d7d2:	d113      	bne.n	800d7fc <_strtod_l+0x254>
 800d7d4:	182b      	adds	r3, r5, r0
 800d7d6:	2b08      	cmp	r3, #8
 800d7d8:	f105 0501 	add.w	r5, r5, #1
 800d7dc:	4405      	add	r5, r0
 800d7de:	dc1c      	bgt.n	800d81a <_strtod_l+0x272>
 800d7e0:	9907      	ldr	r1, [sp, #28]
 800d7e2:	230a      	movs	r3, #10
 800d7e4:	fb03 2301 	mla	r3, r3, r1, r2
 800d7e8:	9307      	str	r3, [sp, #28]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d7ee:	1c51      	adds	r1, r2, #1
 800d7f0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d7f2:	7852      	ldrb	r2, [r2, #1]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	e7c9      	b.n	800d78c <_strtod_l+0x1e4>
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	e7d2      	b.n	800d7a2 <_strtod_l+0x1fa>
 800d7fc:	2b08      	cmp	r3, #8
 800d7fe:	dc04      	bgt.n	800d80a <_strtod_l+0x262>
 800d800:	9e07      	ldr	r6, [sp, #28]
 800d802:	434e      	muls	r6, r1
 800d804:	9607      	str	r6, [sp, #28]
 800d806:	3301      	adds	r3, #1
 800d808:	e7e2      	b.n	800d7d0 <_strtod_l+0x228>
 800d80a:	f103 0c01 	add.w	ip, r3, #1
 800d80e:	f1bc 0f10 	cmp.w	ip, #16
 800d812:	bfd8      	it	le
 800d814:	fb01 f909 	mulle.w	r9, r1, r9
 800d818:	e7f5      	b.n	800d806 <_strtod_l+0x25e>
 800d81a:	2d10      	cmp	r5, #16
 800d81c:	bfdc      	itt	le
 800d81e:	230a      	movle	r3, #10
 800d820:	fb03 2909 	mlale	r9, r3, r9, r2
 800d824:	e7e1      	b.n	800d7ea <_strtod_l+0x242>
 800d826:	2300      	movs	r3, #0
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	2301      	movs	r3, #1
 800d82c:	e77c      	b.n	800d728 <_strtod_l+0x180>
 800d82e:	f04f 0c00 	mov.w	ip, #0
 800d832:	f108 0202 	add.w	r2, r8, #2
 800d836:	9217      	str	r2, [sp, #92]	; 0x5c
 800d838:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d83c:	e785      	b.n	800d74a <_strtod_l+0x1a2>
 800d83e:	f04f 0c01 	mov.w	ip, #1
 800d842:	e7f6      	b.n	800d832 <_strtod_l+0x28a>
 800d844:	08011b18 	.word	0x08011b18
 800d848:	08011834 	.word	0x08011834
 800d84c:	7ff00000 	.word	0x7ff00000
 800d850:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d852:	1c51      	adds	r1, r2, #1
 800d854:	9117      	str	r1, [sp, #92]	; 0x5c
 800d856:	7852      	ldrb	r2, [r2, #1]
 800d858:	2a30      	cmp	r2, #48	; 0x30
 800d85a:	d0f9      	beq.n	800d850 <_strtod_l+0x2a8>
 800d85c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d860:	2908      	cmp	r1, #8
 800d862:	f63f af79 	bhi.w	800d758 <_strtod_l+0x1b0>
 800d866:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d86a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d86c:	9206      	str	r2, [sp, #24]
 800d86e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d870:	1c51      	adds	r1, r2, #1
 800d872:	9117      	str	r1, [sp, #92]	; 0x5c
 800d874:	7852      	ldrb	r2, [r2, #1]
 800d876:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d87a:	2e09      	cmp	r6, #9
 800d87c:	d937      	bls.n	800d8ee <_strtod_l+0x346>
 800d87e:	9e06      	ldr	r6, [sp, #24]
 800d880:	1b89      	subs	r1, r1, r6
 800d882:	2908      	cmp	r1, #8
 800d884:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d888:	dc02      	bgt.n	800d890 <_strtod_l+0x2e8>
 800d88a:	4576      	cmp	r6, lr
 800d88c:	bfa8      	it	ge
 800d88e:	4676      	movge	r6, lr
 800d890:	f1bc 0f00 	cmp.w	ip, #0
 800d894:	d000      	beq.n	800d898 <_strtod_l+0x2f0>
 800d896:	4276      	negs	r6, r6
 800d898:	2d00      	cmp	r5, #0
 800d89a:	d14d      	bne.n	800d938 <_strtod_l+0x390>
 800d89c:	9904      	ldr	r1, [sp, #16]
 800d89e:	4301      	orrs	r1, r0
 800d8a0:	f47f aec6 	bne.w	800d630 <_strtod_l+0x88>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f47f aee1 	bne.w	800d66c <_strtod_l+0xc4>
 800d8aa:	2a69      	cmp	r2, #105	; 0x69
 800d8ac:	d027      	beq.n	800d8fe <_strtod_l+0x356>
 800d8ae:	dc24      	bgt.n	800d8fa <_strtod_l+0x352>
 800d8b0:	2a49      	cmp	r2, #73	; 0x49
 800d8b2:	d024      	beq.n	800d8fe <_strtod_l+0x356>
 800d8b4:	2a4e      	cmp	r2, #78	; 0x4e
 800d8b6:	f47f aed9 	bne.w	800d66c <_strtod_l+0xc4>
 800d8ba:	499f      	ldr	r1, [pc, #636]	; (800db38 <_strtod_l+0x590>)
 800d8bc:	a817      	add	r0, sp, #92	; 0x5c
 800d8be:	f001 ffa5 	bl	800f80c <__match>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	f43f aed2 	beq.w	800d66c <_strtod_l+0xc4>
 800d8c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b28      	cmp	r3, #40	; 0x28
 800d8ce:	d12d      	bne.n	800d92c <_strtod_l+0x384>
 800d8d0:	499a      	ldr	r1, [pc, #616]	; (800db3c <_strtod_l+0x594>)
 800d8d2:	aa1a      	add	r2, sp, #104	; 0x68
 800d8d4:	a817      	add	r0, sp, #92	; 0x5c
 800d8d6:	f001 ffad 	bl	800f834 <__hexnan>
 800d8da:	2805      	cmp	r0, #5
 800d8dc:	d126      	bne.n	800d92c <_strtod_l+0x384>
 800d8de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d8e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d8e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d8ec:	e6a0      	b.n	800d630 <_strtod_l+0x88>
 800d8ee:	210a      	movs	r1, #10
 800d8f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d8f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d8f8:	e7b9      	b.n	800d86e <_strtod_l+0x2c6>
 800d8fa:	2a6e      	cmp	r2, #110	; 0x6e
 800d8fc:	e7db      	b.n	800d8b6 <_strtod_l+0x30e>
 800d8fe:	4990      	ldr	r1, [pc, #576]	; (800db40 <_strtod_l+0x598>)
 800d900:	a817      	add	r0, sp, #92	; 0x5c
 800d902:	f001 ff83 	bl	800f80c <__match>
 800d906:	2800      	cmp	r0, #0
 800d908:	f43f aeb0 	beq.w	800d66c <_strtod_l+0xc4>
 800d90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d90e:	498d      	ldr	r1, [pc, #564]	; (800db44 <_strtod_l+0x59c>)
 800d910:	3b01      	subs	r3, #1
 800d912:	a817      	add	r0, sp, #92	; 0x5c
 800d914:	9317      	str	r3, [sp, #92]	; 0x5c
 800d916:	f001 ff79 	bl	800f80c <__match>
 800d91a:	b910      	cbnz	r0, 800d922 <_strtod_l+0x37a>
 800d91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d91e:	3301      	adds	r3, #1
 800d920:	9317      	str	r3, [sp, #92]	; 0x5c
 800d922:	f8df b230 	ldr.w	fp, [pc, #560]	; 800db54 <_strtod_l+0x5ac>
 800d926:	f04f 0a00 	mov.w	sl, #0
 800d92a:	e681      	b.n	800d630 <_strtod_l+0x88>
 800d92c:	4886      	ldr	r0, [pc, #536]	; (800db48 <_strtod_l+0x5a0>)
 800d92e:	f7fe f977 	bl	800bc20 <nan>
 800d932:	ec5b ab10 	vmov	sl, fp, d0
 800d936:	e67b      	b.n	800d630 <_strtod_l+0x88>
 800d938:	9b05      	ldr	r3, [sp, #20]
 800d93a:	9807      	ldr	r0, [sp, #28]
 800d93c:	1af3      	subs	r3, r6, r3
 800d93e:	2f00      	cmp	r7, #0
 800d940:	bf08      	it	eq
 800d942:	462f      	moveq	r7, r5
 800d944:	2d10      	cmp	r5, #16
 800d946:	9306      	str	r3, [sp, #24]
 800d948:	46a8      	mov	r8, r5
 800d94a:	bfa8      	it	ge
 800d94c:	f04f 0810 	movge.w	r8, #16
 800d950:	f7f2 fe0a 	bl	8000568 <__aeabi_ui2d>
 800d954:	2d09      	cmp	r5, #9
 800d956:	4682      	mov	sl, r0
 800d958:	468b      	mov	fp, r1
 800d95a:	dd13      	ble.n	800d984 <_strtod_l+0x3dc>
 800d95c:	4b7b      	ldr	r3, [pc, #492]	; (800db4c <_strtod_l+0x5a4>)
 800d95e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d962:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d966:	f7f2 fe79 	bl	800065c <__aeabi_dmul>
 800d96a:	4682      	mov	sl, r0
 800d96c:	4648      	mov	r0, r9
 800d96e:	468b      	mov	fp, r1
 800d970:	f7f2 fdfa 	bl	8000568 <__aeabi_ui2d>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4650      	mov	r0, sl
 800d97a:	4659      	mov	r1, fp
 800d97c:	f7f2 fcb8 	bl	80002f0 <__adddf3>
 800d980:	4682      	mov	sl, r0
 800d982:	468b      	mov	fp, r1
 800d984:	2d0f      	cmp	r5, #15
 800d986:	dc38      	bgt.n	800d9fa <_strtod_l+0x452>
 800d988:	9b06      	ldr	r3, [sp, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f43f ae50 	beq.w	800d630 <_strtod_l+0x88>
 800d990:	dd24      	ble.n	800d9dc <_strtod_l+0x434>
 800d992:	2b16      	cmp	r3, #22
 800d994:	dc0b      	bgt.n	800d9ae <_strtod_l+0x406>
 800d996:	496d      	ldr	r1, [pc, #436]	; (800db4c <_strtod_l+0x5a4>)
 800d998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a0:	4652      	mov	r2, sl
 800d9a2:	465b      	mov	r3, fp
 800d9a4:	f7f2 fe5a 	bl	800065c <__aeabi_dmul>
 800d9a8:	4682      	mov	sl, r0
 800d9aa:	468b      	mov	fp, r1
 800d9ac:	e640      	b.n	800d630 <_strtod_l+0x88>
 800d9ae:	9a06      	ldr	r2, [sp, #24]
 800d9b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	db20      	blt.n	800d9fa <_strtod_l+0x452>
 800d9b8:	4c64      	ldr	r4, [pc, #400]	; (800db4c <_strtod_l+0x5a4>)
 800d9ba:	f1c5 050f 	rsb	r5, r5, #15
 800d9be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	465b      	mov	r3, fp
 800d9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9ca:	f7f2 fe47 	bl	800065c <__aeabi_dmul>
 800d9ce:	9b06      	ldr	r3, [sp, #24]
 800d9d0:	1b5d      	subs	r5, r3, r5
 800d9d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d9d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d9da:	e7e3      	b.n	800d9a4 <_strtod_l+0x3fc>
 800d9dc:	9b06      	ldr	r3, [sp, #24]
 800d9de:	3316      	adds	r3, #22
 800d9e0:	db0b      	blt.n	800d9fa <_strtod_l+0x452>
 800d9e2:	9b05      	ldr	r3, [sp, #20]
 800d9e4:	1b9e      	subs	r6, r3, r6
 800d9e6:	4b59      	ldr	r3, [pc, #356]	; (800db4c <_strtod_l+0x5a4>)
 800d9e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d9ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9f0:	4650      	mov	r0, sl
 800d9f2:	4659      	mov	r1, fp
 800d9f4:	f7f2 ff5c 	bl	80008b0 <__aeabi_ddiv>
 800d9f8:	e7d6      	b.n	800d9a8 <_strtod_l+0x400>
 800d9fa:	9b06      	ldr	r3, [sp, #24]
 800d9fc:	eba5 0808 	sub.w	r8, r5, r8
 800da00:	4498      	add	r8, r3
 800da02:	f1b8 0f00 	cmp.w	r8, #0
 800da06:	dd74      	ble.n	800daf2 <_strtod_l+0x54a>
 800da08:	f018 030f 	ands.w	r3, r8, #15
 800da0c:	d00a      	beq.n	800da24 <_strtod_l+0x47c>
 800da0e:	494f      	ldr	r1, [pc, #316]	; (800db4c <_strtod_l+0x5a4>)
 800da10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da14:	4652      	mov	r2, sl
 800da16:	465b      	mov	r3, fp
 800da18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1c:	f7f2 fe1e 	bl	800065c <__aeabi_dmul>
 800da20:	4682      	mov	sl, r0
 800da22:	468b      	mov	fp, r1
 800da24:	f038 080f 	bics.w	r8, r8, #15
 800da28:	d04f      	beq.n	800daca <_strtod_l+0x522>
 800da2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800da2e:	dd22      	ble.n	800da76 <_strtod_l+0x4ce>
 800da30:	2500      	movs	r5, #0
 800da32:	462e      	mov	r6, r5
 800da34:	9507      	str	r5, [sp, #28]
 800da36:	9505      	str	r5, [sp, #20]
 800da38:	2322      	movs	r3, #34	; 0x22
 800da3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800db54 <_strtod_l+0x5ac>
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	f04f 0a00 	mov.w	sl, #0
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f43f adf2 	beq.w	800d630 <_strtod_l+0x88>
 800da4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da4e:	4620      	mov	r0, r4
 800da50:	f002 f866 	bl	800fb20 <_Bfree>
 800da54:	9905      	ldr	r1, [sp, #20]
 800da56:	4620      	mov	r0, r4
 800da58:	f002 f862 	bl	800fb20 <_Bfree>
 800da5c:	4631      	mov	r1, r6
 800da5e:	4620      	mov	r0, r4
 800da60:	f002 f85e 	bl	800fb20 <_Bfree>
 800da64:	9907      	ldr	r1, [sp, #28]
 800da66:	4620      	mov	r0, r4
 800da68:	f002 f85a 	bl	800fb20 <_Bfree>
 800da6c:	4629      	mov	r1, r5
 800da6e:	4620      	mov	r0, r4
 800da70:	f002 f856 	bl	800fb20 <_Bfree>
 800da74:	e5dc      	b.n	800d630 <_strtod_l+0x88>
 800da76:	4b36      	ldr	r3, [pc, #216]	; (800db50 <_strtod_l+0x5a8>)
 800da78:	9304      	str	r3, [sp, #16]
 800da7a:	2300      	movs	r3, #0
 800da7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800da80:	4650      	mov	r0, sl
 800da82:	4659      	mov	r1, fp
 800da84:	4699      	mov	r9, r3
 800da86:	f1b8 0f01 	cmp.w	r8, #1
 800da8a:	dc21      	bgt.n	800dad0 <_strtod_l+0x528>
 800da8c:	b10b      	cbz	r3, 800da92 <_strtod_l+0x4ea>
 800da8e:	4682      	mov	sl, r0
 800da90:	468b      	mov	fp, r1
 800da92:	4b2f      	ldr	r3, [pc, #188]	; (800db50 <_strtod_l+0x5a8>)
 800da94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800da98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800da9c:	4652      	mov	r2, sl
 800da9e:	465b      	mov	r3, fp
 800daa0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800daa4:	f7f2 fdda 	bl	800065c <__aeabi_dmul>
 800daa8:	4b2a      	ldr	r3, [pc, #168]	; (800db54 <_strtod_l+0x5ac>)
 800daaa:	460a      	mov	r2, r1
 800daac:	400b      	ands	r3, r1
 800daae:	492a      	ldr	r1, [pc, #168]	; (800db58 <_strtod_l+0x5b0>)
 800dab0:	428b      	cmp	r3, r1
 800dab2:	4682      	mov	sl, r0
 800dab4:	d8bc      	bhi.n	800da30 <_strtod_l+0x488>
 800dab6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800daba:	428b      	cmp	r3, r1
 800dabc:	bf86      	itte	hi
 800dabe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800db5c <_strtod_l+0x5b4>
 800dac2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800dac6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800daca:	2300      	movs	r3, #0
 800dacc:	9304      	str	r3, [sp, #16]
 800dace:	e084      	b.n	800dbda <_strtod_l+0x632>
 800dad0:	f018 0f01 	tst.w	r8, #1
 800dad4:	d005      	beq.n	800dae2 <_strtod_l+0x53a>
 800dad6:	9b04      	ldr	r3, [sp, #16]
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f7f2 fdbe 	bl	800065c <__aeabi_dmul>
 800dae0:	2301      	movs	r3, #1
 800dae2:	9a04      	ldr	r2, [sp, #16]
 800dae4:	3208      	adds	r2, #8
 800dae6:	f109 0901 	add.w	r9, r9, #1
 800daea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800daee:	9204      	str	r2, [sp, #16]
 800daf0:	e7c9      	b.n	800da86 <_strtod_l+0x4de>
 800daf2:	d0ea      	beq.n	800daca <_strtod_l+0x522>
 800daf4:	f1c8 0800 	rsb	r8, r8, #0
 800daf8:	f018 020f 	ands.w	r2, r8, #15
 800dafc:	d00a      	beq.n	800db14 <_strtod_l+0x56c>
 800dafe:	4b13      	ldr	r3, [pc, #76]	; (800db4c <_strtod_l+0x5a4>)
 800db00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db04:	4650      	mov	r0, sl
 800db06:	4659      	mov	r1, fp
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	f7f2 fed0 	bl	80008b0 <__aeabi_ddiv>
 800db10:	4682      	mov	sl, r0
 800db12:	468b      	mov	fp, r1
 800db14:	ea5f 1828 	movs.w	r8, r8, asr #4
 800db18:	d0d7      	beq.n	800daca <_strtod_l+0x522>
 800db1a:	f1b8 0f1f 	cmp.w	r8, #31
 800db1e:	dd1f      	ble.n	800db60 <_strtod_l+0x5b8>
 800db20:	2500      	movs	r5, #0
 800db22:	462e      	mov	r6, r5
 800db24:	9507      	str	r5, [sp, #28]
 800db26:	9505      	str	r5, [sp, #20]
 800db28:	2322      	movs	r3, #34	; 0x22
 800db2a:	f04f 0a00 	mov.w	sl, #0
 800db2e:	f04f 0b00 	mov.w	fp, #0
 800db32:	6023      	str	r3, [r4, #0]
 800db34:	e786      	b.n	800da44 <_strtod_l+0x49c>
 800db36:	bf00      	nop
 800db38:	08011806 	.word	0x08011806
 800db3c:	08011848 	.word	0x08011848
 800db40:	080117fe 	.word	0x080117fe
 800db44:	08011a3c 	.word	0x08011a3c
 800db48:	08011937 	.word	0x08011937
 800db4c:	08011bb0 	.word	0x08011bb0
 800db50:	08011b88 	.word	0x08011b88
 800db54:	7ff00000 	.word	0x7ff00000
 800db58:	7ca00000 	.word	0x7ca00000
 800db5c:	7fefffff 	.word	0x7fefffff
 800db60:	f018 0310 	ands.w	r3, r8, #16
 800db64:	bf18      	it	ne
 800db66:	236a      	movne	r3, #106	; 0x6a
 800db68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800df18 <_strtod_l+0x970>
 800db6c:	9304      	str	r3, [sp, #16]
 800db6e:	4650      	mov	r0, sl
 800db70:	4659      	mov	r1, fp
 800db72:	2300      	movs	r3, #0
 800db74:	f018 0f01 	tst.w	r8, #1
 800db78:	d004      	beq.n	800db84 <_strtod_l+0x5dc>
 800db7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800db7e:	f7f2 fd6d 	bl	800065c <__aeabi_dmul>
 800db82:	2301      	movs	r3, #1
 800db84:	ea5f 0868 	movs.w	r8, r8, asr #1
 800db88:	f109 0908 	add.w	r9, r9, #8
 800db8c:	d1f2      	bne.n	800db74 <_strtod_l+0x5cc>
 800db8e:	b10b      	cbz	r3, 800db94 <_strtod_l+0x5ec>
 800db90:	4682      	mov	sl, r0
 800db92:	468b      	mov	fp, r1
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	b1c3      	cbz	r3, 800dbca <_strtod_l+0x622>
 800db98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800db9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	4659      	mov	r1, fp
 800dba4:	dd11      	ble.n	800dbca <_strtod_l+0x622>
 800dba6:	2b1f      	cmp	r3, #31
 800dba8:	f340 8124 	ble.w	800ddf4 <_strtod_l+0x84c>
 800dbac:	2b34      	cmp	r3, #52	; 0x34
 800dbae:	bfde      	ittt	le
 800dbb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dbb4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800dbb8:	fa03 f202 	lslle.w	r2, r3, r2
 800dbbc:	f04f 0a00 	mov.w	sl, #0
 800dbc0:	bfcc      	ite	gt
 800dbc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dbc6:	ea02 0b01 	andle.w	fp, r2, r1
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2300      	movs	r3, #0
 800dbce:	4650      	mov	r0, sl
 800dbd0:	4659      	mov	r1, fp
 800dbd2:	f7f2 ffab 	bl	8000b2c <__aeabi_dcmpeq>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d1a2      	bne.n	800db20 <_strtod_l+0x578>
 800dbda:	9b07      	ldr	r3, [sp, #28]
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	9908      	ldr	r1, [sp, #32]
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f002 f803 	bl	800fbf0 <__s2b>
 800dbea:	9007      	str	r0, [sp, #28]
 800dbec:	2800      	cmp	r0, #0
 800dbee:	f43f af1f 	beq.w	800da30 <_strtod_l+0x488>
 800dbf2:	9b05      	ldr	r3, [sp, #20]
 800dbf4:	1b9e      	subs	r6, r3, r6
 800dbf6:	9b06      	ldr	r3, [sp, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	bfb4      	ite	lt
 800dbfc:	4633      	movlt	r3, r6
 800dbfe:	2300      	movge	r3, #0
 800dc00:	930c      	str	r3, [sp, #48]	; 0x30
 800dc02:	9b06      	ldr	r3, [sp, #24]
 800dc04:	2500      	movs	r5, #0
 800dc06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc0a:	9312      	str	r3, [sp, #72]	; 0x48
 800dc0c:	462e      	mov	r6, r5
 800dc0e:	9b07      	ldr	r3, [sp, #28]
 800dc10:	4620      	mov	r0, r4
 800dc12:	6859      	ldr	r1, [r3, #4]
 800dc14:	f001 ff44 	bl	800faa0 <_Balloc>
 800dc18:	9005      	str	r0, [sp, #20]
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f43f af0c 	beq.w	800da38 <_strtod_l+0x490>
 800dc20:	9b07      	ldr	r3, [sp, #28]
 800dc22:	691a      	ldr	r2, [r3, #16]
 800dc24:	3202      	adds	r2, #2
 800dc26:	f103 010c 	add.w	r1, r3, #12
 800dc2a:	0092      	lsls	r2, r2, #2
 800dc2c:	300c      	adds	r0, #12
 800dc2e:	f7fe fa3f 	bl	800c0b0 <memcpy>
 800dc32:	ec4b ab10 	vmov	d0, sl, fp
 800dc36:	aa1a      	add	r2, sp, #104	; 0x68
 800dc38:	a919      	add	r1, sp, #100	; 0x64
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f002 fb1e 	bl	801027c <__d2b>
 800dc40:	ec4b ab18 	vmov	d8, sl, fp
 800dc44:	9018      	str	r0, [sp, #96]	; 0x60
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f43f aef6 	beq.w	800da38 <_strtod_l+0x490>
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f002 f868 	bl	800fd24 <__i2b>
 800dc54:	4606      	mov	r6, r0
 800dc56:	2800      	cmp	r0, #0
 800dc58:	f43f aeee 	beq.w	800da38 <_strtod_l+0x490>
 800dc5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc5e:	9904      	ldr	r1, [sp, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bfab      	itete	ge
 800dc64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800dc66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dc68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dc6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800dc6e:	bfac      	ite	ge
 800dc70:	eb03 0902 	addge.w	r9, r3, r2
 800dc74:	1ad7      	sublt	r7, r2, r3
 800dc76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc78:	eba3 0801 	sub.w	r8, r3, r1
 800dc7c:	4490      	add	r8, r2
 800dc7e:	4ba1      	ldr	r3, [pc, #644]	; (800df04 <_strtod_l+0x95c>)
 800dc80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dc84:	4598      	cmp	r8, r3
 800dc86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc8a:	f280 80c7 	bge.w	800de1c <_strtod_l+0x874>
 800dc8e:	eba3 0308 	sub.w	r3, r3, r8
 800dc92:	2b1f      	cmp	r3, #31
 800dc94:	eba2 0203 	sub.w	r2, r2, r3
 800dc98:	f04f 0101 	mov.w	r1, #1
 800dc9c:	f300 80b1 	bgt.w	800de02 <_strtod_l+0x85a>
 800dca0:	fa01 f303 	lsl.w	r3, r1, r3
 800dca4:	930d      	str	r3, [sp, #52]	; 0x34
 800dca6:	2300      	movs	r3, #0
 800dca8:	9308      	str	r3, [sp, #32]
 800dcaa:	eb09 0802 	add.w	r8, r9, r2
 800dcae:	9b04      	ldr	r3, [sp, #16]
 800dcb0:	45c1      	cmp	r9, r8
 800dcb2:	4417      	add	r7, r2
 800dcb4:	441f      	add	r7, r3
 800dcb6:	464b      	mov	r3, r9
 800dcb8:	bfa8      	it	ge
 800dcba:	4643      	movge	r3, r8
 800dcbc:	42bb      	cmp	r3, r7
 800dcbe:	bfa8      	it	ge
 800dcc0:	463b      	movge	r3, r7
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	bfc2      	ittt	gt
 800dcc6:	eba8 0803 	subgt.w	r8, r8, r3
 800dcca:	1aff      	subgt	r7, r7, r3
 800dccc:	eba9 0903 	subgt.w	r9, r9, r3
 800dcd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dd17      	ble.n	800dd06 <_strtod_l+0x75e>
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f002 f8e2 	bl	800fea4 <__pow5mult>
 800dce0:	4606      	mov	r6, r0
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f43f aea8 	beq.w	800da38 <_strtod_l+0x490>
 800dce8:	4601      	mov	r1, r0
 800dcea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dcec:	4620      	mov	r0, r4
 800dcee:	f002 f82f 	bl	800fd50 <__multiply>
 800dcf2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	f43f ae9f 	beq.w	800da38 <_strtod_l+0x490>
 800dcfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f001 ff0f 	bl	800fb20 <_Bfree>
 800dd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd04:	9318      	str	r3, [sp, #96]	; 0x60
 800dd06:	f1b8 0f00 	cmp.w	r8, #0
 800dd0a:	f300 808c 	bgt.w	800de26 <_strtod_l+0x87e>
 800dd0e:	9b06      	ldr	r3, [sp, #24]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dd08      	ble.n	800dd26 <_strtod_l+0x77e>
 800dd14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd16:	9905      	ldr	r1, [sp, #20]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f002 f8c3 	bl	800fea4 <__pow5mult>
 800dd1e:	9005      	str	r0, [sp, #20]
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f43f ae89 	beq.w	800da38 <_strtod_l+0x490>
 800dd26:	2f00      	cmp	r7, #0
 800dd28:	dd08      	ble.n	800dd3c <_strtod_l+0x794>
 800dd2a:	9905      	ldr	r1, [sp, #20]
 800dd2c:	463a      	mov	r2, r7
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f002 f912 	bl	800ff58 <__lshift>
 800dd34:	9005      	str	r0, [sp, #20]
 800dd36:	2800      	cmp	r0, #0
 800dd38:	f43f ae7e 	beq.w	800da38 <_strtod_l+0x490>
 800dd3c:	f1b9 0f00 	cmp.w	r9, #0
 800dd40:	dd08      	ble.n	800dd54 <_strtod_l+0x7ac>
 800dd42:	4631      	mov	r1, r6
 800dd44:	464a      	mov	r2, r9
 800dd46:	4620      	mov	r0, r4
 800dd48:	f002 f906 	bl	800ff58 <__lshift>
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f43f ae72 	beq.w	800da38 <_strtod_l+0x490>
 800dd54:	9a05      	ldr	r2, [sp, #20]
 800dd56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f002 f989 	bl	8010070 <__mdiff>
 800dd5e:	4605      	mov	r5, r0
 800dd60:	2800      	cmp	r0, #0
 800dd62:	f43f ae69 	beq.w	800da38 <_strtod_l+0x490>
 800dd66:	68c3      	ldr	r3, [r0, #12]
 800dd68:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60c3      	str	r3, [r0, #12]
 800dd6e:	4631      	mov	r1, r6
 800dd70:	f002 f962 	bl	8010038 <__mcmp>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	da60      	bge.n	800de3a <_strtod_l+0x892>
 800dd78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd7a:	ea53 030a 	orrs.w	r3, r3, sl
 800dd7e:	f040 8082 	bne.w	800de86 <_strtod_l+0x8de>
 800dd82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d17d      	bne.n	800de86 <_strtod_l+0x8de>
 800dd8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd8e:	0d1b      	lsrs	r3, r3, #20
 800dd90:	051b      	lsls	r3, r3, #20
 800dd92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dd96:	d976      	bls.n	800de86 <_strtod_l+0x8de>
 800dd98:	696b      	ldr	r3, [r5, #20]
 800dd9a:	b913      	cbnz	r3, 800dda2 <_strtod_l+0x7fa>
 800dd9c:	692b      	ldr	r3, [r5, #16]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	dd71      	ble.n	800de86 <_strtod_l+0x8de>
 800dda2:	4629      	mov	r1, r5
 800dda4:	2201      	movs	r2, #1
 800dda6:	4620      	mov	r0, r4
 800dda8:	f002 f8d6 	bl	800ff58 <__lshift>
 800ddac:	4631      	mov	r1, r6
 800ddae:	4605      	mov	r5, r0
 800ddb0:	f002 f942 	bl	8010038 <__mcmp>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	dd66      	ble.n	800de86 <_strtod_l+0x8de>
 800ddb8:	9904      	ldr	r1, [sp, #16]
 800ddba:	4a53      	ldr	r2, [pc, #332]	; (800df08 <_strtod_l+0x960>)
 800ddbc:	465b      	mov	r3, fp
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	f000 8081 	beq.w	800dec6 <_strtod_l+0x91e>
 800ddc4:	ea02 010b 	and.w	r1, r2, fp
 800ddc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ddcc:	dc7b      	bgt.n	800dec6 <_strtod_l+0x91e>
 800ddce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ddd2:	f77f aea9 	ble.w	800db28 <_strtod_l+0x580>
 800ddd6:	4b4d      	ldr	r3, [pc, #308]	; (800df0c <_strtod_l+0x964>)
 800ddd8:	4650      	mov	r0, sl
 800ddda:	4659      	mov	r1, fp
 800dddc:	2200      	movs	r2, #0
 800ddde:	f7f2 fc3d 	bl	800065c <__aeabi_dmul>
 800dde2:	460b      	mov	r3, r1
 800dde4:	4303      	orrs	r3, r0
 800dde6:	bf08      	it	eq
 800dde8:	2322      	moveq	r3, #34	; 0x22
 800ddea:	4682      	mov	sl, r0
 800ddec:	468b      	mov	fp, r1
 800ddee:	bf08      	it	eq
 800ddf0:	6023      	streq	r3, [r4, #0]
 800ddf2:	e62b      	b.n	800da4c <_strtod_l+0x4a4>
 800ddf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfc:	ea03 0a0a 	and.w	sl, r3, sl
 800de00:	e6e3      	b.n	800dbca <_strtod_l+0x622>
 800de02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800de06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800de0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800de0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800de12:	fa01 f308 	lsl.w	r3, r1, r8
 800de16:	9308      	str	r3, [sp, #32]
 800de18:	910d      	str	r1, [sp, #52]	; 0x34
 800de1a:	e746      	b.n	800dcaa <_strtod_l+0x702>
 800de1c:	2300      	movs	r3, #0
 800de1e:	9308      	str	r3, [sp, #32]
 800de20:	2301      	movs	r3, #1
 800de22:	930d      	str	r3, [sp, #52]	; 0x34
 800de24:	e741      	b.n	800dcaa <_strtod_l+0x702>
 800de26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de28:	4642      	mov	r2, r8
 800de2a:	4620      	mov	r0, r4
 800de2c:	f002 f894 	bl	800ff58 <__lshift>
 800de30:	9018      	str	r0, [sp, #96]	; 0x60
 800de32:	2800      	cmp	r0, #0
 800de34:	f47f af6b 	bne.w	800dd0e <_strtod_l+0x766>
 800de38:	e5fe      	b.n	800da38 <_strtod_l+0x490>
 800de3a:	465f      	mov	r7, fp
 800de3c:	d16e      	bne.n	800df1c <_strtod_l+0x974>
 800de3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de44:	b342      	cbz	r2, 800de98 <_strtod_l+0x8f0>
 800de46:	4a32      	ldr	r2, [pc, #200]	; (800df10 <_strtod_l+0x968>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d128      	bne.n	800de9e <_strtod_l+0x8f6>
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	4651      	mov	r1, sl
 800de50:	b1eb      	cbz	r3, 800de8e <_strtod_l+0x8e6>
 800de52:	4b2d      	ldr	r3, [pc, #180]	; (800df08 <_strtod_l+0x960>)
 800de54:	403b      	ands	r3, r7
 800de56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de5e:	d819      	bhi.n	800de94 <_strtod_l+0x8ec>
 800de60:	0d1b      	lsrs	r3, r3, #20
 800de62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de66:	fa02 f303 	lsl.w	r3, r2, r3
 800de6a:	4299      	cmp	r1, r3
 800de6c:	d117      	bne.n	800de9e <_strtod_l+0x8f6>
 800de6e:	4b29      	ldr	r3, [pc, #164]	; (800df14 <_strtod_l+0x96c>)
 800de70:	429f      	cmp	r7, r3
 800de72:	d102      	bne.n	800de7a <_strtod_l+0x8d2>
 800de74:	3101      	adds	r1, #1
 800de76:	f43f addf 	beq.w	800da38 <_strtod_l+0x490>
 800de7a:	4b23      	ldr	r3, [pc, #140]	; (800df08 <_strtod_l+0x960>)
 800de7c:	403b      	ands	r3, r7
 800de7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800de82:	f04f 0a00 	mov.w	sl, #0
 800de86:	9b04      	ldr	r3, [sp, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1a4      	bne.n	800ddd6 <_strtod_l+0x82e>
 800de8c:	e5de      	b.n	800da4c <_strtod_l+0x4a4>
 800de8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de92:	e7ea      	b.n	800de6a <_strtod_l+0x8c2>
 800de94:	4613      	mov	r3, r2
 800de96:	e7e8      	b.n	800de6a <_strtod_l+0x8c2>
 800de98:	ea53 030a 	orrs.w	r3, r3, sl
 800de9c:	d08c      	beq.n	800ddb8 <_strtod_l+0x810>
 800de9e:	9b08      	ldr	r3, [sp, #32]
 800dea0:	b1db      	cbz	r3, 800deda <_strtod_l+0x932>
 800dea2:	423b      	tst	r3, r7
 800dea4:	d0ef      	beq.n	800de86 <_strtod_l+0x8de>
 800dea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dea8:	9a04      	ldr	r2, [sp, #16]
 800deaa:	4650      	mov	r0, sl
 800deac:	4659      	mov	r1, fp
 800deae:	b1c3      	cbz	r3, 800dee2 <_strtod_l+0x93a>
 800deb0:	f7ff fb5b 	bl	800d56a <sulp>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	ec51 0b18 	vmov	r0, r1, d8
 800debc:	f7f2 fa18 	bl	80002f0 <__adddf3>
 800dec0:	4682      	mov	sl, r0
 800dec2:	468b      	mov	fp, r1
 800dec4:	e7df      	b.n	800de86 <_strtod_l+0x8de>
 800dec6:	4013      	ands	r3, r2
 800dec8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800decc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ded0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ded4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ded8:	e7d5      	b.n	800de86 <_strtod_l+0x8de>
 800deda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dedc:	ea13 0f0a 	tst.w	r3, sl
 800dee0:	e7e0      	b.n	800dea4 <_strtod_l+0x8fc>
 800dee2:	f7ff fb42 	bl	800d56a <sulp>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	ec51 0b18 	vmov	r0, r1, d8
 800deee:	f7f2 f9fd 	bl	80002ec <__aeabi_dsub>
 800def2:	2200      	movs	r2, #0
 800def4:	2300      	movs	r3, #0
 800def6:	4682      	mov	sl, r0
 800def8:	468b      	mov	fp, r1
 800defa:	f7f2 fe17 	bl	8000b2c <__aeabi_dcmpeq>
 800defe:	2800      	cmp	r0, #0
 800df00:	d0c1      	beq.n	800de86 <_strtod_l+0x8de>
 800df02:	e611      	b.n	800db28 <_strtod_l+0x580>
 800df04:	fffffc02 	.word	0xfffffc02
 800df08:	7ff00000 	.word	0x7ff00000
 800df0c:	39500000 	.word	0x39500000
 800df10:	000fffff 	.word	0x000fffff
 800df14:	7fefffff 	.word	0x7fefffff
 800df18:	08011860 	.word	0x08011860
 800df1c:	4631      	mov	r1, r6
 800df1e:	4628      	mov	r0, r5
 800df20:	f002 fa08 	bl	8010334 <__ratio>
 800df24:	ec59 8b10 	vmov	r8, r9, d0
 800df28:	ee10 0a10 	vmov	r0, s0
 800df2c:	2200      	movs	r2, #0
 800df2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df32:	4649      	mov	r1, r9
 800df34:	f7f2 fe0e 	bl	8000b54 <__aeabi_dcmple>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d07a      	beq.n	800e032 <_strtod_l+0xa8a>
 800df3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d04a      	beq.n	800dfd8 <_strtod_l+0xa30>
 800df42:	4b95      	ldr	r3, [pc, #596]	; (800e198 <_strtod_l+0xbf0>)
 800df44:	2200      	movs	r2, #0
 800df46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e198 <_strtod_l+0xbf0>
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	4b92      	ldr	r3, [pc, #584]	; (800e19c <_strtod_l+0xbf4>)
 800df54:	403b      	ands	r3, r7
 800df56:	930d      	str	r3, [sp, #52]	; 0x34
 800df58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df5a:	4b91      	ldr	r3, [pc, #580]	; (800e1a0 <_strtod_l+0xbf8>)
 800df5c:	429a      	cmp	r2, r3
 800df5e:	f040 80b0 	bne.w	800e0c2 <_strtod_l+0xb1a>
 800df62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800df6a:	ec4b ab10 	vmov	d0, sl, fp
 800df6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df72:	f002 f907 	bl	8010184 <__ulp>
 800df76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df7a:	ec53 2b10 	vmov	r2, r3, d0
 800df7e:	f7f2 fb6d 	bl	800065c <__aeabi_dmul>
 800df82:	4652      	mov	r2, sl
 800df84:	465b      	mov	r3, fp
 800df86:	f7f2 f9b3 	bl	80002f0 <__adddf3>
 800df8a:	460b      	mov	r3, r1
 800df8c:	4983      	ldr	r1, [pc, #524]	; (800e19c <_strtod_l+0xbf4>)
 800df8e:	4a85      	ldr	r2, [pc, #532]	; (800e1a4 <_strtod_l+0xbfc>)
 800df90:	4019      	ands	r1, r3
 800df92:	4291      	cmp	r1, r2
 800df94:	4682      	mov	sl, r0
 800df96:	d960      	bls.n	800e05a <_strtod_l+0xab2>
 800df98:	ee18 3a90 	vmov	r3, s17
 800df9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d104      	bne.n	800dfae <_strtod_l+0xa06>
 800dfa4:	ee18 3a10 	vmov	r3, s16
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	f43f ad45 	beq.w	800da38 <_strtod_l+0x490>
 800dfae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e1b0 <_strtod_l+0xc08>
 800dfb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dfb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f001 fdb1 	bl	800fb20 <_Bfree>
 800dfbe:	9905      	ldr	r1, [sp, #20]
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f001 fdad 	bl	800fb20 <_Bfree>
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f001 fda9 	bl	800fb20 <_Bfree>
 800dfce:	4629      	mov	r1, r5
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f001 fda5 	bl	800fb20 <_Bfree>
 800dfd6:	e61a      	b.n	800dc0e <_strtod_l+0x666>
 800dfd8:	f1ba 0f00 	cmp.w	sl, #0
 800dfdc:	d11b      	bne.n	800e016 <_strtod_l+0xa6e>
 800dfde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfe2:	b9f3      	cbnz	r3, 800e022 <_strtod_l+0xa7a>
 800dfe4:	4b6c      	ldr	r3, [pc, #432]	; (800e198 <_strtod_l+0xbf0>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4640      	mov	r0, r8
 800dfea:	4649      	mov	r1, r9
 800dfec:	f7f2 fda8 	bl	8000b40 <__aeabi_dcmplt>
 800dff0:	b9d0      	cbnz	r0, 800e028 <_strtod_l+0xa80>
 800dff2:	4640      	mov	r0, r8
 800dff4:	4649      	mov	r1, r9
 800dff6:	4b6c      	ldr	r3, [pc, #432]	; (800e1a8 <_strtod_l+0xc00>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	f7f2 fb2f 	bl	800065c <__aeabi_dmul>
 800dffe:	4680      	mov	r8, r0
 800e000:	4689      	mov	r9, r1
 800e002:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e006:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e00a:	9315      	str	r3, [sp, #84]	; 0x54
 800e00c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e014:	e79d      	b.n	800df52 <_strtod_l+0x9aa>
 800e016:	f1ba 0f01 	cmp.w	sl, #1
 800e01a:	d102      	bne.n	800e022 <_strtod_l+0xa7a>
 800e01c:	2f00      	cmp	r7, #0
 800e01e:	f43f ad83 	beq.w	800db28 <_strtod_l+0x580>
 800e022:	4b62      	ldr	r3, [pc, #392]	; (800e1ac <_strtod_l+0xc04>)
 800e024:	2200      	movs	r2, #0
 800e026:	e78e      	b.n	800df46 <_strtod_l+0x99e>
 800e028:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e1a8 <_strtod_l+0xc00>
 800e02c:	f04f 0800 	mov.w	r8, #0
 800e030:	e7e7      	b.n	800e002 <_strtod_l+0xa5a>
 800e032:	4b5d      	ldr	r3, [pc, #372]	; (800e1a8 <_strtod_l+0xc00>)
 800e034:	4640      	mov	r0, r8
 800e036:	4649      	mov	r1, r9
 800e038:	2200      	movs	r2, #0
 800e03a:	f7f2 fb0f 	bl	800065c <__aeabi_dmul>
 800e03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e040:	4680      	mov	r8, r0
 800e042:	4689      	mov	r9, r1
 800e044:	b933      	cbnz	r3, 800e054 <_strtod_l+0xaac>
 800e046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e04a:	900e      	str	r0, [sp, #56]	; 0x38
 800e04c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e04e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e052:	e7dd      	b.n	800e010 <_strtod_l+0xa68>
 800e054:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e058:	e7f9      	b.n	800e04e <_strtod_l+0xaa6>
 800e05a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e05e:	9b04      	ldr	r3, [sp, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1a8      	bne.n	800dfb6 <_strtod_l+0xa0e>
 800e064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e06a:	0d1b      	lsrs	r3, r3, #20
 800e06c:	051b      	lsls	r3, r3, #20
 800e06e:	429a      	cmp	r2, r3
 800e070:	d1a1      	bne.n	800dfb6 <_strtod_l+0xa0e>
 800e072:	4640      	mov	r0, r8
 800e074:	4649      	mov	r1, r9
 800e076:	f7f2 fe51 	bl	8000d1c <__aeabi_d2lz>
 800e07a:	f7f2 fac1 	bl	8000600 <__aeabi_l2d>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 f931 	bl	80002ec <__aeabi_dsub>
 800e08a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e090:	ea43 030a 	orr.w	r3, r3, sl
 800e094:	4313      	orrs	r3, r2
 800e096:	4680      	mov	r8, r0
 800e098:	4689      	mov	r9, r1
 800e09a:	d055      	beq.n	800e148 <_strtod_l+0xba0>
 800e09c:	a336      	add	r3, pc, #216	; (adr r3, 800e178 <_strtod_l+0xbd0>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	f7f2 fd4d 	bl	8000b40 <__aeabi_dcmplt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f47f acd0 	bne.w	800da4c <_strtod_l+0x4a4>
 800e0ac:	a334      	add	r3, pc, #208	; (adr r3, 800e180 <_strtod_l+0xbd8>)
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	4649      	mov	r1, r9
 800e0b6:	f7f2 fd61 	bl	8000b7c <__aeabi_dcmpgt>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	f43f af7b 	beq.w	800dfb6 <_strtod_l+0xa0e>
 800e0c0:	e4c4      	b.n	800da4c <_strtod_l+0x4a4>
 800e0c2:	9b04      	ldr	r3, [sp, #16]
 800e0c4:	b333      	cbz	r3, 800e114 <_strtod_l+0xb6c>
 800e0c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e0cc:	d822      	bhi.n	800e114 <_strtod_l+0xb6c>
 800e0ce:	a32e      	add	r3, pc, #184	; (adr r3, 800e188 <_strtod_l+0xbe0>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	4649      	mov	r1, r9
 800e0d8:	f7f2 fd3c 	bl	8000b54 <__aeabi_dcmple>
 800e0dc:	b1a0      	cbz	r0, 800e108 <_strtod_l+0xb60>
 800e0de:	4649      	mov	r1, r9
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	f7f2 fd93 	bl	8000c0c <__aeabi_d2uiz>
 800e0e6:	2801      	cmp	r0, #1
 800e0e8:	bf38      	it	cc
 800e0ea:	2001      	movcc	r0, #1
 800e0ec:	f7f2 fa3c 	bl	8000568 <__aeabi_ui2d>
 800e0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0f2:	4680      	mov	r8, r0
 800e0f4:	4689      	mov	r9, r1
 800e0f6:	bb23      	cbnz	r3, 800e142 <_strtod_l+0xb9a>
 800e0f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0fc:	9010      	str	r0, [sp, #64]	; 0x40
 800e0fe:	9311      	str	r3, [sp, #68]	; 0x44
 800e100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e104:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e10a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e10c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e110:	1a9b      	subs	r3, r3, r2
 800e112:	9309      	str	r3, [sp, #36]	; 0x24
 800e114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e118:	eeb0 0a48 	vmov.f32	s0, s16
 800e11c:	eef0 0a68 	vmov.f32	s1, s17
 800e120:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e124:	f002 f82e 	bl	8010184 <__ulp>
 800e128:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e12c:	ec53 2b10 	vmov	r2, r3, d0
 800e130:	f7f2 fa94 	bl	800065c <__aeabi_dmul>
 800e134:	ec53 2b18 	vmov	r2, r3, d8
 800e138:	f7f2 f8da 	bl	80002f0 <__adddf3>
 800e13c:	4682      	mov	sl, r0
 800e13e:	468b      	mov	fp, r1
 800e140:	e78d      	b.n	800e05e <_strtod_l+0xab6>
 800e142:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e146:	e7db      	b.n	800e100 <_strtod_l+0xb58>
 800e148:	a311      	add	r3, pc, #68	; (adr r3, 800e190 <_strtod_l+0xbe8>)
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	f7f2 fcf7 	bl	8000b40 <__aeabi_dcmplt>
 800e152:	e7b2      	b.n	800e0ba <_strtod_l+0xb12>
 800e154:	2300      	movs	r3, #0
 800e156:	930a      	str	r3, [sp, #40]	; 0x28
 800e158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e15a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e15c:	6013      	str	r3, [r2, #0]
 800e15e:	f7ff ba6b 	b.w	800d638 <_strtod_l+0x90>
 800e162:	2a65      	cmp	r2, #101	; 0x65
 800e164:	f43f ab5f 	beq.w	800d826 <_strtod_l+0x27e>
 800e168:	2a45      	cmp	r2, #69	; 0x45
 800e16a:	f43f ab5c 	beq.w	800d826 <_strtod_l+0x27e>
 800e16e:	2301      	movs	r3, #1
 800e170:	f7ff bb94 	b.w	800d89c <_strtod_l+0x2f4>
 800e174:	f3af 8000 	nop.w
 800e178:	94a03595 	.word	0x94a03595
 800e17c:	3fdfffff 	.word	0x3fdfffff
 800e180:	35afe535 	.word	0x35afe535
 800e184:	3fe00000 	.word	0x3fe00000
 800e188:	ffc00000 	.word	0xffc00000
 800e18c:	41dfffff 	.word	0x41dfffff
 800e190:	94a03595 	.word	0x94a03595
 800e194:	3fcfffff 	.word	0x3fcfffff
 800e198:	3ff00000 	.word	0x3ff00000
 800e19c:	7ff00000 	.word	0x7ff00000
 800e1a0:	7fe00000 	.word	0x7fe00000
 800e1a4:	7c9fffff 	.word	0x7c9fffff
 800e1a8:	3fe00000 	.word	0x3fe00000
 800e1ac:	bff00000 	.word	0xbff00000
 800e1b0:	7fefffff 	.word	0x7fefffff

0800e1b4 <_strtod_r>:
 800e1b4:	4b01      	ldr	r3, [pc, #4]	; (800e1bc <_strtod_r+0x8>)
 800e1b6:	f7ff b9f7 	b.w	800d5a8 <_strtod_l>
 800e1ba:	bf00      	nop
 800e1bc:	20000098 	.word	0x20000098

0800e1c0 <strtok>:
 800e1c0:	4b16      	ldr	r3, [pc, #88]	; (800e21c <strtok+0x5c>)
 800e1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1c4:	681e      	ldr	r6, [r3, #0]
 800e1c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	b9fc      	cbnz	r4, 800e20c <strtok+0x4c>
 800e1cc:	2050      	movs	r0, #80	; 0x50
 800e1ce:	9101      	str	r1, [sp, #4]
 800e1d0:	f7fd ff4e 	bl	800c070 <malloc>
 800e1d4:	9901      	ldr	r1, [sp, #4]
 800e1d6:	65b0      	str	r0, [r6, #88]	; 0x58
 800e1d8:	4602      	mov	r2, r0
 800e1da:	b920      	cbnz	r0, 800e1e6 <strtok+0x26>
 800e1dc:	4b10      	ldr	r3, [pc, #64]	; (800e220 <strtok+0x60>)
 800e1de:	4811      	ldr	r0, [pc, #68]	; (800e224 <strtok+0x64>)
 800e1e0:	2157      	movs	r1, #87	; 0x57
 800e1e2:	f000 f9a9 	bl	800e538 <__assert_func>
 800e1e6:	e9c0 4400 	strd	r4, r4, [r0]
 800e1ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e1ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e1f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e1f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e1fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e1fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e202:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e206:	6184      	str	r4, [r0, #24]
 800e208:	7704      	strb	r4, [r0, #28]
 800e20a:	6244      	str	r4, [r0, #36]	; 0x24
 800e20c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e20e:	2301      	movs	r3, #1
 800e210:	4628      	mov	r0, r5
 800e212:	b002      	add	sp, #8
 800e214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e218:	f000 b806 	b.w	800e228 <__strtok_r>
 800e21c:	20000030 	.word	0x20000030
 800e220:	08011888 	.word	0x08011888
 800e224:	0801189f 	.word	0x0801189f

0800e228 <__strtok_r>:
 800e228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e22a:	b908      	cbnz	r0, 800e230 <__strtok_r+0x8>
 800e22c:	6810      	ldr	r0, [r2, #0]
 800e22e:	b188      	cbz	r0, 800e254 <__strtok_r+0x2c>
 800e230:	4604      	mov	r4, r0
 800e232:	4620      	mov	r0, r4
 800e234:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e238:	460f      	mov	r7, r1
 800e23a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e23e:	b91e      	cbnz	r6, 800e248 <__strtok_r+0x20>
 800e240:	b965      	cbnz	r5, 800e25c <__strtok_r+0x34>
 800e242:	6015      	str	r5, [r2, #0]
 800e244:	4628      	mov	r0, r5
 800e246:	e005      	b.n	800e254 <__strtok_r+0x2c>
 800e248:	42b5      	cmp	r5, r6
 800e24a:	d1f6      	bne.n	800e23a <__strtok_r+0x12>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1f0      	bne.n	800e232 <__strtok_r+0xa>
 800e250:	6014      	str	r4, [r2, #0]
 800e252:	7003      	strb	r3, [r0, #0]
 800e254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e256:	461c      	mov	r4, r3
 800e258:	e00c      	b.n	800e274 <__strtok_r+0x4c>
 800e25a:	b915      	cbnz	r5, 800e262 <__strtok_r+0x3a>
 800e25c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e260:	460e      	mov	r6, r1
 800e262:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e266:	42ab      	cmp	r3, r5
 800e268:	d1f7      	bne.n	800e25a <__strtok_r+0x32>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0f3      	beq.n	800e256 <__strtok_r+0x2e>
 800e26e:	2300      	movs	r3, #0
 800e270:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e274:	6014      	str	r4, [r2, #0]
 800e276:	e7ed      	b.n	800e254 <__strtok_r+0x2c>

0800e278 <_strtol_l.constprop.0>:
 800e278:	2b01      	cmp	r3, #1
 800e27a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e27e:	d001      	beq.n	800e284 <_strtol_l.constprop.0+0xc>
 800e280:	2b24      	cmp	r3, #36	; 0x24
 800e282:	d906      	bls.n	800e292 <_strtol_l.constprop.0+0x1a>
 800e284:	f7fd fcea 	bl	800bc5c <__errno>
 800e288:	2316      	movs	r3, #22
 800e28a:	6003      	str	r3, [r0, #0]
 800e28c:	2000      	movs	r0, #0
 800e28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e292:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e378 <_strtol_l.constprop.0+0x100>
 800e296:	460d      	mov	r5, r1
 800e298:	462e      	mov	r6, r5
 800e29a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e29e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e2a2:	f017 0708 	ands.w	r7, r7, #8
 800e2a6:	d1f7      	bne.n	800e298 <_strtol_l.constprop.0+0x20>
 800e2a8:	2c2d      	cmp	r4, #45	; 0x2d
 800e2aa:	d132      	bne.n	800e312 <_strtol_l.constprop.0+0x9a>
 800e2ac:	782c      	ldrb	r4, [r5, #0]
 800e2ae:	2701      	movs	r7, #1
 800e2b0:	1cb5      	adds	r5, r6, #2
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d05b      	beq.n	800e36e <_strtol_l.constprop.0+0xf6>
 800e2b6:	2b10      	cmp	r3, #16
 800e2b8:	d109      	bne.n	800e2ce <_strtol_l.constprop.0+0x56>
 800e2ba:	2c30      	cmp	r4, #48	; 0x30
 800e2bc:	d107      	bne.n	800e2ce <_strtol_l.constprop.0+0x56>
 800e2be:	782c      	ldrb	r4, [r5, #0]
 800e2c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2c4:	2c58      	cmp	r4, #88	; 0x58
 800e2c6:	d14d      	bne.n	800e364 <_strtol_l.constprop.0+0xec>
 800e2c8:	786c      	ldrb	r4, [r5, #1]
 800e2ca:	2310      	movs	r3, #16
 800e2cc:	3502      	adds	r5, #2
 800e2ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e2d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e2d6:	f04f 0c00 	mov.w	ip, #0
 800e2da:	fbb8 f9f3 	udiv	r9, r8, r3
 800e2de:	4666      	mov	r6, ip
 800e2e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800e2e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e2e8:	f1be 0f09 	cmp.w	lr, #9
 800e2ec:	d816      	bhi.n	800e31c <_strtol_l.constprop.0+0xa4>
 800e2ee:	4674      	mov	r4, lr
 800e2f0:	42a3      	cmp	r3, r4
 800e2f2:	dd24      	ble.n	800e33e <_strtol_l.constprop.0+0xc6>
 800e2f4:	f1bc 0f00 	cmp.w	ip, #0
 800e2f8:	db1e      	blt.n	800e338 <_strtol_l.constprop.0+0xc0>
 800e2fa:	45b1      	cmp	r9, r6
 800e2fc:	d31c      	bcc.n	800e338 <_strtol_l.constprop.0+0xc0>
 800e2fe:	d101      	bne.n	800e304 <_strtol_l.constprop.0+0x8c>
 800e300:	45a2      	cmp	sl, r4
 800e302:	db19      	blt.n	800e338 <_strtol_l.constprop.0+0xc0>
 800e304:	fb06 4603 	mla	r6, r6, r3, r4
 800e308:	f04f 0c01 	mov.w	ip, #1
 800e30c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e310:	e7e8      	b.n	800e2e4 <_strtol_l.constprop.0+0x6c>
 800e312:	2c2b      	cmp	r4, #43	; 0x2b
 800e314:	bf04      	itt	eq
 800e316:	782c      	ldrbeq	r4, [r5, #0]
 800e318:	1cb5      	addeq	r5, r6, #2
 800e31a:	e7ca      	b.n	800e2b2 <_strtol_l.constprop.0+0x3a>
 800e31c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e320:	f1be 0f19 	cmp.w	lr, #25
 800e324:	d801      	bhi.n	800e32a <_strtol_l.constprop.0+0xb2>
 800e326:	3c37      	subs	r4, #55	; 0x37
 800e328:	e7e2      	b.n	800e2f0 <_strtol_l.constprop.0+0x78>
 800e32a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e32e:	f1be 0f19 	cmp.w	lr, #25
 800e332:	d804      	bhi.n	800e33e <_strtol_l.constprop.0+0xc6>
 800e334:	3c57      	subs	r4, #87	; 0x57
 800e336:	e7db      	b.n	800e2f0 <_strtol_l.constprop.0+0x78>
 800e338:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e33c:	e7e6      	b.n	800e30c <_strtol_l.constprop.0+0x94>
 800e33e:	f1bc 0f00 	cmp.w	ip, #0
 800e342:	da05      	bge.n	800e350 <_strtol_l.constprop.0+0xd8>
 800e344:	2322      	movs	r3, #34	; 0x22
 800e346:	6003      	str	r3, [r0, #0]
 800e348:	4646      	mov	r6, r8
 800e34a:	b942      	cbnz	r2, 800e35e <_strtol_l.constprop.0+0xe6>
 800e34c:	4630      	mov	r0, r6
 800e34e:	e79e      	b.n	800e28e <_strtol_l.constprop.0+0x16>
 800e350:	b107      	cbz	r7, 800e354 <_strtol_l.constprop.0+0xdc>
 800e352:	4276      	negs	r6, r6
 800e354:	2a00      	cmp	r2, #0
 800e356:	d0f9      	beq.n	800e34c <_strtol_l.constprop.0+0xd4>
 800e358:	f1bc 0f00 	cmp.w	ip, #0
 800e35c:	d000      	beq.n	800e360 <_strtol_l.constprop.0+0xe8>
 800e35e:	1e69      	subs	r1, r5, #1
 800e360:	6011      	str	r1, [r2, #0]
 800e362:	e7f3      	b.n	800e34c <_strtol_l.constprop.0+0xd4>
 800e364:	2430      	movs	r4, #48	; 0x30
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1b1      	bne.n	800e2ce <_strtol_l.constprop.0+0x56>
 800e36a:	2308      	movs	r3, #8
 800e36c:	e7af      	b.n	800e2ce <_strtol_l.constprop.0+0x56>
 800e36e:	2c30      	cmp	r4, #48	; 0x30
 800e370:	d0a5      	beq.n	800e2be <_strtol_l.constprop.0+0x46>
 800e372:	230a      	movs	r3, #10
 800e374:	e7ab      	b.n	800e2ce <_strtol_l.constprop.0+0x56>
 800e376:	bf00      	nop
 800e378:	08011939 	.word	0x08011939

0800e37c <_strtol_r>:
 800e37c:	f7ff bf7c 	b.w	800e278 <_strtol_l.constprop.0>

0800e380 <strtol>:
 800e380:	4613      	mov	r3, r2
 800e382:	460a      	mov	r2, r1
 800e384:	4601      	mov	r1, r0
 800e386:	4802      	ldr	r0, [pc, #8]	; (800e390 <strtol+0x10>)
 800e388:	6800      	ldr	r0, [r0, #0]
 800e38a:	f7ff bf75 	b.w	800e278 <_strtol_l.constprop.0>
 800e38e:	bf00      	nop
 800e390:	20000030 	.word	0x20000030

0800e394 <__swbuf_r>:
 800e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e396:	460e      	mov	r6, r1
 800e398:	4614      	mov	r4, r2
 800e39a:	4605      	mov	r5, r0
 800e39c:	b118      	cbz	r0, 800e3a6 <__swbuf_r+0x12>
 800e39e:	6983      	ldr	r3, [r0, #24]
 800e3a0:	b90b      	cbnz	r3, 800e3a6 <__swbuf_r+0x12>
 800e3a2:	f7fd fd8d 	bl	800bec0 <__sinit>
 800e3a6:	4b21      	ldr	r3, [pc, #132]	; (800e42c <__swbuf_r+0x98>)
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	d12b      	bne.n	800e404 <__swbuf_r+0x70>
 800e3ac:	686c      	ldr	r4, [r5, #4]
 800e3ae:	69a3      	ldr	r3, [r4, #24]
 800e3b0:	60a3      	str	r3, [r4, #8]
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	071a      	lsls	r2, r3, #28
 800e3b6:	d52f      	bpl.n	800e418 <__swbuf_r+0x84>
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	b36b      	cbz	r3, 800e418 <__swbuf_r+0x84>
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	6820      	ldr	r0, [r4, #0]
 800e3c0:	1ac0      	subs	r0, r0, r3
 800e3c2:	6963      	ldr	r3, [r4, #20]
 800e3c4:	b2f6      	uxtb	r6, r6
 800e3c6:	4283      	cmp	r3, r0
 800e3c8:	4637      	mov	r7, r6
 800e3ca:	dc04      	bgt.n	800e3d6 <__swbuf_r+0x42>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f7fd fcd0 	bl	800bd74 <_fflush_r>
 800e3d4:	bb30      	cbnz	r0, 800e424 <__swbuf_r+0x90>
 800e3d6:	68a3      	ldr	r3, [r4, #8]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	60a3      	str	r3, [r4, #8]
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	1c5a      	adds	r2, r3, #1
 800e3e0:	6022      	str	r2, [r4, #0]
 800e3e2:	701e      	strb	r6, [r3, #0]
 800e3e4:	6963      	ldr	r3, [r4, #20]
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	4283      	cmp	r3, r0
 800e3ea:	d004      	beq.n	800e3f6 <__swbuf_r+0x62>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	07db      	lsls	r3, r3, #31
 800e3f0:	d506      	bpl.n	800e400 <__swbuf_r+0x6c>
 800e3f2:	2e0a      	cmp	r6, #10
 800e3f4:	d104      	bne.n	800e400 <__swbuf_r+0x6c>
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f7fd fcbb 	bl	800bd74 <_fflush_r>
 800e3fe:	b988      	cbnz	r0, 800e424 <__swbuf_r+0x90>
 800e400:	4638      	mov	r0, r7
 800e402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e404:	4b0a      	ldr	r3, [pc, #40]	; (800e430 <__swbuf_r+0x9c>)
 800e406:	429c      	cmp	r4, r3
 800e408:	d101      	bne.n	800e40e <__swbuf_r+0x7a>
 800e40a:	68ac      	ldr	r4, [r5, #8]
 800e40c:	e7cf      	b.n	800e3ae <__swbuf_r+0x1a>
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <__swbuf_r+0xa0>)
 800e410:	429c      	cmp	r4, r3
 800e412:	bf08      	it	eq
 800e414:	68ec      	ldreq	r4, [r5, #12]
 800e416:	e7ca      	b.n	800e3ae <__swbuf_r+0x1a>
 800e418:	4621      	mov	r1, r4
 800e41a:	4628      	mov	r0, r5
 800e41c:	f000 f81e 	bl	800e45c <__swsetup_r>
 800e420:	2800      	cmp	r0, #0
 800e422:	d0cb      	beq.n	800e3bc <__swbuf_r+0x28>
 800e424:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e428:	e7ea      	b.n	800e400 <__swbuf_r+0x6c>
 800e42a:	bf00      	nop
 800e42c:	080117a4 	.word	0x080117a4
 800e430:	080117c4 	.word	0x080117c4
 800e434:	08011784 	.word	0x08011784

0800e438 <_write_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	4d07      	ldr	r5, [pc, #28]	; (800e458 <_write_r+0x20>)
 800e43c:	4604      	mov	r4, r0
 800e43e:	4608      	mov	r0, r1
 800e440:	4611      	mov	r1, r2
 800e442:	2200      	movs	r2, #0
 800e444:	602a      	str	r2, [r5, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	f7f4 fee2 	bl	8003210 <_write>
 800e44c:	1c43      	adds	r3, r0, #1
 800e44e:	d102      	bne.n	800e456 <_write_r+0x1e>
 800e450:	682b      	ldr	r3, [r5, #0]
 800e452:	b103      	cbz	r3, 800e456 <_write_r+0x1e>
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	20000a20 	.word	0x20000a20

0800e45c <__swsetup_r>:
 800e45c:	4b32      	ldr	r3, [pc, #200]	; (800e528 <__swsetup_r+0xcc>)
 800e45e:	b570      	push	{r4, r5, r6, lr}
 800e460:	681d      	ldr	r5, [r3, #0]
 800e462:	4606      	mov	r6, r0
 800e464:	460c      	mov	r4, r1
 800e466:	b125      	cbz	r5, 800e472 <__swsetup_r+0x16>
 800e468:	69ab      	ldr	r3, [r5, #24]
 800e46a:	b913      	cbnz	r3, 800e472 <__swsetup_r+0x16>
 800e46c:	4628      	mov	r0, r5
 800e46e:	f7fd fd27 	bl	800bec0 <__sinit>
 800e472:	4b2e      	ldr	r3, [pc, #184]	; (800e52c <__swsetup_r+0xd0>)
 800e474:	429c      	cmp	r4, r3
 800e476:	d10f      	bne.n	800e498 <__swsetup_r+0x3c>
 800e478:	686c      	ldr	r4, [r5, #4]
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e480:	0719      	lsls	r1, r3, #28
 800e482:	d42c      	bmi.n	800e4de <__swsetup_r+0x82>
 800e484:	06dd      	lsls	r5, r3, #27
 800e486:	d411      	bmi.n	800e4ac <__swsetup_r+0x50>
 800e488:	2309      	movs	r3, #9
 800e48a:	6033      	str	r3, [r6, #0]
 800e48c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e490:	81a3      	strh	r3, [r4, #12]
 800e492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e496:	e03e      	b.n	800e516 <__swsetup_r+0xba>
 800e498:	4b25      	ldr	r3, [pc, #148]	; (800e530 <__swsetup_r+0xd4>)
 800e49a:	429c      	cmp	r4, r3
 800e49c:	d101      	bne.n	800e4a2 <__swsetup_r+0x46>
 800e49e:	68ac      	ldr	r4, [r5, #8]
 800e4a0:	e7eb      	b.n	800e47a <__swsetup_r+0x1e>
 800e4a2:	4b24      	ldr	r3, [pc, #144]	; (800e534 <__swsetup_r+0xd8>)
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	bf08      	it	eq
 800e4a8:	68ec      	ldreq	r4, [r5, #12]
 800e4aa:	e7e6      	b.n	800e47a <__swsetup_r+0x1e>
 800e4ac:	0758      	lsls	r0, r3, #29
 800e4ae:	d512      	bpl.n	800e4d6 <__swsetup_r+0x7a>
 800e4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4b2:	b141      	cbz	r1, 800e4c6 <__swsetup_r+0x6a>
 800e4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4b8:	4299      	cmp	r1, r3
 800e4ba:	d002      	beq.n	800e4c2 <__swsetup_r+0x66>
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7fd fe27 	bl	800c110 <_free_r>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	6363      	str	r3, [r4, #52]	; 0x34
 800e4c6:	89a3      	ldrh	r3, [r4, #12]
 800e4c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4cc:	81a3      	strh	r3, [r4, #12]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	6063      	str	r3, [r4, #4]
 800e4d2:	6923      	ldr	r3, [r4, #16]
 800e4d4:	6023      	str	r3, [r4, #0]
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f043 0308 	orr.w	r3, r3, #8
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	b94b      	cbnz	r3, 800e4f6 <__swsetup_r+0x9a>
 800e4e2:	89a3      	ldrh	r3, [r4, #12]
 800e4e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4ec:	d003      	beq.n	800e4f6 <__swsetup_r+0x9a>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f001 fa77 	bl	800f9e4 <__smakebuf_r>
 800e4f6:	89a0      	ldrh	r0, [r4, #12]
 800e4f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4fc:	f010 0301 	ands.w	r3, r0, #1
 800e500:	d00a      	beq.n	800e518 <__swsetup_r+0xbc>
 800e502:	2300      	movs	r3, #0
 800e504:	60a3      	str	r3, [r4, #8]
 800e506:	6963      	ldr	r3, [r4, #20]
 800e508:	425b      	negs	r3, r3
 800e50a:	61a3      	str	r3, [r4, #24]
 800e50c:	6923      	ldr	r3, [r4, #16]
 800e50e:	b943      	cbnz	r3, 800e522 <__swsetup_r+0xc6>
 800e510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e514:	d1ba      	bne.n	800e48c <__swsetup_r+0x30>
 800e516:	bd70      	pop	{r4, r5, r6, pc}
 800e518:	0781      	lsls	r1, r0, #30
 800e51a:	bf58      	it	pl
 800e51c:	6963      	ldrpl	r3, [r4, #20]
 800e51e:	60a3      	str	r3, [r4, #8]
 800e520:	e7f4      	b.n	800e50c <__swsetup_r+0xb0>
 800e522:	2000      	movs	r0, #0
 800e524:	e7f7      	b.n	800e516 <__swsetup_r+0xba>
 800e526:	bf00      	nop
 800e528:	20000030 	.word	0x20000030
 800e52c:	080117a4 	.word	0x080117a4
 800e530:	080117c4 	.word	0x080117c4
 800e534:	08011784 	.word	0x08011784

0800e538 <__assert_func>:
 800e538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e53a:	4614      	mov	r4, r2
 800e53c:	461a      	mov	r2, r3
 800e53e:	4b09      	ldr	r3, [pc, #36]	; (800e564 <__assert_func+0x2c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4605      	mov	r5, r0
 800e544:	68d8      	ldr	r0, [r3, #12]
 800e546:	b14c      	cbz	r4, 800e55c <__assert_func+0x24>
 800e548:	4b07      	ldr	r3, [pc, #28]	; (800e568 <__assert_func+0x30>)
 800e54a:	9100      	str	r1, [sp, #0]
 800e54c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e550:	4906      	ldr	r1, [pc, #24]	; (800e56c <__assert_func+0x34>)
 800e552:	462b      	mov	r3, r5
 800e554:	f7fd fd32 	bl	800bfbc <fiprintf>
 800e558:	f7fd fb78 	bl	800bc4c <abort>
 800e55c:	4b04      	ldr	r3, [pc, #16]	; (800e570 <__assert_func+0x38>)
 800e55e:	461c      	mov	r4, r3
 800e560:	e7f3      	b.n	800e54a <__assert_func+0x12>
 800e562:	bf00      	nop
 800e564:	20000030 	.word	0x20000030
 800e568:	080118fc 	.word	0x080118fc
 800e56c:	08011909 	.word	0x08011909
 800e570:	08011937 	.word	0x08011937

0800e574 <_close_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4d06      	ldr	r5, [pc, #24]	; (800e590 <_close_r+0x1c>)
 800e578:	2300      	movs	r3, #0
 800e57a:	4604      	mov	r4, r0
 800e57c:	4608      	mov	r0, r1
 800e57e:	602b      	str	r3, [r5, #0]
 800e580:	f7f5 ff28 	bl	80043d4 <_close>
 800e584:	1c43      	adds	r3, r0, #1
 800e586:	d102      	bne.n	800e58e <_close_r+0x1a>
 800e588:	682b      	ldr	r3, [r5, #0]
 800e58a:	b103      	cbz	r3, 800e58e <_close_r+0x1a>
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	bd38      	pop	{r3, r4, r5, pc}
 800e590:	20000a20 	.word	0x20000a20

0800e594 <quorem>:
 800e594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e598:	6903      	ldr	r3, [r0, #16]
 800e59a:	690c      	ldr	r4, [r1, #16]
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	4607      	mov	r7, r0
 800e5a0:	f2c0 8081 	blt.w	800e6a6 <quorem+0x112>
 800e5a4:	3c01      	subs	r4, #1
 800e5a6:	f101 0814 	add.w	r8, r1, #20
 800e5aa:	f100 0514 	add.w	r5, r0, #20
 800e5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5cc:	d331      	bcc.n	800e632 <quorem+0x9e>
 800e5ce:	f04f 0e00 	mov.w	lr, #0
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	46ac      	mov	ip, r5
 800e5d6:	46f2      	mov	sl, lr
 800e5d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e5dc:	b293      	uxth	r3, r2
 800e5de:	fb06 e303 	mla	r3, r6, r3, lr
 800e5e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800e5ec:	f8dc a000 	ldr.w	sl, [ip]
 800e5f0:	0c12      	lsrs	r2, r2, #16
 800e5f2:	fa13 f38a 	uxtah	r3, r3, sl
 800e5f6:	fb06 e202 	mla	r2, r6, r2, lr
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	9b00      	ldr	r3, [sp, #0]
 800e5fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e602:	b292      	uxth	r2, r2
 800e604:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e60c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e610:	4581      	cmp	r9, r0
 800e612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e616:	f84c 3b04 	str.w	r3, [ip], #4
 800e61a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e61e:	d2db      	bcs.n	800e5d8 <quorem+0x44>
 800e620:	f855 300b 	ldr.w	r3, [r5, fp]
 800e624:	b92b      	cbnz	r3, 800e632 <quorem+0x9e>
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	3b04      	subs	r3, #4
 800e62a:	429d      	cmp	r5, r3
 800e62c:	461a      	mov	r2, r3
 800e62e:	d32e      	bcc.n	800e68e <quorem+0xfa>
 800e630:	613c      	str	r4, [r7, #16]
 800e632:	4638      	mov	r0, r7
 800e634:	f001 fd00 	bl	8010038 <__mcmp>
 800e638:	2800      	cmp	r0, #0
 800e63a:	db24      	blt.n	800e686 <quorem+0xf2>
 800e63c:	3601      	adds	r6, #1
 800e63e:	4628      	mov	r0, r5
 800e640:	f04f 0c00 	mov.w	ip, #0
 800e644:	f858 2b04 	ldr.w	r2, [r8], #4
 800e648:	f8d0 e000 	ldr.w	lr, [r0]
 800e64c:	b293      	uxth	r3, r2
 800e64e:	ebac 0303 	sub.w	r3, ip, r3
 800e652:	0c12      	lsrs	r2, r2, #16
 800e654:	fa13 f38e 	uxtah	r3, r3, lr
 800e658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e660:	b29b      	uxth	r3, r3
 800e662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e666:	45c1      	cmp	r9, r8
 800e668:	f840 3b04 	str.w	r3, [r0], #4
 800e66c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e670:	d2e8      	bcs.n	800e644 <quorem+0xb0>
 800e672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e67a:	b922      	cbnz	r2, 800e686 <quorem+0xf2>
 800e67c:	3b04      	subs	r3, #4
 800e67e:	429d      	cmp	r5, r3
 800e680:	461a      	mov	r2, r3
 800e682:	d30a      	bcc.n	800e69a <quorem+0x106>
 800e684:	613c      	str	r4, [r7, #16]
 800e686:	4630      	mov	r0, r6
 800e688:	b003      	add	sp, #12
 800e68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68e:	6812      	ldr	r2, [r2, #0]
 800e690:	3b04      	subs	r3, #4
 800e692:	2a00      	cmp	r2, #0
 800e694:	d1cc      	bne.n	800e630 <quorem+0x9c>
 800e696:	3c01      	subs	r4, #1
 800e698:	e7c7      	b.n	800e62a <quorem+0x96>
 800e69a:	6812      	ldr	r2, [r2, #0]
 800e69c:	3b04      	subs	r3, #4
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	d1f0      	bne.n	800e684 <quorem+0xf0>
 800e6a2:	3c01      	subs	r4, #1
 800e6a4:	e7eb      	b.n	800e67e <quorem+0xea>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	e7ee      	b.n	800e688 <quorem+0xf4>
 800e6aa:	0000      	movs	r0, r0
 800e6ac:	0000      	movs	r0, r0
	...

0800e6b0 <_dtoa_r>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	ed2d 8b04 	vpush	{d8-d9}
 800e6b8:	ec57 6b10 	vmov	r6, r7, d0
 800e6bc:	b093      	sub	sp, #76	; 0x4c
 800e6be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e6c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e6c4:	9106      	str	r1, [sp, #24]
 800e6c6:	ee10 aa10 	vmov	sl, s0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e6d0:	46bb      	mov	fp, r7
 800e6d2:	b975      	cbnz	r5, 800e6f2 <_dtoa_r+0x42>
 800e6d4:	2010      	movs	r0, #16
 800e6d6:	f7fd fccb 	bl	800c070 <malloc>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e6de:	b920      	cbnz	r0, 800e6ea <_dtoa_r+0x3a>
 800e6e0:	4ba7      	ldr	r3, [pc, #668]	; (800e980 <_dtoa_r+0x2d0>)
 800e6e2:	21ea      	movs	r1, #234	; 0xea
 800e6e4:	48a7      	ldr	r0, [pc, #668]	; (800e984 <_dtoa_r+0x2d4>)
 800e6e6:	f7ff ff27 	bl	800e538 <__assert_func>
 800e6ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e6ee:	6005      	str	r5, [r0, #0]
 800e6f0:	60c5      	str	r5, [r0, #12]
 800e6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6f4:	6819      	ldr	r1, [r3, #0]
 800e6f6:	b151      	cbz	r1, 800e70e <_dtoa_r+0x5e>
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	604a      	str	r2, [r1, #4]
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	4093      	lsls	r3, r2
 800e700:	608b      	str	r3, [r1, #8]
 800e702:	4620      	mov	r0, r4
 800e704:	f001 fa0c 	bl	800fb20 <_Bfree>
 800e708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e70a:	2200      	movs	r2, #0
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	1e3b      	subs	r3, r7, #0
 800e710:	bfaa      	itet	ge
 800e712:	2300      	movge	r3, #0
 800e714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e718:	f8c8 3000 	strge.w	r3, [r8]
 800e71c:	4b9a      	ldr	r3, [pc, #616]	; (800e988 <_dtoa_r+0x2d8>)
 800e71e:	bfbc      	itt	lt
 800e720:	2201      	movlt	r2, #1
 800e722:	f8c8 2000 	strlt.w	r2, [r8]
 800e726:	ea33 030b 	bics.w	r3, r3, fp
 800e72a:	d11b      	bne.n	800e764 <_dtoa_r+0xb4>
 800e72c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e72e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e738:	4333      	orrs	r3, r6
 800e73a:	f000 8592 	beq.w	800f262 <_dtoa_r+0xbb2>
 800e73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e740:	b963      	cbnz	r3, 800e75c <_dtoa_r+0xac>
 800e742:	4b92      	ldr	r3, [pc, #584]	; (800e98c <_dtoa_r+0x2dc>)
 800e744:	e022      	b.n	800e78c <_dtoa_r+0xdc>
 800e746:	4b92      	ldr	r3, [pc, #584]	; (800e990 <_dtoa_r+0x2e0>)
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	3308      	adds	r3, #8
 800e74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e74e:	6013      	str	r3, [r2, #0]
 800e750:	9801      	ldr	r0, [sp, #4]
 800e752:	b013      	add	sp, #76	; 0x4c
 800e754:	ecbd 8b04 	vpop	{d8-d9}
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	4b8b      	ldr	r3, [pc, #556]	; (800e98c <_dtoa_r+0x2dc>)
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	3303      	adds	r3, #3
 800e762:	e7f3      	b.n	800e74c <_dtoa_r+0x9c>
 800e764:	2200      	movs	r2, #0
 800e766:	2300      	movs	r3, #0
 800e768:	4650      	mov	r0, sl
 800e76a:	4659      	mov	r1, fp
 800e76c:	f7f2 f9de 	bl	8000b2c <__aeabi_dcmpeq>
 800e770:	ec4b ab19 	vmov	d9, sl, fp
 800e774:	4680      	mov	r8, r0
 800e776:	b158      	cbz	r0, 800e790 <_dtoa_r+0xe0>
 800e778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e77a:	2301      	movs	r3, #1
 800e77c:	6013      	str	r3, [r2, #0]
 800e77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 856b 	beq.w	800f25c <_dtoa_r+0xbac>
 800e786:	4883      	ldr	r0, [pc, #524]	; (800e994 <_dtoa_r+0x2e4>)
 800e788:	6018      	str	r0, [r3, #0]
 800e78a:	1e43      	subs	r3, r0, #1
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	e7df      	b.n	800e750 <_dtoa_r+0xa0>
 800e790:	ec4b ab10 	vmov	d0, sl, fp
 800e794:	aa10      	add	r2, sp, #64	; 0x40
 800e796:	a911      	add	r1, sp, #68	; 0x44
 800e798:	4620      	mov	r0, r4
 800e79a:	f001 fd6f 	bl	801027c <__d2b>
 800e79e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e7a2:	ee08 0a10 	vmov	s16, r0
 800e7a6:	2d00      	cmp	r5, #0
 800e7a8:	f000 8084 	beq.w	800e8b4 <_dtoa_r+0x204>
 800e7ac:	ee19 3a90 	vmov	r3, s19
 800e7b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e7b8:	4656      	mov	r6, sl
 800e7ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e7be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e7c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e7c6:	4b74      	ldr	r3, [pc, #464]	; (800e998 <_dtoa_r+0x2e8>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	f7f1 fd8d 	bl	80002ec <__aeabi_dsub>
 800e7d2:	a365      	add	r3, pc, #404	; (adr r3, 800e968 <_dtoa_r+0x2b8>)
 800e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d8:	f7f1 ff40 	bl	800065c <__aeabi_dmul>
 800e7dc:	a364      	add	r3, pc, #400	; (adr r3, 800e970 <_dtoa_r+0x2c0>)
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f7f1 fd85 	bl	80002f0 <__adddf3>
 800e7e6:	4606      	mov	r6, r0
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	460f      	mov	r7, r1
 800e7ec:	f7f1 fecc 	bl	8000588 <__aeabi_i2d>
 800e7f0:	a361      	add	r3, pc, #388	; (adr r3, 800e978 <_dtoa_r+0x2c8>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 ff31 	bl	800065c <__aeabi_dmul>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4630      	mov	r0, r6
 800e800:	4639      	mov	r1, r7
 800e802:	f7f1 fd75 	bl	80002f0 <__adddf3>
 800e806:	4606      	mov	r6, r0
 800e808:	460f      	mov	r7, r1
 800e80a:	f7f2 f9d7 	bl	8000bbc <__aeabi_d2iz>
 800e80e:	2200      	movs	r2, #0
 800e810:	9000      	str	r0, [sp, #0]
 800e812:	2300      	movs	r3, #0
 800e814:	4630      	mov	r0, r6
 800e816:	4639      	mov	r1, r7
 800e818:	f7f2 f992 	bl	8000b40 <__aeabi_dcmplt>
 800e81c:	b150      	cbz	r0, 800e834 <_dtoa_r+0x184>
 800e81e:	9800      	ldr	r0, [sp, #0]
 800e820:	f7f1 feb2 	bl	8000588 <__aeabi_i2d>
 800e824:	4632      	mov	r2, r6
 800e826:	463b      	mov	r3, r7
 800e828:	f7f2 f980 	bl	8000b2c <__aeabi_dcmpeq>
 800e82c:	b910      	cbnz	r0, 800e834 <_dtoa_r+0x184>
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	3b01      	subs	r3, #1
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	9b00      	ldr	r3, [sp, #0]
 800e836:	2b16      	cmp	r3, #22
 800e838:	d85a      	bhi.n	800e8f0 <_dtoa_r+0x240>
 800e83a:	9a00      	ldr	r2, [sp, #0]
 800e83c:	4b57      	ldr	r3, [pc, #348]	; (800e99c <_dtoa_r+0x2ec>)
 800e83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	ec51 0b19 	vmov	r0, r1, d9
 800e84a:	f7f2 f979 	bl	8000b40 <__aeabi_dcmplt>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d050      	beq.n	800e8f4 <_dtoa_r+0x244>
 800e852:	9b00      	ldr	r3, [sp, #0]
 800e854:	3b01      	subs	r3, #1
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	2300      	movs	r3, #0
 800e85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e85e:	1b5d      	subs	r5, r3, r5
 800e860:	1e6b      	subs	r3, r5, #1
 800e862:	9305      	str	r3, [sp, #20]
 800e864:	bf45      	ittet	mi
 800e866:	f1c5 0301 	rsbmi	r3, r5, #1
 800e86a:	9304      	strmi	r3, [sp, #16]
 800e86c:	2300      	movpl	r3, #0
 800e86e:	2300      	movmi	r3, #0
 800e870:	bf4c      	ite	mi
 800e872:	9305      	strmi	r3, [sp, #20]
 800e874:	9304      	strpl	r3, [sp, #16]
 800e876:	9b00      	ldr	r3, [sp, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	db3d      	blt.n	800e8f8 <_dtoa_r+0x248>
 800e87c:	9b05      	ldr	r3, [sp, #20]
 800e87e:	9a00      	ldr	r2, [sp, #0]
 800e880:	920a      	str	r2, [sp, #40]	; 0x28
 800e882:	4413      	add	r3, r2
 800e884:	9305      	str	r3, [sp, #20]
 800e886:	2300      	movs	r3, #0
 800e888:	9307      	str	r3, [sp, #28]
 800e88a:	9b06      	ldr	r3, [sp, #24]
 800e88c:	2b09      	cmp	r3, #9
 800e88e:	f200 8089 	bhi.w	800e9a4 <_dtoa_r+0x2f4>
 800e892:	2b05      	cmp	r3, #5
 800e894:	bfc4      	itt	gt
 800e896:	3b04      	subgt	r3, #4
 800e898:	9306      	strgt	r3, [sp, #24]
 800e89a:	9b06      	ldr	r3, [sp, #24]
 800e89c:	f1a3 0302 	sub.w	r3, r3, #2
 800e8a0:	bfcc      	ite	gt
 800e8a2:	2500      	movgt	r5, #0
 800e8a4:	2501      	movle	r5, #1
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	f200 8087 	bhi.w	800e9ba <_dtoa_r+0x30a>
 800e8ac:	e8df f003 	tbb	[pc, r3]
 800e8b0:	59383a2d 	.word	0x59383a2d
 800e8b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e8b8:	441d      	add	r5, r3
 800e8ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e8be:	2b20      	cmp	r3, #32
 800e8c0:	bfc1      	itttt	gt
 800e8c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e8c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e8ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800e8ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e8d2:	bfda      	itte	le
 800e8d4:	f1c3 0320 	rsble	r3, r3, #32
 800e8d8:	fa06 f003 	lslle.w	r0, r6, r3
 800e8dc:	4318      	orrgt	r0, r3
 800e8de:	f7f1 fe43 	bl	8000568 <__aeabi_ui2d>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e8ea:	3d01      	subs	r5, #1
 800e8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e8ee:	e76a      	b.n	800e7c6 <_dtoa_r+0x116>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e7b2      	b.n	800e85a <_dtoa_r+0x1aa>
 800e8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8f6:	e7b1      	b.n	800e85c <_dtoa_r+0x1ac>
 800e8f8:	9b04      	ldr	r3, [sp, #16]
 800e8fa:	9a00      	ldr	r2, [sp, #0]
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	9304      	str	r3, [sp, #16]
 800e900:	4253      	negs	r3, r2
 800e902:	9307      	str	r3, [sp, #28]
 800e904:	2300      	movs	r3, #0
 800e906:	930a      	str	r3, [sp, #40]	; 0x28
 800e908:	e7bf      	b.n	800e88a <_dtoa_r+0x1da>
 800e90a:	2300      	movs	r3, #0
 800e90c:	9308      	str	r3, [sp, #32]
 800e90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	dc55      	bgt.n	800e9c0 <_dtoa_r+0x310>
 800e914:	2301      	movs	r3, #1
 800e916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e91a:	461a      	mov	r2, r3
 800e91c:	9209      	str	r2, [sp, #36]	; 0x24
 800e91e:	e00c      	b.n	800e93a <_dtoa_r+0x28a>
 800e920:	2301      	movs	r3, #1
 800e922:	e7f3      	b.n	800e90c <_dtoa_r+0x25c>
 800e924:	2300      	movs	r3, #0
 800e926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e928:	9308      	str	r3, [sp, #32]
 800e92a:	9b00      	ldr	r3, [sp, #0]
 800e92c:	4413      	add	r3, r2
 800e92e:	9302      	str	r3, [sp, #8]
 800e930:	3301      	adds	r3, #1
 800e932:	2b01      	cmp	r3, #1
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	bfb8      	it	lt
 800e938:	2301      	movlt	r3, #1
 800e93a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e93c:	2200      	movs	r2, #0
 800e93e:	6042      	str	r2, [r0, #4]
 800e940:	2204      	movs	r2, #4
 800e942:	f102 0614 	add.w	r6, r2, #20
 800e946:	429e      	cmp	r6, r3
 800e948:	6841      	ldr	r1, [r0, #4]
 800e94a:	d93d      	bls.n	800e9c8 <_dtoa_r+0x318>
 800e94c:	4620      	mov	r0, r4
 800e94e:	f001 f8a7 	bl	800faa0 <_Balloc>
 800e952:	9001      	str	r0, [sp, #4]
 800e954:	2800      	cmp	r0, #0
 800e956:	d13b      	bne.n	800e9d0 <_dtoa_r+0x320>
 800e958:	4b11      	ldr	r3, [pc, #68]	; (800e9a0 <_dtoa_r+0x2f0>)
 800e95a:	4602      	mov	r2, r0
 800e95c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e960:	e6c0      	b.n	800e6e4 <_dtoa_r+0x34>
 800e962:	2301      	movs	r3, #1
 800e964:	e7df      	b.n	800e926 <_dtoa_r+0x276>
 800e966:	bf00      	nop
 800e968:	636f4361 	.word	0x636f4361
 800e96c:	3fd287a7 	.word	0x3fd287a7
 800e970:	8b60c8b3 	.word	0x8b60c8b3
 800e974:	3fc68a28 	.word	0x3fc68a28
 800e978:	509f79fb 	.word	0x509f79fb
 800e97c:	3fd34413 	.word	0x3fd34413
 800e980:	08011888 	.word	0x08011888
 800e984:	08011a46 	.word	0x08011a46
 800e988:	7ff00000 	.word	0x7ff00000
 800e98c:	08011a42 	.word	0x08011a42
 800e990:	08011a39 	.word	0x08011a39
 800e994:	0801180a 	.word	0x0801180a
 800e998:	3ff80000 	.word	0x3ff80000
 800e99c:	08011bb0 	.word	0x08011bb0
 800e9a0:	08011aa1 	.word	0x08011aa1
 800e9a4:	2501      	movs	r5, #1
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9306      	str	r3, [sp, #24]
 800e9aa:	9508      	str	r5, [sp, #32]
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2312      	movs	r3, #18
 800e9b8:	e7b0      	b.n	800e91c <_dtoa_r+0x26c>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	9308      	str	r3, [sp, #32]
 800e9be:	e7f5      	b.n	800e9ac <_dtoa_r+0x2fc>
 800e9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9c6:	e7b8      	b.n	800e93a <_dtoa_r+0x28a>
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	6041      	str	r1, [r0, #4]
 800e9cc:	0052      	lsls	r2, r2, #1
 800e9ce:	e7b8      	b.n	800e942 <_dtoa_r+0x292>
 800e9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9d2:	9a01      	ldr	r2, [sp, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	9b03      	ldr	r3, [sp, #12]
 800e9d8:	2b0e      	cmp	r3, #14
 800e9da:	f200 809d 	bhi.w	800eb18 <_dtoa_r+0x468>
 800e9de:	2d00      	cmp	r5, #0
 800e9e0:	f000 809a 	beq.w	800eb18 <_dtoa_r+0x468>
 800e9e4:	9b00      	ldr	r3, [sp, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	dd32      	ble.n	800ea50 <_dtoa_r+0x3a0>
 800e9ea:	4ab7      	ldr	r2, [pc, #732]	; (800ecc8 <_dtoa_r+0x618>)
 800e9ec:	f003 030f 	and.w	r3, r3, #15
 800e9f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	05d8      	lsls	r0, r3, #23
 800e9fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ea00:	d516      	bpl.n	800ea30 <_dtoa_r+0x380>
 800ea02:	4bb2      	ldr	r3, [pc, #712]	; (800eccc <_dtoa_r+0x61c>)
 800ea04:	ec51 0b19 	vmov	r0, r1, d9
 800ea08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea0c:	f7f1 ff50 	bl	80008b0 <__aeabi_ddiv>
 800ea10:	f007 070f 	and.w	r7, r7, #15
 800ea14:	4682      	mov	sl, r0
 800ea16:	468b      	mov	fp, r1
 800ea18:	2503      	movs	r5, #3
 800ea1a:	4eac      	ldr	r6, [pc, #688]	; (800eccc <_dtoa_r+0x61c>)
 800ea1c:	b957      	cbnz	r7, 800ea34 <_dtoa_r+0x384>
 800ea1e:	4642      	mov	r2, r8
 800ea20:	464b      	mov	r3, r9
 800ea22:	4650      	mov	r0, sl
 800ea24:	4659      	mov	r1, fp
 800ea26:	f7f1 ff43 	bl	80008b0 <__aeabi_ddiv>
 800ea2a:	4682      	mov	sl, r0
 800ea2c:	468b      	mov	fp, r1
 800ea2e:	e028      	b.n	800ea82 <_dtoa_r+0x3d2>
 800ea30:	2502      	movs	r5, #2
 800ea32:	e7f2      	b.n	800ea1a <_dtoa_r+0x36a>
 800ea34:	07f9      	lsls	r1, r7, #31
 800ea36:	d508      	bpl.n	800ea4a <_dtoa_r+0x39a>
 800ea38:	4640      	mov	r0, r8
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea40:	f7f1 fe0c 	bl	800065c <__aeabi_dmul>
 800ea44:	3501      	adds	r5, #1
 800ea46:	4680      	mov	r8, r0
 800ea48:	4689      	mov	r9, r1
 800ea4a:	107f      	asrs	r7, r7, #1
 800ea4c:	3608      	adds	r6, #8
 800ea4e:	e7e5      	b.n	800ea1c <_dtoa_r+0x36c>
 800ea50:	f000 809b 	beq.w	800eb8a <_dtoa_r+0x4da>
 800ea54:	9b00      	ldr	r3, [sp, #0]
 800ea56:	4f9d      	ldr	r7, [pc, #628]	; (800eccc <_dtoa_r+0x61c>)
 800ea58:	425e      	negs	r6, r3
 800ea5a:	4b9b      	ldr	r3, [pc, #620]	; (800ecc8 <_dtoa_r+0x618>)
 800ea5c:	f006 020f 	and.w	r2, r6, #15
 800ea60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	ec51 0b19 	vmov	r0, r1, d9
 800ea6c:	f7f1 fdf6 	bl	800065c <__aeabi_dmul>
 800ea70:	1136      	asrs	r6, r6, #4
 800ea72:	4682      	mov	sl, r0
 800ea74:	468b      	mov	fp, r1
 800ea76:	2300      	movs	r3, #0
 800ea78:	2502      	movs	r5, #2
 800ea7a:	2e00      	cmp	r6, #0
 800ea7c:	d17a      	bne.n	800eb74 <_dtoa_r+0x4c4>
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1d3      	bne.n	800ea2a <_dtoa_r+0x37a>
 800ea82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 8082 	beq.w	800eb8e <_dtoa_r+0x4de>
 800ea8a:	4b91      	ldr	r3, [pc, #580]	; (800ecd0 <_dtoa_r+0x620>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	4650      	mov	r0, sl
 800ea90:	4659      	mov	r1, fp
 800ea92:	f7f2 f855 	bl	8000b40 <__aeabi_dcmplt>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d079      	beq.n	800eb8e <_dtoa_r+0x4de>
 800ea9a:	9b03      	ldr	r3, [sp, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d076      	beq.n	800eb8e <_dtoa_r+0x4de>
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	dd36      	ble.n	800eb14 <_dtoa_r+0x464>
 800eaa6:	9b00      	ldr	r3, [sp, #0]
 800eaa8:	4650      	mov	r0, sl
 800eaaa:	4659      	mov	r1, fp
 800eaac:	1e5f      	subs	r7, r3, #1
 800eaae:	2200      	movs	r2, #0
 800eab0:	4b88      	ldr	r3, [pc, #544]	; (800ecd4 <_dtoa_r+0x624>)
 800eab2:	f7f1 fdd3 	bl	800065c <__aeabi_dmul>
 800eab6:	9e02      	ldr	r6, [sp, #8]
 800eab8:	4682      	mov	sl, r0
 800eaba:	468b      	mov	fp, r1
 800eabc:	3501      	adds	r5, #1
 800eabe:	4628      	mov	r0, r5
 800eac0:	f7f1 fd62 	bl	8000588 <__aeabi_i2d>
 800eac4:	4652      	mov	r2, sl
 800eac6:	465b      	mov	r3, fp
 800eac8:	f7f1 fdc8 	bl	800065c <__aeabi_dmul>
 800eacc:	4b82      	ldr	r3, [pc, #520]	; (800ecd8 <_dtoa_r+0x628>)
 800eace:	2200      	movs	r2, #0
 800ead0:	f7f1 fc0e 	bl	80002f0 <__adddf3>
 800ead4:	46d0      	mov	r8, sl
 800ead6:	46d9      	mov	r9, fp
 800ead8:	4682      	mov	sl, r0
 800eada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800eade:	2e00      	cmp	r6, #0
 800eae0:	d158      	bne.n	800eb94 <_dtoa_r+0x4e4>
 800eae2:	4b7e      	ldr	r3, [pc, #504]	; (800ecdc <_dtoa_r+0x62c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	4640      	mov	r0, r8
 800eae8:	4649      	mov	r1, r9
 800eaea:	f7f1 fbff 	bl	80002ec <__aeabi_dsub>
 800eaee:	4652      	mov	r2, sl
 800eaf0:	465b      	mov	r3, fp
 800eaf2:	4680      	mov	r8, r0
 800eaf4:	4689      	mov	r9, r1
 800eaf6:	f7f2 f841 	bl	8000b7c <__aeabi_dcmpgt>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	f040 8295 	bne.w	800f02a <_dtoa_r+0x97a>
 800eb00:	4652      	mov	r2, sl
 800eb02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f2 f819 	bl	8000b40 <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 8289 	bne.w	800f026 <_dtoa_r+0x976>
 800eb14:	ec5b ab19 	vmov	sl, fp, d9
 800eb18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f2c0 8148 	blt.w	800edb0 <_dtoa_r+0x700>
 800eb20:	9a00      	ldr	r2, [sp, #0]
 800eb22:	2a0e      	cmp	r2, #14
 800eb24:	f300 8144 	bgt.w	800edb0 <_dtoa_r+0x700>
 800eb28:	4b67      	ldr	r3, [pc, #412]	; (800ecc8 <_dtoa_r+0x618>)
 800eb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f280 80d5 	bge.w	800ece4 <_dtoa_r+0x634>
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f300 80d1 	bgt.w	800ece4 <_dtoa_r+0x634>
 800eb42:	f040 826f 	bne.w	800f024 <_dtoa_r+0x974>
 800eb46:	4b65      	ldr	r3, [pc, #404]	; (800ecdc <_dtoa_r+0x62c>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f1 fd85 	bl	800065c <__aeabi_dmul>
 800eb52:	4652      	mov	r2, sl
 800eb54:	465b      	mov	r3, fp
 800eb56:	f7f2 f807 	bl	8000b68 <__aeabi_dcmpge>
 800eb5a:	9e03      	ldr	r6, [sp, #12]
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f040 8245 	bne.w	800efee <_dtoa_r+0x93e>
 800eb64:	9d01      	ldr	r5, [sp, #4]
 800eb66:	2331      	movs	r3, #49	; 0x31
 800eb68:	f805 3b01 	strb.w	r3, [r5], #1
 800eb6c:	9b00      	ldr	r3, [sp, #0]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	e240      	b.n	800eff6 <_dtoa_r+0x946>
 800eb74:	07f2      	lsls	r2, r6, #31
 800eb76:	d505      	bpl.n	800eb84 <_dtoa_r+0x4d4>
 800eb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb7c:	f7f1 fd6e 	bl	800065c <__aeabi_dmul>
 800eb80:	3501      	adds	r5, #1
 800eb82:	2301      	movs	r3, #1
 800eb84:	1076      	asrs	r6, r6, #1
 800eb86:	3708      	adds	r7, #8
 800eb88:	e777      	b.n	800ea7a <_dtoa_r+0x3ca>
 800eb8a:	2502      	movs	r5, #2
 800eb8c:	e779      	b.n	800ea82 <_dtoa_r+0x3d2>
 800eb8e:	9f00      	ldr	r7, [sp, #0]
 800eb90:	9e03      	ldr	r6, [sp, #12]
 800eb92:	e794      	b.n	800eabe <_dtoa_r+0x40e>
 800eb94:	9901      	ldr	r1, [sp, #4]
 800eb96:	4b4c      	ldr	r3, [pc, #304]	; (800ecc8 <_dtoa_r+0x618>)
 800eb98:	4431      	add	r1, r6
 800eb9a:	910d      	str	r1, [sp, #52]	; 0x34
 800eb9c:	9908      	ldr	r1, [sp, #32]
 800eb9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eba6:	2900      	cmp	r1, #0
 800eba8:	d043      	beq.n	800ec32 <_dtoa_r+0x582>
 800ebaa:	494d      	ldr	r1, [pc, #308]	; (800ece0 <_dtoa_r+0x630>)
 800ebac:	2000      	movs	r0, #0
 800ebae:	f7f1 fe7f 	bl	80008b0 <__aeabi_ddiv>
 800ebb2:	4652      	mov	r2, sl
 800ebb4:	465b      	mov	r3, fp
 800ebb6:	f7f1 fb99 	bl	80002ec <__aeabi_dsub>
 800ebba:	9d01      	ldr	r5, [sp, #4]
 800ebbc:	4682      	mov	sl, r0
 800ebbe:	468b      	mov	fp, r1
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	4640      	mov	r0, r8
 800ebc4:	f7f1 fffa 	bl	8000bbc <__aeabi_d2iz>
 800ebc8:	4606      	mov	r6, r0
 800ebca:	f7f1 fcdd 	bl	8000588 <__aeabi_i2d>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4640      	mov	r0, r8
 800ebd4:	4649      	mov	r1, r9
 800ebd6:	f7f1 fb89 	bl	80002ec <__aeabi_dsub>
 800ebda:	3630      	adds	r6, #48	; 0x30
 800ebdc:	f805 6b01 	strb.w	r6, [r5], #1
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	465b      	mov	r3, fp
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	4689      	mov	r9, r1
 800ebe8:	f7f1 ffaa 	bl	8000b40 <__aeabi_dcmplt>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d163      	bne.n	800ecb8 <_dtoa_r+0x608>
 800ebf0:	4642      	mov	r2, r8
 800ebf2:	464b      	mov	r3, r9
 800ebf4:	4936      	ldr	r1, [pc, #216]	; (800ecd0 <_dtoa_r+0x620>)
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f7f1 fb78 	bl	80002ec <__aeabi_dsub>
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	465b      	mov	r3, fp
 800ec00:	f7f1 ff9e 	bl	8000b40 <__aeabi_dcmplt>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f040 80b5 	bne.w	800ed74 <_dtoa_r+0x6c4>
 800ec0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d081      	beq.n	800eb14 <_dtoa_r+0x464>
 800ec10:	4b30      	ldr	r3, [pc, #192]	; (800ecd4 <_dtoa_r+0x624>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	4650      	mov	r0, sl
 800ec16:	4659      	mov	r1, fp
 800ec18:	f7f1 fd20 	bl	800065c <__aeabi_dmul>
 800ec1c:	4b2d      	ldr	r3, [pc, #180]	; (800ecd4 <_dtoa_r+0x624>)
 800ec1e:	4682      	mov	sl, r0
 800ec20:	468b      	mov	fp, r1
 800ec22:	4640      	mov	r0, r8
 800ec24:	4649      	mov	r1, r9
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7f1 fd18 	bl	800065c <__aeabi_dmul>
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	4689      	mov	r9, r1
 800ec30:	e7c6      	b.n	800ebc0 <_dtoa_r+0x510>
 800ec32:	4650      	mov	r0, sl
 800ec34:	4659      	mov	r1, fp
 800ec36:	f7f1 fd11 	bl	800065c <__aeabi_dmul>
 800ec3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec3c:	9d01      	ldr	r5, [sp, #4]
 800ec3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec40:	4682      	mov	sl, r0
 800ec42:	468b      	mov	fp, r1
 800ec44:	4649      	mov	r1, r9
 800ec46:	4640      	mov	r0, r8
 800ec48:	f7f1 ffb8 	bl	8000bbc <__aeabi_d2iz>
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	f7f1 fc9b 	bl	8000588 <__aeabi_i2d>
 800ec52:	3630      	adds	r6, #48	; 0x30
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4640      	mov	r0, r8
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	f7f1 fb46 	bl	80002ec <__aeabi_dsub>
 800ec60:	f805 6b01 	strb.w	r6, [r5], #1
 800ec64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec66:	429d      	cmp	r5, r3
 800ec68:	4680      	mov	r8, r0
 800ec6a:	4689      	mov	r9, r1
 800ec6c:	f04f 0200 	mov.w	r2, #0
 800ec70:	d124      	bne.n	800ecbc <_dtoa_r+0x60c>
 800ec72:	4b1b      	ldr	r3, [pc, #108]	; (800ece0 <_dtoa_r+0x630>)
 800ec74:	4650      	mov	r0, sl
 800ec76:	4659      	mov	r1, fp
 800ec78:	f7f1 fb3a 	bl	80002f0 <__adddf3>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4640      	mov	r0, r8
 800ec82:	4649      	mov	r1, r9
 800ec84:	f7f1 ff7a 	bl	8000b7c <__aeabi_dcmpgt>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d173      	bne.n	800ed74 <_dtoa_r+0x6c4>
 800ec8c:	4652      	mov	r2, sl
 800ec8e:	465b      	mov	r3, fp
 800ec90:	4913      	ldr	r1, [pc, #76]	; (800ece0 <_dtoa_r+0x630>)
 800ec92:	2000      	movs	r0, #0
 800ec94:	f7f1 fb2a 	bl	80002ec <__aeabi_dsub>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	4649      	mov	r1, r9
 800eca0:	f7f1 ff4e 	bl	8000b40 <__aeabi_dcmplt>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f43f af35 	beq.w	800eb14 <_dtoa_r+0x464>
 800ecaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ecac:	1e6b      	subs	r3, r5, #1
 800ecae:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ecb4:	2b30      	cmp	r3, #48	; 0x30
 800ecb6:	d0f8      	beq.n	800ecaa <_dtoa_r+0x5fa>
 800ecb8:	9700      	str	r7, [sp, #0]
 800ecba:	e049      	b.n	800ed50 <_dtoa_r+0x6a0>
 800ecbc:	4b05      	ldr	r3, [pc, #20]	; (800ecd4 <_dtoa_r+0x624>)
 800ecbe:	f7f1 fccd 	bl	800065c <__aeabi_dmul>
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	4689      	mov	r9, r1
 800ecc6:	e7bd      	b.n	800ec44 <_dtoa_r+0x594>
 800ecc8:	08011bb0 	.word	0x08011bb0
 800eccc:	08011b88 	.word	0x08011b88
 800ecd0:	3ff00000 	.word	0x3ff00000
 800ecd4:	40240000 	.word	0x40240000
 800ecd8:	401c0000 	.word	0x401c0000
 800ecdc:	40140000 	.word	0x40140000
 800ece0:	3fe00000 	.word	0x3fe00000
 800ece4:	9d01      	ldr	r5, [sp, #4]
 800ece6:	4656      	mov	r6, sl
 800ece8:	465f      	mov	r7, fp
 800ecea:	4642      	mov	r2, r8
 800ecec:	464b      	mov	r3, r9
 800ecee:	4630      	mov	r0, r6
 800ecf0:	4639      	mov	r1, r7
 800ecf2:	f7f1 fddd 	bl	80008b0 <__aeabi_ddiv>
 800ecf6:	f7f1 ff61 	bl	8000bbc <__aeabi_d2iz>
 800ecfa:	4682      	mov	sl, r0
 800ecfc:	f7f1 fc44 	bl	8000588 <__aeabi_i2d>
 800ed00:	4642      	mov	r2, r8
 800ed02:	464b      	mov	r3, r9
 800ed04:	f7f1 fcaa 	bl	800065c <__aeabi_dmul>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ed14:	f7f1 faea 	bl	80002ec <__aeabi_dsub>
 800ed18:	f805 6b01 	strb.w	r6, [r5], #1
 800ed1c:	9e01      	ldr	r6, [sp, #4]
 800ed1e:	9f03      	ldr	r7, [sp, #12]
 800ed20:	1bae      	subs	r6, r5, r6
 800ed22:	42b7      	cmp	r7, r6
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	d135      	bne.n	800ed96 <_dtoa_r+0x6e6>
 800ed2a:	f7f1 fae1 	bl	80002f0 <__adddf3>
 800ed2e:	4642      	mov	r2, r8
 800ed30:	464b      	mov	r3, r9
 800ed32:	4606      	mov	r6, r0
 800ed34:	460f      	mov	r7, r1
 800ed36:	f7f1 ff21 	bl	8000b7c <__aeabi_dcmpgt>
 800ed3a:	b9d0      	cbnz	r0, 800ed72 <_dtoa_r+0x6c2>
 800ed3c:	4642      	mov	r2, r8
 800ed3e:	464b      	mov	r3, r9
 800ed40:	4630      	mov	r0, r6
 800ed42:	4639      	mov	r1, r7
 800ed44:	f7f1 fef2 	bl	8000b2c <__aeabi_dcmpeq>
 800ed48:	b110      	cbz	r0, 800ed50 <_dtoa_r+0x6a0>
 800ed4a:	f01a 0f01 	tst.w	sl, #1
 800ed4e:	d110      	bne.n	800ed72 <_dtoa_r+0x6c2>
 800ed50:	4620      	mov	r0, r4
 800ed52:	ee18 1a10 	vmov	r1, s16
 800ed56:	f000 fee3 	bl	800fb20 <_Bfree>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	9800      	ldr	r0, [sp, #0]
 800ed5e:	702b      	strb	r3, [r5, #0]
 800ed60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed62:	3001      	adds	r0, #1
 800ed64:	6018      	str	r0, [r3, #0]
 800ed66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f43f acf1 	beq.w	800e750 <_dtoa_r+0xa0>
 800ed6e:	601d      	str	r5, [r3, #0]
 800ed70:	e4ee      	b.n	800e750 <_dtoa_r+0xa0>
 800ed72:	9f00      	ldr	r7, [sp, #0]
 800ed74:	462b      	mov	r3, r5
 800ed76:	461d      	mov	r5, r3
 800ed78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed7c:	2a39      	cmp	r2, #57	; 0x39
 800ed7e:	d106      	bne.n	800ed8e <_dtoa_r+0x6de>
 800ed80:	9a01      	ldr	r2, [sp, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d1f7      	bne.n	800ed76 <_dtoa_r+0x6c6>
 800ed86:	9901      	ldr	r1, [sp, #4]
 800ed88:	2230      	movs	r2, #48	; 0x30
 800ed8a:	3701      	adds	r7, #1
 800ed8c:	700a      	strb	r2, [r1, #0]
 800ed8e:	781a      	ldrb	r2, [r3, #0]
 800ed90:	3201      	adds	r2, #1
 800ed92:	701a      	strb	r2, [r3, #0]
 800ed94:	e790      	b.n	800ecb8 <_dtoa_r+0x608>
 800ed96:	4ba6      	ldr	r3, [pc, #664]	; (800f030 <_dtoa_r+0x980>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f7f1 fc5f 	bl	800065c <__aeabi_dmul>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2300      	movs	r3, #0
 800eda2:	4606      	mov	r6, r0
 800eda4:	460f      	mov	r7, r1
 800eda6:	f7f1 fec1 	bl	8000b2c <__aeabi_dcmpeq>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d09d      	beq.n	800ecea <_dtoa_r+0x63a>
 800edae:	e7cf      	b.n	800ed50 <_dtoa_r+0x6a0>
 800edb0:	9a08      	ldr	r2, [sp, #32]
 800edb2:	2a00      	cmp	r2, #0
 800edb4:	f000 80d7 	beq.w	800ef66 <_dtoa_r+0x8b6>
 800edb8:	9a06      	ldr	r2, [sp, #24]
 800edba:	2a01      	cmp	r2, #1
 800edbc:	f300 80ba 	bgt.w	800ef34 <_dtoa_r+0x884>
 800edc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edc2:	2a00      	cmp	r2, #0
 800edc4:	f000 80b2 	beq.w	800ef2c <_dtoa_r+0x87c>
 800edc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800edcc:	9e07      	ldr	r6, [sp, #28]
 800edce:	9d04      	ldr	r5, [sp, #16]
 800edd0:	9a04      	ldr	r2, [sp, #16]
 800edd2:	441a      	add	r2, r3
 800edd4:	9204      	str	r2, [sp, #16]
 800edd6:	9a05      	ldr	r2, [sp, #20]
 800edd8:	2101      	movs	r1, #1
 800edda:	441a      	add	r2, r3
 800eddc:	4620      	mov	r0, r4
 800edde:	9205      	str	r2, [sp, #20]
 800ede0:	f000 ffa0 	bl	800fd24 <__i2b>
 800ede4:	4607      	mov	r7, r0
 800ede6:	2d00      	cmp	r5, #0
 800ede8:	dd0c      	ble.n	800ee04 <_dtoa_r+0x754>
 800edea:	9b05      	ldr	r3, [sp, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	dd09      	ble.n	800ee04 <_dtoa_r+0x754>
 800edf0:	42ab      	cmp	r3, r5
 800edf2:	9a04      	ldr	r2, [sp, #16]
 800edf4:	bfa8      	it	ge
 800edf6:	462b      	movge	r3, r5
 800edf8:	1ad2      	subs	r2, r2, r3
 800edfa:	9204      	str	r2, [sp, #16]
 800edfc:	9a05      	ldr	r2, [sp, #20]
 800edfe:	1aed      	subs	r5, r5, r3
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	9b07      	ldr	r3, [sp, #28]
 800ee06:	b31b      	cbz	r3, 800ee50 <_dtoa_r+0x7a0>
 800ee08:	9b08      	ldr	r3, [sp, #32]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 80af 	beq.w	800ef6e <_dtoa_r+0x8be>
 800ee10:	2e00      	cmp	r6, #0
 800ee12:	dd13      	ble.n	800ee3c <_dtoa_r+0x78c>
 800ee14:	4639      	mov	r1, r7
 800ee16:	4632      	mov	r2, r6
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f001 f843 	bl	800fea4 <__pow5mult>
 800ee1e:	ee18 2a10 	vmov	r2, s16
 800ee22:	4601      	mov	r1, r0
 800ee24:	4607      	mov	r7, r0
 800ee26:	4620      	mov	r0, r4
 800ee28:	f000 ff92 	bl	800fd50 <__multiply>
 800ee2c:	ee18 1a10 	vmov	r1, s16
 800ee30:	4680      	mov	r8, r0
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 fe74 	bl	800fb20 <_Bfree>
 800ee38:	ee08 8a10 	vmov	s16, r8
 800ee3c:	9b07      	ldr	r3, [sp, #28]
 800ee3e:	1b9a      	subs	r2, r3, r6
 800ee40:	d006      	beq.n	800ee50 <_dtoa_r+0x7a0>
 800ee42:	ee18 1a10 	vmov	r1, s16
 800ee46:	4620      	mov	r0, r4
 800ee48:	f001 f82c 	bl	800fea4 <__pow5mult>
 800ee4c:	ee08 0a10 	vmov	s16, r0
 800ee50:	2101      	movs	r1, #1
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 ff66 	bl	800fd24 <__i2b>
 800ee58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	f340 8088 	ble.w	800ef72 <_dtoa_r+0x8c2>
 800ee62:	461a      	mov	r2, r3
 800ee64:	4601      	mov	r1, r0
 800ee66:	4620      	mov	r0, r4
 800ee68:	f001 f81c 	bl	800fea4 <__pow5mult>
 800ee6c:	9b06      	ldr	r3, [sp, #24]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	4606      	mov	r6, r0
 800ee72:	f340 8081 	ble.w	800ef78 <_dtoa_r+0x8c8>
 800ee76:	f04f 0800 	mov.w	r8, #0
 800ee7a:	6933      	ldr	r3, [r6, #16]
 800ee7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ee80:	6918      	ldr	r0, [r3, #16]
 800ee82:	f000 feff 	bl	800fc84 <__hi0bits>
 800ee86:	f1c0 0020 	rsb	r0, r0, #32
 800ee8a:	9b05      	ldr	r3, [sp, #20]
 800ee8c:	4418      	add	r0, r3
 800ee8e:	f010 001f 	ands.w	r0, r0, #31
 800ee92:	f000 8092 	beq.w	800efba <_dtoa_r+0x90a>
 800ee96:	f1c0 0320 	rsb	r3, r0, #32
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	f340 808a 	ble.w	800efb4 <_dtoa_r+0x904>
 800eea0:	f1c0 001c 	rsb	r0, r0, #28
 800eea4:	9b04      	ldr	r3, [sp, #16]
 800eea6:	4403      	add	r3, r0
 800eea8:	9304      	str	r3, [sp, #16]
 800eeaa:	9b05      	ldr	r3, [sp, #20]
 800eeac:	4403      	add	r3, r0
 800eeae:	4405      	add	r5, r0
 800eeb0:	9305      	str	r3, [sp, #20]
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	dd07      	ble.n	800eec8 <_dtoa_r+0x818>
 800eeb8:	ee18 1a10 	vmov	r1, s16
 800eebc:	461a      	mov	r2, r3
 800eebe:	4620      	mov	r0, r4
 800eec0:	f001 f84a 	bl	800ff58 <__lshift>
 800eec4:	ee08 0a10 	vmov	s16, r0
 800eec8:	9b05      	ldr	r3, [sp, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dd05      	ble.n	800eeda <_dtoa_r+0x82a>
 800eece:	4631      	mov	r1, r6
 800eed0:	461a      	mov	r2, r3
 800eed2:	4620      	mov	r0, r4
 800eed4:	f001 f840 	bl	800ff58 <__lshift>
 800eed8:	4606      	mov	r6, r0
 800eeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d06e      	beq.n	800efbe <_dtoa_r+0x90e>
 800eee0:	ee18 0a10 	vmov	r0, s16
 800eee4:	4631      	mov	r1, r6
 800eee6:	f001 f8a7 	bl	8010038 <__mcmp>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	da67      	bge.n	800efbe <_dtoa_r+0x90e>
 800eeee:	9b00      	ldr	r3, [sp, #0]
 800eef0:	3b01      	subs	r3, #1
 800eef2:	ee18 1a10 	vmov	r1, s16
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	220a      	movs	r2, #10
 800eefa:	2300      	movs	r3, #0
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 fe31 	bl	800fb64 <__multadd>
 800ef02:	9b08      	ldr	r3, [sp, #32]
 800ef04:	ee08 0a10 	vmov	s16, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 81b1 	beq.w	800f270 <_dtoa_r+0xbc0>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	4639      	mov	r1, r7
 800ef12:	220a      	movs	r2, #10
 800ef14:	4620      	mov	r0, r4
 800ef16:	f000 fe25 	bl	800fb64 <__multadd>
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	4607      	mov	r7, r0
 800ef20:	f300 808e 	bgt.w	800f040 <_dtoa_r+0x990>
 800ef24:	9b06      	ldr	r3, [sp, #24]
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	dc51      	bgt.n	800efce <_dtoa_r+0x91e>
 800ef2a:	e089      	b.n	800f040 <_dtoa_r+0x990>
 800ef2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef32:	e74b      	b.n	800edcc <_dtoa_r+0x71c>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	1e5e      	subs	r6, r3, #1
 800ef38:	9b07      	ldr	r3, [sp, #28]
 800ef3a:	42b3      	cmp	r3, r6
 800ef3c:	bfbf      	itttt	lt
 800ef3e:	9b07      	ldrlt	r3, [sp, #28]
 800ef40:	9607      	strlt	r6, [sp, #28]
 800ef42:	1af2      	sublt	r2, r6, r3
 800ef44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ef46:	bfb6      	itet	lt
 800ef48:	189b      	addlt	r3, r3, r2
 800ef4a:	1b9e      	subge	r6, r3, r6
 800ef4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ef4e:	9b03      	ldr	r3, [sp, #12]
 800ef50:	bfb8      	it	lt
 800ef52:	2600      	movlt	r6, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfb7      	itett	lt
 800ef58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ef5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ef60:	1a9d      	sublt	r5, r3, r2
 800ef62:	2300      	movlt	r3, #0
 800ef64:	e734      	b.n	800edd0 <_dtoa_r+0x720>
 800ef66:	9e07      	ldr	r6, [sp, #28]
 800ef68:	9d04      	ldr	r5, [sp, #16]
 800ef6a:	9f08      	ldr	r7, [sp, #32]
 800ef6c:	e73b      	b.n	800ede6 <_dtoa_r+0x736>
 800ef6e:	9a07      	ldr	r2, [sp, #28]
 800ef70:	e767      	b.n	800ee42 <_dtoa_r+0x792>
 800ef72:	9b06      	ldr	r3, [sp, #24]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	dc18      	bgt.n	800efaa <_dtoa_r+0x8fa>
 800ef78:	f1ba 0f00 	cmp.w	sl, #0
 800ef7c:	d115      	bne.n	800efaa <_dtoa_r+0x8fa>
 800ef7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef82:	b993      	cbnz	r3, 800efaa <_dtoa_r+0x8fa>
 800ef84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef88:	0d1b      	lsrs	r3, r3, #20
 800ef8a:	051b      	lsls	r3, r3, #20
 800ef8c:	b183      	cbz	r3, 800efb0 <_dtoa_r+0x900>
 800ef8e:	9b04      	ldr	r3, [sp, #16]
 800ef90:	3301      	adds	r3, #1
 800ef92:	9304      	str	r3, [sp, #16]
 800ef94:	9b05      	ldr	r3, [sp, #20]
 800ef96:	3301      	adds	r3, #1
 800ef98:	9305      	str	r3, [sp, #20]
 800ef9a:	f04f 0801 	mov.w	r8, #1
 800ef9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f47f af6a 	bne.w	800ee7a <_dtoa_r+0x7ca>
 800efa6:	2001      	movs	r0, #1
 800efa8:	e76f      	b.n	800ee8a <_dtoa_r+0x7da>
 800efaa:	f04f 0800 	mov.w	r8, #0
 800efae:	e7f6      	b.n	800ef9e <_dtoa_r+0x8ee>
 800efb0:	4698      	mov	r8, r3
 800efb2:	e7f4      	b.n	800ef9e <_dtoa_r+0x8ee>
 800efb4:	f43f af7d 	beq.w	800eeb2 <_dtoa_r+0x802>
 800efb8:	4618      	mov	r0, r3
 800efba:	301c      	adds	r0, #28
 800efbc:	e772      	b.n	800eea4 <_dtoa_r+0x7f4>
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	dc37      	bgt.n	800f034 <_dtoa_r+0x984>
 800efc4:	9b06      	ldr	r3, [sp, #24]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	dd34      	ble.n	800f034 <_dtoa_r+0x984>
 800efca:	9b03      	ldr	r3, [sp, #12]
 800efcc:	9302      	str	r3, [sp, #8]
 800efce:	9b02      	ldr	r3, [sp, #8]
 800efd0:	b96b      	cbnz	r3, 800efee <_dtoa_r+0x93e>
 800efd2:	4631      	mov	r1, r6
 800efd4:	2205      	movs	r2, #5
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 fdc4 	bl	800fb64 <__multadd>
 800efdc:	4601      	mov	r1, r0
 800efde:	4606      	mov	r6, r0
 800efe0:	ee18 0a10 	vmov	r0, s16
 800efe4:	f001 f828 	bl	8010038 <__mcmp>
 800efe8:	2800      	cmp	r0, #0
 800efea:	f73f adbb 	bgt.w	800eb64 <_dtoa_r+0x4b4>
 800efee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff0:	9d01      	ldr	r5, [sp, #4]
 800eff2:	43db      	mvns	r3, r3
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	f04f 0800 	mov.w	r8, #0
 800effa:	4631      	mov	r1, r6
 800effc:	4620      	mov	r0, r4
 800effe:	f000 fd8f 	bl	800fb20 <_Bfree>
 800f002:	2f00      	cmp	r7, #0
 800f004:	f43f aea4 	beq.w	800ed50 <_dtoa_r+0x6a0>
 800f008:	f1b8 0f00 	cmp.w	r8, #0
 800f00c:	d005      	beq.n	800f01a <_dtoa_r+0x96a>
 800f00e:	45b8      	cmp	r8, r7
 800f010:	d003      	beq.n	800f01a <_dtoa_r+0x96a>
 800f012:	4641      	mov	r1, r8
 800f014:	4620      	mov	r0, r4
 800f016:	f000 fd83 	bl	800fb20 <_Bfree>
 800f01a:	4639      	mov	r1, r7
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 fd7f 	bl	800fb20 <_Bfree>
 800f022:	e695      	b.n	800ed50 <_dtoa_r+0x6a0>
 800f024:	2600      	movs	r6, #0
 800f026:	4637      	mov	r7, r6
 800f028:	e7e1      	b.n	800efee <_dtoa_r+0x93e>
 800f02a:	9700      	str	r7, [sp, #0]
 800f02c:	4637      	mov	r7, r6
 800f02e:	e599      	b.n	800eb64 <_dtoa_r+0x4b4>
 800f030:	40240000 	.word	0x40240000
 800f034:	9b08      	ldr	r3, [sp, #32]
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 80ca 	beq.w	800f1d0 <_dtoa_r+0xb20>
 800f03c:	9b03      	ldr	r3, [sp, #12]
 800f03e:	9302      	str	r3, [sp, #8]
 800f040:	2d00      	cmp	r5, #0
 800f042:	dd05      	ble.n	800f050 <_dtoa_r+0x9a0>
 800f044:	4639      	mov	r1, r7
 800f046:	462a      	mov	r2, r5
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 ff85 	bl	800ff58 <__lshift>
 800f04e:	4607      	mov	r7, r0
 800f050:	f1b8 0f00 	cmp.w	r8, #0
 800f054:	d05b      	beq.n	800f10e <_dtoa_r+0xa5e>
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fd21 	bl	800faa0 <_Balloc>
 800f05e:	4605      	mov	r5, r0
 800f060:	b928      	cbnz	r0, 800f06e <_dtoa_r+0x9be>
 800f062:	4b87      	ldr	r3, [pc, #540]	; (800f280 <_dtoa_r+0xbd0>)
 800f064:	4602      	mov	r2, r0
 800f066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f06a:	f7ff bb3b 	b.w	800e6e4 <_dtoa_r+0x34>
 800f06e:	693a      	ldr	r2, [r7, #16]
 800f070:	3202      	adds	r2, #2
 800f072:	0092      	lsls	r2, r2, #2
 800f074:	f107 010c 	add.w	r1, r7, #12
 800f078:	300c      	adds	r0, #12
 800f07a:	f7fd f819 	bl	800c0b0 <memcpy>
 800f07e:	2201      	movs	r2, #1
 800f080:	4629      	mov	r1, r5
 800f082:	4620      	mov	r0, r4
 800f084:	f000 ff68 	bl	800ff58 <__lshift>
 800f088:	9b01      	ldr	r3, [sp, #4]
 800f08a:	f103 0901 	add.w	r9, r3, #1
 800f08e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f092:	4413      	add	r3, r2
 800f094:	9305      	str	r3, [sp, #20]
 800f096:	f00a 0301 	and.w	r3, sl, #1
 800f09a:	46b8      	mov	r8, r7
 800f09c:	9304      	str	r3, [sp, #16]
 800f09e:	4607      	mov	r7, r0
 800f0a0:	4631      	mov	r1, r6
 800f0a2:	ee18 0a10 	vmov	r0, s16
 800f0a6:	f7ff fa75 	bl	800e594 <quorem>
 800f0aa:	4641      	mov	r1, r8
 800f0ac:	9002      	str	r0, [sp, #8]
 800f0ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f0b2:	ee18 0a10 	vmov	r0, s16
 800f0b6:	f000 ffbf 	bl	8010038 <__mcmp>
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	9003      	str	r0, [sp, #12]
 800f0be:	4631      	mov	r1, r6
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f000 ffd5 	bl	8010070 <__mdiff>
 800f0c6:	68c2      	ldr	r2, [r0, #12]
 800f0c8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	bb02      	cbnz	r2, 800f112 <_dtoa_r+0xa62>
 800f0d0:	4601      	mov	r1, r0
 800f0d2:	ee18 0a10 	vmov	r0, s16
 800f0d6:	f000 ffaf 	bl	8010038 <__mcmp>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4620      	mov	r0, r4
 800f0e0:	9207      	str	r2, [sp, #28]
 800f0e2:	f000 fd1d 	bl	800fb20 <_Bfree>
 800f0e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f0ea:	ea43 0102 	orr.w	r1, r3, r2
 800f0ee:	9b04      	ldr	r3, [sp, #16]
 800f0f0:	430b      	orrs	r3, r1
 800f0f2:	464d      	mov	r5, r9
 800f0f4:	d10f      	bne.n	800f116 <_dtoa_r+0xa66>
 800f0f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f0fa:	d02a      	beq.n	800f152 <_dtoa_r+0xaa2>
 800f0fc:	9b03      	ldr	r3, [sp, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	dd02      	ble.n	800f108 <_dtoa_r+0xa58>
 800f102:	9b02      	ldr	r3, [sp, #8]
 800f104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f108:	f88b a000 	strb.w	sl, [fp]
 800f10c:	e775      	b.n	800effa <_dtoa_r+0x94a>
 800f10e:	4638      	mov	r0, r7
 800f110:	e7ba      	b.n	800f088 <_dtoa_r+0x9d8>
 800f112:	2201      	movs	r2, #1
 800f114:	e7e2      	b.n	800f0dc <_dtoa_r+0xa2c>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	db04      	blt.n	800f126 <_dtoa_r+0xa76>
 800f11c:	9906      	ldr	r1, [sp, #24]
 800f11e:	430b      	orrs	r3, r1
 800f120:	9904      	ldr	r1, [sp, #16]
 800f122:	430b      	orrs	r3, r1
 800f124:	d122      	bne.n	800f16c <_dtoa_r+0xabc>
 800f126:	2a00      	cmp	r2, #0
 800f128:	ddee      	ble.n	800f108 <_dtoa_r+0xa58>
 800f12a:	ee18 1a10 	vmov	r1, s16
 800f12e:	2201      	movs	r2, #1
 800f130:	4620      	mov	r0, r4
 800f132:	f000 ff11 	bl	800ff58 <__lshift>
 800f136:	4631      	mov	r1, r6
 800f138:	ee08 0a10 	vmov	s16, r0
 800f13c:	f000 ff7c 	bl	8010038 <__mcmp>
 800f140:	2800      	cmp	r0, #0
 800f142:	dc03      	bgt.n	800f14c <_dtoa_r+0xa9c>
 800f144:	d1e0      	bne.n	800f108 <_dtoa_r+0xa58>
 800f146:	f01a 0f01 	tst.w	sl, #1
 800f14a:	d0dd      	beq.n	800f108 <_dtoa_r+0xa58>
 800f14c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f150:	d1d7      	bne.n	800f102 <_dtoa_r+0xa52>
 800f152:	2339      	movs	r3, #57	; 0x39
 800f154:	f88b 3000 	strb.w	r3, [fp]
 800f158:	462b      	mov	r3, r5
 800f15a:	461d      	mov	r5, r3
 800f15c:	3b01      	subs	r3, #1
 800f15e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f162:	2a39      	cmp	r2, #57	; 0x39
 800f164:	d071      	beq.n	800f24a <_dtoa_r+0xb9a>
 800f166:	3201      	adds	r2, #1
 800f168:	701a      	strb	r2, [r3, #0]
 800f16a:	e746      	b.n	800effa <_dtoa_r+0x94a>
 800f16c:	2a00      	cmp	r2, #0
 800f16e:	dd07      	ble.n	800f180 <_dtoa_r+0xad0>
 800f170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f174:	d0ed      	beq.n	800f152 <_dtoa_r+0xaa2>
 800f176:	f10a 0301 	add.w	r3, sl, #1
 800f17a:	f88b 3000 	strb.w	r3, [fp]
 800f17e:	e73c      	b.n	800effa <_dtoa_r+0x94a>
 800f180:	9b05      	ldr	r3, [sp, #20]
 800f182:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f186:	4599      	cmp	r9, r3
 800f188:	d047      	beq.n	800f21a <_dtoa_r+0xb6a>
 800f18a:	ee18 1a10 	vmov	r1, s16
 800f18e:	2300      	movs	r3, #0
 800f190:	220a      	movs	r2, #10
 800f192:	4620      	mov	r0, r4
 800f194:	f000 fce6 	bl	800fb64 <__multadd>
 800f198:	45b8      	cmp	r8, r7
 800f19a:	ee08 0a10 	vmov	s16, r0
 800f19e:	f04f 0300 	mov.w	r3, #0
 800f1a2:	f04f 020a 	mov.w	r2, #10
 800f1a6:	4641      	mov	r1, r8
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	d106      	bne.n	800f1ba <_dtoa_r+0xb0a>
 800f1ac:	f000 fcda 	bl	800fb64 <__multadd>
 800f1b0:	4680      	mov	r8, r0
 800f1b2:	4607      	mov	r7, r0
 800f1b4:	f109 0901 	add.w	r9, r9, #1
 800f1b8:	e772      	b.n	800f0a0 <_dtoa_r+0x9f0>
 800f1ba:	f000 fcd3 	bl	800fb64 <__multadd>
 800f1be:	4639      	mov	r1, r7
 800f1c0:	4680      	mov	r8, r0
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	220a      	movs	r2, #10
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 fccc 	bl	800fb64 <__multadd>
 800f1cc:	4607      	mov	r7, r0
 800f1ce:	e7f1      	b.n	800f1b4 <_dtoa_r+0xb04>
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	9302      	str	r3, [sp, #8]
 800f1d4:	9d01      	ldr	r5, [sp, #4]
 800f1d6:	ee18 0a10 	vmov	r0, s16
 800f1da:	4631      	mov	r1, r6
 800f1dc:	f7ff f9da 	bl	800e594 <quorem>
 800f1e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f1e4:	9b01      	ldr	r3, [sp, #4]
 800f1e6:	f805 ab01 	strb.w	sl, [r5], #1
 800f1ea:	1aea      	subs	r2, r5, r3
 800f1ec:	9b02      	ldr	r3, [sp, #8]
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	dd09      	ble.n	800f206 <_dtoa_r+0xb56>
 800f1f2:	ee18 1a10 	vmov	r1, s16
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	220a      	movs	r2, #10
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 fcb2 	bl	800fb64 <__multadd>
 800f200:	ee08 0a10 	vmov	s16, r0
 800f204:	e7e7      	b.n	800f1d6 <_dtoa_r+0xb26>
 800f206:	9b02      	ldr	r3, [sp, #8]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	bfc8      	it	gt
 800f20c:	461d      	movgt	r5, r3
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	bfd8      	it	le
 800f212:	2501      	movle	r5, #1
 800f214:	441d      	add	r5, r3
 800f216:	f04f 0800 	mov.w	r8, #0
 800f21a:	ee18 1a10 	vmov	r1, s16
 800f21e:	2201      	movs	r2, #1
 800f220:	4620      	mov	r0, r4
 800f222:	f000 fe99 	bl	800ff58 <__lshift>
 800f226:	4631      	mov	r1, r6
 800f228:	ee08 0a10 	vmov	s16, r0
 800f22c:	f000 ff04 	bl	8010038 <__mcmp>
 800f230:	2800      	cmp	r0, #0
 800f232:	dc91      	bgt.n	800f158 <_dtoa_r+0xaa8>
 800f234:	d102      	bne.n	800f23c <_dtoa_r+0xb8c>
 800f236:	f01a 0f01 	tst.w	sl, #1
 800f23a:	d18d      	bne.n	800f158 <_dtoa_r+0xaa8>
 800f23c:	462b      	mov	r3, r5
 800f23e:	461d      	mov	r5, r3
 800f240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f244:	2a30      	cmp	r2, #48	; 0x30
 800f246:	d0fa      	beq.n	800f23e <_dtoa_r+0xb8e>
 800f248:	e6d7      	b.n	800effa <_dtoa_r+0x94a>
 800f24a:	9a01      	ldr	r2, [sp, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d184      	bne.n	800f15a <_dtoa_r+0xaaa>
 800f250:	9b00      	ldr	r3, [sp, #0]
 800f252:	3301      	adds	r3, #1
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	2331      	movs	r3, #49	; 0x31
 800f258:	7013      	strb	r3, [r2, #0]
 800f25a:	e6ce      	b.n	800effa <_dtoa_r+0x94a>
 800f25c:	4b09      	ldr	r3, [pc, #36]	; (800f284 <_dtoa_r+0xbd4>)
 800f25e:	f7ff ba95 	b.w	800e78c <_dtoa_r+0xdc>
 800f262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f264:	2b00      	cmp	r3, #0
 800f266:	f47f aa6e 	bne.w	800e746 <_dtoa_r+0x96>
 800f26a:	4b07      	ldr	r3, [pc, #28]	; (800f288 <_dtoa_r+0xbd8>)
 800f26c:	f7ff ba8e 	b.w	800e78c <_dtoa_r+0xdc>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	dcae      	bgt.n	800f1d4 <_dtoa_r+0xb24>
 800f276:	9b06      	ldr	r3, [sp, #24]
 800f278:	2b02      	cmp	r3, #2
 800f27a:	f73f aea8 	bgt.w	800efce <_dtoa_r+0x91e>
 800f27e:	e7a9      	b.n	800f1d4 <_dtoa_r+0xb24>
 800f280:	08011aa1 	.word	0x08011aa1
 800f284:	08011809 	.word	0x08011809
 800f288:	08011a39 	.word	0x08011a39

0800f28c <rshift>:
 800f28c:	6903      	ldr	r3, [r0, #16]
 800f28e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f29a:	f100 0414 	add.w	r4, r0, #20
 800f29e:	dd45      	ble.n	800f32c <rshift+0xa0>
 800f2a0:	f011 011f 	ands.w	r1, r1, #31
 800f2a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f2a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f2ac:	d10c      	bne.n	800f2c8 <rshift+0x3c>
 800f2ae:	f100 0710 	add.w	r7, r0, #16
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	42b1      	cmp	r1, r6
 800f2b6:	d334      	bcc.n	800f322 <rshift+0x96>
 800f2b8:	1a9b      	subs	r3, r3, r2
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	1eea      	subs	r2, r5, #3
 800f2be:	4296      	cmp	r6, r2
 800f2c0:	bf38      	it	cc
 800f2c2:	2300      	movcc	r3, #0
 800f2c4:	4423      	add	r3, r4
 800f2c6:	e015      	b.n	800f2f4 <rshift+0x68>
 800f2c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f2cc:	f1c1 0820 	rsb	r8, r1, #32
 800f2d0:	40cf      	lsrs	r7, r1
 800f2d2:	f105 0e04 	add.w	lr, r5, #4
 800f2d6:	46a1      	mov	r9, r4
 800f2d8:	4576      	cmp	r6, lr
 800f2da:	46f4      	mov	ip, lr
 800f2dc:	d815      	bhi.n	800f30a <rshift+0x7e>
 800f2de:	1a9a      	subs	r2, r3, r2
 800f2e0:	0092      	lsls	r2, r2, #2
 800f2e2:	3a04      	subs	r2, #4
 800f2e4:	3501      	adds	r5, #1
 800f2e6:	42ae      	cmp	r6, r5
 800f2e8:	bf38      	it	cc
 800f2ea:	2200      	movcc	r2, #0
 800f2ec:	18a3      	adds	r3, r4, r2
 800f2ee:	50a7      	str	r7, [r4, r2]
 800f2f0:	b107      	cbz	r7, 800f2f4 <rshift+0x68>
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	1b1a      	subs	r2, r3, r4
 800f2f6:	42a3      	cmp	r3, r4
 800f2f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f2fc:	bf08      	it	eq
 800f2fe:	2300      	moveq	r3, #0
 800f300:	6102      	str	r2, [r0, #16]
 800f302:	bf08      	it	eq
 800f304:	6143      	streq	r3, [r0, #20]
 800f306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30a:	f8dc c000 	ldr.w	ip, [ip]
 800f30e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f312:	ea4c 0707 	orr.w	r7, ip, r7
 800f316:	f849 7b04 	str.w	r7, [r9], #4
 800f31a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f31e:	40cf      	lsrs	r7, r1
 800f320:	e7da      	b.n	800f2d8 <rshift+0x4c>
 800f322:	f851 cb04 	ldr.w	ip, [r1], #4
 800f326:	f847 cf04 	str.w	ip, [r7, #4]!
 800f32a:	e7c3      	b.n	800f2b4 <rshift+0x28>
 800f32c:	4623      	mov	r3, r4
 800f32e:	e7e1      	b.n	800f2f4 <rshift+0x68>

0800f330 <__hexdig_fun>:
 800f330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f334:	2b09      	cmp	r3, #9
 800f336:	d802      	bhi.n	800f33e <__hexdig_fun+0xe>
 800f338:	3820      	subs	r0, #32
 800f33a:	b2c0      	uxtb	r0, r0
 800f33c:	4770      	bx	lr
 800f33e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f342:	2b05      	cmp	r3, #5
 800f344:	d801      	bhi.n	800f34a <__hexdig_fun+0x1a>
 800f346:	3847      	subs	r0, #71	; 0x47
 800f348:	e7f7      	b.n	800f33a <__hexdig_fun+0xa>
 800f34a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f34e:	2b05      	cmp	r3, #5
 800f350:	d801      	bhi.n	800f356 <__hexdig_fun+0x26>
 800f352:	3827      	subs	r0, #39	; 0x27
 800f354:	e7f1      	b.n	800f33a <__hexdig_fun+0xa>
 800f356:	2000      	movs	r0, #0
 800f358:	4770      	bx	lr
	...

0800f35c <__gethex>:
 800f35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f360:	ed2d 8b02 	vpush	{d8}
 800f364:	b089      	sub	sp, #36	; 0x24
 800f366:	ee08 0a10 	vmov	s16, r0
 800f36a:	9304      	str	r3, [sp, #16]
 800f36c:	4bb4      	ldr	r3, [pc, #720]	; (800f640 <__gethex+0x2e4>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	4618      	mov	r0, r3
 800f374:	468b      	mov	fp, r1
 800f376:	4690      	mov	r8, r2
 800f378:	f7f0 ffac 	bl	80002d4 <strlen>
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	f8db 2000 	ldr.w	r2, [fp]
 800f382:	4403      	add	r3, r0
 800f384:	4682      	mov	sl, r0
 800f386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f38a:	9305      	str	r3, [sp, #20]
 800f38c:	1c93      	adds	r3, r2, #2
 800f38e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f396:	32fe      	adds	r2, #254	; 0xfe
 800f398:	18d1      	adds	r1, r2, r3
 800f39a:	461f      	mov	r7, r3
 800f39c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f3a0:	9100      	str	r1, [sp, #0]
 800f3a2:	2830      	cmp	r0, #48	; 0x30
 800f3a4:	d0f8      	beq.n	800f398 <__gethex+0x3c>
 800f3a6:	f7ff ffc3 	bl	800f330 <__hexdig_fun>
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d13a      	bne.n	800f426 <__gethex+0xca>
 800f3b0:	9901      	ldr	r1, [sp, #4]
 800f3b2:	4652      	mov	r2, sl
 800f3b4:	4638      	mov	r0, r7
 800f3b6:	f001 fa2f 	bl	8010818 <strncmp>
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d168      	bne.n	800f492 <__gethex+0x136>
 800f3c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f3c4:	eb07 060a 	add.w	r6, r7, sl
 800f3c8:	f7ff ffb2 	bl	800f330 <__hexdig_fun>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d062      	beq.n	800f496 <__gethex+0x13a>
 800f3d0:	4633      	mov	r3, r6
 800f3d2:	7818      	ldrb	r0, [r3, #0]
 800f3d4:	2830      	cmp	r0, #48	; 0x30
 800f3d6:	461f      	mov	r7, r3
 800f3d8:	f103 0301 	add.w	r3, r3, #1
 800f3dc:	d0f9      	beq.n	800f3d2 <__gethex+0x76>
 800f3de:	f7ff ffa7 	bl	800f330 <__hexdig_fun>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	fab0 f480 	clz	r4, r0
 800f3e8:	0964      	lsrs	r4, r4, #5
 800f3ea:	4635      	mov	r5, r6
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	463a      	mov	r2, r7
 800f3f0:	4616      	mov	r6, r2
 800f3f2:	3201      	adds	r2, #1
 800f3f4:	7830      	ldrb	r0, [r6, #0]
 800f3f6:	f7ff ff9b 	bl	800f330 <__hexdig_fun>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d1f8      	bne.n	800f3f0 <__gethex+0x94>
 800f3fe:	9901      	ldr	r1, [sp, #4]
 800f400:	4652      	mov	r2, sl
 800f402:	4630      	mov	r0, r6
 800f404:	f001 fa08 	bl	8010818 <strncmp>
 800f408:	b980      	cbnz	r0, 800f42c <__gethex+0xd0>
 800f40a:	b94d      	cbnz	r5, 800f420 <__gethex+0xc4>
 800f40c:	eb06 050a 	add.w	r5, r6, sl
 800f410:	462a      	mov	r2, r5
 800f412:	4616      	mov	r6, r2
 800f414:	3201      	adds	r2, #1
 800f416:	7830      	ldrb	r0, [r6, #0]
 800f418:	f7ff ff8a 	bl	800f330 <__hexdig_fun>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d1f8      	bne.n	800f412 <__gethex+0xb6>
 800f420:	1bad      	subs	r5, r5, r6
 800f422:	00ad      	lsls	r5, r5, #2
 800f424:	e004      	b.n	800f430 <__gethex+0xd4>
 800f426:	2400      	movs	r4, #0
 800f428:	4625      	mov	r5, r4
 800f42a:	e7e0      	b.n	800f3ee <__gethex+0x92>
 800f42c:	2d00      	cmp	r5, #0
 800f42e:	d1f7      	bne.n	800f420 <__gethex+0xc4>
 800f430:	7833      	ldrb	r3, [r6, #0]
 800f432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f436:	2b50      	cmp	r3, #80	; 0x50
 800f438:	d13b      	bne.n	800f4b2 <__gethex+0x156>
 800f43a:	7873      	ldrb	r3, [r6, #1]
 800f43c:	2b2b      	cmp	r3, #43	; 0x2b
 800f43e:	d02c      	beq.n	800f49a <__gethex+0x13e>
 800f440:	2b2d      	cmp	r3, #45	; 0x2d
 800f442:	d02e      	beq.n	800f4a2 <__gethex+0x146>
 800f444:	1c71      	adds	r1, r6, #1
 800f446:	f04f 0900 	mov.w	r9, #0
 800f44a:	7808      	ldrb	r0, [r1, #0]
 800f44c:	f7ff ff70 	bl	800f330 <__hexdig_fun>
 800f450:	1e43      	subs	r3, r0, #1
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b18      	cmp	r3, #24
 800f456:	d82c      	bhi.n	800f4b2 <__gethex+0x156>
 800f458:	f1a0 0210 	sub.w	r2, r0, #16
 800f45c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f460:	f7ff ff66 	bl	800f330 <__hexdig_fun>
 800f464:	1e43      	subs	r3, r0, #1
 800f466:	b2db      	uxtb	r3, r3
 800f468:	2b18      	cmp	r3, #24
 800f46a:	d91d      	bls.n	800f4a8 <__gethex+0x14c>
 800f46c:	f1b9 0f00 	cmp.w	r9, #0
 800f470:	d000      	beq.n	800f474 <__gethex+0x118>
 800f472:	4252      	negs	r2, r2
 800f474:	4415      	add	r5, r2
 800f476:	f8cb 1000 	str.w	r1, [fp]
 800f47a:	b1e4      	cbz	r4, 800f4b6 <__gethex+0x15a>
 800f47c:	9b00      	ldr	r3, [sp, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	bf14      	ite	ne
 800f482:	2700      	movne	r7, #0
 800f484:	2706      	moveq	r7, #6
 800f486:	4638      	mov	r0, r7
 800f488:	b009      	add	sp, #36	; 0x24
 800f48a:	ecbd 8b02 	vpop	{d8}
 800f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f492:	463e      	mov	r6, r7
 800f494:	4625      	mov	r5, r4
 800f496:	2401      	movs	r4, #1
 800f498:	e7ca      	b.n	800f430 <__gethex+0xd4>
 800f49a:	f04f 0900 	mov.w	r9, #0
 800f49e:	1cb1      	adds	r1, r6, #2
 800f4a0:	e7d3      	b.n	800f44a <__gethex+0xee>
 800f4a2:	f04f 0901 	mov.w	r9, #1
 800f4a6:	e7fa      	b.n	800f49e <__gethex+0x142>
 800f4a8:	230a      	movs	r3, #10
 800f4aa:	fb03 0202 	mla	r2, r3, r2, r0
 800f4ae:	3a10      	subs	r2, #16
 800f4b0:	e7d4      	b.n	800f45c <__gethex+0x100>
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	e7df      	b.n	800f476 <__gethex+0x11a>
 800f4b6:	1bf3      	subs	r3, r6, r7
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	2b07      	cmp	r3, #7
 800f4be:	dc0b      	bgt.n	800f4d8 <__gethex+0x17c>
 800f4c0:	ee18 0a10 	vmov	r0, s16
 800f4c4:	f000 faec 	bl	800faa0 <_Balloc>
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	b940      	cbnz	r0, 800f4de <__gethex+0x182>
 800f4cc:	4b5d      	ldr	r3, [pc, #372]	; (800f644 <__gethex+0x2e8>)
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	21de      	movs	r1, #222	; 0xde
 800f4d2:	485d      	ldr	r0, [pc, #372]	; (800f648 <__gethex+0x2ec>)
 800f4d4:	f7ff f830 	bl	800e538 <__assert_func>
 800f4d8:	3101      	adds	r1, #1
 800f4da:	105b      	asrs	r3, r3, #1
 800f4dc:	e7ee      	b.n	800f4bc <__gethex+0x160>
 800f4de:	f100 0914 	add.w	r9, r0, #20
 800f4e2:	f04f 0b00 	mov.w	fp, #0
 800f4e6:	f1ca 0301 	rsb	r3, sl, #1
 800f4ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800f4ee:	f8cd b000 	str.w	fp, [sp]
 800f4f2:	9306      	str	r3, [sp, #24]
 800f4f4:	42b7      	cmp	r7, r6
 800f4f6:	d340      	bcc.n	800f57a <__gethex+0x21e>
 800f4f8:	9802      	ldr	r0, [sp, #8]
 800f4fa:	9b00      	ldr	r3, [sp, #0]
 800f4fc:	f840 3b04 	str.w	r3, [r0], #4
 800f500:	eba0 0009 	sub.w	r0, r0, r9
 800f504:	1080      	asrs	r0, r0, #2
 800f506:	0146      	lsls	r6, r0, #5
 800f508:	6120      	str	r0, [r4, #16]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 fbba 	bl	800fc84 <__hi0bits>
 800f510:	1a30      	subs	r0, r6, r0
 800f512:	f8d8 6000 	ldr.w	r6, [r8]
 800f516:	42b0      	cmp	r0, r6
 800f518:	dd63      	ble.n	800f5e2 <__gethex+0x286>
 800f51a:	1b87      	subs	r7, r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 ff5e 	bl	80103e0 <__any_on>
 800f524:	4682      	mov	sl, r0
 800f526:	b1a8      	cbz	r0, 800f554 <__gethex+0x1f8>
 800f528:	1e7b      	subs	r3, r7, #1
 800f52a:	1159      	asrs	r1, r3, #5
 800f52c:	f003 021f 	and.w	r2, r3, #31
 800f530:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f534:	f04f 0a01 	mov.w	sl, #1
 800f538:	fa0a f202 	lsl.w	r2, sl, r2
 800f53c:	420a      	tst	r2, r1
 800f53e:	d009      	beq.n	800f554 <__gethex+0x1f8>
 800f540:	4553      	cmp	r3, sl
 800f542:	dd05      	ble.n	800f550 <__gethex+0x1f4>
 800f544:	1eb9      	subs	r1, r7, #2
 800f546:	4620      	mov	r0, r4
 800f548:	f000 ff4a 	bl	80103e0 <__any_on>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d145      	bne.n	800f5dc <__gethex+0x280>
 800f550:	f04f 0a02 	mov.w	sl, #2
 800f554:	4639      	mov	r1, r7
 800f556:	4620      	mov	r0, r4
 800f558:	f7ff fe98 	bl	800f28c <rshift>
 800f55c:	443d      	add	r5, r7
 800f55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f562:	42ab      	cmp	r3, r5
 800f564:	da4c      	bge.n	800f600 <__gethex+0x2a4>
 800f566:	ee18 0a10 	vmov	r0, s16
 800f56a:	4621      	mov	r1, r4
 800f56c:	f000 fad8 	bl	800fb20 <_Bfree>
 800f570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f572:	2300      	movs	r3, #0
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	27a3      	movs	r7, #163	; 0xa3
 800f578:	e785      	b.n	800f486 <__gethex+0x12a>
 800f57a:	1e73      	subs	r3, r6, #1
 800f57c:	9a05      	ldr	r2, [sp, #20]
 800f57e:	9303      	str	r3, [sp, #12]
 800f580:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f584:	4293      	cmp	r3, r2
 800f586:	d019      	beq.n	800f5bc <__gethex+0x260>
 800f588:	f1bb 0f20 	cmp.w	fp, #32
 800f58c:	d107      	bne.n	800f59e <__gethex+0x242>
 800f58e:	9b02      	ldr	r3, [sp, #8]
 800f590:	9a00      	ldr	r2, [sp, #0]
 800f592:	f843 2b04 	str.w	r2, [r3], #4
 800f596:	9302      	str	r3, [sp, #8]
 800f598:	2300      	movs	r3, #0
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	469b      	mov	fp, r3
 800f59e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f5a2:	f7ff fec5 	bl	800f330 <__hexdig_fun>
 800f5a6:	9b00      	ldr	r3, [sp, #0]
 800f5a8:	f000 000f 	and.w	r0, r0, #15
 800f5ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800f5b0:	4303      	orrs	r3, r0
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	f10b 0b04 	add.w	fp, fp, #4
 800f5b8:	9b03      	ldr	r3, [sp, #12]
 800f5ba:	e00d      	b.n	800f5d8 <__gethex+0x27c>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	9a06      	ldr	r2, [sp, #24]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	42bb      	cmp	r3, r7
 800f5c4:	d3e0      	bcc.n	800f588 <__gethex+0x22c>
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	9901      	ldr	r1, [sp, #4]
 800f5ca:	9307      	str	r3, [sp, #28]
 800f5cc:	4652      	mov	r2, sl
 800f5ce:	f001 f923 	bl	8010818 <strncmp>
 800f5d2:	9b07      	ldr	r3, [sp, #28]
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d1d7      	bne.n	800f588 <__gethex+0x22c>
 800f5d8:	461e      	mov	r6, r3
 800f5da:	e78b      	b.n	800f4f4 <__gethex+0x198>
 800f5dc:	f04f 0a03 	mov.w	sl, #3
 800f5e0:	e7b8      	b.n	800f554 <__gethex+0x1f8>
 800f5e2:	da0a      	bge.n	800f5fa <__gethex+0x29e>
 800f5e4:	1a37      	subs	r7, r6, r0
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	ee18 0a10 	vmov	r0, s16
 800f5ec:	463a      	mov	r2, r7
 800f5ee:	f000 fcb3 	bl	800ff58 <__lshift>
 800f5f2:	1bed      	subs	r5, r5, r7
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	f100 0914 	add.w	r9, r0, #20
 800f5fa:	f04f 0a00 	mov.w	sl, #0
 800f5fe:	e7ae      	b.n	800f55e <__gethex+0x202>
 800f600:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f604:	42a8      	cmp	r0, r5
 800f606:	dd72      	ble.n	800f6ee <__gethex+0x392>
 800f608:	1b45      	subs	r5, r0, r5
 800f60a:	42ae      	cmp	r6, r5
 800f60c:	dc36      	bgt.n	800f67c <__gethex+0x320>
 800f60e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f612:	2b02      	cmp	r3, #2
 800f614:	d02a      	beq.n	800f66c <__gethex+0x310>
 800f616:	2b03      	cmp	r3, #3
 800f618:	d02c      	beq.n	800f674 <__gethex+0x318>
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d11c      	bne.n	800f658 <__gethex+0x2fc>
 800f61e:	42ae      	cmp	r6, r5
 800f620:	d11a      	bne.n	800f658 <__gethex+0x2fc>
 800f622:	2e01      	cmp	r6, #1
 800f624:	d112      	bne.n	800f64c <__gethex+0x2f0>
 800f626:	9a04      	ldr	r2, [sp, #16]
 800f628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f62c:	6013      	str	r3, [r2, #0]
 800f62e:	2301      	movs	r3, #1
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	f8c9 3000 	str.w	r3, [r9]
 800f636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f638:	2762      	movs	r7, #98	; 0x62
 800f63a:	601c      	str	r4, [r3, #0]
 800f63c:	e723      	b.n	800f486 <__gethex+0x12a>
 800f63e:	bf00      	nop
 800f640:	08011b18 	.word	0x08011b18
 800f644:	08011aa1 	.word	0x08011aa1
 800f648:	08011ab2 	.word	0x08011ab2
 800f64c:	1e71      	subs	r1, r6, #1
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 fec6 	bl	80103e0 <__any_on>
 800f654:	2800      	cmp	r0, #0
 800f656:	d1e6      	bne.n	800f626 <__gethex+0x2ca>
 800f658:	ee18 0a10 	vmov	r0, s16
 800f65c:	4621      	mov	r1, r4
 800f65e:	f000 fa5f 	bl	800fb20 <_Bfree>
 800f662:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f664:	2300      	movs	r3, #0
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	2750      	movs	r7, #80	; 0x50
 800f66a:	e70c      	b.n	800f486 <__gethex+0x12a>
 800f66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1f2      	bne.n	800f658 <__gethex+0x2fc>
 800f672:	e7d8      	b.n	800f626 <__gethex+0x2ca>
 800f674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1d5      	bne.n	800f626 <__gethex+0x2ca>
 800f67a:	e7ed      	b.n	800f658 <__gethex+0x2fc>
 800f67c:	1e6f      	subs	r7, r5, #1
 800f67e:	f1ba 0f00 	cmp.w	sl, #0
 800f682:	d131      	bne.n	800f6e8 <__gethex+0x38c>
 800f684:	b127      	cbz	r7, 800f690 <__gethex+0x334>
 800f686:	4639      	mov	r1, r7
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 fea9 	bl	80103e0 <__any_on>
 800f68e:	4682      	mov	sl, r0
 800f690:	117b      	asrs	r3, r7, #5
 800f692:	2101      	movs	r1, #1
 800f694:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f698:	f007 071f 	and.w	r7, r7, #31
 800f69c:	fa01 f707 	lsl.w	r7, r1, r7
 800f6a0:	421f      	tst	r7, r3
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	bf18      	it	ne
 800f6a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f6ac:	1b76      	subs	r6, r6, r5
 800f6ae:	f7ff fded 	bl	800f28c <rshift>
 800f6b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f6b6:	2702      	movs	r7, #2
 800f6b8:	f1ba 0f00 	cmp.w	sl, #0
 800f6bc:	d048      	beq.n	800f750 <__gethex+0x3f4>
 800f6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d015      	beq.n	800f6f2 <__gethex+0x396>
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d017      	beq.n	800f6fa <__gethex+0x39e>
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d109      	bne.n	800f6e2 <__gethex+0x386>
 800f6ce:	f01a 0f02 	tst.w	sl, #2
 800f6d2:	d006      	beq.n	800f6e2 <__gethex+0x386>
 800f6d4:	f8d9 0000 	ldr.w	r0, [r9]
 800f6d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f6dc:	f01a 0f01 	tst.w	sl, #1
 800f6e0:	d10e      	bne.n	800f700 <__gethex+0x3a4>
 800f6e2:	f047 0710 	orr.w	r7, r7, #16
 800f6e6:	e033      	b.n	800f750 <__gethex+0x3f4>
 800f6e8:	f04f 0a01 	mov.w	sl, #1
 800f6ec:	e7d0      	b.n	800f690 <__gethex+0x334>
 800f6ee:	2701      	movs	r7, #1
 800f6f0:	e7e2      	b.n	800f6b8 <__gethex+0x35c>
 800f6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6f4:	f1c3 0301 	rsb	r3, r3, #1
 800f6f8:	9315      	str	r3, [sp, #84]	; 0x54
 800f6fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d0f0      	beq.n	800f6e2 <__gethex+0x386>
 800f700:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f704:	f104 0314 	add.w	r3, r4, #20
 800f708:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f70c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f710:	f04f 0c00 	mov.w	ip, #0
 800f714:	4618      	mov	r0, r3
 800f716:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f71e:	d01c      	beq.n	800f75a <__gethex+0x3fe>
 800f720:	3201      	adds	r2, #1
 800f722:	6002      	str	r2, [r0, #0]
 800f724:	2f02      	cmp	r7, #2
 800f726:	f104 0314 	add.w	r3, r4, #20
 800f72a:	d13f      	bne.n	800f7ac <__gethex+0x450>
 800f72c:	f8d8 2000 	ldr.w	r2, [r8]
 800f730:	3a01      	subs	r2, #1
 800f732:	42b2      	cmp	r2, r6
 800f734:	d10a      	bne.n	800f74c <__gethex+0x3f0>
 800f736:	1171      	asrs	r1, r6, #5
 800f738:	2201      	movs	r2, #1
 800f73a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f73e:	f006 061f 	and.w	r6, r6, #31
 800f742:	fa02 f606 	lsl.w	r6, r2, r6
 800f746:	421e      	tst	r6, r3
 800f748:	bf18      	it	ne
 800f74a:	4617      	movne	r7, r2
 800f74c:	f047 0720 	orr.w	r7, r7, #32
 800f750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f752:	601c      	str	r4, [r3, #0]
 800f754:	9b04      	ldr	r3, [sp, #16]
 800f756:	601d      	str	r5, [r3, #0]
 800f758:	e695      	b.n	800f486 <__gethex+0x12a>
 800f75a:	4299      	cmp	r1, r3
 800f75c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f760:	d8d8      	bhi.n	800f714 <__gethex+0x3b8>
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	459b      	cmp	fp, r3
 800f766:	db19      	blt.n	800f79c <__gethex+0x440>
 800f768:	6861      	ldr	r1, [r4, #4]
 800f76a:	ee18 0a10 	vmov	r0, s16
 800f76e:	3101      	adds	r1, #1
 800f770:	f000 f996 	bl	800faa0 <_Balloc>
 800f774:	4681      	mov	r9, r0
 800f776:	b918      	cbnz	r0, 800f780 <__gethex+0x424>
 800f778:	4b1a      	ldr	r3, [pc, #104]	; (800f7e4 <__gethex+0x488>)
 800f77a:	4602      	mov	r2, r0
 800f77c:	2184      	movs	r1, #132	; 0x84
 800f77e:	e6a8      	b.n	800f4d2 <__gethex+0x176>
 800f780:	6922      	ldr	r2, [r4, #16]
 800f782:	3202      	adds	r2, #2
 800f784:	f104 010c 	add.w	r1, r4, #12
 800f788:	0092      	lsls	r2, r2, #2
 800f78a:	300c      	adds	r0, #12
 800f78c:	f7fc fc90 	bl	800c0b0 <memcpy>
 800f790:	4621      	mov	r1, r4
 800f792:	ee18 0a10 	vmov	r0, s16
 800f796:	f000 f9c3 	bl	800fb20 <_Bfree>
 800f79a:	464c      	mov	r4, r9
 800f79c:	6923      	ldr	r3, [r4, #16]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7a4:	6122      	str	r2, [r4, #16]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	615a      	str	r2, [r3, #20]
 800f7aa:	e7bb      	b.n	800f724 <__gethex+0x3c8>
 800f7ac:	6922      	ldr	r2, [r4, #16]
 800f7ae:	455a      	cmp	r2, fp
 800f7b0:	dd0b      	ble.n	800f7ca <__gethex+0x46e>
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7ff fd69 	bl	800f28c <rshift>
 800f7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7be:	3501      	adds	r5, #1
 800f7c0:	42ab      	cmp	r3, r5
 800f7c2:	f6ff aed0 	blt.w	800f566 <__gethex+0x20a>
 800f7c6:	2701      	movs	r7, #1
 800f7c8:	e7c0      	b.n	800f74c <__gethex+0x3f0>
 800f7ca:	f016 061f 	ands.w	r6, r6, #31
 800f7ce:	d0fa      	beq.n	800f7c6 <__gethex+0x46a>
 800f7d0:	4453      	add	r3, sl
 800f7d2:	f1c6 0620 	rsb	r6, r6, #32
 800f7d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f7da:	f000 fa53 	bl	800fc84 <__hi0bits>
 800f7de:	42b0      	cmp	r0, r6
 800f7e0:	dbe7      	blt.n	800f7b2 <__gethex+0x456>
 800f7e2:	e7f0      	b.n	800f7c6 <__gethex+0x46a>
 800f7e4:	08011aa1 	.word	0x08011aa1

0800f7e8 <L_shift>:
 800f7e8:	f1c2 0208 	rsb	r2, r2, #8
 800f7ec:	0092      	lsls	r2, r2, #2
 800f7ee:	b570      	push	{r4, r5, r6, lr}
 800f7f0:	f1c2 0620 	rsb	r6, r2, #32
 800f7f4:	6843      	ldr	r3, [r0, #4]
 800f7f6:	6804      	ldr	r4, [r0, #0]
 800f7f8:	fa03 f506 	lsl.w	r5, r3, r6
 800f7fc:	432c      	orrs	r4, r5
 800f7fe:	40d3      	lsrs	r3, r2
 800f800:	6004      	str	r4, [r0, #0]
 800f802:	f840 3f04 	str.w	r3, [r0, #4]!
 800f806:	4288      	cmp	r0, r1
 800f808:	d3f4      	bcc.n	800f7f4 <L_shift+0xc>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}

0800f80c <__match>:
 800f80c:	b530      	push	{r4, r5, lr}
 800f80e:	6803      	ldr	r3, [r0, #0]
 800f810:	3301      	adds	r3, #1
 800f812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f816:	b914      	cbnz	r4, 800f81e <__match+0x12>
 800f818:	6003      	str	r3, [r0, #0]
 800f81a:	2001      	movs	r0, #1
 800f81c:	bd30      	pop	{r4, r5, pc}
 800f81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f822:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f826:	2d19      	cmp	r5, #25
 800f828:	bf98      	it	ls
 800f82a:	3220      	addls	r2, #32
 800f82c:	42a2      	cmp	r2, r4
 800f82e:	d0f0      	beq.n	800f812 <__match+0x6>
 800f830:	2000      	movs	r0, #0
 800f832:	e7f3      	b.n	800f81c <__match+0x10>

0800f834 <__hexnan>:
 800f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	680b      	ldr	r3, [r1, #0]
 800f83a:	115e      	asrs	r6, r3, #5
 800f83c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f840:	f013 031f 	ands.w	r3, r3, #31
 800f844:	b087      	sub	sp, #28
 800f846:	bf18      	it	ne
 800f848:	3604      	addne	r6, #4
 800f84a:	2500      	movs	r5, #0
 800f84c:	1f37      	subs	r7, r6, #4
 800f84e:	4690      	mov	r8, r2
 800f850:	6802      	ldr	r2, [r0, #0]
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	4682      	mov	sl, r0
 800f856:	f846 5c04 	str.w	r5, [r6, #-4]
 800f85a:	46b9      	mov	r9, r7
 800f85c:	463c      	mov	r4, r7
 800f85e:	9502      	str	r5, [sp, #8]
 800f860:	46ab      	mov	fp, r5
 800f862:	7851      	ldrb	r1, [r2, #1]
 800f864:	1c53      	adds	r3, r2, #1
 800f866:	9303      	str	r3, [sp, #12]
 800f868:	b341      	cbz	r1, 800f8bc <__hexnan+0x88>
 800f86a:	4608      	mov	r0, r1
 800f86c:	9205      	str	r2, [sp, #20]
 800f86e:	9104      	str	r1, [sp, #16]
 800f870:	f7ff fd5e 	bl	800f330 <__hexdig_fun>
 800f874:	2800      	cmp	r0, #0
 800f876:	d14f      	bne.n	800f918 <__hexnan+0xe4>
 800f878:	9904      	ldr	r1, [sp, #16]
 800f87a:	9a05      	ldr	r2, [sp, #20]
 800f87c:	2920      	cmp	r1, #32
 800f87e:	d818      	bhi.n	800f8b2 <__hexnan+0x7e>
 800f880:	9b02      	ldr	r3, [sp, #8]
 800f882:	459b      	cmp	fp, r3
 800f884:	dd13      	ble.n	800f8ae <__hexnan+0x7a>
 800f886:	454c      	cmp	r4, r9
 800f888:	d206      	bcs.n	800f898 <__hexnan+0x64>
 800f88a:	2d07      	cmp	r5, #7
 800f88c:	dc04      	bgt.n	800f898 <__hexnan+0x64>
 800f88e:	462a      	mov	r2, r5
 800f890:	4649      	mov	r1, r9
 800f892:	4620      	mov	r0, r4
 800f894:	f7ff ffa8 	bl	800f7e8 <L_shift>
 800f898:	4544      	cmp	r4, r8
 800f89a:	d950      	bls.n	800f93e <__hexnan+0x10a>
 800f89c:	2300      	movs	r3, #0
 800f89e:	f1a4 0904 	sub.w	r9, r4, #4
 800f8a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f8a6:	f8cd b008 	str.w	fp, [sp, #8]
 800f8aa:	464c      	mov	r4, r9
 800f8ac:	461d      	mov	r5, r3
 800f8ae:	9a03      	ldr	r2, [sp, #12]
 800f8b0:	e7d7      	b.n	800f862 <__hexnan+0x2e>
 800f8b2:	2929      	cmp	r1, #41	; 0x29
 800f8b4:	d156      	bne.n	800f964 <__hexnan+0x130>
 800f8b6:	3202      	adds	r2, #2
 800f8b8:	f8ca 2000 	str.w	r2, [sl]
 800f8bc:	f1bb 0f00 	cmp.w	fp, #0
 800f8c0:	d050      	beq.n	800f964 <__hexnan+0x130>
 800f8c2:	454c      	cmp	r4, r9
 800f8c4:	d206      	bcs.n	800f8d4 <__hexnan+0xa0>
 800f8c6:	2d07      	cmp	r5, #7
 800f8c8:	dc04      	bgt.n	800f8d4 <__hexnan+0xa0>
 800f8ca:	462a      	mov	r2, r5
 800f8cc:	4649      	mov	r1, r9
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f7ff ff8a 	bl	800f7e8 <L_shift>
 800f8d4:	4544      	cmp	r4, r8
 800f8d6:	d934      	bls.n	800f942 <__hexnan+0x10e>
 800f8d8:	f1a8 0204 	sub.w	r2, r8, #4
 800f8dc:	4623      	mov	r3, r4
 800f8de:	f853 1b04 	ldr.w	r1, [r3], #4
 800f8e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f8e6:	429f      	cmp	r7, r3
 800f8e8:	d2f9      	bcs.n	800f8de <__hexnan+0xaa>
 800f8ea:	1b3b      	subs	r3, r7, r4
 800f8ec:	f023 0303 	bic.w	r3, r3, #3
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	3401      	adds	r4, #1
 800f8f4:	3e03      	subs	r6, #3
 800f8f6:	42b4      	cmp	r4, r6
 800f8f8:	bf88      	it	hi
 800f8fa:	2304      	movhi	r3, #4
 800f8fc:	4443      	add	r3, r8
 800f8fe:	2200      	movs	r2, #0
 800f900:	f843 2b04 	str.w	r2, [r3], #4
 800f904:	429f      	cmp	r7, r3
 800f906:	d2fb      	bcs.n	800f900 <__hexnan+0xcc>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	b91b      	cbnz	r3, 800f914 <__hexnan+0xe0>
 800f90c:	4547      	cmp	r7, r8
 800f90e:	d127      	bne.n	800f960 <__hexnan+0x12c>
 800f910:	2301      	movs	r3, #1
 800f912:	603b      	str	r3, [r7, #0]
 800f914:	2005      	movs	r0, #5
 800f916:	e026      	b.n	800f966 <__hexnan+0x132>
 800f918:	3501      	adds	r5, #1
 800f91a:	2d08      	cmp	r5, #8
 800f91c:	f10b 0b01 	add.w	fp, fp, #1
 800f920:	dd06      	ble.n	800f930 <__hexnan+0xfc>
 800f922:	4544      	cmp	r4, r8
 800f924:	d9c3      	bls.n	800f8ae <__hexnan+0x7a>
 800f926:	2300      	movs	r3, #0
 800f928:	f844 3c04 	str.w	r3, [r4, #-4]
 800f92c:	2501      	movs	r5, #1
 800f92e:	3c04      	subs	r4, #4
 800f930:	6822      	ldr	r2, [r4, #0]
 800f932:	f000 000f 	and.w	r0, r0, #15
 800f936:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f93a:	6022      	str	r2, [r4, #0]
 800f93c:	e7b7      	b.n	800f8ae <__hexnan+0x7a>
 800f93e:	2508      	movs	r5, #8
 800f940:	e7b5      	b.n	800f8ae <__hexnan+0x7a>
 800f942:	9b01      	ldr	r3, [sp, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0df      	beq.n	800f908 <__hexnan+0xd4>
 800f948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f94c:	f1c3 0320 	rsb	r3, r3, #32
 800f950:	fa22 f303 	lsr.w	r3, r2, r3
 800f954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f958:	401a      	ands	r2, r3
 800f95a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f95e:	e7d3      	b.n	800f908 <__hexnan+0xd4>
 800f960:	3f04      	subs	r7, #4
 800f962:	e7d1      	b.n	800f908 <__hexnan+0xd4>
 800f964:	2004      	movs	r0, #4
 800f966:	b007      	add	sp, #28
 800f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f96c <_localeconv_r>:
 800f96c:	4800      	ldr	r0, [pc, #0]	; (800f970 <_localeconv_r+0x4>)
 800f96e:	4770      	bx	lr
 800f970:	20000188 	.word	0x20000188

0800f974 <_lseek_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d07      	ldr	r5, [pc, #28]	; (800f994 <_lseek_r+0x20>)
 800f978:	4604      	mov	r4, r0
 800f97a:	4608      	mov	r0, r1
 800f97c:	4611      	mov	r1, r2
 800f97e:	2200      	movs	r2, #0
 800f980:	602a      	str	r2, [r5, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	f7f4 fd4d 	bl	8004422 <_lseek>
 800f988:	1c43      	adds	r3, r0, #1
 800f98a:	d102      	bne.n	800f992 <_lseek_r+0x1e>
 800f98c:	682b      	ldr	r3, [r5, #0]
 800f98e:	b103      	cbz	r3, 800f992 <_lseek_r+0x1e>
 800f990:	6023      	str	r3, [r4, #0]
 800f992:	bd38      	pop	{r3, r4, r5, pc}
 800f994:	20000a20 	.word	0x20000a20

0800f998 <__swhatbuf_r>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	460e      	mov	r6, r1
 800f99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a0:	2900      	cmp	r1, #0
 800f9a2:	b096      	sub	sp, #88	; 0x58
 800f9a4:	4614      	mov	r4, r2
 800f9a6:	461d      	mov	r5, r3
 800f9a8:	da08      	bge.n	800f9bc <__swhatbuf_r+0x24>
 800f9aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	602a      	str	r2, [r5, #0]
 800f9b2:	061a      	lsls	r2, r3, #24
 800f9b4:	d410      	bmi.n	800f9d8 <__swhatbuf_r+0x40>
 800f9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ba:	e00e      	b.n	800f9da <__swhatbuf_r+0x42>
 800f9bc:	466a      	mov	r2, sp
 800f9be:	f000 ff4d 	bl	801085c <_fstat_r>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	dbf1      	blt.n	800f9aa <__swhatbuf_r+0x12>
 800f9c6:	9a01      	ldr	r2, [sp, #4]
 800f9c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9d0:	425a      	negs	r2, r3
 800f9d2:	415a      	adcs	r2, r3
 800f9d4:	602a      	str	r2, [r5, #0]
 800f9d6:	e7ee      	b.n	800f9b6 <__swhatbuf_r+0x1e>
 800f9d8:	2340      	movs	r3, #64	; 0x40
 800f9da:	2000      	movs	r0, #0
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	b016      	add	sp, #88	; 0x58
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9e4 <__smakebuf_r>:
 800f9e4:	898b      	ldrh	r3, [r1, #12]
 800f9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9e8:	079d      	lsls	r5, r3, #30
 800f9ea:	4606      	mov	r6, r0
 800f9ec:	460c      	mov	r4, r1
 800f9ee:	d507      	bpl.n	800fa00 <__smakebuf_r+0x1c>
 800f9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	6123      	str	r3, [r4, #16]
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	6163      	str	r3, [r4, #20]
 800f9fc:	b002      	add	sp, #8
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	ab01      	add	r3, sp, #4
 800fa02:	466a      	mov	r2, sp
 800fa04:	f7ff ffc8 	bl	800f998 <__swhatbuf_r>
 800fa08:	9900      	ldr	r1, [sp, #0]
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f7fc fbeb 	bl	800c1e8 <_malloc_r>
 800fa12:	b948      	cbnz	r0, 800fa28 <__smakebuf_r+0x44>
 800fa14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa18:	059a      	lsls	r2, r3, #22
 800fa1a:	d4ef      	bmi.n	800f9fc <__smakebuf_r+0x18>
 800fa1c:	f023 0303 	bic.w	r3, r3, #3
 800fa20:	f043 0302 	orr.w	r3, r3, #2
 800fa24:	81a3      	strh	r3, [r4, #12]
 800fa26:	e7e3      	b.n	800f9f0 <__smakebuf_r+0xc>
 800fa28:	4b0d      	ldr	r3, [pc, #52]	; (800fa60 <__smakebuf_r+0x7c>)
 800fa2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	6020      	str	r0, [r4, #0]
 800fa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa34:	81a3      	strh	r3, [r4, #12]
 800fa36:	9b00      	ldr	r3, [sp, #0]
 800fa38:	6163      	str	r3, [r4, #20]
 800fa3a:	9b01      	ldr	r3, [sp, #4]
 800fa3c:	6120      	str	r0, [r4, #16]
 800fa3e:	b15b      	cbz	r3, 800fa58 <__smakebuf_r+0x74>
 800fa40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa44:	4630      	mov	r0, r6
 800fa46:	f000 ff1b 	bl	8010880 <_isatty_r>
 800fa4a:	b128      	cbz	r0, 800fa58 <__smakebuf_r+0x74>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	f023 0303 	bic.w	r3, r3, #3
 800fa52:	f043 0301 	orr.w	r3, r3, #1
 800fa56:	81a3      	strh	r3, [r4, #12]
 800fa58:	89a0      	ldrh	r0, [r4, #12]
 800fa5a:	4305      	orrs	r5, r0
 800fa5c:	81a5      	strh	r5, [r4, #12]
 800fa5e:	e7cd      	b.n	800f9fc <__smakebuf_r+0x18>
 800fa60:	0800be59 	.word	0x0800be59

0800fa64 <__ascii_mbtowc>:
 800fa64:	b082      	sub	sp, #8
 800fa66:	b901      	cbnz	r1, 800fa6a <__ascii_mbtowc+0x6>
 800fa68:	a901      	add	r1, sp, #4
 800fa6a:	b142      	cbz	r2, 800fa7e <__ascii_mbtowc+0x1a>
 800fa6c:	b14b      	cbz	r3, 800fa82 <__ascii_mbtowc+0x1e>
 800fa6e:	7813      	ldrb	r3, [r2, #0]
 800fa70:	600b      	str	r3, [r1, #0]
 800fa72:	7812      	ldrb	r2, [r2, #0]
 800fa74:	1e10      	subs	r0, r2, #0
 800fa76:	bf18      	it	ne
 800fa78:	2001      	movne	r0, #1
 800fa7a:	b002      	add	sp, #8
 800fa7c:	4770      	bx	lr
 800fa7e:	4610      	mov	r0, r2
 800fa80:	e7fb      	b.n	800fa7a <__ascii_mbtowc+0x16>
 800fa82:	f06f 0001 	mvn.w	r0, #1
 800fa86:	e7f8      	b.n	800fa7a <__ascii_mbtowc+0x16>

0800fa88 <__malloc_lock>:
 800fa88:	4801      	ldr	r0, [pc, #4]	; (800fa90 <__malloc_lock+0x8>)
 800fa8a:	f7fc baee 	b.w	800c06a <__retarget_lock_acquire_recursive>
 800fa8e:	bf00      	nop
 800fa90:	20000a14 	.word	0x20000a14

0800fa94 <__malloc_unlock>:
 800fa94:	4801      	ldr	r0, [pc, #4]	; (800fa9c <__malloc_unlock+0x8>)
 800fa96:	f7fc bae9 	b.w	800c06c <__retarget_lock_release_recursive>
 800fa9a:	bf00      	nop
 800fa9c:	20000a14 	.word	0x20000a14

0800faa0 <_Balloc>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800faa4:	4604      	mov	r4, r0
 800faa6:	460d      	mov	r5, r1
 800faa8:	b976      	cbnz	r6, 800fac8 <_Balloc+0x28>
 800faaa:	2010      	movs	r0, #16
 800faac:	f7fc fae0 	bl	800c070 <malloc>
 800fab0:	4602      	mov	r2, r0
 800fab2:	6260      	str	r0, [r4, #36]	; 0x24
 800fab4:	b920      	cbnz	r0, 800fac0 <_Balloc+0x20>
 800fab6:	4b18      	ldr	r3, [pc, #96]	; (800fb18 <_Balloc+0x78>)
 800fab8:	4818      	ldr	r0, [pc, #96]	; (800fb1c <_Balloc+0x7c>)
 800faba:	2166      	movs	r1, #102	; 0x66
 800fabc:	f7fe fd3c 	bl	800e538 <__assert_func>
 800fac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fac4:	6006      	str	r6, [r0, #0]
 800fac6:	60c6      	str	r6, [r0, #12]
 800fac8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800faca:	68f3      	ldr	r3, [r6, #12]
 800facc:	b183      	cbz	r3, 800faf0 <_Balloc+0x50>
 800face:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fad6:	b9b8      	cbnz	r0, 800fb08 <_Balloc+0x68>
 800fad8:	2101      	movs	r1, #1
 800fada:	fa01 f605 	lsl.w	r6, r1, r5
 800fade:	1d72      	adds	r2, r6, #5
 800fae0:	0092      	lsls	r2, r2, #2
 800fae2:	4620      	mov	r0, r4
 800fae4:	f000 fc9d 	bl	8010422 <_calloc_r>
 800fae8:	b160      	cbz	r0, 800fb04 <_Balloc+0x64>
 800faea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800faee:	e00e      	b.n	800fb0e <_Balloc+0x6e>
 800faf0:	2221      	movs	r2, #33	; 0x21
 800faf2:	2104      	movs	r1, #4
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fc94 	bl	8010422 <_calloc_r>
 800fafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fafc:	60f0      	str	r0, [r6, #12]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1e4      	bne.n	800face <_Balloc+0x2e>
 800fb04:	2000      	movs	r0, #0
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	6802      	ldr	r2, [r0, #0]
 800fb0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb14:	e7f7      	b.n	800fb06 <_Balloc+0x66>
 800fb16:	bf00      	nop
 800fb18:	08011888 	.word	0x08011888
 800fb1c:	08011b2c 	.word	0x08011b2c

0800fb20 <_Bfree>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb24:	4605      	mov	r5, r0
 800fb26:	460c      	mov	r4, r1
 800fb28:	b976      	cbnz	r6, 800fb48 <_Bfree+0x28>
 800fb2a:	2010      	movs	r0, #16
 800fb2c:	f7fc faa0 	bl	800c070 <malloc>
 800fb30:	4602      	mov	r2, r0
 800fb32:	6268      	str	r0, [r5, #36]	; 0x24
 800fb34:	b920      	cbnz	r0, 800fb40 <_Bfree+0x20>
 800fb36:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <_Bfree+0x3c>)
 800fb38:	4809      	ldr	r0, [pc, #36]	; (800fb60 <_Bfree+0x40>)
 800fb3a:	218a      	movs	r1, #138	; 0x8a
 800fb3c:	f7fe fcfc 	bl	800e538 <__assert_func>
 800fb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb44:	6006      	str	r6, [r0, #0]
 800fb46:	60c6      	str	r6, [r0, #12]
 800fb48:	b13c      	cbz	r4, 800fb5a <_Bfree+0x3a>
 800fb4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb4c:	6862      	ldr	r2, [r4, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb54:	6021      	str	r1, [r4, #0]
 800fb56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	08011888 	.word	0x08011888
 800fb60:	08011b2c 	.word	0x08011b2c

0800fb64 <__multadd>:
 800fb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb68:	690d      	ldr	r5, [r1, #16]
 800fb6a:	4607      	mov	r7, r0
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	461e      	mov	r6, r3
 800fb70:	f101 0c14 	add.w	ip, r1, #20
 800fb74:	2000      	movs	r0, #0
 800fb76:	f8dc 3000 	ldr.w	r3, [ip]
 800fb7a:	b299      	uxth	r1, r3
 800fb7c:	fb02 6101 	mla	r1, r2, r1, r6
 800fb80:	0c1e      	lsrs	r6, r3, #16
 800fb82:	0c0b      	lsrs	r3, r1, #16
 800fb84:	fb02 3306 	mla	r3, r2, r6, r3
 800fb88:	b289      	uxth	r1, r1
 800fb8a:	3001      	adds	r0, #1
 800fb8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb90:	4285      	cmp	r5, r0
 800fb92:	f84c 1b04 	str.w	r1, [ip], #4
 800fb96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb9a:	dcec      	bgt.n	800fb76 <__multadd+0x12>
 800fb9c:	b30e      	cbz	r6, 800fbe2 <__multadd+0x7e>
 800fb9e:	68a3      	ldr	r3, [r4, #8]
 800fba0:	42ab      	cmp	r3, r5
 800fba2:	dc19      	bgt.n	800fbd8 <__multadd+0x74>
 800fba4:	6861      	ldr	r1, [r4, #4]
 800fba6:	4638      	mov	r0, r7
 800fba8:	3101      	adds	r1, #1
 800fbaa:	f7ff ff79 	bl	800faa0 <_Balloc>
 800fbae:	4680      	mov	r8, r0
 800fbb0:	b928      	cbnz	r0, 800fbbe <__multadd+0x5a>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	4b0c      	ldr	r3, [pc, #48]	; (800fbe8 <__multadd+0x84>)
 800fbb6:	480d      	ldr	r0, [pc, #52]	; (800fbec <__multadd+0x88>)
 800fbb8:	21b5      	movs	r1, #181	; 0xb5
 800fbba:	f7fe fcbd 	bl	800e538 <__assert_func>
 800fbbe:	6922      	ldr	r2, [r4, #16]
 800fbc0:	3202      	adds	r2, #2
 800fbc2:	f104 010c 	add.w	r1, r4, #12
 800fbc6:	0092      	lsls	r2, r2, #2
 800fbc8:	300c      	adds	r0, #12
 800fbca:	f7fc fa71 	bl	800c0b0 <memcpy>
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	f7ff ffa5 	bl	800fb20 <_Bfree>
 800fbd6:	4644      	mov	r4, r8
 800fbd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbdc:	3501      	adds	r5, #1
 800fbde:	615e      	str	r6, [r3, #20]
 800fbe0:	6125      	str	r5, [r4, #16]
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe8:	08011aa1 	.word	0x08011aa1
 800fbec:	08011b2c 	.word	0x08011b2c

0800fbf0 <__s2b>:
 800fbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	4615      	mov	r5, r2
 800fbf8:	461f      	mov	r7, r3
 800fbfa:	2209      	movs	r2, #9
 800fbfc:	3308      	adds	r3, #8
 800fbfe:	4606      	mov	r6, r0
 800fc00:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc04:	2100      	movs	r1, #0
 800fc06:	2201      	movs	r2, #1
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	db09      	blt.n	800fc20 <__s2b+0x30>
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	f7ff ff47 	bl	800faa0 <_Balloc>
 800fc12:	b940      	cbnz	r0, 800fc26 <__s2b+0x36>
 800fc14:	4602      	mov	r2, r0
 800fc16:	4b19      	ldr	r3, [pc, #100]	; (800fc7c <__s2b+0x8c>)
 800fc18:	4819      	ldr	r0, [pc, #100]	; (800fc80 <__s2b+0x90>)
 800fc1a:	21ce      	movs	r1, #206	; 0xce
 800fc1c:	f7fe fc8c 	bl	800e538 <__assert_func>
 800fc20:	0052      	lsls	r2, r2, #1
 800fc22:	3101      	adds	r1, #1
 800fc24:	e7f0      	b.n	800fc08 <__s2b+0x18>
 800fc26:	9b08      	ldr	r3, [sp, #32]
 800fc28:	6143      	str	r3, [r0, #20]
 800fc2a:	2d09      	cmp	r5, #9
 800fc2c:	f04f 0301 	mov.w	r3, #1
 800fc30:	6103      	str	r3, [r0, #16]
 800fc32:	dd16      	ble.n	800fc62 <__s2b+0x72>
 800fc34:	f104 0909 	add.w	r9, r4, #9
 800fc38:	46c8      	mov	r8, r9
 800fc3a:	442c      	add	r4, r5
 800fc3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc40:	4601      	mov	r1, r0
 800fc42:	3b30      	subs	r3, #48	; 0x30
 800fc44:	220a      	movs	r2, #10
 800fc46:	4630      	mov	r0, r6
 800fc48:	f7ff ff8c 	bl	800fb64 <__multadd>
 800fc4c:	45a0      	cmp	r8, r4
 800fc4e:	d1f5      	bne.n	800fc3c <__s2b+0x4c>
 800fc50:	f1a5 0408 	sub.w	r4, r5, #8
 800fc54:	444c      	add	r4, r9
 800fc56:	1b2d      	subs	r5, r5, r4
 800fc58:	1963      	adds	r3, r4, r5
 800fc5a:	42bb      	cmp	r3, r7
 800fc5c:	db04      	blt.n	800fc68 <__s2b+0x78>
 800fc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc62:	340a      	adds	r4, #10
 800fc64:	2509      	movs	r5, #9
 800fc66:	e7f6      	b.n	800fc56 <__s2b+0x66>
 800fc68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc6c:	4601      	mov	r1, r0
 800fc6e:	3b30      	subs	r3, #48	; 0x30
 800fc70:	220a      	movs	r2, #10
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7ff ff76 	bl	800fb64 <__multadd>
 800fc78:	e7ee      	b.n	800fc58 <__s2b+0x68>
 800fc7a:	bf00      	nop
 800fc7c:	08011aa1 	.word	0x08011aa1
 800fc80:	08011b2c 	.word	0x08011b2c

0800fc84 <__hi0bits>:
 800fc84:	0c03      	lsrs	r3, r0, #16
 800fc86:	041b      	lsls	r3, r3, #16
 800fc88:	b9d3      	cbnz	r3, 800fcc0 <__hi0bits+0x3c>
 800fc8a:	0400      	lsls	r0, r0, #16
 800fc8c:	2310      	movs	r3, #16
 800fc8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc92:	bf04      	itt	eq
 800fc94:	0200      	lsleq	r0, r0, #8
 800fc96:	3308      	addeq	r3, #8
 800fc98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc9c:	bf04      	itt	eq
 800fc9e:	0100      	lsleq	r0, r0, #4
 800fca0:	3304      	addeq	r3, #4
 800fca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fca6:	bf04      	itt	eq
 800fca8:	0080      	lsleq	r0, r0, #2
 800fcaa:	3302      	addeq	r3, #2
 800fcac:	2800      	cmp	r0, #0
 800fcae:	db05      	blt.n	800fcbc <__hi0bits+0x38>
 800fcb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fcb4:	f103 0301 	add.w	r3, r3, #1
 800fcb8:	bf08      	it	eq
 800fcba:	2320      	moveq	r3, #32
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	4770      	bx	lr
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	e7e4      	b.n	800fc8e <__hi0bits+0xa>

0800fcc4 <__lo0bits>:
 800fcc4:	6803      	ldr	r3, [r0, #0]
 800fcc6:	f013 0207 	ands.w	r2, r3, #7
 800fcca:	4601      	mov	r1, r0
 800fccc:	d00b      	beq.n	800fce6 <__lo0bits+0x22>
 800fcce:	07da      	lsls	r2, r3, #31
 800fcd0:	d423      	bmi.n	800fd1a <__lo0bits+0x56>
 800fcd2:	0798      	lsls	r0, r3, #30
 800fcd4:	bf49      	itett	mi
 800fcd6:	085b      	lsrmi	r3, r3, #1
 800fcd8:	089b      	lsrpl	r3, r3, #2
 800fcda:	2001      	movmi	r0, #1
 800fcdc:	600b      	strmi	r3, [r1, #0]
 800fcde:	bf5c      	itt	pl
 800fce0:	600b      	strpl	r3, [r1, #0]
 800fce2:	2002      	movpl	r0, #2
 800fce4:	4770      	bx	lr
 800fce6:	b298      	uxth	r0, r3
 800fce8:	b9a8      	cbnz	r0, 800fd16 <__lo0bits+0x52>
 800fcea:	0c1b      	lsrs	r3, r3, #16
 800fcec:	2010      	movs	r0, #16
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	b90a      	cbnz	r2, 800fcf6 <__lo0bits+0x32>
 800fcf2:	3008      	adds	r0, #8
 800fcf4:	0a1b      	lsrs	r3, r3, #8
 800fcf6:	071a      	lsls	r2, r3, #28
 800fcf8:	bf04      	itt	eq
 800fcfa:	091b      	lsreq	r3, r3, #4
 800fcfc:	3004      	addeq	r0, #4
 800fcfe:	079a      	lsls	r2, r3, #30
 800fd00:	bf04      	itt	eq
 800fd02:	089b      	lsreq	r3, r3, #2
 800fd04:	3002      	addeq	r0, #2
 800fd06:	07da      	lsls	r2, r3, #31
 800fd08:	d403      	bmi.n	800fd12 <__lo0bits+0x4e>
 800fd0a:	085b      	lsrs	r3, r3, #1
 800fd0c:	f100 0001 	add.w	r0, r0, #1
 800fd10:	d005      	beq.n	800fd1e <__lo0bits+0x5a>
 800fd12:	600b      	str	r3, [r1, #0]
 800fd14:	4770      	bx	lr
 800fd16:	4610      	mov	r0, r2
 800fd18:	e7e9      	b.n	800fcee <__lo0bits+0x2a>
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	4770      	bx	lr
 800fd1e:	2020      	movs	r0, #32
 800fd20:	4770      	bx	lr
	...

0800fd24 <__i2b>:
 800fd24:	b510      	push	{r4, lr}
 800fd26:	460c      	mov	r4, r1
 800fd28:	2101      	movs	r1, #1
 800fd2a:	f7ff feb9 	bl	800faa0 <_Balloc>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	b928      	cbnz	r0, 800fd3e <__i2b+0x1a>
 800fd32:	4b05      	ldr	r3, [pc, #20]	; (800fd48 <__i2b+0x24>)
 800fd34:	4805      	ldr	r0, [pc, #20]	; (800fd4c <__i2b+0x28>)
 800fd36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd3a:	f7fe fbfd 	bl	800e538 <__assert_func>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	6144      	str	r4, [r0, #20]
 800fd42:	6103      	str	r3, [r0, #16]
 800fd44:	bd10      	pop	{r4, pc}
 800fd46:	bf00      	nop
 800fd48:	08011aa1 	.word	0x08011aa1
 800fd4c:	08011b2c 	.word	0x08011b2c

0800fd50 <__multiply>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	4691      	mov	r9, r2
 800fd56:	690a      	ldr	r2, [r1, #16]
 800fd58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	bfb8      	it	lt
 800fd60:	460b      	movlt	r3, r1
 800fd62:	460c      	mov	r4, r1
 800fd64:	bfbc      	itt	lt
 800fd66:	464c      	movlt	r4, r9
 800fd68:	4699      	movlt	r9, r3
 800fd6a:	6927      	ldr	r7, [r4, #16]
 800fd6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd70:	68a3      	ldr	r3, [r4, #8]
 800fd72:	6861      	ldr	r1, [r4, #4]
 800fd74:	eb07 060a 	add.w	r6, r7, sl
 800fd78:	42b3      	cmp	r3, r6
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	bfb8      	it	lt
 800fd7e:	3101      	addlt	r1, #1
 800fd80:	f7ff fe8e 	bl	800faa0 <_Balloc>
 800fd84:	b930      	cbnz	r0, 800fd94 <__multiply+0x44>
 800fd86:	4602      	mov	r2, r0
 800fd88:	4b44      	ldr	r3, [pc, #272]	; (800fe9c <__multiply+0x14c>)
 800fd8a:	4845      	ldr	r0, [pc, #276]	; (800fea0 <__multiply+0x150>)
 800fd8c:	f240 115d 	movw	r1, #349	; 0x15d
 800fd90:	f7fe fbd2 	bl	800e538 <__assert_func>
 800fd94:	f100 0514 	add.w	r5, r0, #20
 800fd98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd9c:	462b      	mov	r3, r5
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4543      	cmp	r3, r8
 800fda2:	d321      	bcc.n	800fde8 <__multiply+0x98>
 800fda4:	f104 0314 	add.w	r3, r4, #20
 800fda8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fdac:	f109 0314 	add.w	r3, r9, #20
 800fdb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fdb4:	9202      	str	r2, [sp, #8]
 800fdb6:	1b3a      	subs	r2, r7, r4
 800fdb8:	3a15      	subs	r2, #21
 800fdba:	f022 0203 	bic.w	r2, r2, #3
 800fdbe:	3204      	adds	r2, #4
 800fdc0:	f104 0115 	add.w	r1, r4, #21
 800fdc4:	428f      	cmp	r7, r1
 800fdc6:	bf38      	it	cc
 800fdc8:	2204      	movcc	r2, #4
 800fdca:	9201      	str	r2, [sp, #4]
 800fdcc:	9a02      	ldr	r2, [sp, #8]
 800fdce:	9303      	str	r3, [sp, #12]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d80c      	bhi.n	800fdee <__multiply+0x9e>
 800fdd4:	2e00      	cmp	r6, #0
 800fdd6:	dd03      	ble.n	800fde0 <__multiply+0x90>
 800fdd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d05a      	beq.n	800fe96 <__multiply+0x146>
 800fde0:	6106      	str	r6, [r0, #16]
 800fde2:	b005      	add	sp, #20
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	f843 2b04 	str.w	r2, [r3], #4
 800fdec:	e7d8      	b.n	800fda0 <__multiply+0x50>
 800fdee:	f8b3 a000 	ldrh.w	sl, [r3]
 800fdf2:	f1ba 0f00 	cmp.w	sl, #0
 800fdf6:	d024      	beq.n	800fe42 <__multiply+0xf2>
 800fdf8:	f104 0e14 	add.w	lr, r4, #20
 800fdfc:	46a9      	mov	r9, r5
 800fdfe:	f04f 0c00 	mov.w	ip, #0
 800fe02:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe06:	f8d9 1000 	ldr.w	r1, [r9]
 800fe0a:	fa1f fb82 	uxth.w	fp, r2
 800fe0e:	b289      	uxth	r1, r1
 800fe10:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe18:	f8d9 2000 	ldr.w	r2, [r9]
 800fe1c:	4461      	add	r1, ip
 800fe1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe22:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe2a:	b289      	uxth	r1, r1
 800fe2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe30:	4577      	cmp	r7, lr
 800fe32:	f849 1b04 	str.w	r1, [r9], #4
 800fe36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe3a:	d8e2      	bhi.n	800fe02 <__multiply+0xb2>
 800fe3c:	9a01      	ldr	r2, [sp, #4]
 800fe3e:	f845 c002 	str.w	ip, [r5, r2]
 800fe42:	9a03      	ldr	r2, [sp, #12]
 800fe44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe48:	3304      	adds	r3, #4
 800fe4a:	f1b9 0f00 	cmp.w	r9, #0
 800fe4e:	d020      	beq.n	800fe92 <__multiply+0x142>
 800fe50:	6829      	ldr	r1, [r5, #0]
 800fe52:	f104 0c14 	add.w	ip, r4, #20
 800fe56:	46ae      	mov	lr, r5
 800fe58:	f04f 0a00 	mov.w	sl, #0
 800fe5c:	f8bc b000 	ldrh.w	fp, [ip]
 800fe60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fe64:	fb09 220b 	mla	r2, r9, fp, r2
 800fe68:	4492      	add	sl, r2
 800fe6a:	b289      	uxth	r1, r1
 800fe6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fe70:	f84e 1b04 	str.w	r1, [lr], #4
 800fe74:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe78:	f8be 1000 	ldrh.w	r1, [lr]
 800fe7c:	0c12      	lsrs	r2, r2, #16
 800fe7e:	fb09 1102 	mla	r1, r9, r2, r1
 800fe82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fe86:	4567      	cmp	r7, ip
 800fe88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe8c:	d8e6      	bhi.n	800fe5c <__multiply+0x10c>
 800fe8e:	9a01      	ldr	r2, [sp, #4]
 800fe90:	50a9      	str	r1, [r5, r2]
 800fe92:	3504      	adds	r5, #4
 800fe94:	e79a      	b.n	800fdcc <__multiply+0x7c>
 800fe96:	3e01      	subs	r6, #1
 800fe98:	e79c      	b.n	800fdd4 <__multiply+0x84>
 800fe9a:	bf00      	nop
 800fe9c:	08011aa1 	.word	0x08011aa1
 800fea0:	08011b2c 	.word	0x08011b2c

0800fea4 <__pow5mult>:
 800fea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea8:	4615      	mov	r5, r2
 800feaa:	f012 0203 	ands.w	r2, r2, #3
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	d007      	beq.n	800fec4 <__pow5mult+0x20>
 800feb4:	4c25      	ldr	r4, [pc, #148]	; (800ff4c <__pow5mult+0xa8>)
 800feb6:	3a01      	subs	r2, #1
 800feb8:	2300      	movs	r3, #0
 800feba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800febe:	f7ff fe51 	bl	800fb64 <__multadd>
 800fec2:	4607      	mov	r7, r0
 800fec4:	10ad      	asrs	r5, r5, #2
 800fec6:	d03d      	beq.n	800ff44 <__pow5mult+0xa0>
 800fec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800feca:	b97c      	cbnz	r4, 800feec <__pow5mult+0x48>
 800fecc:	2010      	movs	r0, #16
 800fece:	f7fc f8cf 	bl	800c070 <malloc>
 800fed2:	4602      	mov	r2, r0
 800fed4:	6270      	str	r0, [r6, #36]	; 0x24
 800fed6:	b928      	cbnz	r0, 800fee4 <__pow5mult+0x40>
 800fed8:	4b1d      	ldr	r3, [pc, #116]	; (800ff50 <__pow5mult+0xac>)
 800feda:	481e      	ldr	r0, [pc, #120]	; (800ff54 <__pow5mult+0xb0>)
 800fedc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fee0:	f7fe fb2a 	bl	800e538 <__assert_func>
 800fee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fee8:	6004      	str	r4, [r0, #0]
 800feea:	60c4      	str	r4, [r0, #12]
 800feec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fef4:	b94c      	cbnz	r4, 800ff0a <__pow5mult+0x66>
 800fef6:	f240 2171 	movw	r1, #625	; 0x271
 800fefa:	4630      	mov	r0, r6
 800fefc:	f7ff ff12 	bl	800fd24 <__i2b>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff06:	4604      	mov	r4, r0
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	f04f 0900 	mov.w	r9, #0
 800ff0e:	07eb      	lsls	r3, r5, #31
 800ff10:	d50a      	bpl.n	800ff28 <__pow5mult+0x84>
 800ff12:	4639      	mov	r1, r7
 800ff14:	4622      	mov	r2, r4
 800ff16:	4630      	mov	r0, r6
 800ff18:	f7ff ff1a 	bl	800fd50 <__multiply>
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4680      	mov	r8, r0
 800ff20:	4630      	mov	r0, r6
 800ff22:	f7ff fdfd 	bl	800fb20 <_Bfree>
 800ff26:	4647      	mov	r7, r8
 800ff28:	106d      	asrs	r5, r5, #1
 800ff2a:	d00b      	beq.n	800ff44 <__pow5mult+0xa0>
 800ff2c:	6820      	ldr	r0, [r4, #0]
 800ff2e:	b938      	cbnz	r0, 800ff40 <__pow5mult+0x9c>
 800ff30:	4622      	mov	r2, r4
 800ff32:	4621      	mov	r1, r4
 800ff34:	4630      	mov	r0, r6
 800ff36:	f7ff ff0b 	bl	800fd50 <__multiply>
 800ff3a:	6020      	str	r0, [r4, #0]
 800ff3c:	f8c0 9000 	str.w	r9, [r0]
 800ff40:	4604      	mov	r4, r0
 800ff42:	e7e4      	b.n	800ff0e <__pow5mult+0x6a>
 800ff44:	4638      	mov	r0, r7
 800ff46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff4a:	bf00      	nop
 800ff4c:	08011c78 	.word	0x08011c78
 800ff50:	08011888 	.word	0x08011888
 800ff54:	08011b2c 	.word	0x08011b2c

0800ff58 <__lshift>:
 800ff58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	6849      	ldr	r1, [r1, #4]
 800ff60:	6923      	ldr	r3, [r4, #16]
 800ff62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff66:	68a3      	ldr	r3, [r4, #8]
 800ff68:	4607      	mov	r7, r0
 800ff6a:	4691      	mov	r9, r2
 800ff6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff70:	f108 0601 	add.w	r6, r8, #1
 800ff74:	42b3      	cmp	r3, r6
 800ff76:	db0b      	blt.n	800ff90 <__lshift+0x38>
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f7ff fd91 	bl	800faa0 <_Balloc>
 800ff7e:	4605      	mov	r5, r0
 800ff80:	b948      	cbnz	r0, 800ff96 <__lshift+0x3e>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4b2a      	ldr	r3, [pc, #168]	; (8010030 <__lshift+0xd8>)
 800ff86:	482b      	ldr	r0, [pc, #172]	; (8010034 <__lshift+0xdc>)
 800ff88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff8c:	f7fe fad4 	bl	800e538 <__assert_func>
 800ff90:	3101      	adds	r1, #1
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	e7ee      	b.n	800ff74 <__lshift+0x1c>
 800ff96:	2300      	movs	r3, #0
 800ff98:	f100 0114 	add.w	r1, r0, #20
 800ff9c:	f100 0210 	add.w	r2, r0, #16
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	4553      	cmp	r3, sl
 800ffa4:	db37      	blt.n	8010016 <__lshift+0xbe>
 800ffa6:	6920      	ldr	r0, [r4, #16]
 800ffa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffac:	f104 0314 	add.w	r3, r4, #20
 800ffb0:	f019 091f 	ands.w	r9, r9, #31
 800ffb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ffbc:	d02f      	beq.n	801001e <__lshift+0xc6>
 800ffbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ffc2:	468a      	mov	sl, r1
 800ffc4:	f04f 0c00 	mov.w	ip, #0
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	fa02 f209 	lsl.w	r2, r2, r9
 800ffce:	ea42 020c 	orr.w	r2, r2, ip
 800ffd2:	f84a 2b04 	str.w	r2, [sl], #4
 800ffd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffda:	4298      	cmp	r0, r3
 800ffdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ffe0:	d8f2      	bhi.n	800ffc8 <__lshift+0x70>
 800ffe2:	1b03      	subs	r3, r0, r4
 800ffe4:	3b15      	subs	r3, #21
 800ffe6:	f023 0303 	bic.w	r3, r3, #3
 800ffea:	3304      	adds	r3, #4
 800ffec:	f104 0215 	add.w	r2, r4, #21
 800fff0:	4290      	cmp	r0, r2
 800fff2:	bf38      	it	cc
 800fff4:	2304      	movcc	r3, #4
 800fff6:	f841 c003 	str.w	ip, [r1, r3]
 800fffa:	f1bc 0f00 	cmp.w	ip, #0
 800fffe:	d001      	beq.n	8010004 <__lshift+0xac>
 8010000:	f108 0602 	add.w	r6, r8, #2
 8010004:	3e01      	subs	r6, #1
 8010006:	4638      	mov	r0, r7
 8010008:	612e      	str	r6, [r5, #16]
 801000a:	4621      	mov	r1, r4
 801000c:	f7ff fd88 	bl	800fb20 <_Bfree>
 8010010:	4628      	mov	r0, r5
 8010012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010016:	f842 0f04 	str.w	r0, [r2, #4]!
 801001a:	3301      	adds	r3, #1
 801001c:	e7c1      	b.n	800ffa2 <__lshift+0x4a>
 801001e:	3904      	subs	r1, #4
 8010020:	f853 2b04 	ldr.w	r2, [r3], #4
 8010024:	f841 2f04 	str.w	r2, [r1, #4]!
 8010028:	4298      	cmp	r0, r3
 801002a:	d8f9      	bhi.n	8010020 <__lshift+0xc8>
 801002c:	e7ea      	b.n	8010004 <__lshift+0xac>
 801002e:	bf00      	nop
 8010030:	08011aa1 	.word	0x08011aa1
 8010034:	08011b2c 	.word	0x08011b2c

08010038 <__mcmp>:
 8010038:	b530      	push	{r4, r5, lr}
 801003a:	6902      	ldr	r2, [r0, #16]
 801003c:	690c      	ldr	r4, [r1, #16]
 801003e:	1b12      	subs	r2, r2, r4
 8010040:	d10e      	bne.n	8010060 <__mcmp+0x28>
 8010042:	f100 0314 	add.w	r3, r0, #20
 8010046:	3114      	adds	r1, #20
 8010048:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801004c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010050:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010054:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010058:	42a5      	cmp	r5, r4
 801005a:	d003      	beq.n	8010064 <__mcmp+0x2c>
 801005c:	d305      	bcc.n	801006a <__mcmp+0x32>
 801005e:	2201      	movs	r2, #1
 8010060:	4610      	mov	r0, r2
 8010062:	bd30      	pop	{r4, r5, pc}
 8010064:	4283      	cmp	r3, r0
 8010066:	d3f3      	bcc.n	8010050 <__mcmp+0x18>
 8010068:	e7fa      	b.n	8010060 <__mcmp+0x28>
 801006a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801006e:	e7f7      	b.n	8010060 <__mcmp+0x28>

08010070 <__mdiff>:
 8010070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	460c      	mov	r4, r1
 8010076:	4606      	mov	r6, r0
 8010078:	4611      	mov	r1, r2
 801007a:	4620      	mov	r0, r4
 801007c:	4690      	mov	r8, r2
 801007e:	f7ff ffdb 	bl	8010038 <__mcmp>
 8010082:	1e05      	subs	r5, r0, #0
 8010084:	d110      	bne.n	80100a8 <__mdiff+0x38>
 8010086:	4629      	mov	r1, r5
 8010088:	4630      	mov	r0, r6
 801008a:	f7ff fd09 	bl	800faa0 <_Balloc>
 801008e:	b930      	cbnz	r0, 801009e <__mdiff+0x2e>
 8010090:	4b3a      	ldr	r3, [pc, #232]	; (801017c <__mdiff+0x10c>)
 8010092:	4602      	mov	r2, r0
 8010094:	f240 2132 	movw	r1, #562	; 0x232
 8010098:	4839      	ldr	r0, [pc, #228]	; (8010180 <__mdiff+0x110>)
 801009a:	f7fe fa4d 	bl	800e538 <__assert_func>
 801009e:	2301      	movs	r3, #1
 80100a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a8:	bfa4      	itt	ge
 80100aa:	4643      	movge	r3, r8
 80100ac:	46a0      	movge	r8, r4
 80100ae:	4630      	mov	r0, r6
 80100b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80100b4:	bfa6      	itte	ge
 80100b6:	461c      	movge	r4, r3
 80100b8:	2500      	movge	r5, #0
 80100ba:	2501      	movlt	r5, #1
 80100bc:	f7ff fcf0 	bl	800faa0 <_Balloc>
 80100c0:	b920      	cbnz	r0, 80100cc <__mdiff+0x5c>
 80100c2:	4b2e      	ldr	r3, [pc, #184]	; (801017c <__mdiff+0x10c>)
 80100c4:	4602      	mov	r2, r0
 80100c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100ca:	e7e5      	b.n	8010098 <__mdiff+0x28>
 80100cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80100d0:	6926      	ldr	r6, [r4, #16]
 80100d2:	60c5      	str	r5, [r0, #12]
 80100d4:	f104 0914 	add.w	r9, r4, #20
 80100d8:	f108 0514 	add.w	r5, r8, #20
 80100dc:	f100 0e14 	add.w	lr, r0, #20
 80100e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80100e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80100e8:	f108 0210 	add.w	r2, r8, #16
 80100ec:	46f2      	mov	sl, lr
 80100ee:	2100      	movs	r1, #0
 80100f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80100f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100f8:	fa1f f883 	uxth.w	r8, r3
 80100fc:	fa11 f18b 	uxtah	r1, r1, fp
 8010100:	0c1b      	lsrs	r3, r3, #16
 8010102:	eba1 0808 	sub.w	r8, r1, r8
 8010106:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801010a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801010e:	fa1f f888 	uxth.w	r8, r8
 8010112:	1419      	asrs	r1, r3, #16
 8010114:	454e      	cmp	r6, r9
 8010116:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801011a:	f84a 3b04 	str.w	r3, [sl], #4
 801011e:	d8e7      	bhi.n	80100f0 <__mdiff+0x80>
 8010120:	1b33      	subs	r3, r6, r4
 8010122:	3b15      	subs	r3, #21
 8010124:	f023 0303 	bic.w	r3, r3, #3
 8010128:	3304      	adds	r3, #4
 801012a:	3415      	adds	r4, #21
 801012c:	42a6      	cmp	r6, r4
 801012e:	bf38      	it	cc
 8010130:	2304      	movcc	r3, #4
 8010132:	441d      	add	r5, r3
 8010134:	4473      	add	r3, lr
 8010136:	469e      	mov	lr, r3
 8010138:	462e      	mov	r6, r5
 801013a:	4566      	cmp	r6, ip
 801013c:	d30e      	bcc.n	801015c <__mdiff+0xec>
 801013e:	f10c 0203 	add.w	r2, ip, #3
 8010142:	1b52      	subs	r2, r2, r5
 8010144:	f022 0203 	bic.w	r2, r2, #3
 8010148:	3d03      	subs	r5, #3
 801014a:	45ac      	cmp	ip, r5
 801014c:	bf38      	it	cc
 801014e:	2200      	movcc	r2, #0
 8010150:	441a      	add	r2, r3
 8010152:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010156:	b17b      	cbz	r3, 8010178 <__mdiff+0x108>
 8010158:	6107      	str	r7, [r0, #16]
 801015a:	e7a3      	b.n	80100a4 <__mdiff+0x34>
 801015c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010160:	fa11 f288 	uxtah	r2, r1, r8
 8010164:	1414      	asrs	r4, r2, #16
 8010166:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801016a:	b292      	uxth	r2, r2
 801016c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010170:	f84e 2b04 	str.w	r2, [lr], #4
 8010174:	1421      	asrs	r1, r4, #16
 8010176:	e7e0      	b.n	801013a <__mdiff+0xca>
 8010178:	3f01      	subs	r7, #1
 801017a:	e7ea      	b.n	8010152 <__mdiff+0xe2>
 801017c:	08011aa1 	.word	0x08011aa1
 8010180:	08011b2c 	.word	0x08011b2c

08010184 <__ulp>:
 8010184:	b082      	sub	sp, #8
 8010186:	ed8d 0b00 	vstr	d0, [sp]
 801018a:	9b01      	ldr	r3, [sp, #4]
 801018c:	4912      	ldr	r1, [pc, #72]	; (80101d8 <__ulp+0x54>)
 801018e:	4019      	ands	r1, r3
 8010190:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010194:	2900      	cmp	r1, #0
 8010196:	dd05      	ble.n	80101a4 <__ulp+0x20>
 8010198:	2200      	movs	r2, #0
 801019a:	460b      	mov	r3, r1
 801019c:	ec43 2b10 	vmov	d0, r2, r3
 80101a0:	b002      	add	sp, #8
 80101a2:	4770      	bx	lr
 80101a4:	4249      	negs	r1, r1
 80101a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80101aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80101ae:	f04f 0200 	mov.w	r2, #0
 80101b2:	f04f 0300 	mov.w	r3, #0
 80101b6:	da04      	bge.n	80101c2 <__ulp+0x3e>
 80101b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80101bc:	fa41 f300 	asr.w	r3, r1, r0
 80101c0:	e7ec      	b.n	801019c <__ulp+0x18>
 80101c2:	f1a0 0114 	sub.w	r1, r0, #20
 80101c6:	291e      	cmp	r1, #30
 80101c8:	bfda      	itte	le
 80101ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80101ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80101d2:	2101      	movgt	r1, #1
 80101d4:	460a      	mov	r2, r1
 80101d6:	e7e1      	b.n	801019c <__ulp+0x18>
 80101d8:	7ff00000 	.word	0x7ff00000

080101dc <__b2d>:
 80101dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101de:	6905      	ldr	r5, [r0, #16]
 80101e0:	f100 0714 	add.w	r7, r0, #20
 80101e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80101e8:	1f2e      	subs	r6, r5, #4
 80101ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7ff fd48 	bl	800fc84 <__hi0bits>
 80101f4:	f1c0 0320 	rsb	r3, r0, #32
 80101f8:	280a      	cmp	r0, #10
 80101fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010278 <__b2d+0x9c>
 80101fe:	600b      	str	r3, [r1, #0]
 8010200:	dc14      	bgt.n	801022c <__b2d+0x50>
 8010202:	f1c0 0e0b 	rsb	lr, r0, #11
 8010206:	fa24 f10e 	lsr.w	r1, r4, lr
 801020a:	42b7      	cmp	r7, r6
 801020c:	ea41 030c 	orr.w	r3, r1, ip
 8010210:	bf34      	ite	cc
 8010212:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010216:	2100      	movcs	r1, #0
 8010218:	3015      	adds	r0, #21
 801021a:	fa04 f000 	lsl.w	r0, r4, r0
 801021e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010222:	ea40 0201 	orr.w	r2, r0, r1
 8010226:	ec43 2b10 	vmov	d0, r2, r3
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	42b7      	cmp	r7, r6
 801022e:	bf3a      	itte	cc
 8010230:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010234:	f1a5 0608 	subcc.w	r6, r5, #8
 8010238:	2100      	movcs	r1, #0
 801023a:	380b      	subs	r0, #11
 801023c:	d017      	beq.n	801026e <__b2d+0x92>
 801023e:	f1c0 0c20 	rsb	ip, r0, #32
 8010242:	fa04 f500 	lsl.w	r5, r4, r0
 8010246:	42be      	cmp	r6, r7
 8010248:	fa21 f40c 	lsr.w	r4, r1, ip
 801024c:	ea45 0504 	orr.w	r5, r5, r4
 8010250:	bf8c      	ite	hi
 8010252:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010256:	2400      	movls	r4, #0
 8010258:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801025c:	fa01 f000 	lsl.w	r0, r1, r0
 8010260:	fa24 f40c 	lsr.w	r4, r4, ip
 8010264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010268:	ea40 0204 	orr.w	r2, r0, r4
 801026c:	e7db      	b.n	8010226 <__b2d+0x4a>
 801026e:	ea44 030c 	orr.w	r3, r4, ip
 8010272:	460a      	mov	r2, r1
 8010274:	e7d7      	b.n	8010226 <__b2d+0x4a>
 8010276:	bf00      	nop
 8010278:	3ff00000 	.word	0x3ff00000

0801027c <__d2b>:
 801027c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010280:	4689      	mov	r9, r1
 8010282:	2101      	movs	r1, #1
 8010284:	ec57 6b10 	vmov	r6, r7, d0
 8010288:	4690      	mov	r8, r2
 801028a:	f7ff fc09 	bl	800faa0 <_Balloc>
 801028e:	4604      	mov	r4, r0
 8010290:	b930      	cbnz	r0, 80102a0 <__d2b+0x24>
 8010292:	4602      	mov	r2, r0
 8010294:	4b25      	ldr	r3, [pc, #148]	; (801032c <__d2b+0xb0>)
 8010296:	4826      	ldr	r0, [pc, #152]	; (8010330 <__d2b+0xb4>)
 8010298:	f240 310a 	movw	r1, #778	; 0x30a
 801029c:	f7fe f94c 	bl	800e538 <__assert_func>
 80102a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80102a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102a8:	bb35      	cbnz	r5, 80102f8 <__d2b+0x7c>
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	d028      	beq.n	8010302 <__d2b+0x86>
 80102b0:	4668      	mov	r0, sp
 80102b2:	9600      	str	r6, [sp, #0]
 80102b4:	f7ff fd06 	bl	800fcc4 <__lo0bits>
 80102b8:	9900      	ldr	r1, [sp, #0]
 80102ba:	b300      	cbz	r0, 80102fe <__d2b+0x82>
 80102bc:	9a01      	ldr	r2, [sp, #4]
 80102be:	f1c0 0320 	rsb	r3, r0, #32
 80102c2:	fa02 f303 	lsl.w	r3, r2, r3
 80102c6:	430b      	orrs	r3, r1
 80102c8:	40c2      	lsrs	r2, r0
 80102ca:	6163      	str	r3, [r4, #20]
 80102cc:	9201      	str	r2, [sp, #4]
 80102ce:	9b01      	ldr	r3, [sp, #4]
 80102d0:	61a3      	str	r3, [r4, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bf14      	ite	ne
 80102d6:	2202      	movne	r2, #2
 80102d8:	2201      	moveq	r2, #1
 80102da:	6122      	str	r2, [r4, #16]
 80102dc:	b1d5      	cbz	r5, 8010314 <__d2b+0x98>
 80102de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102e2:	4405      	add	r5, r0
 80102e4:	f8c9 5000 	str.w	r5, [r9]
 80102e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102ec:	f8c8 0000 	str.w	r0, [r8]
 80102f0:	4620      	mov	r0, r4
 80102f2:	b003      	add	sp, #12
 80102f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102fc:	e7d5      	b.n	80102aa <__d2b+0x2e>
 80102fe:	6161      	str	r1, [r4, #20]
 8010300:	e7e5      	b.n	80102ce <__d2b+0x52>
 8010302:	a801      	add	r0, sp, #4
 8010304:	f7ff fcde 	bl	800fcc4 <__lo0bits>
 8010308:	9b01      	ldr	r3, [sp, #4]
 801030a:	6163      	str	r3, [r4, #20]
 801030c:	2201      	movs	r2, #1
 801030e:	6122      	str	r2, [r4, #16]
 8010310:	3020      	adds	r0, #32
 8010312:	e7e3      	b.n	80102dc <__d2b+0x60>
 8010314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801031c:	f8c9 0000 	str.w	r0, [r9]
 8010320:	6918      	ldr	r0, [r3, #16]
 8010322:	f7ff fcaf 	bl	800fc84 <__hi0bits>
 8010326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801032a:	e7df      	b.n	80102ec <__d2b+0x70>
 801032c:	08011aa1 	.word	0x08011aa1
 8010330:	08011b2c 	.word	0x08011b2c

08010334 <__ratio>:
 8010334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010338:	4688      	mov	r8, r1
 801033a:	4669      	mov	r1, sp
 801033c:	4681      	mov	r9, r0
 801033e:	f7ff ff4d 	bl	80101dc <__b2d>
 8010342:	a901      	add	r1, sp, #4
 8010344:	4640      	mov	r0, r8
 8010346:	ec55 4b10 	vmov	r4, r5, d0
 801034a:	f7ff ff47 	bl	80101dc <__b2d>
 801034e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010352:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010356:	eba3 0c02 	sub.w	ip, r3, r2
 801035a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801035e:	1a9b      	subs	r3, r3, r2
 8010360:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010364:	ec51 0b10 	vmov	r0, r1, d0
 8010368:	2b00      	cmp	r3, #0
 801036a:	bfd6      	itet	le
 801036c:	460a      	movle	r2, r1
 801036e:	462a      	movgt	r2, r5
 8010370:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010374:	468b      	mov	fp, r1
 8010376:	462f      	mov	r7, r5
 8010378:	bfd4      	ite	le
 801037a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801037e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010382:	4620      	mov	r0, r4
 8010384:	ee10 2a10 	vmov	r2, s0
 8010388:	465b      	mov	r3, fp
 801038a:	4639      	mov	r1, r7
 801038c:	f7f0 fa90 	bl	80008b0 <__aeabi_ddiv>
 8010390:	ec41 0b10 	vmov	d0, r0, r1
 8010394:	b003      	add	sp, #12
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801039a <__copybits>:
 801039a:	3901      	subs	r1, #1
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	1149      	asrs	r1, r1, #5
 80103a0:	6914      	ldr	r4, [r2, #16]
 80103a2:	3101      	adds	r1, #1
 80103a4:	f102 0314 	add.w	r3, r2, #20
 80103a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103b0:	1f05      	subs	r5, r0, #4
 80103b2:	42a3      	cmp	r3, r4
 80103b4:	d30c      	bcc.n	80103d0 <__copybits+0x36>
 80103b6:	1aa3      	subs	r3, r4, r2
 80103b8:	3b11      	subs	r3, #17
 80103ba:	f023 0303 	bic.w	r3, r3, #3
 80103be:	3211      	adds	r2, #17
 80103c0:	42a2      	cmp	r2, r4
 80103c2:	bf88      	it	hi
 80103c4:	2300      	movhi	r3, #0
 80103c6:	4418      	add	r0, r3
 80103c8:	2300      	movs	r3, #0
 80103ca:	4288      	cmp	r0, r1
 80103cc:	d305      	bcc.n	80103da <__copybits+0x40>
 80103ce:	bd70      	pop	{r4, r5, r6, pc}
 80103d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80103d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80103d8:	e7eb      	b.n	80103b2 <__copybits+0x18>
 80103da:	f840 3b04 	str.w	r3, [r0], #4
 80103de:	e7f4      	b.n	80103ca <__copybits+0x30>

080103e0 <__any_on>:
 80103e0:	f100 0214 	add.w	r2, r0, #20
 80103e4:	6900      	ldr	r0, [r0, #16]
 80103e6:	114b      	asrs	r3, r1, #5
 80103e8:	4298      	cmp	r0, r3
 80103ea:	b510      	push	{r4, lr}
 80103ec:	db11      	blt.n	8010412 <__any_on+0x32>
 80103ee:	dd0a      	ble.n	8010406 <__any_on+0x26>
 80103f0:	f011 011f 	ands.w	r1, r1, #31
 80103f4:	d007      	beq.n	8010406 <__any_on+0x26>
 80103f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103fa:	fa24 f001 	lsr.w	r0, r4, r1
 80103fe:	fa00 f101 	lsl.w	r1, r0, r1
 8010402:	428c      	cmp	r4, r1
 8010404:	d10b      	bne.n	801041e <__any_on+0x3e>
 8010406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801040a:	4293      	cmp	r3, r2
 801040c:	d803      	bhi.n	8010416 <__any_on+0x36>
 801040e:	2000      	movs	r0, #0
 8010410:	bd10      	pop	{r4, pc}
 8010412:	4603      	mov	r3, r0
 8010414:	e7f7      	b.n	8010406 <__any_on+0x26>
 8010416:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801041a:	2900      	cmp	r1, #0
 801041c:	d0f5      	beq.n	801040a <__any_on+0x2a>
 801041e:	2001      	movs	r0, #1
 8010420:	e7f6      	b.n	8010410 <__any_on+0x30>

08010422 <_calloc_r>:
 8010422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010424:	fba1 2402 	umull	r2, r4, r1, r2
 8010428:	b94c      	cbnz	r4, 801043e <_calloc_r+0x1c>
 801042a:	4611      	mov	r1, r2
 801042c:	9201      	str	r2, [sp, #4]
 801042e:	f7fb fedb 	bl	800c1e8 <_malloc_r>
 8010432:	9a01      	ldr	r2, [sp, #4]
 8010434:	4605      	mov	r5, r0
 8010436:	b930      	cbnz	r0, 8010446 <_calloc_r+0x24>
 8010438:	4628      	mov	r0, r5
 801043a:	b003      	add	sp, #12
 801043c:	bd30      	pop	{r4, r5, pc}
 801043e:	220c      	movs	r2, #12
 8010440:	6002      	str	r2, [r0, #0]
 8010442:	2500      	movs	r5, #0
 8010444:	e7f8      	b.n	8010438 <_calloc_r+0x16>
 8010446:	4621      	mov	r1, r4
 8010448:	f7fb fe5a 	bl	800c100 <memset>
 801044c:	e7f4      	b.n	8010438 <_calloc_r+0x16>

0801044e <_realloc_r>:
 801044e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010452:	4680      	mov	r8, r0
 8010454:	4614      	mov	r4, r2
 8010456:	460e      	mov	r6, r1
 8010458:	b921      	cbnz	r1, 8010464 <_realloc_r+0x16>
 801045a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801045e:	4611      	mov	r1, r2
 8010460:	f7fb bec2 	b.w	800c1e8 <_malloc_r>
 8010464:	b92a      	cbnz	r2, 8010472 <_realloc_r+0x24>
 8010466:	f7fb fe53 	bl	800c110 <_free_r>
 801046a:	4625      	mov	r5, r4
 801046c:	4628      	mov	r0, r5
 801046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010472:	f000 fa15 	bl	80108a0 <_malloc_usable_size_r>
 8010476:	4284      	cmp	r4, r0
 8010478:	4607      	mov	r7, r0
 801047a:	d802      	bhi.n	8010482 <_realloc_r+0x34>
 801047c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010480:	d812      	bhi.n	80104a8 <_realloc_r+0x5a>
 8010482:	4621      	mov	r1, r4
 8010484:	4640      	mov	r0, r8
 8010486:	f7fb feaf 	bl	800c1e8 <_malloc_r>
 801048a:	4605      	mov	r5, r0
 801048c:	2800      	cmp	r0, #0
 801048e:	d0ed      	beq.n	801046c <_realloc_r+0x1e>
 8010490:	42bc      	cmp	r4, r7
 8010492:	4622      	mov	r2, r4
 8010494:	4631      	mov	r1, r6
 8010496:	bf28      	it	cs
 8010498:	463a      	movcs	r2, r7
 801049a:	f7fb fe09 	bl	800c0b0 <memcpy>
 801049e:	4631      	mov	r1, r6
 80104a0:	4640      	mov	r0, r8
 80104a2:	f7fb fe35 	bl	800c110 <_free_r>
 80104a6:	e7e1      	b.n	801046c <_realloc_r+0x1e>
 80104a8:	4635      	mov	r5, r6
 80104aa:	e7df      	b.n	801046c <_realloc_r+0x1e>

080104ac <__ssputs_r>:
 80104ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b0:	688e      	ldr	r6, [r1, #8]
 80104b2:	429e      	cmp	r6, r3
 80104b4:	4682      	mov	sl, r0
 80104b6:	460c      	mov	r4, r1
 80104b8:	4690      	mov	r8, r2
 80104ba:	461f      	mov	r7, r3
 80104bc:	d838      	bhi.n	8010530 <__ssputs_r+0x84>
 80104be:	898a      	ldrh	r2, [r1, #12]
 80104c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104c4:	d032      	beq.n	801052c <__ssputs_r+0x80>
 80104c6:	6825      	ldr	r5, [r4, #0]
 80104c8:	6909      	ldr	r1, [r1, #16]
 80104ca:	eba5 0901 	sub.w	r9, r5, r1
 80104ce:	6965      	ldr	r5, [r4, #20]
 80104d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104d8:	3301      	adds	r3, #1
 80104da:	444b      	add	r3, r9
 80104dc:	106d      	asrs	r5, r5, #1
 80104de:	429d      	cmp	r5, r3
 80104e0:	bf38      	it	cc
 80104e2:	461d      	movcc	r5, r3
 80104e4:	0553      	lsls	r3, r2, #21
 80104e6:	d531      	bpl.n	801054c <__ssputs_r+0xa0>
 80104e8:	4629      	mov	r1, r5
 80104ea:	f7fb fe7d 	bl	800c1e8 <_malloc_r>
 80104ee:	4606      	mov	r6, r0
 80104f0:	b950      	cbnz	r0, 8010508 <__ssputs_r+0x5c>
 80104f2:	230c      	movs	r3, #12
 80104f4:	f8ca 3000 	str.w	r3, [sl]
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104fe:	81a3      	strh	r3, [r4, #12]
 8010500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010508:	6921      	ldr	r1, [r4, #16]
 801050a:	464a      	mov	r2, r9
 801050c:	f7fb fdd0 	bl	800c0b0 <memcpy>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801051a:	81a3      	strh	r3, [r4, #12]
 801051c:	6126      	str	r6, [r4, #16]
 801051e:	6165      	str	r5, [r4, #20]
 8010520:	444e      	add	r6, r9
 8010522:	eba5 0509 	sub.w	r5, r5, r9
 8010526:	6026      	str	r6, [r4, #0]
 8010528:	60a5      	str	r5, [r4, #8]
 801052a:	463e      	mov	r6, r7
 801052c:	42be      	cmp	r6, r7
 801052e:	d900      	bls.n	8010532 <__ssputs_r+0x86>
 8010530:	463e      	mov	r6, r7
 8010532:	6820      	ldr	r0, [r4, #0]
 8010534:	4632      	mov	r2, r6
 8010536:	4641      	mov	r1, r8
 8010538:	f7fb fdc8 	bl	800c0cc <memmove>
 801053c:	68a3      	ldr	r3, [r4, #8]
 801053e:	1b9b      	subs	r3, r3, r6
 8010540:	60a3      	str	r3, [r4, #8]
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	4433      	add	r3, r6
 8010546:	6023      	str	r3, [r4, #0]
 8010548:	2000      	movs	r0, #0
 801054a:	e7db      	b.n	8010504 <__ssputs_r+0x58>
 801054c:	462a      	mov	r2, r5
 801054e:	f7ff ff7e 	bl	801044e <_realloc_r>
 8010552:	4606      	mov	r6, r0
 8010554:	2800      	cmp	r0, #0
 8010556:	d1e1      	bne.n	801051c <__ssputs_r+0x70>
 8010558:	6921      	ldr	r1, [r4, #16]
 801055a:	4650      	mov	r0, sl
 801055c:	f7fb fdd8 	bl	800c110 <_free_r>
 8010560:	e7c7      	b.n	80104f2 <__ssputs_r+0x46>
	...

08010564 <_svfiprintf_r>:
 8010564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	4698      	mov	r8, r3
 801056a:	898b      	ldrh	r3, [r1, #12]
 801056c:	061b      	lsls	r3, r3, #24
 801056e:	b09d      	sub	sp, #116	; 0x74
 8010570:	4607      	mov	r7, r0
 8010572:	460d      	mov	r5, r1
 8010574:	4614      	mov	r4, r2
 8010576:	d50e      	bpl.n	8010596 <_svfiprintf_r+0x32>
 8010578:	690b      	ldr	r3, [r1, #16]
 801057a:	b963      	cbnz	r3, 8010596 <_svfiprintf_r+0x32>
 801057c:	2140      	movs	r1, #64	; 0x40
 801057e:	f7fb fe33 	bl	800c1e8 <_malloc_r>
 8010582:	6028      	str	r0, [r5, #0]
 8010584:	6128      	str	r0, [r5, #16]
 8010586:	b920      	cbnz	r0, 8010592 <_svfiprintf_r+0x2e>
 8010588:	230c      	movs	r3, #12
 801058a:	603b      	str	r3, [r7, #0]
 801058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010590:	e0d1      	b.n	8010736 <_svfiprintf_r+0x1d2>
 8010592:	2340      	movs	r3, #64	; 0x40
 8010594:	616b      	str	r3, [r5, #20]
 8010596:	2300      	movs	r3, #0
 8010598:	9309      	str	r3, [sp, #36]	; 0x24
 801059a:	2320      	movs	r3, #32
 801059c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80105a4:	2330      	movs	r3, #48	; 0x30
 80105a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010750 <_svfiprintf_r+0x1ec>
 80105aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ae:	f04f 0901 	mov.w	r9, #1
 80105b2:	4623      	mov	r3, r4
 80105b4:	469a      	mov	sl, r3
 80105b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ba:	b10a      	cbz	r2, 80105c0 <_svfiprintf_r+0x5c>
 80105bc:	2a25      	cmp	r2, #37	; 0x25
 80105be:	d1f9      	bne.n	80105b4 <_svfiprintf_r+0x50>
 80105c0:	ebba 0b04 	subs.w	fp, sl, r4
 80105c4:	d00b      	beq.n	80105de <_svfiprintf_r+0x7a>
 80105c6:	465b      	mov	r3, fp
 80105c8:	4622      	mov	r2, r4
 80105ca:	4629      	mov	r1, r5
 80105cc:	4638      	mov	r0, r7
 80105ce:	f7ff ff6d 	bl	80104ac <__ssputs_r>
 80105d2:	3001      	adds	r0, #1
 80105d4:	f000 80aa 	beq.w	801072c <_svfiprintf_r+0x1c8>
 80105d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105da:	445a      	add	r2, fp
 80105dc:	9209      	str	r2, [sp, #36]	; 0x24
 80105de:	f89a 3000 	ldrb.w	r3, [sl]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 80a2 	beq.w	801072c <_svfiprintf_r+0x1c8>
 80105e8:	2300      	movs	r3, #0
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f2:	f10a 0a01 	add.w	sl, sl, #1
 80105f6:	9304      	str	r3, [sp, #16]
 80105f8:	9307      	str	r3, [sp, #28]
 80105fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105fe:	931a      	str	r3, [sp, #104]	; 0x68
 8010600:	4654      	mov	r4, sl
 8010602:	2205      	movs	r2, #5
 8010604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010608:	4851      	ldr	r0, [pc, #324]	; (8010750 <_svfiprintf_r+0x1ec>)
 801060a:	f7ef fe09 	bl	8000220 <memchr>
 801060e:	9a04      	ldr	r2, [sp, #16]
 8010610:	b9d8      	cbnz	r0, 801064a <_svfiprintf_r+0xe6>
 8010612:	06d0      	lsls	r0, r2, #27
 8010614:	bf44      	itt	mi
 8010616:	2320      	movmi	r3, #32
 8010618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801061c:	0711      	lsls	r1, r2, #28
 801061e:	bf44      	itt	mi
 8010620:	232b      	movmi	r3, #43	; 0x2b
 8010622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010626:	f89a 3000 	ldrb.w	r3, [sl]
 801062a:	2b2a      	cmp	r3, #42	; 0x2a
 801062c:	d015      	beq.n	801065a <_svfiprintf_r+0xf6>
 801062e:	9a07      	ldr	r2, [sp, #28]
 8010630:	4654      	mov	r4, sl
 8010632:	2000      	movs	r0, #0
 8010634:	f04f 0c0a 	mov.w	ip, #10
 8010638:	4621      	mov	r1, r4
 801063a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801063e:	3b30      	subs	r3, #48	; 0x30
 8010640:	2b09      	cmp	r3, #9
 8010642:	d94e      	bls.n	80106e2 <_svfiprintf_r+0x17e>
 8010644:	b1b0      	cbz	r0, 8010674 <_svfiprintf_r+0x110>
 8010646:	9207      	str	r2, [sp, #28]
 8010648:	e014      	b.n	8010674 <_svfiprintf_r+0x110>
 801064a:	eba0 0308 	sub.w	r3, r0, r8
 801064e:	fa09 f303 	lsl.w	r3, r9, r3
 8010652:	4313      	orrs	r3, r2
 8010654:	9304      	str	r3, [sp, #16]
 8010656:	46a2      	mov	sl, r4
 8010658:	e7d2      	b.n	8010600 <_svfiprintf_r+0x9c>
 801065a:	9b03      	ldr	r3, [sp, #12]
 801065c:	1d19      	adds	r1, r3, #4
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	9103      	str	r1, [sp, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	bfbb      	ittet	lt
 8010666:	425b      	neglt	r3, r3
 8010668:	f042 0202 	orrlt.w	r2, r2, #2
 801066c:	9307      	strge	r3, [sp, #28]
 801066e:	9307      	strlt	r3, [sp, #28]
 8010670:	bfb8      	it	lt
 8010672:	9204      	strlt	r2, [sp, #16]
 8010674:	7823      	ldrb	r3, [r4, #0]
 8010676:	2b2e      	cmp	r3, #46	; 0x2e
 8010678:	d10c      	bne.n	8010694 <_svfiprintf_r+0x130>
 801067a:	7863      	ldrb	r3, [r4, #1]
 801067c:	2b2a      	cmp	r3, #42	; 0x2a
 801067e:	d135      	bne.n	80106ec <_svfiprintf_r+0x188>
 8010680:	9b03      	ldr	r3, [sp, #12]
 8010682:	1d1a      	adds	r2, r3, #4
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	9203      	str	r2, [sp, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	bfb8      	it	lt
 801068c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010690:	3402      	adds	r4, #2
 8010692:	9305      	str	r3, [sp, #20]
 8010694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010760 <_svfiprintf_r+0x1fc>
 8010698:	7821      	ldrb	r1, [r4, #0]
 801069a:	2203      	movs	r2, #3
 801069c:	4650      	mov	r0, sl
 801069e:	f7ef fdbf 	bl	8000220 <memchr>
 80106a2:	b140      	cbz	r0, 80106b6 <_svfiprintf_r+0x152>
 80106a4:	2340      	movs	r3, #64	; 0x40
 80106a6:	eba0 000a 	sub.w	r0, r0, sl
 80106aa:	fa03 f000 	lsl.w	r0, r3, r0
 80106ae:	9b04      	ldr	r3, [sp, #16]
 80106b0:	4303      	orrs	r3, r0
 80106b2:	3401      	adds	r4, #1
 80106b4:	9304      	str	r3, [sp, #16]
 80106b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ba:	4826      	ldr	r0, [pc, #152]	; (8010754 <_svfiprintf_r+0x1f0>)
 80106bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106c0:	2206      	movs	r2, #6
 80106c2:	f7ef fdad 	bl	8000220 <memchr>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d038      	beq.n	801073c <_svfiprintf_r+0x1d8>
 80106ca:	4b23      	ldr	r3, [pc, #140]	; (8010758 <_svfiprintf_r+0x1f4>)
 80106cc:	bb1b      	cbnz	r3, 8010716 <_svfiprintf_r+0x1b2>
 80106ce:	9b03      	ldr	r3, [sp, #12]
 80106d0:	3307      	adds	r3, #7
 80106d2:	f023 0307 	bic.w	r3, r3, #7
 80106d6:	3308      	adds	r3, #8
 80106d8:	9303      	str	r3, [sp, #12]
 80106da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106dc:	4433      	add	r3, r6
 80106de:	9309      	str	r3, [sp, #36]	; 0x24
 80106e0:	e767      	b.n	80105b2 <_svfiprintf_r+0x4e>
 80106e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e6:	460c      	mov	r4, r1
 80106e8:	2001      	movs	r0, #1
 80106ea:	e7a5      	b.n	8010638 <_svfiprintf_r+0xd4>
 80106ec:	2300      	movs	r3, #0
 80106ee:	3401      	adds	r4, #1
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	4619      	mov	r1, r3
 80106f4:	f04f 0c0a 	mov.w	ip, #10
 80106f8:	4620      	mov	r0, r4
 80106fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106fe:	3a30      	subs	r2, #48	; 0x30
 8010700:	2a09      	cmp	r2, #9
 8010702:	d903      	bls.n	801070c <_svfiprintf_r+0x1a8>
 8010704:	2b00      	cmp	r3, #0
 8010706:	d0c5      	beq.n	8010694 <_svfiprintf_r+0x130>
 8010708:	9105      	str	r1, [sp, #20]
 801070a:	e7c3      	b.n	8010694 <_svfiprintf_r+0x130>
 801070c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010710:	4604      	mov	r4, r0
 8010712:	2301      	movs	r3, #1
 8010714:	e7f0      	b.n	80106f8 <_svfiprintf_r+0x194>
 8010716:	ab03      	add	r3, sp, #12
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	462a      	mov	r2, r5
 801071c:	4b0f      	ldr	r3, [pc, #60]	; (801075c <_svfiprintf_r+0x1f8>)
 801071e:	a904      	add	r1, sp, #16
 8010720:	4638      	mov	r0, r7
 8010722:	f7fb ffcf 	bl	800c6c4 <_printf_float>
 8010726:	1c42      	adds	r2, r0, #1
 8010728:	4606      	mov	r6, r0
 801072a:	d1d6      	bne.n	80106da <_svfiprintf_r+0x176>
 801072c:	89ab      	ldrh	r3, [r5, #12]
 801072e:	065b      	lsls	r3, r3, #25
 8010730:	f53f af2c 	bmi.w	801058c <_svfiprintf_r+0x28>
 8010734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010736:	b01d      	add	sp, #116	; 0x74
 8010738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073c:	ab03      	add	r3, sp, #12
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	462a      	mov	r2, r5
 8010742:	4b06      	ldr	r3, [pc, #24]	; (801075c <_svfiprintf_r+0x1f8>)
 8010744:	a904      	add	r1, sp, #16
 8010746:	4638      	mov	r0, r7
 8010748:	f7fc fa60 	bl	800cc0c <_printf_i>
 801074c:	e7eb      	b.n	8010726 <_svfiprintf_r+0x1c2>
 801074e:	bf00      	nop
 8010750:	080117e8 	.word	0x080117e8
 8010754:	080117f2 	.word	0x080117f2
 8010758:	0800c6c5 	.word	0x0800c6c5
 801075c:	080104ad 	.word	0x080104ad
 8010760:	080117ee 	.word	0x080117ee

08010764 <_putc_r>:
 8010764:	b570      	push	{r4, r5, r6, lr}
 8010766:	460d      	mov	r5, r1
 8010768:	4614      	mov	r4, r2
 801076a:	4606      	mov	r6, r0
 801076c:	b118      	cbz	r0, 8010776 <_putc_r+0x12>
 801076e:	6983      	ldr	r3, [r0, #24]
 8010770:	b90b      	cbnz	r3, 8010776 <_putc_r+0x12>
 8010772:	f7fb fba5 	bl	800bec0 <__sinit>
 8010776:	4b1c      	ldr	r3, [pc, #112]	; (80107e8 <_putc_r+0x84>)
 8010778:	429c      	cmp	r4, r3
 801077a:	d124      	bne.n	80107c6 <_putc_r+0x62>
 801077c:	6874      	ldr	r4, [r6, #4]
 801077e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010780:	07d8      	lsls	r0, r3, #31
 8010782:	d405      	bmi.n	8010790 <_putc_r+0x2c>
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	0599      	lsls	r1, r3, #22
 8010788:	d402      	bmi.n	8010790 <_putc_r+0x2c>
 801078a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801078c:	f7fb fc6d 	bl	800c06a <__retarget_lock_acquire_recursive>
 8010790:	68a3      	ldr	r3, [r4, #8]
 8010792:	3b01      	subs	r3, #1
 8010794:	2b00      	cmp	r3, #0
 8010796:	60a3      	str	r3, [r4, #8]
 8010798:	da05      	bge.n	80107a6 <_putc_r+0x42>
 801079a:	69a2      	ldr	r2, [r4, #24]
 801079c:	4293      	cmp	r3, r2
 801079e:	db1c      	blt.n	80107da <_putc_r+0x76>
 80107a0:	b2eb      	uxtb	r3, r5
 80107a2:	2b0a      	cmp	r3, #10
 80107a4:	d019      	beq.n	80107da <_putc_r+0x76>
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	6022      	str	r2, [r4, #0]
 80107ac:	701d      	strb	r5, [r3, #0]
 80107ae:	b2ed      	uxtb	r5, r5
 80107b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107b2:	07da      	lsls	r2, r3, #31
 80107b4:	d405      	bmi.n	80107c2 <_putc_r+0x5e>
 80107b6:	89a3      	ldrh	r3, [r4, #12]
 80107b8:	059b      	lsls	r3, r3, #22
 80107ba:	d402      	bmi.n	80107c2 <_putc_r+0x5e>
 80107bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107be:	f7fb fc55 	bl	800c06c <__retarget_lock_release_recursive>
 80107c2:	4628      	mov	r0, r5
 80107c4:	bd70      	pop	{r4, r5, r6, pc}
 80107c6:	4b09      	ldr	r3, [pc, #36]	; (80107ec <_putc_r+0x88>)
 80107c8:	429c      	cmp	r4, r3
 80107ca:	d101      	bne.n	80107d0 <_putc_r+0x6c>
 80107cc:	68b4      	ldr	r4, [r6, #8]
 80107ce:	e7d6      	b.n	801077e <_putc_r+0x1a>
 80107d0:	4b07      	ldr	r3, [pc, #28]	; (80107f0 <_putc_r+0x8c>)
 80107d2:	429c      	cmp	r4, r3
 80107d4:	bf08      	it	eq
 80107d6:	68f4      	ldreq	r4, [r6, #12]
 80107d8:	e7d1      	b.n	801077e <_putc_r+0x1a>
 80107da:	4629      	mov	r1, r5
 80107dc:	4622      	mov	r2, r4
 80107de:	4630      	mov	r0, r6
 80107e0:	f7fd fdd8 	bl	800e394 <__swbuf_r>
 80107e4:	4605      	mov	r5, r0
 80107e6:	e7e3      	b.n	80107b0 <_putc_r+0x4c>
 80107e8:	080117a4 	.word	0x080117a4
 80107ec:	080117c4 	.word	0x080117c4
 80107f0:	08011784 	.word	0x08011784

080107f4 <_read_r>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	4d07      	ldr	r5, [pc, #28]	; (8010814 <_read_r+0x20>)
 80107f8:	4604      	mov	r4, r0
 80107fa:	4608      	mov	r0, r1
 80107fc:	4611      	mov	r1, r2
 80107fe:	2200      	movs	r2, #0
 8010800:	602a      	str	r2, [r5, #0]
 8010802:	461a      	mov	r2, r3
 8010804:	f7f3 fdc9 	bl	800439a <_read>
 8010808:	1c43      	adds	r3, r0, #1
 801080a:	d102      	bne.n	8010812 <_read_r+0x1e>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	b103      	cbz	r3, 8010812 <_read_r+0x1e>
 8010810:	6023      	str	r3, [r4, #0]
 8010812:	bd38      	pop	{r3, r4, r5, pc}
 8010814:	20000a20 	.word	0x20000a20

08010818 <strncmp>:
 8010818:	b510      	push	{r4, lr}
 801081a:	b17a      	cbz	r2, 801083c <strncmp+0x24>
 801081c:	4603      	mov	r3, r0
 801081e:	3901      	subs	r1, #1
 8010820:	1884      	adds	r4, r0, r2
 8010822:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010826:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801082a:	4290      	cmp	r0, r2
 801082c:	d101      	bne.n	8010832 <strncmp+0x1a>
 801082e:	42a3      	cmp	r3, r4
 8010830:	d101      	bne.n	8010836 <strncmp+0x1e>
 8010832:	1a80      	subs	r0, r0, r2
 8010834:	bd10      	pop	{r4, pc}
 8010836:	2800      	cmp	r0, #0
 8010838:	d1f3      	bne.n	8010822 <strncmp+0xa>
 801083a:	e7fa      	b.n	8010832 <strncmp+0x1a>
 801083c:	4610      	mov	r0, r2
 801083e:	e7f9      	b.n	8010834 <strncmp+0x1c>

08010840 <__ascii_wctomb>:
 8010840:	b149      	cbz	r1, 8010856 <__ascii_wctomb+0x16>
 8010842:	2aff      	cmp	r2, #255	; 0xff
 8010844:	bf85      	ittet	hi
 8010846:	238a      	movhi	r3, #138	; 0x8a
 8010848:	6003      	strhi	r3, [r0, #0]
 801084a:	700a      	strbls	r2, [r1, #0]
 801084c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010850:	bf98      	it	ls
 8010852:	2001      	movls	r0, #1
 8010854:	4770      	bx	lr
 8010856:	4608      	mov	r0, r1
 8010858:	4770      	bx	lr
	...

0801085c <_fstat_r>:
 801085c:	b538      	push	{r3, r4, r5, lr}
 801085e:	4d07      	ldr	r5, [pc, #28]	; (801087c <_fstat_r+0x20>)
 8010860:	2300      	movs	r3, #0
 8010862:	4604      	mov	r4, r0
 8010864:	4608      	mov	r0, r1
 8010866:	4611      	mov	r1, r2
 8010868:	602b      	str	r3, [r5, #0]
 801086a:	f7f3 fdbf 	bl	80043ec <_fstat>
 801086e:	1c43      	adds	r3, r0, #1
 8010870:	d102      	bne.n	8010878 <_fstat_r+0x1c>
 8010872:	682b      	ldr	r3, [r5, #0]
 8010874:	b103      	cbz	r3, 8010878 <_fstat_r+0x1c>
 8010876:	6023      	str	r3, [r4, #0]
 8010878:	bd38      	pop	{r3, r4, r5, pc}
 801087a:	bf00      	nop
 801087c:	20000a20 	.word	0x20000a20

08010880 <_isatty_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4d06      	ldr	r5, [pc, #24]	; (801089c <_isatty_r+0x1c>)
 8010884:	2300      	movs	r3, #0
 8010886:	4604      	mov	r4, r0
 8010888:	4608      	mov	r0, r1
 801088a:	602b      	str	r3, [r5, #0]
 801088c:	f7f3 fdbe 	bl	800440c <_isatty>
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	d102      	bne.n	801089a <_isatty_r+0x1a>
 8010894:	682b      	ldr	r3, [r5, #0]
 8010896:	b103      	cbz	r3, 801089a <_isatty_r+0x1a>
 8010898:	6023      	str	r3, [r4, #0]
 801089a:	bd38      	pop	{r3, r4, r5, pc}
 801089c:	20000a20 	.word	0x20000a20

080108a0 <_malloc_usable_size_r>:
 80108a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108a4:	1f18      	subs	r0, r3, #4
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	bfbc      	itt	lt
 80108aa:	580b      	ldrlt	r3, [r1, r0]
 80108ac:	18c0      	addlt	r0, r0, r3
 80108ae:	4770      	bx	lr

080108b0 <_init>:
 80108b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b2:	bf00      	nop
 80108b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108b6:	bc08      	pop	{r3}
 80108b8:	469e      	mov	lr, r3
 80108ba:	4770      	bx	lr

080108bc <_fini>:
 80108bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108be:	bf00      	nop
 80108c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108c2:	bc08      	pop	{r3}
 80108c4:	469e      	mov	lr, r3
 80108c6:	4770      	bx	lr
