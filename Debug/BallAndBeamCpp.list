
BallAndBeamCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001364  0800fe00  0800fe00  0001fe00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011164  08011164  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08011164  08011164  00021164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801116c  0801116c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801116c  0801116c  0002116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011174  08011174  00021174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08011178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000208  0801137c  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0801137c  00030a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035559  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a58  00000000  00000000  0006578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0006a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  0006bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfb4  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f098  00000000  00000000  0009b58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001192a7  00000000  00000000  000ba624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d38cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f94  00000000  00000000  001d391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fde8 	.word	0x0800fde8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800fde8 	.word	0x0800fde8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2uiz>:
 8000c0c:	004a      	lsls	r2, r1, #1
 8000c0e:	d211      	bcs.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d211      	bcs.n	8000c3a <__aeabi_d2uiz+0x2e>
 8000c16:	d50d      	bpl.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d40e      	bmi.n	8000c40 <__aeabi_d2uiz+0x34>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_d2uiz+0x3a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 b9aa 	b.w	8001058 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f83c 	bl	8000d88 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	460d      	mov	r5, r1
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_dcmplt>
 8000d2a:	b928      	cbnz	r0, 8000d38 <__aeabi_d2lz+0x1c>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d34:	f000 b80a 	b.w	8000d4c <__aeabi_d2ulz>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3e:	f000 f805 	bl	8000d4c <__aeabi_d2ulz>
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop

08000d4c <__aeabi_d2ulz>:
 8000d4c:	b5d0      	push	{r4, r6, r7, lr}
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__aeabi_d2ulz+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc81 	bl	800065c <__aeabi_dmul>
 8000d5a:	f7ff ff57 	bl	8000c0c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <__aeabi_d2ulz+0x38>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc78 	bl	800065c <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff faba 	bl	80002ec <__aeabi_dsub>
 8000d78:	f7ff ff48 	bl	8000c0c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <__udivmoddi4>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	9d08      	ldr	r5, [sp, #32]
 8000d8e:	4604      	mov	r4, r0
 8000d90:	468e      	mov	lr, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14d      	bne.n	8000e32 <__udivmoddi4+0xaa>
 8000d96:	428a      	cmp	r2, r1
 8000d98:	4694      	mov	ip, r2
 8000d9a:	d969      	bls.n	8000e70 <__udivmoddi4+0xe8>
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b152      	cbz	r2, 8000db8 <__udivmoddi4+0x30>
 8000da2:	fa01 f302 	lsl.w	r3, r1, r2
 8000da6:	f1c2 0120 	rsb	r1, r2, #32
 8000daa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db2:	ea41 0e03 	orr.w	lr, r1, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	0c21      	lsrs	r1, r4, #16
 8000dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000dc2:	fa1f f78c 	uxth.w	r7, ip
 8000dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dce:	fb06 f107 	mul.w	r1, r6, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x64>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dde:	f080 811f 	bcs.w	8001020 <__udivmoddi4+0x298>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 811c 	bls.w	8001020 <__udivmoddi4+0x298>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb00 f707 	mul.w	r7, r0, r7
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x92>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0c:	f080 810a 	bcs.w	8001024 <__udivmoddi4+0x29c>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f240 8107 	bls.w	8001024 <__udivmoddi4+0x29c>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1e:	1be4      	subs	r4, r4, r7
 8000e20:	2600      	movs	r6, #0
 8000e22:	b11d      	cbz	r5, 8000e2c <__udivmoddi4+0xa4>
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c5 4300 	strd	r4, r3, [r5]
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0xc2>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80ef 	beq.w	800101a <__udivmoddi4+0x292>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x160>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xd4>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80f9 	bhi.w	800104e <__udivmoddi4+0x2c6>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	469e      	mov	lr, r3
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e0      	beq.n	8000e2c <__udivmoddi4+0xa4>
 8000e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6e:	e7dd      	b.n	8000e2c <__udivmoddi4+0xa4>
 8000e70:	b902      	cbnz	r2, 8000e74 <__udivmoddi4+0xec>
 8000e72:	deff      	udf	#255	; 0xff
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 8092 	bne.w	8000fa2 <__udivmoddi4+0x21a>
 8000e7e:	eba1 010c 	sub.w	r1, r1, ip
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f fe8c 	uxth.w	lr, ip
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	0c20      	lsrs	r0, r4, #16
 8000e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e92:	fb07 1113 	mls	r1, r7, r3, r1
 8000e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9a:	fb0e f003 	mul.w	r0, lr, r3
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x12c>
 8000ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x12a>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f200 80cb 	bhi.w	8001048 <__udivmoddi4+0x2c0>
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	1a09      	subs	r1, r1, r0
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x156>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x154>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f200 80bb 	bhi.w	8001052 <__udivmoddi4+0x2ca>
 8000edc:	4608      	mov	r0, r1
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee6:	e79c      	b.n	8000e22 <__udivmoddi4+0x9a>
 8000ee8:	f1c6 0720 	rsb	r7, r6, #32
 8000eec:	40b3      	lsls	r3, r6
 8000eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	431c      	orrs	r4, r3
 8000f00:	40f9      	lsrs	r1, r7
 8000f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f06:	fa00 f306 	lsl.w	r3, r0, r6
 8000f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0e:	0c20      	lsrs	r0, r4, #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fb09 1118 	mls	r1, r9, r8, r1
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f20:	4288      	cmp	r0, r1
 8000f22:	fa02 f206 	lsl.w	r2, r2, r6
 8000f26:	d90b      	bls.n	8000f40 <__udivmoddi4+0x1b8>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f30:	f080 8088 	bcs.w	8001044 <__udivmoddi4+0x2bc>
 8000f34:	4288      	cmp	r0, r1
 8000f36:	f240 8085 	bls.w	8001044 <__udivmoddi4+0x2bc>
 8000f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f48:	fb09 1110 	mls	r1, r9, r0, r1
 8000f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f54:	458e      	cmp	lr, r1
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x1e2>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f60:	d26c      	bcs.n	800103c <__udivmoddi4+0x2b4>
 8000f62:	458e      	cmp	lr, r1
 8000f64:	d96a      	bls.n	800103c <__udivmoddi4+0x2b4>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4461      	add	r1, ip
 8000f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f72:	eba1 010e 	sub.w	r1, r1, lr
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	46a6      	mov	lr, r4
 8000f7c:	d356      	bcc.n	800102c <__udivmoddi4+0x2a4>
 8000f7e:	d053      	beq.n	8001028 <__udivmoddi4+0x2a0>
 8000f80:	b15d      	cbz	r5, 8000f9a <__udivmoddi4+0x212>
 8000f82:	ebb3 0208 	subs.w	r2, r3, r8
 8000f86:	eb61 010e 	sbc.w	r1, r1, lr
 8000f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f92:	40f1      	lsrs	r1, r6
 8000f94:	431f      	orrs	r7, r3
 8000f96:	e9c5 7100 	strd	r7, r1, [r5]
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	40d8      	lsrs	r0, r3
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fca:	fb00 f60e 	mul.w	r6, r0, lr
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x260>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fde:	d22f      	bcs.n	8001040 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d92d      	bls.n	8001040 <__udivmoddi4+0x2b8>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	b289      	uxth	r1, r1
 8000fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x28a>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001008:	d216      	bcs.n	8001038 <__udivmoddi4+0x2b0>
 800100a:	428b      	cmp	r3, r1
 800100c:	d914      	bls.n	8001038 <__udivmoddi4+0x2b0>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001018:	e738      	b.n	8000e8c <__udivmoddi4+0x104>
 800101a:	462e      	mov	r6, r5
 800101c:	4628      	mov	r0, r5
 800101e:	e705      	b.n	8000e2c <__udivmoddi4+0xa4>
 8001020:	4606      	mov	r6, r0
 8001022:	e6e3      	b.n	8000dec <__udivmoddi4+0x64>
 8001024:	4618      	mov	r0, r3
 8001026:	e6f8      	b.n	8000e1a <__udivmoddi4+0x92>
 8001028:	454b      	cmp	r3, r9
 800102a:	d2a9      	bcs.n	8000f80 <__udivmoddi4+0x1f8>
 800102c:	ebb9 0802 	subs.w	r8, r9, r2
 8001030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001034:	3801      	subs	r0, #1
 8001036:	e7a3      	b.n	8000f80 <__udivmoddi4+0x1f8>
 8001038:	4646      	mov	r6, r8
 800103a:	e7ea      	b.n	8001012 <__udivmoddi4+0x28a>
 800103c:	4620      	mov	r0, r4
 800103e:	e794      	b.n	8000f6a <__udivmoddi4+0x1e2>
 8001040:	4640      	mov	r0, r8
 8001042:	e7d1      	b.n	8000fe8 <__udivmoddi4+0x260>
 8001044:	46d0      	mov	r8, sl
 8001046:	e77b      	b.n	8000f40 <__udivmoddi4+0x1b8>
 8001048:	3b02      	subs	r3, #2
 800104a:	4461      	add	r1, ip
 800104c:	e732      	b.n	8000eb4 <__udivmoddi4+0x12c>
 800104e:	4630      	mov	r0, r6
 8001050:	e709      	b.n	8000e66 <__udivmoddi4+0xde>
 8001052:	4464      	add	r4, ip
 8001054:	3802      	subs	r0, #2
 8001056:	e742      	b.n	8000ede <__udivmoddi4+0x156>

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_ZN10controllib11generic_pidC1Eddddd>:
#include <math.h>
#endif

namespace controllib{

       generic_pid::generic_pid(double _kp, double _ki, double _kd, double _bias,double _T):kp(_kp),ki(_ki),kd(_kd),bias(_bias),T(_T){
 800105c:	b480      	push	{r7}
 800105e:	b08d      	sub	sp, #52	; 0x34
 8001060:	af00      	add	r7, sp, #0
 8001062:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001064:	ed87 0b08 	vstr	d0, [r7, #32]
 8001068:	ed87 1b06 	vstr	d1, [r7, #24]
 800106c:	ed87 2b04 	vstr	d2, [r7, #16]
 8001070:	ed87 3b02 	vstr	d3, [r7, #8]
 8001074:	ed87 4b00 	vstr	d4, [r7]
 8001078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800107a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800107e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001088:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800108c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001092:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800109c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80010a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            
        }
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	4618      	mov	r0, r3
 80010ae:	3734      	adds	r7, #52	; 0x34
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN10controllib11generic_pid6set_kpEd>:
        void generic_pid::set_kp(double _kp){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0b00 	vstr	d0, [r7]
            kp=_kp;
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZN10controllib11generic_pid6set_kiEd>:
        void generic_pid::set_ki(double _ki){
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	ed87 0b00 	vstr	d0, [r7]
            ki=_ki;
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
        }
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZN10controllib11generic_pid6set_kdEd>:
        void generic_pid::set_kd(double _kd){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	ed87 0b00 	vstr	d0, [r7]
            kd=_kd;
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800110e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        }
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_ZN10controllib11generic_pid8set_biasEd>:
        void generic_pid::set_bias(double _bias){
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	ed87 0b00 	vstr	d0, [r7]
            bias=_bias;
 800112a:	68f9      	ldr	r1, [r7, #12]
 800112c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001130:	e9c1 2308 	strd	r2, r3, [r1, #32]
        }
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN10controllib11generic_pid15update_setpointEd>:
        void generic_pid::update_setpoint(double _setpoint){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	ed87 0b00 	vstr	d0, [r7]
            setpoint=_setpoint;
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001152:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        }
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_ZN10controllib11generic_pid16calculate_outputEd>:
        double generic_pid::calculate_output(double _input){
 8001162:	b5b0      	push	{r4, r5, r7, lr}
 8001164:	b088      	sub	sp, #32
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	ed87 0b00 	vstr	d0, [r7]
            auto e = setpoint - _input;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001178:	f7ff f8b8 	bl	80002ec <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]
            auto output = kp * e + ki * e * T + (kd * e) / T;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800118a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800118e:	f7ff fa65 	bl	800065c <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4614      	mov	r4, r2
 8001198:	461d      	mov	r5, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011a4:	f7ff fa5a 	bl	800065c <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011b6:	f7ff fa51 	bl	800065c <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f895 	bl	80002f0 <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4614      	mov	r4, r2
 80011cc:	461d      	mov	r5, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80011d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d8:	f7ff fa40 	bl	800065c <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011ea:	f7ff fb61 	bl	80008b0 <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff f87b 	bl	80002f0 <__adddf3>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef ENABLE_L1_PLOTTING
    		printf("%f,%f,%f\r\n",setpoint,_input,abs(output));
#endif
            return output;
 8001202:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001206:	ec43 2b17 	vmov	d7, r2, r3
        }
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}

08001218 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001222:	ed97 0a01 	vldr	s0, [r7, #4]
 8001226:	f009 fe7f 	bl	800af28 <asinf>
 800122a:	eef0 7a40 	vmov.f32	s15, s0
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>:
ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w, int addr) {
	_wire = w;
	i2cAddress = addr;
}

ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	_wire = w;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]
	i2cAddress = 210; //0x68;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	22d2      	movs	r2, #210	; 0xd2
 800124c:	605a      	str	r2, [r3, #4]
}
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_ZN11ICM20948_WE4initEv>:

/************ Basic Settings ************/

bool ICM20948_WE::init() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	currentBank = 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	721a      	strb	r2, [r3, #8]
	if (!reset_ICM20948()) {
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fb94 	bl	8001998 <_ZN11ICM20948_WE14reset_ICM20948Ev>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <_ZN11ICM20948_WE4initEv+0x28>
		return false;
 8001280:	2300      	movs	r3, #0
 8001282:	e03a      	b.n	80012fa <_ZN11ICM20948_WE4initEv+0x9e>
	}

	accOffsetVal.x = 0.0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
	accCorrFactor.x = 1.0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = 1.0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = 1.0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
	accRangeFactor = 1.0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gyrOffsetVal.x = 0.0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
	gyrOffsetVal.y = 0.0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
	gyrOffsetVal.z = 0.0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
	gyrRangeFactor = 1.0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	fifoType = ICM20948_FIFO_ACC;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2210      	movs	r2, #16
 80012e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	sleep(false);
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f9e6 	bl	80016b8 <_ZN11ICM20948_WE5sleepEb>
	writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR 
 80012ec:	2301      	movs	r3, #1
 80012ee:	2209      	movs	r2, #9
 80012f0:	2102      	movs	r1, #2
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 faa9 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>

	return true;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_ZN11ICM20948_WE9enableAccEb>:

uint8_t ICM20948_WE::whoAmI() {
	return readRegister8(0, ICM20948_WHO_AM_I);
}

void ICM20948_WE::enableAcc(bool enAcc) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_2);
 800130e:	2207      	movs	r2, #7
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 faef 	bl	80018f6 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (enAcc) {
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <_ZN11ICM20948_WE9enableAccEb+0x3a>
		regVal &= ~ICM20948_ACC_EN;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800132e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800133a:	e008      	b.n	800134e <_ZN11ICM20948_WE9enableAccEb+0x4c>
	} else {
		regVal |= ICM20948_ACC_EN;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001342:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001346:	b2da      	uxtb	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, 0x00); //regVal);
 800134e:	2300      	movs	r3, #0
 8001350:	2207      	movs	r2, #7
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa78 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>:

void ICM20948_WE::setAccRange(ICM20948_accRange accRange) {
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 800136e:	2214      	movs	r2, #20
 8001370:	2102      	movs	r1, #2
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fabf 	bl	80018f6 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001388:	f023 0306 	bic.w	r3, r3, #6
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (accRange << 1);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800139a:	b25a      	sxtb	r2, r3
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013b4:	2214      	movs	r2, #20
 80013b6:	2102      	movs	r1, #2
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fa46 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
	accRangeFactor = 1 << accRange;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2201      	movs	r2, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setAccDLPF(ICM20948_dlpf dlpf) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 80013e2:	2214      	movs	r2, #20
 80013e4:	2102      	movs	r1, #2
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa85 	bl	80018f6 <_ZN11ICM20948_WE13readRegister8Ehh>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d111      	bne.n	8001420 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001414:	2214      	movs	r2, #20
 8001416:	2102      	movs	r1, #2
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fa16 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 800141e:	e026      	b.n	800146e <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001438:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800144a:	b25a      	sxtb	r2, r3
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b25b      	sxtb	r3, r3
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001464:	2214      	movs	r2, #20
 8001466:	2102      	movs	r1, #2
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f9ee 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>:

void ICM20948_WE::setAccSampleRateDivider(uint16_t accSplRateDiv) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
	writeRegister16(2, ICM20948_ACCEL_SMPLRT_DIV_1, accSplRateDiv);
 8001480:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001484:	2210      	movs	r2, #16
 8001486:	2102      	movs	r1, #2
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fa05 	bl	8001898 <_ZN11ICM20948_WE15writeRegister16Ehhs>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZN11ICM20948_WE10readSensorEv>:
	}
}

/************* x,y,z results *************/

void ICM20948_WE::readSensor() {
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	readAllData(buffer);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3309      	adds	r3, #9
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fa51 	bl	800194c <_ZN11ICM20948_WE11readAllDataEPh>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZN11ICM20948_WE15getAccRawValuesEv>:

xyzFloat ICM20948_WE::getAccRawValues() {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08c      	sub	sp, #48	; 0x30
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal;
	accRawVal.x = (int16_t) (((buffer[0]) << 8) | buffer[1]) * 1.0;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	7a5b      	ldrb	r3, [r3, #9]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	7a9b      	ldrb	r3, [r3, #10]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f85b 	bl	8000588 <__aeabi_i2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbb7 	bl	8000c4c <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
	accRawVal.y = (int16_t) (((buffer[2]) << 8) | (int16_t) buffer[3]) * 1.0;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	7adb      	ldrb	r3, [r3, #11]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	7b1b      	ldrb	r3, [r3, #12]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f847 	bl	8000588 <__aeabi_i2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fba3 	bl	8000c4c <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	61fb      	str	r3, [r7, #28]
	accRawVal.z = (int16_t) (((buffer[4]) << 8) | buffer[5]) * 1.0;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	7b5b      	ldrb	r3, [r3, #13]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	7b9b      	ldrb	r3, [r3, #14]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f833 	bl	8000588 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb8f 	bl	8000c4c <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	623b      	str	r3, [r7, #32]
	return accRawVal;
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	f107 0218 	add.w	r2, r7, #24
 800153a:	ca07      	ldmia	r2, {r0, r1, r2}
 800153c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	ee06 1a90 	vmov	s13, r1
 800154a:	ee07 2a10 	vmov	s14, r2
 800154e:	ee07 3a90 	vmov	s15, r3
}
 8001552:	eeb0 0a66 	vmov.f32	s0, s13
 8001556:	eef0 0a47 	vmov.f32	s1, s14
 800155a:	eeb0 1a67 	vmov.f32	s2, s15
 800155e:	3730      	adds	r7, #48	; 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>:

xyzFloat ICM20948_WE::getCorrectedAccRawValues() {
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal = getAccRawValues();
 800156c:	6978      	ldr	r0, [r7, #20]
 800156e:	f7ff ffa0 	bl	80014b2 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8001572:	eef0 6a40 	vmov.f32	s13, s0
 8001576:	eeb0 7a60 	vmov.f32	s14, s1
 800157a:	eef0 7a41 	vmov.f32	s15, s2
 800157e:	edc7 6a06 	vstr	s13, [r7, #24]
 8001582:	ed87 7a07 	vstr	s14, [r7, #28]
 8001586:	edc7 7a08 	vstr	s15, [r7, #32]
	accRawVal = correctAccRawValues(accRawVal);
 800158a:	edd7 6a06 	vldr	s13, [r7, #24]
 800158e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001592:	edd7 7a08 	vldr	s15, [r7, #32]
 8001596:	eeb0 0a66 	vmov.f32	s0, s13
 800159a:	eef0 0a47 	vmov.f32	s1, s14
 800159e:	eeb0 1a67 	vmov.f32	s2, s15
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f000 f8ba 	bl	800171c <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>
 80015a8:	eef0 6a40 	vmov.f32	s13, s0
 80015ac:	eeb0 7a60 	vmov.f32	s14, s1
 80015b0:	eef0 7a41 	vmov.f32	s15, s2
 80015b4:	edc7 6a06 	vstr	s13, [r7, #24]
 80015b8:	ed87 7a07 	vstr	s14, [r7, #28]
 80015bc:	edc7 7a08 	vstr	s15, [r7, #32]

	return accRawVal;
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	f107 0218 	add.w	r2, r7, #24
 80015c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	ee06 1a90 	vmov	s13, r1
 80015d8:	ee07 2a10 	vmov	s14, r2
 80015dc:	ee07 3a90 	vmov	s15, r3
}
 80015e0:	eeb0 0a66 	vmov.f32	s0, s13
 80015e4:	eef0 0a47 	vmov.f32	s1, s14
 80015e8:	eeb0 1a67 	vmov.f32	s2, s15
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <_ZN11ICM20948_WE10getGValuesEv>:

xyzFloat ICM20948_WE::getGValues() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6178      	str	r0, [r7, #20]
	xyzFloat gVal, accRawVal;
	accRawVal = getCorrectedAccRawValues();
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff ffb1 	bl	8001564 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>
 8001602:	eef0 6a40 	vmov.f32	s13, s0
 8001606:	eeb0 7a60 	vmov.f32	s14, s1
 800160a:	eef0 7a41 	vmov.f32	s15, s2
 800160e:	edc7 6a07 	vstr	s13, [r7, #28]
 8001612:	ed87 7a08 	vstr	s14, [r7, #32]
 8001616:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	gVal.x = accRawVal.x * accRangeFactor / 16384.0;
 800161a:	ed97 7a07 	vldr	s14, [r7, #28]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001630:	eddf 6a20 	vldr	s13, [pc, #128]	; 80016b4 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001638:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	gVal.y = accRawVal.y * accRangeFactor / 16384.0;
 800163c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001652:	eddf 6a18 	vldr	s13, [pc, #96]	; 80016b4 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	gVal.z = accRawVal.z * accRangeFactor / 16384.0;
 800165e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001674:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80016b4 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	return gVal;
 8001680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001684:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001688:	ca07      	ldmia	r2, {r0, r1, r2}
 800168a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800168e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001694:	ee06 1a90 	vmov	s13, r1
 8001698:	ee07 2a10 	vmov	s14, r2
 800169c:	ee07 3a90 	vmov	s15, r3
}
 80016a0:	eeb0 0a66 	vmov.f32	s0, s13
 80016a4:	eef0 0a47 	vmov.f32	s1, s14
 80016a8:	eeb0 1a67 	vmov.f32	s2, s15
 80016ac:	3740      	adds	r7, #64	; 0x40
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	46800000 	.word	0x46800000

080016b8 <_ZN11ICM20948_WE5sleepEb>:

void ICM20948_WE::setAccAverageInCycleMode(ICM20948_accAvgLowPower avg) {
	writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
}

void ICM20948_WE::sleep(bool sleep) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 80016c4:	2206      	movs	r2, #6
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f914 	bl	80018f6 <_ZN11ICM20948_WE13readRegister8Ehh>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (sleep) {
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <_ZN11ICM20948_WE5sleepEb+0x3a>
		regVal |= ICM20948_SLEEP;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80016f0:	e008      	b.n	8001704 <_ZN11ICM20948_WE5sleepEb+0x4c>
	} else {
		regVal &= ~ICM20948_SLEEP;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800170a:	2206      	movs	r2, #6
 800170c:	2100      	movs	r1, #0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f89b 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>:
	regVal |= 0x01;
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
	HAL_Delay(10);
}

xyzFloat ICM20948_WE::correctAccRawValues(xyzFloat accRawVal) {
 800171c:	b480      	push	{r7}
 800171e:	b08d      	sub	sp, #52	; 0x34
 8001720:	af00      	add	r7, sp, #0
 8001722:	61f8      	str	r0, [r7, #28]
 8001724:	eef0 6a40 	vmov.f32	s13, s0
 8001728:	eeb0 7a60 	vmov.f32	s14, s1
 800172c:	eef0 7a41 	vmov.f32	s15, s2
 8001730:	edc7 6a04 	vstr	s13, [r7, #16]
 8001734:	ed87 7a05 	vstr	s14, [r7, #20]
 8001738:	edc7 7a06 	vstr	s15, [r7, #24]
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 800173c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	ed93 6a08 	vldr	s12, [r3, #32]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001754:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001758:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.x;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001762:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 8001766:	edc7 7a04 	vstr	s15, [r7, #16]
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 800176a:	ed97 7a05 	vldr	s14, [r7, #20]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001782:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001786:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.y;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001790:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 8001794:	edc7 7a05 	vstr	s15, [r7, #20]
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 8001798:	ed97 7a06 	vldr	s14, [r7, #24]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017b4:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.z;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80017be:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 80017c2:	edc7 7a06 	vstr	s15, [r7, #24]

	return accRawVal;
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	f107 0210 	add.w	r2, r7, #16
 80017ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	ee06 1a90 	vmov	s13, r1
 80017de:	ee07 2a10 	vmov	s14, r2
 80017e2:	ee07 3a90 	vmov	s15, r3
}
 80017e6:	eeb0 0a66 	vmov.f32	s0, s13
 80017ea:	eef0 0a47 	vmov.f32	s1, s14
 80017ee:	eeb0 1a67 	vmov.f32	s2, s15
 80017f2:	3734      	adds	r7, #52	; 0x34
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_ZN11ICM20948_WE10switchBankEh>:
	gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);

	return gyrRawVal;
}

void ICM20948_WE::switchBank(uint8_t newBank) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
	if (newBank != currentBank) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7a1b      	ldrb	r3, [r3, #8]
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	429a      	cmp	r2, r3
 8001810:	d017      	beq.n	8001842 <_ZN11ICM20948_WE10switchBankEh+0x46>
		currentBank = newBank;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	721a      	strb	r2, [r3, #8]

		std::uint8_t pData[2] = { ICM20948_REG_BANK_SEL, currentBank << 4 };
 8001818:	2300      	movs	r3, #0
 800181a:	81bb      	strh	r3, [r7, #12]
 800181c:	237f      	movs	r3, #127	; 0x7f
 800181e:	733b      	strb	r3, [r7, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7a1b      	ldrb	r3, [r3, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	b2db      	uxtb	r3, r3
 8001828:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	b299      	uxth	r1, r3
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	230a      	movs	r3, #10
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	f004 f8b9 	bl	80059b4 <HAL_I2C_Master_Transmit>
	}
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>:

uint8_t ICM20948_WE::writeRegister8(uint8_t bank, uint8_t reg, uint8_t val) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af02      	add	r7, sp, #8
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	4608      	mov	r0, r1
 8001854:	4611      	mov	r1, r2
 8001856:	461a      	mov	r2, r3
 8001858:	4603      	mov	r3, r0
 800185a:	70fb      	strb	r3, [r7, #3]
 800185c:	460b      	mov	r3, r1
 800185e:	70bb      	strb	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
	switchBank(bank);
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffc7 	bl	80017fc <_ZN11ICM20948_WE10switchBankEh>
	std::uint8_t pData[2] = { reg, val };
 800186e:	78bb      	ldrb	r3, [r7, #2]
 8001870:	733b      	strb	r3, [r7, #12]
 8001872:	787b      	ldrb	r3, [r7, #1]
 8001874:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	b299      	uxth	r1, r3
 8001880:	f107 020c 	add.w	r2, r7, #12
 8001884:	230a      	movs	r3, #10
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	f004 f893 	bl	80059b4 <HAL_I2C_Master_Transmit>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZN11ICM20948_WE15writeRegister16Ehhs>:

uint8_t ICM20948_WE::writeRegister16(uint8_t bank, uint8_t reg, int16_t val) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	70fb      	strb	r3, [r7, #3]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70bb      	strb	r3, [r7, #2]
 80018ae:	4613      	mov	r3, r2
 80018b0:	803b      	strh	r3, [r7, #0]
	switchBank(bank);
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa0 	bl	80017fc <_ZN11ICM20948_WE10switchBankEh>
	int8_t MSByte = (int8_t) ((val >> 8) & 0xFF);
 80018bc:	883b      	ldrh	r3, [r7, #0]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	73fb      	strb	r3, [r7, #15]
	uint8_t LSByte = val & 0xFF;
 80018c4:	883b      	ldrh	r3, [r7, #0]
 80018c6:	73bb      	strb	r3, [r7, #14]
	std::uint8_t pData[3] = { reg, MSByte, LSByte };
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	723b      	strb	r3, [r7, #8]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	727b      	strb	r3, [r7, #9]
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 3, 10);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	b299      	uxth	r1, r3
 80018de:	f107 0208 	add.w	r2, r7, #8
 80018e2:	230a      	movs	r3, #10
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2303      	movs	r3, #3
 80018e8:	f004 f864 	bl	80059b4 <HAL_I2C_Master_Transmit>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZN11ICM20948_WE13readRegister8Ehh>:

uint8_t ICM20948_WE::readRegister8(uint8_t bank, uint8_t reg) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
 8001902:	4613      	mov	r3, r2
 8001904:	70bb      	strb	r3, [r7, #2]
	switchBank(bank);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff76 	bl	80017fc <_ZN11ICM20948_WE10switchBankEh>
	uint8_t regValue = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &reg, 2, 10);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	b299      	uxth	r1, r3
 800191e:	1cba      	adds	r2, r7, #2
 8001920:	230a      	movs	r3, #10
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2302      	movs	r3, #2
 8001926:	f004 f845 	bl	80059b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_wire, i2cAddress, &regValue, 1, 10);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	b299      	uxth	r1, r3
 8001934:	f107 020f 	add.w	r2, r7, #15
 8001938:	230a      	movs	r3, #10
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	f004 f92d 	bl	8005b9c <HAL_I2C_Master_Receive>
	return regValue;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN11ICM20948_WE11readAllDataEPh>:
	MSByte = reg16Val[1];
	MSByte = reg16Val[0];
	return (MSByte << 8) + LSByte;
}

void ICM20948_WE::readAllData(uint8_t *data) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	switchBank(0);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff4f 	bl	80017fc <_ZN11ICM20948_WE10switchBankEh>
	uint8_t x_acc_h = 0x2D;
 800195e:	232d      	movs	r3, #45	; 0x2d
 8001960:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &x_acc_h, 1, 10);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	b299      	uxth	r1, r3
 800196c:	f107 020f 	add.w	r2, r7, #15
 8001970:	230a      	movs	r3, #10
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	f004 f81d 	bl	80059b4 <HAL_I2C_Master_Transmit>
//    HAL_I2C_Master_Transmit(_wire, i2cAddress, ICM20948_ACCEL_OUT, 1, 10);
	HAL_I2C_Master_Receive(_wire, i2cAddress, data, 20, 10);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	b299      	uxth	r1, r3
 8001984:	230a      	movs	r3, #10
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2314      	movs	r3, #20
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	f004 f906 	bl	8005b9c <HAL_I2C_Master_Receive>
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZN11ICM20948_WE14reset_ICM20948Ev>:
	regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
	enableMagDataRead(AK09916_HXL, 0x08);
	return regValue;
}

uint8_t ICM20948_WE::reset_ICM20948() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	uint8_t ack = writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	2206      	movs	r2, #6
 80019a4:	2100      	movs	r1, #0
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff4f 	bl	800184a <_ZN11ICM20948_WE14writeRegister8Ehhh>
 80019ac:	4603      	mov	r3, r0
 80019ae:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);  // wait for registers to reset
 80019b0:	200a      	movs	r0, #10
 80019b2:	f002 fcbf 	bl	8004334 <HAL_Delay>
	return (ack == 0);
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f009 fa4e 	bl	800ae7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80019de:	4602      	mov	r2, r0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4904      	ldr	r1, [pc, #16]	; (80019f8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80019ea:	f000 fed4 	bl	8002796 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80019ee:	4603      	mov	r3, r0
					__idx, __base); }
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	0800fe00 	.word	0x0800fe00
 80019fc:	0800d8b9 	.word	0x0800d8b9

08001a00 <_Z20update_config_eepromh13eeprom_layout>:
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
enum class eeprom_layout {
	l1_kp = 0x1, l1_ki = 0x2, l1_kd = 0x3, l1_bias = 0x4, l1_x = 0x5
};
void update_config_eeprom(uint8_t param, eeprom_layout parameter_address) {
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
uint8_t txData[1]= {param};
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	733b      	strb	r3, [r7, #12]

}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_Z13set_dutycycleiPPc>:
		printf("%d\r\n",pData[i]);
	}

}

uint8_t set_dutycycle(int argc, char *argv[]) {
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	b08d      	sub	sp, #52	; 0x34
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	uint64_t pulse_width = std::stoi(argv[1]);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681e      	ldr	r6, [r3, #0]
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f009 f9cb 	bl	800adcc <_ZNSaIcEC1Ev>
 8001a36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4631      	mov	r1, r6
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 fa41 	bl	800aec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ffbc 	bl	80019cc <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001a54:	4603      	mov	r3, r0
 8001a56:	17da      	asrs	r2, r3, #31
 8001a58:	461c      	mov	r4, r3
 8001a5a:	4615      	mov	r5, r2
 8001a5c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 fa02 	bl	800ae6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f009 f9ad 	bl	800adce <_ZNSaIcED1Ev>
	if (pulse_width <= 1000) {
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a78:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001a7c:	428a      	cmp	r2, r1
 8001a7e:	f173 0300 	sbcs.w	r3, r3, #0
 8001a82:	d205      	bcs.n	8001a90 <_Z13set_dutycycleiPPc+0x74>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse_width);
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <_Z13set_dutycycleiPPc+0x80>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
		return EXIT_SUCCESS;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <_Z13set_dutycycleiPPc+0x76>
	} else {
		return EXIT_FAILURE;
 8001a90:	2301      	movs	r3, #1
	}
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3734      	adds	r7, #52	; 0x34
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002d4 	.word	0x200002d4

08001aa0 <_Z15set_pid1_paramsiPPc>:

uint8_t set_pid1_params(int argc, char *argv[]) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08f      	sub	sp, #60	; 0x3c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	char option = argv[1][0];
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3304      	adds	r3, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	double param = std::stoi(argv[2]);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3308      	adds	r3, #8
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f009 f983 	bl	800adcc <_ZNSaIcEC1Ev>
 8001ac6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4621      	mov	r1, r4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f009 f9f9 	bl	800aec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	220a      	movs	r2, #10
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff74 	bl	80019cc <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd4e 	bl	8000588 <__aeabi_i2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4618      	mov	r0, r3
 8001afa:	f009 f9b8 	bl	800ae6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f009 f963 	bl	800adce <_ZNSaIcED1Ev>

	//switch((*argv)[1][0])
	switch (option) {
 8001b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b0c:	3b62      	subs	r3, #98	; 0x62
 8001b0e:	2b16      	cmp	r3, #22
 8001b10:	f200 8082 	bhi.w	8001c18 <_Z15set_pid1_paramsiPPc+0x178>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <_Z15set_pid1_paramsiPPc+0x7c>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001bd9 	.word	0x08001bd9
 8001b20:	08001c19 	.word	0x08001c19
 8001b24:	08001bb9 	.word	0x08001bb9
 8001b28:	08001c19 	.word	0x08001c19
 8001b2c:	08001c19 	.word	0x08001c19
 8001b30:	08001c19 	.word	0x08001c19
 8001b34:	08001c19 	.word	0x08001c19
 8001b38:	08001b99 	.word	0x08001b99
 8001b3c:	08001c19 	.word	0x08001c19
 8001b40:	08001c19 	.word	0x08001c19
 8001b44:	08001c19 	.word	0x08001c19
 8001b48:	08001c19 	.word	0x08001c19
 8001b4c:	08001c19 	.word	0x08001c19
 8001b50:	08001c19 	.word	0x08001c19
 8001b54:	08001b79 	.word	0x08001b79
 8001b58:	08001c19 	.word	0x08001c19
 8001b5c:	08001c19 	.word	0x08001c19
 8001b60:	08001c19 	.word	0x08001c19
 8001b64:	08001c19 	.word	0x08001c19
 8001b68:	08001c19 	.word	0x08001c19
 8001b6c:	08001c19 	.word	0x08001c19
 8001b70:	08001c19 	.word	0x08001c19
 8001b74:	08001bf9 	.word	0x08001bf9
	case 'p':
		tilt_angle_controller.set_kp(param);
 8001b78:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b7c:	482e      	ldr	r0, [pc, #184]	; (8001c38 <_Z15set_pid1_paramsiPPc+0x198>)
 8001b7e:	f7ff fa9b 	bl	80010b8 <_ZN10controllib11generic_pid6set_kpEd>
		update_config_eeprom(param,eeprom_layout::l1_kp);
 8001b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b86:	f7ff f841 	bl	8000c0c <__aeabi_d2uiz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <_Z20update_config_eepromh13eeprom_layout>
		break;
 8001b96:	e049      	b.n	8001c2c <_Z15set_pid1_paramsiPPc+0x18c>
	case 'i':
		tilt_angle_controller.set_ki(param);
 8001b98:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b9c:	4826      	ldr	r0, [pc, #152]	; (8001c38 <_Z15set_pid1_paramsiPPc+0x198>)
 8001b9e:	f7ff fa9c 	bl	80010da <_ZN10controllib11generic_pid6set_kiEd>
		update_config_eeprom(param,eeprom_layout::l1_ki);
 8001ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba6:	f7ff f831 	bl	8000c0c <__aeabi_d2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff25 	bl	8001a00 <_Z20update_config_eepromh13eeprom_layout>
		break;
 8001bb6:	e039      	b.n	8001c2c <_Z15set_pid1_paramsiPPc+0x18c>
	case 'd':
		tilt_angle_controller.set_kd(param);
 8001bb8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001bbc:	481e      	ldr	r0, [pc, #120]	; (8001c38 <_Z15set_pid1_paramsiPPc+0x198>)
 8001bbe:	f7ff fa9d 	bl	80010fc <_ZN10controllib11generic_pid6set_kdEd>
		update_config_eeprom(param,eeprom_layout::l1_kd);
 8001bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bc6:	f7ff f821 	bl	8000c0c <__aeabi_d2uiz>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2103      	movs	r1, #3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff15 	bl	8001a00 <_Z20update_config_eepromh13eeprom_layout>
		break;
 8001bd6:	e029      	b.n	8001c2c <_Z15set_pid1_paramsiPPc+0x18c>
	case 'b':
		tilt_angle_controller.set_bias(param);
 8001bd8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001bdc:	4816      	ldr	r0, [pc, #88]	; (8001c38 <_Z15set_pid1_paramsiPPc+0x198>)
 8001bde:	f7ff fa9e 	bl	800111e <_ZN10controllib11generic_pid8set_biasEd>
		update_config_eeprom(param,eeprom_layout::l1_bias);
 8001be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001be6:	f7ff f811 	bl	8000c0c <__aeabi_d2uiz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff05 	bl	8001a00 <_Z20update_config_eepromh13eeprom_layout>

		break;
 8001bf6:	e019      	b.n	8001c2c <_Z15set_pid1_paramsiPPc+0x18c>
	case 'x':
		tilt_angle_controller.update_setpoint(param);
 8001bf8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <_Z15set_pid1_paramsiPPc+0x198>)
 8001bfe:	f7ff fa9f 	bl	8001140 <_ZN10controllib11generic_pid15update_setpointEd>
		update_config_eeprom(param,eeprom_layout::l1_x);
 8001c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c06:	f7ff f801 	bl	8000c0c <__aeabi_d2uiz>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2105      	movs	r1, #5
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fef5 	bl	8001a00 <_Z20update_config_eepromh13eeprom_layout>

		break;
 8001c16:	e009      	b.n	8001c2c <_Z15set_pid1_paramsiPPc+0x18c>
	default:
		printf("Invalid Argument 0x%x\r\n", argv[1][0]);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <_Z15set_pid1_paramsiPPc+0x19c>)
 8001c24:	f00a fdc4 	bl	800c7b0 <iprintf>
		return EXIT_FAILURE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <_Z15set_pid1_paramsiPPc+0x18e>
		break;
	}

	return EXIT_SUCCESS;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	373c      	adds	r7, #60	; 0x3c
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000440 	.word	0x20000440
 8001c3c:	0800fe28 	.word	0x0800fe28

08001c40 <_Z12tilt_requestiPPc>:

uint8_t tilt_request(int argc, char *argv[]) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
// IO Access needs to be done via direct Register Access! NO HAL!
//	for(int i=0;i<10;i++){
//	GPIOA->ODR^=1<<5;  // blink the led//	  HAL_Delay(500);
//	HAL_Delay(100);
//}
	int t = std::stoi(argv[2]);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	681c      	ldr	r4, [r3, #0]
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f009 f8b9 	bl	800adcc <_ZNSaIcEC1Ev>
 8001c5a:	f107 0220 	add.w	r2, r7, #32
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4621      	mov	r1, r4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 f92f 	bl	800aec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	220a      	movs	r2, #10
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff feaa 	bl	80019cc <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f009 f8f5 	bl	800ae6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c84:	f107 0320 	add.w	r3, r7, #32
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f009 f8a0 	bl	800adce <_ZNSaIcED1Ev>
	if (strcmp(argv[1], "down") == 0) {
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3304      	adds	r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	491f      	ldr	r1, [pc, #124]	; (8001d14 <_Z12tilt_requestiPPc+0xd4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fb12 	bl	80002c0 <strcmp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10b      	bne.n	8001cba <_Z12tilt_requestiPPc+0x7a>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot CC", sizeof(argv[1]), 10);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca8:	481b      	ldr	r0, [pc, #108]	; (8001d18 <_Z12tilt_requestiPPc+0xd8>)
 8001caa:	f003 fd9f 	bl	80057ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	481a      	ldr	r0, [pc, #104]	; (8001d1c <_Z12tilt_requestiPPc+0xdc>)
 8001cb4:	f003 fd9a 	bl	80057ec <HAL_GPIO_WritePin>
 8001cb8:	e017      	b.n	8001cea <_Z12tilt_requestiPPc+0xaa>
	} else if (strcmp(argv[1], "up") == 0) {
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4917      	ldr	r1, [pc, #92]	; (8001d20 <_Z12tilt_requestiPPc+0xe0>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fafc 	bl	80002c0 <strcmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <_Z12tilt_requestiPPc+0xa6>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot AC", sizeof(argv[1]), 10);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <_Z12tilt_requestiPPc+0xd8>)
 8001cd6:	f003 fd89 	bl	80057ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2104      	movs	r1, #4
 8001cde:	480f      	ldr	r0, [pc, #60]	; (8001d1c <_Z12tilt_requestiPPc+0xdc>)
 8001ce0:	f003 fd84 	bl	80057ec <HAL_GPIO_WritePin>
 8001ce4:	e001      	b.n	8001cea <_Z12tilt_requestiPPc+0xaa>
	} else {
		return EXIT_FAILURE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <_Z12tilt_requestiPPc+0xca>
	}

	// Wont work, bad hal stuff!
	//HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
	HAL_Delay(t);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fb21 	bl	8004334 <HAL_Delay>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf8:	4807      	ldr	r0, [pc, #28]	; (8001d18 <_Z12tilt_requestiPPc+0xd8>)
 8001cfa:	f003 fd77 	bl	80057ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2104      	movs	r1, #4
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <_Z12tilt_requestiPPc+0xdc>)
 8001d04:	f003 fd72 	bl	80057ec <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
	return EXIT_SUCCESS;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	372c      	adds	r7, #44	; 0x2c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	0800fe40 	.word	0x0800fe40
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	0800fe48 	.word	0x0800fe48

08001d24 <_ZL11BufferCmp8bPhS_t>:
  * @retval
  *   0: pBuffer1 identical to pBuffer2
  *   1: pBuffer1 differs from pBuffer2
  */
static uint32_t BufferCmp8b(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	80fa      	strh	r2, [r7, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00e      	beq.n	8001d64 <_ZL11BufferCmp8bPhS_t+0x40>
  {
    if(*pBuffer1 != *pBuffer2)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <_ZL11BufferCmp8bPhS_t+0x32>
    {
      return 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e007      	b.n	8001d66 <_ZL11BufferCmp8bPhS_t+0x42>
    }

    pBuffer1++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
  while(BufferLength--)
 8001d62:	e7e6      	b.n	8001d32 <_ZL11BufferCmp8bPhS_t+0xe>
  }
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b0b6      	sub	sp, #216	; 0xd8
 8001d78:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7a:	f002 fa6b 	bl	8004254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f99f 	bl	80020c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d82:	f000 fbdf 	bl	8002544 <_ZL12MX_GPIO_Initv>
  MX_I2C3_Init();
 8001d86:	f000 fa3d 	bl	8002204 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001d8a:	f000 fb7b 	bl	8002484 <_ZL19MX_USART2_UART_Initv>
  MX_TIM5_Init();
 8001d8e:	f000 fa87 	bl	80022a0 <_ZL12MX_TIM5_Initv>
  MX_USART1_UART_Init();
 8001d92:	f000 fb17 	bl	80023c4 <_ZL19MX_USART1_UART_Initv>
  MX_FDCAN1_Init();
 8001d96:	f000 f9e9 	bl	800216c <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	48b1      	ldr	r0, [pc, #708]	; (8002064 <main+0x2f0>)
 8001d9e:	f005 fcf9 	bl	8007794 <HAL_TIM_PWM_Start>
	CLI_INIT(&huart2);
 8001da2:	48b1      	ldr	r0, [pc, #708]	; (8002068 <main+0x2f4>)
 8001da4:	f001 f8d6 	bl	8002f54 <cli_init>
	CLI_ADD_CMD("tilt", "tilt [up] / [down] [ms-time=100]", tilt_request);
 8001da8:	4ab0      	ldr	r2, [pc, #704]	; (800206c <main+0x2f8>)
 8001daa:	49b1      	ldr	r1, [pc, #708]	; (8002070 <main+0x2fc>)
 8001dac:	48b1      	ldr	r0, [pc, #708]	; (8002074 <main+0x300>)
 8001dae:	f001 fe17 	bl	80039e0 <cli_add_command>
	CLI_ADD_CMD("set_pwm", "lambda[0...1000]", set_dutycycle);
 8001db2:	4ab1      	ldr	r2, [pc, #708]	; (8002078 <main+0x304>)
 8001db4:	49b1      	ldr	r1, [pc, #708]	; (800207c <main+0x308>)
 8001db6:	48b2      	ldr	r0, [pc, #712]	; (8002080 <main+0x30c>)
 8001db8:	f001 fe12 	bl	80039e0 <cli_add_command>
	CLI_ADD_CMD("l1_param", "inner PID-Controller params:[p,i,d,b,x]",
 8001dbc:	4ab1      	ldr	r2, [pc, #708]	; (8002084 <main+0x310>)
 8001dbe:	49b2      	ldr	r1, [pc, #712]	; (8002088 <main+0x314>)
 8001dc0:	48b2      	ldr	r0, [pc, #712]	; (800208c <main+0x318>)
 8001dc2:	f001 fe0d 	bl	80039e0 <cli_add_command>
			set_pid1_params);
	CLI_RUN();
 8001dc6:	f001 fc27 	bl	8003618 <cli_run>
	ICM20948_WE myIMU = ICM20948_WE(&hi2c3);
 8001dca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dce:	49b0      	ldr	r1, [pc, #704]	; (8002090 <main+0x31c>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa31 	bl	8001238 <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>

	if (!myIMU.init()) {
 8001dd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fa3e 	bl	800125c <_ZN11ICM20948_WE4initEv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <main+0x80>
		printf("ICM20948 does not respond\r\n");
 8001dec:	48a9      	ldr	r0, [pc, #676]	; (8002094 <main+0x320>)
 8001dee:	f00a fd7b 	bl	800c8e8 <puts>
 8001df2:	e002      	b.n	8001dfa <main+0x86>
	} else {
		printf("ICM20948 is connected\r\n");
 8001df4:	48a8      	ldr	r0, [pc, #672]	; (8002098 <main+0x324>)
 8001df6:	f00a fd77 	bl	800c8e8 <puts>
	}
	myIMU.enableAcc(true);
 8001dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa7e 	bl	8001302 <_ZN11ICM20948_WE9enableAccEb>

	myIMU.setAccRange(ICM20948_ACC_RANGE_2G);
 8001e06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff faa8 	bl	8001362 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
	myIMU.setAccSampleRateDivider(10);
 8001e12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e16:	210a      	movs	r1, #10
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fb2b 	bl	8001474 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>
	myIMU.setAccDLPF(ICM20948_DLPF_6);
 8001e1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e22:	2106      	movs	r1, #6
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fad6 	bl	80013d6 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
//  myIMU.setAccOffsets(-16330.0, 16450.0, -16600.0, 16180.0, -16640.0, 16560.0);
//  myIMU.autoOffsets();
	printf("Done!\r\n");
 8001e2a:	489c      	ldr	r0, [pc, #624]	; (800209c <main+0x328>)
 8001e2c:	f00a fd5c 	bl	800c8e8 <puts>

	// Check if configuration eeprom responnds...
	for (uint8_t addr = 0; addr < 255; addr++) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001e36:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d01b      	beq.n	8001e76 <main+0x102>
		if (HAL_I2C_IsDeviceReady(&hi2c3, addr, 3, 10) == HAL_OK) {
 8001e3e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e42:	b299      	uxth	r1, r3
 8001e44:	230a      	movs	r3, #10
 8001e46:	2203      	movs	r2, #3
 8001e48:	4891      	ldr	r0, [pc, #580]	; (8002090 <main+0x31c>)
 8001e4a:	f003 ff9d 	bl	8005d88 <HAL_I2C_IsDeviceReady>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <main+0xf6>
			printf("Found i2c device @ %04x\r\n", addr);
 8001e5e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e62:	4619      	mov	r1, r3
 8001e64:	488e      	ldr	r0, [pc, #568]	; (80020a0 <main+0x32c>)
 8001e66:	f00a fca3 	bl	800c7b0 <iprintf>
	for (uint8_t addr = 0; addr < 255; addr++) {
 8001e6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001e74:	e7df      	b.n	8001e36 <main+0xc2>
	}

    FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.FilterIndex = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e82:	2301      	movs	r3, #1
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
    sFilterConfig.FilterID1 = 0x321;
 8001e86:	f240 3321 	movw	r3, #801	; 0x321
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFilterConfig.FilterID2 = 0x7FF;
 8001e8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e90:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4619      	mov	r1, r3
 8001e98:	4882      	ldr	r0, [pc, #520]	; (80020a4 <main+0x330>)
 8001e9a:	f002 fde3 	bl	8004a64 <HAL_FDCAN_ConfigFilter>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <main+0x13e>
    {
      Error_Handler();
 8001eae:	f000 fc33 	bl	8002718 <Error_Handler>
    }

    /* Configure global filter:
       Filter all remote frames with STD and EXT ID
       Reject non matching frames with STD ID and EXT ID */
    if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2202      	movs	r2, #2
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4879      	ldr	r0, [pc, #484]	; (80020a4 <main+0x330>)
 8001ebe:	f002 fe2b 	bl	8004b18 <HAL_FDCAN_ConfigGlobalFilter>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <main+0x162>
    {
      Error_Handler();
 8001ed2:	f000 fc21 	bl	8002718 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4872      	ldr	r0, [pc, #456]	; (80020a4 <main+0x330>)
 8001edc:	f002 ff94 	bl	8004e08 <HAL_FDCAN_ActivateNotification>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <main+0x180>
    {
      Error_Handler();
 8001ef0:	f000 fc12 	bl	8002718 <Error_Handler>
    }

    /* Prepare Tx Header */
    TxHeader.Identifier =0x321;
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <main+0x334>)
 8001ef6:	f240 3221 	movw	r2, #801	; 0x321
 8001efa:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <main+0x334>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <main+0x334>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8001f08:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <main+0x334>)
 8001f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0e:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <main+0x334>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <main+0x334>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001f1c:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <main+0x334>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001f22:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <main+0x334>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <main+0x334>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    /* Start the FDCAN module on both FDCAN instances */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001f2e:	485d      	ldr	r0, [pc, #372]	; (80020a4 <main+0x330>)
 8001f30:	f002 fe23 	bl	8004b7a <HAL_FDCAN_Start>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <main+0x1d4>
    {
      Error_Handler();
 8001f44:	f000 fbe8 	bl	8002718 <Error_Handler>
//		HAL_I2C_Mem_Write(&hi2c3, 0xA2, 0, 0x010, txData, 8, 10);
//		HAL_I2C_Mem_Read(&hi2c3, 0xA2, 0, 0x010, pData, 8, 10);
//		HAL_Delay(1);
//	}
	// Alle sensoren testen:
	Init::sensor_checkup(myIMU);
 8001f48:	466d      	mov	r5, sp
 8001f4a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f68:	f002 f8b0 	bl	80040cc <_ZN4Init14sensor_checkupE11ICM20948_WE>
	Init::sensor_checkup(myIMU);
 8001f6c:	466d      	mov	r5, sp
 8001f6e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f8c:	f002 f89e 	bl	80040cc <_ZN4Init14sensor_checkupE11ICM20948_WE>
//	tilt_angle_controller.update_setpoint(0);
	double l1_check[5] = { -20, -10, 5, 10, 20 };
 8001f90:	4b46      	ldr	r3, [pc, #280]	; (80020ac <main+0x338>)
 8001f92:	463c      	mov	r4, r7
 8001f94:	461d      	mov	r5, r3
 8001f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa2:	e884 0003 	stmia.w	r4, {r0, r1}
	int i = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8001fac:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <main+0x33c>)
 8001fae:	493e      	ldr	r1, [pc, #248]	; (80020a8 <main+0x334>)
 8001fb0:	483c      	ldr	r0, [pc, #240]	; (80020a4 <main+0x330>)
 8001fb2:	f002 fe0a 	bl	8004bca <HAL_FDCAN_AddMessageToTxFifoQ>
		CLI_RUN();
 8001fb6:	f001 fb2f 	bl	8003618 <cli_run>
						__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, dutycycle);
						HAL_Delay(10);
			}
		}
	#endif
		double y = tilt_angle_controller.calculate_output(
 8001fba:	466d      	mov	r5, sp
 8001fbc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fda:	f002 f811 	bl	8004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8001fde:	eeb0 7a40 	vmov.f32	s14, s0
 8001fe2:	eef0 7a60 	vmov.f32	s15, s1
 8001fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fea:	eef0 0a67 	vmov.f32	s1, s15
 8001fee:	4831      	ldr	r0, [pc, #196]	; (80020b4 <main+0x340>)
 8001ff0:	f7ff f8b7 	bl	8001162 <_ZN10controllib11generic_pid16calculate_outputEd>
 8001ff4:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
				Init::read_tilt_angle(myIMU));
		// Change Direction according to y's sign:
		if (y < 0) { // Raise the beam!
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002004:	f7fe fd9c 	bl	8000b40 <__aeabi_dcmplt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <main+0x2b2>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	4828      	ldr	r0, [pc, #160]	; (80020b8 <main+0x344>)
 8002016:	f003 fbe9 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	2104      	movs	r1, #4
 800201e:	4827      	ldr	r0, [pc, #156]	; (80020bc <main+0x348>)
 8002020:	f003 fbe4 	bl	80057ec <HAL_GPIO_WritePin>
 8002024:	e00a      	b.n	800203c <main+0x2c8>
		} else // Lower the beam!
		{
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800202c:	4822      	ldr	r0, [pc, #136]	; (80020b8 <main+0x344>)
 800202e:	f003 fbdd 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2104      	movs	r1, #4
 8002036:	4821      	ldr	r0, [pc, #132]	; (80020bc <main+0x348>)
 8002038:	f003 fbd8 	bl	80057ec <HAL_GPIO_WritePin>
		}
		// Change the dutycycle according to y's absolute value
		int dutycycle = abs(y);
 800203c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002040:	f7fe fdbc 	bl	8000bbc <__aeabi_d2iz>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bfb8      	it	lt
 800204a:	425b      	neglt	r3, r3
 800204c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, dutycycle);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <main+0x2f0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(100);
 800205a:	2064      	movs	r0, #100	; 0x64
 800205c:	f002 f96a 	bl	8004334 <HAL_Delay>
		//		  HAL_Delay(10);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002060:	e7a4      	b.n	8001fac <main+0x238>
 8002062:	bf00      	nop
 8002064:	200002d4 	.word	0x200002d4
 8002068:	200003b0 	.word	0x200003b0
 800206c:	08001c41 	.word	0x08001c41
 8002070:	0800fe4c 	.word	0x0800fe4c
 8002074:	0800fe70 	.word	0x0800fe70
 8002078:	08001a1d 	.word	0x08001a1d
 800207c:	0800fe78 	.word	0x0800fe78
 8002080:	0800fe8c 	.word	0x0800fe8c
 8002084:	08001aa1 	.word	0x08001aa1
 8002088:	0800fe94 	.word	0x0800fe94
 800208c:	0800febc 	.word	0x0800febc
 8002090:	20000288 	.word	0x20000288
 8002094:	0800fec8 	.word	0x0800fec8
 8002098:	0800fee4 	.word	0x0800fee4
 800209c:	0800fefc 	.word	0x0800fefc
 80020a0:	0800ff04 	.word	0x0800ff04
 80020a4:	20000224 	.word	0x20000224
 80020a8:	20000478 	.word	0x20000478
 80020ac:	0800ff20 	.word	0x0800ff20
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000440 	.word	0x20000440
 80020b8:	48000800 	.word	0x48000800
 80020bc:	48000c00 	.word	0x48000c00

080020c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b094      	sub	sp, #80	; 0x50
 80020c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	2238      	movs	r2, #56	; 0x38
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f009 fab2 	bl	800b638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f004 fa68 	bl	80065b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f2:	2340      	movs	r3, #64	; 0x40
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f6:	2302      	movs	r3, #2
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020fa:	2302      	movs	r3, #2
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80020fe:	2301      	movs	r3, #1
 8002100:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002102:	2314      	movs	r3, #20
 8002104:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002106:	2302      	movs	r3, #2
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800210a:	2304      	movs	r3, #4
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800210e:	2302      	movs	r3, #2
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fb02 	bl	8006720 <HAL_RCC_OscConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800212c:	f000 faf4 	bl	8002718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002130:	230f      	movs	r3, #15
 8002132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002134:	2303      	movs	r3, #3
 8002136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2104      	movs	r1, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fe01 	bl	8006d50 <HAL_RCC_ClockConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800215e:	f000 fadb 	bl	8002718 <Error_Handler>
  }
}
 8002162:	bf00      	nop
 8002164:	3750      	adds	r7, #80	; 0x50
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 800219c:	2201      	movs	r2, #1
 800219e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021a8:	223f      	movs	r2, #63	; 0x3f
 80021aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021ae:	2210      	movs	r2, #16
 80021b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021c0:	2205      	movs	r2, #5
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021c6:	2204      	movs	r2, #4
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80021dc:	4807      	ldr	r0, [pc, #28]	; (80021fc <_ZL14MX_FDCAN1_Initv+0x90>)
 80021de:	f002 fae7 	bl	80047b0 <HAL_FDCAN_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80021f2:	f000 fa91 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000224 	.word	0x20000224
 8002200:	40006400 	.word	0x40006400

08002204 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <_ZL12MX_I2C3_Initv+0x94>)
 800220c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <_ZL12MX_I2C3_Initv+0x98>)
 8002212:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 800221c:	2201      	movs	r2, #1
 800221e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002240:	f003 fb29 	bl	8005896 <HAL_I2C_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8002254:	f000 fa60 	bl	8002718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002258:	2100      	movs	r1, #0
 800225a:	480e      	ldr	r0, [pc, #56]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 800225c:	f004 f914 	bl	8006488 <HAL_I2CEx_ConfigAnalogFilter>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002270:	f000 fa52 	bl	8002718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <_ZL12MX_I2C3_Initv+0x90>)
 8002278:	f004 f951 	bl	800651e <HAL_I2CEx_ConfigDigitalFilter>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 800228c:	f000 fa44 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000288 	.word	0x20000288
 8002298:	40007800 	.word	0x40007800
 800229c:	30909dec 	.word	0x30909dec

080022a0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	615a      	str	r2, [r3, #20]
 80022d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022d4:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <_ZL12MX_TIM5_Initv+0x120>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022da:	2201      	movs	r2, #1
 80022dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022f8:	4830      	ldr	r0, [pc, #192]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80022fa:	f005 f993 	bl	8007624 <HAL_TIM_Base_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800230e:	f000 fa03 	bl	8002718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231c:	4619      	mov	r1, r3
 800231e:	4827      	ldr	r0, [pc, #156]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 8002320:	f005 fc5e 	bl	8007be0 <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8002334:	f000 f9f0 	bl	8002718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002338:	4820      	ldr	r0, [pc, #128]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 800233a:	f005 f9ca 	bl	80076d2 <HAL_TIM_PWM_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800234e:	f000 f9e3 	bl	8002718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4816      	ldr	r0, [pc, #88]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 8002362:	f006 f9e7 	bl	8008734 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002376:	f000 f9cf 	bl	8002718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237a:	2360      	movs	r3, #96	; 0x60
 800237c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800237e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002382:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	2204      	movs	r2, #4
 8002390:	4619      	mov	r1, r3
 8002392:	480a      	ldr	r0, [pc, #40]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 8002394:	f005 fb10 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZL12MX_TIM5_Initv+0x10c>
  {
    Error_Handler();
 80023a8:	f000 f9b6 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <_ZL12MX_TIM5_Initv+0x11c>)
 80023ae:	f000 fb77 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	; 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002d4 	.word	0x200002d4
 80023c0:	40000c00 	.word	0x40000c00

080023c4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240c:	481b      	ldr	r0, [pc, #108]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800240e:	f006 fa27 	bl	8008860 <HAL_UART_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8002422:	f000 f979 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4814      	ldr	r0, [pc, #80]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800242a:	f008 fc04 	bl	800ac36 <HAL_UARTEx_SetTxFifoThreshold>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800243e:	f000 f96b 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002442:	2100      	movs	r1, #0
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002446:	f008 fc34 	bl	800acb2 <HAL_UARTEx_SetRxFifoThreshold>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800245a:	f000 f95d 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002460:	f008 fbb0 	bl	800abc4 <HAL_UARTEx_DisableFifoMode>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002474:	f000 f950 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000320 	.word	0x20000320
 8002480:	40013800 	.word	0x40013800

08002484 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800248c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024aa:	220c      	movs	r2, #12
 80024ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024cc:	481b      	ldr	r0, [pc, #108]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024ce:	f006 f9c7 	bl	8008860 <HAL_UART_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80024e2:	f000 f919 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e6:	2100      	movs	r1, #0
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80024ea:	f008 fba4 	bl	800ac36 <HAL_UARTEx_SetTxFifoThreshold>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80024fe:	f000 f90b 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002502:	2100      	movs	r1, #0
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002506:	f008 fbd4 	bl	800acb2 <HAL_UARTEx_SetRxFifoThreshold>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800251a:	f000 f8fd 	bl	8002718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002520:	f008 fb50 	bl	800abc4 <HAL_UARTEx_DisableFifoMode>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002534:	f000 f8f0 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200003b0 	.word	0x200003b0
 8002540:	40004400 	.word	0x40004400

08002544 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4a48      	ldr	r2, [pc, #288]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a42      	ldr	r2, [pc, #264]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b40      	ldr	r3, [pc, #256]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a36      	ldr	r2, [pc, #216]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a30      	ldr	r2, [pc, #192]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <_ZL12MX_GPIO_Initv+0x13c>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2120      	movs	r1, #32
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f003 f907 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025e4:	4827      	ldr	r0, [pc, #156]	; (8002684 <_ZL12MX_GPIO_Initv+0x140>)
 80025e6:	f003 f901 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2104      	movs	r1, #4
 80025ee:	4826      	ldr	r0, [pc, #152]	; (8002688 <_ZL12MX_GPIO_Initv+0x144>)
 80025f0:	f003 f8fc 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	481e      	ldr	r0, [pc, #120]	; (8002684 <_ZL12MX_GPIO_Initv+0x140>)
 800260c:	f002 ff6c 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002610:	2320      	movs	r3, #32
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262a:	f002 ff5d 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4619      	mov	r1, r3
 8002646:	480f      	ldr	r0, [pc, #60]	; (8002684 <_ZL12MX_GPIO_Initv+0x140>)
 8002648:	f002 ff4e 	bl	80054e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800264c:	2304      	movs	r3, #4
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	2301      	movs	r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4619      	mov	r1, r3
 8002662:	4809      	ldr	r0, [pc, #36]	; (8002688 <_ZL12MX_GPIO_Initv+0x144>)
 8002664:	f002 ff40 	bl	80054e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	2028      	movs	r0, #40	; 0x28
 800266e:	f001 ff98 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002672:	2028      	movs	r0, #40	; 0x28
 8002674:	f001 ffaf 	bl	80045d6 <HAL_NVIC_EnableIRQ>

}
 8002678:	bf00      	nop
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	48000800 	.word	0x48000800
 8002688:	48000c00 	.word	0x48000c00

0800268c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02c      	beq.n	80026fa <HAL_FDCAN_RxFifo0Callback+0x6e>
  {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80026a0:	2120      	movs	r1, #32
 80026a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a6:	f003 f8b9 	bl	800581c <HAL_GPIO_TogglePin>

    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f002 facf 	bl	8004c54 <HAL_FDCAN_GetRxMessage>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
    {
      //Error_Handler();
    }
    for(int i=0;i<16;i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	dc0b      	bgt.n	80026dc <HAL_FDCAN_RxFifo0Callback+0x50>
    {
    	printf("%04x ",RxData[i]);
 80026c4:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	480f      	ldr	r0, [pc, #60]	; (800270c <HAL_FDCAN_RxFifo0Callback+0x80>)
 80026d0:	f00a f86e 	bl	800c7b0 <iprintf>
    for(int i=0;i<16;i++)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e7f0      	b.n	80026be <HAL_FDCAN_RxFifo0Callback+0x32>
    }
    printf("\r\n");
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <HAL_FDCAN_RxFifo0Callback+0x84>)
 80026de:	f00a f903 	bl	800c8e8 <puts>
    /* Compare payload to expected data */
    if (BufferCmp8b(TxData, RxData, 16) != 0)
 80026e2:	2210      	movs	r2, #16
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80026e6:	480b      	ldr	r0, [pc, #44]	; (8002714 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80026e8:	f7ff fb1c 	bl	8001d24 <_ZL11BufferCmp8bPhS_t>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
        /* Turn LED4 on */
     //   BSP_LED_On(LED4);
      }
    }
  }
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200004c4 	.word	0x200004c4
 8002708:	2000049c 	.word	0x2000049c
 800270c:	0800ff48 	.word	0x0800ff48
 8002710:	0800ff50 	.word	0x0800ff50
 8002714:	20000000 	.word	0x20000000

08002718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800271c:	b672      	cpsid	i
}
 800271e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002720:	e7fe      	b.n	8002720 <Error_Handler+0x8>

08002722 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	f008 fd33 	bl	800b194 <__errno>
 800272e:	4603      	mov	r3, r0
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f008 fd2d 	bl	800b194 <__errno>
 800273a:	4603      	mov	r3, r0
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	f008 fd1f 	bl	800b194 <__errno>
 8002756:	4603      	mov	r3, r0
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002768:	f008 fd14 	bl	800b194 <__errno>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002788:	2300      	movs	r3, #0
	  }
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002796:	b590      	push	{r4, r7, lr}
 8002798:	b08b      	sub	sp, #44	; 0x2c
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ffba 	bl	8002722 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80027ae:	f107 0118 	add.w	r1, r7, #24
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d102      	bne.n	80027ca <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 80027c4:	68b8      	ldr	r0, [r7, #8]
 80027c6:	f008 fb09 	bl	800addc <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80027ca:	f008 fce3 	bl	800b194 <__errno>
 80027ce:	4603      	mov	r3, r0
 80027d0:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80027d2:	2b22      	cmp	r3, #34	; 0x22
 80027d4:	d006      	beq.n	80027e4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80027d6:	4621      	mov	r1, r4
 80027d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027da:	f7ff ffd0 	bl	800277e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80027e8:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80027ee:	68b8      	ldr	r0, [r7, #8]
 80027f0:	f008 fafa 	bl	800ade8 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	623b      	str	r3, [r7, #32]

      if (__idx)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	461a      	mov	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]

      return __ret;
 800280a:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff9a 	bl	800274a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002816:	4623      	mov	r3, r4
    }
 8002818:	4618      	mov	r0, r3
 800281a:	372c      	adds	r7, #44	; 0x2c
 800281c:	46bd      	mov	sp, r7
 800281e:	bd90      	pop	{r4, r7, pc}

08002820 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d111      	bne.n	8002854 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002836:	4293      	cmp	r3, r2
 8002838:	d10c      	bne.n	8002854 <_Z41__static_initialization_and_destruction_0ii+0x34>
controllib::generic_pid tilt_angle_controller(20, 0, 0, 0, 10); // Kp = 1 ,Ts= 10ms
 800283a:	ed9f 4b09 	vldr	d4, [pc, #36]	; 8002860 <_Z41__static_initialization_and_destruction_0ii+0x40>
 800283e:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 8002868 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002842:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8002868 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002846:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8002868 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800284a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002870 <_Z41__static_initialization_and_destruction_0ii+0x50>
 800284e:	480a      	ldr	r0, [pc, #40]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002850:	f7fe fc04 	bl	800105c <_ZN10controllib11generic_pidC1Eddddd>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	f3af 8000 	nop.w
 8002860:	00000000 	.word	0x00000000
 8002864:	40240000 	.word	0x40240000
	...
 8002874:	40340000 	.word	0x40340000
 8002878:	20000440 	.word	0x20000440

0800287c <_GLOBAL__sub_I_hfdcan1>:
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
 8002880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002884:	2001      	movs	r0, #1
 8002886:	f7ff ffcb 	bl	8002820 <_Z41__static_initialization_and_destruction_0ii>
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_MspInit+0x44>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_MspInit+0x44>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6613      	str	r3, [r2, #96]	; 0x60
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_MspInit+0x44>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_MspInit+0x44>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_MspInit+0x44>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_MspInit+0x44>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028c2:	f003 ff1d 	bl	8006700 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	; 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	2254      	movs	r2, #84	; 0x54
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f008 fe9f 	bl	800b638 <memset>
  if(hfdcan->Instance==FDCAN1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <HAL_FDCAN_MspInit+0xcc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d148      	bne.n	8002996 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002908:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800290a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fc37 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002920:	f7ff fefa 	bl	8002718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_FDCAN_MspInit+0xd0>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002954:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002958:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002966:	2309      	movs	r3, #9
 8002968:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800296e:	4619      	mov	r1, r3
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <HAL_FDCAN_MspInit+0xd4>)
 8002972:	f002 fdb9 	bl	80054e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2015      	movs	r0, #21
 800297c:	f001 fe11 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002980:	2015      	movs	r0, #21
 8002982:	f001 fe28 	bl	80045d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2016      	movs	r0, #22
 800298c:	f001 fe09 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002990:	2016      	movs	r0, #22
 8002992:	f001 fe20 	bl	80045d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3778      	adds	r7, #120	; 0x78
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40006400 	.word	0x40006400
 80029a4:	40021000 	.word	0x40021000
 80029a8:	48000400 	.word	0x48000400

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09e      	sub	sp, #120	; 0x78
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2254      	movs	r2, #84	; 0x54
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f008 fe33 	bl	800b638 <memset>
  if(hi2c->Instance==I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_I2C_MspInit+0xa8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d137      	bne.n	8002a4c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fbcc 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029f6:	f7ff fe8f 	bl	8002718 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a18:	2312      	movs	r3, #18
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002a24:	2308      	movs	r3, #8
 8002a26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480b      	ldr	r0, [pc, #44]	; (8002a5c <HAL_I2C_MspInit+0xb0>)
 8002a30:	f002 fd5a 	bl	80054e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 8002a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_I2C_MspInit+0xac>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	3778      	adds	r7, #120	; 0x78
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40007800 	.word	0x40007800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000800 	.word	0x48000800

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x38>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10b      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <HAL_TIM_MspPostInit+0x64>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11c      	bne.n	8002afc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_TIM_MspPostInit+0x68>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_TIM_MspPostInit+0x68>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_TIM_MspPostInit+0x68>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	4619      	mov	r1, r3
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_TIM_MspPostInit+0x6c>)
 8002af8:	f002 fcf6 	bl	80054e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002afc:	bf00      	nop
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	48000800 	.word	0x48000800

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0a0      	sub	sp, #128	; 0x80
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	2254      	movs	r2, #84	; 0x54
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f008 fd81 	bl	800b638 <memset>
  if(huart->Instance==USART1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_UART_MspInit+0x130>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d136      	bne.n	8002bae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b48:	f107 0318 	add.w	r3, r7, #24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fb1b 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b58:	f7ff fdde 	bl	8002718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b66:	6613      	str	r3, [r2, #96]	; 0x60
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b8c:	2330      	movs	r3, #48	; 0x30
 8002b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4828      	ldr	r0, [pc, #160]	; (8002c48 <HAL_UART_MspInit+0x138>)
 8002ba8:	f002 fc9e 	bl	80054e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bac:	e043      	b.n	8002c36 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <HAL_UART_MspInit+0x13c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d13e      	bne.n	8002c36 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc0:	f107 0318 	add.w	r3, r7, #24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fadf 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002bd0:	f7ff fda2 	bl	8002718 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_UART_MspInit+0x134>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c04:	230c      	movs	r3, #12
 8002c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c14:	2307      	movs	r3, #7
 8002c16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c22:	f002 fc61 	bl	80054e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2026      	movs	r0, #38	; 0x26
 8002c2c:	f001 fcb9 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c30:	2026      	movs	r0, #38	; 0x26
 8002c32:	f001 fcd0 	bl	80045d6 <HAL_NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3780      	adds	r7, #128	; 0x80
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	40004400 	.word	0x40004400

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <NMI_Handler+0x4>

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <MemManage_Handler+0x4>

08002c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9c:	f001 fb2c 	bl	80042f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8002caa:	f002 f993 	bl	8004fd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000224 	.word	0x20000224

08002cb8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <FDCAN1_IT1_IRQHandler+0x10>)
 8002cbe:	f002 f989 	bl	8004fd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000224 	.word	0x20000224

08002ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <USART2_IRQHandler+0x10>)
 8002cd2:	f005 ffa9 	bl	8008c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200003b0 	.word	0x200003b0

08002ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ce8:	f002 fdb2 	bl	8005850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_write>:
 * 	These functions need to be redefined over the [_weak] versions defined by
 * 	GCC (or in syscalls.c by cubeMX) to make the stdio library functional.
 *
 ******************************************************************************/

int _write(int file, char *data, int len){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	if(file != STDOUT_FILENO && file != STDERR_FILENO){
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d00a      	beq.n	8002d18 <_write+0x28>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d007      	beq.n	8002d18 <_write+0x28>
		errno = EBADF;
 8002d08:	f008 fa44 	bl	800b194 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2209      	movs	r2, #9
 8002d10:	601a      	str	r2, [r3, #0]
		return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d16:	e041      	b.n	8002d9c <_write+0xac>
	}

	if(cli_password_ok == false){
 8002d18:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <_write+0xb4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	f083 0301 	eor.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <_write+0x3a>
		return len;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e038      	b.n	8002d9c <_write+0xac>
	}

	HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

	if (!(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) ) {
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <_write+0xb8>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <_write+0x7e>
		cli_tx_isr_flag = true;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <_write+0xbc>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
		/* Disable interrupts to prevent UART from throwing an RX interrupt while the peripheral is locked as
		 * this would prevent the RX interrupt from restarting HAL_UART_Receive_IT  */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d40:	2025      	movs	r0, #37	; 0x25
 8002d42:	f001 fc56 	bl	80045f2 <HAL_NVIC_DisableIRQ>

		/* Transmits with interrupts. This must be done this way so that we can re-activate USART interrupts
		 * before the transfer terminates so that we can continue reading from the terminal*/
		status = HAL_UART_Transmit_IT(huart_shell, (uint8_t *)data, len);
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <_write+0xc0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 fe6b 	bl	8008a2c <HAL_UART_Transmit_IT>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]

		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d5a:	2025      	movs	r0, #37	; 0x25
 8002d5c:	f001 fc3b 	bl	80045d6 <HAL_NVIC_EnableIRQ>

		/* Wait for the transfer to terminate*/
		while(cli_tx_isr_flag == true){
 8002d60:	bf00      	nop
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <_write+0xbc>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1fa      	bne.n	8002d62 <_write+0x72>
 8002d6c:	e010      	b.n	8002d90 <_write+0xa0>
			/* flag will be set to false in HAL_UART_TxCpltCallback*/
		}
	}else{
		/* We are called from an interrupt, using Transmit_IT would not work */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d6e:	2025      	movs	r0, #37	; 0x25
 8002d70:	f001 fc3f 	bl	80045f2 <HAL_NVIC_DisableIRQ>
		status = HAL_UART_Transmit(huart_shell, (uint8_t *)data, len, 1000);
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <_write+0xc0>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	f005 fdbd 	bl	8008900 <HAL_UART_Transmit>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d8a:	2025      	movs	r0, #37	; 0x25
 8002d8c:	f001 fc23 	bl	80045d6 <HAL_NVIC_EnableIRQ>
	}



	if(status == HAL_OK){
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <_write+0xaa>
		return len;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	e000      	b.n	8002d9c <_write+0xac>
	}else{
		return 0;
 8002d9a:	2300      	movs	r3, #0
	}
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200009a7 	.word	0x200009a7
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	200009a8 	.word	0x200009a8
 8002db0:	20000500 	.word	0x20000500

08002db4 <cli_history_add>:
  * @brief          add a command to the history
  * @param  buff:   command
  * @retval         null
  */
static void cli_history_add(char* buff)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    uint16_t len;
    uint8_t index = history.latest;
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <cli_history_add+0xe4>)
 8002dbe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002dc2:	73fb      	strb	r3, [r7, #15]

    if (NULL == buff) return;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d060      	beq.n	8002e8c <cli_history_add+0xd8>

    len = strlen((const char *)buff);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fa82 	bl	80002d4 <strlen>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	81bb      	strh	r3, [r7, #12]
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 8002dd4:	89bb      	ldrh	r3, [r7, #12]
 8002dd6:	2b4f      	cmp	r3, #79	; 0x4f
 8002dd8:	d85a      	bhi.n	8002e90 <cli_history_add+0xdc>

    /* find the latest one */
    if (0 != index) {
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <cli_history_add+0x34>
        index--;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e001      	b.n	8002dec <cli_history_add+0x38>
    } else {
        index = HISTORY_MAX - 1;
 8002de8:	2309      	movs	r3, #9
 8002dea:	73fb      	strb	r3, [r7, #15]
    }

    if (0 != memcmp(history.cmd[index], buff, len)) {
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <cli_history_add+0xe4>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	89ba      	ldrh	r2, [r7, #12]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f008 fbe2 	bl	800b5c8 <memcmp>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03b      	beq.n	8002e82 <cli_history_add+0xce>
        /* if the new one is different with the latest one, the save */
        memset((void *)history.cmd[history.latest], 0x00, MAX_LINE_LEN);
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <cli_history_add+0xe4>)
 8002e0c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002e10:	461a      	mov	r2, r3
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <cli_history_add+0xe4>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	2250      	movs	r2, #80	; 0x50
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f008 fc08 	bl	800b638 <memset>
        memcpy((void *)history.cmd[history.latest], (const void *)buff, len);
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <cli_history_add+0xe4>)
 8002e2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <cli_history_add+0xe4>)
 8002e3a:	4413      	add	r3, r2
 8002e3c:	89ba      	ldrh	r2, [r7, #12]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 fbd1 	bl	800b5e8 <memcpy>
        if (history.count < HISTORY_MAX) {
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <cli_history_add+0xe4>)
 8002e48:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d807      	bhi.n	8002e60 <cli_history_add+0xac>
            history.count++;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <cli_history_add+0xe4>)
 8002e52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002e56:	3301      	adds	r3, #1
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <cli_history_add+0xe4>)
 8002e5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
        }

        history.latest++;
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <cli_history_add+0xe4>)
 8002e62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002e66:	3301      	adds	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <cli_history_add+0xe4>)
 8002e6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        if (history.latest >= HISTORY_MAX) {
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <cli_history_add+0xe4>)
 8002e72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d903      	bls.n	8002e82 <cli_history_add+0xce>
            history.latest = 0;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <cli_history_add+0xe4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        }
    }

    history.show = 0;
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <cli_history_add+0xe4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002e8a:	e002      	b.n	8002e92 <cli_history_add+0xde>
    if (NULL == buff) return;
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <cli_history_add+0xde>
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 8002e90:	bf00      	nop
}
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000684 	.word	0x20000684

08002e9c <cli_history_show>:
  * @param  mode:       TRUE for look up, FALSE for look down
  * @param  p_history:  target history command
  * @retval             TRUE for no history found, FALSE for success
  */
static uint8_t cli_history_show(uint8_t mode, char** p_history)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
    uint8_t err = true;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	737b      	strb	r3, [r7, #13]
    uint8_t num;
    uint8_t index;

    if (0 == history.count) return err;
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <cli_history_show+0xb4>)
 8002eae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <cli_history_show+0x1e>
 8002eb6:	7b7b      	ldrb	r3, [r7, #13]
 8002eb8:	e044      	b.n	8002f44 <cli_history_show+0xa8>

    if (true == mode) {
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d110      	bne.n	8002ee2 <cli_history_show+0x46>
        /* look up */
        if (history.show < history.count) {
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <cli_history_show+0xb4>)
 8002ec2:	f893 2322 	ldrb.w	r2, [r3, #802]	; 0x322
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <cli_history_show+0xb4>)
 8002ec8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d215      	bcs.n	8002efc <cli_history_show+0x60>
            history.show++;
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <cli_history_show+0xb4>)
 8002ed2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <cli_history_show+0xb4>)
 8002edc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002ee0:	e00c      	b.n	8002efc <cli_history_show+0x60>
        }
    } else {
        /* look down */
        if (1 < history.show) {
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <cli_history_show+0xb4>)
 8002ee4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d907      	bls.n	8002efc <cli_history_show+0x60>
            history.show--;
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <cli_history_show+0xb4>)
 8002eee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <cli_history_show+0xb4>)
 8002ef8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
        }
    }

    num = history.show;
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <cli_history_show+0xb4>)
 8002efe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002f02:	73fb      	strb	r3, [r7, #15]
    index = history.latest;
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <cli_history_show+0xb4>)
 8002f06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002f0a:	73bb      	strb	r3, [r7, #14]
    while (num) {
 8002f0c:	e00b      	b.n	8002f26 <cli_history_show+0x8a>
        if (0 != index) {
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <cli_history_show+0x80>
            index--;
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	73bb      	strb	r3, [r7, #14]
 8002f1a:	e001      	b.n	8002f20 <cli_history_show+0x84>
        } else {
            index = HISTORY_MAX - 1;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	73bb      	strb	r3, [r7, #14]
        }
        num--;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
    while (num) {
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <cli_history_show+0x72>
    }

    err = false;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	737b      	strb	r3, [r7, #13]
    *p_history = history.cmd[index];
 8002f30:	7bba      	ldrb	r2, [r7, #14]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <cli_history_show+0xb4>)
 8002f3c:	441a      	add	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	601a      	str	r2, [r3, #0]

    return err;
 8002f42:	7b7b      	ldrb	r3, [r7, #13]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	20000684 	.word	0x20000684

08002f54 <cli_init>:

void cli_init(UART_HandleTypeDef *handle_uart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	huart_shell = handle_uart;
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <cli_init+0xc4>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
	shell_queue_init(&cli_rx_buff);
 8002f62:	482e      	ldr	r0, [pc, #184]	; (800301c <cli_init+0xc8>)
 8002f64:	f000 fee6 	bl	8003d34 <shell_queue_init>
    memset((uint8_t *)&history, 0, sizeof(history));
 8002f68:	f240 3223 	movw	r2, #803	; 0x323
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	482c      	ldr	r0, [pc, #176]	; (8003020 <cli_init+0xcc>)
 8002f70:	f008 fb62 	bl	800b638 <memset>

    HAL_UART_MspInit(huart_shell);
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <cli_init+0xc4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fdc9 	bl	8002b10 <HAL_UART_MspInit>
    HAL_UART_Receive_IT(huart_shell, &cBuffer, 1);
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <cli_init+0xc4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4927      	ldr	r1, [pc, #156]	; (8003024 <cli_init+0xd0>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fdf8 	bl	8008b7c <HAL_UART_Receive_IT>

    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e015      	b.n	8002fbe <cli_init+0x6a>
    	CLI_commands[j].pCmd = "";
 8002f92:	4925      	ldr	r1, [pc, #148]	; (8003028 <cli_init+0xd4>)
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <cli_init+0xd8>)
 8002fa2:	601a      	str	r2, [r3, #0]
    	CLI_commands[j].pFun = NULL;
 8002fa4:	4920      	ldr	r1, [pc, #128]	; (8003028 <cli_init+0xd4>)
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b1f      	cmp	r3, #31
 8002fc2:	d9e6      	bls.n	8002f92 <cli_init+0x3e>
    }

#ifndef CLI_PASSWORD
    cli_password_ok = true;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <cli_init+0xdc>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
    greet();
 8002fca:	f000 fb31 	bl	8003630 <greet>
#endif

    CLI_ADD_CMD("help", cli_help_help, cli_help);
 8002fce:	4a19      	ldr	r2, [pc, #100]	; (8003034 <cli_init+0xe0>)
 8002fd0:	4919      	ldr	r1, [pc, #100]	; (8003038 <cli_init+0xe4>)
 8002fd2:	481a      	ldr	r0, [pc, #104]	; (800303c <cli_init+0xe8>)
 8002fd4:	f000 fd04 	bl	80039e0 <cli_add_command>
    CLI_ADD_CMD("cls", cli_clear_help, cli_clear);
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <cli_init+0xec>)
 8002fda:	491a      	ldr	r1, [pc, #104]	; (8003044 <cli_init+0xf0>)
 8002fdc:	481a      	ldr	r0, [pc, #104]	; (8003048 <cli_init+0xf4>)
 8002fde:	f000 fcff 	bl	80039e0 <cli_add_command>
    CLI_ADD_CMD("reset", cli_reset_help, cli_reset);
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <cli_init+0xf8>)
 8002fe4:	491a      	ldr	r1, [pc, #104]	; (8003050 <cli_init+0xfc>)
 8002fe6:	481b      	ldr	r0, [pc, #108]	; (8003054 <cli_init+0x100>)
 8002fe8:	f000 fcfa 	bl	80039e0 <cli_add_command>
    CLI_ADD_CMD("log", cli_log_help, cli_log);
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <cli_init+0x104>)
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <cli_init+0x108>)
 8002ff0:	481b      	ldr	r0, [pc, #108]	; (8003060 <cli_init+0x10c>)
 8002ff2:	f000 fcf5 	bl	80039e0 <cli_add_command>

    if(CLI_LAST_LOG_CATEGORY > 32){
    	ERR("Too many log categories defined. The max number of log categories that can be user defined is 31.\n");
    }

    LOG(CLI_LOG_SHELL, "Command line successfully initialized.\n");
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <cli_init+0x110>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <cli_init+0xba>
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <cli_init+0x114>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	4818      	ldr	r0, [pc, #96]	; (800306c <cli_init+0x118>)
 800300a:	f009 fbd1 	bl	800c7b0 <iprintf>

}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000500 	.word	0x20000500
 800301c:	200004d8 	.word	0x200004d8
 8003020:	20000684 	.word	0x20000684
 8003024:	200004d4 	.word	0x200004d4
 8003028:	20000504 	.word	0x20000504
 800302c:	0800ff90 	.word	0x0800ff90
 8003030:	200009a7 	.word	0x200009a7
 8003034:	080037e1 	.word	0x080037e1
 8003038:	08010ac4 	.word	0x08010ac4
 800303c:	0800ff94 	.word	0x0800ff94
 8003040:	08003935 	.word	0x08003935
 8003044:	08010ad4 	.word	0x08010ad4
 8003048:	0800ff9c 	.word	0x0800ff9c
 800304c:	08003991 	.word	0x08003991
 8003050:	08010ae8 	.word	0x08010ae8
 8003054:	0800ffa0 	.word	0x0800ffa0
 8003058:	08003ab5 	.word	0x08003ab5
 800305c:	08010af4 	.word	0x08010af4
 8003060:	0800ffa8 	.word	0x0800ffa8
 8003064:	20000020 	.word	0x20000020
 8003068:	20000004 	.word	0x20000004
 800306c:	0800ffac 	.word	0x0800ffac

08003070 <HAL_UART_RxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done receiving a char
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	shell_queue_in(&cli_rx_buff, &cBuffer);
 8003078:	4906      	ldr	r1, [pc, #24]	; (8003094 <HAL_UART_RxCpltCallback+0x24>)
 800307a:	4807      	ldr	r0, [pc, #28]	; (8003098 <HAL_UART_RxCpltCallback+0x28>)
 800307c:	f000 fe9a 	bl	8003db4 <shell_queue_in>
	HAL_UART_Receive_IT(huart, &cBuffer, 1);
 8003080:	2201      	movs	r2, #1
 8003082:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_UART_RxCpltCallback+0x24>)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f005 fd79 	bl	8008b7c <HAL_UART_Receive_IT>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200004d4 	.word	0x200004d4
 8003098:	200004d8 	.word	0x200004d8

0800309c <HAL_UART_TxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done transmitting data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	cli_tx_isr_flag = false;
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_UART_TxCpltCallback+0x1c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	200009a8 	.word	0x200009a8

080030bc <cli_rx_handle>:
  * @brief  handle commands from the terminal
  * @param  commands
  * @retval null
  */
static void cli_rx_handle(shell_queue_s *rx_buff)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b091      	sub	sp, #68	; 0x44
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    static HANDLE_TYPE_S Handle = {.buff = {0},.len = 0};
    uint8_t i = Handle.len;
 80030c4:	4bb9      	ldr	r3, [pc, #740]	; (80033ac <cli_rx_handle+0x2f0>)
 80030c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cmd_match = false;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t exec_req = false;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*  ---------------------------------------
        Step1: save chars from the terminal
        ---------------------------------------
     */
    bool newChar = true;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    while(newChar) {
 80030e0:	e15e      	b.n	80033a0 <cli_rx_handle+0x2e4>
        if(Handle.len < MAX_LINE_LEN) {  /* check the buffer */
 80030e2:	4bb2      	ldr	r3, [pc, #712]	; (80033ac <cli_rx_handle+0x2f0>)
 80030e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e8:	2b4f      	cmp	r3, #79	; 0x4f
 80030ea:	f200 8173 	bhi.w	80033d4 <cli_rx_handle+0x318>
        	newChar = shell_queue_out(rx_buff, Handle.buff+Handle.len);
 80030ee:	4baf      	ldr	r3, [pc, #700]	; (80033ac <cli_rx_handle+0x2f0>)
 80030f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f4:	461a      	mov	r2, r3
 80030f6:	4bad      	ldr	r3, [pc, #692]	; (80033ac <cli_rx_handle+0x2f0>)
 80030f8:	4413      	add	r3, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fe7a 	bl	8003df6 <shell_queue_out>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

            /* new char coming from the terminal, copy it to Handle.buff */
            if(newChar) {
 8003110:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d069      	beq.n	80031ec <cli_rx_handle+0x130>
                /* KEY_BACKSPACE -->get DELETE key from keyboard */
                if (Handle.buff[Handle.len] == KEY_BACKSPACE || Handle.buff[Handle.len] == KEY_DEL) {
 8003118:	4ba4      	ldr	r3, [pc, #656]	; (80033ac <cli_rx_handle+0x2f0>)
 800311a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800311e:	461a      	mov	r2, r3
 8003120:	4ba2      	ldr	r3, [pc, #648]	; (80033ac <cli_rx_handle+0x2f0>)
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d007      	beq.n	8003138 <cli_rx_handle+0x7c>
 8003128:	4ba0      	ldr	r3, [pc, #640]	; (80033ac <cli_rx_handle+0x2f0>)
 800312a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312e:	461a      	mov	r2, r3
 8003130:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <cli_rx_handle+0x2f0>)
 8003132:	5c9b      	ldrb	r3, [r3, r2]
 8003134:	2b7f      	cmp	r3, #127	; 0x7f
 8003136:	d11c      	bne.n	8003172 <cli_rx_handle+0xb6>
                    /* buffer not empty */
                    if (Handle.len > 0) {
 8003138:	4b9c      	ldr	r3, [pc, #624]	; (80033ac <cli_rx_handle+0x2f0>)
 800313a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 812e 	beq.w	80033a0 <cli_rx_handle+0x2e4>
                        /* delete a char in terminal */
                        TERMINAL_MOVE_LEFT(1);
 8003144:	2101      	movs	r1, #1
 8003146:	489a      	ldr	r0, [pc, #616]	; (80033b0 <cli_rx_handle+0x2f4>)
 8003148:	f009 fb32 	bl	800c7b0 <iprintf>
                        TERMINAL_CLEAR_END();
 800314c:	4899      	ldr	r0, [pc, #612]	; (80033b4 <cli_rx_handle+0x2f8>)
 800314e:	f009 fb2f 	bl	800c7b0 <iprintf>
                        Handle.buff[Handle.len] = '\0';
 8003152:	4b96      	ldr	r3, [pc, #600]	; (80033ac <cli_rx_handle+0x2f0>)
 8003154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003158:	461a      	mov	r2, r3
 800315a:	4b94      	ldr	r3, [pc, #592]	; (80033ac <cli_rx_handle+0x2f0>)
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]
                        Handle.len--;
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <cli_rx_handle+0x2f0>)
 8003162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003166:	3b01      	subs	r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b90      	ldr	r3, [pc, #576]	; (80033ac <cli_rx_handle+0x2f0>)
 800316c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    if (Handle.len > 0) {
 8003170:	e116      	b.n	80033a0 <cli_rx_handle+0x2e4>
                    }

                } else if(Handle.buff[Handle.len] == KEY_ENTER){
 8003172:	4b8e      	ldr	r3, [pc, #568]	; (80033ac <cli_rx_handle+0x2f0>)
 8003174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003178:	461a      	mov	r2, r3
 800317a:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <cli_rx_handle+0x2f0>)
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	2b0d      	cmp	r3, #13
 8003180:	d10b      	bne.n	800319a <cli_rx_handle+0xde>
                	exec_req = true;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                	Handle.len++;
 8003188:	4b88      	ldr	r3, [pc, #544]	; (80033ac <cli_rx_handle+0x2f0>)
 800318a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800318e:	3301      	adds	r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4b86      	ldr	r3, [pc, #536]	; (80033ac <cli_rx_handle+0x2f0>)
 8003194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003198:	e102      	b.n	80033a0 <cli_rx_handle+0x2e4>
                }else if(strstr((const char *)Handle.buff, KEY_DELETE) != NULL){
 800319a:	4987      	ldr	r1, [pc, #540]	; (80033b8 <cli_rx_handle+0x2fc>)
 800319c:	4883      	ldr	r0, [pc, #524]	; (80033ac <cli_rx_handle+0x2f0>)
 800319e:	f009 fc6a 	bl	800ca76 <strstr>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d018      	beq.n	80031da <cli_rx_handle+0x11e>
                	strcpy((char *)&Handle.buff[Handle.len-3], (char *)&Handle.buff[Handle.len+1]);
 80031a8:	4b80      	ldr	r3, [pc, #512]	; (80033ac <cli_rx_handle+0x2f0>)
 80031aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ae:	3b03      	subs	r3, #3
 80031b0:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <cli_rx_handle+0x2f0>)
 80031b2:	441a      	add	r2, r3
 80031b4:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <cli_rx_handle+0x2f0>)
 80031b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ba:	3301      	adds	r3, #1
 80031bc:	497b      	ldr	r1, [pc, #492]	; (80033ac <cli_rx_handle+0x2f0>)
 80031be:	440b      	add	r3, r1
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f009 fc4f 	bl	800ca66 <strcpy>
                	Handle.len -= 3;
 80031c8:	4b78      	ldr	r3, [pc, #480]	; (80033ac <cli_rx_handle+0x2f0>)
 80031ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ce:	3b03      	subs	r3, #3
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <cli_rx_handle+0x2f0>)
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031d8:	e0e2      	b.n	80033a0 <cli_rx_handle+0x2e4>
            	}else{
                    Handle.len++;
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <cli_rx_handle+0x2f0>)
 80031dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e0:	3301      	adds	r3, #1
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	4b71      	ldr	r3, [pc, #452]	; (80033ac <cli_rx_handle+0x2f0>)
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031ea:	e0d9      	b.n	80033a0 <cli_rx_handle+0x2e4>
                }

            } else if(cli_password_ok){
 80031ec:	4b73      	ldr	r3, [pc, #460]	; (80033bc <cli_rx_handle+0x300>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80d5 	beq.w	80033a0 <cli_rx_handle+0x2e4>
                /* all chars copied to Handle.buff */
                uint8_t key = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                uint8_t err = 0xff;
 80031fc:	23ff      	movs	r3, #255	; 0xff
 80031fe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                char *p_hist_cmd = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28

                if (Handle.len >= 3) {
 8003206:	4b69      	ldr	r3, [pc, #420]	; (80033ac <cli_rx_handle+0x2f0>)
 8003208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320c:	2b02      	cmp	r3, #2
 800320e:	f240 80a7 	bls.w	8003360 <cli_rx_handle+0x2a4>
                    if (strstr((const char *)Handle.buff, KEY_UP) != NULL) {
 8003212:	496b      	ldr	r1, [pc, #428]	; (80033c0 <cli_rx_handle+0x304>)
 8003214:	4865      	ldr	r0, [pc, #404]	; (80033ac <cli_rx_handle+0x2f0>)
 8003216:	f009 fc2e 	bl	800ca76 <strstr>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01c      	beq.n	800325a <cli_rx_handle+0x19e>
                        key = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <cli_rx_handle+0x2f0>)
 8003228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800322c:	2b03      	cmp	r3, #3
 800322e:	d907      	bls.n	8003240 <cli_rx_handle+0x184>
 8003230:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <cli_rx_handle+0x2f0>)
 8003232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003236:	3b03      	subs	r3, #3
 8003238:	4619      	mov	r1, r3
 800323a:	485d      	ldr	r0, [pc, #372]	; (80033b0 <cli_rx_handle+0x2f4>)
 800323c:	f009 fab8 	bl	800c7b0 <iprintf>
                        TERMINAL_CLEAR_END();
 8003240:	485c      	ldr	r0, [pc, #368]	; (80033b4 <cli_rx_handle+0x2f8>)
 8003242:	f009 fab5 	bl	800c7b0 <iprintf>
                        err = cli_history_show(true, &p_hist_cmd);
 8003246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800324a:	4619      	mov	r1, r3
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff fe25 	bl	8002e9c <cli_history_show>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003258:	e038      	b.n	80032cc <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_DOWN) != NULL) {
 800325a:	495a      	ldr	r1, [pc, #360]	; (80033c4 <cli_rx_handle+0x308>)
 800325c:	4853      	ldr	r0, [pc, #332]	; (80033ac <cli_rx_handle+0x2f0>)
 800325e:	f009 fc0a 	bl	800ca76 <strstr>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01c      	beq.n	80032a2 <cli_rx_handle+0x1e6>
                        key = 2;
 8003268:	2302      	movs	r3, #2
 800326a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <cli_rx_handle+0x2f0>)
 8003270:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003274:	2b03      	cmp	r3, #3
 8003276:	d907      	bls.n	8003288 <cli_rx_handle+0x1cc>
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <cli_rx_handle+0x2f0>)
 800327a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800327e:	3b03      	subs	r3, #3
 8003280:	4619      	mov	r1, r3
 8003282:	484b      	ldr	r0, [pc, #300]	; (80033b0 <cli_rx_handle+0x2f4>)
 8003284:	f009 fa94 	bl	800c7b0 <iprintf>
                        TERMINAL_CLEAR_END();
 8003288:	484a      	ldr	r0, [pc, #296]	; (80033b4 <cli_rx_handle+0x2f8>)
 800328a:	f009 fa91 	bl	800c7b0 <iprintf>
                        err = cli_history_show(false, &p_hist_cmd);
 800328e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003292:	4619      	mov	r1, r3
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fe01 	bl	8002e9c <cli_history_show>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80032a0:	e014      	b.n	80032cc <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_RIGHT) != NULL) {
 80032a2:	4949      	ldr	r1, [pc, #292]	; (80033c8 <cli_rx_handle+0x30c>)
 80032a4:	4841      	ldr	r0, [pc, #260]	; (80033ac <cli_rx_handle+0x2f0>)
 80032a6:	f009 fbe6 	bl	800ca76 <strstr>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <cli_rx_handle+0x1fc>
                        key = 3;
 80032b0:	2303      	movs	r3, #3
 80032b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80032b6:	e009      	b.n	80032cc <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_LEFT) != NULL) {
 80032b8:	4944      	ldr	r1, [pc, #272]	; (80033cc <cli_rx_handle+0x310>)
 80032ba:	483c      	ldr	r0, [pc, #240]	; (80033ac <cli_rx_handle+0x2f0>)
 80032bc:	f009 fbdb 	bl	800ca76 <strstr>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <cli_rx_handle+0x210>
                        key = 4;
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }

                    if (key != 0) {
 80032cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d045      	beq.n	8003360 <cli_rx_handle+0x2a4>
                        if (!err) {
 80032d4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d124      	bne.n	8003326 <cli_rx_handle+0x26a>
                            memset(&Handle, 0x00, sizeof(Handle));
 80032dc:	2251      	movs	r2, #81	; 0x51
 80032de:	2100      	movs	r1, #0
 80032e0:	4832      	ldr	r0, [pc, #200]	; (80033ac <cli_rx_handle+0x2f0>)
 80032e2:	f008 f9a9 	bl	800b638 <memset>
                            memcpy(Handle.buff, p_hist_cmd, strlen(p_hist_cmd));
 80032e6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fc fff2 	bl	80002d4 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	4621      	mov	r1, r4
 80032f6:	482d      	ldr	r0, [pc, #180]	; (80033ac <cli_rx_handle+0x2f0>)
 80032f8:	f008 f976 	bl	800b5e8 <memcpy>
                            Handle.len = strlen(p_hist_cmd);
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fc ffe8 	bl	80002d4 <strlen>
 8003304:	4603      	mov	r3, r0
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <cli_rx_handle+0x2f0>)
 800330a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            Handle.buff[Handle.len] = '\0';
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <cli_rx_handle+0x2f0>)
 8003310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003314:	461a      	mov	r2, r3
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <cli_rx_handle+0x2f0>)
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]
                            printf("%s", Handle.buff);  /* display history command */
 800331c:	4923      	ldr	r1, [pc, #140]	; (80033ac <cli_rx_handle+0x2f0>)
 800331e:	482c      	ldr	r0, [pc, #176]	; (80033d0 <cli_rx_handle+0x314>)
 8003320:	f009 fa46 	bl	800c7b0 <iprintf>
 8003324:	e01c      	b.n	8003360 <cli_rx_handle+0x2a4>
                        } else if (err && (0 != key)) {
 8003326:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <cli_rx_handle+0x2a4>
 800332e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003332:	2b00      	cmp	r3, #0
 8003334:	d014      	beq.n	8003360 <cli_rx_handle+0x2a4>
                            /* no history found */
                            TERMINAL_MOVE_LEFT(Handle.len-3);
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <cli_rx_handle+0x2f0>)
 8003338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800333c:	2b03      	cmp	r3, #3
 800333e:	d907      	bls.n	8003350 <cli_rx_handle+0x294>
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <cli_rx_handle+0x2f0>)
 8003342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003346:	3b03      	subs	r3, #3
 8003348:	4619      	mov	r1, r3
 800334a:	4819      	ldr	r0, [pc, #100]	; (80033b0 <cli_rx_handle+0x2f4>)
 800334c:	f009 fa30 	bl	800c7b0 <iprintf>
                            TERMINAL_CLEAR_END();
 8003350:	4818      	ldr	r0, [pc, #96]	; (80033b4 <cli_rx_handle+0x2f8>)
 8003352:	f009 fa2d 	bl	800c7b0 <iprintf>
                            memset(&Handle, 0x00, sizeof(Handle));
 8003356:	2251      	movs	r2, #81	; 0x51
 8003358:	2100      	movs	r1, #0
 800335a:	4814      	ldr	r0, [pc, #80]	; (80033ac <cli_rx_handle+0x2f0>)
 800335c:	f008 f96c 	bl	800b638 <memset>
                        }
                    }
                }

                if ((key == 0) && (Handle.len > i)) {
 8003360:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003364:	2b00      	cmp	r3, #0
 8003366:	d137      	bne.n	80033d8 <cli_rx_handle+0x31c>
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <cli_rx_handle+0x2f0>)
 800336a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800336e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003372:	429a      	cmp	r2, r3
 8003374:	d230      	bcs.n	80033d8 <cli_rx_handle+0x31c>
                    /* display char in terminal */
                    for (; i < Handle.len; i++) {
 8003376:	e00b      	b.n	8003390 <cli_rx_handle+0x2d4>
                    	printf("%c", Handle.buff[i]);
 8003378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <cli_rx_handle+0x2f0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	4618      	mov	r0, r3
 8003382:	f009 fa2d 	bl	800c7e0 <putchar>
                    for (; i < Handle.len; i++) {
 8003386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800338a:	3301      	adds	r3, #1
 800338c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <cli_rx_handle+0x2f0>)
 8003392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003396:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800339a:	429a      	cmp	r2, r3
 800339c:	d3ec      	bcc.n	8003378 <cli_rx_handle+0x2bc>

                    }
                }
                break;
 800339e:	e01b      	b.n	80033d8 <cli_rx_handle+0x31c>
    while(newChar) {
 80033a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f ae9c 	bne.w	80030e2 <cli_rx_handle+0x26>
 80033aa:	e016      	b.n	80033da <cli_rx_handle+0x31e>
 80033ac:	200009ac 	.word	0x200009ac
 80033b0:	0800ffe8 	.word	0x0800ffe8
 80033b4:	0800fff0 	.word	0x0800fff0
 80033b8:	0800fff4 	.word	0x0800fff4
 80033bc:	200009a7 	.word	0x200009a7
 80033c0:	0800fffc 	.word	0x0800fffc
 80033c4:	08010000 	.word	0x08010000
 80033c8:	08010004 	.word	0x08010004
 80033cc:	08010008 	.word	0x08010008
 80033d0:	0801000c 	.word	0x0801000c
            }

        } else {
            /* buffer full */
            break;
 80033d4:	bf00      	nop
 80033d6:	e000      	b.n	80033da <cli_rx_handle+0x31e>
                break;
 80033d8:	bf00      	nop

    /*  ---------------------------------------
        Step2: handle the commands
        ---------------------------------------
     */
    if(exec_req && !cli_password_ok){
 80033da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <cli_rx_handle+0x340>
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <cli_rx_handle+0x510>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f083 0301 	eor.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <cli_rx_handle+0x340>
    		cli_password_ok = true;
    		greet();
    	}
    	Handle.len = 0;
#else
    	cli_password_ok = true;
 80033f0:	4b76      	ldr	r3, [pc, #472]	; (80035cc <cli_rx_handle+0x510>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
    	greet();
 80033f6:	f000 f91b 	bl	8003630 <greet>
 80033fa:	e0d2      	b.n	80035a2 <cli_rx_handle+0x4e6>
#endif
    }else if(exec_req && (Handle.len == 1)) {
 80033fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <cli_rx_handle+0x362>
 8003404:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <cli_rx_handle+0x514>)
 8003406:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <cli_rx_handle+0x362>
        /* KEY_ENTER -->ENTER key from terminal */
    	PRINT_CLI_NAME();
 800340e:	4871      	ldr	r0, [pc, #452]	; (80035d4 <cli_rx_handle+0x518>)
 8003410:	f009 f9ce 	bl	800c7b0 <iprintf>
        Handle.len = 0;
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <cli_rx_handle+0x514>)
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800341c:	e0c1      	b.n	80035a2 <cli_rx_handle+0x4e6>
    } else if(exec_req && Handle.len > 1) {  /* check for the length of command */
 800341e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80bd 	beq.w	80035a2 <cli_rx_handle+0x4e6>
 8003428:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <cli_rx_handle+0x514>)
 800342a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800342e:	2b01      	cmp	r3, #1
 8003430:	f240 80b7 	bls.w	80035a2 <cli_rx_handle+0x4e6>
		NL1();
 8003434:	200a      	movs	r0, #10
 8003436:	f009 f9d3 	bl	800c7e0 <putchar>
		Handle.buff[Handle.len - 1] = '\0';
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <cli_rx_handle+0x514>)
 800343c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003440:	3b01      	subs	r3, #1
 8003442:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <cli_rx_handle+0x514>)
 8003444:	2100      	movs	r1, #0
 8003446:	54d1      	strb	r1, [r2, r3]
		cli_history_add((char *)Handle.buff);
 8003448:	4861      	ldr	r0, [pc, #388]	; (80035d0 <cli_rx_handle+0x514>)
 800344a:	f7ff fcb3 	bl	8002db4 <cli_history_add>
		char *command = strtok((char *)Handle.buff, " \t");
 800344e:	4962      	ldr	r1, [pc, #392]	; (80035d8 <cli_rx_handle+0x51c>)
 8003450:	485f      	ldr	r0, [pc, #380]	; (80035d0 <cli_rx_handle+0x514>)
 8003452:	f00a f951 	bl	800d6f8 <strtok>
 8003456:	6338      	str	r0, [r7, #48]	; 0x30

		/* looking for a match */
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8003458:	2300      	movs	r3, #0
 800345a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800345e:	e089      	b.n	8003574 <cli_rx_handle+0x4b8>
			if(0 == strcmp(command, CLI_commands[i].pCmd)) {
 8003460:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003464:	495d      	ldr	r1, [pc, #372]	; (80035dc <cli_rx_handle+0x520>)
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003476:	f7fc ff23 	bl	80002c0 <strcmp>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d174      	bne.n	800356a <cli_rx_handle+0x4ae>
				cmd_match = true;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				//Split arguments string to argc/argv
				uint8_t argc = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				char 	*argv[MAX_ARGC];
				argv[0] = command;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	60bb      	str	r3, [r7, #8]

				char *token = strtok(NULL, " \t");
 8003490:	4951      	ldr	r1, [pc, #324]	; (80035d8 <cli_rx_handle+0x51c>)
 8003492:	2000      	movs	r0, #0
 8003494:	f00a f930 	bl	800d6f8 <strtok>
 8003498:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 800349a:	e01d      	b.n	80034d8 <cli_rx_handle+0x41c>
					if(argc >= MAX_ARGC){
 800349c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80034a0:	2b07      	cmp	r3, #7
 80034a2:	d907      	bls.n	80034b4 <cli_rx_handle+0x3f8>
						printf(CLI_FONT_RED "Maximum number of arguments is %d. Ignoring the rest of the arguments."CLI_FONT_DEFAULT, MAX_ARGC-1);NL1();
 80034a4:	2107      	movs	r1, #7
 80034a6:	484e      	ldr	r0, [pc, #312]	; (80035e0 <cli_rx_handle+0x524>)
 80034a8:	f009 f982 	bl	800c7b0 <iprintf>
 80034ac:	200a      	movs	r0, #10
 80034ae:	f009 f997 	bl	800c7e0 <putchar>
						break;
 80034b2:	e014      	b.n	80034de <cli_rx_handle+0x422>
					}
					argv[argc] = token;
 80034b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3340      	adds	r3, #64	; 0x40
 80034bc:	443b      	add	r3, r7
 80034be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c0:	f843 2c38 	str.w	r2, [r3, #-56]
					argc++;
 80034c4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80034c8:	3301      	adds	r3, #1
 80034ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					token = strtok(NULL, " \t");
 80034ce:	4942      	ldr	r1, [pc, #264]	; (80035d8 <cli_rx_handle+0x51c>)
 80034d0:	2000      	movs	r0, #0
 80034d2:	f00a f911 	bl	800d6f8 <strtok>
 80034d6:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1de      	bne.n	800349c <cli_rx_handle+0x3e0>
				}

				if(CLI_commands[i].pFun != NULL) {
 80034de:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80034e2:	493e      	ldr	r1, [pc, #248]	; (80035dc <cli_rx_handle+0x520>)
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3308      	adds	r3, #8
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d032      	beq.n	800355c <cli_rx_handle+0x4a0>
					/* call the func. */
					TERMINAL_HIDE_CURSOR();
 80034f6:	483b      	ldr	r0, [pc, #236]	; (80035e4 <cli_rx_handle+0x528>)
 80034f8:	f009 f95a 	bl	800c7b0 <iprintf>
					uint8_t result = CLI_commands[i].pFun(argc, argv);
 80034fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003500:	4936      	ldr	r1, [pc, #216]	; (80035dc <cli_rx_handle+0x520>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3308      	adds	r3, #8
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003514:	f107 0108 	add.w	r1, r7, #8
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
 800351c:	4603      	mov	r3, r0
 800351e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if(result == EXIT_SUCCESS){
 8003522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <cli_rx_handle+0x484>
						printf(CLI_FONT_GREEN "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 800352a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800352e:	461a      	mov	r2, r3
 8003530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003532:	482d      	ldr	r0, [pc, #180]	; (80035e8 <cli_rx_handle+0x52c>)
 8003534:	f009 f93c 	bl	800c7b0 <iprintf>
 8003538:	200a      	movs	r0, #10
 800353a:	f009 f951 	bl	800c7e0 <putchar>
 800353e:	e009      	b.n	8003554 <cli_rx_handle+0x498>
					}else{
						printf(CLI_FONT_RED "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8003540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003544:	461a      	mov	r2, r3
 8003546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003548:	4828      	ldr	r0, [pc, #160]	; (80035ec <cli_rx_handle+0x530>)
 800354a:	f009 f931 	bl	800c7b0 <iprintf>
 800354e:	200a      	movs	r0, #10
 8003550:	f009 f946 	bl	800c7e0 <putchar>
					}
					TERMINAL_SHOW_CURSOR();
 8003554:	4826      	ldr	r0, [pc, #152]	; (80035f0 <cli_rx_handle+0x534>)
 8003556:	f009 f92b 	bl	800c7b0 <iprintf>
					break;
 800355a:	e010      	b.n	800357e <cli_rx_handle+0x4c2>
				} else {
					/* func. is void */
					printf(CLI_FONT_RED "Command %s exists but no function is associated to it.", command);NL1();
 800355c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355e:	4825      	ldr	r0, [pc, #148]	; (80035f4 <cli_rx_handle+0x538>)
 8003560:	f009 f926 	bl	800c7b0 <iprintf>
 8003564:	200a      	movs	r0, #10
 8003566:	f009 f93b 	bl	800c7e0 <putchar>
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 800356a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800356e:	3301      	adds	r3, #1
 8003570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003574:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003578:	2b1f      	cmp	r3, #31
 800357a:	f67f af71 	bls.w	8003460 <cli_rx_handle+0x3a4>
				}
			}
		}

		if(!cmd_match) {
 800357e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <cli_rx_handle+0x4d8>
			/* no matching command */
			printf("\r\nCommand \"%s\" unknown, try: help", Handle.buff);NL1();
 8003586:	4912      	ldr	r1, [pc, #72]	; (80035d0 <cli_rx_handle+0x514>)
 8003588:	481b      	ldr	r0, [pc, #108]	; (80035f8 <cli_rx_handle+0x53c>)
 800358a:	f009 f911 	bl	800c7b0 <iprintf>
 800358e:	200a      	movs	r0, #10
 8003590:	f009 f926 	bl	800c7e0 <putchar>
		}

		Handle.len = 0;
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <cli_rx_handle+0x514>)
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		PRINT_CLI_NAME();
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <cli_rx_handle+0x518>)
 800359e:	f009 f907 	bl	800c7b0 <iprintf>

    }


    if(Handle.len >= MAX_LINE_LEN) {
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <cli_rx_handle+0x514>)
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a8:	2b4f      	cmp	r3, #79	; 0x4f
 80035aa:	d90a      	bls.n	80035c2 <cli_rx_handle+0x506>
        /* full, so restart the count */
    	printf(CLI_FONT_RED "\r\nMax command length is %d.\r\n" CLI_FONT_DEFAULT, MAX_LINE_LEN-1);
 80035ac:	214f      	movs	r1, #79	; 0x4f
 80035ae:	4813      	ldr	r0, [pc, #76]	; (80035fc <cli_rx_handle+0x540>)
 80035b0:	f009 f8fe 	bl	800c7b0 <iprintf>
    	PRINT_CLI_NAME();
 80035b4:	4807      	ldr	r0, [pc, #28]	; (80035d4 <cli_rx_handle+0x518>)
 80035b6:	f009 f8fb 	bl	800c7b0 <iprintf>
        Handle.len = 0;
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <cli_rx_handle+0x514>)
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
}
 80035c2:	bf00      	nop
 80035c4:	3744      	adds	r7, #68	; 0x44
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200009a7 	.word	0x200009a7
 80035d0:	200009ac 	.word	0x200009ac
 80035d4:	08010010 	.word	0x08010010
 80035d8:	0801001c 	.word	0x0801001c
 80035dc:	20000504 	.word	0x20000504
 80035e0:	08010020 	.word	0x08010020
 80035e4:	08010078 	.word	0x08010078
 80035e8:	08010080 	.word	0x08010080
 80035ec:	080100a0 	.word	0x080100a0
 80035f0:	080100c0 	.word	0x080100c0
 80035f4:	080100c8 	.word	0x080100c8
 80035f8:	08010108 	.word	0x08010108
 80035fc:	0801012c 	.word	0x0801012c

08003600 <cli_tx_handle>:
  * @brief  tx handle, flushes stdout buffer
  * @param  null
  * @retval null
  */
static void cli_tx_handle(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
    fflush(stdout);
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <cli_tx_handle+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f007 fe8a 	bl	800b324 <fflush>
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000030 	.word	0x20000030

08003618 <cli_run>:

void cli_run(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
    cli_rx_handle(&cli_rx_buff);
 800361c:	4803      	ldr	r0, [pc, #12]	; (800362c <cli_run+0x14>)
 800361e:	f7ff fd4d 	bl	80030bc <cli_rx_handle>
    cli_tx_handle();
 8003622:	f7ff ffed 	bl	8003600 <cli_tx_handle>
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200004d8 	.word	0x200004d8

08003630 <greet>:

void greet(void){
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
    NL1();
 8003634:	200a      	movs	r0, #10
 8003636:	f009 f8d3 	bl	800c7e0 <putchar>
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 800363a:	484d      	ldr	r0, [pc, #308]	; (8003770 <greet+0x140>)
 800363c:	f009 f8b8 	bl	800c7b0 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003640:	484c      	ldr	r0, [pc, #304]	; (8003774 <greet+0x144>)
 8003642:	f009 f8b5 	bl	800c7b0 <iprintf>
    TERMINAL_RESET_CURSOR();
 8003646:	484c      	ldr	r0, [pc, #304]	; (8003778 <greet+0x148>)
 8003648:	f009 f8b2 	bl	800c7b0 <iprintf>
    TERMINAL_FONT_BLUE();
 800364c:	484b      	ldr	r0, [pc, #300]	; (800377c <greet+0x14c>)
 800364e:	f009 f8af 	bl	800c7b0 <iprintf>
    printf("                             ///////////////////////////////////////////    ");NL1();
 8003652:	484b      	ldr	r0, [pc, #300]	; (8003780 <greet+0x150>)
 8003654:	f009 f8ac 	bl	800c7b0 <iprintf>
 8003658:	200a      	movs	r0, #10
 800365a:	f009 f8c1 	bl	800c7e0 <putchar>
    printf("                             /////*   .////////////////////////     *///    ");NL1();
 800365e:	4849      	ldr	r0, [pc, #292]	; (8003784 <greet+0x154>)
 8003660:	f009 f8a6 	bl	800c7b0 <iprintf>
 8003664:	200a      	movs	r0, #10
 8003666:	f009 f8bb 	bl	800c7e0 <putchar>
    printf("            %%%%%%         %%%%%%  ///   ////  //   //////////  //   ////   //    ");NL1();
 800366a:	4847      	ldr	r0, [pc, #284]	; (8003788 <greet+0x158>)
 800366c:	f009 f8a0 	bl	800c7b0 <iprintf>
 8003670:	200a      	movs	r0, #10
 8003672:	f009 f8b5 	bl	800c7e0 <putchar>
    printf("            %%%%%%        %%%%%%   ///  //////////   ////////  ///  //////////    ");NL1();
 8003676:	4845      	ldr	r0, [pc, #276]	; (800378c <greet+0x15c>)
 8003678:	f009 f89a 	bl	800c7b0 <iprintf>
 800367c:	200a      	movs	r0, #10
 800367e:	f009 f8af 	bl	800c7e0 <putchar>
    printf("           %%%%%%        %%%%%%%%   ((((   (((((((((   ((((((  (((((   .(((((((    ");NL1();
 8003682:	4843      	ldr	r0, [pc, #268]	; (8003790 <greet+0x160>)
 8003684:	f009 f894 	bl	800c7b0 <iprintf>
 8003688:	200a      	movs	r0, #10
 800368a:	f009 f8a9 	bl	800c7e0 <putchar>
    printf("          %%%%%%        %%%%%%%%    (((((((    (((((((  ((((  (((((((((    ((((    ");NL1();
 800368e:	4841      	ldr	r0, [pc, #260]	; (8003794 <greet+0x164>)
 8003690:	f009 f88e 	bl	800c7b0 <iprintf>
 8003694:	200a      	movs	r0, #10
 8003696:	f009 f8a3 	bl	800c7e0 <putchar>
    printf("          %%%%%%      %%%%  %%%%    ((((((((((   ((((((  ((  ((((((((((((((  ((    ");NL1();
 800369a:	483f      	ldr	r0, [pc, #252]	; (8003798 <greet+0x168>)
 800369c:	f009 f888 	bl	800c7b0 <iprintf>
 80036a0:	200a      	movs	r0, #10
 80036a2:	f009 f89d 	bl	800c7e0 <putchar>
    printf("         %%%%%%%%    %%%%%%   %%%%%%%%  (((*((((((  .(((((((    ((((((( ((((((   ((    ");NL1();
 80036a6:	483d      	ldr	r0, [pc, #244]	; (800379c <greet+0x16c>)
 80036a8:	f009 f882 	bl	800c7b0 <iprintf>
 80036ac:	200a      	movs	r0, #10
 80036ae:	f009 f897 	bl	800c7e0 <putchar>
    printf("         %%%%*%%%%%%%%%%%%           (((        (((((((((   ((((((((        ((((    ");NL1();
 80036b2:	483b      	ldr	r0, [pc, #236]	; (80037a0 <greet+0x170>)
 80036b4:	f009 f87c 	bl	800c7b0 <iprintf>
 80036b8:	200a      	movs	r0, #10
 80036ba:	f009 f891 	bl	800c7e0 <putchar>
    printf("        %%%%   %%%%.             ###################   ##################### (((");NL1();
 80036be:	4839      	ldr	r0, [pc, #228]	; (80037a4 <greet+0x174>)
 80036c0:	f009 f876 	bl	800c7b0 <iprintf>
 80036c4:	200a      	movs	r0, #10
 80036c6:	f009 f88b 	bl	800c7e0 <putchar>
    printf("       %%%%%%          (((      ##################   ##################((((((( ");NL1();
 80036ca:	4837      	ldr	r0, [pc, #220]	; (80037a8 <greet+0x178>)
 80036cc:	f009 f870 	bl	800c7b0 <iprintf>
 80036d0:	200a      	movs	r0, #10
 80036d2:	f009 f885 	bl	800c7e0 <putchar>
    printf("       %%%%               (((( #################   ##############(((((((##    ");NL1();
 80036d6:	4835      	ldr	r0, [pc, #212]	; (80037ac <greet+0x17c>)
 80036d8:	f009 f86a 	bl	800c7b0 <iprintf>
 80036dc:	200a      	movs	r0, #10
 80036de:	f009 f87f 	bl	800c7e0 <putchar>
    printf("      %%%%%%                   (((((((((##################((((((((((#######    ");NL1();
 80036e2:	4833      	ldr	r0, [pc, #204]	; (80037b0 <greet+0x180>)
 80036e4:	f009 f864 	bl	800c7b0 <iprintf>
 80036e8:	200a      	movs	r0, #10
 80036ea:	f009 f879 	bl	800c7e0 <putchar>
    printf("     %%%%%%                     ########(((((((((((((((((((################    ");NL1();
 80036ee:	4831      	ldr	r0, [pc, #196]	; (80037b4 <greet+0x184>)
 80036f0:	f009 f85e 	bl	800c7b0 <iprintf>
 80036f4:	200a      	movs	r0, #10
 80036f6:	f009 f873 	bl	800c7e0 <putchar>
    printf("     %%%%%%                     ##%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%    ");NL1();
 80036fa:	482f      	ldr	r0, [pc, #188]	; (80037b8 <greet+0x188>)
 80036fc:	f009 f858 	bl	800c7b0 <iprintf>
 8003700:	200a      	movs	r0, #10
 8003702:	f009 f86d 	bl	800c7e0 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003706:	482d      	ldr	r0, [pc, #180]	; (80037bc <greet+0x18c>)
 8003708:	f009 f852 	bl	800c7b0 <iprintf>
 800370c:	200a      	movs	r0, #10
 800370e:	f009 f867 	bl	800c7e0 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003712:	482a      	ldr	r0, [pc, #168]	; (80037bc <greet+0x18c>)
 8003714:	f009 f84c 	bl	800c7b0 <iprintf>
 8003718:	200a      	movs	r0, #10
 800371a:	f009 f861 	bl	800c7e0 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <greet+0x190>)
 8003720:	f009 f846 	bl	800c7b0 <iprintf>
 8003724:	200a      	movs	r0, #10
 8003726:	f009 f85b 	bl	800c7e0 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800372a:	4825      	ldr	r0, [pc, #148]	; (80037c0 <greet+0x190>)
 800372c:	f009 f840 	bl	800c7b0 <iprintf>
 8003730:	200a      	movs	r0, #10
 8003732:	f009 f855 	bl	800c7e0 <putchar>
    printf("µShell v0.1 - by Morgan Diepart (mdiepart@uliege.be)");NL1();
 8003736:	4823      	ldr	r0, [pc, #140]	; (80037c4 <greet+0x194>)
 8003738:	f009 f83a 	bl	800c7b0 <iprintf>
 800373c:	200a      	movs	r0, #10
 800373e:	f009 f84f 	bl	800c7e0 <putchar>
    printf("Original work from https://github.com/ShareCat/STM32CommandLine");NL1();
 8003742:	4821      	ldr	r0, [pc, #132]	; (80037c8 <greet+0x198>)
 8003744:	f009 f834 	bl	800c7b0 <iprintf>
 8003748:	200a      	movs	r0, #10
 800374a:	f009 f849 	bl	800c7e0 <putchar>
    printf("-------------------------------");
 800374e:	481f      	ldr	r0, [pc, #124]	; (80037cc <greet+0x19c>)
 8003750:	f009 f82e 	bl	800c7b0 <iprintf>
    NL2();
 8003754:	481e      	ldr	r0, [pc, #120]	; (80037d0 <greet+0x1a0>)
 8003756:	f009 f8c7 	bl	800c8e8 <puts>
    TERMINAL_FONT_DEFAULT();
 800375a:	481e      	ldr	r0, [pc, #120]	; (80037d4 <greet+0x1a4>)
 800375c:	f009 f828 	bl	800c7b0 <iprintf>
    PRINT_CLI_NAME();
 8003760:	481d      	ldr	r0, [pc, #116]	; (80037d8 <greet+0x1a8>)
 8003762:	f009 f825 	bl	800c7b0 <iprintf>
    TERMINAL_SHOW_CURSOR();
 8003766:	481d      	ldr	r0, [pc, #116]	; (80037dc <greet+0x1ac>)
 8003768:	f009 f822 	bl	800c7b0 <iprintf>
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08010158 	.word	0x08010158
 8003774:	08010160 	.word	0x08010160
 8003778:	08010168 	.word	0x08010168
 800377c:	0801016c 	.word	0x0801016c
 8003780:	08010174 	.word	0x08010174
 8003784:	080101c4 	.word	0x080101c4
 8003788:	08010214 	.word	0x08010214
 800378c:	08010268 	.word	0x08010268
 8003790:	080102bc 	.word	0x080102bc
 8003794:	08010310 	.word	0x08010310
 8003798:	08010364 	.word	0x08010364
 800379c:	080103b8 	.word	0x080103b8
 80037a0:	08010410 	.word	0x08010410
 80037a4:	08010468 	.word	0x08010468
 80037a8:	080104bc 	.word	0x080104bc
 80037ac:	0801050c 	.word	0x0801050c
 80037b0:	0801055c 	.word	0x0801055c
 80037b4:	080105ac 	.word	0x080105ac
 80037b8:	080105fc 	.word	0x080105fc
 80037bc:	08010664 	.word	0x08010664
 80037c0:	080106e0 	.word	0x080106e0
 80037c4:	08010758 	.word	0x08010758
 80037c8:	08010790 	.word	0x08010790
 80037cc:	080107d0 	.word	0x080107d0
 80037d0:	080107f0 	.word	0x080107f0
 80037d4:	080107f4 	.word	0x080107f4
 80037d8:	08010010 	.word	0x08010010
 80037dc:	080100c0 	.word	0x080100c0

080037e0 <cli_help>:
  * @brief  printf the help info.
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_help(int argc, char *argv[])
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	if(argc == 1){
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d13e      	bne.n	800386e <cli_help+0x8e>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e036      	b.n	8003864 <cli_help+0x84>
	    	if(strcmp(CLI_commands[i].pCmd, "") != 0){
 80037f6:	494a      	ldr	r1, [pc, #296]	; (8003920 <cli_help+0x140>)
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d028      	beq.n	800385e <cli_help+0x7e>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 800380c:	4944      	ldr	r1, [pc, #272]	; (8003920 <cli_help+0x140>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	4841      	ldr	r0, [pc, #260]	; (8003924 <cli_help+0x144>)
 8003820:	f008 ffc6 	bl	800c7b0 <iprintf>
 8003824:	200a      	movs	r0, #10
 8003826:	f008 ffdb 	bl	800c7e0 <putchar>
		        if (CLI_commands[i].pHelp) {
 800382a:	493d      	ldr	r1, [pc, #244]	; (8003920 <cli_help+0x140>)
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <cli_help+0x7e>
		            printf(CLI_commands[i].pHelp);NL2();
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <cli_help+0x140>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3304      	adds	r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f008 ffac 	bl	800c7b0 <iprintf>
 8003858:	4833      	ldr	r0, [pc, #204]	; (8003928 <cli_help+0x148>)
 800385a:	f009 f845 	bl	800c8e8 <puts>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3301      	adds	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b1f      	cmp	r3, #31
 8003868:	d9c5      	bls.n	80037f6 <cli_help+0x16>
		        }
	    	}
	    }
	    return EXIT_SUCCESS;
 800386a:	2300      	movs	r3, #0
 800386c:	e053      	b.n	8003916 <cli_help+0x136>
	}else if(argc == 2){
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d146      	bne.n	8003902 <cli_help+0x122>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e034      	b.n	80038e4 <cli_help+0x104>
	    	if(strcmp(CLI_commands[i].pCmd, argv[1]) == 0){
 800387a:	4929      	ldr	r1, [pc, #164]	; (8003920 <cli_help+0x140>)
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	3304      	adds	r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fc fd14 	bl	80002c0 <strcmp>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11f      	bne.n	80038de <cli_help+0xfe>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 800389e:	4920      	ldr	r1, [pc, #128]	; (8003920 <cli_help+0x140>)
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	481c      	ldr	r0, [pc, #112]	; (8003924 <cli_help+0x144>)
 80038b2:	f008 ff7d 	bl	800c7b0 <iprintf>
 80038b6:	200a      	movs	r0, #10
 80038b8:	f008 ff92 	bl	800c7e0 <putchar>
	    		printf(CLI_commands[i].pHelp);NL1();
 80038bc:	4918      	ldr	r1, [pc, #96]	; (8003920 <cli_help+0x140>)
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3304      	adds	r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f008 ff6e 	bl	800c7b0 <iprintf>
 80038d4:	200a      	movs	r0, #10
 80038d6:	f008 ff83 	bl	800c7e0 <putchar>
	    		return EXIT_SUCCESS;
 80038da:	2300      	movs	r3, #0
 80038dc:	e01b      	b.n	8003916 <cli_help+0x136>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b1f      	cmp	r3, #31
 80038e8:	d9c7      	bls.n	800387a <cli_help+0x9a>
	    	}
	    }
	    printf("No help found for command %s.", argv[1]);NL1();
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	480e      	ldr	r0, [pc, #56]	; (800392c <cli_help+0x14c>)
 80038f4:	f008 ff5c 	bl	800c7b0 <iprintf>
 80038f8:	200a      	movs	r0, #10
 80038fa:	f008 ff71 	bl	800c7e0 <putchar>
	    return EXIT_FAILURE;
 80038fe:	2301      	movs	r3, #1
 8003900:	e009      	b.n	8003916 <cli_help+0x136>
	}else{
		printf("Command \"%s\" takes at most 1 argument.", argv[0]);NL1();
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4809      	ldr	r0, [pc, #36]	; (8003930 <cli_help+0x150>)
 800390a:	f008 ff51 	bl	800c7b0 <iprintf>
 800390e:	200a      	movs	r0, #10
 8003910:	f008 ff66 	bl	800c7e0 <putchar>
		return EXIT_FAILURE;
 8003914:	2301      	movs	r3, #1
	}
    return EXIT_FAILURE;
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000504 	.word	0x20000504
 8003924:	080107fc 	.word	0x080107fc
 8003928:	080107f0 	.word	0x080107f0
 800392c:	08010804 	.word	0x08010804
 8003930:	08010824 	.word	0x08010824

08003934 <cli_clear>:
  * @brief  clear the screen
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_clear(int argc, char *argv[])
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	if(argc != 1){
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00a      	beq.n	800395a <cli_clear+0x26>
		printf("command \"%s\" does not take any argument.", argv[0]);NL1();
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4619      	mov	r1, r3
 800394a:	480c      	ldr	r0, [pc, #48]	; (800397c <cli_clear+0x48>)
 800394c:	f008 ff30 	bl	800c7b0 <iprintf>
 8003950:	200a      	movs	r0, #10
 8003952:	f008 ff45 	bl	800c7e0 <putchar>
		return EXIT_FAILURE;
 8003956:	2301      	movs	r3, #1
 8003958:	e00c      	b.n	8003974 <cli_clear+0x40>
	}
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 800395a:	4809      	ldr	r0, [pc, #36]	; (8003980 <cli_clear+0x4c>)
 800395c:	f008 ff28 	bl	800c7b0 <iprintf>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8003960:	4808      	ldr	r0, [pc, #32]	; (8003984 <cli_clear+0x50>)
 8003962:	f008 ff25 	bl	800c7b0 <iprintf>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 8003966:	4808      	ldr	r0, [pc, #32]	; (8003988 <cli_clear+0x54>)
 8003968:	f008 ff22 	bl	800c7b0 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 800396c:	4807      	ldr	r0, [pc, #28]	; (800398c <cli_clear+0x58>)
 800396e:	f008 ff1f 	bl	800c7b0 <iprintf>

    return EXIT_SUCCESS;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	0801084c 	.word	0x0801084c
 8003980:	08010158 	.word	0x08010158
 8003984:	080107f4 	.word	0x080107f4
 8003988:	08010168 	.word	0x08010168
 800398c:	08010160 	.word	0x08010160

08003990 <cli_reset>:
  * @brief  MCU reboot
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_reset(int argc, char *argv[])
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	if(argc > 1){
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b01      	cmp	r3, #1
 800399e:	dd0a      	ble.n	80039b6 <cli_reset+0x26>
		printf("Command \"%s\" takes no argument.", argv[0]);NL1();
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	480c      	ldr	r0, [pc, #48]	; (80039d8 <cli_reset+0x48>)
 80039a8:	f008 ff02 	bl	800c7b0 <iprintf>
 80039ac:	200a      	movs	r0, #10
 80039ae:	f008 ff17 	bl	800c7e0 <putchar>
		return EXIT_FAILURE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00b      	b.n	80039ce <cli_reset+0x3e>
	}

	NL1();printf("[END]: System Rebooting");NL1();
 80039b6:	200a      	movs	r0, #10
 80039b8:	f008 ff12 	bl	800c7e0 <putchar>
 80039bc:	4807      	ldr	r0, [pc, #28]	; (80039dc <cli_reset+0x4c>)
 80039be:	f008 fef7 	bl	800c7b0 <iprintf>
 80039c2:	200a      	movs	r0, #10
 80039c4:	f008 ff0c 	bl	800c7e0 <putchar>
	HAL_NVIC_SystemReset();
 80039c8:	f000 fe21 	bl	800460e <HAL_NVIC_SystemReset>
	return EXIT_SUCCESS;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08010878 	.word	0x08010878
 80039dc:	08010898 	.word	0x08010898

080039e0 <cli_add_command>:

void cli_add_command(const char *command, const char *help, uint8_t (*exec)(int argc, char *argv[])){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
	for(; i < MAX_COMMAND_NB; i++){
 80039f0:	e02b      	b.n	8003a4a <cli_add_command+0x6a>
		if(strcmp(CLI_commands[i].pCmd, "") == 0){
 80039f2:	4929      	ldr	r1, [pc, #164]	; (8003a98 <cli_add_command+0xb8>)
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4613      	mov	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11d      	bne.n	8003a44 <cli_add_command+0x64>
			CLI_commands[i].pCmd = command;
 8003a08:	4923      	ldr	r1, [pc, #140]	; (8003a98 <cli_add_command+0xb8>)
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pFun = exec;
 8003a1a:	491f      	ldr	r1, [pc, #124]	; (8003a98 <cli_add_command+0xb8>)
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3308      	adds	r3, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pHelp = help;
 8003a2e:	491a      	ldr	r1, [pc, #104]	; (8003a98 <cli_add_command+0xb8>)
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	601a      	str	r2, [r3, #0]
			break;
 8003a42:	e005      	b.n	8003a50 <cli_add_command+0x70>
	for(; i < MAX_COMMAND_NB; i++){
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3301      	adds	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b1f      	cmp	r3, #31
 8003a4e:	d9d0      	bls.n	80039f2 <cli_add_command+0x12>
		}
	}
	if(i == MAX_COMMAND_NB){
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d10f      	bne.n	8003a76 <cli_add_command+0x96>
		ERR("Cannot add command %s, max number of commands "
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <cli_add_command+0xbc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68d8      	ldr	r0, [r3, #12]
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f240 237d 	movw	r3, #637	; 0x27d
 8003a68:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <cli_add_command+0xc0>)
 8003a6a:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <cli_add_command+0xc4>)
 8003a6c:	f007 fd42 	bl	800b4f4 <fiprintf>
				"reached. The maximum number of command is set to %d.\n" CLI_FONT_DEFAULT,
				command, MAX_COMMAND_NB); NL1();
 8003a70:	200a      	movs	r0, #10
 8003a72:	f008 feb5 	bl	800c7e0 <putchar>
	}
	LOG(CLI_LOG_SHELL, "Command %s added to shell.\n", command);
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <cli_add_command+0xc8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <cli_add_command+0xb0>
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <cli_add_command+0xcc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4809      	ldr	r0, [pc, #36]	; (8003ab0 <cli_add_command+0xd0>)
 8003a8c:	f008 fe90 	bl	800c7b0 <iprintf>
}
 8003a90:	bf00      	nop
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000504 	.word	0x20000504
 8003a9c:	20000030 	.word	0x20000030
 8003aa0:	080108b0 	.word	0x080108b0
 8003aa4:	080108d0 	.word	0x080108d0
 8003aa8:	20000020 	.word	0x20000020
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	08010958 	.word	0x08010958

08003ab4 <cli_log>:

uint8_t cli_log(int argc, char *argv[]){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
	if(argc < 2){
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	dc09      	bgt.n	8003ad8 <cli_log+0x24>
		printf("Command %s takes at least one argument. Use \"help %s\" for usage.\n", argv[0], argv[0]);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4859      	ldr	r0, [pc, #356]	; (8003c34 <cli_log+0x180>)
 8003ad0:	f008 fe6e 	bl	800c7b0 <iprintf>
		return EXIT_FAILURE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0a8      	b.n	8003c2a <cli_log+0x176>
	}

	if(strcmp(argv[1], "on") == 0){
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4956      	ldr	r1, [pc, #344]	; (8003c38 <cli_log+0x184>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fbed 	bl	80002c0 <strcmp>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d131      	bne.n	8003b50 <cli_log+0x9c>
		if(argc < 3){
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	dc07      	bgt.n	8003b02 <cli_log+0x4e>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4850      	ldr	r0, [pc, #320]	; (8003c3c <cli_log+0x188>)
 8003afa:	f008 fe59 	bl	800c7b0 <iprintf>
			return EXIT_FAILURE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e093      	b.n	8003c2a <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	494d      	ldr	r1, [pc, #308]	; (8003c40 <cli_log+0x18c>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fbd8 	bl	80002c0 <strcmp>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <cli_log+0x74>
			cli_log_stat = 0xFFFFFFFF;
 8003b16:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <cli_log+0x190>)
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b1c:	601a      	str	r2, [r3, #0]
			printf("All logs enabled.\n");
 8003b1e:	484a      	ldr	r0, [pc, #296]	; (8003c48 <cli_log+0x194>)
 8003b20:	f008 fee2 	bl	800c8e8 <puts>
			return EXIT_SUCCESS;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e080      	b.n	8003c2a <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 8003b28:	2302      	movs	r3, #2
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e00a      	b.n	8003b44 <cli_log+0x90>
				cli_enable_log_entry(argv[i]);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f8c9 	bl	8003cd0 <cli_enable_log_entry>
			for(int i = 2; i < argc; i++){
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf0      	blt.n	8003b2e <cli_log+0x7a>
			}
			return EXIT_SUCCESS;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e06c      	b.n	8003c2a <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "off") == 0){
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	3304      	adds	r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	493d      	ldr	r1, [pc, #244]	; (8003c4c <cli_log+0x198>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fbb1 	bl	80002c0 <strcmp>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d133      	bne.n	8003bcc <cli_log+0x118>
		printf("Turning off all logs\n");
 8003b64:	483a      	ldr	r0, [pc, #232]	; (8003c50 <cli_log+0x19c>)
 8003b66:	f008 febf 	bl	800c8e8 <puts>
		if(argc < 3){
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	dc07      	bgt.n	8003b80 <cli_log+0xcc>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4831      	ldr	r0, [pc, #196]	; (8003c3c <cli_log+0x188>)
 8003b78:	f008 fe1a 	bl	800c7b0 <iprintf>
			return EXIT_FAILURE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e054      	b.n	8003c2a <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	492e      	ldr	r1, [pc, #184]	; (8003c40 <cli_log+0x18c>)
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fb99 	bl	80002c0 <strcmp>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <cli_log+0xf0>
			cli_log_stat = 0;
 8003b94:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <cli_log+0x190>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
			printf("All logs disabled.\n");
 8003b9a:	482e      	ldr	r0, [pc, #184]	; (8003c54 <cli_log+0x1a0>)
 8003b9c:	f008 fea4 	bl	800c8e8 <puts>
			return EXIT_SUCCESS;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e042      	b.n	8003c2a <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e00a      	b.n	8003bc0 <cli_log+0x10c>
				cli_disable_log_entry(argv[i]);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f859 	bl	8003c6c <cli_disable_log_entry>
			for(int i = 2; i < argc; i++){
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf0      	blt.n	8003baa <cli_log+0xf6>
			}
			return EXIT_SUCCESS;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e02e      	b.n	8003c2a <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "show") == 0){
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4921      	ldr	r1, [pc, #132]	; (8003c58 <cli_log+0x1a4>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fb73 	bl	80002c0 <strcmp>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d123      	bne.n	8003c28 <cli_log+0x174>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e01b      	b.n	8003c1e <cli_log+0x16a>
			printf("%16s:\t", cli_logs_names[i]);
 8003be6:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <cli_log+0x1a8>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	481b      	ldr	r0, [pc, #108]	; (8003c60 <cli_log+0x1ac>)
 8003bf2:	f008 fddd 	bl	800c7b0 <iprintf>
			if(cli_log_stat&(1<<i)){
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <cli_log+0x190>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <cli_log+0x15e>
				printf(CLI_FONT_GREEN"Enabled"CLI_FONT_DEFAULT"\n");
 8003c0a:	4816      	ldr	r0, [pc, #88]	; (8003c64 <cli_log+0x1b0>)
 8003c0c:	f008 fe6c 	bl	800c8e8 <puts>
 8003c10:	e002      	b.n	8003c18 <cli_log+0x164>
			}else{
				printf(CLI_FONT_RED"Disabled"CLI_FONT_DEFAULT"\n");
 8003c12:	4815      	ldr	r0, [pc, #84]	; (8003c68 <cli_log+0x1b4>)
 8003c14:	f008 fe68 	bl	800c8e8 <puts>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d9e0      	bls.n	8003be6 <cli_log+0x132>
			}
		}
		return EXIT_SUCCESS;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <cli_log+0x176>
	}

	return EXIT_FAILURE;
 8003c28:	2301      	movs	r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	08010988 	.word	0x08010988
 8003c38:	080109cc 	.word	0x080109cc
 8003c3c:	080109d0 	.word	0x080109d0
 8003c40:	080109fc 	.word	0x080109fc
 8003c44:	20000020 	.word	0x20000020
 8003c48:	08010a00 	.word	0x08010a00
 8003c4c:	08010a14 	.word	0x08010a14
 8003c50:	08010a18 	.word	0x08010a18
 8003c54:	08010a30 	.word	0x08010a30
 8003c58:	08010a44 	.word	0x08010a44
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	08010a4c 	.word	0x08010a4c
 8003c64:	08010a54 	.word	0x08010a54
 8003c68:	08010a6c 	.word	0x08010a6c

08003c6c <cli_disable_log_entry>:

void cli_disable_log_entry(char *str){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e01c      	b.n	8003cb4 <cli_disable_log_entry+0x48>
		if(strcmp(str, cli_logs_names[i]) == 0){
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <cli_disable_log_entry+0x58>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fc fb1b 	bl	80002c0 <strcmp>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10e      	bne.n	8003cae <cli_disable_log_entry+0x42>
			printf("LOG disabled for category %s.\n", str);
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <cli_disable_log_entry+0x5c>)
 8003c94:	f008 fd8c 	bl	800c7b0 <iprintf>
			cli_log_stat &= ~(1<<i);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <cli_disable_log_entry+0x60>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <cli_disable_log_entry+0x60>)
 8003cac:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d9df      	bls.n	8003c7a <cli_disable_log_entry+0xe>
		}
	}
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	08010a84 	.word	0x08010a84
 8003ccc:	20000020 	.word	0x20000020

08003cd0 <cli_enable_log_entry>:

void cli_enable_log_entry(char *str){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e01b      	b.n	8003d16 <cli_enable_log_entry+0x46>
		if(strcmp(str, cli_logs_names[i]) == 0){
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <cli_enable_log_entry+0x58>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fc fae9 	bl	80002c0 <strcmp>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <cli_enable_log_entry+0x40>
			printf("LOG enabled for category %s.\n", str);
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	480d      	ldr	r0, [pc, #52]	; (8003d2c <cli_enable_log_entry+0x5c>)
 8003cf8:	f008 fd5a 	bl	800c7b0 <iprintf>
			cli_log_stat |= (1<<i);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <cli_enable_log_entry+0x60>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <cli_enable_log_entry+0x60>)
 8003d0e:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b06      	cmp	r3, #6
 8003d1a:	d9e0      	bls.n	8003cde <cli_enable_log_entry+0xe>
		}
	}
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000004 	.word	0x20000004
 8003d2c:	08010aa4 	.word	0x08010aa4
 8003d30:	20000020 	.word	0x20000020

08003d34 <shell_queue_init>:
 * @brief  shell_queue_init inits the contents of the queue to zeros
 * @param  queue
 * @retval True
 */
uint8_t shell_queue_init(shell_queue_s *queue)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = 0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]

    memset(queue->PBase, 0, SHELL_QUEUE_LENGTH);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	2220      	movs	r2, #32
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f007 fc70 	bl	800b638 <memset>

    return true;
 8003d58:	2301      	movs	r3, #1
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <shell_queue_full>:
 * @brief  shell_queue_full checks if the queue is full
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_full(shell_queue_s *queue)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
    if((((queue->Rear) + 1) % SHELL_QUEUE_LENGTH) == queue->Front) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d101      	bne.n	8003d80 <shell_queue_full+0x1e>
        return true;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <shell_queue_full+0x20>
    } else {
        return false;
 8003d80:	2300      	movs	r3, #0
    }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <shell_queue_empty>:
 * @brief  shell_queue_empty checks if the queue is empty
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_empty(shell_queue_s *queue)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
    if(queue->Front == queue->Rear) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d101      	bne.n	8003da6 <shell_queue_empty+0x18>
        return true;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <shell_queue_empty+0x1a>
    } else {
        return false;
 8003da6:	2300      	movs	r3, #0
    }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <shell_queue_in>:
 * @brief  shell_queue_in inserts a byte in the queue
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_in(shell_queue_s *queue, uint8_t *PData)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

    if(shell_queue_full(queue)) {
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffcf 	bl	8003d62 <shell_queue_full>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <shell_queue_in+0x1a>
        return false;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e00f      	b.n	8003dee <shell_queue_in+0x3a>
    }

    queue->PBase[queue->Rear] = *PData;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	7811      	ldrb	r1, [r2, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	460a      	mov	r2, r1
 8003ddc:	721a      	strb	r2, [r3, #8]
    queue->Rear = ((queue->Rear) + 1) % SHELL_QUEUE_LENGTH;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	3301      	adds	r3, #1
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]

    return true;
 8003dec:	2301      	movs	r3, #1
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <shell_queue_out>:
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */

uint8_t shell_queue_out(shell_queue_s *queue, uint8_t *PData)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
    if(shell_queue_empty(queue)) {
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffc4 	bl	8003d8e <shell_queue_empty>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <shell_queue_out+0x1a>
        return false;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e00e      	b.n	8003e2e <shell_queue_out+0x38>
    }

    *PData = queue->PBase[queue->Front];
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	7a1a      	ldrb	r2, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	701a      	strb	r2, [r3, #0]
    queue->Front = ((queue->Front) + 1) % SHELL_QUEUE_LENGTH;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]

    return true;
 8003e2c:	2301      	movs	r3, #1
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0
	return 1;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_kill>:

int _kill(int pid, int sig)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e50:	f007 f9a0 	bl	800b194 <__errno>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2216      	movs	r2, #22
 8003e58:	601a      	str	r2, [r3, #0]
	return -1;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <_exit>:

void _exit (int status)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffe7 	bl	8003e46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e78:	e7fe      	b.n	8003e78 <_exit+0x12>

08003e7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e00a      	b.n	8003ea2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e8c:	f3af 8000 	nop.w
 8003e90:	4601      	mov	r1, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	60ba      	str	r2, [r7, #8]
 8003e98:	b2ca      	uxtb	r2, r1
 8003e9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	dbf0      	blt.n	8003e8c <_read+0x12>
	}

return len;
 8003eaa:	687b      	ldr	r3, [r7, #4]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	return -1;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003edc:	605a      	str	r2, [r3, #4]
	return 0;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_isatty>:

int _isatty(int file)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	return 1;
 8003ef4:	2301      	movs	r3, #1
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
	return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <_sbrk+0x5c>)
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <_sbrk+0x60>)
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_sbrk+0x64>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <_sbrk+0x64>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <_sbrk+0x68>)
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <_sbrk+0x64>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d207      	bcs.n	8003f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f4c:	f007 f922 	bl	800b194 <__errno>
 8003f50:	4603      	mov	r3, r0
 8003f52:	220c      	movs	r2, #12
 8003f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5a:	e009      	b.n	8003f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <_sbrk+0x64>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <_sbrk+0x64>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <_sbrk+0x64>)
 8003f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20020000 	.word	0x20020000
 8003f7c:	00000400 	.word	0x00000400
 8003f80:	20000a00 	.word	0x20000a00
 8003f84:	20000a20 	.word	0x20000a20

08003f88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <SystemInit+0x20>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <SystemInit+0x20>)
 8003f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fac:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fb0:	480d      	ldr	r0, [pc, #52]	; (8003fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fb2:	490e      	ldr	r1, [pc, #56]	; (8003fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <LoopForever+0xe>)
  movs r3, #0
 8003fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003fb8:	e002      	b.n	8003fc0 <LoopCopyDataInit>

08003fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fbe:	3304      	adds	r3, #4

08003fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc4:	d3f9      	bcc.n	8003fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fc6:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fc8:	4c0b      	ldr	r4, [pc, #44]	; (8003ff8 <LoopForever+0x16>)
  movs r3, #0
 8003fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fcc:	e001      	b.n	8003fd2 <LoopFillZerobss>

08003fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fd0:	3204      	adds	r2, #4

08003fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd4:	d3fb      	bcc.n	8003fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fd6:	f7ff ffd7 	bl	8003f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fda:	f007 fabd 	bl	800b558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fde:	f7fd fec9 	bl	8001d74 <main>

08003fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fe2:	e7fe      	b.n	8003fe2 <LoopForever>
  ldr   r0, =_estack
 8003fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fec:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003ff0:	08011178 	.word	0x08011178
  ldr r2, =_sbss
 8003ff4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003ff8:	20000a1c 	.word	0x20000a1c

08003ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ffc:	e7fe      	b.n	8003ffc <ADC1_2_IRQHandler>
	...

08004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>:
#include "stm32g4xx_hal_gpio.h"
#include "math.h"
namespace Init{

double read_tilt_angle(ICM20948_WE myIMU)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b088      	sub	sp, #32
 8004006:	af00      	add	r7, sp, #0
 8004008:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800400c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  myIMU.readSensor();
 8004010:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004014:	f7fd fa3f 	bl	8001496 <_ZN11ICM20948_WE10readSensorEv>
	  myIMU.getAccRawValues();
 8004018:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800401c:	f7fd fa49 	bl	80014b2 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8004020:	eef0 6a40 	vmov.f32	s13, s0
 8004024:	eeb0 7a60 	vmov.f32	s14, s1
 8004028:	eef0 7a41 	vmov.f32	s15, s2
 800402c:	edc7 6a03 	vstr	s13, [r7, #12]
 8004030:	ed87 7a04 	vstr	s14, [r7, #16]
 8004034:	edc7 7a05 	vstr	s15, [r7, #20]
	  auto val = myIMU.getGValues();
 8004038:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800403c:	f7fd fada 	bl	80015f4 <_ZN11ICM20948_WE10getGValuesEv>
 8004040:	eef0 6a40 	vmov.f32	s13, s0
 8004044:	eeb0 7a60 	vmov.f32	s14, s1
 8004048:	eef0 7a41 	vmov.f32	s15, s2
 800404c:	edc7 6a00 	vstr	s13, [r7]
 8004050:	ed87 7a01 	vstr	s14, [r7, #4]
 8004054:	edc7 7a02 	vstr	s15, [r7, #8]
	  if((val.x ==0) and (val.y==0) and (val.z == 0))
 8004058:	edd7 7a00 	vldr	s15, [r7]
 800405c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	d105      	bne.n	8004072 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0x72>
 8004066:	edd7 7a01 	vldr	s15, [r7, #4]
 800406a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  {

	  }
	  double tilt_angle = asin(val.z/1)*180/3.14159265;
 8004072:	edd7 7a02 	vldr	s15, [r7, #8]
 8004076:	eeb0 0a67 	vmov.f32	s0, s15
 800407a:	f7fd f8cd 	bl	8001218 <_ZSt4asinf>
 800407e:	eef0 7a40 	vmov.f32	s15, s0
 8004082:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80040c8 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xc8>
 8004086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800408a:	ee17 0a90 	vmov	r0, s15
 800408e:	f7fc fa8d 	bl	80005ac <__aeabi_f2d>
 8004092:	a30b      	add	r3, pc, #44	; (adr r3, 80040c0 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xc0>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc fc0a 	bl	80008b0 <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  return tilt_angle;
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80040ac:	eeb0 0a47 	vmov.f32	s0, s14
 80040b0:	eef0 0a67 	vmov.f32	s1, s15
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040bc:	b004      	add	sp, #16
 80040be:	4770      	bx	lr
 80040c0:	53c8d4f1 	.word	0x53c8d4f1
 80040c4:	400921fb 	.word	0x400921fb
 80040c8:	43340000 	.word	0x43340000

080040cc <_ZN4Init14sensor_checkupE11ICM20948_WE>:

LightBarrierCheck sensor_checkup(ICM20948_WE myIMU)
{
 80040cc:	b084      	sub	sp, #16
 80040ce:	b5b0      	push	{r4, r5, r7, lr}
 80040d0:	b092      	sub	sp, #72	; 0x48
 80040d2:	af0e      	add	r7, sp, #56	; 0x38
 80040d4:	f107 0420 	add.w	r4, r7, #32
 80040d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LightBarrierCheck ret;
	  // Alle sensoren testen:
	  // Distanz-Sensor:
	  double tilt_angle = read_tilt_angle(myIMU);
 80040dc:	466d      	mov	r5, sp
 80040de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040f6:	f107 0320 	add.w	r3, r7, #32
 80040fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040fc:	f7ff ff80 	bl	8004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004100:	ed87 0b00 	vstr	d0, [r7]
	  if(read_tilt_angle(myIMU) > 0)
 8004104:	466d      	mov	r5, sp
 8004106:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800410a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800411a:	e885 0003 	stmia.w	r5, {r0, r1}
 800411e:	f107 0320 	add.w	r3, r7, #32
 8004122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004124:	f7ff ff6c 	bl	8004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004128:	ec51 0b10 	vmov	r0, r1, d0
 800412c:	2301      	movs	r3, #1
 800412e:	461c      	mov	r4, r3
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f7fc fd20 	bl	8000b7c <__aeabi_dcmpgt>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x7a>
 8004142:	2300      	movs	r3, #0
 8004144:	461c      	mov	r4, r3
 8004146:	b2e3      	uxtb	r3, r4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d033      	beq.n	80041b4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe8>
	  {
	  //	// Sensor senken, bis untere Kalibrierposition -30° erreicht ist
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004152:	483c      	ldr	r0, [pc, #240]	; (8004244 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8004154:	f001 fb4a 	bl	80057ec <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8004158:	2201      	movs	r2, #1
 800415a:	2104      	movs	r1, #4
 800415c:	483a      	ldr	r0, [pc, #232]	; (8004248 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 800415e:	f001 fb45 	bl	80057ec <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 8004162:	200a      	movs	r0, #10
 8004164:	f000 f8e6 	bl	8004334 <HAL_Delay>
	  	  ret = LightBarrierCheck::RightLBTriggered;
 8004168:	2301      	movs	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
	  	while(read_tilt_angle(myIMU) > -20);
 800416c:	466d      	mov	r5, sp
 800416e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004182:	e885 0003 	stmia.w	r5, {r0, r1}
 8004186:	f107 0320 	add.w	r3, r7, #32
 800418a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800418c:	f7ff ff38 	bl	8004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8004190:	ec51 0b10 	vmov	r0, r1, d0
 8004194:	2301      	movs	r3, #1
 8004196:	461c      	mov	r4, r3
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x180>)
 800419e:	f7fc fced 	bl	8000b7c <__aeabi_dcmpgt>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe0>
 80041a8:	2300      	movs	r3, #0
 80041aa:	461c      	mov	r4, r3
 80041ac:	b2e3      	uxtb	r3, r4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d034      	beq.n	800421c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 80041b2:	e7db      	b.n	800416c <_ZN4Init14sensor_checkupE11ICM20948_WE+0xa0>
	  }
	  else
	  {
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041ba:	4822      	ldr	r0, [pc, #136]	; (8004244 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 80041bc:	f001 fb16 	bl	80057ec <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2104      	movs	r1, #4
 80041c4:	4820      	ldr	r0, [pc, #128]	; (8004248 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 80041c6:	f001 fb11 	bl	80057ec <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 80041ca:	200a      	movs	r0, #10
 80041cc:	f000 f8b2 	bl	8004334 <HAL_Delay>

	  	  ret = LightBarrierCheck::LeftLBTriggered;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
	  //	// Sensor heben, bis obere Kalibrierposition erreicht ist:
	  	while(read_tilt_angle(myIMU) < 20);
 80041d4:	466d      	mov	r5, sp
 80041d6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80041da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ee:	f107 0320 	add.w	r3, r7, #32
 80041f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041f4:	f7ff ff04 	bl	8004000 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 80041f8:	ec51 0b10 	vmov	r0, r1, d0
 80041fc:	2301      	movs	r3, #1
 80041fe:	461c      	mov	r4, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x184>)
 8004206:	f7fc fc9b 	bl	8000b40 <__aeabi_dcmplt>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x148>
 8004210:	2300      	movs	r3, #0
 8004212:	461c      	mov	r4, r3
 8004214:	b2e3      	uxtb	r3, r4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d000      	beq.n	800421c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 800421a:	e7db      	b.n	80041d4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x108>
	  }
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004222:	4808      	ldr	r0, [pc, #32]	; (8004244 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8004224:	f001 fae2 	bl	80057ec <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8004228:	2200      	movs	r2, #0
 800422a:	2104      	movs	r1, #4
 800422c:	4806      	ldr	r0, [pc, #24]	; (8004248 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 800422e:	f001 fadd 	bl	80057ec <HAL_GPIO_WritePin>
	  	  return ret;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800423e:	b004      	add	sp, #16
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	48000800 	.word	0x48000800
 8004248:	48000c00 	.word	0x48000c00
 800424c:	c0340000 	.word	0xc0340000
 8004250:	40340000 	.word	0x40340000

08004254 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425e:	2003      	movs	r0, #3
 8004260:	f000 f994 	bl	800458c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004264:	2000      	movs	r0, #0
 8004266:	f000 f80d 	bl	8004284 <HAL_InitTick>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	e001      	b.n	800427a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004276:	f7fe fb09 	bl	800288c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800427a:	79fb      	ldrb	r3, [r7, #7]

}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_InitTick+0x68>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d022      	beq.n	80042de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_InitTick+0x6c>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_InitTick+0x68>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f9b2 	bl	8004616 <HAL_SYSTICK_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	d809      	bhi.n	80042d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042be:	2200      	movs	r2, #0
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c6:	f000 f96c 	bl	80045a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_InitTick+0x70>)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e007      	b.n	80042e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	e004      	b.n	80042e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e001      	b.n	80042e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000002c 	.word	0x2000002c
 80042f0:	20000024 	.word	0x20000024
 80042f4:	20000028 	.word	0x20000028

080042f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_IncTick+0x1c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_IncTick+0x20>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4413      	add	r3, r2
 8004306:	4a03      	ldr	r2, [pc, #12]	; (8004314 <HAL_IncTick+0x1c>)
 8004308:	6013      	str	r3, [r2, #0]
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000a04 	.word	0x20000a04
 8004318:	2000002c 	.word	0x2000002c

0800431c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return uwTick;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_GetTick+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000a04 	.word	0x20000a04

08004334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800433c:	f7ff ffee 	bl	800431c <HAL_GetTick>
 8004340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434c:	d004      	beq.n	8004358 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_Delay+0x40>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004358:	bf00      	nop
 800435a:	f7ff ffdf 	bl	800431c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	429a      	cmp	r2, r3
 8004368:	d8f7      	bhi.n	800435a <HAL_Delay+0x26>
  {
  }
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000002c 	.word	0x2000002c

08004378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <__NVIC_GetPriorityGrouping+0x18>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0307 	and.w	r3, r3, #7
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db0b      	blt.n	8004406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	f003 021f 	and.w	r2, r3, #31
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <__NVIC_EnableIRQ+0x38>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2001      	movs	r0, #1
 80043fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000e100 	.word	0xe000e100

08004418 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	2b00      	cmp	r3, #0
 8004428:	db12      	blt.n	8004450 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	f003 021f 	and.w	r2, r3, #31
 8004430:	490a      	ldr	r1, [pc, #40]	; (800445c <__NVIC_DisableIRQ+0x44>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2001      	movs	r0, #1
 800443a:	fa00 f202 	lsl.w	r2, r0, r2
 800443e:	3320      	adds	r3, #32
 8004440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004444:	f3bf 8f4f 	dsb	sy
}
 8004448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800444a:	f3bf 8f6f 	isb	sy
}
 800444e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100

08004460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	2b00      	cmp	r3, #0
 8004472:	db0a      	blt.n	800448a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	490c      	ldr	r1, [pc, #48]	; (80044ac <__NVIC_SetPriority+0x4c>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	440b      	add	r3, r1
 8004484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004488:	e00a      	b.n	80044a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4908      	ldr	r1, [pc, #32]	; (80044b0 <__NVIC_SetPriority+0x50>)
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	3b04      	subs	r3, #4
 8004498:	0112      	lsls	r2, r2, #4
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	440b      	add	r3, r1
 800449e:	761a      	strb	r2, [r3, #24]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000e100 	.word	0xe000e100
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f1c3 0307 	rsb	r3, r3, #7
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	bf28      	it	cs
 80044d2:	2304      	movcs	r3, #4
 80044d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3304      	adds	r3, #4
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d902      	bls.n	80044e4 <NVIC_EncodePriority+0x30>
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3b03      	subs	r3, #3
 80044e2:	e000      	b.n	80044e6 <NVIC_EncodePriority+0x32>
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	401a      	ands	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	43d9      	mvns	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	4313      	orrs	r3, r2
         );
}
 800450e:	4618      	mov	r0, r3
 8004510:	3724      	adds	r7, #36	; 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004520:	f3bf 8f4f 	dsb	sy
}
 8004524:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <__NVIC_SystemReset+0x24>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800452e:	4904      	ldr	r1, [pc, #16]	; (8004540 <__NVIC_SystemReset+0x24>)
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <__NVIC_SystemReset+0x28>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004536:	f3bf 8f4f 	dsb	sy
}
 800453a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <__NVIC_SystemReset+0x20>
 8004540:	e000ed00 	.word	0xe000ed00
 8004544:	05fa0004 	.word	0x05fa0004

08004548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004558:	d301      	bcc.n	800455e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455a:	2301      	movs	r3, #1
 800455c:	e00f      	b.n	800457e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <SysTick_Config+0x40>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004566:	210f      	movs	r1, #15
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	f7ff ff78 	bl	8004460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <SysTick_Config+0x40>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SysTick_Config+0x40>)
 8004578:	2207      	movs	r2, #7
 800457a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000e010 	.word	0xe000e010

0800458c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff feef 	bl	8004378 <__NVIC_SetPriorityGrouping>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b0:	f7ff ff06 	bl	80043c0 <__NVIC_GetPriorityGrouping>
 80045b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff7a 	bl	80044b4 <NVIC_EncodePriority>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff49 	bl	8004460 <__NVIC_SetPriority>
}
 80045ce:	bf00      	nop
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fef9 	bl	80043dc <__NVIC_EnableIRQ>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff09 	bl	8004418 <__NVIC_DisableIRQ>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004612:	f7ff ff83 	bl	800451c <__NVIC_SystemReset>

08004616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ff92 	bl	8004548 <SysTick_Config>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d005      	beq.n	8004652 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2204      	movs	r2, #4
 800464a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e037      	b.n	80046c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 020e 	bic.w	r2, r2, #14
 8004660:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f003 021f 	and.w	r2, r3, #31
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800469e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d00d      	beq.n	8004714 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2204      	movs	r2, #4
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e047      	b.n	80047a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 020e 	bic.w	r2, r2, #14
 8004722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004760:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004778:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004782:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
    }
  }
  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e147      	b.n	8004a52 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fe f87c 	bl	80028d4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0210 	bic.w	r2, r2, #16
 80047ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ec:	f7ff fd96 	bl	800431c <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80047f2:	e012      	b.n	800481a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047f4:	f7ff fd92 	bl	800431c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b0a      	cmp	r3, #10
 8004800:	d90b      	bls.n	800481a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2203      	movs	r2, #3
 8004812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e11b      	b.n	8004a52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b08      	cmp	r3, #8
 8004826:	d0e5      	beq.n	80047f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004838:	f7ff fd70 	bl	800431c <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800483e:	e012      	b.n	8004866 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004840:	f7ff fd6c 	bl	800431c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b0a      	cmp	r3, #10
 800484c:	d90b      	bls.n	8004866 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0f5      	b.n	8004a52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0e5      	beq.n	8004840 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0202 	orr.w	r2, r2, #2
 8004882:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a74      	ldr	r2, [pc, #464]	; (8004a5c <HAL_FDCAN_Init+0x2ac>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d103      	bne.n	8004896 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800488e:	4a74      	ldr	r2, [pc, #464]	; (8004a60 <HAL_FDCAN_Init+0x2b0>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c1b      	ldrb	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d108      	bne.n	80048b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	619a      	str	r2, [r3, #24]
 80048ae:	e007      	b.n	80048c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7c5b      	ldrb	r3, [r3, #17]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	e007      	b.n	80048ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7c9b      	ldrb	r3, [r3, #18]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d108      	bne.n	8004904 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004900:	619a      	str	r2, [r3, #24]
 8004902:	e007      	b.n	8004914 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004912:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004938:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0210 	bic.w	r2, r2, #16
 8004948:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d108      	bne.n	8004964 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0204 	orr.w	r2, r2, #4
 8004960:	619a      	str	r2, [r3, #24]
 8004962:	e02c      	b.n	80049be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d028      	beq.n	80049be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d01c      	beq.n	80049ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004982:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0210 	orr.w	r2, r2, #16
 8004992:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d110      	bne.n	80049be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0220 	orr.w	r2, r2, #32
 80049aa:	619a      	str	r2, [r3, #24]
 80049ac:	e007      	b.n	80049be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0220 	orr.w	r2, r2, #32
 80049bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	3b01      	subs	r3, #1
 80049e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f2:	d115      	bne.n	8004a20 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	3b01      	subs	r3, #1
 8004a00:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a02:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a0c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	3b01      	subs	r3, #1
 8004a16:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a1c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a1e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fc6e 	bl	8005318 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40006400 	.word	0x40006400
 8004a60:	40006500 	.word	0x40006500

08004a64 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a74:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <HAL_FDCAN_ConfigFilter+0x1e>
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d13d      	bne.n	8004afe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d119      	bne.n	8004abe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a96:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004a9e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e01d      	b.n	8004afa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	075a      	lsls	r2, r3, #29
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	079a      	lsls	r2, r3, #30
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3304      	adds	r3, #4
 8004af2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e006      	b.n	8004b0c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d116      	bne.n	8004b60 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	011a      	lsls	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	431a      	orrs	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e006      	b.n	8004b6e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d110      	bne.n	8004bb0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699a      	ldr	r2, [r3, #24]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e006      	b.n	8004bbe <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d12c      	bne.n	8004c3c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e023      	b.n	8004c4a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fbe9 	bl	80053f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2101      	movs	r1, #1
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	409a      	lsls	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e006      	b.n	8004c4a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c40:	f043 0208 	orr.w	r2, r3, #8
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b08b      	sub	sp, #44	; 0x2c
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c68:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004c6a:	7efb      	ldrb	r3, [r7, #27]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	f040 80bc 	bne.w	8004dea <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d121      	bne.n	8004cbc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0af      	b.n	8004df8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	440b      	add	r3, r1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e020      	b.n	8004cfe <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e08d      	b.n	8004df8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	0c9b      	lsrs	r3, r3, #18
 8004d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e005      	b.n	8004d2e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	3304      	adds	r3, #4
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	0e1b      	lsrs	r3, r3, #24
 8004d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0fda      	lsrs	r2, r3, #31
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	3304      	adds	r3, #4
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	e00a      	b.n	8004db8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	441a      	add	r2, r3
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	440b      	add	r3, r1
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	3301      	adds	r3, #1
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004dc0:	5cd3      	ldrb	r3, [r2, r3]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d3eb      	bcc.n	8004da2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d105      	bne.n	8004ddc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004dda:	e004      	b.n	8004de6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e006      	b.n	8004df8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	f043 0208 	orr.w	r2, r3, #8
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	372c      	adds	r7, #44	; 0x2c
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	08010be8 	.word	0x08010be8

08004e08 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e1a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <HAL_FDCAN_ActivateNotification+0x22>
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	f040 80c8 	bne.w	8004fba <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d03b      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d031      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d027      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01d      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d013      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13b      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d131      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d127      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11d      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d113      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0202 	orr.w	r2, r2, #2
 8004f68:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e006      	b.n	8004fc8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbe:	f043 0202 	orr.w	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	4013      	ands	r3, r2
 800500a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005016:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	4013      	ands	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800502e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005042:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005046:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4013      	ands	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f92e 	bl	80052da <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d014      	beq.n	80050c4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050a2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4013      	ands	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80050bc:	6939      	ldr	r1, [r7, #16]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8ec 	bl	800529c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80050d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8b6 	bl	8005246 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fd face 	bl	800268c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8ab 	bl	800525c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00e      	beq.n	8005132 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8a0 	bl	8005272 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005156:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f888 	bl	8005286 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800519a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f888 	bl	80052b2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f87c 	bl	80052c6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d011      	beq.n	8005200 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f876 	bl	8005302 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f858 	bl	80052ee <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800523e:	bf00      	nop
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005320:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005322:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2f      	ldr	r2, [pc, #188]	; (80053e8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d103      	bne.n	8005336 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005334:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005346:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005356:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	041a      	lsls	r2, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	061a      	lsls	r2, r3, #24
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e005      	b.n	80053ca <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3304      	adds	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3f3      	bcc.n	80053be <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	4000a400 	.word	0x4000a400
 80053e8:	40006800 	.word	0x40006800
 80053ec:	40006c00 	.word	0x40006c00

080053f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800540e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005416:	4313      	orrs	r3, r2
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	e00a      	b.n	8005432 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005424:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800542a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800542c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005430:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800543c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005442:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005448:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	440b      	add	r3, r1
 8005462:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	3304      	adds	r3, #4
 800546e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3304      	adds	r3, #4
 800547a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e020      	b.n	80054c4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	3303      	adds	r3, #3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	3302      	adds	r3, #2
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	440b      	add	r3, r1
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800549a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	3301      	adds	r3, #1
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	440b      	add	r3, r1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80054a8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	440a      	add	r2, r1
 80054b0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80054b2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3304      	adds	r3, #4
 80054bc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	3304      	adds	r3, #4
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80054cc:	5cd3      	ldrb	r3, [r2, r3]
 80054ce:	461a      	mov	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d3d5      	bcc.n	8005482 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3724      	adds	r7, #36	; 0x24
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	08010be8 	.word	0x08010be8

080054e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054f6:	e15a      	b.n	80057ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	2101      	movs	r1, #1
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 814c 	beq.w	80057a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d005      	beq.n	8005528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005524:	2b02      	cmp	r3, #2
 8005526:	d130      	bne.n	800558a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	2203      	movs	r2, #3
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4013      	ands	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800555e:	2201      	movs	r2, #1
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0201 	and.w	r2, r3, #1
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b03      	cmp	r3, #3
 8005594:	d017      	beq.n	80055c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d123      	bne.n	800561a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	08da      	lsrs	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3208      	adds	r2, #8
 80055da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	220f      	movs	r2, #15
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	08da      	lsrs	r2, r3, #3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3208      	adds	r2, #8
 8005614:	6939      	ldr	r1, [r7, #16]
 8005616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2203      	movs	r2, #3
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0203 	and.w	r2, r3, #3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80a6 	beq.w	80057a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565c:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <HAL_GPIO_Init+0x2e4>)
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	4a5a      	ldr	r2, [pc, #360]	; (80057cc <HAL_GPIO_Init+0x2e4>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6613      	str	r3, [r2, #96]	; 0x60
 8005668:	4b58      	ldr	r3, [pc, #352]	; (80057cc <HAL_GPIO_Init+0x2e4>)
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005674:	4a56      	ldr	r2, [pc, #344]	; (80057d0 <HAL_GPIO_Init+0x2e8>)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	3302      	adds	r3, #2
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800569e:	d01f      	beq.n	80056e0 <HAL_GPIO_Init+0x1f8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a4c      	ldr	r2, [pc, #304]	; (80057d4 <HAL_GPIO_Init+0x2ec>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d019      	beq.n	80056dc <HAL_GPIO_Init+0x1f4>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a4b      	ldr	r2, [pc, #300]	; (80057d8 <HAL_GPIO_Init+0x2f0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_GPIO_Init+0x1f0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a4a      	ldr	r2, [pc, #296]	; (80057dc <HAL_GPIO_Init+0x2f4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00d      	beq.n	80056d4 <HAL_GPIO_Init+0x1ec>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a49      	ldr	r2, [pc, #292]	; (80057e0 <HAL_GPIO_Init+0x2f8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <HAL_GPIO_Init+0x1e8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a48      	ldr	r2, [pc, #288]	; (80057e4 <HAL_GPIO_Init+0x2fc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_GPIO_Init+0x1e4>
 80056c8:	2305      	movs	r3, #5
 80056ca:	e00a      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056cc:	2306      	movs	r3, #6
 80056ce:	e008      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d0:	2304      	movs	r3, #4
 80056d2:	e006      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d4:	2303      	movs	r3, #3
 80056d6:	e004      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056d8:	2302      	movs	r3, #2
 80056da:	e002      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_GPIO_Init+0x1fa>
 80056e0:	2300      	movs	r3, #0
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	f002 0203 	and.w	r2, r2, #3
 80056e8:	0092      	lsls	r2, r2, #2
 80056ea:	4093      	lsls	r3, r2
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056f2:	4937      	ldr	r1, [pc, #220]	; (80057d0 <HAL_GPIO_Init+0x2e8>)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	3302      	adds	r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <HAL_GPIO_Init+0x300>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	43db      	mvns	r3, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4013      	ands	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005724:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <HAL_GPIO_Init+0x300>)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <HAL_GPIO_Init+0x300>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	43db      	mvns	r3, r3
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800574e:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <HAL_GPIO_Init+0x300>)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005754:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_GPIO_Init+0x300>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005778:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <HAL_GPIO_Init+0x300>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HAL_GPIO_Init+0x300>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057a2:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <HAL_GPIO_Init+0x300>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3301      	adds	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f ae9d 	bne.w	80054f8 <HAL_GPIO_Init+0x10>
  }
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40010000 	.word	0x40010000
 80057d4:	48000400 	.word	0x48000400
 80057d8:	48000800 	.word	0x48000800
 80057dc:	48000c00 	.word	0x48000c00
 80057e0:	48001000 	.word	0x48001000
 80057e4:	48001400 	.word	0x48001400
 80057e8:	40010400 	.word	0x40010400

080057ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005808:	e002      	b.n	8005810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800580a:	887a      	ldrh	r2, [r7, #2]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43d9      	mvns	r1, r3
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	400b      	ands	r3, r1
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800585a:	4b08      	ldr	r3, [pc, #32]	; (800587c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005866:	4a05      	ldr	r2, [pc, #20]	; (800587c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f806 	bl	8005880 <HAL_GPIO_EXTI_Callback>
  }
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40010400 	.word	0x40010400

08005880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e081      	b.n	80059ac <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fd f875 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2224      	movs	r2, #36	; 0x24
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800590c:	609a      	str	r2, [r3, #8]
 800590e:	e006      	b.n	800591e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800591c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d104      	bne.n	8005930 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005942:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005952:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69d9      	ldr	r1, [r3, #28]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	461a      	mov	r2, r3
 80059c0:	460b      	mov	r3, r1
 80059c2:	817b      	strh	r3, [r7, #10]
 80059c4:	4613      	mov	r3, r2
 80059c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	f040 80da 	bne.w	8005b8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_I2C_Master_Transmit+0x30>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0d3      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059ec:	f7fe fc96 	bl	800431c <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2319      	movs	r3, #25
 80059f8:	2201      	movs	r2, #1
 80059fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 faed 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0be      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2221      	movs	r2, #33	; 0x21
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2210      	movs	r2, #16
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	893a      	ldrh	r2, [r7, #8]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2bff      	cmp	r3, #255	; 0xff
 8005a3e:	d90e      	bls.n	8005a5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	8979      	ldrh	r1, [r7, #10]
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fce4 	bl	8006424 <I2C_TransferConfig>
 8005a5c:	e06c      	b.n	8005b38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	8979      	ldrh	r1, [r7, #10]
 8005a70:	4b48      	ldr	r3, [pc, #288]	; (8005b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fcd3 	bl	8006424 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a7e:	e05b      	b.n	8005b38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	6a39      	ldr	r1, [r7, #32]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 faea 	bl	800605e <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e07b      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d034      	beq.n	8005b38 <HAL_I2C_Master_Transmit+0x184>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d130      	bne.n	8005b38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fa7c 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e04d      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2bff      	cmp	r3, #255	; 0xff
 8005af8:	d90e      	bls.n	8005b18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	8979      	ldrh	r1, [r7, #10]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fc87 	bl	8006424 <I2C_TransferConfig>
 8005b16:	e00f      	b.n	8005b38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	8979      	ldrh	r1, [r7, #10]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fc76 	bl	8006424 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d19e      	bne.n	8005a80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	6a39      	ldr	r1, [r7, #32]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fac9 	bl	80060de <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e01a      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_I2C_Master_Transmit+0x1e4>)
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	80002000 	.word	0x80002000
 8005b98:	fe00e800 	.word	0xfe00e800

08005b9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	460b      	mov	r3, r1
 8005baa:	817b      	strh	r3, [r7, #10]
 8005bac:	4613      	mov	r3, r2
 8005bae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	f040 80db 	bne.w	8005d74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_I2C_Master_Receive+0x30>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e0d4      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bd4:	f7fe fba2 	bl	800431c <HAL_GetTick>
 8005bd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2319      	movs	r3, #25
 8005be0:	2201      	movs	r2, #1
 8005be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f9f9 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0bf      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2222      	movs	r2, #34	; 0x22
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2210      	movs	r2, #16
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	893a      	ldrh	r2, [r7, #8]
 8005c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2bff      	cmp	r3, #255	; 0xff
 8005c26:	d90e      	bls.n	8005c46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	22ff      	movs	r2, #255	; 0xff
 8005c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	8979      	ldrh	r1, [r7, #10]
 8005c36:	4b52      	ldr	r3, [pc, #328]	; (8005d80 <HAL_I2C_Master_Receive+0x1e4>)
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fbf0 	bl	8006424 <I2C_TransferConfig>
 8005c44:	e06d      	b.n	8005d22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	8979      	ldrh	r1, [r7, #10]
 8005c58:	4b49      	ldr	r3, [pc, #292]	; (8005d80 <HAL_I2C_Master_Receive+0x1e4>)
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fbdf 	bl	8006424 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005c66:	e05c      	b.n	8005d22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	6a39      	ldr	r1, [r7, #32]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa73 	bl	8006158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e07c      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d034      	beq.n	8005d22 <HAL_I2C_Master_Receive+0x186>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d130      	bne.n	8005d22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f987 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e04d      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2bff      	cmp	r3, #255	; 0xff
 8005ce2:	d90e      	bls.n	8005d02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	22ff      	movs	r2, #255	; 0xff
 8005ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	8979      	ldrh	r1, [r7, #10]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fb92 	bl	8006424 <I2C_TransferConfig>
 8005d00:	e00f      	b.n	8005d22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	2300      	movs	r3, #0
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fb81 	bl	8006424 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d19d      	bne.n	8005c68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f9d4 	bl	80060de <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e01a      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2220      	movs	r2, #32
 8005d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <HAL_I2C_Master_Receive+0x1e8>)
 8005d54:	400b      	ands	r3, r1
 8005d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	80002400 	.word	0x80002400
 8005d84:	fe00e800 	.word	0xfe00e800

08005d88 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	460b      	mov	r3, r1
 8005d96:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	f040 80f1 	bne.w	8005f8c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	d101      	bne.n	8005dbe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e0e7      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_I2C_IsDeviceReady+0x44>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0e0      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2224      	movs	r2, #36	; 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <HAL_I2C_IsDeviceReady+0x72>
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005df8:	e004      	b.n	8005e04 <HAL_I2C_IsDeviceReady+0x7c>
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e00:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fe fa87 	bl	800431c <HAL_GetTick>
 8005e0e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005e3c:	e034      	b.n	8005ea8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e44:	d01a      	beq.n	8005e7c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fe fa69 	bl	800431c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <HAL_I2C_IsDeviceReady+0xd4>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10f      	bne.n	8005e7c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e088      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <HAL_I2C_IsDeviceReady+0x12c>
 8005eae:	7fbb      	ldrb	r3, [r7, #30]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0c4      	beq.n	8005e3e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2120      	movs	r1, #32
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f886 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e058      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e04a      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	2120      	movs	r1, #32
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f86b 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e03d      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2210      	movs	r2, #16
 8005f18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d118      	bne.n	8005f5c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f38:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2200      	movs	r2, #0
 8005f42:	2120      	movs	r1, #32
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f84a 	bl	8005fde <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e01c      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	f63f af3b 	bhi.w	8005de2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d103      	bne.n	8005fb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d007      	beq.n	8005fd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	619a      	str	r2, [r3, #24]
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fee:	e022      	b.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d01e      	beq.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff8:	f7fe f990 	bl	800431c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d113      	bne.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e00f      	b.n	8006056 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d0cd      	beq.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800606a:	e02c      	b.n	80060c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f8eb 	bl	800624c <I2C_IsErrorOccurred>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e02a      	b.n	80060d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006086:	d01e      	beq.n	80060c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006088:	f7fe f948 	bl	800431c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e007      	b.n	80060d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d1cb      	bne.n	800606c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ea:	e028      	b.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f8ab 	bl	800624c <I2C_IsErrorOccurred>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e026      	b.n	800614e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006100:	f7fe f90c 	bl	800431c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d113      	bne.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e007      	b.n	800614e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d1cf      	bne.n	80060ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006164:	e064      	b.n	8006230 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f86e 	bl	800624c <I2C_IsErrorOccurred>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e062      	b.n	8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b20      	cmp	r3, #32
 8006186:	d138      	bne.n	80061fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d105      	bne.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e04e      	b.n	8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d107      	bne.n	80061c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44
 80061be:	e002      	b.n	80061c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2220      	movs	r2, #32
 80061cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80061da:	400b      	ands	r3, r1
 80061dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e022      	b.n	8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fe f88f 	bl	800431c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e007      	b.n	8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b04      	cmp	r3, #4
 800623c:	d193      	bne.n	8006166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	fe00e800 	.word	0xfe00e800

0800624c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d075      	beq.n	8006364 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2210      	movs	r2, #16
 800627e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006280:	e056      	b.n	8006330 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006288:	d052      	beq.n	8006330 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fe f847 	bl	800431c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_IsErrorOccurred+0x54>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d147      	bne.n	8006330 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c2:	d12e      	bne.n	8006322 <I2C_IsErrorOccurred+0xd6>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ca:	d02a      	beq.n	8006322 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d027      	beq.n	8006322 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062e2:	f7fe f81b 	bl	800431c <HAL_GetTick>
 80062e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062e8:	e01b      	b.n	8006322 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062ea:	f7fe f817 	bl	800431c <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b19      	cmp	r3, #25
 80062f6:	d914      	bls.n	8006322 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b20      	cmp	r3, #32
 800632e:	d1dc      	bne.n	80062ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b20      	cmp	r3, #32
 800633c:	d003      	beq.n	8006346 <I2C_IsErrorOccurred+0xfa>
 800633e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006342:	2b00      	cmp	r3, #0
 8006344:	d09d      	beq.n	8006282 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2220      	movs	r2, #32
 8006354:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f043 0304 	orr.w	r3, r3, #4
 800635c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006386:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f043 0308 	orr.w	r3, r3, #8
 800639e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80063d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01c      	beq.n	8006414 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff fddb 	bl	8005f96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <I2C_IsErrorOccurred+0x1d4>)
 80063ec:	400b      	ands	r3, r1
 80063ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006418:	4618      	mov	r0, r3
 800641a:	3728      	adds	r7, #40	; 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fe00e800 	.word	0xfe00e800

08006424 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	4613      	mov	r3, r2
 8006434:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800643c:	7a7b      	ldrb	r3, [r7, #9]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006444:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	4313      	orrs	r3, r2
 800644e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006452:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	0d5b      	lsrs	r3, r3, #21
 800645e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <I2C_TransferConfig+0x60>)
 8006464:	430b      	orrs	r3, r1
 8006466:	43db      	mvns	r3, r3
 8006468:	ea02 0103 	and.w	r1, r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	03ff63ff 	.word	0x03ff63ff

08006488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b20      	cmp	r3, #32
 800649c:	d138      	bne.n	8006510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e032      	b.n	8006512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2224      	movs	r2, #36	; 0x24
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6819      	ldr	r1, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b20      	cmp	r3, #32
 8006532:	d139      	bne.n	80065a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800653e:	2302      	movs	r3, #2
 8006540:	e033      	b.n	80065aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2224      	movs	r2, #36	; 0x24
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e000      	b.n	80065aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
  }
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d141      	bne.n	800664a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065c6:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d2:	d131      	bne.n	8006638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065d4:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065da:	4a46      	ldr	r2, [pc, #280]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065e4:	4b43      	ldr	r3, [pc, #268]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065ec:	4a41      	ldr	r2, [pc, #260]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065f4:	4b40      	ldr	r3, [pc, #256]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2232      	movs	r2, #50	; 0x32
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	4a3f      	ldr	r2, [pc, #252]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	0c9b      	lsrs	r3, r3, #18
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800660a:	e002      	b.n	8006612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b01      	subs	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006612:	4b38      	ldr	r3, [pc, #224]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d102      	bne.n	8006626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f2      	bne.n	800660c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006626:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d158      	bne.n	80066e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e057      	b.n	80066e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006638:	4b2e      	ldr	r3, [pc, #184]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663e:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006648:	e04d      	b.n	80066e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006650:	d141      	bne.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006652:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800665a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665e:	d131      	bne.n	80066c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006660:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006666:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006670:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006678:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800667e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006680:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2232      	movs	r2, #50	; 0x32
 8006686:	fb02 f303 	mul.w	r3, r2, r3
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	0c9b      	lsrs	r3, r3, #18
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006696:	e002      	b.n	800669e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d102      	bne.n	80066b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f2      	bne.n	8006698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066be:	d112      	bne.n	80066e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e011      	b.n	80066e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ca:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066d4:	e007      	b.n	80066e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066de:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	40007000 	.word	0x40007000
 80066f8:	20000024 	.word	0x20000024
 80066fc:	431bde83 	.word	0x431bde83

08006700 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800670a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800670e:	6093      	str	r3, [r2, #8]
}
 8006710:	bf00      	nop
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40007000 	.word	0x40007000

08006720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e306      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d075      	beq.n	800682a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673e:	4b97      	ldr	r3, [pc, #604]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006748:	4b94      	ldr	r3, [pc, #592]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b0c      	cmp	r3, #12
 8006756:	d102      	bne.n	800675e <HAL_RCC_OscConfig+0x3e>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d002      	beq.n	8006764 <HAL_RCC_OscConfig+0x44>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4b8d      	ldr	r3, [pc, #564]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05b      	beq.n	8006828 <HAL_RCC_OscConfig+0x108>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d157      	bne.n	8006828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e2e1      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d106      	bne.n	8006794 <HAL_RCC_OscConfig+0x74>
 8006786:	4b85      	ldr	r3, [pc, #532]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a84      	ldr	r2, [pc, #528]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x98>
 800679e:	4b7f      	ldr	r3, [pc, #508]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7e      	ldr	r2, [pc, #504]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b7c      	ldr	r3, [pc, #496]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a7b      	ldr	r2, [pc, #492]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 80067b8:	4b78      	ldr	r3, [pc, #480]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a77      	ldr	r2, [pc, #476]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b75      	ldr	r3, [pc, #468]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a74      	ldr	r2, [pc, #464]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fd fda0 	bl	800431c <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fd fd9c 	bl	800431c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e2a6      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f2:	4b6a      	ldr	r3, [pc, #424]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0xc0>
 80067fe:	e014      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006800:	f7fd fd8c 	bl	800431c <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006808:	f7fd fd88 	bl	800431c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	; 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e292      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800681a:	4b60      	ldr	r3, [pc, #384]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0xe8>
 8006826:	e000      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d075      	beq.n	8006922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006840:	4b56      	ldr	r3, [pc, #344]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d102      	bne.n	8006856 <HAL_RCC_OscConfig+0x136>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d002      	beq.n	800685c <HAL_RCC_OscConfig+0x13c>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b04      	cmp	r3, #4
 800685a:	d11f      	bne.n	800689c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685c:	4b4f      	ldr	r3, [pc, #316]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_RCC_OscConfig+0x154>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e265      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006874:	4b49      	ldr	r3, [pc, #292]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	061b      	lsls	r3, r3, #24
 8006882:	4946      	ldr	r1, [pc, #280]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006884:	4313      	orrs	r3, r2
 8006886:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006888:	4b45      	ldr	r3, [pc, #276]	; (80069a0 <HAL_RCC_OscConfig+0x280>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd fcf9 	bl	8004284 <HAL_InitTick>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d043      	beq.n	8006920 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e251      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d023      	beq.n	80068ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068a4:	4b3d      	ldr	r3, [pc, #244]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3c      	ldr	r2, [pc, #240]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fd fd34 	bl	800431c <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b8:	f7fd fd30 	bl	800431c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e23a      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ca:	4b34      	ldr	r3, [pc, #208]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d6:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	061b      	lsls	r3, r3, #24
 80068e4:	492d      	ldr	r1, [pc, #180]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	604b      	str	r3, [r1, #4]
 80068ea:	e01a      	b.n	8006922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ec:	4b2b      	ldr	r3, [pc, #172]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2a      	ldr	r2, [pc, #168]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 80068f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fd fd10 	bl	800431c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006900:	f7fd fd0c 	bl	800431c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e216      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x1e0>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d041      	beq.n	80069b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01c      	beq.n	8006970 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006936:	4b19      	ldr	r3, [pc, #100]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693c:	4a17      	ldr	r2, [pc, #92]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006946:	f7fd fce9 	bl	800431c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800694e:	f7fd fce5 	bl	800431c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e1ef      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006960:	4b0e      	ldr	r3, [pc, #56]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ef      	beq.n	800694e <HAL_RCC_OscConfig+0x22e>
 800696e:	e020      	b.n	80069b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <HAL_RCC_OscConfig+0x27c>)
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fd fccc 	bl	800431c <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006986:	e00d      	b.n	80069a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006988:	f7fd fcc8 	bl	800431c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d906      	bls.n	80069a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e1d2      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a4:	4b8c      	ldr	r3, [pc, #560]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 80069a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1ea      	bne.n	8006988 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80a6 	beq.w	8006b0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c0:	2300      	movs	r3, #0
 80069c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069c4:	4b84      	ldr	r3, [pc, #528]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_OscConfig+0x2b4>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_RCC_OscConfig+0x2b6>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	4b7f      	ldr	r3, [pc, #508]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	4a7e      	ldr	r2, [pc, #504]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 80069e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e4:	6593      	str	r3, [r2, #88]	; 0x58
 80069e6:	4b7c      	ldr	r3, [pc, #496]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069f2:	2301      	movs	r3, #1
 80069f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f6:	4b79      	ldr	r3, [pc, #484]	; (8006bdc <HAL_RCC_OscConfig+0x4bc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d118      	bne.n	8006a34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a02:	4b76      	ldr	r3, [pc, #472]	; (8006bdc <HAL_RCC_OscConfig+0x4bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a75      	ldr	r2, [pc, #468]	; (8006bdc <HAL_RCC_OscConfig+0x4bc>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0e:	f7fd fc85 	bl	800431c <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a16:	f7fd fc81 	bl	800431c <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e18b      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a28:	4b6c      	ldr	r3, [pc, #432]	; (8006bdc <HAL_RCC_OscConfig+0x4bc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d108      	bne.n	8006a4e <HAL_RCC_OscConfig+0x32e>
 8006a3c:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	4a65      	ldr	r2, [pc, #404]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a4c:	e024      	b.n	8006a98 <HAL_RCC_OscConfig+0x378>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d110      	bne.n	8006a78 <HAL_RCC_OscConfig+0x358>
 8006a56:	4b60      	ldr	r3, [pc, #384]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5c:	4a5e      	ldr	r2, [pc, #376]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a5e:	f043 0304 	orr.w	r3, r3, #4
 8006a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a66:	4b5c      	ldr	r3, [pc, #368]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6c:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a76:	e00f      	b.n	8006a98 <HAL_RCC_OscConfig+0x378>
 8006a78:	4b57      	ldr	r3, [pc, #348]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	4a56      	ldr	r2, [pc, #344]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a88:	4b53      	ldr	r3, [pc, #332]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	4a52      	ldr	r2, [pc, #328]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	f023 0304 	bic.w	r3, r3, #4
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d016      	beq.n	8006ace <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fd fc3c 	bl	800431c <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fd fc38 	bl	800431c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e140      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006abe:	4b46      	ldr	r3, [pc, #280]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0ed      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x388>
 8006acc:	e015      	b.n	8006afa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fd fc25 	bl	800431c <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad4:	e00a      	b.n	8006aec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fd fc21 	bl	800431c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e129      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ed      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006afa:	7ffb      	ldrb	r3, [r7, #31]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d105      	bne.n	8006b0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b00:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b04:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d03c      	beq.n	8006b92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01c      	beq.n	8006b5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b20:	4b2d      	ldr	r3, [pc, #180]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b26:	4a2c      	ldr	r2, [pc, #176]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fd fbf4 	bl	800431c <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b38:	f7fd fbf0 	bl	800431c <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e0fa      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0ef      	beq.n	8006b38 <HAL_RCC_OscConfig+0x418>
 8006b58:	e01b      	b.n	8006b92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fd fbd7 	bl	800431c <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b72:	f7fd fbd3 	bl	800431c <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0dd      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b84:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ef      	bne.n	8006b72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80d1 	beq.w	8006d3e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 030c 	and.w	r3, r3, #12
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	f000 808b 	beq.w	8006cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d15e      	bne.n	8006c70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <HAL_RCC_OscConfig+0x4b8>)
 8006bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbe:	f7fd fbad 	bl	800431c <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc4:	e00c      	b.n	8006be0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fd fba9 	bl	800431c <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d905      	bls.n	8006be0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0b3      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be0:	4b59      	ldr	r3, [pc, #356]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ec      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bec:	4b56      	ldr	r3, [pc, #344]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <HAL_RCC_OscConfig+0x62c>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6a11      	ldr	r1, [r2, #32]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bfc:	3a01      	subs	r2, #1
 8006bfe:	0112      	lsls	r2, r2, #4
 8006c00:	4311      	orrs	r1, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006c06:	0212      	lsls	r2, r2, #8
 8006c08:	4311      	orrs	r1, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c0e:	0852      	lsrs	r2, r2, #1
 8006c10:	3a01      	subs	r2, #1
 8006c12:	0552      	lsls	r2, r2, #21
 8006c14:	4311      	orrs	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c1a:	0852      	lsrs	r2, r2, #1
 8006c1c:	3a01      	subs	r2, #1
 8006c1e:	0652      	lsls	r2, r2, #25
 8006c20:	4311      	orrs	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c26:	06d2      	lsls	r2, r2, #27
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	4947      	ldr	r1, [pc, #284]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c30:	4b45      	ldr	r3, [pc, #276]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a44      	ldr	r2, [pc, #272]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c3c:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a41      	ldr	r2, [pc, #260]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fd fb68 	bl	800431c <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c50:	f7fd fb64 	bl	800431c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e06e      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c62:	4b39      	ldr	r3, [pc, #228]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x530>
 8006c6e:	e066      	b.n	8006d3e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c70:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c7c:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4a31      	ldr	r2, [pc, #196]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c88:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4a2e      	ldr	r2, [pc, #184]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006c8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fd fb40 	bl	800431c <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fd fb3c 	bl	800431c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e046      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x580>
 8006cbe:	e03e      	b.n	8006d3e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e039      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_RCC_OscConfig+0x628>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f003 0203 	and.w	r2, r3, #3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d12c      	bne.n	8006d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	3b01      	subs	r3, #1
 8006cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d123      	bne.n	8006d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d11b      	bne.n	8006d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d113      	bne.n	8006d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d109      	bne.n	8006d3a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	3b01      	subs	r3, #1
 8006d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d001      	beq.n	8006d3e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	019f800c 	.word	0x019f800c

08006d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e11e      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d68:	4b91      	ldr	r3, [pc, #580]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d910      	bls.n	8006d98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b8e      	ldr	r3, [pc, #568]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 020f 	bic.w	r2, r3, #15
 8006d7e:	498c      	ldr	r1, [pc, #560]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b8a      	ldr	r3, [pc, #552]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e106      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d073      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d129      	bne.n	8006e00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dac:	4b81      	ldr	r3, [pc, #516]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0f4      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006dbc:	f000 f99e 	bl	80070fc <RCC_GetSysClockFreqFromPLLSource>
 8006dc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4a7c      	ldr	r2, [pc, #496]	; (8006fb8 <HAL_RCC_ClockConfig+0x268>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d93f      	bls.n	8006e4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dca:	4b7a      	ldr	r3, [pc, #488]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d033      	beq.n	8006e4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d12f      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dea:	4b72      	ldr	r3, [pc, #456]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006df2:	4a70      	ldr	r2, [pc, #448]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	e024      	b.n	8006e4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e08:	4b6a      	ldr	r3, [pc, #424]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0c6      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e18:	4b66      	ldr	r3, [pc, #408]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0be      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e28:	f000 f8ce 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4a61      	ldr	r2, [pc, #388]	; (8006fb8 <HAL_RCC_ClockConfig+0x268>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d909      	bls.n	8006e4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e36:	4b5f      	ldr	r3, [pc, #380]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3e:	4a5d      	ldr	r2, [pc, #372]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e4a:	4b5a      	ldr	r3, [pc, #360]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 0203 	bic.w	r2, r3, #3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	4957      	ldr	r1, [pc, #348]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fd fa5e 	bl	800431c <HAL_GetTick>
 8006e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e62:	e00a      	b.n	8006e7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e64:	f7fd fa5a 	bl	800431c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e095      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7a:	4b4e      	ldr	r3, [pc, #312]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 020c 	and.w	r2, r3, #12
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d1eb      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d023      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ea4:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4a42      	ldr	r2, [pc, #264]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006eae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ebc:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ec4:	4a3b      	ldr	r2, [pc, #236]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ecc:	4b39      	ldr	r3, [pc, #228]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4936      	ldr	r1, [pc, #216]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d105      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ee6:	4b33      	ldr	r3, [pc, #204]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ef0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d21d      	bcs.n	8006f3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f00:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f023 020f 	bic.w	r2, r3, #15
 8006f08:	4929      	ldr	r1, [pc, #164]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f10:	f7fd fa04 	bl	800431c <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	e00a      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f18:	f7fd fa00 	bl	800431c <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e03b      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2e:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <HAL_RCC_ClockConfig+0x260>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1ed      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d008      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f48:	4b1a      	ldr	r3, [pc, #104]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4917      	ldr	r1, [pc, #92]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	490f      	ldr	r1, [pc, #60]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f7a:	f000 f825 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCC_ClockConfig+0x264>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	490c      	ldr	r1, [pc, #48]	; (8006fbc <HAL_RCC_ClockConfig+0x26c>)
 8006f8c:	5ccb      	ldrb	r3, [r1, r3]
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	fa22 f303 	lsr.w	r3, r2, r3
 8006f96:	4a0a      	ldr	r2, [pc, #40]	; (8006fc0 <HAL_RCC_ClockConfig+0x270>)
 8006f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <HAL_RCC_ClockConfig+0x274>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd f970 	bl	8004284 <HAL_InitTick>
 8006fa4:	4603      	mov	r3, r0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40022000 	.word	0x40022000
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	04c4b400 	.word	0x04c4b400
 8006fbc:	08010bd0 	.word	0x08010bd0
 8006fc0:	20000024 	.word	0x20000024
 8006fc4:	20000028 	.word	0x20000028

08006fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006fce:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d102      	bne.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fda:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	e047      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fe0:	4b27      	ldr	r3, [pc, #156]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d102      	bne.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fec:	4b26      	ldr	r3, [pc, #152]	; (8007088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	e03e      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d136      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ffe:	4b20      	ldr	r3, [pc, #128]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	3301      	adds	r3, #1
 8007014:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d10c      	bne.n	8007036 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_RCC_GetSysClockFreq+0xc0>)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007026:	68d2      	ldr	r2, [r2, #12]
 8007028:	0a12      	lsrs	r2, r2, #8
 800702a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	617b      	str	r3, [r7, #20]
      break;
 8007034:	e00c      	b.n	8007050 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007036:	4a13      	ldr	r2, [pc, #76]	; (8007084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	fbb2 f3f3 	udiv	r3, r2, r3
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007040:	68d2      	ldr	r2, [r2, #12]
 8007042:	0a12      	lsrs	r2, r2, #8
 8007044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	617b      	str	r3, [r7, #20]
      break;
 800704e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	0e5b      	lsrs	r3, r3, #25
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	3301      	adds	r3, #1
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	e001      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007070:	693b      	ldr	r3, [r7, #16]
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000
 8007084:	00f42400 	.word	0x00f42400
 8007088:	016e3600 	.word	0x016e3600

0800708c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007090:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007092:	681b      	ldr	r3, [r3, #0]
}
 8007094:	4618      	mov	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20000024 	.word	0x20000024

080070a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070a8:	f7ff fff0 	bl	800708c <HAL_RCC_GetHCLKFreq>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	4904      	ldr	r1, [pc, #16]	; (80070cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ba:	5ccb      	ldrb	r3, [r1, r3]
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40021000 	.word	0x40021000
 80070cc:	08010be0 	.word	0x08010be0

080070d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070d4:	f7ff ffda 	bl	800708c <HAL_RCC_GetHCLKFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	0adb      	lsrs	r3, r3, #11
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40021000 	.word	0x40021000
 80070f8:	08010be0 	.word	0x08010be0

080070fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b03      	cmp	r3, #3
 800711e:	d10c      	bne.n	800713a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800712a:	68d2      	ldr	r2, [r2, #12]
 800712c:	0a12      	lsrs	r2, r2, #8
 800712e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	617b      	str	r3, [r7, #20]
    break;
 8007138:	e00c      	b.n	8007154 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800713a:	4a12      	ldr	r2, [pc, #72]	; (8007184 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007142:	4a0e      	ldr	r2, [pc, #56]	; (800717c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007144:	68d2      	ldr	r2, [r2, #12]
 8007146:	0a12      	lsrs	r2, r2, #8
 8007148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]
    break;
 8007152:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	0e5b      	lsrs	r3, r3, #25
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	3301      	adds	r3, #1
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	fbb2 f3f3 	udiv	r3, r2, r3
 800716c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800716e:	687b      	ldr	r3, [r7, #4]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40021000 	.word	0x40021000
 8007180:	016e3600 	.word	0x016e3600
 8007184:	00f42400 	.word	0x00f42400

08007188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007190:	2300      	movs	r3, #0
 8007192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007194:	2300      	movs	r3, #0
 8007196:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8098 	beq.w	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071a6:	2300      	movs	r3, #0
 80071a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071aa:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10d      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b6:	4b40      	ldr	r3, [pc, #256]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ba:	4a3f      	ldr	r2, [pc, #252]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c0:	6593      	str	r3, [r2, #88]	; 0x58
 80071c2:	4b3d      	ldr	r3, [pc, #244]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ce:	2301      	movs	r3, #1
 80071d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071d2:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a39      	ldr	r2, [pc, #228]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071de:	f7fd f89d 	bl	800431c <HAL_GetTick>
 80071e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e4:	e009      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fd f899 	bl	800431c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d902      	bls.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	74fb      	strb	r3, [r7, #19]
        break;
 80071f8:	e005      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071fa:	4b30      	ldr	r3, [pc, #192]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ef      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007206:	7cfb      	ldrb	r3, [r7, #19]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d159      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01e      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	429a      	cmp	r2, r3
 8007226:	d019      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007228:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007232:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007234:	4b20      	ldr	r3, [pc, #128]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007244:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800724c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007254:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fd f859 	bl	800431c <HAL_GetTick>
 800726a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800726c:	e00b      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726e:	f7fd f855 	bl	800431c <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	; 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d902      	bls.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	74fb      	strb	r3, [r7, #19]
            break;
 8007284:	e006      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0ec      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	4903      	ldr	r1, [pc, #12]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072b0:	e008      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072b2:	7cfb      	ldrb	r3, [r7, #19]
 80072b4:	74bb      	strb	r3, [r7, #18]
 80072b6:	e005      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	7cfb      	ldrb	r3, [r7, #19]
 80072c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072c4:	7c7b      	ldrb	r3, [r7, #17]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d105      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ca:	4ba7      	ldr	r3, [pc, #668]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ce:	4aa6      	ldr	r2, [pc, #664]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072e2:	4ba1      	ldr	r3, [pc, #644]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f023 0203 	bic.w	r2, r3, #3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	499d      	ldr	r1, [pc, #628]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007304:	4b98      	ldr	r3, [pc, #608]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730a:	f023 020c 	bic.w	r2, r3, #12
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	4995      	ldr	r1, [pc, #596]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007326:	4b90      	ldr	r3, [pc, #576]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	498c      	ldr	r1, [pc, #560]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007348:	4b87      	ldr	r3, [pc, #540]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	4984      	ldr	r1, [pc, #528]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800736a:	4b7f      	ldr	r3, [pc, #508]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	497b      	ldr	r1, [pc, #492]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800738c:	4b76      	ldr	r3, [pc, #472]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	4973      	ldr	r1, [pc, #460]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739c:	4313      	orrs	r3, r2
 800739e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073ae:	4b6e      	ldr	r3, [pc, #440]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	496a      	ldr	r1, [pc, #424]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073d0:	4b65      	ldr	r3, [pc, #404]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	4962      	ldr	r1, [pc, #392]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073f2:	4b5d      	ldr	r3, [pc, #372]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	4959      	ldr	r1, [pc, #356]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007414:	4b54      	ldr	r3, [pc, #336]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800741a:	f023 0203 	bic.w	r2, r3, #3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	4951      	ldr	r1, [pc, #324]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007436:	4b4c      	ldr	r3, [pc, #304]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4948      	ldr	r1, [pc, #288]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007454:	2b00      	cmp	r3, #0
 8007456:	d015      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007458:	4b43      	ldr	r3, [pc, #268]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	4940      	ldr	r1, [pc, #256]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007476:	d105      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007478:	4b3b      	ldr	r3, [pc, #236]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007482:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748c:	2b00      	cmp	r3, #0
 800748e:	d015      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007490:	4b35      	ldr	r3, [pc, #212]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	4932      	ldr	r1, [pc, #200]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ae:	d105      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d015      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	4924      	ldr	r1, [pc, #144]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074e6:	d105      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074e8:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d015      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800751e:	d105      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	4a10      	ldr	r2, [pc, #64]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800752a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d019      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	4908      	ldr	r1, [pc, #32]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007556:	d109      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4a02      	ldr	r2, [pc, #8]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007562:	60d3      	str	r3, [r2, #12]
 8007564:	e002      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d015      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007578:	4b29      	ldr	r3, [pc, #164]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	4926      	ldr	r1, [pc, #152]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007596:	d105      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007598:	4b21      	ldr	r3, [pc, #132]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800759e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d015      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80075b0:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075be:	4918      	ldr	r1, [pc, #96]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ce:	d105      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075d0:	4b13      	ldr	r3, [pc, #76]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4a12      	ldr	r2, [pc, #72]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	490a      	ldr	r1, [pc, #40]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007606:	d105      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007612:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007614:	7cbb      	ldrb	r3, [r7, #18]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40021000 	.word	0x40021000

08007624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e049      	b.n	80076ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fb fa08 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f000 fbd2 	bl	8007e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e049      	b.n	8007778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f841 	bl	8007780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f000 fb7b 	bl	8007e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <HAL_TIM_PWM_Start+0x24>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	e03c      	b.n	8007832 <HAL_TIM_PWM_Start+0x9e>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d109      	bne.n	80077d2 <HAL_TIM_PWM_Start+0x3e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	e02f      	b.n	8007832 <HAL_TIM_PWM_Start+0x9e>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d109      	bne.n	80077ec <HAL_TIM_PWM_Start+0x58>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e022      	b.n	8007832 <HAL_TIM_PWM_Start+0x9e>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b0c      	cmp	r3, #12
 80077f0:	d109      	bne.n	8007806 <HAL_TIM_PWM_Start+0x72>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	e015      	b.n	8007832 <HAL_TIM_PWM_Start+0x9e>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d109      	bne.n	8007820 <HAL_TIM_PWM_Start+0x8c>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e008      	b.n	8007832 <HAL_TIM_PWM_Start+0x9e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	bf14      	ite	ne
 800782c:	2301      	movne	r3, #1
 800782e:	2300      	moveq	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e0a6      	b.n	8007988 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <HAL_TIM_PWM_Start+0xb6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007848:	e023      	b.n	8007892 <HAL_TIM_PWM_Start+0xfe>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b04      	cmp	r3, #4
 800784e:	d104      	bne.n	800785a <HAL_TIM_PWM_Start+0xc6>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007858:	e01b      	b.n	8007892 <HAL_TIM_PWM_Start+0xfe>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d104      	bne.n	800786a <HAL_TIM_PWM_Start+0xd6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007868:	e013      	b.n	8007892 <HAL_TIM_PWM_Start+0xfe>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	d104      	bne.n	800787a <HAL_TIM_PWM_Start+0xe6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007878:	e00b      	b.n	8007892 <HAL_TIM_PWM_Start+0xfe>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b10      	cmp	r3, #16
 800787e:	d104      	bne.n	800788a <HAL_TIM_PWM_Start+0xf6>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007888:	e003      	b.n	8007892 <HAL_TIM_PWM_Start+0xfe>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 ff24 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a3a      	ldr	r2, [pc, #232]	; (8007990 <HAL_TIM_PWM_Start+0x1fc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_TIM_PWM_Start+0x148>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a39      	ldr	r2, [pc, #228]	; (8007994 <HAL_TIM_PWM_Start+0x200>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_TIM_PWM_Start+0x148>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a37      	ldr	r2, [pc, #220]	; (8007998 <HAL_TIM_PWM_Start+0x204>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_TIM_PWM_Start+0x148>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a36      	ldr	r2, [pc, #216]	; (800799c <HAL_TIM_PWM_Start+0x208>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_TIM_PWM_Start+0x148>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a34      	ldr	r2, [pc, #208]	; (80079a0 <HAL_TIM_PWM_Start+0x20c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_PWM_Start+0x148>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a33      	ldr	r2, [pc, #204]	; (80079a4 <HAL_TIM_PWM_Start+0x210>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d101      	bne.n	80078e0 <HAL_TIM_PWM_Start+0x14c>
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <HAL_TIM_PWM_Start+0x14e>
 80078e0:	2300      	movs	r3, #0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a25      	ldr	r2, [pc, #148]	; (8007990 <HAL_TIM_PWM_Start+0x1fc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d022      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007908:	d01d      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a26      	ldr	r2, [pc, #152]	; (80079a8 <HAL_TIM_PWM_Start+0x214>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a24      	ldr	r2, [pc, #144]	; (80079ac <HAL_TIM_PWM_Start+0x218>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a23      	ldr	r2, [pc, #140]	; (80079b0 <HAL_TIM_PWM_Start+0x21c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <HAL_TIM_PWM_Start+0x200>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <HAL_TIM_PWM_Start+0x204>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <HAL_TIM_PWM_Start+0x1b2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <HAL_TIM_PWM_Start+0x210>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d115      	bne.n	8007972 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <HAL_TIM_PWM_Start+0x220>)
 800794e:	4013      	ands	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b06      	cmp	r3, #6
 8007956:	d015      	beq.n	8007984 <HAL_TIM_PWM_Start+0x1f0>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795e:	d011      	beq.n	8007984 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007970:	e008      	b.n	8007984 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e000      	b.n	8007986 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40012c00 	.word	0x40012c00
 8007994:	40013400 	.word	0x40013400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800
 80079a4:	40015000 	.word	0x40015000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	00010007 	.word	0x00010007

080079b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e0ff      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b14      	cmp	r3, #20
 80079e2:	f200 80f0 	bhi.w	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007bc7 	.word	0x08007bc7
 80079f4:	08007bc7 	.word	0x08007bc7
 80079f8:	08007bc7 	.word	0x08007bc7
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007bc7 	.word	0x08007bc7
 8007a04:	08007bc7 	.word	0x08007bc7
 8007a08:	08007bc7 	.word	0x08007bc7
 8007a0c:	08007ac3 	.word	0x08007ac3
 8007a10:	08007bc7 	.word	0x08007bc7
 8007a14:	08007bc7 	.word	0x08007bc7
 8007a18:	08007bc7 	.word	0x08007bc7
 8007a1c:	08007b03 	.word	0x08007b03
 8007a20:	08007bc7 	.word	0x08007bc7
 8007a24:	08007bc7 	.word	0x08007bc7
 8007a28:	08007bc7 	.word	0x08007bc7
 8007a2c:	08007b45 	.word	0x08007b45
 8007a30:	08007bc7 	.word	0x08007bc7
 8007a34:	08007bc7 	.word	0x08007bc7
 8007a38:	08007bc7 	.word	0x08007bc7
 8007a3c:	08007b85 	.word	0x08007b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fa88 	bl	8007f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0208 	orr.w	r2, r2, #8
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0204 	bic.w	r2, r2, #4
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	619a      	str	r2, [r3, #24]
      break;
 8007a7e:	e0a5      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fb02 	bl	8008090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6999      	ldr	r1, [r3, #24]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	021a      	lsls	r2, r3, #8
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	619a      	str	r2, [r3, #24]
      break;
 8007ac0:	e084      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fb75 	bl	80081b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0204 	bic.w	r2, r2, #4
 8007aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69d9      	ldr	r1, [r3, #28]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	61da      	str	r2, [r3, #28]
      break;
 8007b00:	e064      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fbe7 	bl	80082dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	021a      	lsls	r2, r3, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	61da      	str	r2, [r3, #28]
      break;
 8007b42:	e043      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fc5a 	bl	8008404 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0208 	orr.w	r2, r2, #8
 8007b5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0204 	bic.w	r2, r2, #4
 8007b6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007b82:	e023      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fca4 	bl	80084d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	021a      	lsls	r2, r3, #8
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007bc4:	e002      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e0f6      	b.n	8007dea <HAL_TIM_ConfigClockSource+0x20a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6f      	ldr	r2, [pc, #444]	; (8007df4 <HAL_TIM_ConfigClockSource+0x214>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	f000 80c1 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c3c:	4a6d      	ldr	r2, [pc, #436]	; (8007df4 <HAL_TIM_ConfigClockSource+0x214>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	f200 80c6 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c44:	4a6c      	ldr	r2, [pc, #432]	; (8007df8 <HAL_TIM_ConfigClockSource+0x218>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f000 80b9 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c4c:	4a6a      	ldr	r2, [pc, #424]	; (8007df8 <HAL_TIM_ConfigClockSource+0x218>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f200 80be 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c54:	4a69      	ldr	r2, [pc, #420]	; (8007dfc <HAL_TIM_ConfigClockSource+0x21c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	f000 80b1 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c5c:	4a67      	ldr	r2, [pc, #412]	; (8007dfc <HAL_TIM_ConfigClockSource+0x21c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	f200 80b6 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c64:	4a66      	ldr	r2, [pc, #408]	; (8007e00 <HAL_TIM_ConfigClockSource+0x220>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	f000 80a9 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c6c:	4a64      	ldr	r2, [pc, #400]	; (8007e00 <HAL_TIM_ConfigClockSource+0x220>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	f200 80ae 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c74:	4a63      	ldr	r2, [pc, #396]	; (8007e04 <HAL_TIM_ConfigClockSource+0x224>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	f000 80a1 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c7c:	4a61      	ldr	r2, [pc, #388]	; (8007e04 <HAL_TIM_ConfigClockSource+0x224>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	f200 80a6 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c84:	4a60      	ldr	r2, [pc, #384]	; (8007e08 <HAL_TIM_ConfigClockSource+0x228>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	f000 8099 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c8c:	4a5e      	ldr	r2, [pc, #376]	; (8007e08 <HAL_TIM_ConfigClockSource+0x228>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	f200 809e 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c98:	f000 8091 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007c9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ca0:	f200 8096 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca8:	f000 8089 	beq.w	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb0:	f200 808e 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb8:	d03e      	beq.n	8007d38 <HAL_TIM_ConfigClockSource+0x158>
 8007cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cbe:	f200 8087 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc6:	f000 8086 	beq.w	8007dd6 <HAL_TIM_ConfigClockSource+0x1f6>
 8007cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cce:	d87f      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cd0:	2b70      	cmp	r3, #112	; 0x70
 8007cd2:	d01a      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x12a>
 8007cd4:	2b70      	cmp	r3, #112	; 0x70
 8007cd6:	d87b      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cd8:	2b60      	cmp	r3, #96	; 0x60
 8007cda:	d050      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x19e>
 8007cdc:	2b60      	cmp	r3, #96	; 0x60
 8007cde:	d877      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ce0:	2b50      	cmp	r3, #80	; 0x50
 8007ce2:	d03c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x17e>
 8007ce4:	2b50      	cmp	r3, #80	; 0x50
 8007ce6:	d873      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	d058      	beq.n	8007d9e <HAL_TIM_ConfigClockSource+0x1be>
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d86f      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d064      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007cf4:	2b30      	cmp	r3, #48	; 0x30
 8007cf6:	d86b      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d060      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d867      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d05c      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d05a      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x1de>
 8007d08:	e062      	b.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6899      	ldr	r1, [r3, #8]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f000 fcc5 	bl	80086a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	609a      	str	r2, [r3, #8]
      break;
 8007d36:	e04f      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6899      	ldr	r1, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f000 fcae 	bl	80086a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d5a:	609a      	str	r2, [r3, #8]
      break;
 8007d5c:	e03c      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6859      	ldr	r1, [r3, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f000 fc20 	bl	80085b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2150      	movs	r1, #80	; 0x50
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fc79 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007d7c:	e02c      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6859      	ldr	r1, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f000 fc3f 	bl	800860e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2160      	movs	r1, #96	; 0x60
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fc69 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007d9c:	e01c      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	6859      	ldr	r1, [r3, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f000 fc00 	bl	80085b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2140      	movs	r1, #64	; 0x40
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fc59 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007dbc:	e00c      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f000 fc50 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007dce:	e003      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd4:	e000      	b.n	8007dd8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	00100070 	.word	0x00100070
 8007df8:	00100060 	.word	0x00100060
 8007dfc:	00100050 	.word	0x00100050
 8007e00:	00100040 	.word	0x00100040
 8007e04:	00100030 	.word	0x00100030
 8007e08:	00100020 	.word	0x00100020

08007e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a46      	ldr	r2, [pc, #280]	; (8007f38 <TIM_Base_SetConfig+0x12c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d017      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d013      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a43      	ldr	r2, [pc, #268]	; (8007f3c <TIM_Base_SetConfig+0x130>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a42      	ldr	r2, [pc, #264]	; (8007f40 <TIM_Base_SetConfig+0x134>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a41      	ldr	r2, [pc, #260]	; (8007f44 <TIM_Base_SetConfig+0x138>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <TIM_Base_SetConfig+0x13c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0x48>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3f      	ldr	r2, [pc, #252]	; (8007f4c <TIM_Base_SetConfig+0x140>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d108      	bne.n	8007e66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a33      	ldr	r2, [pc, #204]	; (8007f38 <TIM_Base_SetConfig+0x12c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d023      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e74:	d01f      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <TIM_Base_SetConfig+0x130>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d01b      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2f      	ldr	r2, [pc, #188]	; (8007f40 <TIM_Base_SetConfig+0x134>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d017      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2e      	ldr	r2, [pc, #184]	; (8007f44 <TIM_Base_SetConfig+0x138>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2d      	ldr	r2, [pc, #180]	; (8007f48 <TIM_Base_SetConfig+0x13c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2d      	ldr	r2, [pc, #180]	; (8007f50 <TIM_Base_SetConfig+0x144>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2c      	ldr	r2, [pc, #176]	; (8007f54 <TIM_Base_SetConfig+0x148>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2b      	ldr	r2, [pc, #172]	; (8007f58 <TIM_Base_SetConfig+0x14c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_Base_SetConfig+0xaa>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a26      	ldr	r2, [pc, #152]	; (8007f4c <TIM_Base_SetConfig+0x140>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d108      	bne.n	8007ec8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a12      	ldr	r2, [pc, #72]	; (8007f38 <TIM_Base_SetConfig+0x12c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <TIM_Base_SetConfig+0x110>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <TIM_Base_SetConfig+0x13c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0x110>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a14      	ldr	r2, [pc, #80]	; (8007f50 <TIM_Base_SetConfig+0x144>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0x110>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <TIM_Base_SetConfig+0x148>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0x110>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a12      	ldr	r2, [pc, #72]	; (8007f58 <TIM_Base_SetConfig+0x14c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0x110>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <TIM_Base_SetConfig+0x140>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d103      	bne.n	8007f24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	615a      	str	r2, [r3, #20]
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40015000 	.word	0x40015000
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800

08007f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0302 	bic.w	r3, r3, #2
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a30      	ldr	r2, [pc, #192]	; (8008078 <TIM_OC1_SetConfig+0x11c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2f      	ldr	r2, [pc, #188]	; (800807c <TIM_OC1_SetConfig+0x120>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a2e      	ldr	r2, [pc, #184]	; (8008080 <TIM_OC1_SetConfig+0x124>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <TIM_OC1_SetConfig+0x128>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <TIM_OC1_SetConfig+0x12c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a2b      	ldr	r2, [pc, #172]	; (800808c <TIM_OC1_SetConfig+0x130>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d10c      	bne.n	8007ffe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0308 	bic.w	r3, r3, #8
 8007fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f023 0304 	bic.w	r3, r3, #4
 8007ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1d      	ldr	r2, [pc, #116]	; (8008078 <TIM_OC1_SetConfig+0x11c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1c      	ldr	r2, [pc, #112]	; (800807c <TIM_OC1_SetConfig+0x120>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00f      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <TIM_OC1_SetConfig+0x124>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <TIM_OC1_SetConfig+0x128>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <TIM_OC1_SetConfig+0x12c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a18      	ldr	r2, [pc, #96]	; (800808c <TIM_OC1_SetConfig+0x130>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d111      	bne.n	8008052 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	621a      	str	r2, [r3, #32]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40013400 	.word	0x40013400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800
 800808c:	40015000 	.word	0x40015000

08008090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f023 0210 	bic.w	r2, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0320 	bic.w	r3, r3, #32
 80080de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a2c      	ldr	r2, [pc, #176]	; (80081a0 <TIM_OC2_SetConfig+0x110>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_OC2_SetConfig+0x74>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2b      	ldr	r2, [pc, #172]	; (80081a4 <TIM_OC2_SetConfig+0x114>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC2_SetConfig+0x74>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <TIM_OC2_SetConfig+0x118>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10d      	bne.n	8008120 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <TIM_OC2_SetConfig+0x110>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1e      	ldr	r2, [pc, #120]	; (80081a4 <TIM_OC2_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00f      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1e      	ldr	r2, [pc, #120]	; (80081ac <TIM_OC2_SetConfig+0x11c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00b      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1d      	ldr	r2, [pc, #116]	; (80081b0 <TIM_OC2_SetConfig+0x120>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d007      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1c      	ldr	r2, [pc, #112]	; (80081b4 <TIM_OC2_SetConfig+0x124>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <TIM_OC2_SetConfig+0x118>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d113      	bne.n	8008178 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40015000 	.word	0x40015000
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40014400 	.word	0x40014400
 80081b4:	40014800 	.word	0x40014800

080081b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2b      	ldr	r2, [pc, #172]	; (80082c4 <TIM_OC3_SetConfig+0x10c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d007      	beq.n	800822a <TIM_OC3_SetConfig+0x72>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2a      	ldr	r2, [pc, #168]	; (80082c8 <TIM_OC3_SetConfig+0x110>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d003      	beq.n	800822a <TIM_OC3_SetConfig+0x72>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a29      	ldr	r2, [pc, #164]	; (80082cc <TIM_OC3_SetConfig+0x114>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10d      	bne.n	8008246 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1e      	ldr	r2, [pc, #120]	; (80082c4 <TIM_OC3_SetConfig+0x10c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d013      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <TIM_OC3_SetConfig+0x110>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00f      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1d      	ldr	r2, [pc, #116]	; (80082d0 <TIM_OC3_SetConfig+0x118>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00b      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1c      	ldr	r2, [pc, #112]	; (80082d4 <TIM_OC3_SetConfig+0x11c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1b      	ldr	r2, [pc, #108]	; (80082d8 <TIM_OC3_SetConfig+0x120>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a16      	ldr	r2, [pc, #88]	; (80082cc <TIM_OC3_SetConfig+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d113      	bne.n	800829e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	621a      	str	r2, [r3, #32]
}
 80082b8:	bf00      	nop
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	40012c00 	.word	0x40012c00
 80082c8:	40013400 	.word	0x40013400
 80082cc:	40015000 	.word	0x40015000
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800

080082dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800830a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800832a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a2c      	ldr	r2, [pc, #176]	; (80083ec <TIM_OC4_SetConfig+0x110>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_OC4_SetConfig+0x74>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <TIM_OC4_SetConfig+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x74>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <TIM_OC4_SetConfig+0x118>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800836a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1f      	ldr	r2, [pc, #124]	; (80083ec <TIM_OC4_SetConfig+0x110>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <TIM_OC4_SetConfig+0x114>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00f      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a1e      	ldr	r2, [pc, #120]	; (80083f8 <TIM_OC4_SetConfig+0x11c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00b      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1d      	ldr	r2, [pc, #116]	; (80083fc <TIM_OC4_SetConfig+0x120>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d007      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <TIM_OC4_SetConfig+0x124>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d003      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <TIM_OC4_SetConfig+0x118>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d113      	bne.n	80083c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	019b      	lsls	r3, r3, #6
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	019b      	lsls	r3, r3, #6
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40012c00 	.word	0x40012c00
 80083f0:	40013400 	.word	0x40013400
 80083f4:	40015000 	.word	0x40015000
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40014400 	.word	0x40014400
 8008400:	40014800 	.word	0x40014800

08008404 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a19      	ldr	r2, [pc, #100]	; (80084c0 <TIM_OC5_SetConfig+0xbc>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <TIM_OC5_SetConfig+0xc0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <TIM_OC5_SetConfig+0xc4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <TIM_OC5_SetConfig+0xc8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a15      	ldr	r2, [pc, #84]	; (80084d0 <TIM_OC5_SetConfig+0xcc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <TIM_OC5_SetConfig+0xd0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d109      	bne.n	800849a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800848c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	621a      	str	r2, [r3, #32]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800
 80084d4:	40015000 	.word	0x40015000

080084d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800851e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	051b      	lsls	r3, r3, #20
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1a      	ldr	r2, [pc, #104]	; (8008598 <TIM_OC6_SetConfig+0xc0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d013      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a19      	ldr	r2, [pc, #100]	; (800859c <TIM_OC6_SetConfig+0xc4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00f      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a18      	ldr	r2, [pc, #96]	; (80085a0 <TIM_OC6_SetConfig+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00b      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a17      	ldr	r2, [pc, #92]	; (80085a4 <TIM_OC6_SetConfig+0xcc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d007      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a16      	ldr	r2, [pc, #88]	; (80085a8 <TIM_OC6_SetConfig+0xd0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	; (80085ac <TIM_OC6_SetConfig+0xd4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d109      	bne.n	8008570 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40012c00 	.word	0x40012c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40014400 	.word	0x40014400
 80085a8:	40014800 	.word	0x40014800
 80085ac:	40015000 	.word	0x40015000

080085b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f023 0201 	bic.w	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f023 030a 	bic.w	r3, r3, #10
 80085ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	621a      	str	r2, [r3, #32]
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860e:	b480      	push	{r7}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f023 0210 	bic.w	r2, r3, #16
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	031b      	lsls	r3, r3, #12
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800864a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	bf00      	nop
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	f043 0307 	orr.w	r3, r3, #7
 8008694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2201      	movs	r2, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	43db      	mvns	r3, r3
 800870a:	401a      	ands	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008748:	2302      	movs	r3, #2
 800874a:	e074      	b.n	8008836 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a34      	ldr	r2, [pc, #208]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a33      	ldr	r2, [pc, #204]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a31      	ldr	r2, [pc, #196]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d108      	bne.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a21      	ldr	r2, [pc, #132]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d022      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087cc:	d01d      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d018      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d013      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00e      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d009      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a11      	ldr	r2, [pc, #68]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d10c      	bne.n	8008824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4313      	orrs	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40012c00 	.word	0x40012c00
 8008848:	40013400 	.word	0x40013400
 800884c:	40015000 	.word	0x40015000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40014000 	.word	0x40014000

08008860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e042      	b.n	80088f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fa f943 	bl	8002b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2224      	movs	r2, #36	; 0x24
 800888e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0201 	bic.w	r2, r2, #1
 80088a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fcee 	bl	8009284 <UART_SetConfig>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e022      	b.n	80088f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 ffde 	bl	800987c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0201 	orr.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f865 	bl	80099c0 <UART_CheckIdleState>
 80088f6:	4603      	mov	r3, r0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	2b20      	cmp	r3, #32
 8008918:	f040 8083 	bne.w	8008a22 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_UART_Transmit+0x28>
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e07b      	b.n	8008a24 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_UART_Transmit+0x3a>
 8008936:	2302      	movs	r3, #2
 8008938:	e074      	b.n	8008a24 <HAL_UART_Transmit+0x124>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2221      	movs	r2, #33	; 0x21
 800894e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008952:	f7fb fce3 	bl	800431c <HAL_GetTick>
 8008956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	88fa      	ldrh	r2, [r7, #6]
 8008964:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	d108      	bne.n	8008984 <HAL_UART_Transmit+0x84>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d104      	bne.n	8008984 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e003      	b.n	800898c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008994:	e02c      	b.n	80089f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 f858 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e039      	b.n	8008a24 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	3302      	adds	r3, #2
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	e007      	b.n	80089de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1cc      	bne.n	8008996 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2200      	movs	r2, #0
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f001 f825 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e006      	b.n	8008a24 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e000      	b.n	8008a24 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a22:	2302      	movs	r3, #2
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3720      	adds	r7, #32
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b091      	sub	sp, #68	; 0x44
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a40:	2b20      	cmp	r3, #32
 8008a42:	f040 808c 	bne.w	8008b5e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_UART_Transmit_IT+0x26>
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e084      	b.n	8008b60 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_UART_Transmit_IT+0x38>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e07d      	b.n	8008b60 <HAL_UART_Transmit_IT+0x134>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	88fa      	ldrh	r2, [r7, #6]
 8008a76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	88fa      	ldrh	r2, [r7, #6]
 8008a7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2221      	movs	r2, #33	; 0x21
 8008a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa0:	d12e      	bne.n	8008b00 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aaa:	d107      	bne.n	8008abc <HAL_UART_Transmit_IT+0x90>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d103      	bne.n	8008abc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a2d      	ldr	r2, [pc, #180]	; (8008b6c <HAL_UART_Transmit_IT+0x140>)
 8008ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8008aba:	e002      	b.n	8008ac2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a2c      	ldr	r2, [pc, #176]	; (8008b70 <HAL_UART_Transmit_IT+0x144>)
 8008ac0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aea:	637a      	str	r2, [r7, #52]	; 0x34
 8008aec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <HAL_UART_Transmit_IT+0x9e>
 8008afe:	e02c      	b.n	8008b5a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b08:	d107      	bne.n	8008b1a <HAL_UART_Transmit_IT+0xee>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a17      	ldr	r2, [pc, #92]	; (8008b74 <HAL_UART_Transmit_IT+0x148>)
 8008b16:	675a      	str	r2, [r3, #116]	; 0x74
 8008b18:	e002      	b.n	8008b20 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <HAL_UART_Transmit_IT+0x14c>)
 8008b1e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	613b      	str	r3, [r7, #16]
   return(result);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b46:	623b      	str	r3, [r7, #32]
 8008b48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	69f9      	ldr	r1, [r7, #28]
 8008b4c:	6a3a      	ldr	r2, [r7, #32]
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e6      	bne.n	8008b28 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e000      	b.n	8008b60 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008b5e:	2302      	movs	r3, #2
  }
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3744      	adds	r7, #68	; 0x44
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	0800a18f 	.word	0x0800a18f
 8008b70:	0800a0af 	.word	0x0800a0af
 8008b74:	08009fed 	.word	0x08009fed
 8008b78:	08009f35 	.word	0x08009f35

08008b7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d142      	bne.n	8008c1a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_UART_Receive_IT+0x24>
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e03b      	b.n	8008c1c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Receive_IT+0x36>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e034      	b.n	8008c1c <HAL_UART_Receive_IT+0xa0>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a17      	ldr	r2, [pc, #92]	; (8008c24 <HAL_UART_Receive_IT+0xa8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01f      	beq.n	8008c0a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d018      	beq.n	8008c0a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	613b      	str	r3, [r7, #16]
   return(result);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	623b      	str	r3, [r7, #32]
 8008bf8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	69f9      	ldr	r1, [r7, #28]
 8008bfc:	6a3a      	ldr	r2, [r7, #32]
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e6      	bne.n	8008bd8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 ffe9 	bl	8009be8 <UART_Start_Receive_IT>
 8008c16:	4603      	mov	r3, r0
 8008c18:	e000      	b.n	8008c1c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008c1a:	2302      	movs	r3, #2
  }
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3728      	adds	r7, #40	; 0x28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40008000 	.word	0x40008000

08008c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b0ba      	sub	sp, #232	; 0xe8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c56:	4013      	ands	r3, r2
 8008c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11b      	bne.n	8008c9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d015      	beq.n	8008c9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 82d6 	beq.w	800923e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
      }
      return;
 8008c9a:	e2d0      	b.n	800923e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 811f 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ca6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008caa:	4b8b      	ldr	r3, [pc, #556]	; (8008ed8 <HAL_UART_IRQHandler+0x2b0>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008cb6:	4b89      	ldr	r3, [pc, #548]	; (8008edc <HAL_UART_IRQHandler+0x2b4>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8112 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d011      	beq.n	8008cf0 <HAL_UART_IRQHandler+0xc8>
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <HAL_UART_IRQHandler+0xf8>
 8008cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d16:	f043 0204 	orr.w	r2, r3, #4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0x128>
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d46:	f043 0202 	orr.w	r2, r3, #2
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d017      	beq.n	8008d8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d6c:	4b5a      	ldr	r3, [pc, #360]	; (8008ed8 <HAL_UART_IRQHandler+0x2b0>)
 8008d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d82:	f043 0208 	orr.w	r2, r3, #8
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d012      	beq.n	8008dbe <HAL_UART_IRQHandler+0x196>
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db4:	f043 0220 	orr.w	r2, r3, #32
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 823c 	beq.w	8009242 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d013      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d005      	beq.n	8008e22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d04f      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f80a 	bl	8009e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d141      	bne.n	8008eba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1d9      	bne.n	8008e36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d013      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8e:	4a14      	ldr	r2, [pc, #80]	; (8008ee0 <HAL_UART_IRQHandler+0x2b8>)
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fb fc22 	bl	80046e0 <HAL_DMA_Abort_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	e00f      	b.n	8008ed2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f9d0 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	e00b      	b.n	8008ed2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9cc 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	e007      	b.n	8008ed2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9c8 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008ed0:	e1b7      	b.n	8009242 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed2:	bf00      	nop
    return;
 8008ed4:	e1b5      	b.n	8009242 <HAL_UART_IRQHandler+0x61a>
 8008ed6:	bf00      	nop
 8008ed8:	10000001 	.word	0x10000001
 8008edc:	04000120 	.word	0x04000120
 8008ee0:	08009f09 	.word	0x08009f09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	f040 814a 	bne.w	8009182 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef2:	f003 0310 	and.w	r3, r3, #16
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 8143 	beq.w	8009182 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 813c 	beq.w	8009182 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2210      	movs	r2, #16
 8008f10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	f040 80b5 	bne.w	800908c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 8187 	beq.w	8009246 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f42:	429a      	cmp	r2, r3
 8008f44:	f080 817f 	bcs.w	8009246 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f040 8086 	bne.w	8009070 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1da      	bne.n	8008f64 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008fd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e1      	bne.n	8008fae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800900e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009010:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800901c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e3      	bne.n	8008fea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800903e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009040:	f023 0310 	bic.w	r3, r3, #16
 8009044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009052:	65bb      	str	r3, [r7, #88]	; 0x58
 8009054:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e4      	bne.n	8009030 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906a:	4618      	mov	r0, r3
 800906c:	f7fb fadf 	bl	800462e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800907c:	b29b      	uxth	r3, r3
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	b29b      	uxth	r3, r3
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8f1 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800908a:	e0dc      	b.n	8009246 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009098:	b29b      	uxth	r3, r3
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80ce 	beq.w	800924a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80090ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 80c9 	beq.w	800924a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090da:	647b      	str	r3, [r7, #68]	; 0x44
 80090dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e4      	bne.n	80090b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	623b      	str	r3, [r7, #32]
   return(result);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009104:	f023 0301 	bic.w	r3, r3, #1
 8009108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009116:	633a      	str	r2, [r7, #48]	; 0x30
 8009118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800911c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e1      	bne.n	80090ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	60fb      	str	r3, [r7, #12]
   return(result);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0310 	bic.w	r3, r3, #16
 8009152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	69b9      	ldr	r1, [r7, #24]
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	617b      	str	r3, [r7, #20]
   return(result);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e4      	bne.n	800913e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f876 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009180:	e063      	b.n	800924a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00e      	beq.n	80091ac <HAL_UART_IRQHandler+0x584>
 800918e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 fcef 	bl	800ab88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091aa:	e051      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d014      	beq.n	80091e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d03a      	beq.n	800924e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
    }
    return;
 80091e0:	e035      	b.n	800924e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <HAL_UART_IRQHandler+0x5da>
 80091ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 f83c 	bl	800a278 <UART_EndTransmit_IT>
    return;
 8009200:	e026      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <HAL_UART_IRQHandler+0x5fa>
 800920e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fcc8 	bl	800abb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009220:	e016      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d010      	beq.n	8009250 <HAL_UART_IRQHandler+0x628>
 800922e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009232:	2b00      	cmp	r3, #0
 8009234:	da0c      	bge.n	8009250 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fcb0 	bl	800ab9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800923c:	e008      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
      return;
 800923e:	bf00      	nop
 8009240:	e006      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
    return;
 8009242:	bf00      	nop
 8009244:	e004      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
      return;
 8009246:	bf00      	nop
 8009248:	e002      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
      return;
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <HAL_UART_IRQHandler+0x628>
    return;
 800924e:	bf00      	nop
  }
}
 8009250:	37e8      	adds	r7, #232	; 0xe8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009288:	b08c      	sub	sp, #48	; 0x30
 800928a:	af00      	add	r7, sp, #0
 800928c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	431a      	orrs	r2, r3
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4baa      	ldr	r3, [pc, #680]	; (800955c <UART_SetConfig+0x2d8>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092bc:	430b      	orrs	r3, r1
 80092be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a9f      	ldr	r2, [pc, #636]	; (8009560 <UART_SetConfig+0x2dc>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d004      	beq.n	80092f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ec:	4313      	orrs	r3, r2
 80092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80092fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009304:	430b      	orrs	r3, r1
 8009306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f023 010f 	bic.w	r1, r3, #15
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a90      	ldr	r2, [pc, #576]	; (8009564 <UART_SetConfig+0x2e0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d125      	bne.n	8009374 <UART_SetConfig+0xf0>
 8009328:	4b8f      	ldr	r3, [pc, #572]	; (8009568 <UART_SetConfig+0x2e4>)
 800932a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d81a      	bhi.n	800936c <UART_SetConfig+0xe8>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <UART_SetConfig+0xb8>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	0800934d 	.word	0x0800934d
 8009340:	0800935d 	.word	0x0800935d
 8009344:	08009355 	.word	0x08009355
 8009348:	08009365 	.word	0x08009365
 800934c:	2301      	movs	r3, #1
 800934e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009352:	e116      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009354:	2302      	movs	r3, #2
 8009356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800935a:	e112      	b.n	8009582 <UART_SetConfig+0x2fe>
 800935c:	2304      	movs	r3, #4
 800935e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009362:	e10e      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009364:	2308      	movs	r3, #8
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800936a:	e10a      	b.n	8009582 <UART_SetConfig+0x2fe>
 800936c:	2310      	movs	r3, #16
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009372:	e106      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a7c      	ldr	r2, [pc, #496]	; (800956c <UART_SetConfig+0x2e8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d138      	bne.n	80093f0 <UART_SetConfig+0x16c>
 800937e:	4b7a      	ldr	r3, [pc, #488]	; (8009568 <UART_SetConfig+0x2e4>)
 8009380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009384:	f003 030c 	and.w	r3, r3, #12
 8009388:	2b0c      	cmp	r3, #12
 800938a:	d82d      	bhi.n	80093e8 <UART_SetConfig+0x164>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <UART_SetConfig+0x110>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093c9 	.word	0x080093c9
 8009398:	080093e9 	.word	0x080093e9
 800939c:	080093e9 	.word	0x080093e9
 80093a0:	080093e9 	.word	0x080093e9
 80093a4:	080093d9 	.word	0x080093d9
 80093a8:	080093e9 	.word	0x080093e9
 80093ac:	080093e9 	.word	0x080093e9
 80093b0:	080093e9 	.word	0x080093e9
 80093b4:	080093d1 	.word	0x080093d1
 80093b8:	080093e9 	.word	0x080093e9
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	080093e9 	.word	0x080093e9
 80093c4:	080093e1 	.word	0x080093e1
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ce:	e0d8      	b.n	8009582 <UART_SetConfig+0x2fe>
 80093d0:	2302      	movs	r3, #2
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093d6:	e0d4      	b.n	8009582 <UART_SetConfig+0x2fe>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093de:	e0d0      	b.n	8009582 <UART_SetConfig+0x2fe>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093e6:	e0cc      	b.n	8009582 <UART_SetConfig+0x2fe>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ee:	e0c8      	b.n	8009582 <UART_SetConfig+0x2fe>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a5e      	ldr	r2, [pc, #376]	; (8009570 <UART_SetConfig+0x2ec>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d125      	bne.n	8009446 <UART_SetConfig+0x1c2>
 80093fa:	4b5b      	ldr	r3, [pc, #364]	; (8009568 <UART_SetConfig+0x2e4>)
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009400:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009404:	2b30      	cmp	r3, #48	; 0x30
 8009406:	d016      	beq.n	8009436 <UART_SetConfig+0x1b2>
 8009408:	2b30      	cmp	r3, #48	; 0x30
 800940a:	d818      	bhi.n	800943e <UART_SetConfig+0x1ba>
 800940c:	2b20      	cmp	r3, #32
 800940e:	d00a      	beq.n	8009426 <UART_SetConfig+0x1a2>
 8009410:	2b20      	cmp	r3, #32
 8009412:	d814      	bhi.n	800943e <UART_SetConfig+0x1ba>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <UART_SetConfig+0x19a>
 8009418:	2b10      	cmp	r3, #16
 800941a:	d008      	beq.n	800942e <UART_SetConfig+0x1aa>
 800941c:	e00f      	b.n	800943e <UART_SetConfig+0x1ba>
 800941e:	2300      	movs	r3, #0
 8009420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009424:	e0ad      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009426:	2302      	movs	r3, #2
 8009428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800942c:	e0a9      	b.n	8009582 <UART_SetConfig+0x2fe>
 800942e:	2304      	movs	r3, #4
 8009430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009434:	e0a5      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009436:	2308      	movs	r3, #8
 8009438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800943c:	e0a1      	b.n	8009582 <UART_SetConfig+0x2fe>
 800943e:	2310      	movs	r3, #16
 8009440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009444:	e09d      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a4a      	ldr	r2, [pc, #296]	; (8009574 <UART_SetConfig+0x2f0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d125      	bne.n	800949c <UART_SetConfig+0x218>
 8009450:	4b45      	ldr	r3, [pc, #276]	; (8009568 <UART_SetConfig+0x2e4>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800945a:	2bc0      	cmp	r3, #192	; 0xc0
 800945c:	d016      	beq.n	800948c <UART_SetConfig+0x208>
 800945e:	2bc0      	cmp	r3, #192	; 0xc0
 8009460:	d818      	bhi.n	8009494 <UART_SetConfig+0x210>
 8009462:	2b80      	cmp	r3, #128	; 0x80
 8009464:	d00a      	beq.n	800947c <UART_SetConfig+0x1f8>
 8009466:	2b80      	cmp	r3, #128	; 0x80
 8009468:	d814      	bhi.n	8009494 <UART_SetConfig+0x210>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <UART_SetConfig+0x1f0>
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d008      	beq.n	8009484 <UART_SetConfig+0x200>
 8009472:	e00f      	b.n	8009494 <UART_SetConfig+0x210>
 8009474:	2300      	movs	r3, #0
 8009476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800947a:	e082      	b.n	8009582 <UART_SetConfig+0x2fe>
 800947c:	2302      	movs	r3, #2
 800947e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009482:	e07e      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009484:	2304      	movs	r3, #4
 8009486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800948a:	e07a      	b.n	8009582 <UART_SetConfig+0x2fe>
 800948c:	2308      	movs	r3, #8
 800948e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009492:	e076      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009494:	2310      	movs	r3, #16
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800949a:	e072      	b.n	8009582 <UART_SetConfig+0x2fe>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a35      	ldr	r2, [pc, #212]	; (8009578 <UART_SetConfig+0x2f4>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d12a      	bne.n	80094fc <UART_SetConfig+0x278>
 80094a6:	4b30      	ldr	r3, [pc, #192]	; (8009568 <UART_SetConfig+0x2e4>)
 80094a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b4:	d01a      	beq.n	80094ec <UART_SetConfig+0x268>
 80094b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ba:	d81b      	bhi.n	80094f4 <UART_SetConfig+0x270>
 80094bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c0:	d00c      	beq.n	80094dc <UART_SetConfig+0x258>
 80094c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c6:	d815      	bhi.n	80094f4 <UART_SetConfig+0x270>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <UART_SetConfig+0x250>
 80094cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d0:	d008      	beq.n	80094e4 <UART_SetConfig+0x260>
 80094d2:	e00f      	b.n	80094f4 <UART_SetConfig+0x270>
 80094d4:	2300      	movs	r3, #0
 80094d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094da:	e052      	b.n	8009582 <UART_SetConfig+0x2fe>
 80094dc:	2302      	movs	r3, #2
 80094de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094e2:	e04e      	b.n	8009582 <UART_SetConfig+0x2fe>
 80094e4:	2304      	movs	r3, #4
 80094e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ea:	e04a      	b.n	8009582 <UART_SetConfig+0x2fe>
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094f2:	e046      	b.n	8009582 <UART_SetConfig+0x2fe>
 80094f4:	2310      	movs	r3, #16
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094fa:	e042      	b.n	8009582 <UART_SetConfig+0x2fe>
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a17      	ldr	r2, [pc, #92]	; (8009560 <UART_SetConfig+0x2dc>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d13a      	bne.n	800957c <UART_SetConfig+0x2f8>
 8009506:	4b18      	ldr	r3, [pc, #96]	; (8009568 <UART_SetConfig+0x2e4>)
 8009508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009514:	d01a      	beq.n	800954c <UART_SetConfig+0x2c8>
 8009516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800951a:	d81b      	bhi.n	8009554 <UART_SetConfig+0x2d0>
 800951c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009520:	d00c      	beq.n	800953c <UART_SetConfig+0x2b8>
 8009522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009526:	d815      	bhi.n	8009554 <UART_SetConfig+0x2d0>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <UART_SetConfig+0x2b0>
 800952c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009530:	d008      	beq.n	8009544 <UART_SetConfig+0x2c0>
 8009532:	e00f      	b.n	8009554 <UART_SetConfig+0x2d0>
 8009534:	2300      	movs	r3, #0
 8009536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800953a:	e022      	b.n	8009582 <UART_SetConfig+0x2fe>
 800953c:	2302      	movs	r3, #2
 800953e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009542:	e01e      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800954a:	e01a      	b.n	8009582 <UART_SetConfig+0x2fe>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009552:	e016      	b.n	8009582 <UART_SetConfig+0x2fe>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955a:	e012      	b.n	8009582 <UART_SetConfig+0x2fe>
 800955c:	cfff69f3 	.word	0xcfff69f3
 8009560:	40008000 	.word	0x40008000
 8009564:	40013800 	.word	0x40013800
 8009568:	40021000 	.word	0x40021000
 800956c:	40004400 	.word	0x40004400
 8009570:	40004800 	.word	0x40004800
 8009574:	40004c00 	.word	0x40004c00
 8009578:	40005000 	.word	0x40005000
 800957c:	2310      	movs	r3, #16
 800957e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4aae      	ldr	r2, [pc, #696]	; (8009840 <UART_SetConfig+0x5bc>)
 8009588:	4293      	cmp	r3, r2
 800958a:	f040 8097 	bne.w	80096bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800958e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009592:	2b08      	cmp	r3, #8
 8009594:	d823      	bhi.n	80095de <UART_SetConfig+0x35a>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <UART_SetConfig+0x318>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095df 	.word	0x080095df
 80095a4:	080095c9 	.word	0x080095c9
 80095a8:	080095df 	.word	0x080095df
 80095ac:	080095cf 	.word	0x080095cf
 80095b0:	080095df 	.word	0x080095df
 80095b4:	080095df 	.word	0x080095df
 80095b8:	080095df 	.word	0x080095df
 80095bc:	080095d7 	.word	0x080095d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c0:	f7fd fd70 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 80095c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095c6:	e010      	b.n	80095ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095c8:	4b9e      	ldr	r3, [pc, #632]	; (8009844 <UART_SetConfig+0x5c0>)
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095cc:	e00d      	b.n	80095ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095ce:	f7fd fcfb 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095d4:	e009      	b.n	80095ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095dc:	e005      	b.n	80095ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80095e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8130 	beq.w	8009852 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	4a94      	ldr	r2, [pc, #592]	; (8009848 <UART_SetConfig+0x5c4>)
 80095f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fc:	461a      	mov	r2, r3
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	fbb3 f3f2 	udiv	r3, r3, r2
 8009604:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	4413      	add	r3, r2
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	429a      	cmp	r2, r3
 8009614:	d305      	bcc.n	8009622 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	429a      	cmp	r2, r3
 8009620:	d903      	bls.n	800962a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009628:	e113      	b.n	8009852 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	2200      	movs	r2, #0
 800962e:	60bb      	str	r3, [r7, #8]
 8009630:	60fa      	str	r2, [r7, #12]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	4a84      	ldr	r2, [pc, #528]	; (8009848 <UART_SetConfig+0x5c4>)
 8009638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963c:	b29b      	uxth	r3, r3
 800963e:	2200      	movs	r2, #0
 8009640:	603b      	str	r3, [r7, #0]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800964c:	f7f7 fb4e 	bl	8000cec <__aeabi_uldivmod>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4610      	mov	r0, r2
 8009656:	4619      	mov	r1, r3
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	020b      	lsls	r3, r1, #8
 8009662:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009666:	0202      	lsls	r2, r0, #8
 8009668:	6979      	ldr	r1, [r7, #20]
 800966a:	6849      	ldr	r1, [r1, #4]
 800966c:	0849      	lsrs	r1, r1, #1
 800966e:	2000      	movs	r0, #0
 8009670:	460c      	mov	r4, r1
 8009672:	4605      	mov	r5, r0
 8009674:	eb12 0804 	adds.w	r8, r2, r4
 8009678:	eb43 0905 	adc.w	r9, r3, r5
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	469a      	mov	sl, r3
 8009684:	4693      	mov	fp, r2
 8009686:	4652      	mov	r2, sl
 8009688:	465b      	mov	r3, fp
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f7 fb2d 	bl	8000cec <__aeabi_uldivmod>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4613      	mov	r3, r2
 8009698:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a0:	d308      	bcc.n	80096b4 <UART_SetConfig+0x430>
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096a8:	d204      	bcs.n	80096b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6a3a      	ldr	r2, [r7, #32]
 80096b0:	60da      	str	r2, [r3, #12]
 80096b2:	e0ce      	b.n	8009852 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80096ba:	e0ca      	b.n	8009852 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c4:	d166      	bne.n	8009794 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80096c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096ca:	2b08      	cmp	r3, #8
 80096cc:	d827      	bhi.n	800971e <UART_SetConfig+0x49a>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <UART_SetConfig+0x450>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096f9 	.word	0x080096f9
 80096d8:	08009701 	.word	0x08009701
 80096dc:	08009709 	.word	0x08009709
 80096e0:	0800971f 	.word	0x0800971f
 80096e4:	0800970f 	.word	0x0800970f
 80096e8:	0800971f 	.word	0x0800971f
 80096ec:	0800971f 	.word	0x0800971f
 80096f0:	0800971f 	.word	0x0800971f
 80096f4:	08009717 	.word	0x08009717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f8:	f7fd fcd4 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 80096fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096fe:	e014      	b.n	800972a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009700:	f7fd fce6 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 8009704:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009706:	e010      	b.n	800972a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009708:	4b4e      	ldr	r3, [pc, #312]	; (8009844 <UART_SetConfig+0x5c0>)
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800970c:	e00d      	b.n	800972a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800970e:	f7fd fc5b 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8009712:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009714:	e009      	b.n	800972a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800971c:	e005      	b.n	800972a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8090 	beq.w	8009852 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	4a44      	ldr	r2, [pc, #272]	; (8009848 <UART_SetConfig+0x5c4>)
 8009738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800973c:	461a      	mov	r2, r3
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	fbb3 f3f2 	udiv	r3, r3, r2
 8009744:	005a      	lsls	r2, r3, #1
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	441a      	add	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	fbb2 f3f3 	udiv	r3, r2, r3
 8009756:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	2b0f      	cmp	r3, #15
 800975c:	d916      	bls.n	800978c <UART_SetConfig+0x508>
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009764:	d212      	bcs.n	800978c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	b29b      	uxth	r3, r3
 800976a:	f023 030f 	bic.w	r3, r3, #15
 800976e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	085b      	lsrs	r3, r3, #1
 8009774:	b29b      	uxth	r3, r3
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	b29a      	uxth	r2, r3
 800977c:	8bfb      	ldrh	r3, [r7, #30]
 800977e:	4313      	orrs	r3, r2
 8009780:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	8bfa      	ldrh	r2, [r7, #30]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	e062      	b.n	8009852 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009792:	e05e      	b.n	8009852 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009798:	2b08      	cmp	r3, #8
 800979a:	d828      	bhi.n	80097ee <UART_SetConfig+0x56a>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x520>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097d9 	.word	0x080097d9
 80097b0:	080097ef 	.word	0x080097ef
 80097b4:	080097df 	.word	0x080097df
 80097b8:	080097ef 	.word	0x080097ef
 80097bc:	080097ef 	.word	0x080097ef
 80097c0:	080097ef 	.word	0x080097ef
 80097c4:	080097e7 	.word	0x080097e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c8:	f7fd fc6c 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 80097cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097ce:	e014      	b.n	80097fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097d0:	f7fd fc7e 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 80097d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097d6:	e010      	b.n	80097fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097d8:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <UART_SetConfig+0x5c0>)
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097dc:	e00d      	b.n	80097fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097de:	f7fd fbf3 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 80097e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097e4:	e009      	b.n	80097fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097ec:	e005      	b.n	80097fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80097f8:	bf00      	nop
    }

    if (pclk != 0U)
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d028      	beq.n	8009852 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	4a10      	ldr	r2, [pc, #64]	; (8009848 <UART_SetConfig+0x5c4>)
 8009806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800980a:	461a      	mov	r2, r3
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	085b      	lsrs	r3, r3, #1
 8009818:	441a      	add	r2, r3
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009822:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d910      	bls.n	800984c <UART_SetConfig+0x5c8>
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d20c      	bcs.n	800984c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	b29a      	uxth	r2, r3
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60da      	str	r2, [r3, #12]
 800983c:	e009      	b.n	8009852 <UART_SetConfig+0x5ce>
 800983e:	bf00      	nop
 8009840:	40008000 	.word	0x40008000
 8009844:	00f42400 	.word	0x00f42400
 8009848:	08010bf8 	.word	0x08010bf8
      }
      else
      {
        ret = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2201      	movs	r2, #1
 8009856:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2201      	movs	r2, #1
 800985e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2200      	movs	r2, #0
 8009866:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2200      	movs	r2, #0
 800986c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800986e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009872:	4618      	mov	r0, r3
 8009874:	3730      	adds	r7, #48	; 0x30
 8009876:	46bd      	mov	sp, r7
 8009878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800987c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01a      	beq.n	8009992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800997a:	d10a      	bne.n	8009992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	605a      	str	r2, [r3, #4]
  }
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099d0:	f7fa fca4 	bl	800431c <HAL_GetTick>
 80099d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d10e      	bne.n	8009a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f82f 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e025      	b.n	8009a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d10e      	bne.n	8009a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f819 	bl	8009a56 <UART_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e00f      	b.n	8009a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b09c      	sub	sp, #112	; 0x70
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a66:	e0a9      	b.n	8009bbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a6e:	f000 80a5 	beq.w	8009bbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a72:	f7fa fc53 	bl	800431c <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d302      	bcc.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d140      	bne.n	8009b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aa8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e6      	bne.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8009adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e5      	bne.n	8009aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e069      	b.n	8009bde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d051      	beq.n	8009bbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d149      	bne.n	8009bbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
 8009b52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e6      	bne.n	8009b32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	613b      	str	r3, [r7, #16]
   return(result);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b84:	623a      	str	r2, [r7, #32]
 8009b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	69f9      	ldr	r1, [r7, #28]
 8009b8a:	6a3a      	ldr	r2, [r7, #32]
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e5      	bne.n	8009b64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e010      	b.n	8009bde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	69da      	ldr	r2, [r3, #28]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	f43f af46 	beq.w	8009a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3770      	adds	r7, #112	; 0x70
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b0a3      	sub	sp, #140	; 0x8c
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1a:	d10e      	bne.n	8009c3a <UART_Start_Receive_IT+0x52>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d105      	bne.n	8009c30 <UART_Start_Receive_IT+0x48>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c2e:	e02d      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c38:	e028      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10d      	bne.n	8009c5e <UART_Start_Receive_IT+0x76>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d104      	bne.n	8009c54 <UART_Start_Receive_IT+0x6c>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	22ff      	movs	r2, #255	; 0xff
 8009c4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c52:	e01b      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	227f      	movs	r2, #127	; 0x7f
 8009c58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c5c:	e016      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c66:	d10d      	bne.n	8009c84 <UART_Start_Receive_IT+0x9c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <UART_Start_Receive_IT+0x92>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	227f      	movs	r2, #127	; 0x7f
 8009c74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c78:	e008      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	223f      	movs	r2, #63	; 0x3f
 8009c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c82:	e003      	b.n	8009c8c <UART_Start_Receive_IT+0xa4>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2222      	movs	r2, #34	; 0x22
 8009c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009cc0:	673a      	str	r2, [r7, #112]	; 0x70
 8009cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009cc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009cc8:	e841 2300 	strex	r3, r2, [r1]
 8009ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e3      	bne.n	8009c9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cdc:	d153      	bne.n	8009d86 <UART_Start_Receive_IT+0x19e>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ce4:	88fa      	ldrh	r2, [r7, #6]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d34d      	bcc.n	8009d86 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf2:	d107      	bne.n	8009d04 <UART_Start_Receive_IT+0x11c>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4a4b      	ldr	r2, [pc, #300]	; (8009e2c <UART_Start_Receive_IT+0x244>)
 8009d00:	671a      	str	r2, [r3, #112]	; 0x70
 8009d02:	e002      	b.n	8009d0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4a4a      	ldr	r2, [pc, #296]	; (8009e30 <UART_Start_Receive_IT+0x248>)
 8009d08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01a      	beq.n	8009d50 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e4      	bne.n	8009d1a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3308      	adds	r3, #8
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d70:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e5      	bne.n	8009d50 <UART_Start_Receive_IT+0x168>
 8009d84:	e04a      	b.n	8009e1c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d107      	bne.n	8009da0 <UART_Start_Receive_IT+0x1b8>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4a26      	ldr	r2, [pc, #152]	; (8009e34 <UART_Start_Receive_IT+0x24c>)
 8009d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8009d9e:	e002      	b.n	8009da6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a25      	ldr	r2, [pc, #148]	; (8009e38 <UART_Start_Receive_IT+0x250>)
 8009da4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d019      	beq.n	8009dea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009dca:	677b      	str	r3, [r7, #116]	; 0x74
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e6      	bne.n	8009db6 <UART_Start_Receive_IT+0x1ce>
 8009de8:	e018      	b.n	8009e1c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	613b      	str	r3, [r7, #16]
   return(result);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f043 0320 	orr.w	r3, r3, #32
 8009dfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e08:	623b      	str	r3, [r7, #32]
 8009e0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	69f9      	ldr	r1, [r7, #28]
 8009e0e:	6a3a      	ldr	r2, [r7, #32]
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e6      	bne.n	8009dea <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	378c      	adds	r7, #140	; 0x8c
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	0800a889 	.word	0x0800a889
 8009e30:	0800a591 	.word	0x0800a591
 8009e34:	0800a42f 	.word	0x0800a42f
 8009e38:	0800a2cf 	.word	0x0800a2cf

08009e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b095      	sub	sp, #84	; 0x54
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
 8009e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e6      	bne.n	8009e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e8c:	f023 0301 	bic.w	r3, r3, #1
 8009e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e3      	bne.n	8009e76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d118      	bne.n	8009ee8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f023 0310 	bic.w	r3, r3, #16
 8009eca:	647b      	str	r3, [r7, #68]	; 0x44
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed4:	61bb      	str	r3, [r7, #24]
 8009ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e6      	bne.n	8009eb6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009efc:	bf00      	nop
 8009efe:	3754      	adds	r7, #84	; 0x54
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff f996 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b08f      	sub	sp, #60	; 0x3c
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f42:	2b21      	cmp	r3, #33	; 0x21
 8009f44:	d14c      	bne.n	8009fe0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d132      	bne.n	8009fb8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	e853 3f00 	ldrex	r3, [r3]
 8009f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e6      	bne.n	8009f52 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f98:	633b      	str	r3, [r7, #48]	; 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	61bb      	str	r3, [r7, #24]
 8009fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6979      	ldr	r1, [r7, #20]
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e6      	bne.n	8009f84 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009fb6:	e013      	b.n	8009fe0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	781a      	ldrb	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009fe0:	bf00      	nop
 8009fe2:	373c      	adds	r7, #60	; 0x3c
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b091      	sub	sp, #68	; 0x44
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ffa:	2b21      	cmp	r3, #33	; 0x21
 8009ffc:	d151      	bne.n	800a0a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a004:	b29b      	uxth	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d132      	bne.n	800a070 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	623b      	str	r3, [r7, #32]
   return(result);
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a01e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	633b      	str	r3, [r7, #48]	; 0x30
 800a02a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	60fb      	str	r3, [r7, #12]
   return(result);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	69b9      	ldr	r1, [r7, #24]
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	617b      	str	r3, [r7, #20]
   return(result);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e6      	bne.n	800a03c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a06e:	e018      	b.n	800a0a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a084:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08a:	1c9a      	adds	r2, r3, #2
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a096:	b29b      	uxth	r3, r3
 800a098:	3b01      	subs	r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a0a2:	bf00      	nop
 800a0a4:	3744      	adds	r7, #68	; 0x44
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b091      	sub	sp, #68	; 0x44
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0bc:	2b21      	cmp	r3, #33	; 0x21
 800a0be:	d160      	bne.n	800a182 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a0c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a0c8:	e057      	b.n	800a17a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d133      	bne.n	800a13e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	e853 3f00 	ldrex	r3, [r3]
 800a0e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a0ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e5      	bne.n	800a0d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	60fb      	str	r3, [r7, #12]
   return(result);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	61fb      	str	r3, [r7, #28]
 800a12a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	617b      	str	r3, [r7, #20]
   return(result);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e6      	bne.n	800a10a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a13c:	e021      	b.n	800a182 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d013      	beq.n	800a174 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a168:	b29b      	uxth	r3, r3
 800a16a:	3b01      	subs	r3, #1
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a176:	3b01      	subs	r3, #1
 800a178:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a17a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1a4      	bne.n	800a0ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a180:	e7ff      	b.n	800a182 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a182:	bf00      	nop
 800a184:	3744      	adds	r7, #68	; 0x44
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a18e:	b480      	push	{r7}
 800a190:	b091      	sub	sp, #68	; 0x44
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a19c:	2b21      	cmp	r3, #33	; 0x21
 800a19e:	d165      	bne.n	800a26c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1a8:	e05c      	b.n	800a264 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d133      	bne.n	800a21e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e5      	bne.n	800a1b6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6979      	ldr	r1, [r7, #20]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	613b      	str	r3, [r7, #16]
   return(result);
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a21c:	e026      	b.n	800a26c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d018      	beq.n	800a25e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a230:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a240:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a246:	1c9a      	adds	r2, r3, #2
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a252:	b29b      	uxth	r3, r3
 800a254:	3b01      	subs	r3, #1
 800a256:	b29a      	uxth	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a25e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a260:	3b01      	subs	r3, #1
 800a262:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a264:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a266:	2b00      	cmp	r3, #0
 800a268:	d19f      	bne.n	800a1aa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a26a:	e7ff      	b.n	800a26c <UART_TxISR_16BIT_FIFOEN+0xde>
 800a26c:	bf00      	nop
 800a26e:	3744      	adds	r7, #68	; 0x44
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	61bb      	str	r3, [r7, #24]
 800a2a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6979      	ldr	r1, [r7, #20]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e6      	bne.n	800a280 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7f8 feeb 	bl	800309c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2c6:	bf00      	nop
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b096      	sub	sp, #88	; 0x58
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e6:	2b22      	cmp	r3, #34	; 0x22
 800a2e8:	f040 8095 	bne.w	800a416 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a2fa:	b2d9      	uxtb	r1, r3
 800a2fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a300:	b2da      	uxtb	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a306:	400a      	ands	r2, r1
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	d178      	bne.n	800a426 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a352:	647b      	str	r3, [r7, #68]	; 0x44
 800a354:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e6      	bne.n	800a334 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3308      	adds	r3, #8
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	623b      	str	r3, [r7, #32]
   return(result);
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f023 0301 	bic.w	r3, r3, #1
 800a37c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a386:	633a      	str	r2, [r7, #48]	; 0x30
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e5      	bne.n	800a366 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d12e      	bne.n	800a40e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0310 	bic.w	r3, r3, #16
 800a3ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3d4:	61fb      	str	r3, [r7, #28]
 800a3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	69b9      	ldr	r1, [r7, #24]
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e6      	bne.n	800a3b6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	2b10      	cmp	r3, #16
 800a3f4:	d103      	bne.n	800a3fe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fe ff30 	bl	800926c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a40c:	e00b      	b.n	800a426 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f8 fe2e 	bl	8003070 <HAL_UART_RxCpltCallback>
}
 800a414:	e007      	b.n	800a426 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	699a      	ldr	r2, [r3, #24]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0208 	orr.w	r2, r2, #8
 800a424:	619a      	str	r2, [r3, #24]
}
 800a426:	bf00      	nop
 800a428:	3758      	adds	r7, #88	; 0x58
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b096      	sub	sp, #88	; 0x58
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a446:	2b22      	cmp	r3, #34	; 0x22
 800a448:	f040 8095 	bne.w	800a576 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a45c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a460:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a464:	4013      	ands	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a46a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a470:	1c9a      	adds	r2, r3, #2
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	3b01      	subs	r3, #1
 800a480:	b29a      	uxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	d178      	bne.n	800a586 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e6      	bne.n	800a494 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e5      	bne.n	800a4c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d12e      	bne.n	800a56e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60bb      	str	r3, [r7, #8]
   return(result);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 0310 	bic.w	r3, r3, #16
 800a52a:	647b      	str	r3, [r7, #68]	; 0x44
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	2b10      	cmp	r3, #16
 800a554:	d103      	bne.n	800a55e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2210      	movs	r2, #16
 800a55c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7fe fe80 	bl	800926c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a56c:	e00b      	b.n	800a586 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f8 fd7e 	bl	8003070 <HAL_UART_RxCpltCallback>
}
 800a574:	e007      	b.n	800a586 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0208 	orr.w	r2, r2, #8
 800a584:	619a      	str	r2, [r3, #24]
}
 800a586:	bf00      	nop
 800a588:	3758      	adds	r7, #88	; 0x58
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b0a6      	sub	sp, #152	; 0x98
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a59e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c6:	2b22      	cmp	r3, #34	; 0x22
 800a5c8:	f040 814f 	bne.w	800a86a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a5d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5d6:	e0f6      	b.n	800a7c6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5e2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a5e6:	b2d9      	uxtb	r1, r3
 800a5e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f2:	400a      	ands	r2, r1
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a608:	b29b      	uxth	r3, r3
 800a60a:	3b01      	subs	r3, #1
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a61e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b00      	cmp	r3, #0
 800a628:	d053      	beq.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a62a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d011      	beq.n	800a65a <UART_RxISR_8BIT_FIFOEN+0xca>
 800a636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2201      	movs	r2, #1
 800a648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a650:	f043 0201 	orr.w	r2, r3, #1
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a65a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d011      	beq.n	800a68a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2202      	movs	r2, #2
 800a678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a680:	f043 0204 	orr.w	r2, r3, #4
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a68a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a68e:	f003 0304 	and.w	r3, r3, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d011      	beq.n	800a6ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00b      	beq.n	800a6ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2204      	movs	r2, #4
 800a6a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6b0:	f043 0202 	orr.w	r2, r3, #2
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d006      	beq.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7fe fdc7 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d173      	bne.n	800a7c6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a6ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a700:	66bb      	str	r3, [r7, #104]	; 0x68
 800a702:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a70e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e4      	bne.n	800a6de <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3308      	adds	r3, #8
 800a71a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a72a:	f023 0301 	bic.w	r3, r3, #1
 800a72e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3308      	adds	r3, #8
 800a736:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a738:	657a      	str	r2, [r7, #84]	; 0x54
 800a73a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a73e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e3      	bne.n	800a714 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2220      	movs	r2, #32
 800a750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d12e      	bne.n	800a7c0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	f023 0310 	bic.w	r3, r3, #16
 800a77c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a786:	643b      	str	r3, [r7, #64]	; 0x40
 800a788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e6      	bne.n	800a768 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	f003 0310 	and.w	r3, r3, #16
 800a7a4:	2b10      	cmp	r3, #16
 800a7a6:	d103      	bne.n	800a7b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2210      	movs	r2, #16
 800a7ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fe fd57 	bl	800926c <HAL_UARTEx_RxEventCallback>
 800a7be:	e002      	b.n	800a7c6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7f8 fc55 	bl	8003070 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d006      	beq.n	800a7dc <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a7ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f47f aefe 	bne.w	800a5d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d045      	beq.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d23e      	bcs.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3308      	adds	r3, #8
 800a802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a812:	673b      	str	r3, [r7, #112]	; 0x70
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3308      	adds	r3, #8
 800a81a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a81c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e5      	bne.n	800a7fc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a14      	ldr	r2, [pc, #80]	; (800a884 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a834:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	60bb      	str	r3, [r7, #8]
   return(result);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f043 0320 	orr.w	r3, r3, #32
 800a84a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6979      	ldr	r1, [r7, #20]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	613b      	str	r3, [r7, #16]
   return(result);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e6      	bne.n	800a836 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a868:	e007      	b.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	699a      	ldr	r2, [r3, #24]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f042 0208 	orr.w	r2, r2, #8
 800a878:	619a      	str	r2, [r3, #24]
}
 800a87a:	bf00      	nop
 800a87c:	3798      	adds	r7, #152	; 0x98
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	0800a2cf 	.word	0x0800a2cf

0800a888 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b0a8      	sub	sp, #160	; 0xa0
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a896:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b22      	cmp	r3, #34	; 0x22
 800a8c0:	f040 8153 	bne.w	800ab6a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8ce:	e0fa      	b.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a8e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f8:	1c9a      	adds	r2, r3, #2
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a904:	b29b      	uxth	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a91a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a91e:	f003 0307 	and.w	r3, r3, #7
 800a922:	2b00      	cmp	r3, #0
 800a924:	d053      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d011      	beq.n	800a956 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2201      	movs	r2, #1
 800a944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a94c:	f043 0201 	orr.w	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d011      	beq.n	800a986 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2202      	movs	r2, #2
 800a974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a97c:	f043 0204 	orr.w	r2, r3, #4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d011      	beq.n	800a9b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ac:	f043 0202 	orr.w	r2, r3, #2
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d006      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7fe fc49 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d175      	bne.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e4      	bne.n	800a9da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa26:	f023 0301 	bic.w	r3, r3, #1
 800aa2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa38:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e1      	bne.n	800aa10 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d12e      	bne.n	800aac0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	f023 0310 	bic.w	r3, r3, #16
 800aa7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa86:	647b      	str	r3, [r7, #68]	; 0x44
 800aa88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa8e:	e841 2300 	strex	r3, r2, [r1]
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e6      	bne.n	800aa68 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	f003 0310 	and.w	r3, r3, #16
 800aaa4:	2b10      	cmp	r3, #16
 800aaa6:	d103      	bne.n	800aab0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2210      	movs	r2, #16
 800aaae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7fe fbd7 	bl	800926c <HAL_UARTEx_RxEventCallback>
 800aabe:	e002      	b.n	800aac6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7f8 fad5 	bl	8003070 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aac6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <UART_RxISR_16BIT_FIFOEN+0x254>
 800aace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aad2:	f003 0320 	and.w	r3, r3, #32
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f47f aefa 	bne.w	800a8d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aae2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aae6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d045      	beq.n	800ab7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aaf4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d23e      	bcs.n	800ab7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3308      	adds	r3, #8
 800ab02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab12:	677b      	str	r3, [r7, #116]	; 0x74
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3308      	adds	r3, #8
 800ab1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ab1c:	633a      	str	r2, [r7, #48]	; 0x30
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab24:	e841 2300 	strex	r3, r2, [r1]
 800ab28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e5      	bne.n	800aafc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a14      	ldr	r2, [pc, #80]	; (800ab84 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ab34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f043 0320 	orr.w	r3, r3, #32
 800ab4a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	69b9      	ldr	r1, [r7, #24]
 800ab5a:	69fa      	ldr	r2, [r7, #28]
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	617b      	str	r3, [r7, #20]
   return(result);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e6      	bne.n	800ab36 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab68:	e007      	b.n	800ab7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	699a      	ldr	r2, [r3, #24]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f042 0208 	orr.w	r2, r2, #8
 800ab78:	619a      	str	r2, [r3, #24]
}
 800ab7a:	bf00      	nop
 800ab7c:	37a0      	adds	r7, #160	; 0xa0
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	0800a42f 	.word	0x0800a42f

0800ab88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d101      	bne.n	800abda <HAL_UARTEx_DisableFifoMode+0x16>
 800abd6:	2302      	movs	r3, #2
 800abd8:	e027      	b.n	800ac2a <HAL_UARTEx_DisableFifoMode+0x66>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2224      	movs	r2, #36	; 0x24
 800abe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d101      	bne.n	800ac4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e02d      	b.n	800acaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2224      	movs	r2, #36	; 0x24
 800ac5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 0201 	bic.w	r2, r2, #1
 800ac74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f850 	bl	800ad30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e02d      	b.n	800ad26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2224      	movs	r2, #36	; 0x24
 800acd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0201 	bic.w	r2, r2, #1
 800acf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f812 	bl	800ad30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2220      	movs	r2, #32
 800ad18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d108      	bne.n	800ad52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad50:	e031      	b.n	800adb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad52:	2308      	movs	r3, #8
 800ad54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad56:	2308      	movs	r3, #8
 800ad58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	0e5b      	lsrs	r3, r3, #25
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	0f5b      	lsrs	r3, r3, #29
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0307 	and.w	r3, r3, #7
 800ad78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	7b3a      	ldrb	r2, [r7, #12]
 800ad7e:	4911      	ldr	r1, [pc, #68]	; (800adc4 <UARTEx_SetNbDataToProcess+0x94>)
 800ad80:	5c8a      	ldrb	r2, [r1, r2]
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad86:	7b3a      	ldrb	r2, [r7, #12]
 800ad88:	490f      	ldr	r1, [pc, #60]	; (800adc8 <UARTEx_SetNbDataToProcess+0x98>)
 800ad8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	7b7a      	ldrb	r2, [r7, #13]
 800ad9c:	4909      	ldr	r1, [pc, #36]	; (800adc4 <UARTEx_SetNbDataToProcess+0x94>)
 800ad9e:	5c8a      	ldrb	r2, [r1, r2]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ada4:	7b7a      	ldrb	r2, [r7, #13]
 800ada6:	4908      	ldr	r1, [pc, #32]	; (800adc8 <UARTEx_SetNbDataToProcess+0x98>)
 800ada8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800adae:	b29a      	uxth	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adb6:	bf00      	nop
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	08010c10 	.word	0x08010c10
 800adc8:	08010c18 	.word	0x08010c18

0800adcc <_ZNSaIcEC1Ev>:
 800adcc:	4770      	bx	lr

0800adce <_ZNSaIcED1Ev>:
 800adce:	4770      	bx	lr

0800add0 <_ZSt17__throw_bad_allocv>:
 800add0:	b508      	push	{r3, lr}
 800add2:	f000 f9d7 	bl	800b184 <abort>

0800add6 <_ZSt19__throw_logic_errorPKc>:
 800add6:	b508      	push	{r3, lr}
 800add8:	f000 f9d4 	bl	800b184 <abort>

0800addc <_ZSt24__throw_invalid_argumentPKc>:
 800addc:	b508      	push	{r3, lr}
 800adde:	f000 f9d1 	bl	800b184 <abort>

0800ade2 <_ZSt20__throw_length_errorPKc>:
 800ade2:	b508      	push	{r3, lr}
 800ade4:	f000 f9ce 	bl	800b184 <abort>

0800ade8 <_ZSt20__throw_out_of_rangePKc>:
 800ade8:	b508      	push	{r3, lr}
 800adea:	f000 f9cb 	bl	800b184 <abort>

0800adee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800adee:	b10a      	cbz	r2, 800adf4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800adf0:	f000 bbfa 	b.w	800b5e8 <memcpy>
 800adf4:	4770      	bx	lr
	...

0800adf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800adf8:	b508      	push	{r3, lr}
 800adfa:	680b      	ldr	r3, [r1, #0]
 800adfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae00:	d302      	bcc.n	800ae08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800ae02:	480d      	ldr	r0, [pc, #52]	; (800ae38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800ae04:	f7ff ffed 	bl	800ade2 <_ZSt20__throw_length_errorPKc>
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d90b      	bls.n	800ae24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ae0c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800ae10:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800ae14:	d206      	bcs.n	800ae24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ae16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ae1a:	bf2a      	itet	cs
 800ae1c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800ae20:	6008      	strcc	r0, [r1, #0]
 800ae22:	600b      	strcs	r3, [r1, #0]
 800ae24:	6808      	ldr	r0, [r1, #0]
 800ae26:	3001      	adds	r0, #1
 800ae28:	d501      	bpl.n	800ae2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800ae2a:	f7ff ffd1 	bl	800add0 <_ZSt17__throw_bad_allocv>
 800ae2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ae32:	f000 b860 	b.w	800aef6 <_Znwj>
 800ae36:	bf00      	nop
 800ae38:	08010c20 	.word	0x08010c20

0800ae3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ae3c:	f850 3b08 	ldr.w	r3, [r0], #8
 800ae40:	4283      	cmp	r3, r0
 800ae42:	d002      	beq.n	800ae4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 b854 	b.w	800aef2 <_ZdlPv>
 800ae4a:	4770      	bx	lr

0800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ae4c:	2a01      	cmp	r2, #1
 800ae4e:	b410      	push	{r4}
 800ae50:	d104      	bne.n	800ae5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800ae52:	780a      	ldrb	r2, [r1, #0]
 800ae54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae58:	7002      	strb	r2, [r0, #0]
 800ae5a:	4770      	bx	lr
 800ae5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae60:	f7ff bfc5 	b.w	800adee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800ae64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800ae64:	b508      	push	{r3, lr}
 800ae66:	1a52      	subs	r2, r2, r1
 800ae68:	f7ff fff0 	bl	800ae4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ae6c:	bd08      	pop	{r3, pc}

0800ae6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	4604      	mov	r4, r0
 800ae72:	f7ff ffe3 	bl	800ae3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ae76:	4620      	mov	r0, r4
 800ae78:	bd10      	pop	{r4, pc}

0800ae7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800ae7a:	6800      	ldr	r0, [r0, #0]
 800ae7c:	4770      	bx	lr
	...

0800ae80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ae80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	4616      	mov	r6, r2
 800ae86:	460d      	mov	r5, r1
 800ae88:	b919      	cbnz	r1, 800ae92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ae8a:	b112      	cbz	r2, 800ae92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ae8c:	480d      	ldr	r0, [pc, #52]	; (800aec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ae8e:	f7ff ffa2 	bl	800add6 <_ZSt19__throw_logic_errorPKc>
 800ae92:	1b73      	subs	r3, r6, r5
 800ae94:	2b0f      	cmp	r3, #15
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	d907      	bls.n	800aeaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	a901      	add	r1, sp, #4
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7ff ffaa 	bl	800adf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	6020      	str	r0, [r4, #0]
 800aea8:	60a3      	str	r3, [r4, #8]
 800aeaa:	4632      	mov	r2, r6
 800aeac:	4629      	mov	r1, r5
 800aeae:	6820      	ldr	r0, [r4, #0]
 800aeb0:	f7ff ffd8 	bl	800ae64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	6822      	ldr	r2, [r4, #0]
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	2100      	movs	r1, #0
 800aebc:	54d1      	strb	r1, [r2, r3]
 800aebe:	b002      	add	sp, #8
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	bf00      	nop
 800aec4:	08010c38 	.word	0x08010c38

0800aec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	f100 0308 	add.w	r3, r0, #8
 800aece:	4604      	mov	r4, r0
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	460d      	mov	r5, r1
 800aed4:	b159      	cbz	r1, 800aeee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800aed6:	4608      	mov	r0, r1
 800aed8:	f7f5 f9fc 	bl	80002d4 <strlen>
 800aedc:	182a      	adds	r2, r5, r0
 800aede:	4620      	mov	r0, r4
 800aee0:	f04f 0300 	mov.w	r3, #0
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7ff ffcb 	bl	800ae80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800aeea:	4620      	mov	r0, r4
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
 800aeee:	2201      	movs	r2, #1
 800aef0:	e7f5      	b.n	800aede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800aef2 <_ZdlPv>:
 800aef2:	f000 bb61 	b.w	800b5b8 <free>

0800aef6 <_Znwj>:
 800aef6:	2801      	cmp	r0, #1
 800aef8:	bf38      	it	cc
 800aefa:	2001      	movcc	r0, #1
 800aefc:	b510      	push	{r4, lr}
 800aefe:	4604      	mov	r4, r0
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fb51 	bl	800b5a8 <malloc>
 800af06:	b930      	cbnz	r0, 800af16 <_Znwj+0x20>
 800af08:	f000 f806 	bl	800af18 <_ZSt15get_new_handlerv>
 800af0c:	b908      	cbnz	r0, 800af12 <_Znwj+0x1c>
 800af0e:	f000 f939 	bl	800b184 <abort>
 800af12:	4780      	blx	r0
 800af14:	e7f4      	b.n	800af00 <_Znwj+0xa>
 800af16:	bd10      	pop	{r4, pc}

0800af18 <_ZSt15get_new_handlerv>:
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <_ZSt15get_new_handlerv+0xc>)
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	f3bf 8f5b 	dmb	ish
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000a08 	.word	0x20000a08

0800af28 <asinf>:
 800af28:	b508      	push	{r3, lr}
 800af2a:	ed2d 8b02 	vpush	{d8}
 800af2e:	eeb0 8a40 	vmov.f32	s16, s0
 800af32:	f000 f825 	bl	800af80 <__ieee754_asinf>
 800af36:	eeb4 8a48 	vcmp.f32	s16, s16
 800af3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3e:	eef0 8a40 	vmov.f32	s17, s0
 800af42:	d615      	bvs.n	800af70 <asinf+0x48>
 800af44:	eeb0 0a48 	vmov.f32	s0, s16
 800af48:	f000 f90e 	bl	800b168 <fabsf>
 800af4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800af50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	dd0a      	ble.n	800af70 <asinf+0x48>
 800af5a:	f000 f91b 	bl	800b194 <__errno>
 800af5e:	ecbd 8b02 	vpop	{d8}
 800af62:	2321      	movs	r3, #33	; 0x21
 800af64:	6003      	str	r3, [r0, #0]
 800af66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af6a:	4804      	ldr	r0, [pc, #16]	; (800af7c <asinf+0x54>)
 800af6c:	f000 b904 	b.w	800b178 <nanf>
 800af70:	eeb0 0a68 	vmov.f32	s0, s17
 800af74:	ecbd 8b02 	vpop	{d8}
 800af78:	bd08      	pop	{r3, pc}
 800af7a:	bf00      	nop
 800af7c:	08010e17 	.word	0x08010e17

0800af80 <__ieee754_asinf>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	ee10 5a10 	vmov	r5, s0
 800af86:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af8a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800af8e:	ed2d 8b04 	vpush	{d8-d9}
 800af92:	d10c      	bne.n	800afae <__ieee754_asinf+0x2e>
 800af94:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b10c <__ieee754_asinf+0x18c>
 800af98:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b110 <__ieee754_asinf+0x190>
 800af9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800afa0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800afa4:	eeb0 0a67 	vmov.f32	s0, s15
 800afa8:	ecbd 8b04 	vpop	{d8-d9}
 800afac:	bd38      	pop	{r3, r4, r5, pc}
 800afae:	dd04      	ble.n	800afba <__ieee754_asinf+0x3a>
 800afb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800afb4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800afb8:	e7f6      	b.n	800afa8 <__ieee754_asinf+0x28>
 800afba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800afbe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800afc2:	da0b      	bge.n	800afdc <__ieee754_asinf+0x5c>
 800afc4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800afc8:	da52      	bge.n	800b070 <__ieee754_asinf+0xf0>
 800afca:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b114 <__ieee754_asinf+0x194>
 800afce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800afd2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800afd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afda:	dce5      	bgt.n	800afa8 <__ieee754_asinf+0x28>
 800afdc:	f000 f8c4 	bl	800b168 <fabsf>
 800afe0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800afe4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800afe8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800afec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b118 <__ieee754_asinf+0x198>
 800aff0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b11c <__ieee754_asinf+0x19c>
 800aff4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b120 <__ieee754_asinf+0x1a0>
 800aff8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800affc:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b124 <__ieee754_asinf+0x1a4>
 800b000:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b004:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b128 <__ieee754_asinf+0x1a8>
 800b008:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b00c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b12c <__ieee754_asinf+0x1ac>
 800b010:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b014:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b130 <__ieee754_asinf+0x1b0>
 800b018:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b01c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b134 <__ieee754_asinf+0x1b4>
 800b020:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b024:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b138 <__ieee754_asinf+0x1b8>
 800b028:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b02c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b13c <__ieee754_asinf+0x1bc>
 800b030:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b034:	eeb0 0a48 	vmov.f32	s0, s16
 800b038:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b03c:	f000 f886 	bl	800b14c <__ieee754_sqrtf>
 800b040:	4b3f      	ldr	r3, [pc, #252]	; (800b140 <__ieee754_asinf+0x1c0>)
 800b042:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b046:	429c      	cmp	r4, r3
 800b048:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b04c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b050:	dd3d      	ble.n	800b0ce <__ieee754_asinf+0x14e>
 800b052:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b056:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b144 <__ieee754_asinf+0x1c4>
 800b05a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b05e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b110 <__ieee754_asinf+0x190>
 800b062:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b066:	2d00      	cmp	r5, #0
 800b068:	bfd8      	it	le
 800b06a:	eeb1 0a40 	vnegle.f32	s0, s0
 800b06e:	e79b      	b.n	800afa8 <__ieee754_asinf+0x28>
 800b070:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b074:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b118 <__ieee754_asinf+0x198>
 800b078:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b11c <__ieee754_asinf+0x19c>
 800b07c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b130 <__ieee754_asinf+0x1b0>
 800b080:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b084:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b124 <__ieee754_asinf+0x1a4>
 800b088:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b08c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b128 <__ieee754_asinf+0x1a8>
 800b090:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b094:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b12c <__ieee754_asinf+0x1ac>
 800b098:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b09c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b120 <__ieee754_asinf+0x1a0>
 800b0a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b0a4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b134 <__ieee754_asinf+0x1b4>
 800b0a8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b0ac:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b138 <__ieee754_asinf+0x1b8>
 800b0b0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b0b4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b13c <__ieee754_asinf+0x1bc>
 800b0b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b0bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0c0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b0c4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b0c8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b0cc:	e76c      	b.n	800afa8 <__ieee754_asinf+0x28>
 800b0ce:	ee10 3a10 	vmov	r3, s0
 800b0d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0d6:	f023 030f 	bic.w	r3, r3, #15
 800b0da:	ee07 3a10 	vmov	s14, r3
 800b0de:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b0e2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b0e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b0ea:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b0ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b10c <__ieee754_asinf+0x18c>
 800b0f2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b0f6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b0fa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b148 <__ieee754_asinf+0x1c8>
 800b0fe:	eeb0 6a40 	vmov.f32	s12, s0
 800b102:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b106:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b10a:	e7aa      	b.n	800b062 <__ieee754_asinf+0xe2>
 800b10c:	b33bbd2e 	.word	0xb33bbd2e
 800b110:	3fc90fdb 	.word	0x3fc90fdb
 800b114:	7149f2ca 	.word	0x7149f2ca
 800b118:	3811ef08 	.word	0x3811ef08
 800b11c:	3a4f7f04 	.word	0x3a4f7f04
 800b120:	3e2aaaab 	.word	0x3e2aaaab
 800b124:	bd241146 	.word	0xbd241146
 800b128:	3e4e0aa8 	.word	0x3e4e0aa8
 800b12c:	bea6b090 	.word	0xbea6b090
 800b130:	3d9dc62e 	.word	0x3d9dc62e
 800b134:	bf303361 	.word	0xbf303361
 800b138:	4001572d 	.word	0x4001572d
 800b13c:	c019d139 	.word	0xc019d139
 800b140:	3f799999 	.word	0x3f799999
 800b144:	333bbd2e 	.word	0x333bbd2e
 800b148:	3f490fdb 	.word	0x3f490fdb

0800b14c <__ieee754_sqrtf>:
 800b14c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b150:	4770      	bx	lr
 800b152:	0000      	movs	r0, r0
 800b154:	0000      	movs	r0, r0
	...

0800b158 <nan>:
 800b158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b160 <nan+0x8>
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	00000000 	.word	0x00000000
 800b164:	7ff80000 	.word	0x7ff80000

0800b168 <fabsf>:
 800b168:	ee10 3a10 	vmov	r3, s0
 800b16c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b170:	ee00 3a10 	vmov	s0, r3
 800b174:	4770      	bx	lr
	...

0800b178 <nanf>:
 800b178:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b180 <nanf+0x8>
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	7fc00000 	.word	0x7fc00000

0800b184 <abort>:
 800b184:	b508      	push	{r3, lr}
 800b186:	2006      	movs	r0, #6
 800b188:	f001 fbee 	bl	800c968 <raise>
 800b18c:	2001      	movs	r0, #1
 800b18e:	f7f8 fe6a 	bl	8003e66 <_exit>
	...

0800b194 <__errno>:
 800b194:	4b01      	ldr	r3, [pc, #4]	; (800b19c <__errno+0x8>)
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20000030 	.word	0x20000030

0800b1a0 <__sflush_r>:
 800b1a0:	898a      	ldrh	r2, [r1, #12]
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	0710      	lsls	r0, r2, #28
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	d458      	bmi.n	800b260 <__sflush_r+0xc0>
 800b1ae:	684b      	ldr	r3, [r1, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dc05      	bgt.n	800b1c0 <__sflush_r+0x20>
 800b1b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dc02      	bgt.n	800b1c0 <__sflush_r+0x20>
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	d0f9      	beq.n	800b1ba <__sflush_r+0x1a>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1cc:	682f      	ldr	r7, [r5, #0]
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	d032      	beq.n	800b238 <__sflush_r+0x98>
 800b1d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	075a      	lsls	r2, r3, #29
 800b1d8:	d505      	bpl.n	800b1e6 <__sflush_r+0x46>
 800b1da:	6863      	ldr	r3, [r4, #4]
 800b1dc:	1ac0      	subs	r0, r0, r3
 800b1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1e0:	b10b      	cbz	r3, 800b1e6 <__sflush_r+0x46>
 800b1e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1e4:	1ac0      	subs	r0, r0, r3
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ec:	6a21      	ldr	r1, [r4, #32]
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b0      	blx	r6
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	d106      	bne.n	800b206 <__sflush_r+0x66>
 800b1f8:	6829      	ldr	r1, [r5, #0]
 800b1fa:	291d      	cmp	r1, #29
 800b1fc:	d82c      	bhi.n	800b258 <__sflush_r+0xb8>
 800b1fe:	4a2a      	ldr	r2, [pc, #168]	; (800b2a8 <__sflush_r+0x108>)
 800b200:	40ca      	lsrs	r2, r1
 800b202:	07d6      	lsls	r6, r2, #31
 800b204:	d528      	bpl.n	800b258 <__sflush_r+0xb8>
 800b206:	2200      	movs	r2, #0
 800b208:	6062      	str	r2, [r4, #4]
 800b20a:	04d9      	lsls	r1, r3, #19
 800b20c:	6922      	ldr	r2, [r4, #16]
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	d504      	bpl.n	800b21c <__sflush_r+0x7c>
 800b212:	1c42      	adds	r2, r0, #1
 800b214:	d101      	bne.n	800b21a <__sflush_r+0x7a>
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	b903      	cbnz	r3, 800b21c <__sflush_r+0x7c>
 800b21a:	6560      	str	r0, [r4, #84]	; 0x54
 800b21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b21e:	602f      	str	r7, [r5, #0]
 800b220:	2900      	cmp	r1, #0
 800b222:	d0ca      	beq.n	800b1ba <__sflush_r+0x1a>
 800b224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b228:	4299      	cmp	r1, r3
 800b22a:	d002      	beq.n	800b232 <__sflush_r+0x92>
 800b22c:	4628      	mov	r0, r5
 800b22e:	f000 fa0b 	bl	800b648 <_free_r>
 800b232:	2000      	movs	r0, #0
 800b234:	6360      	str	r0, [r4, #52]	; 0x34
 800b236:	e7c1      	b.n	800b1bc <__sflush_r+0x1c>
 800b238:	6a21      	ldr	r1, [r4, #32]
 800b23a:	2301      	movs	r3, #1
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b0      	blx	r6
 800b240:	1c41      	adds	r1, r0, #1
 800b242:	d1c7      	bne.n	800b1d4 <__sflush_r+0x34>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0c4      	beq.n	800b1d4 <__sflush_r+0x34>
 800b24a:	2b1d      	cmp	r3, #29
 800b24c:	d001      	beq.n	800b252 <__sflush_r+0xb2>
 800b24e:	2b16      	cmp	r3, #22
 800b250:	d101      	bne.n	800b256 <__sflush_r+0xb6>
 800b252:	602f      	str	r7, [r5, #0]
 800b254:	e7b1      	b.n	800b1ba <__sflush_r+0x1a>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	e7ad      	b.n	800b1bc <__sflush_r+0x1c>
 800b260:	690f      	ldr	r7, [r1, #16]
 800b262:	2f00      	cmp	r7, #0
 800b264:	d0a9      	beq.n	800b1ba <__sflush_r+0x1a>
 800b266:	0793      	lsls	r3, r2, #30
 800b268:	680e      	ldr	r6, [r1, #0]
 800b26a:	bf08      	it	eq
 800b26c:	694b      	ldreq	r3, [r1, #20]
 800b26e:	600f      	str	r7, [r1, #0]
 800b270:	bf18      	it	ne
 800b272:	2300      	movne	r3, #0
 800b274:	eba6 0807 	sub.w	r8, r6, r7
 800b278:	608b      	str	r3, [r1, #8]
 800b27a:	f1b8 0f00 	cmp.w	r8, #0
 800b27e:	dd9c      	ble.n	800b1ba <__sflush_r+0x1a>
 800b280:	6a21      	ldr	r1, [r4, #32]
 800b282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b284:	4643      	mov	r3, r8
 800b286:	463a      	mov	r2, r7
 800b288:	4628      	mov	r0, r5
 800b28a:	47b0      	blx	r6
 800b28c:	2800      	cmp	r0, #0
 800b28e:	dc06      	bgt.n	800b29e <__sflush_r+0xfe>
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b29c:	e78e      	b.n	800b1bc <__sflush_r+0x1c>
 800b29e:	4407      	add	r7, r0
 800b2a0:	eba8 0800 	sub.w	r8, r8, r0
 800b2a4:	e7e9      	b.n	800b27a <__sflush_r+0xda>
 800b2a6:	bf00      	nop
 800b2a8:	20400001 	.word	0x20400001

0800b2ac <_fflush_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	690b      	ldr	r3, [r1, #16]
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	b913      	cbnz	r3, 800b2bc <_fflush_r+0x10>
 800b2b6:	2500      	movs	r5, #0
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	b118      	cbz	r0, 800b2c6 <_fflush_r+0x1a>
 800b2be:	6983      	ldr	r3, [r0, #24]
 800b2c0:	b90b      	cbnz	r3, 800b2c6 <_fflush_r+0x1a>
 800b2c2:	f000 f899 	bl	800b3f8 <__sinit>
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <_fflush_r+0x6c>)
 800b2c8:	429c      	cmp	r4, r3
 800b2ca:	d11b      	bne.n	800b304 <_fflush_r+0x58>
 800b2cc:	686c      	ldr	r4, [r5, #4]
 800b2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0ef      	beq.n	800b2b6 <_fflush_r+0xa>
 800b2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2d8:	07d0      	lsls	r0, r2, #31
 800b2da:	d404      	bmi.n	800b2e6 <_fflush_r+0x3a>
 800b2dc:	0599      	lsls	r1, r3, #22
 800b2de:	d402      	bmi.n	800b2e6 <_fflush_r+0x3a>
 800b2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2e2:	f000 f95e 	bl	800b5a2 <__retarget_lock_acquire_recursive>
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	f7ff ff59 	bl	800b1a0 <__sflush_r>
 800b2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f0:	07da      	lsls	r2, r3, #31
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	d4e0      	bmi.n	800b2b8 <_fflush_r+0xc>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	059b      	lsls	r3, r3, #22
 800b2fa:	d4dd      	bmi.n	800b2b8 <_fflush_r+0xc>
 800b2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2fe:	f000 f951 	bl	800b5a4 <__retarget_lock_release_recursive>
 800b302:	e7d9      	b.n	800b2b8 <_fflush_r+0xc>
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <_fflush_r+0x70>)
 800b306:	429c      	cmp	r4, r3
 800b308:	d101      	bne.n	800b30e <_fflush_r+0x62>
 800b30a:	68ac      	ldr	r4, [r5, #8]
 800b30c:	e7df      	b.n	800b2ce <_fflush_r+0x22>
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <_fflush_r+0x74>)
 800b310:	429c      	cmp	r4, r3
 800b312:	bf08      	it	eq
 800b314:	68ec      	ldreq	r4, [r5, #12]
 800b316:	e7da      	b.n	800b2ce <_fflush_r+0x22>
 800b318:	08010c84 	.word	0x08010c84
 800b31c:	08010ca4 	.word	0x08010ca4
 800b320:	08010c64 	.word	0x08010c64

0800b324 <fflush>:
 800b324:	4601      	mov	r1, r0
 800b326:	b920      	cbnz	r0, 800b332 <fflush+0xe>
 800b328:	4b04      	ldr	r3, [pc, #16]	; (800b33c <fflush+0x18>)
 800b32a:	4905      	ldr	r1, [pc, #20]	; (800b340 <fflush+0x1c>)
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	f000 b8f3 	b.w	800b518 <_fwalk_reent>
 800b332:	4b04      	ldr	r3, [pc, #16]	; (800b344 <fflush+0x20>)
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	f7ff bfb9 	b.w	800b2ac <_fflush_r>
 800b33a:	bf00      	nop
 800b33c:	08010cc4 	.word	0x08010cc4
 800b340:	0800b2ad 	.word	0x0800b2ad
 800b344:	20000030 	.word	0x20000030

0800b348 <std>:
 800b348:	2300      	movs	r3, #0
 800b34a:	b510      	push	{r4, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	e9c0 3300 	strd	r3, r3, [r0]
 800b352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	8181      	strh	r1, [r0, #12]
 800b35a:	6643      	str	r3, [r0, #100]	; 0x64
 800b35c:	81c2      	strh	r2, [r0, #14]
 800b35e:	6183      	str	r3, [r0, #24]
 800b360:	4619      	mov	r1, r3
 800b362:	2208      	movs	r2, #8
 800b364:	305c      	adds	r0, #92	; 0x5c
 800b366:	f000 f967 	bl	800b638 <memset>
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <std+0x38>)
 800b36c:	6263      	str	r3, [r4, #36]	; 0x24
 800b36e:	4b05      	ldr	r3, [pc, #20]	; (800b384 <std+0x3c>)
 800b370:	62a3      	str	r3, [r4, #40]	; 0x28
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <std+0x40>)
 800b374:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x44>)
 800b378:	6224      	str	r4, [r4, #32]
 800b37a:	6323      	str	r3, [r4, #48]	; 0x30
 800b37c:	bd10      	pop	{r4, pc}
 800b37e:	bf00      	nop
 800b380:	0800c9e1 	.word	0x0800c9e1
 800b384:	0800ca03 	.word	0x0800ca03
 800b388:	0800ca3b 	.word	0x0800ca3b
 800b38c:	0800ca5f 	.word	0x0800ca5f

0800b390 <_cleanup_r>:
 800b390:	4901      	ldr	r1, [pc, #4]	; (800b398 <_cleanup_r+0x8>)
 800b392:	f000 b8c1 	b.w	800b518 <_fwalk_reent>
 800b396:	bf00      	nop
 800b398:	0800b2ad 	.word	0x0800b2ad

0800b39c <__sfmoreglue>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	2268      	movs	r2, #104	; 0x68
 800b3a0:	1e4d      	subs	r5, r1, #1
 800b3a2:	4355      	muls	r5, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3aa:	f000 f9b9 	bl	800b720 <_malloc_r>
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	b140      	cbz	r0, 800b3c4 <__sfmoreglue+0x28>
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3b8:	300c      	adds	r0, #12
 800b3ba:	60a0      	str	r0, [r4, #8]
 800b3bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3c0:	f000 f93a 	bl	800b638 <memset>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <__sfp_lock_acquire>:
 800b3c8:	4801      	ldr	r0, [pc, #4]	; (800b3d0 <__sfp_lock_acquire+0x8>)
 800b3ca:	f000 b8ea 	b.w	800b5a2 <__retarget_lock_acquire_recursive>
 800b3ce:	bf00      	nop
 800b3d0:	20000a0d 	.word	0x20000a0d

0800b3d4 <__sfp_lock_release>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__sfp_lock_release+0x8>)
 800b3d6:	f000 b8e5 	b.w	800b5a4 <__retarget_lock_release_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20000a0d 	.word	0x20000a0d

0800b3e0 <__sinit_lock_acquire>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__sinit_lock_acquire+0x8>)
 800b3e2:	f000 b8de 	b.w	800b5a2 <__retarget_lock_acquire_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20000a0e 	.word	0x20000a0e

0800b3ec <__sinit_lock_release>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	; (800b3f4 <__sinit_lock_release+0x8>)
 800b3ee:	f000 b8d9 	b.w	800b5a4 <__retarget_lock_release_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	20000a0e 	.word	0x20000a0e

0800b3f8 <__sinit>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	f7ff fff0 	bl	800b3e0 <__sinit_lock_acquire>
 800b400:	69a3      	ldr	r3, [r4, #24]
 800b402:	b11b      	cbz	r3, 800b40c <__sinit+0x14>
 800b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b408:	f7ff bff0 	b.w	800b3ec <__sinit_lock_release>
 800b40c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b410:	6523      	str	r3, [r4, #80]	; 0x50
 800b412:	4b13      	ldr	r3, [pc, #76]	; (800b460 <__sinit+0x68>)
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <__sinit+0x6c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	62a2      	str	r2, [r4, #40]	; 0x28
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	bf04      	itt	eq
 800b41e:	2301      	moveq	r3, #1
 800b420:	61a3      	streq	r3, [r4, #24]
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f820 	bl	800b468 <__sfp>
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 f81c 	bl	800b468 <__sfp>
 800b430:	60a0      	str	r0, [r4, #8]
 800b432:	4620      	mov	r0, r4
 800b434:	f000 f818 	bl	800b468 <__sfp>
 800b438:	2200      	movs	r2, #0
 800b43a:	60e0      	str	r0, [r4, #12]
 800b43c:	2104      	movs	r1, #4
 800b43e:	6860      	ldr	r0, [r4, #4]
 800b440:	f7ff ff82 	bl	800b348 <std>
 800b444:	68a0      	ldr	r0, [r4, #8]
 800b446:	2201      	movs	r2, #1
 800b448:	2109      	movs	r1, #9
 800b44a:	f7ff ff7d 	bl	800b348 <std>
 800b44e:	68e0      	ldr	r0, [r4, #12]
 800b450:	2202      	movs	r2, #2
 800b452:	2112      	movs	r1, #18
 800b454:	f7ff ff78 	bl	800b348 <std>
 800b458:	2301      	movs	r3, #1
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	e7d2      	b.n	800b404 <__sinit+0xc>
 800b45e:	bf00      	nop
 800b460:	08010cc4 	.word	0x08010cc4
 800b464:	0800b391 	.word	0x0800b391

0800b468 <__sfp>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4607      	mov	r7, r0
 800b46c:	f7ff ffac 	bl	800b3c8 <__sfp_lock_acquire>
 800b470:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <__sfp+0x84>)
 800b472:	681e      	ldr	r6, [r3, #0]
 800b474:	69b3      	ldr	r3, [r6, #24]
 800b476:	b913      	cbnz	r3, 800b47e <__sfp+0x16>
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ffbd 	bl	800b3f8 <__sinit>
 800b47e:	3648      	adds	r6, #72	; 0x48
 800b480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b484:	3b01      	subs	r3, #1
 800b486:	d503      	bpl.n	800b490 <__sfp+0x28>
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	b30b      	cbz	r3, 800b4d0 <__sfp+0x68>
 800b48c:	6836      	ldr	r6, [r6, #0]
 800b48e:	e7f7      	b.n	800b480 <__sfp+0x18>
 800b490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b494:	b9d5      	cbnz	r5, 800b4cc <__sfp+0x64>
 800b496:	4b16      	ldr	r3, [pc, #88]	; (800b4f0 <__sfp+0x88>)
 800b498:	60e3      	str	r3, [r4, #12]
 800b49a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b49e:	6665      	str	r5, [r4, #100]	; 0x64
 800b4a0:	f000 f87e 	bl	800b5a0 <__retarget_lock_init_recursive>
 800b4a4:	f7ff ff96 	bl	800b3d4 <__sfp_lock_release>
 800b4a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	61a5      	str	r5, [r4, #24]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4bc:	f000 f8bc 	bl	800b638 <memset>
 800b4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4cc:	3468      	adds	r4, #104	; 0x68
 800b4ce:	e7d9      	b.n	800b484 <__sfp+0x1c>
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ff62 	bl	800b39c <__sfmoreglue>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1d5      	bne.n	800b48c <__sfp+0x24>
 800b4e0:	f7ff ff78 	bl	800b3d4 <__sfp_lock_release>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	e7ee      	b.n	800b4c8 <__sfp+0x60>
 800b4ea:	bf00      	nop
 800b4ec:	08010cc4 	.word	0x08010cc4
 800b4f0:	ffff0001 	.word	0xffff0001

0800b4f4 <fiprintf>:
 800b4f4:	b40e      	push	{r1, r2, r3}
 800b4f6:	b503      	push	{r0, r1, lr}
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	ab03      	add	r3, sp, #12
 800b4fc:	4805      	ldr	r0, [pc, #20]	; (800b514 <fiprintf+0x20>)
 800b4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b502:	6800      	ldr	r0, [r0, #0]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	f000 f9a9 	bl	800b85c <_vfiprintf_r>
 800b50a:	b002      	add	sp, #8
 800b50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b510:	b003      	add	sp, #12
 800b512:	4770      	bx	lr
 800b514:	20000030 	.word	0x20000030

0800b518 <_fwalk_reent>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4606      	mov	r6, r0
 800b51e:	4688      	mov	r8, r1
 800b520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b524:	2700      	movs	r7, #0
 800b526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b52a:	f1b9 0901 	subs.w	r9, r9, #1
 800b52e:	d505      	bpl.n	800b53c <_fwalk_reent+0x24>
 800b530:	6824      	ldr	r4, [r4, #0]
 800b532:	2c00      	cmp	r4, #0
 800b534:	d1f7      	bne.n	800b526 <_fwalk_reent+0xe>
 800b536:	4638      	mov	r0, r7
 800b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d907      	bls.n	800b552 <_fwalk_reent+0x3a>
 800b542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b546:	3301      	adds	r3, #1
 800b548:	d003      	beq.n	800b552 <_fwalk_reent+0x3a>
 800b54a:	4629      	mov	r1, r5
 800b54c:	4630      	mov	r0, r6
 800b54e:	47c0      	blx	r8
 800b550:	4307      	orrs	r7, r0
 800b552:	3568      	adds	r5, #104	; 0x68
 800b554:	e7e9      	b.n	800b52a <_fwalk_reent+0x12>
	...

0800b558 <__libc_init_array>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	4d0d      	ldr	r5, [pc, #52]	; (800b590 <__libc_init_array+0x38>)
 800b55c:	4c0d      	ldr	r4, [pc, #52]	; (800b594 <__libc_init_array+0x3c>)
 800b55e:	1b64      	subs	r4, r4, r5
 800b560:	10a4      	asrs	r4, r4, #2
 800b562:	2600      	movs	r6, #0
 800b564:	42a6      	cmp	r6, r4
 800b566:	d109      	bne.n	800b57c <__libc_init_array+0x24>
 800b568:	4d0b      	ldr	r5, [pc, #44]	; (800b598 <__libc_init_array+0x40>)
 800b56a:	4c0c      	ldr	r4, [pc, #48]	; (800b59c <__libc_init_array+0x44>)
 800b56c:	f004 fc3c 	bl	800fde8 <_init>
 800b570:	1b64      	subs	r4, r4, r5
 800b572:	10a4      	asrs	r4, r4, #2
 800b574:	2600      	movs	r6, #0
 800b576:	42a6      	cmp	r6, r4
 800b578:	d105      	bne.n	800b586 <__libc_init_array+0x2e>
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b580:	4798      	blx	r3
 800b582:	3601      	adds	r6, #1
 800b584:	e7ee      	b.n	800b564 <__libc_init_array+0xc>
 800b586:	f855 3b04 	ldr.w	r3, [r5], #4
 800b58a:	4798      	blx	r3
 800b58c:	3601      	adds	r6, #1
 800b58e:	e7f2      	b.n	800b576 <__libc_init_array+0x1e>
 800b590:	0801116c 	.word	0x0801116c
 800b594:	0801116c 	.word	0x0801116c
 800b598:	0801116c 	.word	0x0801116c
 800b59c:	08011174 	.word	0x08011174

0800b5a0 <__retarget_lock_init_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <__retarget_lock_acquire_recursive>:
 800b5a2:	4770      	bx	lr

0800b5a4 <__retarget_lock_release_recursive>:
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <malloc>:
 800b5a8:	4b02      	ldr	r3, [pc, #8]	; (800b5b4 <malloc+0xc>)
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	f000 b8b7 	b.w	800b720 <_malloc_r>
 800b5b2:	bf00      	nop
 800b5b4:	20000030 	.word	0x20000030

0800b5b8 <free>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <free+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f000 b843 	b.w	800b648 <_free_r>
 800b5c2:	bf00      	nop
 800b5c4:	20000030 	.word	0x20000030

0800b5c8 <memcmp>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	3901      	subs	r1, #1
 800b5cc:	4402      	add	r2, r0
 800b5ce:	4290      	cmp	r0, r2
 800b5d0:	d101      	bne.n	800b5d6 <memcmp+0xe>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e005      	b.n	800b5e2 <memcmp+0x1a>
 800b5d6:	7803      	ldrb	r3, [r0, #0]
 800b5d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	d001      	beq.n	800b5e4 <memcmp+0x1c>
 800b5e0:	1b18      	subs	r0, r3, r4
 800b5e2:	bd10      	pop	{r4, pc}
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	e7f2      	b.n	800b5ce <memcmp+0x6>

0800b5e8 <memcpy>:
 800b5e8:	440a      	add	r2, r1
 800b5ea:	4291      	cmp	r1, r2
 800b5ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5f0:	d100      	bne.n	800b5f4 <memcpy+0xc>
 800b5f2:	4770      	bx	lr
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5fe:	4291      	cmp	r1, r2
 800b600:	d1f9      	bne.n	800b5f6 <memcpy+0xe>
 800b602:	bd10      	pop	{r4, pc}

0800b604 <memmove>:
 800b604:	4288      	cmp	r0, r1
 800b606:	b510      	push	{r4, lr}
 800b608:	eb01 0402 	add.w	r4, r1, r2
 800b60c:	d902      	bls.n	800b614 <memmove+0x10>
 800b60e:	4284      	cmp	r4, r0
 800b610:	4623      	mov	r3, r4
 800b612:	d807      	bhi.n	800b624 <memmove+0x20>
 800b614:	1e43      	subs	r3, r0, #1
 800b616:	42a1      	cmp	r1, r4
 800b618:	d008      	beq.n	800b62c <memmove+0x28>
 800b61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b622:	e7f8      	b.n	800b616 <memmove+0x12>
 800b624:	4402      	add	r2, r0
 800b626:	4601      	mov	r1, r0
 800b628:	428a      	cmp	r2, r1
 800b62a:	d100      	bne.n	800b62e <memmove+0x2a>
 800b62c:	bd10      	pop	{r4, pc}
 800b62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b636:	e7f7      	b.n	800b628 <memmove+0x24>

0800b638 <memset>:
 800b638:	4402      	add	r2, r0
 800b63a:	4603      	mov	r3, r0
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d100      	bne.n	800b642 <memset+0xa>
 800b640:	4770      	bx	lr
 800b642:	f803 1b01 	strb.w	r1, [r3], #1
 800b646:	e7f9      	b.n	800b63c <memset+0x4>

0800b648 <_free_r>:
 800b648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b64a:	2900      	cmp	r1, #0
 800b64c:	d044      	beq.n	800b6d8 <_free_r+0x90>
 800b64e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b652:	9001      	str	r0, [sp, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f1a1 0404 	sub.w	r4, r1, #4
 800b65a:	bfb8      	it	lt
 800b65c:	18e4      	addlt	r4, r4, r3
 800b65e:	f003 fcaf 	bl	800efc0 <__malloc_lock>
 800b662:	4a1e      	ldr	r2, [pc, #120]	; (800b6dc <_free_r+0x94>)
 800b664:	9801      	ldr	r0, [sp, #4]
 800b666:	6813      	ldr	r3, [r2, #0]
 800b668:	b933      	cbnz	r3, 800b678 <_free_r+0x30>
 800b66a:	6063      	str	r3, [r4, #4]
 800b66c:	6014      	str	r4, [r2, #0]
 800b66e:	b003      	add	sp, #12
 800b670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b674:	f003 bcaa 	b.w	800efcc <__malloc_unlock>
 800b678:	42a3      	cmp	r3, r4
 800b67a:	d908      	bls.n	800b68e <_free_r+0x46>
 800b67c:	6825      	ldr	r5, [r4, #0]
 800b67e:	1961      	adds	r1, r4, r5
 800b680:	428b      	cmp	r3, r1
 800b682:	bf01      	itttt	eq
 800b684:	6819      	ldreq	r1, [r3, #0]
 800b686:	685b      	ldreq	r3, [r3, #4]
 800b688:	1949      	addeq	r1, r1, r5
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	e7ed      	b.n	800b66a <_free_r+0x22>
 800b68e:	461a      	mov	r2, r3
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	b10b      	cbz	r3, 800b698 <_free_r+0x50>
 800b694:	42a3      	cmp	r3, r4
 800b696:	d9fa      	bls.n	800b68e <_free_r+0x46>
 800b698:	6811      	ldr	r1, [r2, #0]
 800b69a:	1855      	adds	r5, r2, r1
 800b69c:	42a5      	cmp	r5, r4
 800b69e:	d10b      	bne.n	800b6b8 <_free_r+0x70>
 800b6a0:	6824      	ldr	r4, [r4, #0]
 800b6a2:	4421      	add	r1, r4
 800b6a4:	1854      	adds	r4, r2, r1
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	6011      	str	r1, [r2, #0]
 800b6aa:	d1e0      	bne.n	800b66e <_free_r+0x26>
 800b6ac:	681c      	ldr	r4, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	6053      	str	r3, [r2, #4]
 800b6b2:	4421      	add	r1, r4
 800b6b4:	6011      	str	r1, [r2, #0]
 800b6b6:	e7da      	b.n	800b66e <_free_r+0x26>
 800b6b8:	d902      	bls.n	800b6c0 <_free_r+0x78>
 800b6ba:	230c      	movs	r3, #12
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	e7d6      	b.n	800b66e <_free_r+0x26>
 800b6c0:	6825      	ldr	r5, [r4, #0]
 800b6c2:	1961      	adds	r1, r4, r5
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	bf04      	itt	eq
 800b6c8:	6819      	ldreq	r1, [r3, #0]
 800b6ca:	685b      	ldreq	r3, [r3, #4]
 800b6cc:	6063      	str	r3, [r4, #4]
 800b6ce:	bf04      	itt	eq
 800b6d0:	1949      	addeq	r1, r1, r5
 800b6d2:	6021      	streq	r1, [r4, #0]
 800b6d4:	6054      	str	r4, [r2, #4]
 800b6d6:	e7ca      	b.n	800b66e <_free_r+0x26>
 800b6d8:	b003      	add	sp, #12
 800b6da:	bd30      	pop	{r4, r5, pc}
 800b6dc:	20000a10 	.word	0x20000a10

0800b6e0 <sbrk_aligned>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	4e0e      	ldr	r6, [pc, #56]	; (800b71c <sbrk_aligned+0x3c>)
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	6831      	ldr	r1, [r6, #0]
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	b911      	cbnz	r1, 800b6f2 <sbrk_aligned+0x12>
 800b6ec:	f001 f904 	bl	800c8f8 <_sbrk_r>
 800b6f0:	6030      	str	r0, [r6, #0]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f001 f8ff 	bl	800c8f8 <_sbrk_r>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d00a      	beq.n	800b714 <sbrk_aligned+0x34>
 800b6fe:	1cc4      	adds	r4, r0, #3
 800b700:	f024 0403 	bic.w	r4, r4, #3
 800b704:	42a0      	cmp	r0, r4
 800b706:	d007      	beq.n	800b718 <sbrk_aligned+0x38>
 800b708:	1a21      	subs	r1, r4, r0
 800b70a:	4628      	mov	r0, r5
 800b70c:	f001 f8f4 	bl	800c8f8 <_sbrk_r>
 800b710:	3001      	adds	r0, #1
 800b712:	d101      	bne.n	800b718 <sbrk_aligned+0x38>
 800b714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b718:	4620      	mov	r0, r4
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	20000a14 	.word	0x20000a14

0800b720 <_malloc_r>:
 800b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b724:	1ccd      	adds	r5, r1, #3
 800b726:	f025 0503 	bic.w	r5, r5, #3
 800b72a:	3508      	adds	r5, #8
 800b72c:	2d0c      	cmp	r5, #12
 800b72e:	bf38      	it	cc
 800b730:	250c      	movcc	r5, #12
 800b732:	2d00      	cmp	r5, #0
 800b734:	4607      	mov	r7, r0
 800b736:	db01      	blt.n	800b73c <_malloc_r+0x1c>
 800b738:	42a9      	cmp	r1, r5
 800b73a:	d905      	bls.n	800b748 <_malloc_r+0x28>
 800b73c:	230c      	movs	r3, #12
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	2600      	movs	r6, #0
 800b742:	4630      	mov	r0, r6
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	4e2e      	ldr	r6, [pc, #184]	; (800b804 <_malloc_r+0xe4>)
 800b74a:	f003 fc39 	bl	800efc0 <__malloc_lock>
 800b74e:	6833      	ldr	r3, [r6, #0]
 800b750:	461c      	mov	r4, r3
 800b752:	bb34      	cbnz	r4, 800b7a2 <_malloc_r+0x82>
 800b754:	4629      	mov	r1, r5
 800b756:	4638      	mov	r0, r7
 800b758:	f7ff ffc2 	bl	800b6e0 <sbrk_aligned>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	4604      	mov	r4, r0
 800b760:	d14d      	bne.n	800b7fe <_malloc_r+0xde>
 800b762:	6834      	ldr	r4, [r6, #0]
 800b764:	4626      	mov	r6, r4
 800b766:	2e00      	cmp	r6, #0
 800b768:	d140      	bne.n	800b7ec <_malloc_r+0xcc>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	4631      	mov	r1, r6
 800b76e:	4638      	mov	r0, r7
 800b770:	eb04 0803 	add.w	r8, r4, r3
 800b774:	f001 f8c0 	bl	800c8f8 <_sbrk_r>
 800b778:	4580      	cmp	r8, r0
 800b77a:	d13a      	bne.n	800b7f2 <_malloc_r+0xd2>
 800b77c:	6821      	ldr	r1, [r4, #0]
 800b77e:	3503      	adds	r5, #3
 800b780:	1a6d      	subs	r5, r5, r1
 800b782:	f025 0503 	bic.w	r5, r5, #3
 800b786:	3508      	adds	r5, #8
 800b788:	2d0c      	cmp	r5, #12
 800b78a:	bf38      	it	cc
 800b78c:	250c      	movcc	r5, #12
 800b78e:	4629      	mov	r1, r5
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff ffa5 	bl	800b6e0 <sbrk_aligned>
 800b796:	3001      	adds	r0, #1
 800b798:	d02b      	beq.n	800b7f2 <_malloc_r+0xd2>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	442b      	add	r3, r5
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	e00e      	b.n	800b7c0 <_malloc_r+0xa0>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	1b52      	subs	r2, r2, r5
 800b7a6:	d41e      	bmi.n	800b7e6 <_malloc_r+0xc6>
 800b7a8:	2a0b      	cmp	r2, #11
 800b7aa:	d916      	bls.n	800b7da <_malloc_r+0xba>
 800b7ac:	1961      	adds	r1, r4, r5
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	6025      	str	r5, [r4, #0]
 800b7b2:	bf18      	it	ne
 800b7b4:	6059      	strne	r1, [r3, #4]
 800b7b6:	6863      	ldr	r3, [r4, #4]
 800b7b8:	bf08      	it	eq
 800b7ba:	6031      	streq	r1, [r6, #0]
 800b7bc:	5162      	str	r2, [r4, r5]
 800b7be:	604b      	str	r3, [r1, #4]
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f104 060b 	add.w	r6, r4, #11
 800b7c6:	f003 fc01 	bl	800efcc <__malloc_unlock>
 800b7ca:	f026 0607 	bic.w	r6, r6, #7
 800b7ce:	1d23      	adds	r3, r4, #4
 800b7d0:	1af2      	subs	r2, r6, r3
 800b7d2:	d0b6      	beq.n	800b742 <_malloc_r+0x22>
 800b7d4:	1b9b      	subs	r3, r3, r6
 800b7d6:	50a3      	str	r3, [r4, r2]
 800b7d8:	e7b3      	b.n	800b742 <_malloc_r+0x22>
 800b7da:	6862      	ldr	r2, [r4, #4]
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	bf0c      	ite	eq
 800b7e0:	6032      	streq	r2, [r6, #0]
 800b7e2:	605a      	strne	r2, [r3, #4]
 800b7e4:	e7ec      	b.n	800b7c0 <_malloc_r+0xa0>
 800b7e6:	4623      	mov	r3, r4
 800b7e8:	6864      	ldr	r4, [r4, #4]
 800b7ea:	e7b2      	b.n	800b752 <_malloc_r+0x32>
 800b7ec:	4634      	mov	r4, r6
 800b7ee:	6876      	ldr	r6, [r6, #4]
 800b7f0:	e7b9      	b.n	800b766 <_malloc_r+0x46>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	603b      	str	r3, [r7, #0]
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f003 fbe8 	bl	800efcc <__malloc_unlock>
 800b7fc:	e7a1      	b.n	800b742 <_malloc_r+0x22>
 800b7fe:	6025      	str	r5, [r4, #0]
 800b800:	e7de      	b.n	800b7c0 <_malloc_r+0xa0>
 800b802:	bf00      	nop
 800b804:	20000a10 	.word	0x20000a10

0800b808 <__sfputc_r>:
 800b808:	6893      	ldr	r3, [r2, #8]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	b410      	push	{r4}
 800b810:	6093      	str	r3, [r2, #8]
 800b812:	da08      	bge.n	800b826 <__sfputc_r+0x1e>
 800b814:	6994      	ldr	r4, [r2, #24]
 800b816:	42a3      	cmp	r3, r4
 800b818:	db01      	blt.n	800b81e <__sfputc_r+0x16>
 800b81a:	290a      	cmp	r1, #10
 800b81c:	d103      	bne.n	800b826 <__sfputc_r+0x1e>
 800b81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b822:	f002 b853 	b.w	800d8cc <__swbuf_r>
 800b826:	6813      	ldr	r3, [r2, #0]
 800b828:	1c58      	adds	r0, r3, #1
 800b82a:	6010      	str	r0, [r2, #0]
 800b82c:	7019      	strb	r1, [r3, #0]
 800b82e:	4608      	mov	r0, r1
 800b830:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <__sfputs_r>:
 800b836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b838:	4606      	mov	r6, r0
 800b83a:	460f      	mov	r7, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	18d5      	adds	r5, r2, r3
 800b840:	42ac      	cmp	r4, r5
 800b842:	d101      	bne.n	800b848 <__sfputs_r+0x12>
 800b844:	2000      	movs	r0, #0
 800b846:	e007      	b.n	800b858 <__sfputs_r+0x22>
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	463a      	mov	r2, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ffda 	bl	800b808 <__sfputc_r>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d1f3      	bne.n	800b840 <__sfputs_r+0xa>
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b85c <_vfiprintf_r>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	460d      	mov	r5, r1
 800b862:	b09d      	sub	sp, #116	; 0x74
 800b864:	4614      	mov	r4, r2
 800b866:	4698      	mov	r8, r3
 800b868:	4606      	mov	r6, r0
 800b86a:	b118      	cbz	r0, 800b874 <_vfiprintf_r+0x18>
 800b86c:	6983      	ldr	r3, [r0, #24]
 800b86e:	b90b      	cbnz	r3, 800b874 <_vfiprintf_r+0x18>
 800b870:	f7ff fdc2 	bl	800b3f8 <__sinit>
 800b874:	4b89      	ldr	r3, [pc, #548]	; (800ba9c <_vfiprintf_r+0x240>)
 800b876:	429d      	cmp	r5, r3
 800b878:	d11b      	bne.n	800b8b2 <_vfiprintf_r+0x56>
 800b87a:	6875      	ldr	r5, [r6, #4]
 800b87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b87e:	07d9      	lsls	r1, r3, #31
 800b880:	d405      	bmi.n	800b88e <_vfiprintf_r+0x32>
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	059a      	lsls	r2, r3, #22
 800b886:	d402      	bmi.n	800b88e <_vfiprintf_r+0x32>
 800b888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b88a:	f7ff fe8a 	bl	800b5a2 <__retarget_lock_acquire_recursive>
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	071b      	lsls	r3, r3, #28
 800b892:	d501      	bpl.n	800b898 <_vfiprintf_r+0x3c>
 800b894:	692b      	ldr	r3, [r5, #16]
 800b896:	b9eb      	cbnz	r3, 800b8d4 <_vfiprintf_r+0x78>
 800b898:	4629      	mov	r1, r5
 800b89a:	4630      	mov	r0, r6
 800b89c:	f002 f87a 	bl	800d994 <__swsetup_r>
 800b8a0:	b1c0      	cbz	r0, 800b8d4 <_vfiprintf_r+0x78>
 800b8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a4:	07dc      	lsls	r4, r3, #31
 800b8a6:	d50e      	bpl.n	800b8c6 <_vfiprintf_r+0x6a>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ac:	b01d      	add	sp, #116	; 0x74
 800b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b2:	4b7b      	ldr	r3, [pc, #492]	; (800baa0 <_vfiprintf_r+0x244>)
 800b8b4:	429d      	cmp	r5, r3
 800b8b6:	d101      	bne.n	800b8bc <_vfiprintf_r+0x60>
 800b8b8:	68b5      	ldr	r5, [r6, #8]
 800b8ba:	e7df      	b.n	800b87c <_vfiprintf_r+0x20>
 800b8bc:	4b79      	ldr	r3, [pc, #484]	; (800baa4 <_vfiprintf_r+0x248>)
 800b8be:	429d      	cmp	r5, r3
 800b8c0:	bf08      	it	eq
 800b8c2:	68f5      	ldreq	r5, [r6, #12]
 800b8c4:	e7da      	b.n	800b87c <_vfiprintf_r+0x20>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	0598      	lsls	r0, r3, #22
 800b8ca:	d4ed      	bmi.n	800b8a8 <_vfiprintf_r+0x4c>
 800b8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ce:	f7ff fe69 	bl	800b5a4 <__retarget_lock_release_recursive>
 800b8d2:	e7e9      	b.n	800b8a8 <_vfiprintf_r+0x4c>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d8:	2320      	movs	r3, #32
 800b8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8e2:	2330      	movs	r3, #48	; 0x30
 800b8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800baa8 <_vfiprintf_r+0x24c>
 800b8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ec:	f04f 0901 	mov.w	r9, #1
 800b8f0:	4623      	mov	r3, r4
 800b8f2:	469a      	mov	sl, r3
 800b8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8f8:	b10a      	cbz	r2, 800b8fe <_vfiprintf_r+0xa2>
 800b8fa:	2a25      	cmp	r2, #37	; 0x25
 800b8fc:	d1f9      	bne.n	800b8f2 <_vfiprintf_r+0x96>
 800b8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b902:	d00b      	beq.n	800b91c <_vfiprintf_r+0xc0>
 800b904:	465b      	mov	r3, fp
 800b906:	4622      	mov	r2, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7ff ff93 	bl	800b836 <__sfputs_r>
 800b910:	3001      	adds	r0, #1
 800b912:	f000 80aa 	beq.w	800ba6a <_vfiprintf_r+0x20e>
 800b916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b918:	445a      	add	r2, fp
 800b91a:	9209      	str	r2, [sp, #36]	; 0x24
 800b91c:	f89a 3000 	ldrb.w	r3, [sl]
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80a2 	beq.w	800ba6a <_vfiprintf_r+0x20e>
 800b926:	2300      	movs	r3, #0
 800b928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b930:	f10a 0a01 	add.w	sl, sl, #1
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	9307      	str	r3, [sp, #28]
 800b938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b93c:	931a      	str	r3, [sp, #104]	; 0x68
 800b93e:	4654      	mov	r4, sl
 800b940:	2205      	movs	r2, #5
 800b942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b946:	4858      	ldr	r0, [pc, #352]	; (800baa8 <_vfiprintf_r+0x24c>)
 800b948:	f7f4 fc6a 	bl	8000220 <memchr>
 800b94c:	9a04      	ldr	r2, [sp, #16]
 800b94e:	b9d8      	cbnz	r0, 800b988 <_vfiprintf_r+0x12c>
 800b950:	06d1      	lsls	r1, r2, #27
 800b952:	bf44      	itt	mi
 800b954:	2320      	movmi	r3, #32
 800b956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b95a:	0713      	lsls	r3, r2, #28
 800b95c:	bf44      	itt	mi
 800b95e:	232b      	movmi	r3, #43	; 0x2b
 800b960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b964:	f89a 3000 	ldrb.w	r3, [sl]
 800b968:	2b2a      	cmp	r3, #42	; 0x2a
 800b96a:	d015      	beq.n	800b998 <_vfiprintf_r+0x13c>
 800b96c:	9a07      	ldr	r2, [sp, #28]
 800b96e:	4654      	mov	r4, sl
 800b970:	2000      	movs	r0, #0
 800b972:	f04f 0c0a 	mov.w	ip, #10
 800b976:	4621      	mov	r1, r4
 800b978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b97c:	3b30      	subs	r3, #48	; 0x30
 800b97e:	2b09      	cmp	r3, #9
 800b980:	d94e      	bls.n	800ba20 <_vfiprintf_r+0x1c4>
 800b982:	b1b0      	cbz	r0, 800b9b2 <_vfiprintf_r+0x156>
 800b984:	9207      	str	r2, [sp, #28]
 800b986:	e014      	b.n	800b9b2 <_vfiprintf_r+0x156>
 800b988:	eba0 0308 	sub.w	r3, r0, r8
 800b98c:	fa09 f303 	lsl.w	r3, r9, r3
 800b990:	4313      	orrs	r3, r2
 800b992:	9304      	str	r3, [sp, #16]
 800b994:	46a2      	mov	sl, r4
 800b996:	e7d2      	b.n	800b93e <_vfiprintf_r+0xe2>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	1d19      	adds	r1, r3, #4
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	9103      	str	r1, [sp, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bfbb      	ittet	lt
 800b9a4:	425b      	neglt	r3, r3
 800b9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9aa:	9307      	strge	r3, [sp, #28]
 800b9ac:	9307      	strlt	r3, [sp, #28]
 800b9ae:	bfb8      	it	lt
 800b9b0:	9204      	strlt	r2, [sp, #16]
 800b9b2:	7823      	ldrb	r3, [r4, #0]
 800b9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9b6:	d10c      	bne.n	800b9d2 <_vfiprintf_r+0x176>
 800b9b8:	7863      	ldrb	r3, [r4, #1]
 800b9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b9bc:	d135      	bne.n	800ba2a <_vfiprintf_r+0x1ce>
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	1d1a      	adds	r2, r3, #4
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	9203      	str	r2, [sp, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bfb8      	it	lt
 800b9ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9ce:	3402      	adds	r4, #2
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bab8 <_vfiprintf_r+0x25c>
 800b9d6:	7821      	ldrb	r1, [r4, #0]
 800b9d8:	2203      	movs	r2, #3
 800b9da:	4650      	mov	r0, sl
 800b9dc:	f7f4 fc20 	bl	8000220 <memchr>
 800b9e0:	b140      	cbz	r0, 800b9f4 <_vfiprintf_r+0x198>
 800b9e2:	2340      	movs	r3, #64	; 0x40
 800b9e4:	eba0 000a 	sub.w	r0, r0, sl
 800b9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	4303      	orrs	r3, r0
 800b9f0:	3401      	adds	r4, #1
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f8:	482c      	ldr	r0, [pc, #176]	; (800baac <_vfiprintf_r+0x250>)
 800b9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9fe:	2206      	movs	r2, #6
 800ba00:	f7f4 fc0e 	bl	8000220 <memchr>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d03f      	beq.n	800ba88 <_vfiprintf_r+0x22c>
 800ba08:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <_vfiprintf_r+0x254>)
 800ba0a:	bb1b      	cbnz	r3, 800ba54 <_vfiprintf_r+0x1f8>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	3307      	adds	r3, #7
 800ba10:	f023 0307 	bic.w	r3, r3, #7
 800ba14:	3308      	adds	r3, #8
 800ba16:	9303      	str	r3, [sp, #12]
 800ba18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1a:	443b      	add	r3, r7
 800ba1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1e:	e767      	b.n	800b8f0 <_vfiprintf_r+0x94>
 800ba20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba24:	460c      	mov	r4, r1
 800ba26:	2001      	movs	r0, #1
 800ba28:	e7a5      	b.n	800b976 <_vfiprintf_r+0x11a>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	3401      	adds	r4, #1
 800ba2e:	9305      	str	r3, [sp, #20]
 800ba30:	4619      	mov	r1, r3
 800ba32:	f04f 0c0a 	mov.w	ip, #10
 800ba36:	4620      	mov	r0, r4
 800ba38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba3c:	3a30      	subs	r2, #48	; 0x30
 800ba3e:	2a09      	cmp	r2, #9
 800ba40:	d903      	bls.n	800ba4a <_vfiprintf_r+0x1ee>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0c5      	beq.n	800b9d2 <_vfiprintf_r+0x176>
 800ba46:	9105      	str	r1, [sp, #20]
 800ba48:	e7c3      	b.n	800b9d2 <_vfiprintf_r+0x176>
 800ba4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba4e:	4604      	mov	r4, r0
 800ba50:	2301      	movs	r3, #1
 800ba52:	e7f0      	b.n	800ba36 <_vfiprintf_r+0x1da>
 800ba54:	ab03      	add	r3, sp, #12
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	462a      	mov	r2, r5
 800ba5a:	4b16      	ldr	r3, [pc, #88]	; (800bab4 <_vfiprintf_r+0x258>)
 800ba5c:	a904      	add	r1, sp, #16
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f000 f8cc 	bl	800bbfc <_printf_float>
 800ba64:	4607      	mov	r7, r0
 800ba66:	1c78      	adds	r0, r7, #1
 800ba68:	d1d6      	bne.n	800ba18 <_vfiprintf_r+0x1bc>
 800ba6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6c:	07d9      	lsls	r1, r3, #31
 800ba6e:	d405      	bmi.n	800ba7c <_vfiprintf_r+0x220>
 800ba70:	89ab      	ldrh	r3, [r5, #12]
 800ba72:	059a      	lsls	r2, r3, #22
 800ba74:	d402      	bmi.n	800ba7c <_vfiprintf_r+0x220>
 800ba76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba78:	f7ff fd94 	bl	800b5a4 <__retarget_lock_release_recursive>
 800ba7c:	89ab      	ldrh	r3, [r5, #12]
 800ba7e:	065b      	lsls	r3, r3, #25
 800ba80:	f53f af12 	bmi.w	800b8a8 <_vfiprintf_r+0x4c>
 800ba84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba86:	e711      	b.n	800b8ac <_vfiprintf_r+0x50>
 800ba88:	ab03      	add	r3, sp, #12
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	462a      	mov	r2, r5
 800ba8e:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <_vfiprintf_r+0x258>)
 800ba90:	a904      	add	r1, sp, #16
 800ba92:	4630      	mov	r0, r6
 800ba94:	f000 fb56 	bl	800c144 <_printf_i>
 800ba98:	e7e4      	b.n	800ba64 <_vfiprintf_r+0x208>
 800ba9a:	bf00      	nop
 800ba9c:	08010c84 	.word	0x08010c84
 800baa0:	08010ca4 	.word	0x08010ca4
 800baa4:	08010c64 	.word	0x08010c64
 800baa8:	08010cc8 	.word	0x08010cc8
 800baac:	08010cd2 	.word	0x08010cd2
 800bab0:	0800bbfd 	.word	0x0800bbfd
 800bab4:	0800b837 	.word	0x0800b837
 800bab8:	08010cce 	.word	0x08010cce

0800babc <__cvt>:
 800babc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	ec55 4b10 	vmov	r4, r5, d0
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	460e      	mov	r6, r1
 800bac8:	4619      	mov	r1, r3
 800baca:	462b      	mov	r3, r5
 800bacc:	bfbb      	ittet	lt
 800bace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bad2:	461d      	movlt	r5, r3
 800bad4:	2300      	movge	r3, #0
 800bad6:	232d      	movlt	r3, #45	; 0x2d
 800bad8:	700b      	strb	r3, [r1, #0]
 800bada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800badc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bae0:	4691      	mov	r9, r2
 800bae2:	f023 0820 	bic.w	r8, r3, #32
 800bae6:	bfbc      	itt	lt
 800bae8:	4622      	movlt	r2, r4
 800baea:	4614      	movlt	r4, r2
 800baec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800baf0:	d005      	beq.n	800bafe <__cvt+0x42>
 800baf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800baf6:	d100      	bne.n	800bafa <__cvt+0x3e>
 800baf8:	3601      	adds	r6, #1
 800bafa:	2102      	movs	r1, #2
 800bafc:	e000      	b.n	800bb00 <__cvt+0x44>
 800bafe:	2103      	movs	r1, #3
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	ab02      	add	r3, sp, #8
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	ec45 4b10 	vmov	d0, r4, r5
 800bb0c:	4653      	mov	r3, sl
 800bb0e:	4632      	mov	r2, r6
 800bb10:	f002 f86a 	bl	800dbe8 <_dtoa_r>
 800bb14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb18:	4607      	mov	r7, r0
 800bb1a:	d102      	bne.n	800bb22 <__cvt+0x66>
 800bb1c:	f019 0f01 	tst.w	r9, #1
 800bb20:	d022      	beq.n	800bb68 <__cvt+0xac>
 800bb22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb26:	eb07 0906 	add.w	r9, r7, r6
 800bb2a:	d110      	bne.n	800bb4e <__cvt+0x92>
 800bb2c:	783b      	ldrb	r3, [r7, #0]
 800bb2e:	2b30      	cmp	r3, #48	; 0x30
 800bb30:	d10a      	bne.n	800bb48 <__cvt+0x8c>
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fff7 	bl	8000b2c <__aeabi_dcmpeq>
 800bb3e:	b918      	cbnz	r0, 800bb48 <__cvt+0x8c>
 800bb40:	f1c6 0601 	rsb	r6, r6, #1
 800bb44:	f8ca 6000 	str.w	r6, [sl]
 800bb48:	f8da 3000 	ldr.w	r3, [sl]
 800bb4c:	4499      	add	r9, r3
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2300      	movs	r3, #0
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7f4 ffe9 	bl	8000b2c <__aeabi_dcmpeq>
 800bb5a:	b108      	cbz	r0, 800bb60 <__cvt+0xa4>
 800bb5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb60:	2230      	movs	r2, #48	; 0x30
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	454b      	cmp	r3, r9
 800bb66:	d307      	bcc.n	800bb78 <__cvt+0xbc>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb6c:	1bdb      	subs	r3, r3, r7
 800bb6e:	4638      	mov	r0, r7
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	b004      	add	sp, #16
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	1c59      	adds	r1, r3, #1
 800bb7a:	9103      	str	r1, [sp, #12]
 800bb7c:	701a      	strb	r2, [r3, #0]
 800bb7e:	e7f0      	b.n	800bb62 <__cvt+0xa6>

0800bb80 <__exponent>:
 800bb80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb82:	4603      	mov	r3, r0
 800bb84:	2900      	cmp	r1, #0
 800bb86:	bfb8      	it	lt
 800bb88:	4249      	neglt	r1, r1
 800bb8a:	f803 2b02 	strb.w	r2, [r3], #2
 800bb8e:	bfb4      	ite	lt
 800bb90:	222d      	movlt	r2, #45	; 0x2d
 800bb92:	222b      	movge	r2, #43	; 0x2b
 800bb94:	2909      	cmp	r1, #9
 800bb96:	7042      	strb	r2, [r0, #1]
 800bb98:	dd2a      	ble.n	800bbf0 <__exponent+0x70>
 800bb9a:	f10d 0407 	add.w	r4, sp, #7
 800bb9e:	46a4      	mov	ip, r4
 800bba0:	270a      	movs	r7, #10
 800bba2:	46a6      	mov	lr, r4
 800bba4:	460a      	mov	r2, r1
 800bba6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bbaa:	fb07 1516 	mls	r5, r7, r6, r1
 800bbae:	3530      	adds	r5, #48	; 0x30
 800bbb0:	2a63      	cmp	r2, #99	; 0x63
 800bbb2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bbb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bbba:	4631      	mov	r1, r6
 800bbbc:	dcf1      	bgt.n	800bba2 <__exponent+0x22>
 800bbbe:	3130      	adds	r1, #48	; 0x30
 800bbc0:	f1ae 0502 	sub.w	r5, lr, #2
 800bbc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bbc8:	1c44      	adds	r4, r0, #1
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4561      	cmp	r1, ip
 800bbce:	d30a      	bcc.n	800bbe6 <__exponent+0x66>
 800bbd0:	f10d 0209 	add.w	r2, sp, #9
 800bbd4:	eba2 020e 	sub.w	r2, r2, lr
 800bbd8:	4565      	cmp	r5, ip
 800bbda:	bf88      	it	hi
 800bbdc:	2200      	movhi	r2, #0
 800bbde:	4413      	add	r3, r2
 800bbe0:	1a18      	subs	r0, r3, r0
 800bbe2:	b003      	add	sp, #12
 800bbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bbee:	e7ed      	b.n	800bbcc <__exponent+0x4c>
 800bbf0:	2330      	movs	r3, #48	; 0x30
 800bbf2:	3130      	adds	r1, #48	; 0x30
 800bbf4:	7083      	strb	r3, [r0, #2]
 800bbf6:	70c1      	strb	r1, [r0, #3]
 800bbf8:	1d03      	adds	r3, r0, #4
 800bbfa:	e7f1      	b.n	800bbe0 <__exponent+0x60>

0800bbfc <_printf_float>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	ed2d 8b02 	vpush	{d8}
 800bc04:	b08d      	sub	sp, #52	; 0x34
 800bc06:	460c      	mov	r4, r1
 800bc08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc0c:	4616      	mov	r6, r2
 800bc0e:	461f      	mov	r7, r3
 800bc10:	4605      	mov	r5, r0
 800bc12:	f003 f947 	bl	800eea4 <_localeconv_r>
 800bc16:	f8d0 a000 	ldr.w	sl, [r0]
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	f7f4 fb5a 	bl	80002d4 <strlen>
 800bc20:	2300      	movs	r3, #0
 800bc22:	930a      	str	r3, [sp, #40]	; 0x28
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	9305      	str	r3, [sp, #20]
 800bc28:	f8d8 3000 	ldr.w	r3, [r8]
 800bc2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc30:	3307      	adds	r3, #7
 800bc32:	f023 0307 	bic.w	r3, r3, #7
 800bc36:	f103 0208 	add.w	r2, r3, #8
 800bc3a:	f8c8 2000 	str.w	r2, [r8]
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc54:	ee08 0a10 	vmov	s16, r0
 800bc58:	4b9f      	ldr	r3, [pc, #636]	; (800bed8 <_printf_float+0x2dc>)
 800bc5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc62:	f7f4 ff95 	bl	8000b90 <__aeabi_dcmpun>
 800bc66:	bb88      	cbnz	r0, 800bccc <_printf_float+0xd0>
 800bc68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6c:	4b9a      	ldr	r3, [pc, #616]	; (800bed8 <_printf_float+0x2dc>)
 800bc6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc72:	f7f4 ff6f 	bl	8000b54 <__aeabi_dcmple>
 800bc76:	bb48      	cbnz	r0, 800bccc <_printf_float+0xd0>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4649      	mov	r1, r9
 800bc80:	f7f4 ff5e 	bl	8000b40 <__aeabi_dcmplt>
 800bc84:	b110      	cbz	r0, 800bc8c <_printf_float+0x90>
 800bc86:	232d      	movs	r3, #45	; 0x2d
 800bc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc8c:	4b93      	ldr	r3, [pc, #588]	; (800bedc <_printf_float+0x2e0>)
 800bc8e:	4894      	ldr	r0, [pc, #592]	; (800bee0 <_printf_float+0x2e4>)
 800bc90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc94:	bf94      	ite	ls
 800bc96:	4698      	movls	r8, r3
 800bc98:	4680      	movhi	r8, r0
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	6123      	str	r3, [r4, #16]
 800bc9e:	9b05      	ldr	r3, [sp, #20]
 800bca0:	f023 0204 	bic.w	r2, r3, #4
 800bca4:	6022      	str	r2, [r4, #0]
 800bca6:	f04f 0900 	mov.w	r9, #0
 800bcaa:	9700      	str	r7, [sp, #0]
 800bcac:	4633      	mov	r3, r6
 800bcae:	aa0b      	add	r2, sp, #44	; 0x2c
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 f9d8 	bl	800c068 <_printf_common>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f040 8090 	bne.w	800bdde <_printf_float+0x1e2>
 800bcbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc2:	b00d      	add	sp, #52	; 0x34
 800bcc4:	ecbd 8b02 	vpop	{d8}
 800bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bccc:	4642      	mov	r2, r8
 800bcce:	464b      	mov	r3, r9
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 ff5c 	bl	8000b90 <__aeabi_dcmpun>
 800bcd8:	b140      	cbz	r0, 800bcec <_printf_float+0xf0>
 800bcda:	464b      	mov	r3, r9
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfbc      	itt	lt
 800bce0:	232d      	movlt	r3, #45	; 0x2d
 800bce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bce6:	487f      	ldr	r0, [pc, #508]	; (800bee4 <_printf_float+0x2e8>)
 800bce8:	4b7f      	ldr	r3, [pc, #508]	; (800bee8 <_printf_float+0x2ec>)
 800bcea:	e7d1      	b.n	800bc90 <_printf_float+0x94>
 800bcec:	6863      	ldr	r3, [r4, #4]
 800bcee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcf2:	9206      	str	r2, [sp, #24]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	d13f      	bne.n	800bd78 <_printf_float+0x17c>
 800bcf8:	2306      	movs	r3, #6
 800bcfa:	6063      	str	r3, [r4, #4]
 800bcfc:	9b05      	ldr	r3, [sp, #20]
 800bcfe:	6861      	ldr	r1, [r4, #4]
 800bd00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd04:	2300      	movs	r3, #0
 800bd06:	9303      	str	r3, [sp, #12]
 800bd08:	ab0a      	add	r3, sp, #40	; 0x28
 800bd0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd0e:	ab09      	add	r3, sp, #36	; 0x24
 800bd10:	ec49 8b10 	vmov	d0, r8, r9
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff fecd 	bl	800babc <__cvt>
 800bd22:	9b06      	ldr	r3, [sp, #24]
 800bd24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd26:	2b47      	cmp	r3, #71	; 0x47
 800bd28:	4680      	mov	r8, r0
 800bd2a:	d108      	bne.n	800bd3e <_printf_float+0x142>
 800bd2c:	1cc8      	adds	r0, r1, #3
 800bd2e:	db02      	blt.n	800bd36 <_printf_float+0x13a>
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	4299      	cmp	r1, r3
 800bd34:	dd41      	ble.n	800bdba <_printf_float+0x1be>
 800bd36:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd3a:	fa5f fb8b 	uxtb.w	fp, fp
 800bd3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd42:	d820      	bhi.n	800bd86 <_printf_float+0x18a>
 800bd44:	3901      	subs	r1, #1
 800bd46:	465a      	mov	r2, fp
 800bd48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd4c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd4e:	f7ff ff17 	bl	800bb80 <__exponent>
 800bd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd54:	1813      	adds	r3, r2, r0
 800bd56:	2a01      	cmp	r2, #1
 800bd58:	4681      	mov	r9, r0
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	dc02      	bgt.n	800bd64 <_printf_float+0x168>
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	07d2      	lsls	r2, r2, #31
 800bd62:	d501      	bpl.n	800bd68 <_printf_float+0x16c>
 800bd64:	3301      	adds	r3, #1
 800bd66:	6123      	str	r3, [r4, #16]
 800bd68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d09c      	beq.n	800bcaa <_printf_float+0xae>
 800bd70:	232d      	movs	r3, #45	; 0x2d
 800bd72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd76:	e798      	b.n	800bcaa <_printf_float+0xae>
 800bd78:	9a06      	ldr	r2, [sp, #24]
 800bd7a:	2a47      	cmp	r2, #71	; 0x47
 800bd7c:	d1be      	bne.n	800bcfc <_printf_float+0x100>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1bc      	bne.n	800bcfc <_printf_float+0x100>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e7b9      	b.n	800bcfa <_printf_float+0xfe>
 800bd86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd8a:	d118      	bne.n	800bdbe <_printf_float+0x1c2>
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	6863      	ldr	r3, [r4, #4]
 800bd90:	dd0b      	ble.n	800bdaa <_printf_float+0x1ae>
 800bd92:	6121      	str	r1, [r4, #16]
 800bd94:	b913      	cbnz	r3, 800bd9c <_printf_float+0x1a0>
 800bd96:	6822      	ldr	r2, [r4, #0]
 800bd98:	07d0      	lsls	r0, r2, #31
 800bd9a:	d502      	bpl.n	800bda2 <_printf_float+0x1a6>
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	440b      	add	r3, r1
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bda4:	f04f 0900 	mov.w	r9, #0
 800bda8:	e7de      	b.n	800bd68 <_printf_float+0x16c>
 800bdaa:	b913      	cbnz	r3, 800bdb2 <_printf_float+0x1b6>
 800bdac:	6822      	ldr	r2, [r4, #0]
 800bdae:	07d2      	lsls	r2, r2, #31
 800bdb0:	d501      	bpl.n	800bdb6 <_printf_float+0x1ba>
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	e7f4      	b.n	800bda0 <_printf_float+0x1a4>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e7f2      	b.n	800bda0 <_printf_float+0x1a4>
 800bdba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc0:	4299      	cmp	r1, r3
 800bdc2:	db05      	blt.n	800bdd0 <_printf_float+0x1d4>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	6121      	str	r1, [r4, #16]
 800bdc8:	07d8      	lsls	r0, r3, #31
 800bdca:	d5ea      	bpl.n	800bda2 <_printf_float+0x1a6>
 800bdcc:	1c4b      	adds	r3, r1, #1
 800bdce:	e7e7      	b.n	800bda0 <_printf_float+0x1a4>
 800bdd0:	2900      	cmp	r1, #0
 800bdd2:	bfd4      	ite	le
 800bdd4:	f1c1 0202 	rsble	r2, r1, #2
 800bdd8:	2201      	movgt	r2, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	e7e0      	b.n	800bda0 <_printf_float+0x1a4>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	055a      	lsls	r2, r3, #21
 800bde2:	d407      	bmi.n	800bdf4 <_printf_float+0x1f8>
 800bde4:	6923      	ldr	r3, [r4, #16]
 800bde6:	4642      	mov	r2, r8
 800bde8:	4631      	mov	r1, r6
 800bdea:	4628      	mov	r0, r5
 800bdec:	47b8      	blx	r7
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d12c      	bne.n	800be4c <_printf_float+0x250>
 800bdf2:	e764      	b.n	800bcbe <_printf_float+0xc2>
 800bdf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdf8:	f240 80e0 	bls.w	800bfbc <_printf_float+0x3c0>
 800bdfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be00:	2200      	movs	r2, #0
 800be02:	2300      	movs	r3, #0
 800be04:	f7f4 fe92 	bl	8000b2c <__aeabi_dcmpeq>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d034      	beq.n	800be76 <_printf_float+0x27a>
 800be0c:	4a37      	ldr	r2, [pc, #220]	; (800beec <_printf_float+0x2f0>)
 800be0e:	2301      	movs	r3, #1
 800be10:	4631      	mov	r1, r6
 800be12:	4628      	mov	r0, r5
 800be14:	47b8      	blx	r7
 800be16:	3001      	adds	r0, #1
 800be18:	f43f af51 	beq.w	800bcbe <_printf_float+0xc2>
 800be1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be20:	429a      	cmp	r2, r3
 800be22:	db02      	blt.n	800be2a <_printf_float+0x22e>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	07d8      	lsls	r0, r3, #31
 800be28:	d510      	bpl.n	800be4c <_printf_float+0x250>
 800be2a:	ee18 3a10 	vmov	r3, s16
 800be2e:	4652      	mov	r2, sl
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	f43f af41 	beq.w	800bcbe <_printf_float+0xc2>
 800be3c:	f04f 0800 	mov.w	r8, #0
 800be40:	f104 091a 	add.w	r9, r4, #26
 800be44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be46:	3b01      	subs	r3, #1
 800be48:	4543      	cmp	r3, r8
 800be4a:	dc09      	bgt.n	800be60 <_printf_float+0x264>
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	079b      	lsls	r3, r3, #30
 800be50:	f100 8105 	bmi.w	800c05e <_printf_float+0x462>
 800be54:	68e0      	ldr	r0, [r4, #12]
 800be56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be58:	4298      	cmp	r0, r3
 800be5a:	bfb8      	it	lt
 800be5c:	4618      	movlt	r0, r3
 800be5e:	e730      	b.n	800bcc2 <_printf_float+0xc6>
 800be60:	2301      	movs	r3, #1
 800be62:	464a      	mov	r2, r9
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	f43f af27 	beq.w	800bcbe <_printf_float+0xc2>
 800be70:	f108 0801 	add.w	r8, r8, #1
 800be74:	e7e6      	b.n	800be44 <_printf_float+0x248>
 800be76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dc39      	bgt.n	800bef0 <_printf_float+0x2f4>
 800be7c:	4a1b      	ldr	r2, [pc, #108]	; (800beec <_printf_float+0x2f0>)
 800be7e:	2301      	movs	r3, #1
 800be80:	4631      	mov	r1, r6
 800be82:	4628      	mov	r0, r5
 800be84:	47b8      	blx	r7
 800be86:	3001      	adds	r0, #1
 800be88:	f43f af19 	beq.w	800bcbe <_printf_float+0xc2>
 800be8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be90:	4313      	orrs	r3, r2
 800be92:	d102      	bne.n	800be9a <_printf_float+0x29e>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	07d9      	lsls	r1, r3, #31
 800be98:	d5d8      	bpl.n	800be4c <_printf_float+0x250>
 800be9a:	ee18 3a10 	vmov	r3, s16
 800be9e:	4652      	mov	r2, sl
 800bea0:	4631      	mov	r1, r6
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b8      	blx	r7
 800bea6:	3001      	adds	r0, #1
 800bea8:	f43f af09 	beq.w	800bcbe <_printf_float+0xc2>
 800beac:	f04f 0900 	mov.w	r9, #0
 800beb0:	f104 0a1a 	add.w	sl, r4, #26
 800beb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb6:	425b      	negs	r3, r3
 800beb8:	454b      	cmp	r3, r9
 800beba:	dc01      	bgt.n	800bec0 <_printf_float+0x2c4>
 800bebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bebe:	e792      	b.n	800bde6 <_printf_float+0x1ea>
 800bec0:	2301      	movs	r3, #1
 800bec2:	4652      	mov	r2, sl
 800bec4:	4631      	mov	r1, r6
 800bec6:	4628      	mov	r0, r5
 800bec8:	47b8      	blx	r7
 800beca:	3001      	adds	r0, #1
 800becc:	f43f aef7 	beq.w	800bcbe <_printf_float+0xc2>
 800bed0:	f109 0901 	add.w	r9, r9, #1
 800bed4:	e7ee      	b.n	800beb4 <_printf_float+0x2b8>
 800bed6:	bf00      	nop
 800bed8:	7fefffff 	.word	0x7fefffff
 800bedc:	08010cd9 	.word	0x08010cd9
 800bee0:	08010cdd 	.word	0x08010cdd
 800bee4:	08010ce5 	.word	0x08010ce5
 800bee8:	08010ce1 	.word	0x08010ce1
 800beec:	08010ce9 	.word	0x08010ce9
 800bef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bef4:	429a      	cmp	r2, r3
 800bef6:	bfa8      	it	ge
 800bef8:	461a      	movge	r2, r3
 800befa:	2a00      	cmp	r2, #0
 800befc:	4691      	mov	r9, r2
 800befe:	dc37      	bgt.n	800bf70 <_printf_float+0x374>
 800bf00:	f04f 0b00 	mov.w	fp, #0
 800bf04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf08:	f104 021a 	add.w	r2, r4, #26
 800bf0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	eba3 0309 	sub.w	r3, r3, r9
 800bf14:	455b      	cmp	r3, fp
 800bf16:	dc33      	bgt.n	800bf80 <_printf_float+0x384>
 800bf18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	db3b      	blt.n	800bf98 <_printf_float+0x39c>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	07da      	lsls	r2, r3, #31
 800bf24:	d438      	bmi.n	800bf98 <_printf_float+0x39c>
 800bf26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf28:	9a05      	ldr	r2, [sp, #20]
 800bf2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf2c:	1a9a      	subs	r2, r3, r2
 800bf2e:	eba3 0901 	sub.w	r9, r3, r1
 800bf32:	4591      	cmp	r9, r2
 800bf34:	bfa8      	it	ge
 800bf36:	4691      	movge	r9, r2
 800bf38:	f1b9 0f00 	cmp.w	r9, #0
 800bf3c:	dc35      	bgt.n	800bfaa <_printf_float+0x3ae>
 800bf3e:	f04f 0800 	mov.w	r8, #0
 800bf42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf46:	f104 0a1a 	add.w	sl, r4, #26
 800bf4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf4e:	1a9b      	subs	r3, r3, r2
 800bf50:	eba3 0309 	sub.w	r3, r3, r9
 800bf54:	4543      	cmp	r3, r8
 800bf56:	f77f af79 	ble.w	800be4c <_printf_float+0x250>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4652      	mov	r2, sl
 800bf5e:	4631      	mov	r1, r6
 800bf60:	4628      	mov	r0, r5
 800bf62:	47b8      	blx	r7
 800bf64:	3001      	adds	r0, #1
 800bf66:	f43f aeaa 	beq.w	800bcbe <_printf_float+0xc2>
 800bf6a:	f108 0801 	add.w	r8, r8, #1
 800bf6e:	e7ec      	b.n	800bf4a <_printf_float+0x34e>
 800bf70:	4613      	mov	r3, r2
 800bf72:	4631      	mov	r1, r6
 800bf74:	4642      	mov	r2, r8
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b8      	blx	r7
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d1c0      	bne.n	800bf00 <_printf_float+0x304>
 800bf7e:	e69e      	b.n	800bcbe <_printf_float+0xc2>
 800bf80:	2301      	movs	r3, #1
 800bf82:	4631      	mov	r1, r6
 800bf84:	4628      	mov	r0, r5
 800bf86:	9205      	str	r2, [sp, #20]
 800bf88:	47b8      	blx	r7
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	f43f ae97 	beq.w	800bcbe <_printf_float+0xc2>
 800bf90:	9a05      	ldr	r2, [sp, #20]
 800bf92:	f10b 0b01 	add.w	fp, fp, #1
 800bf96:	e7b9      	b.n	800bf0c <_printf_float+0x310>
 800bf98:	ee18 3a10 	vmov	r3, s16
 800bf9c:	4652      	mov	r2, sl
 800bf9e:	4631      	mov	r1, r6
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	47b8      	blx	r7
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d1be      	bne.n	800bf26 <_printf_float+0x32a>
 800bfa8:	e689      	b.n	800bcbe <_printf_float+0xc2>
 800bfaa:	9a05      	ldr	r2, [sp, #20]
 800bfac:	464b      	mov	r3, r9
 800bfae:	4442      	add	r2, r8
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	47b8      	blx	r7
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d1c1      	bne.n	800bf3e <_printf_float+0x342>
 800bfba:	e680      	b.n	800bcbe <_printf_float+0xc2>
 800bfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfbe:	2a01      	cmp	r2, #1
 800bfc0:	dc01      	bgt.n	800bfc6 <_printf_float+0x3ca>
 800bfc2:	07db      	lsls	r3, r3, #31
 800bfc4:	d538      	bpl.n	800c038 <_printf_float+0x43c>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4642      	mov	r2, r8
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b8      	blx	r7
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	f43f ae74 	beq.w	800bcbe <_printf_float+0xc2>
 800bfd6:	ee18 3a10 	vmov	r3, s16
 800bfda:	4652      	mov	r2, sl
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f43f ae6b 	beq.w	800bcbe <_printf_float+0xc2>
 800bfe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfec:	2200      	movs	r2, #0
 800bfee:	2300      	movs	r3, #0
 800bff0:	f7f4 fd9c 	bl	8000b2c <__aeabi_dcmpeq>
 800bff4:	b9d8      	cbnz	r0, 800c02e <_printf_float+0x432>
 800bff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff8:	f108 0201 	add.w	r2, r8, #1
 800bffc:	3b01      	subs	r3, #1
 800bffe:	4631      	mov	r1, r6
 800c000:	4628      	mov	r0, r5
 800c002:	47b8      	blx	r7
 800c004:	3001      	adds	r0, #1
 800c006:	d10e      	bne.n	800c026 <_printf_float+0x42a>
 800c008:	e659      	b.n	800bcbe <_printf_float+0xc2>
 800c00a:	2301      	movs	r3, #1
 800c00c:	4652      	mov	r2, sl
 800c00e:	4631      	mov	r1, r6
 800c010:	4628      	mov	r0, r5
 800c012:	47b8      	blx	r7
 800c014:	3001      	adds	r0, #1
 800c016:	f43f ae52 	beq.w	800bcbe <_printf_float+0xc2>
 800c01a:	f108 0801 	add.w	r8, r8, #1
 800c01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c020:	3b01      	subs	r3, #1
 800c022:	4543      	cmp	r3, r8
 800c024:	dcf1      	bgt.n	800c00a <_printf_float+0x40e>
 800c026:	464b      	mov	r3, r9
 800c028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c02c:	e6dc      	b.n	800bde8 <_printf_float+0x1ec>
 800c02e:	f04f 0800 	mov.w	r8, #0
 800c032:	f104 0a1a 	add.w	sl, r4, #26
 800c036:	e7f2      	b.n	800c01e <_printf_float+0x422>
 800c038:	2301      	movs	r3, #1
 800c03a:	4642      	mov	r2, r8
 800c03c:	e7df      	b.n	800bffe <_printf_float+0x402>
 800c03e:	2301      	movs	r3, #1
 800c040:	464a      	mov	r2, r9
 800c042:	4631      	mov	r1, r6
 800c044:	4628      	mov	r0, r5
 800c046:	47b8      	blx	r7
 800c048:	3001      	adds	r0, #1
 800c04a:	f43f ae38 	beq.w	800bcbe <_printf_float+0xc2>
 800c04e:	f108 0801 	add.w	r8, r8, #1
 800c052:	68e3      	ldr	r3, [r4, #12]
 800c054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c056:	1a5b      	subs	r3, r3, r1
 800c058:	4543      	cmp	r3, r8
 800c05a:	dcf0      	bgt.n	800c03e <_printf_float+0x442>
 800c05c:	e6fa      	b.n	800be54 <_printf_float+0x258>
 800c05e:	f04f 0800 	mov.w	r8, #0
 800c062:	f104 0919 	add.w	r9, r4, #25
 800c066:	e7f4      	b.n	800c052 <_printf_float+0x456>

0800c068 <_printf_common>:
 800c068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c06c:	4616      	mov	r6, r2
 800c06e:	4699      	mov	r9, r3
 800c070:	688a      	ldr	r2, [r1, #8]
 800c072:	690b      	ldr	r3, [r1, #16]
 800c074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c078:	4293      	cmp	r3, r2
 800c07a:	bfb8      	it	lt
 800c07c:	4613      	movlt	r3, r2
 800c07e:	6033      	str	r3, [r6, #0]
 800c080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c084:	4607      	mov	r7, r0
 800c086:	460c      	mov	r4, r1
 800c088:	b10a      	cbz	r2, 800c08e <_printf_common+0x26>
 800c08a:	3301      	adds	r3, #1
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	0699      	lsls	r1, r3, #26
 800c092:	bf42      	ittt	mi
 800c094:	6833      	ldrmi	r3, [r6, #0]
 800c096:	3302      	addmi	r3, #2
 800c098:	6033      	strmi	r3, [r6, #0]
 800c09a:	6825      	ldr	r5, [r4, #0]
 800c09c:	f015 0506 	ands.w	r5, r5, #6
 800c0a0:	d106      	bne.n	800c0b0 <_printf_common+0x48>
 800c0a2:	f104 0a19 	add.w	sl, r4, #25
 800c0a6:	68e3      	ldr	r3, [r4, #12]
 800c0a8:	6832      	ldr	r2, [r6, #0]
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	dc26      	bgt.n	800c0fe <_printf_common+0x96>
 800c0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0b4:	1e13      	subs	r3, r2, #0
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	bf18      	it	ne
 800c0ba:	2301      	movne	r3, #1
 800c0bc:	0692      	lsls	r2, r2, #26
 800c0be:	d42b      	bmi.n	800c118 <_printf_common+0xb0>
 800c0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	47c0      	blx	r8
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d01e      	beq.n	800c10c <_printf_common+0xa4>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	68e5      	ldr	r5, [r4, #12]
 800c0d2:	6832      	ldr	r2, [r6, #0]
 800c0d4:	f003 0306 	and.w	r3, r3, #6
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	bf08      	it	eq
 800c0dc:	1aad      	subeq	r5, r5, r2
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	bf0c      	ite	eq
 800c0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0e8:	2500      	movne	r5, #0
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	bfc4      	itt	gt
 800c0ee:	1a9b      	subgt	r3, r3, r2
 800c0f0:	18ed      	addgt	r5, r5, r3
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	341a      	adds	r4, #26
 800c0f6:	42b5      	cmp	r5, r6
 800c0f8:	d11a      	bne.n	800c130 <_printf_common+0xc8>
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	e008      	b.n	800c110 <_printf_common+0xa8>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4652      	mov	r2, sl
 800c102:	4649      	mov	r1, r9
 800c104:	4638      	mov	r0, r7
 800c106:	47c0      	blx	r8
 800c108:	3001      	adds	r0, #1
 800c10a:	d103      	bne.n	800c114 <_printf_common+0xac>
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c114:	3501      	adds	r5, #1
 800c116:	e7c6      	b.n	800c0a6 <_printf_common+0x3e>
 800c118:	18e1      	adds	r1, r4, r3
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	2030      	movs	r0, #48	; 0x30
 800c11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c122:	4422      	add	r2, r4
 800c124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c12c:	3302      	adds	r3, #2
 800c12e:	e7c7      	b.n	800c0c0 <_printf_common+0x58>
 800c130:	2301      	movs	r3, #1
 800c132:	4622      	mov	r2, r4
 800c134:	4649      	mov	r1, r9
 800c136:	4638      	mov	r0, r7
 800c138:	47c0      	blx	r8
 800c13a:	3001      	adds	r0, #1
 800c13c:	d0e6      	beq.n	800c10c <_printf_common+0xa4>
 800c13e:	3601      	adds	r6, #1
 800c140:	e7d9      	b.n	800c0f6 <_printf_common+0x8e>
	...

0800c144 <_printf_i>:
 800c144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c148:	7e0f      	ldrb	r7, [r1, #24]
 800c14a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c14c:	2f78      	cmp	r7, #120	; 0x78
 800c14e:	4691      	mov	r9, r2
 800c150:	4680      	mov	r8, r0
 800c152:	460c      	mov	r4, r1
 800c154:	469a      	mov	sl, r3
 800c156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c15a:	d807      	bhi.n	800c16c <_printf_i+0x28>
 800c15c:	2f62      	cmp	r7, #98	; 0x62
 800c15e:	d80a      	bhi.n	800c176 <_printf_i+0x32>
 800c160:	2f00      	cmp	r7, #0
 800c162:	f000 80d8 	beq.w	800c316 <_printf_i+0x1d2>
 800c166:	2f58      	cmp	r7, #88	; 0x58
 800c168:	f000 80a3 	beq.w	800c2b2 <_printf_i+0x16e>
 800c16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c174:	e03a      	b.n	800c1ec <_printf_i+0xa8>
 800c176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c17a:	2b15      	cmp	r3, #21
 800c17c:	d8f6      	bhi.n	800c16c <_printf_i+0x28>
 800c17e:	a101      	add	r1, pc, #4	; (adr r1, 800c184 <_printf_i+0x40>)
 800c180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c184:	0800c1dd 	.word	0x0800c1dd
 800c188:	0800c1f1 	.word	0x0800c1f1
 800c18c:	0800c16d 	.word	0x0800c16d
 800c190:	0800c16d 	.word	0x0800c16d
 800c194:	0800c16d 	.word	0x0800c16d
 800c198:	0800c16d 	.word	0x0800c16d
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c16d 	.word	0x0800c16d
 800c1a4:	0800c16d 	.word	0x0800c16d
 800c1a8:	0800c16d 	.word	0x0800c16d
 800c1ac:	0800c16d 	.word	0x0800c16d
 800c1b0:	0800c2fd 	.word	0x0800c2fd
 800c1b4:	0800c221 	.word	0x0800c221
 800c1b8:	0800c2df 	.word	0x0800c2df
 800c1bc:	0800c16d 	.word	0x0800c16d
 800c1c0:	0800c16d 	.word	0x0800c16d
 800c1c4:	0800c31f 	.word	0x0800c31f
 800c1c8:	0800c16d 	.word	0x0800c16d
 800c1cc:	0800c221 	.word	0x0800c221
 800c1d0:	0800c16d 	.word	0x0800c16d
 800c1d4:	0800c16d 	.word	0x0800c16d
 800c1d8:	0800c2e7 	.word	0x0800c2e7
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	1d1a      	adds	r2, r3, #4
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	602a      	str	r2, [r5, #0]
 800c1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e0a3      	b.n	800c338 <_printf_i+0x1f4>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	6829      	ldr	r1, [r5, #0]
 800c1f4:	0606      	lsls	r6, r0, #24
 800c1f6:	f101 0304 	add.w	r3, r1, #4
 800c1fa:	d50a      	bpl.n	800c212 <_printf_i+0xce>
 800c1fc:	680e      	ldr	r6, [r1, #0]
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	2e00      	cmp	r6, #0
 800c202:	da03      	bge.n	800c20c <_printf_i+0xc8>
 800c204:	232d      	movs	r3, #45	; 0x2d
 800c206:	4276      	negs	r6, r6
 800c208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c20c:	485e      	ldr	r0, [pc, #376]	; (800c388 <_printf_i+0x244>)
 800c20e:	230a      	movs	r3, #10
 800c210:	e019      	b.n	800c246 <_printf_i+0x102>
 800c212:	680e      	ldr	r6, [r1, #0]
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c21a:	bf18      	it	ne
 800c21c:	b236      	sxthne	r6, r6
 800c21e:	e7ef      	b.n	800c200 <_printf_i+0xbc>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	6820      	ldr	r0, [r4, #0]
 800c224:	1d19      	adds	r1, r3, #4
 800c226:	6029      	str	r1, [r5, #0]
 800c228:	0601      	lsls	r1, r0, #24
 800c22a:	d501      	bpl.n	800c230 <_printf_i+0xec>
 800c22c:	681e      	ldr	r6, [r3, #0]
 800c22e:	e002      	b.n	800c236 <_printf_i+0xf2>
 800c230:	0646      	lsls	r6, r0, #25
 800c232:	d5fb      	bpl.n	800c22c <_printf_i+0xe8>
 800c234:	881e      	ldrh	r6, [r3, #0]
 800c236:	4854      	ldr	r0, [pc, #336]	; (800c388 <_printf_i+0x244>)
 800c238:	2f6f      	cmp	r7, #111	; 0x6f
 800c23a:	bf0c      	ite	eq
 800c23c:	2308      	moveq	r3, #8
 800c23e:	230a      	movne	r3, #10
 800c240:	2100      	movs	r1, #0
 800c242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c246:	6865      	ldr	r5, [r4, #4]
 800c248:	60a5      	str	r5, [r4, #8]
 800c24a:	2d00      	cmp	r5, #0
 800c24c:	bfa2      	ittt	ge
 800c24e:	6821      	ldrge	r1, [r4, #0]
 800c250:	f021 0104 	bicge.w	r1, r1, #4
 800c254:	6021      	strge	r1, [r4, #0]
 800c256:	b90e      	cbnz	r6, 800c25c <_printf_i+0x118>
 800c258:	2d00      	cmp	r5, #0
 800c25a:	d04d      	beq.n	800c2f8 <_printf_i+0x1b4>
 800c25c:	4615      	mov	r5, r2
 800c25e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c262:	fb03 6711 	mls	r7, r3, r1, r6
 800c266:	5dc7      	ldrb	r7, [r0, r7]
 800c268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c26c:	4637      	mov	r7, r6
 800c26e:	42bb      	cmp	r3, r7
 800c270:	460e      	mov	r6, r1
 800c272:	d9f4      	bls.n	800c25e <_printf_i+0x11a>
 800c274:	2b08      	cmp	r3, #8
 800c276:	d10b      	bne.n	800c290 <_printf_i+0x14c>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	07de      	lsls	r6, r3, #31
 800c27c:	d508      	bpl.n	800c290 <_printf_i+0x14c>
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	6861      	ldr	r1, [r4, #4]
 800c282:	4299      	cmp	r1, r3
 800c284:	bfde      	ittt	le
 800c286:	2330      	movle	r3, #48	; 0x30
 800c288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c28c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c290:	1b52      	subs	r2, r2, r5
 800c292:	6122      	str	r2, [r4, #16]
 800c294:	f8cd a000 	str.w	sl, [sp]
 800c298:	464b      	mov	r3, r9
 800c29a:	aa03      	add	r2, sp, #12
 800c29c:	4621      	mov	r1, r4
 800c29e:	4640      	mov	r0, r8
 800c2a0:	f7ff fee2 	bl	800c068 <_printf_common>
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d14c      	bne.n	800c342 <_printf_i+0x1fe>
 800c2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2ac:	b004      	add	sp, #16
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b2:	4835      	ldr	r0, [pc, #212]	; (800c388 <_printf_i+0x244>)
 800c2b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2b8:	6829      	ldr	r1, [r5, #0]
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2c0:	6029      	str	r1, [r5, #0]
 800c2c2:	061d      	lsls	r5, r3, #24
 800c2c4:	d514      	bpl.n	800c2f0 <_printf_i+0x1ac>
 800c2c6:	07df      	lsls	r7, r3, #31
 800c2c8:	bf44      	itt	mi
 800c2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c2ce:	6023      	strmi	r3, [r4, #0]
 800c2d0:	b91e      	cbnz	r6, 800c2da <_printf_i+0x196>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	f023 0320 	bic.w	r3, r3, #32
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	2310      	movs	r3, #16
 800c2dc:	e7b0      	b.n	800c240 <_printf_i+0xfc>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	f043 0320 	orr.w	r3, r3, #32
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	2378      	movs	r3, #120	; 0x78
 800c2e8:	4828      	ldr	r0, [pc, #160]	; (800c38c <_printf_i+0x248>)
 800c2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2ee:	e7e3      	b.n	800c2b8 <_printf_i+0x174>
 800c2f0:	0659      	lsls	r1, r3, #25
 800c2f2:	bf48      	it	mi
 800c2f4:	b2b6      	uxthmi	r6, r6
 800c2f6:	e7e6      	b.n	800c2c6 <_printf_i+0x182>
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	e7bb      	b.n	800c274 <_printf_i+0x130>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	6826      	ldr	r6, [r4, #0]
 800c300:	6961      	ldr	r1, [r4, #20]
 800c302:	1d18      	adds	r0, r3, #4
 800c304:	6028      	str	r0, [r5, #0]
 800c306:	0635      	lsls	r5, r6, #24
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	d501      	bpl.n	800c310 <_printf_i+0x1cc>
 800c30c:	6019      	str	r1, [r3, #0]
 800c30e:	e002      	b.n	800c316 <_printf_i+0x1d2>
 800c310:	0670      	lsls	r0, r6, #25
 800c312:	d5fb      	bpl.n	800c30c <_printf_i+0x1c8>
 800c314:	8019      	strh	r1, [r3, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	4615      	mov	r5, r2
 800c31c:	e7ba      	b.n	800c294 <_printf_i+0x150>
 800c31e:	682b      	ldr	r3, [r5, #0]
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	602a      	str	r2, [r5, #0]
 800c324:	681d      	ldr	r5, [r3, #0]
 800c326:	6862      	ldr	r2, [r4, #4]
 800c328:	2100      	movs	r1, #0
 800c32a:	4628      	mov	r0, r5
 800c32c:	f7f3 ff78 	bl	8000220 <memchr>
 800c330:	b108      	cbz	r0, 800c336 <_printf_i+0x1f2>
 800c332:	1b40      	subs	r0, r0, r5
 800c334:	6060      	str	r0, [r4, #4]
 800c336:	6863      	ldr	r3, [r4, #4]
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	2300      	movs	r3, #0
 800c33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c340:	e7a8      	b.n	800c294 <_printf_i+0x150>
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	462a      	mov	r2, r5
 800c346:	4649      	mov	r1, r9
 800c348:	4640      	mov	r0, r8
 800c34a:	47d0      	blx	sl
 800c34c:	3001      	adds	r0, #1
 800c34e:	d0ab      	beq.n	800c2a8 <_printf_i+0x164>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	079b      	lsls	r3, r3, #30
 800c354:	d413      	bmi.n	800c37e <_printf_i+0x23a>
 800c356:	68e0      	ldr	r0, [r4, #12]
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	4298      	cmp	r0, r3
 800c35c:	bfb8      	it	lt
 800c35e:	4618      	movlt	r0, r3
 800c360:	e7a4      	b.n	800c2ac <_printf_i+0x168>
 800c362:	2301      	movs	r3, #1
 800c364:	4632      	mov	r2, r6
 800c366:	4649      	mov	r1, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	47d0      	blx	sl
 800c36c:	3001      	adds	r0, #1
 800c36e:	d09b      	beq.n	800c2a8 <_printf_i+0x164>
 800c370:	3501      	adds	r5, #1
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	9903      	ldr	r1, [sp, #12]
 800c376:	1a5b      	subs	r3, r3, r1
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dcf2      	bgt.n	800c362 <_printf_i+0x21e>
 800c37c:	e7eb      	b.n	800c356 <_printf_i+0x212>
 800c37e:	2500      	movs	r5, #0
 800c380:	f104 0619 	add.w	r6, r4, #25
 800c384:	e7f5      	b.n	800c372 <_printf_i+0x22e>
 800c386:	bf00      	nop
 800c388:	08010ceb 	.word	0x08010ceb
 800c38c:	08010cfc 	.word	0x08010cfc

0800c390 <_scanf_float>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	b087      	sub	sp, #28
 800c396:	4617      	mov	r7, r2
 800c398:	9303      	str	r3, [sp, #12]
 800c39a:	688b      	ldr	r3, [r1, #8]
 800c39c:	1e5a      	subs	r2, r3, #1
 800c39e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c3a2:	bf83      	ittte	hi
 800c3a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c3a8:	195b      	addhi	r3, r3, r5
 800c3aa:	9302      	strhi	r3, [sp, #8]
 800c3ac:	2300      	movls	r3, #0
 800c3ae:	bf86      	itte	hi
 800c3b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c3b4:	608b      	strhi	r3, [r1, #8]
 800c3b6:	9302      	strls	r3, [sp, #8]
 800c3b8:	680b      	ldr	r3, [r1, #0]
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	2500      	movs	r5, #0
 800c3be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c3c2:	f84b 3b1c 	str.w	r3, [fp], #28
 800c3c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c3ca:	4680      	mov	r8, r0
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	465e      	mov	r6, fp
 800c3d0:	46aa      	mov	sl, r5
 800c3d2:	46a9      	mov	r9, r5
 800c3d4:	9501      	str	r5, [sp, #4]
 800c3d6:	68a2      	ldr	r2, [r4, #8]
 800c3d8:	b152      	cbz	r2, 800c3f0 <_scanf_float+0x60>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	2b4e      	cmp	r3, #78	; 0x4e
 800c3e0:	d864      	bhi.n	800c4ac <_scanf_float+0x11c>
 800c3e2:	2b40      	cmp	r3, #64	; 0x40
 800c3e4:	d83c      	bhi.n	800c460 <_scanf_float+0xd0>
 800c3e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c3ea:	b2c8      	uxtb	r0, r1
 800c3ec:	280e      	cmp	r0, #14
 800c3ee:	d93a      	bls.n	800c466 <_scanf_float+0xd6>
 800c3f0:	f1b9 0f00 	cmp.w	r9, #0
 800c3f4:	d003      	beq.n	800c3fe <_scanf_float+0x6e>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c402:	f1ba 0f01 	cmp.w	sl, #1
 800c406:	f200 8113 	bhi.w	800c630 <_scanf_float+0x2a0>
 800c40a:	455e      	cmp	r6, fp
 800c40c:	f200 8105 	bhi.w	800c61a <_scanf_float+0x28a>
 800c410:	2501      	movs	r5, #1
 800c412:	4628      	mov	r0, r5
 800c414:	b007      	add	sp, #28
 800c416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c41e:	2a0d      	cmp	r2, #13
 800c420:	d8e6      	bhi.n	800c3f0 <_scanf_float+0x60>
 800c422:	a101      	add	r1, pc, #4	; (adr r1, 800c428 <_scanf_float+0x98>)
 800c424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c428:	0800c567 	.word	0x0800c567
 800c42c:	0800c3f1 	.word	0x0800c3f1
 800c430:	0800c3f1 	.word	0x0800c3f1
 800c434:	0800c3f1 	.word	0x0800c3f1
 800c438:	0800c5c7 	.word	0x0800c5c7
 800c43c:	0800c59f 	.word	0x0800c59f
 800c440:	0800c3f1 	.word	0x0800c3f1
 800c444:	0800c3f1 	.word	0x0800c3f1
 800c448:	0800c575 	.word	0x0800c575
 800c44c:	0800c3f1 	.word	0x0800c3f1
 800c450:	0800c3f1 	.word	0x0800c3f1
 800c454:	0800c3f1 	.word	0x0800c3f1
 800c458:	0800c3f1 	.word	0x0800c3f1
 800c45c:	0800c52d 	.word	0x0800c52d
 800c460:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c464:	e7db      	b.n	800c41e <_scanf_float+0x8e>
 800c466:	290e      	cmp	r1, #14
 800c468:	d8c2      	bhi.n	800c3f0 <_scanf_float+0x60>
 800c46a:	a001      	add	r0, pc, #4	; (adr r0, 800c470 <_scanf_float+0xe0>)
 800c46c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c470:	0800c51f 	.word	0x0800c51f
 800c474:	0800c3f1 	.word	0x0800c3f1
 800c478:	0800c51f 	.word	0x0800c51f
 800c47c:	0800c5b3 	.word	0x0800c5b3
 800c480:	0800c3f1 	.word	0x0800c3f1
 800c484:	0800c4cd 	.word	0x0800c4cd
 800c488:	0800c509 	.word	0x0800c509
 800c48c:	0800c509 	.word	0x0800c509
 800c490:	0800c509 	.word	0x0800c509
 800c494:	0800c509 	.word	0x0800c509
 800c498:	0800c509 	.word	0x0800c509
 800c49c:	0800c509 	.word	0x0800c509
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c509 	.word	0x0800c509
 800c4a8:	0800c509 	.word	0x0800c509
 800c4ac:	2b6e      	cmp	r3, #110	; 0x6e
 800c4ae:	d809      	bhi.n	800c4c4 <_scanf_float+0x134>
 800c4b0:	2b60      	cmp	r3, #96	; 0x60
 800c4b2:	d8b2      	bhi.n	800c41a <_scanf_float+0x8a>
 800c4b4:	2b54      	cmp	r3, #84	; 0x54
 800c4b6:	d077      	beq.n	800c5a8 <_scanf_float+0x218>
 800c4b8:	2b59      	cmp	r3, #89	; 0x59
 800c4ba:	d199      	bne.n	800c3f0 <_scanf_float+0x60>
 800c4bc:	2d07      	cmp	r5, #7
 800c4be:	d197      	bne.n	800c3f0 <_scanf_float+0x60>
 800c4c0:	2508      	movs	r5, #8
 800c4c2:	e029      	b.n	800c518 <_scanf_float+0x188>
 800c4c4:	2b74      	cmp	r3, #116	; 0x74
 800c4c6:	d06f      	beq.n	800c5a8 <_scanf_float+0x218>
 800c4c8:	2b79      	cmp	r3, #121	; 0x79
 800c4ca:	e7f6      	b.n	800c4ba <_scanf_float+0x12a>
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	05c8      	lsls	r0, r1, #23
 800c4d0:	d51a      	bpl.n	800c508 <_scanf_float+0x178>
 800c4d2:	9b02      	ldr	r3, [sp, #8]
 800c4d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c4d8:	6021      	str	r1, [r4, #0]
 800c4da:	f109 0901 	add.w	r9, r9, #1
 800c4de:	b11b      	cbz	r3, 800c4e8 <_scanf_float+0x158>
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	3201      	adds	r2, #1
 800c4e4:	9302      	str	r3, [sp, #8]
 800c4e6:	60a2      	str	r2, [r4, #8]
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	607b      	str	r3, [r7, #4]
 800c4fc:	f340 8084 	ble.w	800c608 <_scanf_float+0x278>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	603b      	str	r3, [r7, #0]
 800c506:	e766      	b.n	800c3d6 <_scanf_float+0x46>
 800c508:	eb1a 0f05 	cmn.w	sl, r5
 800c50c:	f47f af70 	bne.w	800c3f0 <_scanf_float+0x60>
 800c510:	6822      	ldr	r2, [r4, #0]
 800c512:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c516:	6022      	str	r2, [r4, #0]
 800c518:	f806 3b01 	strb.w	r3, [r6], #1
 800c51c:	e7e4      	b.n	800c4e8 <_scanf_float+0x158>
 800c51e:	6822      	ldr	r2, [r4, #0]
 800c520:	0610      	lsls	r0, r2, #24
 800c522:	f57f af65 	bpl.w	800c3f0 <_scanf_float+0x60>
 800c526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c52a:	e7f4      	b.n	800c516 <_scanf_float+0x186>
 800c52c:	f1ba 0f00 	cmp.w	sl, #0
 800c530:	d10e      	bne.n	800c550 <_scanf_float+0x1c0>
 800c532:	f1b9 0f00 	cmp.w	r9, #0
 800c536:	d10e      	bne.n	800c556 <_scanf_float+0x1c6>
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c53e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c542:	d108      	bne.n	800c556 <_scanf_float+0x1c6>
 800c544:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c548:	6022      	str	r2, [r4, #0]
 800c54a:	f04f 0a01 	mov.w	sl, #1
 800c54e:	e7e3      	b.n	800c518 <_scanf_float+0x188>
 800c550:	f1ba 0f02 	cmp.w	sl, #2
 800c554:	d055      	beq.n	800c602 <_scanf_float+0x272>
 800c556:	2d01      	cmp	r5, #1
 800c558:	d002      	beq.n	800c560 <_scanf_float+0x1d0>
 800c55a:	2d04      	cmp	r5, #4
 800c55c:	f47f af48 	bne.w	800c3f0 <_scanf_float+0x60>
 800c560:	3501      	adds	r5, #1
 800c562:	b2ed      	uxtb	r5, r5
 800c564:	e7d8      	b.n	800c518 <_scanf_float+0x188>
 800c566:	f1ba 0f01 	cmp.w	sl, #1
 800c56a:	f47f af41 	bne.w	800c3f0 <_scanf_float+0x60>
 800c56e:	f04f 0a02 	mov.w	sl, #2
 800c572:	e7d1      	b.n	800c518 <_scanf_float+0x188>
 800c574:	b97d      	cbnz	r5, 800c596 <_scanf_float+0x206>
 800c576:	f1b9 0f00 	cmp.w	r9, #0
 800c57a:	f47f af3c 	bne.w	800c3f6 <_scanf_float+0x66>
 800c57e:	6822      	ldr	r2, [r4, #0]
 800c580:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c584:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c588:	f47f af39 	bne.w	800c3fe <_scanf_float+0x6e>
 800c58c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c590:	6022      	str	r2, [r4, #0]
 800c592:	2501      	movs	r5, #1
 800c594:	e7c0      	b.n	800c518 <_scanf_float+0x188>
 800c596:	2d03      	cmp	r5, #3
 800c598:	d0e2      	beq.n	800c560 <_scanf_float+0x1d0>
 800c59a:	2d05      	cmp	r5, #5
 800c59c:	e7de      	b.n	800c55c <_scanf_float+0x1cc>
 800c59e:	2d02      	cmp	r5, #2
 800c5a0:	f47f af26 	bne.w	800c3f0 <_scanf_float+0x60>
 800c5a4:	2503      	movs	r5, #3
 800c5a6:	e7b7      	b.n	800c518 <_scanf_float+0x188>
 800c5a8:	2d06      	cmp	r5, #6
 800c5aa:	f47f af21 	bne.w	800c3f0 <_scanf_float+0x60>
 800c5ae:	2507      	movs	r5, #7
 800c5b0:	e7b2      	b.n	800c518 <_scanf_float+0x188>
 800c5b2:	6822      	ldr	r2, [r4, #0]
 800c5b4:	0591      	lsls	r1, r2, #22
 800c5b6:	f57f af1b 	bpl.w	800c3f0 <_scanf_float+0x60>
 800c5ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c5be:	6022      	str	r2, [r4, #0]
 800c5c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c5c4:	e7a8      	b.n	800c518 <_scanf_float+0x188>
 800c5c6:	6822      	ldr	r2, [r4, #0]
 800c5c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c5cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c5d0:	d006      	beq.n	800c5e0 <_scanf_float+0x250>
 800c5d2:	0550      	lsls	r0, r2, #21
 800c5d4:	f57f af0c 	bpl.w	800c3f0 <_scanf_float+0x60>
 800c5d8:	f1b9 0f00 	cmp.w	r9, #0
 800c5dc:	f43f af0f 	beq.w	800c3fe <_scanf_float+0x6e>
 800c5e0:	0591      	lsls	r1, r2, #22
 800c5e2:	bf58      	it	pl
 800c5e4:	9901      	ldrpl	r1, [sp, #4]
 800c5e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5ea:	bf58      	it	pl
 800c5ec:	eba9 0101 	subpl.w	r1, r9, r1
 800c5f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c5f4:	bf58      	it	pl
 800c5f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	f04f 0900 	mov.w	r9, #0
 800c600:	e78a      	b.n	800c518 <_scanf_float+0x188>
 800c602:	f04f 0a03 	mov.w	sl, #3
 800c606:	e787      	b.n	800c518 <_scanf_float+0x188>
 800c608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c60c:	4639      	mov	r1, r7
 800c60e:	4640      	mov	r0, r8
 800c610:	4798      	blx	r3
 800c612:	2800      	cmp	r0, #0
 800c614:	f43f aedf 	beq.w	800c3d6 <_scanf_float+0x46>
 800c618:	e6ea      	b.n	800c3f0 <_scanf_float+0x60>
 800c61a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c61e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c622:	463a      	mov	r2, r7
 800c624:	4640      	mov	r0, r8
 800c626:	4798      	blx	r3
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	e6ec      	b.n	800c40a <_scanf_float+0x7a>
 800c630:	1e6b      	subs	r3, r5, #1
 800c632:	2b06      	cmp	r3, #6
 800c634:	d825      	bhi.n	800c682 <_scanf_float+0x2f2>
 800c636:	2d02      	cmp	r5, #2
 800c638:	d836      	bhi.n	800c6a8 <_scanf_float+0x318>
 800c63a:	455e      	cmp	r6, fp
 800c63c:	f67f aee8 	bls.w	800c410 <_scanf_float+0x80>
 800c640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c644:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c648:	463a      	mov	r2, r7
 800c64a:	4640      	mov	r0, r8
 800c64c:	4798      	blx	r3
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	3b01      	subs	r3, #1
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	e7f1      	b.n	800c63a <_scanf_float+0x2aa>
 800c656:	9802      	ldr	r0, [sp, #8]
 800c658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c65c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c660:	9002      	str	r0, [sp, #8]
 800c662:	463a      	mov	r2, r7
 800c664:	4640      	mov	r0, r8
 800c666:	4798      	blx	r3
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	6123      	str	r3, [r4, #16]
 800c66e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c672:	fa5f fa8a 	uxtb.w	sl, sl
 800c676:	f1ba 0f02 	cmp.w	sl, #2
 800c67a:	d1ec      	bne.n	800c656 <_scanf_float+0x2c6>
 800c67c:	3d03      	subs	r5, #3
 800c67e:	b2ed      	uxtb	r5, r5
 800c680:	1b76      	subs	r6, r6, r5
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	05da      	lsls	r2, r3, #23
 800c686:	d52f      	bpl.n	800c6e8 <_scanf_float+0x358>
 800c688:	055b      	lsls	r3, r3, #21
 800c68a:	d510      	bpl.n	800c6ae <_scanf_float+0x31e>
 800c68c:	455e      	cmp	r6, fp
 800c68e:	f67f aebf 	bls.w	800c410 <_scanf_float+0x80>
 800c692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c69a:	463a      	mov	r2, r7
 800c69c:	4640      	mov	r0, r8
 800c69e:	4798      	blx	r3
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	e7f1      	b.n	800c68c <_scanf_float+0x2fc>
 800c6a8:	46aa      	mov	sl, r5
 800c6aa:	9602      	str	r6, [sp, #8]
 800c6ac:	e7df      	b.n	800c66e <_scanf_float+0x2de>
 800c6ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c6b2:	6923      	ldr	r3, [r4, #16]
 800c6b4:	2965      	cmp	r1, #101	; 0x65
 800c6b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c6ba:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800c6be:	6123      	str	r3, [r4, #16]
 800c6c0:	d00c      	beq.n	800c6dc <_scanf_float+0x34c>
 800c6c2:	2945      	cmp	r1, #69	; 0x45
 800c6c4:	d00a      	beq.n	800c6dc <_scanf_float+0x34c>
 800c6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6ca:	463a      	mov	r2, r7
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	4798      	blx	r3
 800c6d0:	6923      	ldr	r3, [r4, #16]
 800c6d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	1eb5      	subs	r5, r6, #2
 800c6da:	6123      	str	r3, [r4, #16]
 800c6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6e0:	463a      	mov	r2, r7
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	4798      	blx	r3
 800c6e6:	462e      	mov	r6, r5
 800c6e8:	6825      	ldr	r5, [r4, #0]
 800c6ea:	f015 0510 	ands.w	r5, r5, #16
 800c6ee:	d159      	bne.n	800c7a4 <_scanf_float+0x414>
 800c6f0:	7035      	strb	r5, [r6, #0]
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6fc:	d11b      	bne.n	800c736 <_scanf_float+0x3a6>
 800c6fe:	9b01      	ldr	r3, [sp, #4]
 800c700:	454b      	cmp	r3, r9
 800c702:	eba3 0209 	sub.w	r2, r3, r9
 800c706:	d123      	bne.n	800c750 <_scanf_float+0x3c0>
 800c708:	2200      	movs	r2, #0
 800c70a:	4659      	mov	r1, fp
 800c70c:	4640      	mov	r0, r8
 800c70e:	f000 ffed 	bl	800d6ec <_strtod_r>
 800c712:	6822      	ldr	r2, [r4, #0]
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	f012 0f02 	tst.w	r2, #2
 800c71a:	ec57 6b10 	vmov	r6, r7, d0
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	d021      	beq.n	800c766 <_scanf_float+0x3d6>
 800c722:	9903      	ldr	r1, [sp, #12]
 800c724:	1d1a      	adds	r2, r3, #4
 800c726:	600a      	str	r2, [r1, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	e9c3 6700 	strd	r6, r7, [r3]
 800c72e:	68e3      	ldr	r3, [r4, #12]
 800c730:	3301      	adds	r3, #1
 800c732:	60e3      	str	r3, [r4, #12]
 800c734:	e66d      	b.n	800c412 <_scanf_float+0x82>
 800c736:	9b04      	ldr	r3, [sp, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0e5      	beq.n	800c708 <_scanf_float+0x378>
 800c73c:	9905      	ldr	r1, [sp, #20]
 800c73e:	230a      	movs	r3, #10
 800c740:	462a      	mov	r2, r5
 800c742:	3101      	adds	r1, #1
 800c744:	4640      	mov	r0, r8
 800c746:	f001 f8b5 	bl	800d8b4 <_strtol_r>
 800c74a:	9b04      	ldr	r3, [sp, #16]
 800c74c:	9e05      	ldr	r6, [sp, #20]
 800c74e:	1ac2      	subs	r2, r0, r3
 800c750:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c754:	429e      	cmp	r6, r3
 800c756:	bf28      	it	cs
 800c758:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c75c:	4912      	ldr	r1, [pc, #72]	; (800c7a8 <_scanf_float+0x418>)
 800c75e:	4630      	mov	r0, r6
 800c760:	f000 f91e 	bl	800c9a0 <siprintf>
 800c764:	e7d0      	b.n	800c708 <_scanf_float+0x378>
 800c766:	9903      	ldr	r1, [sp, #12]
 800c768:	f012 0f04 	tst.w	r2, #4
 800c76c:	f103 0204 	add.w	r2, r3, #4
 800c770:	600a      	str	r2, [r1, #0]
 800c772:	d1d9      	bne.n	800c728 <_scanf_float+0x398>
 800c774:	f8d3 8000 	ldr.w	r8, [r3]
 800c778:	ee10 2a10 	vmov	r2, s0
 800c77c:	ee10 0a10 	vmov	r0, s0
 800c780:	463b      	mov	r3, r7
 800c782:	4639      	mov	r1, r7
 800c784:	f7f4 fa04 	bl	8000b90 <__aeabi_dcmpun>
 800c788:	b128      	cbz	r0, 800c796 <_scanf_float+0x406>
 800c78a:	4808      	ldr	r0, [pc, #32]	; (800c7ac <_scanf_float+0x41c>)
 800c78c:	f7fe fcf4 	bl	800b178 <nanf>
 800c790:	ed88 0a00 	vstr	s0, [r8]
 800c794:	e7cb      	b.n	800c72e <_scanf_float+0x39e>
 800c796:	4630      	mov	r0, r6
 800c798:	4639      	mov	r1, r7
 800c79a:	f7f4 fa57 	bl	8000c4c <__aeabi_d2f>
 800c79e:	f8c8 0000 	str.w	r0, [r8]
 800c7a2:	e7c4      	b.n	800c72e <_scanf_float+0x39e>
 800c7a4:	2500      	movs	r5, #0
 800c7a6:	e634      	b.n	800c412 <_scanf_float+0x82>
 800c7a8:	08010d0d 	.word	0x08010d0d
 800c7ac:	08010e17 	.word	0x08010e17

0800c7b0 <iprintf>:
 800c7b0:	b40f      	push	{r0, r1, r2, r3}
 800c7b2:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <iprintf+0x2c>)
 800c7b4:	b513      	push	{r0, r1, r4, lr}
 800c7b6:	681c      	ldr	r4, [r3, #0]
 800c7b8:	b124      	cbz	r4, 800c7c4 <iprintf+0x14>
 800c7ba:	69a3      	ldr	r3, [r4, #24]
 800c7bc:	b913      	cbnz	r3, 800c7c4 <iprintf+0x14>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f7fe fe1a 	bl	800b3f8 <__sinit>
 800c7c4:	ab05      	add	r3, sp, #20
 800c7c6:	9a04      	ldr	r2, [sp, #16]
 800c7c8:	68a1      	ldr	r1, [r4, #8]
 800c7ca:	9301      	str	r3, [sp, #4]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f7ff f845 	bl	800b85c <_vfiprintf_r>
 800c7d2:	b002      	add	sp, #8
 800c7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7d8:	b004      	add	sp, #16
 800c7da:	4770      	bx	lr
 800c7dc:	20000030 	.word	0x20000030

0800c7e0 <putchar>:
 800c7e0:	4b09      	ldr	r3, [pc, #36]	; (800c808 <putchar+0x28>)
 800c7e2:	b513      	push	{r0, r1, r4, lr}
 800c7e4:	681c      	ldr	r4, [r3, #0]
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	b134      	cbz	r4, 800c7f8 <putchar+0x18>
 800c7ea:	69a3      	ldr	r3, [r4, #24]
 800c7ec:	b923      	cbnz	r3, 800c7f8 <putchar+0x18>
 800c7ee:	9001      	str	r0, [sp, #4]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7fe fe01 	bl	800b3f8 <__sinit>
 800c7f6:	9901      	ldr	r1, [sp, #4]
 800c7f8:	68a2      	ldr	r2, [r4, #8]
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	b002      	add	sp, #8
 800c7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c802:	f003 ba4b 	b.w	800fc9c <_putc_r>
 800c806:	bf00      	nop
 800c808:	20000030 	.word	0x20000030

0800c80c <_puts_r>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	460e      	mov	r6, r1
 800c810:	4605      	mov	r5, r0
 800c812:	b118      	cbz	r0, 800c81c <_puts_r+0x10>
 800c814:	6983      	ldr	r3, [r0, #24]
 800c816:	b90b      	cbnz	r3, 800c81c <_puts_r+0x10>
 800c818:	f7fe fdee 	bl	800b3f8 <__sinit>
 800c81c:	69ab      	ldr	r3, [r5, #24]
 800c81e:	68ac      	ldr	r4, [r5, #8]
 800c820:	b913      	cbnz	r3, 800c828 <_puts_r+0x1c>
 800c822:	4628      	mov	r0, r5
 800c824:	f7fe fde8 	bl	800b3f8 <__sinit>
 800c828:	4b2c      	ldr	r3, [pc, #176]	; (800c8dc <_puts_r+0xd0>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d120      	bne.n	800c870 <_puts_r+0x64>
 800c82e:	686c      	ldr	r4, [r5, #4]
 800c830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c832:	07db      	lsls	r3, r3, #31
 800c834:	d405      	bmi.n	800c842 <_puts_r+0x36>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	0598      	lsls	r0, r3, #22
 800c83a:	d402      	bmi.n	800c842 <_puts_r+0x36>
 800c83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c83e:	f7fe feb0 	bl	800b5a2 <__retarget_lock_acquire_recursive>
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	0719      	lsls	r1, r3, #28
 800c846:	d51d      	bpl.n	800c884 <_puts_r+0x78>
 800c848:	6923      	ldr	r3, [r4, #16]
 800c84a:	b1db      	cbz	r3, 800c884 <_puts_r+0x78>
 800c84c:	3e01      	subs	r6, #1
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c854:	3b01      	subs	r3, #1
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	bb39      	cbnz	r1, 800c8aa <_puts_r+0x9e>
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	da38      	bge.n	800c8d0 <_puts_r+0xc4>
 800c85e:	4622      	mov	r2, r4
 800c860:	210a      	movs	r1, #10
 800c862:	4628      	mov	r0, r5
 800c864:	f001 f832 	bl	800d8cc <__swbuf_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	d011      	beq.n	800c890 <_puts_r+0x84>
 800c86c:	250a      	movs	r5, #10
 800c86e:	e011      	b.n	800c894 <_puts_r+0x88>
 800c870:	4b1b      	ldr	r3, [pc, #108]	; (800c8e0 <_puts_r+0xd4>)
 800c872:	429c      	cmp	r4, r3
 800c874:	d101      	bne.n	800c87a <_puts_r+0x6e>
 800c876:	68ac      	ldr	r4, [r5, #8]
 800c878:	e7da      	b.n	800c830 <_puts_r+0x24>
 800c87a:	4b1a      	ldr	r3, [pc, #104]	; (800c8e4 <_puts_r+0xd8>)
 800c87c:	429c      	cmp	r4, r3
 800c87e:	bf08      	it	eq
 800c880:	68ec      	ldreq	r4, [r5, #12]
 800c882:	e7d5      	b.n	800c830 <_puts_r+0x24>
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f001 f884 	bl	800d994 <__swsetup_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0dd      	beq.n	800c84c <_puts_r+0x40>
 800c890:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c896:	07da      	lsls	r2, r3, #31
 800c898:	d405      	bmi.n	800c8a6 <_puts_r+0x9a>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	059b      	lsls	r3, r3, #22
 800c89e:	d402      	bmi.n	800c8a6 <_puts_r+0x9a>
 800c8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8a2:	f7fe fe7f 	bl	800b5a4 <__retarget_lock_release_recursive>
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	da04      	bge.n	800c8b8 <_puts_r+0xac>
 800c8ae:	69a2      	ldr	r2, [r4, #24]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	dc06      	bgt.n	800c8c2 <_puts_r+0xb6>
 800c8b4:	290a      	cmp	r1, #10
 800c8b6:	d004      	beq.n	800c8c2 <_puts_r+0xb6>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	6022      	str	r2, [r4, #0]
 800c8be:	7019      	strb	r1, [r3, #0]
 800c8c0:	e7c5      	b.n	800c84e <_puts_r+0x42>
 800c8c2:	4622      	mov	r2, r4
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f001 f801 	bl	800d8cc <__swbuf_r>
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d1bf      	bne.n	800c84e <_puts_r+0x42>
 800c8ce:	e7df      	b.n	800c890 <_puts_r+0x84>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	250a      	movs	r5, #10
 800c8d4:	1c5a      	adds	r2, r3, #1
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	701d      	strb	r5, [r3, #0]
 800c8da:	e7db      	b.n	800c894 <_puts_r+0x88>
 800c8dc:	08010c84 	.word	0x08010c84
 800c8e0:	08010ca4 	.word	0x08010ca4
 800c8e4:	08010c64 	.word	0x08010c64

0800c8e8 <puts>:
 800c8e8:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <puts+0xc>)
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	f7ff bf8d 	b.w	800c80c <_puts_r>
 800c8f2:	bf00      	nop
 800c8f4:	20000030 	.word	0x20000030

0800c8f8 <_sbrk_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_sbrk_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f7 fb0a 	bl	8003f1c <_sbrk>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_sbrk_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_sbrk_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20000a18 	.word	0x20000a18

0800c918 <_raise_r>:
 800c918:	291f      	cmp	r1, #31
 800c91a:	b538      	push	{r3, r4, r5, lr}
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	d904      	bls.n	800c92c <_raise_r+0x14>
 800c922:	2316      	movs	r3, #22
 800c924:	6003      	str	r3, [r0, #0]
 800c926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c92e:	b112      	cbz	r2, 800c936 <_raise_r+0x1e>
 800c930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c934:	b94b      	cbnz	r3, 800c94a <_raise_r+0x32>
 800c936:	4620      	mov	r0, r4
 800c938:	f000 f830 	bl	800c99c <_getpid_r>
 800c93c:	462a      	mov	r2, r5
 800c93e:	4601      	mov	r1, r0
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c946:	f000 b817 	b.w	800c978 <_kill_r>
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d00a      	beq.n	800c964 <_raise_r+0x4c>
 800c94e:	1c59      	adds	r1, r3, #1
 800c950:	d103      	bne.n	800c95a <_raise_r+0x42>
 800c952:	2316      	movs	r3, #22
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	2001      	movs	r0, #1
 800c958:	e7e7      	b.n	800c92a <_raise_r+0x12>
 800c95a:	2400      	movs	r4, #0
 800c95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c960:	4628      	mov	r0, r5
 800c962:	4798      	blx	r3
 800c964:	2000      	movs	r0, #0
 800c966:	e7e0      	b.n	800c92a <_raise_r+0x12>

0800c968 <raise>:
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <raise+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f7ff bfd3 	b.w	800c918 <_raise_r>
 800c972:	bf00      	nop
 800c974:	20000030 	.word	0x20000030

0800c978 <_kill_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d07      	ldr	r5, [pc, #28]	; (800c998 <_kill_r+0x20>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	4611      	mov	r1, r2
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	f7f7 fa5e 	bl	8003e46 <_kill>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	d102      	bne.n	800c994 <_kill_r+0x1c>
 800c98e:	682b      	ldr	r3, [r5, #0]
 800c990:	b103      	cbz	r3, 800c994 <_kill_r+0x1c>
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	20000a18 	.word	0x20000a18

0800c99c <_getpid_r>:
 800c99c:	f7f7 ba4b 	b.w	8003e36 <_getpid>

0800c9a0 <siprintf>:
 800c9a0:	b40e      	push	{r1, r2, r3}
 800c9a2:	b500      	push	{lr}
 800c9a4:	b09c      	sub	sp, #112	; 0x70
 800c9a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c9a8:	9002      	str	r0, [sp, #8]
 800c9aa:	9006      	str	r0, [sp, #24]
 800c9ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9b0:	4809      	ldr	r0, [pc, #36]	; (800c9d8 <siprintf+0x38>)
 800c9b2:	9107      	str	r1, [sp, #28]
 800c9b4:	9104      	str	r1, [sp, #16]
 800c9b6:	4909      	ldr	r1, [pc, #36]	; (800c9dc <siprintf+0x3c>)
 800c9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9bc:	9105      	str	r1, [sp, #20]
 800c9be:	6800      	ldr	r0, [r0, #0]
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	a902      	add	r1, sp, #8
 800c9c4:	f003 f86a 	bl	800fa9c <_svfiprintf_r>
 800c9c8:	9b02      	ldr	r3, [sp, #8]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	701a      	strb	r2, [r3, #0]
 800c9ce:	b01c      	add	sp, #112	; 0x70
 800c9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d4:	b003      	add	sp, #12
 800c9d6:	4770      	bx	lr
 800c9d8:	20000030 	.word	0x20000030
 800c9dc:	ffff0208 	.word	0xffff0208

0800c9e0 <__sread>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e8:	f003 f9a0 	bl	800fd2c <_read_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	bfab      	itete	ge
 800c9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9f4:	181b      	addge	r3, r3, r0
 800c9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9fa:	bfac      	ite	ge
 800c9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9fe:	81a3      	strhlt	r3, [r4, #12]
 800ca00:	bd10      	pop	{r4, pc}

0800ca02 <__swrite>:
 800ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca06:	461f      	mov	r7, r3
 800ca08:	898b      	ldrh	r3, [r1, #12]
 800ca0a:	05db      	lsls	r3, r3, #23
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	4616      	mov	r6, r2
 800ca12:	d505      	bpl.n	800ca20 <__swrite+0x1e>
 800ca14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca18:	2302      	movs	r3, #2
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f002 fa46 	bl	800eeac <_lseek_r>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	463b      	mov	r3, r7
 800ca30:	4628      	mov	r0, r5
 800ca32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	f000 bf9b 	b.w	800d970 <_write_r>

0800ca3a <__sseek>:
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca42:	f002 fa33 	bl	800eeac <_lseek_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	bf15      	itete	ne
 800ca4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca56:	81a3      	strheq	r3, [r4, #12]
 800ca58:	bf18      	it	ne
 800ca5a:	81a3      	strhne	r3, [r4, #12]
 800ca5c:	bd10      	pop	{r4, pc}

0800ca5e <__sclose>:
 800ca5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca62:	f001 b823 	b.w	800daac <_close_r>

0800ca66 <strcpy>:
 800ca66:	4603      	mov	r3, r0
 800ca68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca6c:	f803 2b01 	strb.w	r2, [r3], #1
 800ca70:	2a00      	cmp	r2, #0
 800ca72:	d1f9      	bne.n	800ca68 <strcpy+0x2>
 800ca74:	4770      	bx	lr

0800ca76 <strstr>:
 800ca76:	780a      	ldrb	r2, [r1, #0]
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	b96a      	cbnz	r2, 800ca98 <strstr+0x22>
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d109      	bne.n	800ca96 <strstr+0x20>
 800ca82:	460c      	mov	r4, r1
 800ca84:	4605      	mov	r5, r0
 800ca86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0f6      	beq.n	800ca7c <strstr+0x6>
 800ca8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ca92:	429e      	cmp	r6, r3
 800ca94:	d0f7      	beq.n	800ca86 <strstr+0x10>
 800ca96:	3001      	adds	r0, #1
 800ca98:	7803      	ldrb	r3, [r0, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1ef      	bne.n	800ca7e <strstr+0x8>
 800ca9e:	4618      	mov	r0, r3
 800caa0:	e7ec      	b.n	800ca7c <strstr+0x6>

0800caa2 <sulp>:
 800caa2:	b570      	push	{r4, r5, r6, lr}
 800caa4:	4604      	mov	r4, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	ec45 4b10 	vmov	d0, r4, r5
 800caac:	4616      	mov	r6, r2
 800caae:	f002 fe05 	bl	800f6bc <__ulp>
 800cab2:	ec51 0b10 	vmov	r0, r1, d0
 800cab6:	b17e      	cbz	r6, 800cad8 <sulp+0x36>
 800cab8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cabc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dd09      	ble.n	800cad8 <sulp+0x36>
 800cac4:	051b      	lsls	r3, r3, #20
 800cac6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800caca:	2400      	movs	r4, #0
 800cacc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cad0:	4622      	mov	r2, r4
 800cad2:	462b      	mov	r3, r5
 800cad4:	f7f3 fdc2 	bl	800065c <__aeabi_dmul>
 800cad8:	bd70      	pop	{r4, r5, r6, pc}
 800cada:	0000      	movs	r0, r0
 800cadc:	0000      	movs	r0, r0
	...

0800cae0 <_strtod_l>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	ed2d 8b02 	vpush	{d8}
 800cae8:	b09d      	sub	sp, #116	; 0x74
 800caea:	461f      	mov	r7, r3
 800caec:	2300      	movs	r3, #0
 800caee:	9318      	str	r3, [sp, #96]	; 0x60
 800caf0:	4ba2      	ldr	r3, [pc, #648]	; (800cd7c <_strtod_l+0x29c>)
 800caf2:	9213      	str	r2, [sp, #76]	; 0x4c
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	9305      	str	r3, [sp, #20]
 800caf8:	4604      	mov	r4, r0
 800cafa:	4618      	mov	r0, r3
 800cafc:	4688      	mov	r8, r1
 800cafe:	f7f3 fbe9 	bl	80002d4 <strlen>
 800cb02:	f04f 0a00 	mov.w	sl, #0
 800cb06:	4605      	mov	r5, r0
 800cb08:	f04f 0b00 	mov.w	fp, #0
 800cb0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	2a2b      	cmp	r2, #43	; 0x2b
 800cb16:	d04e      	beq.n	800cbb6 <_strtod_l+0xd6>
 800cb18:	d83b      	bhi.n	800cb92 <_strtod_l+0xb2>
 800cb1a:	2a0d      	cmp	r2, #13
 800cb1c:	d834      	bhi.n	800cb88 <_strtod_l+0xa8>
 800cb1e:	2a08      	cmp	r2, #8
 800cb20:	d834      	bhi.n	800cb8c <_strtod_l+0xac>
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	d03e      	beq.n	800cba4 <_strtod_l+0xc4>
 800cb26:	2300      	movs	r3, #0
 800cb28:	930a      	str	r3, [sp, #40]	; 0x28
 800cb2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cb2c:	7833      	ldrb	r3, [r6, #0]
 800cb2e:	2b30      	cmp	r3, #48	; 0x30
 800cb30:	f040 80b0 	bne.w	800cc94 <_strtod_l+0x1b4>
 800cb34:	7873      	ldrb	r3, [r6, #1]
 800cb36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb3a:	2b58      	cmp	r3, #88	; 0x58
 800cb3c:	d168      	bne.n	800cc10 <_strtod_l+0x130>
 800cb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	ab18      	add	r3, sp, #96	; 0x60
 800cb44:	9702      	str	r7, [sp, #8]
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	4a8d      	ldr	r2, [pc, #564]	; (800cd80 <_strtod_l+0x2a0>)
 800cb4a:	ab19      	add	r3, sp, #100	; 0x64
 800cb4c:	a917      	add	r1, sp, #92	; 0x5c
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f001 fea0 	bl	800e894 <__gethex>
 800cb54:	f010 0707 	ands.w	r7, r0, #7
 800cb58:	4605      	mov	r5, r0
 800cb5a:	d005      	beq.n	800cb68 <_strtod_l+0x88>
 800cb5c:	2f06      	cmp	r7, #6
 800cb5e:	d12c      	bne.n	800cbba <_strtod_l+0xda>
 800cb60:	3601      	adds	r6, #1
 800cb62:	2300      	movs	r3, #0
 800cb64:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb66:	930a      	str	r3, [sp, #40]	; 0x28
 800cb68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f040 8590 	bne.w	800d690 <_strtod_l+0xbb0>
 800cb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb72:	b1eb      	cbz	r3, 800cbb0 <_strtod_l+0xd0>
 800cb74:	4652      	mov	r2, sl
 800cb76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb7a:	ec43 2b10 	vmov	d0, r2, r3
 800cb7e:	b01d      	add	sp, #116	; 0x74
 800cb80:	ecbd 8b02 	vpop	{d8}
 800cb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb88:	2a20      	cmp	r2, #32
 800cb8a:	d1cc      	bne.n	800cb26 <_strtod_l+0x46>
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb90:	e7be      	b.n	800cb10 <_strtod_l+0x30>
 800cb92:	2a2d      	cmp	r2, #45	; 0x2d
 800cb94:	d1c7      	bne.n	800cb26 <_strtod_l+0x46>
 800cb96:	2201      	movs	r2, #1
 800cb98:	920a      	str	r2, [sp, #40]	; 0x28
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb9e:	785b      	ldrb	r3, [r3, #1]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1c2      	bne.n	800cb2a <_strtod_l+0x4a>
 800cba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cba6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f040 856e 	bne.w	800d68c <_strtod_l+0xbac>
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	465b      	mov	r3, fp
 800cbb4:	e7e1      	b.n	800cb7a <_strtod_l+0x9a>
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	e7ee      	b.n	800cb98 <_strtod_l+0xb8>
 800cbba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbbc:	b13a      	cbz	r2, 800cbce <_strtod_l+0xee>
 800cbbe:	2135      	movs	r1, #53	; 0x35
 800cbc0:	a81a      	add	r0, sp, #104	; 0x68
 800cbc2:	f002 fe86 	bl	800f8d2 <__copybits>
 800cbc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f002 fa45 	bl	800f058 <_Bfree>
 800cbce:	3f01      	subs	r7, #1
 800cbd0:	2f04      	cmp	r7, #4
 800cbd2:	d806      	bhi.n	800cbe2 <_strtod_l+0x102>
 800cbd4:	e8df f007 	tbb	[pc, r7]
 800cbd8:	1714030a 	.word	0x1714030a
 800cbdc:	0a          	.byte	0x0a
 800cbdd:	00          	.byte	0x00
 800cbde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cbe2:	0728      	lsls	r0, r5, #28
 800cbe4:	d5c0      	bpl.n	800cb68 <_strtod_l+0x88>
 800cbe6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cbea:	e7bd      	b.n	800cb68 <_strtod_l+0x88>
 800cbec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cbf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cbf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cbf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cbfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbfe:	e7f0      	b.n	800cbe2 <_strtod_l+0x102>
 800cc00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cd84 <_strtod_l+0x2a4>
 800cc04:	e7ed      	b.n	800cbe2 <_strtod_l+0x102>
 800cc06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cc0e:	e7e8      	b.n	800cbe2 <_strtod_l+0x102>
 800cc10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b30      	cmp	r3, #48	; 0x30
 800cc1a:	d0f9      	beq.n	800cc10 <_strtod_l+0x130>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d0a3      	beq.n	800cb68 <_strtod_l+0x88>
 800cc20:	2301      	movs	r3, #1
 800cc22:	f04f 0900 	mov.w	r9, #0
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800cc30:	464f      	mov	r7, r9
 800cc32:	220a      	movs	r2, #10
 800cc34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc36:	7806      	ldrb	r6, [r0, #0]
 800cc38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cc3c:	b2d9      	uxtb	r1, r3
 800cc3e:	2909      	cmp	r1, #9
 800cc40:	d92a      	bls.n	800cc98 <_strtod_l+0x1b8>
 800cc42:	9905      	ldr	r1, [sp, #20]
 800cc44:	462a      	mov	r2, r5
 800cc46:	f003 f883 	bl	800fd50 <strncmp>
 800cc4a:	b398      	cbz	r0, 800ccb4 <_strtod_l+0x1d4>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	4632      	mov	r2, r6
 800cc50:	463d      	mov	r5, r7
 800cc52:	9005      	str	r0, [sp, #20]
 800cc54:	4603      	mov	r3, r0
 800cc56:	2a65      	cmp	r2, #101	; 0x65
 800cc58:	d001      	beq.n	800cc5e <_strtod_l+0x17e>
 800cc5a:	2a45      	cmp	r2, #69	; 0x45
 800cc5c:	d118      	bne.n	800cc90 <_strtod_l+0x1b0>
 800cc5e:	b91d      	cbnz	r5, 800cc68 <_strtod_l+0x188>
 800cc60:	9a04      	ldr	r2, [sp, #16]
 800cc62:	4302      	orrs	r2, r0
 800cc64:	d09e      	beq.n	800cba4 <_strtod_l+0xc4>
 800cc66:	2500      	movs	r5, #0
 800cc68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cc6c:	f108 0201 	add.w	r2, r8, #1
 800cc70:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cc76:	2a2b      	cmp	r2, #43	; 0x2b
 800cc78:	d075      	beq.n	800cd66 <_strtod_l+0x286>
 800cc7a:	2a2d      	cmp	r2, #45	; 0x2d
 800cc7c:	d07b      	beq.n	800cd76 <_strtod_l+0x296>
 800cc7e:	f04f 0c00 	mov.w	ip, #0
 800cc82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cc86:	2909      	cmp	r1, #9
 800cc88:	f240 8082 	bls.w	800cd90 <_strtod_l+0x2b0>
 800cc8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc90:	2600      	movs	r6, #0
 800cc92:	e09d      	b.n	800cdd0 <_strtod_l+0x2f0>
 800cc94:	2300      	movs	r3, #0
 800cc96:	e7c4      	b.n	800cc22 <_strtod_l+0x142>
 800cc98:	2f08      	cmp	r7, #8
 800cc9a:	bfd8      	it	le
 800cc9c:	9907      	ldrle	r1, [sp, #28]
 800cc9e:	f100 0001 	add.w	r0, r0, #1
 800cca2:	bfda      	itte	le
 800cca4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cca8:	9307      	strle	r3, [sp, #28]
 800ccaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ccae:	3701      	adds	r7, #1
 800ccb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800ccb2:	e7bf      	b.n	800cc34 <_strtod_l+0x154>
 800ccb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccb6:	195a      	adds	r2, r3, r5
 800ccb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccba:	5d5a      	ldrb	r2, [r3, r5]
 800ccbc:	2f00      	cmp	r7, #0
 800ccbe:	d037      	beq.n	800cd30 <_strtod_l+0x250>
 800ccc0:	9005      	str	r0, [sp, #20]
 800ccc2:	463d      	mov	r5, r7
 800ccc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ccc8:	2b09      	cmp	r3, #9
 800ccca:	d912      	bls.n	800ccf2 <_strtod_l+0x212>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7c2      	b.n	800cc56 <_strtod_l+0x176>
 800ccd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccd6:	785a      	ldrb	r2, [r3, #1]
 800ccd8:	3001      	adds	r0, #1
 800ccda:	2a30      	cmp	r2, #48	; 0x30
 800ccdc:	d0f8      	beq.n	800ccd0 <_strtod_l+0x1f0>
 800ccde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cce2:	2b08      	cmp	r3, #8
 800cce4:	f200 84d9 	bhi.w	800d69a <_strtod_l+0xbba>
 800cce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccea:	9005      	str	r0, [sp, #20]
 800ccec:	2000      	movs	r0, #0
 800ccee:	9308      	str	r3, [sp, #32]
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	3a30      	subs	r2, #48	; 0x30
 800ccf4:	f100 0301 	add.w	r3, r0, #1
 800ccf8:	d014      	beq.n	800cd24 <_strtod_l+0x244>
 800ccfa:	9905      	ldr	r1, [sp, #20]
 800ccfc:	4419      	add	r1, r3
 800ccfe:	9105      	str	r1, [sp, #20]
 800cd00:	462b      	mov	r3, r5
 800cd02:	eb00 0e05 	add.w	lr, r0, r5
 800cd06:	210a      	movs	r1, #10
 800cd08:	4573      	cmp	r3, lr
 800cd0a:	d113      	bne.n	800cd34 <_strtod_l+0x254>
 800cd0c:	182b      	adds	r3, r5, r0
 800cd0e:	2b08      	cmp	r3, #8
 800cd10:	f105 0501 	add.w	r5, r5, #1
 800cd14:	4405      	add	r5, r0
 800cd16:	dc1c      	bgt.n	800cd52 <_strtod_l+0x272>
 800cd18:	9907      	ldr	r1, [sp, #28]
 800cd1a:	230a      	movs	r3, #10
 800cd1c:	fb03 2301 	mla	r3, r3, r1, r2
 800cd20:	9307      	str	r3, [sp, #28]
 800cd22:	2300      	movs	r3, #0
 800cd24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd26:	1c51      	adds	r1, r2, #1
 800cd28:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd2a:	7852      	ldrb	r2, [r2, #1]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	e7c9      	b.n	800ccc4 <_strtod_l+0x1e4>
 800cd30:	4638      	mov	r0, r7
 800cd32:	e7d2      	b.n	800ccda <_strtod_l+0x1fa>
 800cd34:	2b08      	cmp	r3, #8
 800cd36:	dc04      	bgt.n	800cd42 <_strtod_l+0x262>
 800cd38:	9e07      	ldr	r6, [sp, #28]
 800cd3a:	434e      	muls	r6, r1
 800cd3c:	9607      	str	r6, [sp, #28]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	e7e2      	b.n	800cd08 <_strtod_l+0x228>
 800cd42:	f103 0c01 	add.w	ip, r3, #1
 800cd46:	f1bc 0f10 	cmp.w	ip, #16
 800cd4a:	bfd8      	it	le
 800cd4c:	fb01 f909 	mulle.w	r9, r1, r9
 800cd50:	e7f5      	b.n	800cd3e <_strtod_l+0x25e>
 800cd52:	2d10      	cmp	r5, #16
 800cd54:	bfdc      	itt	le
 800cd56:	230a      	movle	r3, #10
 800cd58:	fb03 2909 	mlale	r9, r3, r9, r2
 800cd5c:	e7e1      	b.n	800cd22 <_strtod_l+0x242>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9305      	str	r3, [sp, #20]
 800cd62:	2301      	movs	r3, #1
 800cd64:	e77c      	b.n	800cc60 <_strtod_l+0x180>
 800cd66:	f04f 0c00 	mov.w	ip, #0
 800cd6a:	f108 0202 	add.w	r2, r8, #2
 800cd6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cd74:	e785      	b.n	800cc82 <_strtod_l+0x1a2>
 800cd76:	f04f 0c01 	mov.w	ip, #1
 800cd7a:	e7f6      	b.n	800cd6a <_strtod_l+0x28a>
 800cd7c:	08010ff8 	.word	0x08010ff8
 800cd80:	08010d14 	.word	0x08010d14
 800cd84:	7ff00000 	.word	0x7ff00000
 800cd88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd8a:	1c51      	adds	r1, r2, #1
 800cd8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd8e:	7852      	ldrb	r2, [r2, #1]
 800cd90:	2a30      	cmp	r2, #48	; 0x30
 800cd92:	d0f9      	beq.n	800cd88 <_strtod_l+0x2a8>
 800cd94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cd98:	2908      	cmp	r1, #8
 800cd9a:	f63f af79 	bhi.w	800cc90 <_strtod_l+0x1b0>
 800cd9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cda2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cda4:	9206      	str	r2, [sp, #24]
 800cda6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cda8:	1c51      	adds	r1, r2, #1
 800cdaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800cdac:	7852      	ldrb	r2, [r2, #1]
 800cdae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cdb2:	2e09      	cmp	r6, #9
 800cdb4:	d937      	bls.n	800ce26 <_strtod_l+0x346>
 800cdb6:	9e06      	ldr	r6, [sp, #24]
 800cdb8:	1b89      	subs	r1, r1, r6
 800cdba:	2908      	cmp	r1, #8
 800cdbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cdc0:	dc02      	bgt.n	800cdc8 <_strtod_l+0x2e8>
 800cdc2:	4576      	cmp	r6, lr
 800cdc4:	bfa8      	it	ge
 800cdc6:	4676      	movge	r6, lr
 800cdc8:	f1bc 0f00 	cmp.w	ip, #0
 800cdcc:	d000      	beq.n	800cdd0 <_strtod_l+0x2f0>
 800cdce:	4276      	negs	r6, r6
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	d14d      	bne.n	800ce70 <_strtod_l+0x390>
 800cdd4:	9904      	ldr	r1, [sp, #16]
 800cdd6:	4301      	orrs	r1, r0
 800cdd8:	f47f aec6 	bne.w	800cb68 <_strtod_l+0x88>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f47f aee1 	bne.w	800cba4 <_strtod_l+0xc4>
 800cde2:	2a69      	cmp	r2, #105	; 0x69
 800cde4:	d027      	beq.n	800ce36 <_strtod_l+0x356>
 800cde6:	dc24      	bgt.n	800ce32 <_strtod_l+0x352>
 800cde8:	2a49      	cmp	r2, #73	; 0x49
 800cdea:	d024      	beq.n	800ce36 <_strtod_l+0x356>
 800cdec:	2a4e      	cmp	r2, #78	; 0x4e
 800cdee:	f47f aed9 	bne.w	800cba4 <_strtod_l+0xc4>
 800cdf2:	499f      	ldr	r1, [pc, #636]	; (800d070 <_strtod_l+0x590>)
 800cdf4:	a817      	add	r0, sp, #92	; 0x5c
 800cdf6:	f001 ffa5 	bl	800ed44 <__match>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f43f aed2 	beq.w	800cba4 <_strtod_l+0xc4>
 800ce00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b28      	cmp	r3, #40	; 0x28
 800ce06:	d12d      	bne.n	800ce64 <_strtod_l+0x384>
 800ce08:	499a      	ldr	r1, [pc, #616]	; (800d074 <_strtod_l+0x594>)
 800ce0a:	aa1a      	add	r2, sp, #104	; 0x68
 800ce0c:	a817      	add	r0, sp, #92	; 0x5c
 800ce0e:	f001 ffad 	bl	800ed6c <__hexnan>
 800ce12:	2805      	cmp	r0, #5
 800ce14:	d126      	bne.n	800ce64 <_strtod_l+0x384>
 800ce16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ce1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ce20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ce24:	e6a0      	b.n	800cb68 <_strtod_l+0x88>
 800ce26:	210a      	movs	r1, #10
 800ce28:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ce2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ce30:	e7b9      	b.n	800cda6 <_strtod_l+0x2c6>
 800ce32:	2a6e      	cmp	r2, #110	; 0x6e
 800ce34:	e7db      	b.n	800cdee <_strtod_l+0x30e>
 800ce36:	4990      	ldr	r1, [pc, #576]	; (800d078 <_strtod_l+0x598>)
 800ce38:	a817      	add	r0, sp, #92	; 0x5c
 800ce3a:	f001 ff83 	bl	800ed44 <__match>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	f43f aeb0 	beq.w	800cba4 <_strtod_l+0xc4>
 800ce44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce46:	498d      	ldr	r1, [pc, #564]	; (800d07c <_strtod_l+0x59c>)
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	a817      	add	r0, sp, #92	; 0x5c
 800ce4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce4e:	f001 ff79 	bl	800ed44 <__match>
 800ce52:	b910      	cbnz	r0, 800ce5a <_strtod_l+0x37a>
 800ce54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce56:	3301      	adds	r3, #1
 800ce58:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d08c <_strtod_l+0x5ac>
 800ce5e:	f04f 0a00 	mov.w	sl, #0
 800ce62:	e681      	b.n	800cb68 <_strtod_l+0x88>
 800ce64:	4886      	ldr	r0, [pc, #536]	; (800d080 <_strtod_l+0x5a0>)
 800ce66:	f7fe f977 	bl	800b158 <nan>
 800ce6a:	ec5b ab10 	vmov	sl, fp, d0
 800ce6e:	e67b      	b.n	800cb68 <_strtod_l+0x88>
 800ce70:	9b05      	ldr	r3, [sp, #20]
 800ce72:	9807      	ldr	r0, [sp, #28]
 800ce74:	1af3      	subs	r3, r6, r3
 800ce76:	2f00      	cmp	r7, #0
 800ce78:	bf08      	it	eq
 800ce7a:	462f      	moveq	r7, r5
 800ce7c:	2d10      	cmp	r5, #16
 800ce7e:	9306      	str	r3, [sp, #24]
 800ce80:	46a8      	mov	r8, r5
 800ce82:	bfa8      	it	ge
 800ce84:	f04f 0810 	movge.w	r8, #16
 800ce88:	f7f3 fb6e 	bl	8000568 <__aeabi_ui2d>
 800ce8c:	2d09      	cmp	r5, #9
 800ce8e:	4682      	mov	sl, r0
 800ce90:	468b      	mov	fp, r1
 800ce92:	dd13      	ble.n	800cebc <_strtod_l+0x3dc>
 800ce94:	4b7b      	ldr	r3, [pc, #492]	; (800d084 <_strtod_l+0x5a4>)
 800ce96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ce9e:	f7f3 fbdd 	bl	800065c <__aeabi_dmul>
 800cea2:	4682      	mov	sl, r0
 800cea4:	4648      	mov	r0, r9
 800cea6:	468b      	mov	fp, r1
 800cea8:	f7f3 fb5e 	bl	8000568 <__aeabi_ui2d>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4650      	mov	r0, sl
 800ceb2:	4659      	mov	r1, fp
 800ceb4:	f7f3 fa1c 	bl	80002f0 <__adddf3>
 800ceb8:	4682      	mov	sl, r0
 800ceba:	468b      	mov	fp, r1
 800cebc:	2d0f      	cmp	r5, #15
 800cebe:	dc38      	bgt.n	800cf32 <_strtod_l+0x452>
 800cec0:	9b06      	ldr	r3, [sp, #24]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f43f ae50 	beq.w	800cb68 <_strtod_l+0x88>
 800cec8:	dd24      	ble.n	800cf14 <_strtod_l+0x434>
 800ceca:	2b16      	cmp	r3, #22
 800cecc:	dc0b      	bgt.n	800cee6 <_strtod_l+0x406>
 800cece:	496d      	ldr	r1, [pc, #436]	; (800d084 <_strtod_l+0x5a4>)
 800ced0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ced4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced8:	4652      	mov	r2, sl
 800ceda:	465b      	mov	r3, fp
 800cedc:	f7f3 fbbe 	bl	800065c <__aeabi_dmul>
 800cee0:	4682      	mov	sl, r0
 800cee2:	468b      	mov	fp, r1
 800cee4:	e640      	b.n	800cb68 <_strtod_l+0x88>
 800cee6:	9a06      	ldr	r2, [sp, #24]
 800cee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ceec:	4293      	cmp	r3, r2
 800ceee:	db20      	blt.n	800cf32 <_strtod_l+0x452>
 800cef0:	4c64      	ldr	r4, [pc, #400]	; (800d084 <_strtod_l+0x5a4>)
 800cef2:	f1c5 050f 	rsb	r5, r5, #15
 800cef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cefa:	4652      	mov	r2, sl
 800cefc:	465b      	mov	r3, fp
 800cefe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf02:	f7f3 fbab 	bl	800065c <__aeabi_dmul>
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	1b5d      	subs	r5, r3, r5
 800cf0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf12:	e7e3      	b.n	800cedc <_strtod_l+0x3fc>
 800cf14:	9b06      	ldr	r3, [sp, #24]
 800cf16:	3316      	adds	r3, #22
 800cf18:	db0b      	blt.n	800cf32 <_strtod_l+0x452>
 800cf1a:	9b05      	ldr	r3, [sp, #20]
 800cf1c:	1b9e      	subs	r6, r3, r6
 800cf1e:	4b59      	ldr	r3, [pc, #356]	; (800d084 <_strtod_l+0x5a4>)
 800cf20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cf24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	f7f3 fcc0 	bl	80008b0 <__aeabi_ddiv>
 800cf30:	e7d6      	b.n	800cee0 <_strtod_l+0x400>
 800cf32:	9b06      	ldr	r3, [sp, #24]
 800cf34:	eba5 0808 	sub.w	r8, r5, r8
 800cf38:	4498      	add	r8, r3
 800cf3a:	f1b8 0f00 	cmp.w	r8, #0
 800cf3e:	dd74      	ble.n	800d02a <_strtod_l+0x54a>
 800cf40:	f018 030f 	ands.w	r3, r8, #15
 800cf44:	d00a      	beq.n	800cf5c <_strtod_l+0x47c>
 800cf46:	494f      	ldr	r1, [pc, #316]	; (800d084 <_strtod_l+0x5a4>)
 800cf48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf4c:	4652      	mov	r2, sl
 800cf4e:	465b      	mov	r3, fp
 800cf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf54:	f7f3 fb82 	bl	800065c <__aeabi_dmul>
 800cf58:	4682      	mov	sl, r0
 800cf5a:	468b      	mov	fp, r1
 800cf5c:	f038 080f 	bics.w	r8, r8, #15
 800cf60:	d04f      	beq.n	800d002 <_strtod_l+0x522>
 800cf62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf66:	dd22      	ble.n	800cfae <_strtod_l+0x4ce>
 800cf68:	2500      	movs	r5, #0
 800cf6a:	462e      	mov	r6, r5
 800cf6c:	9507      	str	r5, [sp, #28]
 800cf6e:	9505      	str	r5, [sp, #20]
 800cf70:	2322      	movs	r3, #34	; 0x22
 800cf72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d08c <_strtod_l+0x5ac>
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	f04f 0a00 	mov.w	sl, #0
 800cf7c:	9b07      	ldr	r3, [sp, #28]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f43f adf2 	beq.w	800cb68 <_strtod_l+0x88>
 800cf84:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf86:	4620      	mov	r0, r4
 800cf88:	f002 f866 	bl	800f058 <_Bfree>
 800cf8c:	9905      	ldr	r1, [sp, #20]
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f002 f862 	bl	800f058 <_Bfree>
 800cf94:	4631      	mov	r1, r6
 800cf96:	4620      	mov	r0, r4
 800cf98:	f002 f85e 	bl	800f058 <_Bfree>
 800cf9c:	9907      	ldr	r1, [sp, #28]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f002 f85a 	bl	800f058 <_Bfree>
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f002 f856 	bl	800f058 <_Bfree>
 800cfac:	e5dc      	b.n	800cb68 <_strtod_l+0x88>
 800cfae:	4b36      	ldr	r3, [pc, #216]	; (800d088 <_strtod_l+0x5a8>)
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cfb8:	4650      	mov	r0, sl
 800cfba:	4659      	mov	r1, fp
 800cfbc:	4699      	mov	r9, r3
 800cfbe:	f1b8 0f01 	cmp.w	r8, #1
 800cfc2:	dc21      	bgt.n	800d008 <_strtod_l+0x528>
 800cfc4:	b10b      	cbz	r3, 800cfca <_strtod_l+0x4ea>
 800cfc6:	4682      	mov	sl, r0
 800cfc8:	468b      	mov	fp, r1
 800cfca:	4b2f      	ldr	r3, [pc, #188]	; (800d088 <_strtod_l+0x5a8>)
 800cfcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cfd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	465b      	mov	r3, fp
 800cfd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cfdc:	f7f3 fb3e 	bl	800065c <__aeabi_dmul>
 800cfe0:	4b2a      	ldr	r3, [pc, #168]	; (800d08c <_strtod_l+0x5ac>)
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	400b      	ands	r3, r1
 800cfe6:	492a      	ldr	r1, [pc, #168]	; (800d090 <_strtod_l+0x5b0>)
 800cfe8:	428b      	cmp	r3, r1
 800cfea:	4682      	mov	sl, r0
 800cfec:	d8bc      	bhi.n	800cf68 <_strtod_l+0x488>
 800cfee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cff2:	428b      	cmp	r3, r1
 800cff4:	bf86      	itte	hi
 800cff6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d094 <_strtod_l+0x5b4>
 800cffa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800cffe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d002:	2300      	movs	r3, #0
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	e084      	b.n	800d112 <_strtod_l+0x632>
 800d008:	f018 0f01 	tst.w	r8, #1
 800d00c:	d005      	beq.n	800d01a <_strtod_l+0x53a>
 800d00e:	9b04      	ldr	r3, [sp, #16]
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f7f3 fb22 	bl	800065c <__aeabi_dmul>
 800d018:	2301      	movs	r3, #1
 800d01a:	9a04      	ldr	r2, [sp, #16]
 800d01c:	3208      	adds	r2, #8
 800d01e:	f109 0901 	add.w	r9, r9, #1
 800d022:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d026:	9204      	str	r2, [sp, #16]
 800d028:	e7c9      	b.n	800cfbe <_strtod_l+0x4de>
 800d02a:	d0ea      	beq.n	800d002 <_strtod_l+0x522>
 800d02c:	f1c8 0800 	rsb	r8, r8, #0
 800d030:	f018 020f 	ands.w	r2, r8, #15
 800d034:	d00a      	beq.n	800d04c <_strtod_l+0x56c>
 800d036:	4b13      	ldr	r3, [pc, #76]	; (800d084 <_strtod_l+0x5a4>)
 800d038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d03c:	4650      	mov	r0, sl
 800d03e:	4659      	mov	r1, fp
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 fc34 	bl	80008b0 <__aeabi_ddiv>
 800d048:	4682      	mov	sl, r0
 800d04a:	468b      	mov	fp, r1
 800d04c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d050:	d0d7      	beq.n	800d002 <_strtod_l+0x522>
 800d052:	f1b8 0f1f 	cmp.w	r8, #31
 800d056:	dd1f      	ble.n	800d098 <_strtod_l+0x5b8>
 800d058:	2500      	movs	r5, #0
 800d05a:	462e      	mov	r6, r5
 800d05c:	9507      	str	r5, [sp, #28]
 800d05e:	9505      	str	r5, [sp, #20]
 800d060:	2322      	movs	r3, #34	; 0x22
 800d062:	f04f 0a00 	mov.w	sl, #0
 800d066:	f04f 0b00 	mov.w	fp, #0
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	e786      	b.n	800cf7c <_strtod_l+0x49c>
 800d06e:	bf00      	nop
 800d070:	08010ce6 	.word	0x08010ce6
 800d074:	08010d28 	.word	0x08010d28
 800d078:	08010cde 	.word	0x08010cde
 800d07c:	08010f1c 	.word	0x08010f1c
 800d080:	08010e17 	.word	0x08010e17
 800d084:	08011090 	.word	0x08011090
 800d088:	08011068 	.word	0x08011068
 800d08c:	7ff00000 	.word	0x7ff00000
 800d090:	7ca00000 	.word	0x7ca00000
 800d094:	7fefffff 	.word	0x7fefffff
 800d098:	f018 0310 	ands.w	r3, r8, #16
 800d09c:	bf18      	it	ne
 800d09e:	236a      	movne	r3, #106	; 0x6a
 800d0a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d450 <_strtod_l+0x970>
 800d0a4:	9304      	str	r3, [sp, #16]
 800d0a6:	4650      	mov	r0, sl
 800d0a8:	4659      	mov	r1, fp
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f018 0f01 	tst.w	r8, #1
 800d0b0:	d004      	beq.n	800d0bc <_strtod_l+0x5dc>
 800d0b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d0b6:	f7f3 fad1 	bl	800065c <__aeabi_dmul>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d0c0:	f109 0908 	add.w	r9, r9, #8
 800d0c4:	d1f2      	bne.n	800d0ac <_strtod_l+0x5cc>
 800d0c6:	b10b      	cbz	r3, 800d0cc <_strtod_l+0x5ec>
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	468b      	mov	fp, r1
 800d0cc:	9b04      	ldr	r3, [sp, #16]
 800d0ce:	b1c3      	cbz	r3, 800d102 <_strtod_l+0x622>
 800d0d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	4659      	mov	r1, fp
 800d0dc:	dd11      	ble.n	800d102 <_strtod_l+0x622>
 800d0de:	2b1f      	cmp	r3, #31
 800d0e0:	f340 8124 	ble.w	800d32c <_strtod_l+0x84c>
 800d0e4:	2b34      	cmp	r3, #52	; 0x34
 800d0e6:	bfde      	ittt	le
 800d0e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d0ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800d0f0:	fa03 f202 	lslle.w	r2, r3, r2
 800d0f4:	f04f 0a00 	mov.w	sl, #0
 800d0f8:	bfcc      	ite	gt
 800d0fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d0fe:	ea02 0b01 	andle.w	fp, r2, r1
 800d102:	2200      	movs	r2, #0
 800d104:	2300      	movs	r3, #0
 800d106:	4650      	mov	r0, sl
 800d108:	4659      	mov	r1, fp
 800d10a:	f7f3 fd0f 	bl	8000b2c <__aeabi_dcmpeq>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d1a2      	bne.n	800d058 <_strtod_l+0x578>
 800d112:	9b07      	ldr	r3, [sp, #28]
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	9908      	ldr	r1, [sp, #32]
 800d118:	462b      	mov	r3, r5
 800d11a:	463a      	mov	r2, r7
 800d11c:	4620      	mov	r0, r4
 800d11e:	f002 f803 	bl	800f128 <__s2b>
 800d122:	9007      	str	r0, [sp, #28]
 800d124:	2800      	cmp	r0, #0
 800d126:	f43f af1f 	beq.w	800cf68 <_strtod_l+0x488>
 800d12a:	9b05      	ldr	r3, [sp, #20]
 800d12c:	1b9e      	subs	r6, r3, r6
 800d12e:	9b06      	ldr	r3, [sp, #24]
 800d130:	2b00      	cmp	r3, #0
 800d132:	bfb4      	ite	lt
 800d134:	4633      	movlt	r3, r6
 800d136:	2300      	movge	r3, #0
 800d138:	930c      	str	r3, [sp, #48]	; 0x30
 800d13a:	9b06      	ldr	r3, [sp, #24]
 800d13c:	2500      	movs	r5, #0
 800d13e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d142:	9312      	str	r3, [sp, #72]	; 0x48
 800d144:	462e      	mov	r6, r5
 800d146:	9b07      	ldr	r3, [sp, #28]
 800d148:	4620      	mov	r0, r4
 800d14a:	6859      	ldr	r1, [r3, #4]
 800d14c:	f001 ff44 	bl	800efd8 <_Balloc>
 800d150:	9005      	str	r0, [sp, #20]
 800d152:	2800      	cmp	r0, #0
 800d154:	f43f af0c 	beq.w	800cf70 <_strtod_l+0x490>
 800d158:	9b07      	ldr	r3, [sp, #28]
 800d15a:	691a      	ldr	r2, [r3, #16]
 800d15c:	3202      	adds	r2, #2
 800d15e:	f103 010c 	add.w	r1, r3, #12
 800d162:	0092      	lsls	r2, r2, #2
 800d164:	300c      	adds	r0, #12
 800d166:	f7fe fa3f 	bl	800b5e8 <memcpy>
 800d16a:	ec4b ab10 	vmov	d0, sl, fp
 800d16e:	aa1a      	add	r2, sp, #104	; 0x68
 800d170:	a919      	add	r1, sp, #100	; 0x64
 800d172:	4620      	mov	r0, r4
 800d174:	f002 fb1e 	bl	800f7b4 <__d2b>
 800d178:	ec4b ab18 	vmov	d8, sl, fp
 800d17c:	9018      	str	r0, [sp, #96]	; 0x60
 800d17e:	2800      	cmp	r0, #0
 800d180:	f43f aef6 	beq.w	800cf70 <_strtod_l+0x490>
 800d184:	2101      	movs	r1, #1
 800d186:	4620      	mov	r0, r4
 800d188:	f002 f868 	bl	800f25c <__i2b>
 800d18c:	4606      	mov	r6, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	f43f aeee 	beq.w	800cf70 <_strtod_l+0x490>
 800d194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d196:	9904      	ldr	r1, [sp, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	bfab      	itete	ge
 800d19c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d19e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d1a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d1a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d1a6:	bfac      	ite	ge
 800d1a8:	eb03 0902 	addge.w	r9, r3, r2
 800d1ac:	1ad7      	sublt	r7, r2, r3
 800d1ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d1b0:	eba3 0801 	sub.w	r8, r3, r1
 800d1b4:	4490      	add	r8, r2
 800d1b6:	4ba1      	ldr	r3, [pc, #644]	; (800d43c <_strtod_l+0x95c>)
 800d1b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d1bc:	4598      	cmp	r8, r3
 800d1be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1c2:	f280 80c7 	bge.w	800d354 <_strtod_l+0x874>
 800d1c6:	eba3 0308 	sub.w	r3, r3, r8
 800d1ca:	2b1f      	cmp	r3, #31
 800d1cc:	eba2 0203 	sub.w	r2, r2, r3
 800d1d0:	f04f 0101 	mov.w	r1, #1
 800d1d4:	f300 80b1 	bgt.w	800d33a <_strtod_l+0x85a>
 800d1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d1dc:	930d      	str	r3, [sp, #52]	; 0x34
 800d1de:	2300      	movs	r3, #0
 800d1e0:	9308      	str	r3, [sp, #32]
 800d1e2:	eb09 0802 	add.w	r8, r9, r2
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	45c1      	cmp	r9, r8
 800d1ea:	4417      	add	r7, r2
 800d1ec:	441f      	add	r7, r3
 800d1ee:	464b      	mov	r3, r9
 800d1f0:	bfa8      	it	ge
 800d1f2:	4643      	movge	r3, r8
 800d1f4:	42bb      	cmp	r3, r7
 800d1f6:	bfa8      	it	ge
 800d1f8:	463b      	movge	r3, r7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfc2      	ittt	gt
 800d1fe:	eba8 0803 	subgt.w	r8, r8, r3
 800d202:	1aff      	subgt	r7, r7, r3
 800d204:	eba9 0903 	subgt.w	r9, r9, r3
 800d208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dd17      	ble.n	800d23e <_strtod_l+0x75e>
 800d20e:	4631      	mov	r1, r6
 800d210:	461a      	mov	r2, r3
 800d212:	4620      	mov	r0, r4
 800d214:	f002 f8e2 	bl	800f3dc <__pow5mult>
 800d218:	4606      	mov	r6, r0
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f43f aea8 	beq.w	800cf70 <_strtod_l+0x490>
 800d220:	4601      	mov	r1, r0
 800d222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d224:	4620      	mov	r0, r4
 800d226:	f002 f82f 	bl	800f288 <__multiply>
 800d22a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f43f ae9f 	beq.w	800cf70 <_strtod_l+0x490>
 800d232:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d234:	4620      	mov	r0, r4
 800d236:	f001 ff0f 	bl	800f058 <_Bfree>
 800d23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d23c:	9318      	str	r3, [sp, #96]	; 0x60
 800d23e:	f1b8 0f00 	cmp.w	r8, #0
 800d242:	f300 808c 	bgt.w	800d35e <_strtod_l+0x87e>
 800d246:	9b06      	ldr	r3, [sp, #24]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dd08      	ble.n	800d25e <_strtod_l+0x77e>
 800d24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d24e:	9905      	ldr	r1, [sp, #20]
 800d250:	4620      	mov	r0, r4
 800d252:	f002 f8c3 	bl	800f3dc <__pow5mult>
 800d256:	9005      	str	r0, [sp, #20]
 800d258:	2800      	cmp	r0, #0
 800d25a:	f43f ae89 	beq.w	800cf70 <_strtod_l+0x490>
 800d25e:	2f00      	cmp	r7, #0
 800d260:	dd08      	ble.n	800d274 <_strtod_l+0x794>
 800d262:	9905      	ldr	r1, [sp, #20]
 800d264:	463a      	mov	r2, r7
 800d266:	4620      	mov	r0, r4
 800d268:	f002 f912 	bl	800f490 <__lshift>
 800d26c:	9005      	str	r0, [sp, #20]
 800d26e:	2800      	cmp	r0, #0
 800d270:	f43f ae7e 	beq.w	800cf70 <_strtod_l+0x490>
 800d274:	f1b9 0f00 	cmp.w	r9, #0
 800d278:	dd08      	ble.n	800d28c <_strtod_l+0x7ac>
 800d27a:	4631      	mov	r1, r6
 800d27c:	464a      	mov	r2, r9
 800d27e:	4620      	mov	r0, r4
 800d280:	f002 f906 	bl	800f490 <__lshift>
 800d284:	4606      	mov	r6, r0
 800d286:	2800      	cmp	r0, #0
 800d288:	f43f ae72 	beq.w	800cf70 <_strtod_l+0x490>
 800d28c:	9a05      	ldr	r2, [sp, #20]
 800d28e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d290:	4620      	mov	r0, r4
 800d292:	f002 f989 	bl	800f5a8 <__mdiff>
 800d296:	4605      	mov	r5, r0
 800d298:	2800      	cmp	r0, #0
 800d29a:	f43f ae69 	beq.w	800cf70 <_strtod_l+0x490>
 800d29e:	68c3      	ldr	r3, [r0, #12]
 800d2a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60c3      	str	r3, [r0, #12]
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	f002 f962 	bl	800f570 <__mcmp>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	da60      	bge.n	800d372 <_strtod_l+0x892>
 800d2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d2b6:	f040 8082 	bne.w	800d3be <_strtod_l+0x8de>
 800d2ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d17d      	bne.n	800d3be <_strtod_l+0x8de>
 800d2c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2c6:	0d1b      	lsrs	r3, r3, #20
 800d2c8:	051b      	lsls	r3, r3, #20
 800d2ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d2ce:	d976      	bls.n	800d3be <_strtod_l+0x8de>
 800d2d0:	696b      	ldr	r3, [r5, #20]
 800d2d2:	b913      	cbnz	r3, 800d2da <_strtod_l+0x7fa>
 800d2d4:	692b      	ldr	r3, [r5, #16]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	dd71      	ble.n	800d3be <_strtod_l+0x8de>
 800d2da:	4629      	mov	r1, r5
 800d2dc:	2201      	movs	r2, #1
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f002 f8d6 	bl	800f490 <__lshift>
 800d2e4:	4631      	mov	r1, r6
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	f002 f942 	bl	800f570 <__mcmp>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	dd66      	ble.n	800d3be <_strtod_l+0x8de>
 800d2f0:	9904      	ldr	r1, [sp, #16]
 800d2f2:	4a53      	ldr	r2, [pc, #332]	; (800d440 <_strtod_l+0x960>)
 800d2f4:	465b      	mov	r3, fp
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	f000 8081 	beq.w	800d3fe <_strtod_l+0x91e>
 800d2fc:	ea02 010b 	and.w	r1, r2, fp
 800d300:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d304:	dc7b      	bgt.n	800d3fe <_strtod_l+0x91e>
 800d306:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d30a:	f77f aea9 	ble.w	800d060 <_strtod_l+0x580>
 800d30e:	4b4d      	ldr	r3, [pc, #308]	; (800d444 <_strtod_l+0x964>)
 800d310:	4650      	mov	r0, sl
 800d312:	4659      	mov	r1, fp
 800d314:	2200      	movs	r2, #0
 800d316:	f7f3 f9a1 	bl	800065c <__aeabi_dmul>
 800d31a:	460b      	mov	r3, r1
 800d31c:	4303      	orrs	r3, r0
 800d31e:	bf08      	it	eq
 800d320:	2322      	moveq	r3, #34	; 0x22
 800d322:	4682      	mov	sl, r0
 800d324:	468b      	mov	fp, r1
 800d326:	bf08      	it	eq
 800d328:	6023      	streq	r3, [r4, #0]
 800d32a:	e62b      	b.n	800cf84 <_strtod_l+0x4a4>
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d330:	fa02 f303 	lsl.w	r3, r2, r3
 800d334:	ea03 0a0a 	and.w	sl, r3, sl
 800d338:	e6e3      	b.n	800d102 <_strtod_l+0x622>
 800d33a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d33e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d34a:	fa01 f308 	lsl.w	r3, r1, r8
 800d34e:	9308      	str	r3, [sp, #32]
 800d350:	910d      	str	r1, [sp, #52]	; 0x34
 800d352:	e746      	b.n	800d1e2 <_strtod_l+0x702>
 800d354:	2300      	movs	r3, #0
 800d356:	9308      	str	r3, [sp, #32]
 800d358:	2301      	movs	r3, #1
 800d35a:	930d      	str	r3, [sp, #52]	; 0x34
 800d35c:	e741      	b.n	800d1e2 <_strtod_l+0x702>
 800d35e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d360:	4642      	mov	r2, r8
 800d362:	4620      	mov	r0, r4
 800d364:	f002 f894 	bl	800f490 <__lshift>
 800d368:	9018      	str	r0, [sp, #96]	; 0x60
 800d36a:	2800      	cmp	r0, #0
 800d36c:	f47f af6b 	bne.w	800d246 <_strtod_l+0x766>
 800d370:	e5fe      	b.n	800cf70 <_strtod_l+0x490>
 800d372:	465f      	mov	r7, fp
 800d374:	d16e      	bne.n	800d454 <_strtod_l+0x974>
 800d376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d37c:	b342      	cbz	r2, 800d3d0 <_strtod_l+0x8f0>
 800d37e:	4a32      	ldr	r2, [pc, #200]	; (800d448 <_strtod_l+0x968>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d128      	bne.n	800d3d6 <_strtod_l+0x8f6>
 800d384:	9b04      	ldr	r3, [sp, #16]
 800d386:	4651      	mov	r1, sl
 800d388:	b1eb      	cbz	r3, 800d3c6 <_strtod_l+0x8e6>
 800d38a:	4b2d      	ldr	r3, [pc, #180]	; (800d440 <_strtod_l+0x960>)
 800d38c:	403b      	ands	r3, r7
 800d38e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d396:	d819      	bhi.n	800d3cc <_strtod_l+0x8ec>
 800d398:	0d1b      	lsrs	r3, r3, #20
 800d39a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d39e:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a2:	4299      	cmp	r1, r3
 800d3a4:	d117      	bne.n	800d3d6 <_strtod_l+0x8f6>
 800d3a6:	4b29      	ldr	r3, [pc, #164]	; (800d44c <_strtod_l+0x96c>)
 800d3a8:	429f      	cmp	r7, r3
 800d3aa:	d102      	bne.n	800d3b2 <_strtod_l+0x8d2>
 800d3ac:	3101      	adds	r1, #1
 800d3ae:	f43f addf 	beq.w	800cf70 <_strtod_l+0x490>
 800d3b2:	4b23      	ldr	r3, [pc, #140]	; (800d440 <_strtod_l+0x960>)
 800d3b4:	403b      	ands	r3, r7
 800d3b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d3ba:	f04f 0a00 	mov.w	sl, #0
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1a4      	bne.n	800d30e <_strtod_l+0x82e>
 800d3c4:	e5de      	b.n	800cf84 <_strtod_l+0x4a4>
 800d3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3ca:	e7ea      	b.n	800d3a2 <_strtod_l+0x8c2>
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	e7e8      	b.n	800d3a2 <_strtod_l+0x8c2>
 800d3d0:	ea53 030a 	orrs.w	r3, r3, sl
 800d3d4:	d08c      	beq.n	800d2f0 <_strtod_l+0x810>
 800d3d6:	9b08      	ldr	r3, [sp, #32]
 800d3d8:	b1db      	cbz	r3, 800d412 <_strtod_l+0x932>
 800d3da:	423b      	tst	r3, r7
 800d3dc:	d0ef      	beq.n	800d3be <_strtod_l+0x8de>
 800d3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e0:	9a04      	ldr	r2, [sp, #16]
 800d3e2:	4650      	mov	r0, sl
 800d3e4:	4659      	mov	r1, fp
 800d3e6:	b1c3      	cbz	r3, 800d41a <_strtod_l+0x93a>
 800d3e8:	f7ff fb5b 	bl	800caa2 <sulp>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	ec51 0b18 	vmov	r0, r1, d8
 800d3f4:	f7f2 ff7c 	bl	80002f0 <__adddf3>
 800d3f8:	4682      	mov	sl, r0
 800d3fa:	468b      	mov	fp, r1
 800d3fc:	e7df      	b.n	800d3be <_strtod_l+0x8de>
 800d3fe:	4013      	ands	r3, r2
 800d400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d40c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d410:	e7d5      	b.n	800d3be <_strtod_l+0x8de>
 800d412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d414:	ea13 0f0a 	tst.w	r3, sl
 800d418:	e7e0      	b.n	800d3dc <_strtod_l+0x8fc>
 800d41a:	f7ff fb42 	bl	800caa2 <sulp>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	ec51 0b18 	vmov	r0, r1, d8
 800d426:	f7f2 ff61 	bl	80002ec <__aeabi_dsub>
 800d42a:	2200      	movs	r2, #0
 800d42c:	2300      	movs	r3, #0
 800d42e:	4682      	mov	sl, r0
 800d430:	468b      	mov	fp, r1
 800d432:	f7f3 fb7b 	bl	8000b2c <__aeabi_dcmpeq>
 800d436:	2800      	cmp	r0, #0
 800d438:	d0c1      	beq.n	800d3be <_strtod_l+0x8de>
 800d43a:	e611      	b.n	800d060 <_strtod_l+0x580>
 800d43c:	fffffc02 	.word	0xfffffc02
 800d440:	7ff00000 	.word	0x7ff00000
 800d444:	39500000 	.word	0x39500000
 800d448:	000fffff 	.word	0x000fffff
 800d44c:	7fefffff 	.word	0x7fefffff
 800d450:	08010d40 	.word	0x08010d40
 800d454:	4631      	mov	r1, r6
 800d456:	4628      	mov	r0, r5
 800d458:	f002 fa08 	bl	800f86c <__ratio>
 800d45c:	ec59 8b10 	vmov	r8, r9, d0
 800d460:	ee10 0a10 	vmov	r0, s0
 800d464:	2200      	movs	r2, #0
 800d466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d46a:	4649      	mov	r1, r9
 800d46c:	f7f3 fb72 	bl	8000b54 <__aeabi_dcmple>
 800d470:	2800      	cmp	r0, #0
 800d472:	d07a      	beq.n	800d56a <_strtod_l+0xa8a>
 800d474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d04a      	beq.n	800d510 <_strtod_l+0xa30>
 800d47a:	4b95      	ldr	r3, [pc, #596]	; (800d6d0 <_strtod_l+0xbf0>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d6d0 <_strtod_l+0xbf0>
 800d486:	f04f 0800 	mov.w	r8, #0
 800d48a:	4b92      	ldr	r3, [pc, #584]	; (800d6d4 <_strtod_l+0xbf4>)
 800d48c:	403b      	ands	r3, r7
 800d48e:	930d      	str	r3, [sp, #52]	; 0x34
 800d490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d492:	4b91      	ldr	r3, [pc, #580]	; (800d6d8 <_strtod_l+0xbf8>)
 800d494:	429a      	cmp	r2, r3
 800d496:	f040 80b0 	bne.w	800d5fa <_strtod_l+0xb1a>
 800d49a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d49e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d4a2:	ec4b ab10 	vmov	d0, sl, fp
 800d4a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4aa:	f002 f907 	bl	800f6bc <__ulp>
 800d4ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4b2:	ec53 2b10 	vmov	r2, r3, d0
 800d4b6:	f7f3 f8d1 	bl	800065c <__aeabi_dmul>
 800d4ba:	4652      	mov	r2, sl
 800d4bc:	465b      	mov	r3, fp
 800d4be:	f7f2 ff17 	bl	80002f0 <__adddf3>
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4983      	ldr	r1, [pc, #524]	; (800d6d4 <_strtod_l+0xbf4>)
 800d4c6:	4a85      	ldr	r2, [pc, #532]	; (800d6dc <_strtod_l+0xbfc>)
 800d4c8:	4019      	ands	r1, r3
 800d4ca:	4291      	cmp	r1, r2
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	d960      	bls.n	800d592 <_strtod_l+0xab2>
 800d4d0:	ee18 3a90 	vmov	r3, s17
 800d4d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d104      	bne.n	800d4e6 <_strtod_l+0xa06>
 800d4dc:	ee18 3a10 	vmov	r3, s16
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	f43f ad45 	beq.w	800cf70 <_strtod_l+0x490>
 800d4e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d6e8 <_strtod_l+0xc08>
 800d4ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d4ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f001 fdb1 	bl	800f058 <_Bfree>
 800d4f6:	9905      	ldr	r1, [sp, #20]
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f001 fdad 	bl	800f058 <_Bfree>
 800d4fe:	4631      	mov	r1, r6
 800d500:	4620      	mov	r0, r4
 800d502:	f001 fda9 	bl	800f058 <_Bfree>
 800d506:	4629      	mov	r1, r5
 800d508:	4620      	mov	r0, r4
 800d50a:	f001 fda5 	bl	800f058 <_Bfree>
 800d50e:	e61a      	b.n	800d146 <_strtod_l+0x666>
 800d510:	f1ba 0f00 	cmp.w	sl, #0
 800d514:	d11b      	bne.n	800d54e <_strtod_l+0xa6e>
 800d516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d51a:	b9f3      	cbnz	r3, 800d55a <_strtod_l+0xa7a>
 800d51c:	4b6c      	ldr	r3, [pc, #432]	; (800d6d0 <_strtod_l+0xbf0>)
 800d51e:	2200      	movs	r2, #0
 800d520:	4640      	mov	r0, r8
 800d522:	4649      	mov	r1, r9
 800d524:	f7f3 fb0c 	bl	8000b40 <__aeabi_dcmplt>
 800d528:	b9d0      	cbnz	r0, 800d560 <_strtod_l+0xa80>
 800d52a:	4640      	mov	r0, r8
 800d52c:	4649      	mov	r1, r9
 800d52e:	4b6c      	ldr	r3, [pc, #432]	; (800d6e0 <_strtod_l+0xc00>)
 800d530:	2200      	movs	r2, #0
 800d532:	f7f3 f893 	bl	800065c <__aeabi_dmul>
 800d536:	4680      	mov	r8, r0
 800d538:	4689      	mov	r9, r1
 800d53a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d53e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d542:	9315      	str	r3, [sp, #84]	; 0x54
 800d544:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d548:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d54c:	e79d      	b.n	800d48a <_strtod_l+0x9aa>
 800d54e:	f1ba 0f01 	cmp.w	sl, #1
 800d552:	d102      	bne.n	800d55a <_strtod_l+0xa7a>
 800d554:	2f00      	cmp	r7, #0
 800d556:	f43f ad83 	beq.w	800d060 <_strtod_l+0x580>
 800d55a:	4b62      	ldr	r3, [pc, #392]	; (800d6e4 <_strtod_l+0xc04>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	e78e      	b.n	800d47e <_strtod_l+0x99e>
 800d560:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d6e0 <_strtod_l+0xc00>
 800d564:	f04f 0800 	mov.w	r8, #0
 800d568:	e7e7      	b.n	800d53a <_strtod_l+0xa5a>
 800d56a:	4b5d      	ldr	r3, [pc, #372]	; (800d6e0 <_strtod_l+0xc00>)
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	2200      	movs	r2, #0
 800d572:	f7f3 f873 	bl	800065c <__aeabi_dmul>
 800d576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d578:	4680      	mov	r8, r0
 800d57a:	4689      	mov	r9, r1
 800d57c:	b933      	cbnz	r3, 800d58c <_strtod_l+0xaac>
 800d57e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d582:	900e      	str	r0, [sp, #56]	; 0x38
 800d584:	930f      	str	r3, [sp, #60]	; 0x3c
 800d586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d58a:	e7dd      	b.n	800d548 <_strtod_l+0xa68>
 800d58c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d590:	e7f9      	b.n	800d586 <_strtod_l+0xaa6>
 800d592:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1a8      	bne.n	800d4ee <_strtod_l+0xa0e>
 800d59c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5a2:	0d1b      	lsrs	r3, r3, #20
 800d5a4:	051b      	lsls	r3, r3, #20
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d1a1      	bne.n	800d4ee <_strtod_l+0xa0e>
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	f7f3 fbb5 	bl	8000d1c <__aeabi_d2lz>
 800d5b2:	f7f3 f825 	bl	8000600 <__aeabi_l2d>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f2 fe95 	bl	80002ec <__aeabi_dsub>
 800d5c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5c8:	ea43 030a 	orr.w	r3, r3, sl
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	4680      	mov	r8, r0
 800d5d0:	4689      	mov	r9, r1
 800d5d2:	d055      	beq.n	800d680 <_strtod_l+0xba0>
 800d5d4:	a336      	add	r3, pc, #216	; (adr r3, 800d6b0 <_strtod_l+0xbd0>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f3 fab1 	bl	8000b40 <__aeabi_dcmplt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f47f acd0 	bne.w	800cf84 <_strtod_l+0x4a4>
 800d5e4:	a334      	add	r3, pc, #208	; (adr r3, 800d6b8 <_strtod_l+0xbd8>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	4640      	mov	r0, r8
 800d5ec:	4649      	mov	r1, r9
 800d5ee:	f7f3 fac5 	bl	8000b7c <__aeabi_dcmpgt>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f43f af7b 	beq.w	800d4ee <_strtod_l+0xa0e>
 800d5f8:	e4c4      	b.n	800cf84 <_strtod_l+0x4a4>
 800d5fa:	9b04      	ldr	r3, [sp, #16]
 800d5fc:	b333      	cbz	r3, 800d64c <_strtod_l+0xb6c>
 800d5fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d600:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d604:	d822      	bhi.n	800d64c <_strtod_l+0xb6c>
 800d606:	a32e      	add	r3, pc, #184	; (adr r3, 800d6c0 <_strtod_l+0xbe0>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	4640      	mov	r0, r8
 800d60e:	4649      	mov	r1, r9
 800d610:	f7f3 faa0 	bl	8000b54 <__aeabi_dcmple>
 800d614:	b1a0      	cbz	r0, 800d640 <_strtod_l+0xb60>
 800d616:	4649      	mov	r1, r9
 800d618:	4640      	mov	r0, r8
 800d61a:	f7f3 faf7 	bl	8000c0c <__aeabi_d2uiz>
 800d61e:	2801      	cmp	r0, #1
 800d620:	bf38      	it	cc
 800d622:	2001      	movcc	r0, #1
 800d624:	f7f2 ffa0 	bl	8000568 <__aeabi_ui2d>
 800d628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d62a:	4680      	mov	r8, r0
 800d62c:	4689      	mov	r9, r1
 800d62e:	bb23      	cbnz	r3, 800d67a <_strtod_l+0xb9a>
 800d630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d634:	9010      	str	r0, [sp, #64]	; 0x40
 800d636:	9311      	str	r3, [sp, #68]	; 0x44
 800d638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d63c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d644:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	9309      	str	r3, [sp, #36]	; 0x24
 800d64c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d650:	eeb0 0a48 	vmov.f32	s0, s16
 800d654:	eef0 0a68 	vmov.f32	s1, s17
 800d658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d65c:	f002 f82e 	bl	800f6bc <__ulp>
 800d660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d664:	ec53 2b10 	vmov	r2, r3, d0
 800d668:	f7f2 fff8 	bl	800065c <__aeabi_dmul>
 800d66c:	ec53 2b18 	vmov	r2, r3, d8
 800d670:	f7f2 fe3e 	bl	80002f0 <__adddf3>
 800d674:	4682      	mov	sl, r0
 800d676:	468b      	mov	fp, r1
 800d678:	e78d      	b.n	800d596 <_strtod_l+0xab6>
 800d67a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d67e:	e7db      	b.n	800d638 <_strtod_l+0xb58>
 800d680:	a311      	add	r3, pc, #68	; (adr r3, 800d6c8 <_strtod_l+0xbe8>)
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	f7f3 fa5b 	bl	8000b40 <__aeabi_dcmplt>
 800d68a:	e7b2      	b.n	800d5f2 <_strtod_l+0xb12>
 800d68c:	2300      	movs	r3, #0
 800d68e:	930a      	str	r3, [sp, #40]	; 0x28
 800d690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	f7ff ba6b 	b.w	800cb70 <_strtod_l+0x90>
 800d69a:	2a65      	cmp	r2, #101	; 0x65
 800d69c:	f43f ab5f 	beq.w	800cd5e <_strtod_l+0x27e>
 800d6a0:	2a45      	cmp	r2, #69	; 0x45
 800d6a2:	f43f ab5c 	beq.w	800cd5e <_strtod_l+0x27e>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f7ff bb94 	b.w	800cdd4 <_strtod_l+0x2f4>
 800d6ac:	f3af 8000 	nop.w
 800d6b0:	94a03595 	.word	0x94a03595
 800d6b4:	3fdfffff 	.word	0x3fdfffff
 800d6b8:	35afe535 	.word	0x35afe535
 800d6bc:	3fe00000 	.word	0x3fe00000
 800d6c0:	ffc00000 	.word	0xffc00000
 800d6c4:	41dfffff 	.word	0x41dfffff
 800d6c8:	94a03595 	.word	0x94a03595
 800d6cc:	3fcfffff 	.word	0x3fcfffff
 800d6d0:	3ff00000 	.word	0x3ff00000
 800d6d4:	7ff00000 	.word	0x7ff00000
 800d6d8:	7fe00000 	.word	0x7fe00000
 800d6dc:	7c9fffff 	.word	0x7c9fffff
 800d6e0:	3fe00000 	.word	0x3fe00000
 800d6e4:	bff00000 	.word	0xbff00000
 800d6e8:	7fefffff 	.word	0x7fefffff

0800d6ec <_strtod_r>:
 800d6ec:	4b01      	ldr	r3, [pc, #4]	; (800d6f4 <_strtod_r+0x8>)
 800d6ee:	f7ff b9f7 	b.w	800cae0 <_strtod_l>
 800d6f2:	bf00      	nop
 800d6f4:	20000098 	.word	0x20000098

0800d6f8 <strtok>:
 800d6f8:	4b16      	ldr	r3, [pc, #88]	; (800d754 <strtok+0x5c>)
 800d6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6fc:	681e      	ldr	r6, [r3, #0]
 800d6fe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d700:	4605      	mov	r5, r0
 800d702:	b9fc      	cbnz	r4, 800d744 <strtok+0x4c>
 800d704:	2050      	movs	r0, #80	; 0x50
 800d706:	9101      	str	r1, [sp, #4]
 800d708:	f7fd ff4e 	bl	800b5a8 <malloc>
 800d70c:	9901      	ldr	r1, [sp, #4]
 800d70e:	65b0      	str	r0, [r6, #88]	; 0x58
 800d710:	4602      	mov	r2, r0
 800d712:	b920      	cbnz	r0, 800d71e <strtok+0x26>
 800d714:	4b10      	ldr	r3, [pc, #64]	; (800d758 <strtok+0x60>)
 800d716:	4811      	ldr	r0, [pc, #68]	; (800d75c <strtok+0x64>)
 800d718:	2157      	movs	r1, #87	; 0x57
 800d71a:	f000 f9a9 	bl	800da70 <__assert_func>
 800d71e:	e9c0 4400 	strd	r4, r4, [r0]
 800d722:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d726:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d72a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d72e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d732:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d736:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d73a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d73e:	6184      	str	r4, [r0, #24]
 800d740:	7704      	strb	r4, [r0, #28]
 800d742:	6244      	str	r4, [r0, #36]	; 0x24
 800d744:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d746:	2301      	movs	r3, #1
 800d748:	4628      	mov	r0, r5
 800d74a:	b002      	add	sp, #8
 800d74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d750:	f000 b806 	b.w	800d760 <__strtok_r>
 800d754:	20000030 	.word	0x20000030
 800d758:	08010d68 	.word	0x08010d68
 800d75c:	08010d7f 	.word	0x08010d7f

0800d760 <__strtok_r>:
 800d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d762:	b908      	cbnz	r0, 800d768 <__strtok_r+0x8>
 800d764:	6810      	ldr	r0, [r2, #0]
 800d766:	b188      	cbz	r0, 800d78c <__strtok_r+0x2c>
 800d768:	4604      	mov	r4, r0
 800d76a:	4620      	mov	r0, r4
 800d76c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d770:	460f      	mov	r7, r1
 800d772:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d776:	b91e      	cbnz	r6, 800d780 <__strtok_r+0x20>
 800d778:	b965      	cbnz	r5, 800d794 <__strtok_r+0x34>
 800d77a:	6015      	str	r5, [r2, #0]
 800d77c:	4628      	mov	r0, r5
 800d77e:	e005      	b.n	800d78c <__strtok_r+0x2c>
 800d780:	42b5      	cmp	r5, r6
 800d782:	d1f6      	bne.n	800d772 <__strtok_r+0x12>
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1f0      	bne.n	800d76a <__strtok_r+0xa>
 800d788:	6014      	str	r4, [r2, #0]
 800d78a:	7003      	strb	r3, [r0, #0]
 800d78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d78e:	461c      	mov	r4, r3
 800d790:	e00c      	b.n	800d7ac <__strtok_r+0x4c>
 800d792:	b915      	cbnz	r5, 800d79a <__strtok_r+0x3a>
 800d794:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d798:	460e      	mov	r6, r1
 800d79a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d79e:	42ab      	cmp	r3, r5
 800d7a0:	d1f7      	bne.n	800d792 <__strtok_r+0x32>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0f3      	beq.n	800d78e <__strtok_r+0x2e>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d7ac:	6014      	str	r4, [r2, #0]
 800d7ae:	e7ed      	b.n	800d78c <__strtok_r+0x2c>

0800d7b0 <_strtol_l.constprop.0>:
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b6:	d001      	beq.n	800d7bc <_strtol_l.constprop.0+0xc>
 800d7b8:	2b24      	cmp	r3, #36	; 0x24
 800d7ba:	d906      	bls.n	800d7ca <_strtol_l.constprop.0+0x1a>
 800d7bc:	f7fd fcea 	bl	800b194 <__errno>
 800d7c0:	2316      	movs	r3, #22
 800d7c2:	6003      	str	r3, [r0, #0]
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d8b0 <_strtol_l.constprop.0+0x100>
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	462e      	mov	r6, r5
 800d7d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d7da:	f017 0708 	ands.w	r7, r7, #8
 800d7de:	d1f7      	bne.n	800d7d0 <_strtol_l.constprop.0+0x20>
 800d7e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d7e2:	d132      	bne.n	800d84a <_strtol_l.constprop.0+0x9a>
 800d7e4:	782c      	ldrb	r4, [r5, #0]
 800d7e6:	2701      	movs	r7, #1
 800d7e8:	1cb5      	adds	r5, r6, #2
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d05b      	beq.n	800d8a6 <_strtol_l.constprop.0+0xf6>
 800d7ee:	2b10      	cmp	r3, #16
 800d7f0:	d109      	bne.n	800d806 <_strtol_l.constprop.0+0x56>
 800d7f2:	2c30      	cmp	r4, #48	; 0x30
 800d7f4:	d107      	bne.n	800d806 <_strtol_l.constprop.0+0x56>
 800d7f6:	782c      	ldrb	r4, [r5, #0]
 800d7f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d7fc:	2c58      	cmp	r4, #88	; 0x58
 800d7fe:	d14d      	bne.n	800d89c <_strtol_l.constprop.0+0xec>
 800d800:	786c      	ldrb	r4, [r5, #1]
 800d802:	2310      	movs	r3, #16
 800d804:	3502      	adds	r5, #2
 800d806:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d80a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d80e:	f04f 0c00 	mov.w	ip, #0
 800d812:	fbb8 f9f3 	udiv	r9, r8, r3
 800d816:	4666      	mov	r6, ip
 800d818:	fb03 8a19 	mls	sl, r3, r9, r8
 800d81c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d820:	f1be 0f09 	cmp.w	lr, #9
 800d824:	d816      	bhi.n	800d854 <_strtol_l.constprop.0+0xa4>
 800d826:	4674      	mov	r4, lr
 800d828:	42a3      	cmp	r3, r4
 800d82a:	dd24      	ble.n	800d876 <_strtol_l.constprop.0+0xc6>
 800d82c:	f1bc 0f00 	cmp.w	ip, #0
 800d830:	db1e      	blt.n	800d870 <_strtol_l.constprop.0+0xc0>
 800d832:	45b1      	cmp	r9, r6
 800d834:	d31c      	bcc.n	800d870 <_strtol_l.constprop.0+0xc0>
 800d836:	d101      	bne.n	800d83c <_strtol_l.constprop.0+0x8c>
 800d838:	45a2      	cmp	sl, r4
 800d83a:	db19      	blt.n	800d870 <_strtol_l.constprop.0+0xc0>
 800d83c:	fb06 4603 	mla	r6, r6, r3, r4
 800d840:	f04f 0c01 	mov.w	ip, #1
 800d844:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d848:	e7e8      	b.n	800d81c <_strtol_l.constprop.0+0x6c>
 800d84a:	2c2b      	cmp	r4, #43	; 0x2b
 800d84c:	bf04      	itt	eq
 800d84e:	782c      	ldrbeq	r4, [r5, #0]
 800d850:	1cb5      	addeq	r5, r6, #2
 800d852:	e7ca      	b.n	800d7ea <_strtol_l.constprop.0+0x3a>
 800d854:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d858:	f1be 0f19 	cmp.w	lr, #25
 800d85c:	d801      	bhi.n	800d862 <_strtol_l.constprop.0+0xb2>
 800d85e:	3c37      	subs	r4, #55	; 0x37
 800d860:	e7e2      	b.n	800d828 <_strtol_l.constprop.0+0x78>
 800d862:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d866:	f1be 0f19 	cmp.w	lr, #25
 800d86a:	d804      	bhi.n	800d876 <_strtol_l.constprop.0+0xc6>
 800d86c:	3c57      	subs	r4, #87	; 0x57
 800d86e:	e7db      	b.n	800d828 <_strtol_l.constprop.0+0x78>
 800d870:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d874:	e7e6      	b.n	800d844 <_strtol_l.constprop.0+0x94>
 800d876:	f1bc 0f00 	cmp.w	ip, #0
 800d87a:	da05      	bge.n	800d888 <_strtol_l.constprop.0+0xd8>
 800d87c:	2322      	movs	r3, #34	; 0x22
 800d87e:	6003      	str	r3, [r0, #0]
 800d880:	4646      	mov	r6, r8
 800d882:	b942      	cbnz	r2, 800d896 <_strtol_l.constprop.0+0xe6>
 800d884:	4630      	mov	r0, r6
 800d886:	e79e      	b.n	800d7c6 <_strtol_l.constprop.0+0x16>
 800d888:	b107      	cbz	r7, 800d88c <_strtol_l.constprop.0+0xdc>
 800d88a:	4276      	negs	r6, r6
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	d0f9      	beq.n	800d884 <_strtol_l.constprop.0+0xd4>
 800d890:	f1bc 0f00 	cmp.w	ip, #0
 800d894:	d000      	beq.n	800d898 <_strtol_l.constprop.0+0xe8>
 800d896:	1e69      	subs	r1, r5, #1
 800d898:	6011      	str	r1, [r2, #0]
 800d89a:	e7f3      	b.n	800d884 <_strtol_l.constprop.0+0xd4>
 800d89c:	2430      	movs	r4, #48	; 0x30
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1b1      	bne.n	800d806 <_strtol_l.constprop.0+0x56>
 800d8a2:	2308      	movs	r3, #8
 800d8a4:	e7af      	b.n	800d806 <_strtol_l.constprop.0+0x56>
 800d8a6:	2c30      	cmp	r4, #48	; 0x30
 800d8a8:	d0a5      	beq.n	800d7f6 <_strtol_l.constprop.0+0x46>
 800d8aa:	230a      	movs	r3, #10
 800d8ac:	e7ab      	b.n	800d806 <_strtol_l.constprop.0+0x56>
 800d8ae:	bf00      	nop
 800d8b0:	08010e19 	.word	0x08010e19

0800d8b4 <_strtol_r>:
 800d8b4:	f7ff bf7c 	b.w	800d7b0 <_strtol_l.constprop.0>

0800d8b8 <strtol>:
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	460a      	mov	r2, r1
 800d8bc:	4601      	mov	r1, r0
 800d8be:	4802      	ldr	r0, [pc, #8]	; (800d8c8 <strtol+0x10>)
 800d8c0:	6800      	ldr	r0, [r0, #0]
 800d8c2:	f7ff bf75 	b.w	800d7b0 <_strtol_l.constprop.0>
 800d8c6:	bf00      	nop
 800d8c8:	20000030 	.word	0x20000030

0800d8cc <__swbuf_r>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	460e      	mov	r6, r1
 800d8d0:	4614      	mov	r4, r2
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	b118      	cbz	r0, 800d8de <__swbuf_r+0x12>
 800d8d6:	6983      	ldr	r3, [r0, #24]
 800d8d8:	b90b      	cbnz	r3, 800d8de <__swbuf_r+0x12>
 800d8da:	f7fd fd8d 	bl	800b3f8 <__sinit>
 800d8de:	4b21      	ldr	r3, [pc, #132]	; (800d964 <__swbuf_r+0x98>)
 800d8e0:	429c      	cmp	r4, r3
 800d8e2:	d12b      	bne.n	800d93c <__swbuf_r+0x70>
 800d8e4:	686c      	ldr	r4, [r5, #4]
 800d8e6:	69a3      	ldr	r3, [r4, #24]
 800d8e8:	60a3      	str	r3, [r4, #8]
 800d8ea:	89a3      	ldrh	r3, [r4, #12]
 800d8ec:	071a      	lsls	r2, r3, #28
 800d8ee:	d52f      	bpl.n	800d950 <__swbuf_r+0x84>
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	b36b      	cbz	r3, 800d950 <__swbuf_r+0x84>
 800d8f4:	6923      	ldr	r3, [r4, #16]
 800d8f6:	6820      	ldr	r0, [r4, #0]
 800d8f8:	1ac0      	subs	r0, r0, r3
 800d8fa:	6963      	ldr	r3, [r4, #20]
 800d8fc:	b2f6      	uxtb	r6, r6
 800d8fe:	4283      	cmp	r3, r0
 800d900:	4637      	mov	r7, r6
 800d902:	dc04      	bgt.n	800d90e <__swbuf_r+0x42>
 800d904:	4621      	mov	r1, r4
 800d906:	4628      	mov	r0, r5
 800d908:	f7fd fcd0 	bl	800b2ac <_fflush_r>
 800d90c:	bb30      	cbnz	r0, 800d95c <__swbuf_r+0x90>
 800d90e:	68a3      	ldr	r3, [r4, #8]
 800d910:	3b01      	subs	r3, #1
 800d912:	60a3      	str	r3, [r4, #8]
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	6022      	str	r2, [r4, #0]
 800d91a:	701e      	strb	r6, [r3, #0]
 800d91c:	6963      	ldr	r3, [r4, #20]
 800d91e:	3001      	adds	r0, #1
 800d920:	4283      	cmp	r3, r0
 800d922:	d004      	beq.n	800d92e <__swbuf_r+0x62>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	07db      	lsls	r3, r3, #31
 800d928:	d506      	bpl.n	800d938 <__swbuf_r+0x6c>
 800d92a:	2e0a      	cmp	r6, #10
 800d92c:	d104      	bne.n	800d938 <__swbuf_r+0x6c>
 800d92e:	4621      	mov	r1, r4
 800d930:	4628      	mov	r0, r5
 800d932:	f7fd fcbb 	bl	800b2ac <_fflush_r>
 800d936:	b988      	cbnz	r0, 800d95c <__swbuf_r+0x90>
 800d938:	4638      	mov	r0, r7
 800d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d93c:	4b0a      	ldr	r3, [pc, #40]	; (800d968 <__swbuf_r+0x9c>)
 800d93e:	429c      	cmp	r4, r3
 800d940:	d101      	bne.n	800d946 <__swbuf_r+0x7a>
 800d942:	68ac      	ldr	r4, [r5, #8]
 800d944:	e7cf      	b.n	800d8e6 <__swbuf_r+0x1a>
 800d946:	4b09      	ldr	r3, [pc, #36]	; (800d96c <__swbuf_r+0xa0>)
 800d948:	429c      	cmp	r4, r3
 800d94a:	bf08      	it	eq
 800d94c:	68ec      	ldreq	r4, [r5, #12]
 800d94e:	e7ca      	b.n	800d8e6 <__swbuf_r+0x1a>
 800d950:	4621      	mov	r1, r4
 800d952:	4628      	mov	r0, r5
 800d954:	f000 f81e 	bl	800d994 <__swsetup_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d0cb      	beq.n	800d8f4 <__swbuf_r+0x28>
 800d95c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d960:	e7ea      	b.n	800d938 <__swbuf_r+0x6c>
 800d962:	bf00      	nop
 800d964:	08010c84 	.word	0x08010c84
 800d968:	08010ca4 	.word	0x08010ca4
 800d96c:	08010c64 	.word	0x08010c64

0800d970 <_write_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	; (800d990 <_write_r+0x20>)
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	4611      	mov	r1, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	602a      	str	r2, [r5, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	f7f5 f9b6 	bl	8002cf0 <_write>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_write_r+0x1e>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_write_r+0x1e>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20000a18 	.word	0x20000a18

0800d994 <__swsetup_r>:
 800d994:	4b32      	ldr	r3, [pc, #200]	; (800da60 <__swsetup_r+0xcc>)
 800d996:	b570      	push	{r4, r5, r6, lr}
 800d998:	681d      	ldr	r5, [r3, #0]
 800d99a:	4606      	mov	r6, r0
 800d99c:	460c      	mov	r4, r1
 800d99e:	b125      	cbz	r5, 800d9aa <__swsetup_r+0x16>
 800d9a0:	69ab      	ldr	r3, [r5, #24]
 800d9a2:	b913      	cbnz	r3, 800d9aa <__swsetup_r+0x16>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f7fd fd27 	bl	800b3f8 <__sinit>
 800d9aa:	4b2e      	ldr	r3, [pc, #184]	; (800da64 <__swsetup_r+0xd0>)
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	d10f      	bne.n	800d9d0 <__swsetup_r+0x3c>
 800d9b0:	686c      	ldr	r4, [r5, #4]
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9b8:	0719      	lsls	r1, r3, #28
 800d9ba:	d42c      	bmi.n	800da16 <__swsetup_r+0x82>
 800d9bc:	06dd      	lsls	r5, r3, #27
 800d9be:	d411      	bmi.n	800d9e4 <__swsetup_r+0x50>
 800d9c0:	2309      	movs	r3, #9
 800d9c2:	6033      	str	r3, [r6, #0]
 800d9c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9ce:	e03e      	b.n	800da4e <__swsetup_r+0xba>
 800d9d0:	4b25      	ldr	r3, [pc, #148]	; (800da68 <__swsetup_r+0xd4>)
 800d9d2:	429c      	cmp	r4, r3
 800d9d4:	d101      	bne.n	800d9da <__swsetup_r+0x46>
 800d9d6:	68ac      	ldr	r4, [r5, #8]
 800d9d8:	e7eb      	b.n	800d9b2 <__swsetup_r+0x1e>
 800d9da:	4b24      	ldr	r3, [pc, #144]	; (800da6c <__swsetup_r+0xd8>)
 800d9dc:	429c      	cmp	r4, r3
 800d9de:	bf08      	it	eq
 800d9e0:	68ec      	ldreq	r4, [r5, #12]
 800d9e2:	e7e6      	b.n	800d9b2 <__swsetup_r+0x1e>
 800d9e4:	0758      	lsls	r0, r3, #29
 800d9e6:	d512      	bpl.n	800da0e <__swsetup_r+0x7a>
 800d9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9ea:	b141      	cbz	r1, 800d9fe <__swsetup_r+0x6a>
 800d9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	d002      	beq.n	800d9fa <__swsetup_r+0x66>
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7fd fe27 	bl	800b648 <_free_r>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	6363      	str	r3, [r4, #52]	; 0x34
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da04:	81a3      	strh	r3, [r4, #12]
 800da06:	2300      	movs	r3, #0
 800da08:	6063      	str	r3, [r4, #4]
 800da0a:	6923      	ldr	r3, [r4, #16]
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	f043 0308 	orr.w	r3, r3, #8
 800da14:	81a3      	strh	r3, [r4, #12]
 800da16:	6923      	ldr	r3, [r4, #16]
 800da18:	b94b      	cbnz	r3, 800da2e <__swsetup_r+0x9a>
 800da1a:	89a3      	ldrh	r3, [r4, #12]
 800da1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da24:	d003      	beq.n	800da2e <__swsetup_r+0x9a>
 800da26:	4621      	mov	r1, r4
 800da28:	4630      	mov	r0, r6
 800da2a:	f001 fa77 	bl	800ef1c <__smakebuf_r>
 800da2e:	89a0      	ldrh	r0, [r4, #12]
 800da30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da34:	f010 0301 	ands.w	r3, r0, #1
 800da38:	d00a      	beq.n	800da50 <__swsetup_r+0xbc>
 800da3a:	2300      	movs	r3, #0
 800da3c:	60a3      	str	r3, [r4, #8]
 800da3e:	6963      	ldr	r3, [r4, #20]
 800da40:	425b      	negs	r3, r3
 800da42:	61a3      	str	r3, [r4, #24]
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	b943      	cbnz	r3, 800da5a <__swsetup_r+0xc6>
 800da48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da4c:	d1ba      	bne.n	800d9c4 <__swsetup_r+0x30>
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	0781      	lsls	r1, r0, #30
 800da52:	bf58      	it	pl
 800da54:	6963      	ldrpl	r3, [r4, #20]
 800da56:	60a3      	str	r3, [r4, #8]
 800da58:	e7f4      	b.n	800da44 <__swsetup_r+0xb0>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7f7      	b.n	800da4e <__swsetup_r+0xba>
 800da5e:	bf00      	nop
 800da60:	20000030 	.word	0x20000030
 800da64:	08010c84 	.word	0x08010c84
 800da68:	08010ca4 	.word	0x08010ca4
 800da6c:	08010c64 	.word	0x08010c64

0800da70 <__assert_func>:
 800da70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da72:	4614      	mov	r4, r2
 800da74:	461a      	mov	r2, r3
 800da76:	4b09      	ldr	r3, [pc, #36]	; (800da9c <__assert_func+0x2c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4605      	mov	r5, r0
 800da7c:	68d8      	ldr	r0, [r3, #12]
 800da7e:	b14c      	cbz	r4, 800da94 <__assert_func+0x24>
 800da80:	4b07      	ldr	r3, [pc, #28]	; (800daa0 <__assert_func+0x30>)
 800da82:	9100      	str	r1, [sp, #0]
 800da84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da88:	4906      	ldr	r1, [pc, #24]	; (800daa4 <__assert_func+0x34>)
 800da8a:	462b      	mov	r3, r5
 800da8c:	f7fd fd32 	bl	800b4f4 <fiprintf>
 800da90:	f7fd fb78 	bl	800b184 <abort>
 800da94:	4b04      	ldr	r3, [pc, #16]	; (800daa8 <__assert_func+0x38>)
 800da96:	461c      	mov	r4, r3
 800da98:	e7f3      	b.n	800da82 <__assert_func+0x12>
 800da9a:	bf00      	nop
 800da9c:	20000030 	.word	0x20000030
 800daa0:	08010ddc 	.word	0x08010ddc
 800daa4:	08010de9 	.word	0x08010de9
 800daa8:	08010e17 	.word	0x08010e17

0800daac <_close_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4d06      	ldr	r5, [pc, #24]	; (800dac8 <_close_r+0x1c>)
 800dab0:	2300      	movs	r3, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4608      	mov	r0, r1
 800dab6:	602b      	str	r3, [r5, #0]
 800dab8:	f7f6 f9fc 	bl	8003eb4 <_close>
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d102      	bne.n	800dac6 <_close_r+0x1a>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	b103      	cbz	r3, 800dac6 <_close_r+0x1a>
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	20000a18 	.word	0x20000a18

0800dacc <quorem>:
 800dacc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad0:	6903      	ldr	r3, [r0, #16]
 800dad2:	690c      	ldr	r4, [r1, #16]
 800dad4:	42a3      	cmp	r3, r4
 800dad6:	4607      	mov	r7, r0
 800dad8:	f2c0 8081 	blt.w	800dbde <quorem+0x112>
 800dadc:	3c01      	subs	r4, #1
 800dade:	f101 0814 	add.w	r8, r1, #20
 800dae2:	f100 0514 	add.w	r5, r0, #20
 800dae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800daf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800daf4:	3301      	adds	r3, #1
 800daf6:	429a      	cmp	r2, r3
 800daf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dafc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db00:	fbb2 f6f3 	udiv	r6, r2, r3
 800db04:	d331      	bcc.n	800db6a <quorem+0x9e>
 800db06:	f04f 0e00 	mov.w	lr, #0
 800db0a:	4640      	mov	r0, r8
 800db0c:	46ac      	mov	ip, r5
 800db0e:	46f2      	mov	sl, lr
 800db10:	f850 2b04 	ldr.w	r2, [r0], #4
 800db14:	b293      	uxth	r3, r2
 800db16:	fb06 e303 	mla	r3, r6, r3, lr
 800db1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800db1e:	b29b      	uxth	r3, r3
 800db20:	ebaa 0303 	sub.w	r3, sl, r3
 800db24:	f8dc a000 	ldr.w	sl, [ip]
 800db28:	0c12      	lsrs	r2, r2, #16
 800db2a:	fa13 f38a 	uxtah	r3, r3, sl
 800db2e:	fb06 e202 	mla	r2, r6, r2, lr
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	9b00      	ldr	r3, [sp, #0]
 800db36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db3a:	b292      	uxth	r2, r2
 800db3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db44:	f8bd 3000 	ldrh.w	r3, [sp]
 800db48:	4581      	cmp	r9, r0
 800db4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db4e:	f84c 3b04 	str.w	r3, [ip], #4
 800db52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db56:	d2db      	bcs.n	800db10 <quorem+0x44>
 800db58:	f855 300b 	ldr.w	r3, [r5, fp]
 800db5c:	b92b      	cbnz	r3, 800db6a <quorem+0x9e>
 800db5e:	9b01      	ldr	r3, [sp, #4]
 800db60:	3b04      	subs	r3, #4
 800db62:	429d      	cmp	r5, r3
 800db64:	461a      	mov	r2, r3
 800db66:	d32e      	bcc.n	800dbc6 <quorem+0xfa>
 800db68:	613c      	str	r4, [r7, #16]
 800db6a:	4638      	mov	r0, r7
 800db6c:	f001 fd00 	bl	800f570 <__mcmp>
 800db70:	2800      	cmp	r0, #0
 800db72:	db24      	blt.n	800dbbe <quorem+0xf2>
 800db74:	3601      	adds	r6, #1
 800db76:	4628      	mov	r0, r5
 800db78:	f04f 0c00 	mov.w	ip, #0
 800db7c:	f858 2b04 	ldr.w	r2, [r8], #4
 800db80:	f8d0 e000 	ldr.w	lr, [r0]
 800db84:	b293      	uxth	r3, r2
 800db86:	ebac 0303 	sub.w	r3, ip, r3
 800db8a:	0c12      	lsrs	r2, r2, #16
 800db8c:	fa13 f38e 	uxtah	r3, r3, lr
 800db90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db98:	b29b      	uxth	r3, r3
 800db9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db9e:	45c1      	cmp	r9, r8
 800dba0:	f840 3b04 	str.w	r3, [r0], #4
 800dba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dba8:	d2e8      	bcs.n	800db7c <quorem+0xb0>
 800dbaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbb2:	b922      	cbnz	r2, 800dbbe <quorem+0xf2>
 800dbb4:	3b04      	subs	r3, #4
 800dbb6:	429d      	cmp	r5, r3
 800dbb8:	461a      	mov	r2, r3
 800dbba:	d30a      	bcc.n	800dbd2 <quorem+0x106>
 800dbbc:	613c      	str	r4, [r7, #16]
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	b003      	add	sp, #12
 800dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	3b04      	subs	r3, #4
 800dbca:	2a00      	cmp	r2, #0
 800dbcc:	d1cc      	bne.n	800db68 <quorem+0x9c>
 800dbce:	3c01      	subs	r4, #1
 800dbd0:	e7c7      	b.n	800db62 <quorem+0x96>
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	3b04      	subs	r3, #4
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d1f0      	bne.n	800dbbc <quorem+0xf0>
 800dbda:	3c01      	subs	r4, #1
 800dbdc:	e7eb      	b.n	800dbb6 <quorem+0xea>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	e7ee      	b.n	800dbc0 <quorem+0xf4>
 800dbe2:	0000      	movs	r0, r0
 800dbe4:	0000      	movs	r0, r0
	...

0800dbe8 <_dtoa_r>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	ed2d 8b04 	vpush	{d8-d9}
 800dbf0:	ec57 6b10 	vmov	r6, r7, d0
 800dbf4:	b093      	sub	sp, #76	; 0x4c
 800dbf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dbf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dbfc:	9106      	str	r1, [sp, #24]
 800dbfe:	ee10 aa10 	vmov	sl, s0
 800dc02:	4604      	mov	r4, r0
 800dc04:	9209      	str	r2, [sp, #36]	; 0x24
 800dc06:	930c      	str	r3, [sp, #48]	; 0x30
 800dc08:	46bb      	mov	fp, r7
 800dc0a:	b975      	cbnz	r5, 800dc2a <_dtoa_r+0x42>
 800dc0c:	2010      	movs	r0, #16
 800dc0e:	f7fd fccb 	bl	800b5a8 <malloc>
 800dc12:	4602      	mov	r2, r0
 800dc14:	6260      	str	r0, [r4, #36]	; 0x24
 800dc16:	b920      	cbnz	r0, 800dc22 <_dtoa_r+0x3a>
 800dc18:	4ba7      	ldr	r3, [pc, #668]	; (800deb8 <_dtoa_r+0x2d0>)
 800dc1a:	21ea      	movs	r1, #234	; 0xea
 800dc1c:	48a7      	ldr	r0, [pc, #668]	; (800debc <_dtoa_r+0x2d4>)
 800dc1e:	f7ff ff27 	bl	800da70 <__assert_func>
 800dc22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc26:	6005      	str	r5, [r0, #0]
 800dc28:	60c5      	str	r5, [r0, #12]
 800dc2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc2c:	6819      	ldr	r1, [r3, #0]
 800dc2e:	b151      	cbz	r1, 800dc46 <_dtoa_r+0x5e>
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	604a      	str	r2, [r1, #4]
 800dc34:	2301      	movs	r3, #1
 800dc36:	4093      	lsls	r3, r2
 800dc38:	608b      	str	r3, [r1, #8]
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f001 fa0c 	bl	800f058 <_Bfree>
 800dc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc42:	2200      	movs	r2, #0
 800dc44:	601a      	str	r2, [r3, #0]
 800dc46:	1e3b      	subs	r3, r7, #0
 800dc48:	bfaa      	itet	ge
 800dc4a:	2300      	movge	r3, #0
 800dc4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dc50:	f8c8 3000 	strge.w	r3, [r8]
 800dc54:	4b9a      	ldr	r3, [pc, #616]	; (800dec0 <_dtoa_r+0x2d8>)
 800dc56:	bfbc      	itt	lt
 800dc58:	2201      	movlt	r2, #1
 800dc5a:	f8c8 2000 	strlt.w	r2, [r8]
 800dc5e:	ea33 030b 	bics.w	r3, r3, fp
 800dc62:	d11b      	bne.n	800dc9c <_dtoa_r+0xb4>
 800dc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc66:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc70:	4333      	orrs	r3, r6
 800dc72:	f000 8592 	beq.w	800e79a <_dtoa_r+0xbb2>
 800dc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc78:	b963      	cbnz	r3, 800dc94 <_dtoa_r+0xac>
 800dc7a:	4b92      	ldr	r3, [pc, #584]	; (800dec4 <_dtoa_r+0x2dc>)
 800dc7c:	e022      	b.n	800dcc4 <_dtoa_r+0xdc>
 800dc7e:	4b92      	ldr	r3, [pc, #584]	; (800dec8 <_dtoa_r+0x2e0>)
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	3308      	adds	r3, #8
 800dc84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	9801      	ldr	r0, [sp, #4]
 800dc8a:	b013      	add	sp, #76	; 0x4c
 800dc8c:	ecbd 8b04 	vpop	{d8-d9}
 800dc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc94:	4b8b      	ldr	r3, [pc, #556]	; (800dec4 <_dtoa_r+0x2dc>)
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	3303      	adds	r3, #3
 800dc9a:	e7f3      	b.n	800dc84 <_dtoa_r+0x9c>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	4650      	mov	r0, sl
 800dca2:	4659      	mov	r1, fp
 800dca4:	f7f2 ff42 	bl	8000b2c <__aeabi_dcmpeq>
 800dca8:	ec4b ab19 	vmov	d9, sl, fp
 800dcac:	4680      	mov	r8, r0
 800dcae:	b158      	cbz	r0, 800dcc8 <_dtoa_r+0xe0>
 800dcb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 856b 	beq.w	800e794 <_dtoa_r+0xbac>
 800dcbe:	4883      	ldr	r0, [pc, #524]	; (800decc <_dtoa_r+0x2e4>)
 800dcc0:	6018      	str	r0, [r3, #0]
 800dcc2:	1e43      	subs	r3, r0, #1
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	e7df      	b.n	800dc88 <_dtoa_r+0xa0>
 800dcc8:	ec4b ab10 	vmov	d0, sl, fp
 800dccc:	aa10      	add	r2, sp, #64	; 0x40
 800dcce:	a911      	add	r1, sp, #68	; 0x44
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f001 fd6f 	bl	800f7b4 <__d2b>
 800dcd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dcda:	ee08 0a10 	vmov	s16, r0
 800dcde:	2d00      	cmp	r5, #0
 800dce0:	f000 8084 	beq.w	800ddec <_dtoa_r+0x204>
 800dce4:	ee19 3a90 	vmov	r3, s19
 800dce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dcf0:	4656      	mov	r6, sl
 800dcf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dcfe:	4b74      	ldr	r3, [pc, #464]	; (800ded0 <_dtoa_r+0x2e8>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	4630      	mov	r0, r6
 800dd04:	4639      	mov	r1, r7
 800dd06:	f7f2 faf1 	bl	80002ec <__aeabi_dsub>
 800dd0a:	a365      	add	r3, pc, #404	; (adr r3, 800dea0 <_dtoa_r+0x2b8>)
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	f7f2 fca4 	bl	800065c <__aeabi_dmul>
 800dd14:	a364      	add	r3, pc, #400	; (adr r3, 800dea8 <_dtoa_r+0x2c0>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fae9 	bl	80002f0 <__adddf3>
 800dd1e:	4606      	mov	r6, r0
 800dd20:	4628      	mov	r0, r5
 800dd22:	460f      	mov	r7, r1
 800dd24:	f7f2 fc30 	bl	8000588 <__aeabi_i2d>
 800dd28:	a361      	add	r3, pc, #388	; (adr r3, 800deb0 <_dtoa_r+0x2c8>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f7f2 fc95 	bl	800065c <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 fad9 	bl	80002f0 <__adddf3>
 800dd3e:	4606      	mov	r6, r0
 800dd40:	460f      	mov	r7, r1
 800dd42:	f7f2 ff3b 	bl	8000bbc <__aeabi_d2iz>
 800dd46:	2200      	movs	r2, #0
 800dd48:	9000      	str	r0, [sp, #0]
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	4639      	mov	r1, r7
 800dd50:	f7f2 fef6 	bl	8000b40 <__aeabi_dcmplt>
 800dd54:	b150      	cbz	r0, 800dd6c <_dtoa_r+0x184>
 800dd56:	9800      	ldr	r0, [sp, #0]
 800dd58:	f7f2 fc16 	bl	8000588 <__aeabi_i2d>
 800dd5c:	4632      	mov	r2, r6
 800dd5e:	463b      	mov	r3, r7
 800dd60:	f7f2 fee4 	bl	8000b2c <__aeabi_dcmpeq>
 800dd64:	b910      	cbnz	r0, 800dd6c <_dtoa_r+0x184>
 800dd66:	9b00      	ldr	r3, [sp, #0]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	9b00      	ldr	r3, [sp, #0]
 800dd6e:	2b16      	cmp	r3, #22
 800dd70:	d85a      	bhi.n	800de28 <_dtoa_r+0x240>
 800dd72:	9a00      	ldr	r2, [sp, #0]
 800dd74:	4b57      	ldr	r3, [pc, #348]	; (800ded4 <_dtoa_r+0x2ec>)
 800dd76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	ec51 0b19 	vmov	r0, r1, d9
 800dd82:	f7f2 fedd 	bl	8000b40 <__aeabi_dcmplt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d050      	beq.n	800de2c <_dtoa_r+0x244>
 800dd8a:	9b00      	ldr	r3, [sp, #0]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	2300      	movs	r3, #0
 800dd92:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd96:	1b5d      	subs	r5, r3, r5
 800dd98:	1e6b      	subs	r3, r5, #1
 800dd9a:	9305      	str	r3, [sp, #20]
 800dd9c:	bf45      	ittet	mi
 800dd9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dda2:	9304      	strmi	r3, [sp, #16]
 800dda4:	2300      	movpl	r3, #0
 800dda6:	2300      	movmi	r3, #0
 800dda8:	bf4c      	ite	mi
 800ddaa:	9305      	strmi	r3, [sp, #20]
 800ddac:	9304      	strpl	r3, [sp, #16]
 800ddae:	9b00      	ldr	r3, [sp, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	db3d      	blt.n	800de30 <_dtoa_r+0x248>
 800ddb4:	9b05      	ldr	r3, [sp, #20]
 800ddb6:	9a00      	ldr	r2, [sp, #0]
 800ddb8:	920a      	str	r2, [sp, #40]	; 0x28
 800ddba:	4413      	add	r3, r2
 800ddbc:	9305      	str	r3, [sp, #20]
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	9307      	str	r3, [sp, #28]
 800ddc2:	9b06      	ldr	r3, [sp, #24]
 800ddc4:	2b09      	cmp	r3, #9
 800ddc6:	f200 8089 	bhi.w	800dedc <_dtoa_r+0x2f4>
 800ddca:	2b05      	cmp	r3, #5
 800ddcc:	bfc4      	itt	gt
 800ddce:	3b04      	subgt	r3, #4
 800ddd0:	9306      	strgt	r3, [sp, #24]
 800ddd2:	9b06      	ldr	r3, [sp, #24]
 800ddd4:	f1a3 0302 	sub.w	r3, r3, #2
 800ddd8:	bfcc      	ite	gt
 800ddda:	2500      	movgt	r5, #0
 800dddc:	2501      	movle	r5, #1
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	f200 8087 	bhi.w	800def2 <_dtoa_r+0x30a>
 800dde4:	e8df f003 	tbb	[pc, r3]
 800dde8:	59383a2d 	.word	0x59383a2d
 800ddec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ddf0:	441d      	add	r5, r3
 800ddf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ddf6:	2b20      	cmp	r3, #32
 800ddf8:	bfc1      	itttt	gt
 800ddfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ddfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800de02:	fa0b f303 	lslgt.w	r3, fp, r3
 800de06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800de0a:	bfda      	itte	le
 800de0c:	f1c3 0320 	rsble	r3, r3, #32
 800de10:	fa06 f003 	lslle.w	r0, r6, r3
 800de14:	4318      	orrgt	r0, r3
 800de16:	f7f2 fba7 	bl	8000568 <__aeabi_ui2d>
 800de1a:	2301      	movs	r3, #1
 800de1c:	4606      	mov	r6, r0
 800de1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800de22:	3d01      	subs	r5, #1
 800de24:	930e      	str	r3, [sp, #56]	; 0x38
 800de26:	e76a      	b.n	800dcfe <_dtoa_r+0x116>
 800de28:	2301      	movs	r3, #1
 800de2a:	e7b2      	b.n	800dd92 <_dtoa_r+0x1aa>
 800de2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800de2e:	e7b1      	b.n	800dd94 <_dtoa_r+0x1ac>
 800de30:	9b04      	ldr	r3, [sp, #16]
 800de32:	9a00      	ldr	r2, [sp, #0]
 800de34:	1a9b      	subs	r3, r3, r2
 800de36:	9304      	str	r3, [sp, #16]
 800de38:	4253      	negs	r3, r2
 800de3a:	9307      	str	r3, [sp, #28]
 800de3c:	2300      	movs	r3, #0
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	e7bf      	b.n	800ddc2 <_dtoa_r+0x1da>
 800de42:	2300      	movs	r3, #0
 800de44:	9308      	str	r3, [sp, #32]
 800de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de48:	2b00      	cmp	r3, #0
 800de4a:	dc55      	bgt.n	800def8 <_dtoa_r+0x310>
 800de4c:	2301      	movs	r3, #1
 800de4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800de52:	461a      	mov	r2, r3
 800de54:	9209      	str	r2, [sp, #36]	; 0x24
 800de56:	e00c      	b.n	800de72 <_dtoa_r+0x28a>
 800de58:	2301      	movs	r3, #1
 800de5a:	e7f3      	b.n	800de44 <_dtoa_r+0x25c>
 800de5c:	2300      	movs	r3, #0
 800de5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de60:	9308      	str	r3, [sp, #32]
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	4413      	add	r3, r2
 800de66:	9302      	str	r3, [sp, #8]
 800de68:	3301      	adds	r3, #1
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	9303      	str	r3, [sp, #12]
 800de6e:	bfb8      	it	lt
 800de70:	2301      	movlt	r3, #1
 800de72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800de74:	2200      	movs	r2, #0
 800de76:	6042      	str	r2, [r0, #4]
 800de78:	2204      	movs	r2, #4
 800de7a:	f102 0614 	add.w	r6, r2, #20
 800de7e:	429e      	cmp	r6, r3
 800de80:	6841      	ldr	r1, [r0, #4]
 800de82:	d93d      	bls.n	800df00 <_dtoa_r+0x318>
 800de84:	4620      	mov	r0, r4
 800de86:	f001 f8a7 	bl	800efd8 <_Balloc>
 800de8a:	9001      	str	r0, [sp, #4]
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d13b      	bne.n	800df08 <_dtoa_r+0x320>
 800de90:	4b11      	ldr	r3, [pc, #68]	; (800ded8 <_dtoa_r+0x2f0>)
 800de92:	4602      	mov	r2, r0
 800de94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800de98:	e6c0      	b.n	800dc1c <_dtoa_r+0x34>
 800de9a:	2301      	movs	r3, #1
 800de9c:	e7df      	b.n	800de5e <_dtoa_r+0x276>
 800de9e:	bf00      	nop
 800dea0:	636f4361 	.word	0x636f4361
 800dea4:	3fd287a7 	.word	0x3fd287a7
 800dea8:	8b60c8b3 	.word	0x8b60c8b3
 800deac:	3fc68a28 	.word	0x3fc68a28
 800deb0:	509f79fb 	.word	0x509f79fb
 800deb4:	3fd34413 	.word	0x3fd34413
 800deb8:	08010d68 	.word	0x08010d68
 800debc:	08010f26 	.word	0x08010f26
 800dec0:	7ff00000 	.word	0x7ff00000
 800dec4:	08010f22 	.word	0x08010f22
 800dec8:	08010f19 	.word	0x08010f19
 800decc:	08010cea 	.word	0x08010cea
 800ded0:	3ff80000 	.word	0x3ff80000
 800ded4:	08011090 	.word	0x08011090
 800ded8:	08010f81 	.word	0x08010f81
 800dedc:	2501      	movs	r5, #1
 800dede:	2300      	movs	r3, #0
 800dee0:	9306      	str	r3, [sp, #24]
 800dee2:	9508      	str	r5, [sp, #32]
 800dee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dee8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800deec:	2200      	movs	r2, #0
 800deee:	2312      	movs	r3, #18
 800def0:	e7b0      	b.n	800de54 <_dtoa_r+0x26c>
 800def2:	2301      	movs	r3, #1
 800def4:	9308      	str	r3, [sp, #32]
 800def6:	e7f5      	b.n	800dee4 <_dtoa_r+0x2fc>
 800def8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800defe:	e7b8      	b.n	800de72 <_dtoa_r+0x28a>
 800df00:	3101      	adds	r1, #1
 800df02:	6041      	str	r1, [r0, #4]
 800df04:	0052      	lsls	r2, r2, #1
 800df06:	e7b8      	b.n	800de7a <_dtoa_r+0x292>
 800df08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df0a:	9a01      	ldr	r2, [sp, #4]
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	2b0e      	cmp	r3, #14
 800df12:	f200 809d 	bhi.w	800e050 <_dtoa_r+0x468>
 800df16:	2d00      	cmp	r5, #0
 800df18:	f000 809a 	beq.w	800e050 <_dtoa_r+0x468>
 800df1c:	9b00      	ldr	r3, [sp, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	dd32      	ble.n	800df88 <_dtoa_r+0x3a0>
 800df22:	4ab7      	ldr	r2, [pc, #732]	; (800e200 <_dtoa_r+0x618>)
 800df24:	f003 030f 	and.w	r3, r3, #15
 800df28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df30:	9b00      	ldr	r3, [sp, #0]
 800df32:	05d8      	lsls	r0, r3, #23
 800df34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800df38:	d516      	bpl.n	800df68 <_dtoa_r+0x380>
 800df3a:	4bb2      	ldr	r3, [pc, #712]	; (800e204 <_dtoa_r+0x61c>)
 800df3c:	ec51 0b19 	vmov	r0, r1, d9
 800df40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df44:	f7f2 fcb4 	bl	80008b0 <__aeabi_ddiv>
 800df48:	f007 070f 	and.w	r7, r7, #15
 800df4c:	4682      	mov	sl, r0
 800df4e:	468b      	mov	fp, r1
 800df50:	2503      	movs	r5, #3
 800df52:	4eac      	ldr	r6, [pc, #688]	; (800e204 <_dtoa_r+0x61c>)
 800df54:	b957      	cbnz	r7, 800df6c <_dtoa_r+0x384>
 800df56:	4642      	mov	r2, r8
 800df58:	464b      	mov	r3, r9
 800df5a:	4650      	mov	r0, sl
 800df5c:	4659      	mov	r1, fp
 800df5e:	f7f2 fca7 	bl	80008b0 <__aeabi_ddiv>
 800df62:	4682      	mov	sl, r0
 800df64:	468b      	mov	fp, r1
 800df66:	e028      	b.n	800dfba <_dtoa_r+0x3d2>
 800df68:	2502      	movs	r5, #2
 800df6a:	e7f2      	b.n	800df52 <_dtoa_r+0x36a>
 800df6c:	07f9      	lsls	r1, r7, #31
 800df6e:	d508      	bpl.n	800df82 <_dtoa_r+0x39a>
 800df70:	4640      	mov	r0, r8
 800df72:	4649      	mov	r1, r9
 800df74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df78:	f7f2 fb70 	bl	800065c <__aeabi_dmul>
 800df7c:	3501      	adds	r5, #1
 800df7e:	4680      	mov	r8, r0
 800df80:	4689      	mov	r9, r1
 800df82:	107f      	asrs	r7, r7, #1
 800df84:	3608      	adds	r6, #8
 800df86:	e7e5      	b.n	800df54 <_dtoa_r+0x36c>
 800df88:	f000 809b 	beq.w	800e0c2 <_dtoa_r+0x4da>
 800df8c:	9b00      	ldr	r3, [sp, #0]
 800df8e:	4f9d      	ldr	r7, [pc, #628]	; (800e204 <_dtoa_r+0x61c>)
 800df90:	425e      	negs	r6, r3
 800df92:	4b9b      	ldr	r3, [pc, #620]	; (800e200 <_dtoa_r+0x618>)
 800df94:	f006 020f 	and.w	r2, r6, #15
 800df98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	ec51 0b19 	vmov	r0, r1, d9
 800dfa4:	f7f2 fb5a 	bl	800065c <__aeabi_dmul>
 800dfa8:	1136      	asrs	r6, r6, #4
 800dfaa:	4682      	mov	sl, r0
 800dfac:	468b      	mov	fp, r1
 800dfae:	2300      	movs	r3, #0
 800dfb0:	2502      	movs	r5, #2
 800dfb2:	2e00      	cmp	r6, #0
 800dfb4:	d17a      	bne.n	800e0ac <_dtoa_r+0x4c4>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1d3      	bne.n	800df62 <_dtoa_r+0x37a>
 800dfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f000 8082 	beq.w	800e0c6 <_dtoa_r+0x4de>
 800dfc2:	4b91      	ldr	r3, [pc, #580]	; (800e208 <_dtoa_r+0x620>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4650      	mov	r0, sl
 800dfc8:	4659      	mov	r1, fp
 800dfca:	f7f2 fdb9 	bl	8000b40 <__aeabi_dcmplt>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d079      	beq.n	800e0c6 <_dtoa_r+0x4de>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d076      	beq.n	800e0c6 <_dtoa_r+0x4de>
 800dfd8:	9b02      	ldr	r3, [sp, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	dd36      	ble.n	800e04c <_dtoa_r+0x464>
 800dfde:	9b00      	ldr	r3, [sp, #0]
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	4659      	mov	r1, fp
 800dfe4:	1e5f      	subs	r7, r3, #1
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4b88      	ldr	r3, [pc, #544]	; (800e20c <_dtoa_r+0x624>)
 800dfea:	f7f2 fb37 	bl	800065c <__aeabi_dmul>
 800dfee:	9e02      	ldr	r6, [sp, #8]
 800dff0:	4682      	mov	sl, r0
 800dff2:	468b      	mov	fp, r1
 800dff4:	3501      	adds	r5, #1
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7f2 fac6 	bl	8000588 <__aeabi_i2d>
 800dffc:	4652      	mov	r2, sl
 800dffe:	465b      	mov	r3, fp
 800e000:	f7f2 fb2c 	bl	800065c <__aeabi_dmul>
 800e004:	4b82      	ldr	r3, [pc, #520]	; (800e210 <_dtoa_r+0x628>)
 800e006:	2200      	movs	r2, #0
 800e008:	f7f2 f972 	bl	80002f0 <__adddf3>
 800e00c:	46d0      	mov	r8, sl
 800e00e:	46d9      	mov	r9, fp
 800e010:	4682      	mov	sl, r0
 800e012:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e016:	2e00      	cmp	r6, #0
 800e018:	d158      	bne.n	800e0cc <_dtoa_r+0x4e4>
 800e01a:	4b7e      	ldr	r3, [pc, #504]	; (800e214 <_dtoa_r+0x62c>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	4640      	mov	r0, r8
 800e020:	4649      	mov	r1, r9
 800e022:	f7f2 f963 	bl	80002ec <__aeabi_dsub>
 800e026:	4652      	mov	r2, sl
 800e028:	465b      	mov	r3, fp
 800e02a:	4680      	mov	r8, r0
 800e02c:	4689      	mov	r9, r1
 800e02e:	f7f2 fda5 	bl	8000b7c <__aeabi_dcmpgt>
 800e032:	2800      	cmp	r0, #0
 800e034:	f040 8295 	bne.w	800e562 <_dtoa_r+0x97a>
 800e038:	4652      	mov	r2, sl
 800e03a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e03e:	4640      	mov	r0, r8
 800e040:	4649      	mov	r1, r9
 800e042:	f7f2 fd7d 	bl	8000b40 <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	f040 8289 	bne.w	800e55e <_dtoa_r+0x976>
 800e04c:	ec5b ab19 	vmov	sl, fp, d9
 800e050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e052:	2b00      	cmp	r3, #0
 800e054:	f2c0 8148 	blt.w	800e2e8 <_dtoa_r+0x700>
 800e058:	9a00      	ldr	r2, [sp, #0]
 800e05a:	2a0e      	cmp	r2, #14
 800e05c:	f300 8144 	bgt.w	800e2e8 <_dtoa_r+0x700>
 800e060:	4b67      	ldr	r3, [pc, #412]	; (800e200 <_dtoa_r+0x618>)
 800e062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f280 80d5 	bge.w	800e21c <_dtoa_r+0x634>
 800e072:	9b03      	ldr	r3, [sp, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	f300 80d1 	bgt.w	800e21c <_dtoa_r+0x634>
 800e07a:	f040 826f 	bne.w	800e55c <_dtoa_r+0x974>
 800e07e:	4b65      	ldr	r3, [pc, #404]	; (800e214 <_dtoa_r+0x62c>)
 800e080:	2200      	movs	r2, #0
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 fae9 	bl	800065c <__aeabi_dmul>
 800e08a:	4652      	mov	r2, sl
 800e08c:	465b      	mov	r3, fp
 800e08e:	f7f2 fd6b 	bl	8000b68 <__aeabi_dcmpge>
 800e092:	9e03      	ldr	r6, [sp, #12]
 800e094:	4637      	mov	r7, r6
 800e096:	2800      	cmp	r0, #0
 800e098:	f040 8245 	bne.w	800e526 <_dtoa_r+0x93e>
 800e09c:	9d01      	ldr	r5, [sp, #4]
 800e09e:	2331      	movs	r3, #49	; 0x31
 800e0a0:	f805 3b01 	strb.w	r3, [r5], #1
 800e0a4:	9b00      	ldr	r3, [sp, #0]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	e240      	b.n	800e52e <_dtoa_r+0x946>
 800e0ac:	07f2      	lsls	r2, r6, #31
 800e0ae:	d505      	bpl.n	800e0bc <_dtoa_r+0x4d4>
 800e0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b4:	f7f2 fad2 	bl	800065c <__aeabi_dmul>
 800e0b8:	3501      	adds	r5, #1
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	1076      	asrs	r6, r6, #1
 800e0be:	3708      	adds	r7, #8
 800e0c0:	e777      	b.n	800dfb2 <_dtoa_r+0x3ca>
 800e0c2:	2502      	movs	r5, #2
 800e0c4:	e779      	b.n	800dfba <_dtoa_r+0x3d2>
 800e0c6:	9f00      	ldr	r7, [sp, #0]
 800e0c8:	9e03      	ldr	r6, [sp, #12]
 800e0ca:	e794      	b.n	800dff6 <_dtoa_r+0x40e>
 800e0cc:	9901      	ldr	r1, [sp, #4]
 800e0ce:	4b4c      	ldr	r3, [pc, #304]	; (800e200 <_dtoa_r+0x618>)
 800e0d0:	4431      	add	r1, r6
 800e0d2:	910d      	str	r1, [sp, #52]	; 0x34
 800e0d4:	9908      	ldr	r1, [sp, #32]
 800e0d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0de:	2900      	cmp	r1, #0
 800e0e0:	d043      	beq.n	800e16a <_dtoa_r+0x582>
 800e0e2:	494d      	ldr	r1, [pc, #308]	; (800e218 <_dtoa_r+0x630>)
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	f7f2 fbe3 	bl	80008b0 <__aeabi_ddiv>
 800e0ea:	4652      	mov	r2, sl
 800e0ec:	465b      	mov	r3, fp
 800e0ee:	f7f2 f8fd 	bl	80002ec <__aeabi_dsub>
 800e0f2:	9d01      	ldr	r5, [sp, #4]
 800e0f4:	4682      	mov	sl, r0
 800e0f6:	468b      	mov	fp, r1
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	f7f2 fd5e 	bl	8000bbc <__aeabi_d2iz>
 800e100:	4606      	mov	r6, r0
 800e102:	f7f2 fa41 	bl	8000588 <__aeabi_i2d>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4640      	mov	r0, r8
 800e10c:	4649      	mov	r1, r9
 800e10e:	f7f2 f8ed 	bl	80002ec <__aeabi_dsub>
 800e112:	3630      	adds	r6, #48	; 0x30
 800e114:	f805 6b01 	strb.w	r6, [r5], #1
 800e118:	4652      	mov	r2, sl
 800e11a:	465b      	mov	r3, fp
 800e11c:	4680      	mov	r8, r0
 800e11e:	4689      	mov	r9, r1
 800e120:	f7f2 fd0e 	bl	8000b40 <__aeabi_dcmplt>
 800e124:	2800      	cmp	r0, #0
 800e126:	d163      	bne.n	800e1f0 <_dtoa_r+0x608>
 800e128:	4642      	mov	r2, r8
 800e12a:	464b      	mov	r3, r9
 800e12c:	4936      	ldr	r1, [pc, #216]	; (800e208 <_dtoa_r+0x620>)
 800e12e:	2000      	movs	r0, #0
 800e130:	f7f2 f8dc 	bl	80002ec <__aeabi_dsub>
 800e134:	4652      	mov	r2, sl
 800e136:	465b      	mov	r3, fp
 800e138:	f7f2 fd02 	bl	8000b40 <__aeabi_dcmplt>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f040 80b5 	bne.w	800e2ac <_dtoa_r+0x6c4>
 800e142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e144:	429d      	cmp	r5, r3
 800e146:	d081      	beq.n	800e04c <_dtoa_r+0x464>
 800e148:	4b30      	ldr	r3, [pc, #192]	; (800e20c <_dtoa_r+0x624>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	4650      	mov	r0, sl
 800e14e:	4659      	mov	r1, fp
 800e150:	f7f2 fa84 	bl	800065c <__aeabi_dmul>
 800e154:	4b2d      	ldr	r3, [pc, #180]	; (800e20c <_dtoa_r+0x624>)
 800e156:	4682      	mov	sl, r0
 800e158:	468b      	mov	fp, r1
 800e15a:	4640      	mov	r0, r8
 800e15c:	4649      	mov	r1, r9
 800e15e:	2200      	movs	r2, #0
 800e160:	f7f2 fa7c 	bl	800065c <__aeabi_dmul>
 800e164:	4680      	mov	r8, r0
 800e166:	4689      	mov	r9, r1
 800e168:	e7c6      	b.n	800e0f8 <_dtoa_r+0x510>
 800e16a:	4650      	mov	r0, sl
 800e16c:	4659      	mov	r1, fp
 800e16e:	f7f2 fa75 	bl	800065c <__aeabi_dmul>
 800e172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e174:	9d01      	ldr	r5, [sp, #4]
 800e176:	930f      	str	r3, [sp, #60]	; 0x3c
 800e178:	4682      	mov	sl, r0
 800e17a:	468b      	mov	fp, r1
 800e17c:	4649      	mov	r1, r9
 800e17e:	4640      	mov	r0, r8
 800e180:	f7f2 fd1c 	bl	8000bbc <__aeabi_d2iz>
 800e184:	4606      	mov	r6, r0
 800e186:	f7f2 f9ff 	bl	8000588 <__aeabi_i2d>
 800e18a:	3630      	adds	r6, #48	; 0x30
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4640      	mov	r0, r8
 800e192:	4649      	mov	r1, r9
 800e194:	f7f2 f8aa 	bl	80002ec <__aeabi_dsub>
 800e198:	f805 6b01 	strb.w	r6, [r5], #1
 800e19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e19e:	429d      	cmp	r5, r3
 800e1a0:	4680      	mov	r8, r0
 800e1a2:	4689      	mov	r9, r1
 800e1a4:	f04f 0200 	mov.w	r2, #0
 800e1a8:	d124      	bne.n	800e1f4 <_dtoa_r+0x60c>
 800e1aa:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <_dtoa_r+0x630>)
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	4659      	mov	r1, fp
 800e1b0:	f7f2 f89e 	bl	80002f0 <__adddf3>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 fcde 	bl	8000b7c <__aeabi_dcmpgt>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d173      	bne.n	800e2ac <_dtoa_r+0x6c4>
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	465b      	mov	r3, fp
 800e1c8:	4913      	ldr	r1, [pc, #76]	; (800e218 <_dtoa_r+0x630>)
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	f7f2 f88e 	bl	80002ec <__aeabi_dsub>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	4649      	mov	r1, r9
 800e1d8:	f7f2 fcb2 	bl	8000b40 <__aeabi_dcmplt>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	f43f af35 	beq.w	800e04c <_dtoa_r+0x464>
 800e1e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e1e4:	1e6b      	subs	r3, r5, #1
 800e1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1ec:	2b30      	cmp	r3, #48	; 0x30
 800e1ee:	d0f8      	beq.n	800e1e2 <_dtoa_r+0x5fa>
 800e1f0:	9700      	str	r7, [sp, #0]
 800e1f2:	e049      	b.n	800e288 <_dtoa_r+0x6a0>
 800e1f4:	4b05      	ldr	r3, [pc, #20]	; (800e20c <_dtoa_r+0x624>)
 800e1f6:	f7f2 fa31 	bl	800065c <__aeabi_dmul>
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	4689      	mov	r9, r1
 800e1fe:	e7bd      	b.n	800e17c <_dtoa_r+0x594>
 800e200:	08011090 	.word	0x08011090
 800e204:	08011068 	.word	0x08011068
 800e208:	3ff00000 	.word	0x3ff00000
 800e20c:	40240000 	.word	0x40240000
 800e210:	401c0000 	.word	0x401c0000
 800e214:	40140000 	.word	0x40140000
 800e218:	3fe00000 	.word	0x3fe00000
 800e21c:	9d01      	ldr	r5, [sp, #4]
 800e21e:	4656      	mov	r6, sl
 800e220:	465f      	mov	r7, fp
 800e222:	4642      	mov	r2, r8
 800e224:	464b      	mov	r3, r9
 800e226:	4630      	mov	r0, r6
 800e228:	4639      	mov	r1, r7
 800e22a:	f7f2 fb41 	bl	80008b0 <__aeabi_ddiv>
 800e22e:	f7f2 fcc5 	bl	8000bbc <__aeabi_d2iz>
 800e232:	4682      	mov	sl, r0
 800e234:	f7f2 f9a8 	bl	8000588 <__aeabi_i2d>
 800e238:	4642      	mov	r2, r8
 800e23a:	464b      	mov	r3, r9
 800e23c:	f7f2 fa0e 	bl	800065c <__aeabi_dmul>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e24c:	f7f2 f84e 	bl	80002ec <__aeabi_dsub>
 800e250:	f805 6b01 	strb.w	r6, [r5], #1
 800e254:	9e01      	ldr	r6, [sp, #4]
 800e256:	9f03      	ldr	r7, [sp, #12]
 800e258:	1bae      	subs	r6, r5, r6
 800e25a:	42b7      	cmp	r7, r6
 800e25c:	4602      	mov	r2, r0
 800e25e:	460b      	mov	r3, r1
 800e260:	d135      	bne.n	800e2ce <_dtoa_r+0x6e6>
 800e262:	f7f2 f845 	bl	80002f0 <__adddf3>
 800e266:	4642      	mov	r2, r8
 800e268:	464b      	mov	r3, r9
 800e26a:	4606      	mov	r6, r0
 800e26c:	460f      	mov	r7, r1
 800e26e:	f7f2 fc85 	bl	8000b7c <__aeabi_dcmpgt>
 800e272:	b9d0      	cbnz	r0, 800e2aa <_dtoa_r+0x6c2>
 800e274:	4642      	mov	r2, r8
 800e276:	464b      	mov	r3, r9
 800e278:	4630      	mov	r0, r6
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 fc56 	bl	8000b2c <__aeabi_dcmpeq>
 800e280:	b110      	cbz	r0, 800e288 <_dtoa_r+0x6a0>
 800e282:	f01a 0f01 	tst.w	sl, #1
 800e286:	d110      	bne.n	800e2aa <_dtoa_r+0x6c2>
 800e288:	4620      	mov	r0, r4
 800e28a:	ee18 1a10 	vmov	r1, s16
 800e28e:	f000 fee3 	bl	800f058 <_Bfree>
 800e292:	2300      	movs	r3, #0
 800e294:	9800      	ldr	r0, [sp, #0]
 800e296:	702b      	strb	r3, [r5, #0]
 800e298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e29a:	3001      	adds	r0, #1
 800e29c:	6018      	str	r0, [r3, #0]
 800e29e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f43f acf1 	beq.w	800dc88 <_dtoa_r+0xa0>
 800e2a6:	601d      	str	r5, [r3, #0]
 800e2a8:	e4ee      	b.n	800dc88 <_dtoa_r+0xa0>
 800e2aa:	9f00      	ldr	r7, [sp, #0]
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	461d      	mov	r5, r3
 800e2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2b4:	2a39      	cmp	r2, #57	; 0x39
 800e2b6:	d106      	bne.n	800e2c6 <_dtoa_r+0x6de>
 800e2b8:	9a01      	ldr	r2, [sp, #4]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d1f7      	bne.n	800e2ae <_dtoa_r+0x6c6>
 800e2be:	9901      	ldr	r1, [sp, #4]
 800e2c0:	2230      	movs	r2, #48	; 0x30
 800e2c2:	3701      	adds	r7, #1
 800e2c4:	700a      	strb	r2, [r1, #0]
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	3201      	adds	r2, #1
 800e2ca:	701a      	strb	r2, [r3, #0]
 800e2cc:	e790      	b.n	800e1f0 <_dtoa_r+0x608>
 800e2ce:	4ba6      	ldr	r3, [pc, #664]	; (800e568 <_dtoa_r+0x980>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f7f2 f9c3 	bl	800065c <__aeabi_dmul>
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460f      	mov	r7, r1
 800e2de:	f7f2 fc25 	bl	8000b2c <__aeabi_dcmpeq>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d09d      	beq.n	800e222 <_dtoa_r+0x63a>
 800e2e6:	e7cf      	b.n	800e288 <_dtoa_r+0x6a0>
 800e2e8:	9a08      	ldr	r2, [sp, #32]
 800e2ea:	2a00      	cmp	r2, #0
 800e2ec:	f000 80d7 	beq.w	800e49e <_dtoa_r+0x8b6>
 800e2f0:	9a06      	ldr	r2, [sp, #24]
 800e2f2:	2a01      	cmp	r2, #1
 800e2f4:	f300 80ba 	bgt.w	800e46c <_dtoa_r+0x884>
 800e2f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2fa:	2a00      	cmp	r2, #0
 800e2fc:	f000 80b2 	beq.w	800e464 <_dtoa_r+0x87c>
 800e300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e304:	9e07      	ldr	r6, [sp, #28]
 800e306:	9d04      	ldr	r5, [sp, #16]
 800e308:	9a04      	ldr	r2, [sp, #16]
 800e30a:	441a      	add	r2, r3
 800e30c:	9204      	str	r2, [sp, #16]
 800e30e:	9a05      	ldr	r2, [sp, #20]
 800e310:	2101      	movs	r1, #1
 800e312:	441a      	add	r2, r3
 800e314:	4620      	mov	r0, r4
 800e316:	9205      	str	r2, [sp, #20]
 800e318:	f000 ffa0 	bl	800f25c <__i2b>
 800e31c:	4607      	mov	r7, r0
 800e31e:	2d00      	cmp	r5, #0
 800e320:	dd0c      	ble.n	800e33c <_dtoa_r+0x754>
 800e322:	9b05      	ldr	r3, [sp, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	dd09      	ble.n	800e33c <_dtoa_r+0x754>
 800e328:	42ab      	cmp	r3, r5
 800e32a:	9a04      	ldr	r2, [sp, #16]
 800e32c:	bfa8      	it	ge
 800e32e:	462b      	movge	r3, r5
 800e330:	1ad2      	subs	r2, r2, r3
 800e332:	9204      	str	r2, [sp, #16]
 800e334:	9a05      	ldr	r2, [sp, #20]
 800e336:	1aed      	subs	r5, r5, r3
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	9b07      	ldr	r3, [sp, #28]
 800e33e:	b31b      	cbz	r3, 800e388 <_dtoa_r+0x7a0>
 800e340:	9b08      	ldr	r3, [sp, #32]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80af 	beq.w	800e4a6 <_dtoa_r+0x8be>
 800e348:	2e00      	cmp	r6, #0
 800e34a:	dd13      	ble.n	800e374 <_dtoa_r+0x78c>
 800e34c:	4639      	mov	r1, r7
 800e34e:	4632      	mov	r2, r6
 800e350:	4620      	mov	r0, r4
 800e352:	f001 f843 	bl	800f3dc <__pow5mult>
 800e356:	ee18 2a10 	vmov	r2, s16
 800e35a:	4601      	mov	r1, r0
 800e35c:	4607      	mov	r7, r0
 800e35e:	4620      	mov	r0, r4
 800e360:	f000 ff92 	bl	800f288 <__multiply>
 800e364:	ee18 1a10 	vmov	r1, s16
 800e368:	4680      	mov	r8, r0
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fe74 	bl	800f058 <_Bfree>
 800e370:	ee08 8a10 	vmov	s16, r8
 800e374:	9b07      	ldr	r3, [sp, #28]
 800e376:	1b9a      	subs	r2, r3, r6
 800e378:	d006      	beq.n	800e388 <_dtoa_r+0x7a0>
 800e37a:	ee18 1a10 	vmov	r1, s16
 800e37e:	4620      	mov	r0, r4
 800e380:	f001 f82c 	bl	800f3dc <__pow5mult>
 800e384:	ee08 0a10 	vmov	s16, r0
 800e388:	2101      	movs	r1, #1
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 ff66 	bl	800f25c <__i2b>
 800e390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e392:	2b00      	cmp	r3, #0
 800e394:	4606      	mov	r6, r0
 800e396:	f340 8088 	ble.w	800e4aa <_dtoa_r+0x8c2>
 800e39a:	461a      	mov	r2, r3
 800e39c:	4601      	mov	r1, r0
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f001 f81c 	bl	800f3dc <__pow5mult>
 800e3a4:	9b06      	ldr	r3, [sp, #24]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	f340 8081 	ble.w	800e4b0 <_dtoa_r+0x8c8>
 800e3ae:	f04f 0800 	mov.w	r8, #0
 800e3b2:	6933      	ldr	r3, [r6, #16]
 800e3b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e3b8:	6918      	ldr	r0, [r3, #16]
 800e3ba:	f000 feff 	bl	800f1bc <__hi0bits>
 800e3be:	f1c0 0020 	rsb	r0, r0, #32
 800e3c2:	9b05      	ldr	r3, [sp, #20]
 800e3c4:	4418      	add	r0, r3
 800e3c6:	f010 001f 	ands.w	r0, r0, #31
 800e3ca:	f000 8092 	beq.w	800e4f2 <_dtoa_r+0x90a>
 800e3ce:	f1c0 0320 	rsb	r3, r0, #32
 800e3d2:	2b04      	cmp	r3, #4
 800e3d4:	f340 808a 	ble.w	800e4ec <_dtoa_r+0x904>
 800e3d8:	f1c0 001c 	rsb	r0, r0, #28
 800e3dc:	9b04      	ldr	r3, [sp, #16]
 800e3de:	4403      	add	r3, r0
 800e3e0:	9304      	str	r3, [sp, #16]
 800e3e2:	9b05      	ldr	r3, [sp, #20]
 800e3e4:	4403      	add	r3, r0
 800e3e6:	4405      	add	r5, r0
 800e3e8:	9305      	str	r3, [sp, #20]
 800e3ea:	9b04      	ldr	r3, [sp, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	dd07      	ble.n	800e400 <_dtoa_r+0x818>
 800e3f0:	ee18 1a10 	vmov	r1, s16
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f001 f84a 	bl	800f490 <__lshift>
 800e3fc:	ee08 0a10 	vmov	s16, r0
 800e400:	9b05      	ldr	r3, [sp, #20]
 800e402:	2b00      	cmp	r3, #0
 800e404:	dd05      	ble.n	800e412 <_dtoa_r+0x82a>
 800e406:	4631      	mov	r1, r6
 800e408:	461a      	mov	r2, r3
 800e40a:	4620      	mov	r0, r4
 800e40c:	f001 f840 	bl	800f490 <__lshift>
 800e410:	4606      	mov	r6, r0
 800e412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e414:	2b00      	cmp	r3, #0
 800e416:	d06e      	beq.n	800e4f6 <_dtoa_r+0x90e>
 800e418:	ee18 0a10 	vmov	r0, s16
 800e41c:	4631      	mov	r1, r6
 800e41e:	f001 f8a7 	bl	800f570 <__mcmp>
 800e422:	2800      	cmp	r0, #0
 800e424:	da67      	bge.n	800e4f6 <_dtoa_r+0x90e>
 800e426:	9b00      	ldr	r3, [sp, #0]
 800e428:	3b01      	subs	r3, #1
 800e42a:	ee18 1a10 	vmov	r1, s16
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	220a      	movs	r2, #10
 800e432:	2300      	movs	r3, #0
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fe31 	bl	800f09c <__multadd>
 800e43a:	9b08      	ldr	r3, [sp, #32]
 800e43c:	ee08 0a10 	vmov	s16, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 81b1 	beq.w	800e7a8 <_dtoa_r+0xbc0>
 800e446:	2300      	movs	r3, #0
 800e448:	4639      	mov	r1, r7
 800e44a:	220a      	movs	r2, #10
 800e44c:	4620      	mov	r0, r4
 800e44e:	f000 fe25 	bl	800f09c <__multadd>
 800e452:	9b02      	ldr	r3, [sp, #8]
 800e454:	2b00      	cmp	r3, #0
 800e456:	4607      	mov	r7, r0
 800e458:	f300 808e 	bgt.w	800e578 <_dtoa_r+0x990>
 800e45c:	9b06      	ldr	r3, [sp, #24]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	dc51      	bgt.n	800e506 <_dtoa_r+0x91e>
 800e462:	e089      	b.n	800e578 <_dtoa_r+0x990>
 800e464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e46a:	e74b      	b.n	800e304 <_dtoa_r+0x71c>
 800e46c:	9b03      	ldr	r3, [sp, #12]
 800e46e:	1e5e      	subs	r6, r3, #1
 800e470:	9b07      	ldr	r3, [sp, #28]
 800e472:	42b3      	cmp	r3, r6
 800e474:	bfbf      	itttt	lt
 800e476:	9b07      	ldrlt	r3, [sp, #28]
 800e478:	9607      	strlt	r6, [sp, #28]
 800e47a:	1af2      	sublt	r2, r6, r3
 800e47c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e47e:	bfb6      	itet	lt
 800e480:	189b      	addlt	r3, r3, r2
 800e482:	1b9e      	subge	r6, r3, r6
 800e484:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	bfb8      	it	lt
 800e48a:	2600      	movlt	r6, #0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bfb7      	itett	lt
 800e490:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e494:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e498:	1a9d      	sublt	r5, r3, r2
 800e49a:	2300      	movlt	r3, #0
 800e49c:	e734      	b.n	800e308 <_dtoa_r+0x720>
 800e49e:	9e07      	ldr	r6, [sp, #28]
 800e4a0:	9d04      	ldr	r5, [sp, #16]
 800e4a2:	9f08      	ldr	r7, [sp, #32]
 800e4a4:	e73b      	b.n	800e31e <_dtoa_r+0x736>
 800e4a6:	9a07      	ldr	r2, [sp, #28]
 800e4a8:	e767      	b.n	800e37a <_dtoa_r+0x792>
 800e4aa:	9b06      	ldr	r3, [sp, #24]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	dc18      	bgt.n	800e4e2 <_dtoa_r+0x8fa>
 800e4b0:	f1ba 0f00 	cmp.w	sl, #0
 800e4b4:	d115      	bne.n	800e4e2 <_dtoa_r+0x8fa>
 800e4b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4ba:	b993      	cbnz	r3, 800e4e2 <_dtoa_r+0x8fa>
 800e4bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4c0:	0d1b      	lsrs	r3, r3, #20
 800e4c2:	051b      	lsls	r3, r3, #20
 800e4c4:	b183      	cbz	r3, 800e4e8 <_dtoa_r+0x900>
 800e4c6:	9b04      	ldr	r3, [sp, #16]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	9b05      	ldr	r3, [sp, #20]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	9305      	str	r3, [sp, #20]
 800e4d2:	f04f 0801 	mov.w	r8, #1
 800e4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f47f af6a 	bne.w	800e3b2 <_dtoa_r+0x7ca>
 800e4de:	2001      	movs	r0, #1
 800e4e0:	e76f      	b.n	800e3c2 <_dtoa_r+0x7da>
 800e4e2:	f04f 0800 	mov.w	r8, #0
 800e4e6:	e7f6      	b.n	800e4d6 <_dtoa_r+0x8ee>
 800e4e8:	4698      	mov	r8, r3
 800e4ea:	e7f4      	b.n	800e4d6 <_dtoa_r+0x8ee>
 800e4ec:	f43f af7d 	beq.w	800e3ea <_dtoa_r+0x802>
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	301c      	adds	r0, #28
 800e4f4:	e772      	b.n	800e3dc <_dtoa_r+0x7f4>
 800e4f6:	9b03      	ldr	r3, [sp, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dc37      	bgt.n	800e56c <_dtoa_r+0x984>
 800e4fc:	9b06      	ldr	r3, [sp, #24]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	dd34      	ble.n	800e56c <_dtoa_r+0x984>
 800e502:	9b03      	ldr	r3, [sp, #12]
 800e504:	9302      	str	r3, [sp, #8]
 800e506:	9b02      	ldr	r3, [sp, #8]
 800e508:	b96b      	cbnz	r3, 800e526 <_dtoa_r+0x93e>
 800e50a:	4631      	mov	r1, r6
 800e50c:	2205      	movs	r2, #5
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 fdc4 	bl	800f09c <__multadd>
 800e514:	4601      	mov	r1, r0
 800e516:	4606      	mov	r6, r0
 800e518:	ee18 0a10 	vmov	r0, s16
 800e51c:	f001 f828 	bl	800f570 <__mcmp>
 800e520:	2800      	cmp	r0, #0
 800e522:	f73f adbb 	bgt.w	800e09c <_dtoa_r+0x4b4>
 800e526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e528:	9d01      	ldr	r5, [sp, #4]
 800e52a:	43db      	mvns	r3, r3
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	f04f 0800 	mov.w	r8, #0
 800e532:	4631      	mov	r1, r6
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fd8f 	bl	800f058 <_Bfree>
 800e53a:	2f00      	cmp	r7, #0
 800e53c:	f43f aea4 	beq.w	800e288 <_dtoa_r+0x6a0>
 800e540:	f1b8 0f00 	cmp.w	r8, #0
 800e544:	d005      	beq.n	800e552 <_dtoa_r+0x96a>
 800e546:	45b8      	cmp	r8, r7
 800e548:	d003      	beq.n	800e552 <_dtoa_r+0x96a>
 800e54a:	4641      	mov	r1, r8
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 fd83 	bl	800f058 <_Bfree>
 800e552:	4639      	mov	r1, r7
 800e554:	4620      	mov	r0, r4
 800e556:	f000 fd7f 	bl	800f058 <_Bfree>
 800e55a:	e695      	b.n	800e288 <_dtoa_r+0x6a0>
 800e55c:	2600      	movs	r6, #0
 800e55e:	4637      	mov	r7, r6
 800e560:	e7e1      	b.n	800e526 <_dtoa_r+0x93e>
 800e562:	9700      	str	r7, [sp, #0]
 800e564:	4637      	mov	r7, r6
 800e566:	e599      	b.n	800e09c <_dtoa_r+0x4b4>
 800e568:	40240000 	.word	0x40240000
 800e56c:	9b08      	ldr	r3, [sp, #32]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80ca 	beq.w	800e708 <_dtoa_r+0xb20>
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	9302      	str	r3, [sp, #8]
 800e578:	2d00      	cmp	r5, #0
 800e57a:	dd05      	ble.n	800e588 <_dtoa_r+0x9a0>
 800e57c:	4639      	mov	r1, r7
 800e57e:	462a      	mov	r2, r5
 800e580:	4620      	mov	r0, r4
 800e582:	f000 ff85 	bl	800f490 <__lshift>
 800e586:	4607      	mov	r7, r0
 800e588:	f1b8 0f00 	cmp.w	r8, #0
 800e58c:	d05b      	beq.n	800e646 <_dtoa_r+0xa5e>
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	4620      	mov	r0, r4
 800e592:	f000 fd21 	bl	800efd8 <_Balloc>
 800e596:	4605      	mov	r5, r0
 800e598:	b928      	cbnz	r0, 800e5a6 <_dtoa_r+0x9be>
 800e59a:	4b87      	ldr	r3, [pc, #540]	; (800e7b8 <_dtoa_r+0xbd0>)
 800e59c:	4602      	mov	r2, r0
 800e59e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e5a2:	f7ff bb3b 	b.w	800dc1c <_dtoa_r+0x34>
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	3202      	adds	r2, #2
 800e5aa:	0092      	lsls	r2, r2, #2
 800e5ac:	f107 010c 	add.w	r1, r7, #12
 800e5b0:	300c      	adds	r0, #12
 800e5b2:	f7fd f819 	bl	800b5e8 <memcpy>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 ff68 	bl	800f490 <__lshift>
 800e5c0:	9b01      	ldr	r3, [sp, #4]
 800e5c2:	f103 0901 	add.w	r9, r3, #1
 800e5c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	9305      	str	r3, [sp, #20]
 800e5ce:	f00a 0301 	and.w	r3, sl, #1
 800e5d2:	46b8      	mov	r8, r7
 800e5d4:	9304      	str	r3, [sp, #16]
 800e5d6:	4607      	mov	r7, r0
 800e5d8:	4631      	mov	r1, r6
 800e5da:	ee18 0a10 	vmov	r0, s16
 800e5de:	f7ff fa75 	bl	800dacc <quorem>
 800e5e2:	4641      	mov	r1, r8
 800e5e4:	9002      	str	r0, [sp, #8]
 800e5e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5ea:	ee18 0a10 	vmov	r0, s16
 800e5ee:	f000 ffbf 	bl	800f570 <__mcmp>
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	9003      	str	r0, [sp, #12]
 800e5f6:	4631      	mov	r1, r6
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f000 ffd5 	bl	800f5a8 <__mdiff>
 800e5fe:	68c2      	ldr	r2, [r0, #12]
 800e600:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800e604:	4605      	mov	r5, r0
 800e606:	bb02      	cbnz	r2, 800e64a <_dtoa_r+0xa62>
 800e608:	4601      	mov	r1, r0
 800e60a:	ee18 0a10 	vmov	r0, s16
 800e60e:	f000 ffaf 	bl	800f570 <__mcmp>
 800e612:	4602      	mov	r2, r0
 800e614:	4629      	mov	r1, r5
 800e616:	4620      	mov	r0, r4
 800e618:	9207      	str	r2, [sp, #28]
 800e61a:	f000 fd1d 	bl	800f058 <_Bfree>
 800e61e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e622:	ea43 0102 	orr.w	r1, r3, r2
 800e626:	9b04      	ldr	r3, [sp, #16]
 800e628:	430b      	orrs	r3, r1
 800e62a:	464d      	mov	r5, r9
 800e62c:	d10f      	bne.n	800e64e <_dtoa_r+0xa66>
 800e62e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e632:	d02a      	beq.n	800e68a <_dtoa_r+0xaa2>
 800e634:	9b03      	ldr	r3, [sp, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	dd02      	ble.n	800e640 <_dtoa_r+0xa58>
 800e63a:	9b02      	ldr	r3, [sp, #8]
 800e63c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e640:	f88b a000 	strb.w	sl, [fp]
 800e644:	e775      	b.n	800e532 <_dtoa_r+0x94a>
 800e646:	4638      	mov	r0, r7
 800e648:	e7ba      	b.n	800e5c0 <_dtoa_r+0x9d8>
 800e64a:	2201      	movs	r2, #1
 800e64c:	e7e2      	b.n	800e614 <_dtoa_r+0xa2c>
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	db04      	blt.n	800e65e <_dtoa_r+0xa76>
 800e654:	9906      	ldr	r1, [sp, #24]
 800e656:	430b      	orrs	r3, r1
 800e658:	9904      	ldr	r1, [sp, #16]
 800e65a:	430b      	orrs	r3, r1
 800e65c:	d122      	bne.n	800e6a4 <_dtoa_r+0xabc>
 800e65e:	2a00      	cmp	r2, #0
 800e660:	ddee      	ble.n	800e640 <_dtoa_r+0xa58>
 800e662:	ee18 1a10 	vmov	r1, s16
 800e666:	2201      	movs	r2, #1
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 ff11 	bl	800f490 <__lshift>
 800e66e:	4631      	mov	r1, r6
 800e670:	ee08 0a10 	vmov	s16, r0
 800e674:	f000 ff7c 	bl	800f570 <__mcmp>
 800e678:	2800      	cmp	r0, #0
 800e67a:	dc03      	bgt.n	800e684 <_dtoa_r+0xa9c>
 800e67c:	d1e0      	bne.n	800e640 <_dtoa_r+0xa58>
 800e67e:	f01a 0f01 	tst.w	sl, #1
 800e682:	d0dd      	beq.n	800e640 <_dtoa_r+0xa58>
 800e684:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e688:	d1d7      	bne.n	800e63a <_dtoa_r+0xa52>
 800e68a:	2339      	movs	r3, #57	; 0x39
 800e68c:	f88b 3000 	strb.w	r3, [fp]
 800e690:	462b      	mov	r3, r5
 800e692:	461d      	mov	r5, r3
 800e694:	3b01      	subs	r3, #1
 800e696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e69a:	2a39      	cmp	r2, #57	; 0x39
 800e69c:	d071      	beq.n	800e782 <_dtoa_r+0xb9a>
 800e69e:	3201      	adds	r2, #1
 800e6a0:	701a      	strb	r2, [r3, #0]
 800e6a2:	e746      	b.n	800e532 <_dtoa_r+0x94a>
 800e6a4:	2a00      	cmp	r2, #0
 800e6a6:	dd07      	ble.n	800e6b8 <_dtoa_r+0xad0>
 800e6a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e6ac:	d0ed      	beq.n	800e68a <_dtoa_r+0xaa2>
 800e6ae:	f10a 0301 	add.w	r3, sl, #1
 800e6b2:	f88b 3000 	strb.w	r3, [fp]
 800e6b6:	e73c      	b.n	800e532 <_dtoa_r+0x94a>
 800e6b8:	9b05      	ldr	r3, [sp, #20]
 800e6ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e6be:	4599      	cmp	r9, r3
 800e6c0:	d047      	beq.n	800e752 <_dtoa_r+0xb6a>
 800e6c2:	ee18 1a10 	vmov	r1, s16
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	220a      	movs	r2, #10
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 fce6 	bl	800f09c <__multadd>
 800e6d0:	45b8      	cmp	r8, r7
 800e6d2:	ee08 0a10 	vmov	s16, r0
 800e6d6:	f04f 0300 	mov.w	r3, #0
 800e6da:	f04f 020a 	mov.w	r2, #10
 800e6de:	4641      	mov	r1, r8
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	d106      	bne.n	800e6f2 <_dtoa_r+0xb0a>
 800e6e4:	f000 fcda 	bl	800f09c <__multadd>
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4607      	mov	r7, r0
 800e6ec:	f109 0901 	add.w	r9, r9, #1
 800e6f0:	e772      	b.n	800e5d8 <_dtoa_r+0x9f0>
 800e6f2:	f000 fcd3 	bl	800f09c <__multadd>
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	4680      	mov	r8, r0
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	220a      	movs	r2, #10
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 fccc 	bl	800f09c <__multadd>
 800e704:	4607      	mov	r7, r0
 800e706:	e7f1      	b.n	800e6ec <_dtoa_r+0xb04>
 800e708:	9b03      	ldr	r3, [sp, #12]
 800e70a:	9302      	str	r3, [sp, #8]
 800e70c:	9d01      	ldr	r5, [sp, #4]
 800e70e:	ee18 0a10 	vmov	r0, s16
 800e712:	4631      	mov	r1, r6
 800e714:	f7ff f9da 	bl	800dacc <quorem>
 800e718:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e71c:	9b01      	ldr	r3, [sp, #4]
 800e71e:	f805 ab01 	strb.w	sl, [r5], #1
 800e722:	1aea      	subs	r2, r5, r3
 800e724:	9b02      	ldr	r3, [sp, #8]
 800e726:	4293      	cmp	r3, r2
 800e728:	dd09      	ble.n	800e73e <_dtoa_r+0xb56>
 800e72a:	ee18 1a10 	vmov	r1, s16
 800e72e:	2300      	movs	r3, #0
 800e730:	220a      	movs	r2, #10
 800e732:	4620      	mov	r0, r4
 800e734:	f000 fcb2 	bl	800f09c <__multadd>
 800e738:	ee08 0a10 	vmov	s16, r0
 800e73c:	e7e7      	b.n	800e70e <_dtoa_r+0xb26>
 800e73e:	9b02      	ldr	r3, [sp, #8]
 800e740:	2b00      	cmp	r3, #0
 800e742:	bfc8      	it	gt
 800e744:	461d      	movgt	r5, r3
 800e746:	9b01      	ldr	r3, [sp, #4]
 800e748:	bfd8      	it	le
 800e74a:	2501      	movle	r5, #1
 800e74c:	441d      	add	r5, r3
 800e74e:	f04f 0800 	mov.w	r8, #0
 800e752:	ee18 1a10 	vmov	r1, s16
 800e756:	2201      	movs	r2, #1
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 fe99 	bl	800f490 <__lshift>
 800e75e:	4631      	mov	r1, r6
 800e760:	ee08 0a10 	vmov	s16, r0
 800e764:	f000 ff04 	bl	800f570 <__mcmp>
 800e768:	2800      	cmp	r0, #0
 800e76a:	dc91      	bgt.n	800e690 <_dtoa_r+0xaa8>
 800e76c:	d102      	bne.n	800e774 <_dtoa_r+0xb8c>
 800e76e:	f01a 0f01 	tst.w	sl, #1
 800e772:	d18d      	bne.n	800e690 <_dtoa_r+0xaa8>
 800e774:	462b      	mov	r3, r5
 800e776:	461d      	mov	r5, r3
 800e778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e77c:	2a30      	cmp	r2, #48	; 0x30
 800e77e:	d0fa      	beq.n	800e776 <_dtoa_r+0xb8e>
 800e780:	e6d7      	b.n	800e532 <_dtoa_r+0x94a>
 800e782:	9a01      	ldr	r2, [sp, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d184      	bne.n	800e692 <_dtoa_r+0xaaa>
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	3301      	adds	r3, #1
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	2331      	movs	r3, #49	; 0x31
 800e790:	7013      	strb	r3, [r2, #0]
 800e792:	e6ce      	b.n	800e532 <_dtoa_r+0x94a>
 800e794:	4b09      	ldr	r3, [pc, #36]	; (800e7bc <_dtoa_r+0xbd4>)
 800e796:	f7ff ba95 	b.w	800dcc4 <_dtoa_r+0xdc>
 800e79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f47f aa6e 	bne.w	800dc7e <_dtoa_r+0x96>
 800e7a2:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <_dtoa_r+0xbd8>)
 800e7a4:	f7ff ba8e 	b.w	800dcc4 <_dtoa_r+0xdc>
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	dcae      	bgt.n	800e70c <_dtoa_r+0xb24>
 800e7ae:	9b06      	ldr	r3, [sp, #24]
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	f73f aea8 	bgt.w	800e506 <_dtoa_r+0x91e>
 800e7b6:	e7a9      	b.n	800e70c <_dtoa_r+0xb24>
 800e7b8:	08010f81 	.word	0x08010f81
 800e7bc:	08010ce9 	.word	0x08010ce9
 800e7c0:	08010f19 	.word	0x08010f19

0800e7c4 <rshift>:
 800e7c4:	6903      	ldr	r3, [r0, #16]
 800e7c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7d2:	f100 0414 	add.w	r4, r0, #20
 800e7d6:	dd45      	ble.n	800e864 <rshift+0xa0>
 800e7d8:	f011 011f 	ands.w	r1, r1, #31
 800e7dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7e4:	d10c      	bne.n	800e800 <rshift+0x3c>
 800e7e6:	f100 0710 	add.w	r7, r0, #16
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	42b1      	cmp	r1, r6
 800e7ee:	d334      	bcc.n	800e85a <rshift+0x96>
 800e7f0:	1a9b      	subs	r3, r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	1eea      	subs	r2, r5, #3
 800e7f6:	4296      	cmp	r6, r2
 800e7f8:	bf38      	it	cc
 800e7fa:	2300      	movcc	r3, #0
 800e7fc:	4423      	add	r3, r4
 800e7fe:	e015      	b.n	800e82c <rshift+0x68>
 800e800:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e804:	f1c1 0820 	rsb	r8, r1, #32
 800e808:	40cf      	lsrs	r7, r1
 800e80a:	f105 0e04 	add.w	lr, r5, #4
 800e80e:	46a1      	mov	r9, r4
 800e810:	4576      	cmp	r6, lr
 800e812:	46f4      	mov	ip, lr
 800e814:	d815      	bhi.n	800e842 <rshift+0x7e>
 800e816:	1a9a      	subs	r2, r3, r2
 800e818:	0092      	lsls	r2, r2, #2
 800e81a:	3a04      	subs	r2, #4
 800e81c:	3501      	adds	r5, #1
 800e81e:	42ae      	cmp	r6, r5
 800e820:	bf38      	it	cc
 800e822:	2200      	movcc	r2, #0
 800e824:	18a3      	adds	r3, r4, r2
 800e826:	50a7      	str	r7, [r4, r2]
 800e828:	b107      	cbz	r7, 800e82c <rshift+0x68>
 800e82a:	3304      	adds	r3, #4
 800e82c:	1b1a      	subs	r2, r3, r4
 800e82e:	42a3      	cmp	r3, r4
 800e830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e834:	bf08      	it	eq
 800e836:	2300      	moveq	r3, #0
 800e838:	6102      	str	r2, [r0, #16]
 800e83a:	bf08      	it	eq
 800e83c:	6143      	streq	r3, [r0, #20]
 800e83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e842:	f8dc c000 	ldr.w	ip, [ip]
 800e846:	fa0c fc08 	lsl.w	ip, ip, r8
 800e84a:	ea4c 0707 	orr.w	r7, ip, r7
 800e84e:	f849 7b04 	str.w	r7, [r9], #4
 800e852:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e856:	40cf      	lsrs	r7, r1
 800e858:	e7da      	b.n	800e810 <rshift+0x4c>
 800e85a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e85e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e862:	e7c3      	b.n	800e7ec <rshift+0x28>
 800e864:	4623      	mov	r3, r4
 800e866:	e7e1      	b.n	800e82c <rshift+0x68>

0800e868 <__hexdig_fun>:
 800e868:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e86c:	2b09      	cmp	r3, #9
 800e86e:	d802      	bhi.n	800e876 <__hexdig_fun+0xe>
 800e870:	3820      	subs	r0, #32
 800e872:	b2c0      	uxtb	r0, r0
 800e874:	4770      	bx	lr
 800e876:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e87a:	2b05      	cmp	r3, #5
 800e87c:	d801      	bhi.n	800e882 <__hexdig_fun+0x1a>
 800e87e:	3847      	subs	r0, #71	; 0x47
 800e880:	e7f7      	b.n	800e872 <__hexdig_fun+0xa>
 800e882:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e886:	2b05      	cmp	r3, #5
 800e888:	d801      	bhi.n	800e88e <__hexdig_fun+0x26>
 800e88a:	3827      	subs	r0, #39	; 0x27
 800e88c:	e7f1      	b.n	800e872 <__hexdig_fun+0xa>
 800e88e:	2000      	movs	r0, #0
 800e890:	4770      	bx	lr
	...

0800e894 <__gethex>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	ed2d 8b02 	vpush	{d8}
 800e89c:	b089      	sub	sp, #36	; 0x24
 800e89e:	ee08 0a10 	vmov	s16, r0
 800e8a2:	9304      	str	r3, [sp, #16]
 800e8a4:	4bb4      	ldr	r3, [pc, #720]	; (800eb78 <__gethex+0x2e4>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	468b      	mov	fp, r1
 800e8ae:	4690      	mov	r8, r2
 800e8b0:	f7f1 fd10 	bl	80002d4 <strlen>
 800e8b4:	9b01      	ldr	r3, [sp, #4]
 800e8b6:	f8db 2000 	ldr.w	r2, [fp]
 800e8ba:	4403      	add	r3, r0
 800e8bc:	4682      	mov	sl, r0
 800e8be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e8c2:	9305      	str	r3, [sp, #20]
 800e8c4:	1c93      	adds	r3, r2, #2
 800e8c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e8ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e8ce:	32fe      	adds	r2, #254	; 0xfe
 800e8d0:	18d1      	adds	r1, r2, r3
 800e8d2:	461f      	mov	r7, r3
 800e8d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8d8:	9100      	str	r1, [sp, #0]
 800e8da:	2830      	cmp	r0, #48	; 0x30
 800e8dc:	d0f8      	beq.n	800e8d0 <__gethex+0x3c>
 800e8de:	f7ff ffc3 	bl	800e868 <__hexdig_fun>
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d13a      	bne.n	800e95e <__gethex+0xca>
 800e8e8:	9901      	ldr	r1, [sp, #4]
 800e8ea:	4652      	mov	r2, sl
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	f001 fa2f 	bl	800fd50 <strncmp>
 800e8f2:	4605      	mov	r5, r0
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d168      	bne.n	800e9ca <__gethex+0x136>
 800e8f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e8fc:	eb07 060a 	add.w	r6, r7, sl
 800e900:	f7ff ffb2 	bl	800e868 <__hexdig_fun>
 800e904:	2800      	cmp	r0, #0
 800e906:	d062      	beq.n	800e9ce <__gethex+0x13a>
 800e908:	4633      	mov	r3, r6
 800e90a:	7818      	ldrb	r0, [r3, #0]
 800e90c:	2830      	cmp	r0, #48	; 0x30
 800e90e:	461f      	mov	r7, r3
 800e910:	f103 0301 	add.w	r3, r3, #1
 800e914:	d0f9      	beq.n	800e90a <__gethex+0x76>
 800e916:	f7ff ffa7 	bl	800e868 <__hexdig_fun>
 800e91a:	2301      	movs	r3, #1
 800e91c:	fab0 f480 	clz	r4, r0
 800e920:	0964      	lsrs	r4, r4, #5
 800e922:	4635      	mov	r5, r6
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	463a      	mov	r2, r7
 800e928:	4616      	mov	r6, r2
 800e92a:	3201      	adds	r2, #1
 800e92c:	7830      	ldrb	r0, [r6, #0]
 800e92e:	f7ff ff9b 	bl	800e868 <__hexdig_fun>
 800e932:	2800      	cmp	r0, #0
 800e934:	d1f8      	bne.n	800e928 <__gethex+0x94>
 800e936:	9901      	ldr	r1, [sp, #4]
 800e938:	4652      	mov	r2, sl
 800e93a:	4630      	mov	r0, r6
 800e93c:	f001 fa08 	bl	800fd50 <strncmp>
 800e940:	b980      	cbnz	r0, 800e964 <__gethex+0xd0>
 800e942:	b94d      	cbnz	r5, 800e958 <__gethex+0xc4>
 800e944:	eb06 050a 	add.w	r5, r6, sl
 800e948:	462a      	mov	r2, r5
 800e94a:	4616      	mov	r6, r2
 800e94c:	3201      	adds	r2, #1
 800e94e:	7830      	ldrb	r0, [r6, #0]
 800e950:	f7ff ff8a 	bl	800e868 <__hexdig_fun>
 800e954:	2800      	cmp	r0, #0
 800e956:	d1f8      	bne.n	800e94a <__gethex+0xb6>
 800e958:	1bad      	subs	r5, r5, r6
 800e95a:	00ad      	lsls	r5, r5, #2
 800e95c:	e004      	b.n	800e968 <__gethex+0xd4>
 800e95e:	2400      	movs	r4, #0
 800e960:	4625      	mov	r5, r4
 800e962:	e7e0      	b.n	800e926 <__gethex+0x92>
 800e964:	2d00      	cmp	r5, #0
 800e966:	d1f7      	bne.n	800e958 <__gethex+0xc4>
 800e968:	7833      	ldrb	r3, [r6, #0]
 800e96a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e96e:	2b50      	cmp	r3, #80	; 0x50
 800e970:	d13b      	bne.n	800e9ea <__gethex+0x156>
 800e972:	7873      	ldrb	r3, [r6, #1]
 800e974:	2b2b      	cmp	r3, #43	; 0x2b
 800e976:	d02c      	beq.n	800e9d2 <__gethex+0x13e>
 800e978:	2b2d      	cmp	r3, #45	; 0x2d
 800e97a:	d02e      	beq.n	800e9da <__gethex+0x146>
 800e97c:	1c71      	adds	r1, r6, #1
 800e97e:	f04f 0900 	mov.w	r9, #0
 800e982:	7808      	ldrb	r0, [r1, #0]
 800e984:	f7ff ff70 	bl	800e868 <__hexdig_fun>
 800e988:	1e43      	subs	r3, r0, #1
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	2b18      	cmp	r3, #24
 800e98e:	d82c      	bhi.n	800e9ea <__gethex+0x156>
 800e990:	f1a0 0210 	sub.w	r2, r0, #16
 800e994:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e998:	f7ff ff66 	bl	800e868 <__hexdig_fun>
 800e99c:	1e43      	subs	r3, r0, #1
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b18      	cmp	r3, #24
 800e9a2:	d91d      	bls.n	800e9e0 <__gethex+0x14c>
 800e9a4:	f1b9 0f00 	cmp.w	r9, #0
 800e9a8:	d000      	beq.n	800e9ac <__gethex+0x118>
 800e9aa:	4252      	negs	r2, r2
 800e9ac:	4415      	add	r5, r2
 800e9ae:	f8cb 1000 	str.w	r1, [fp]
 800e9b2:	b1e4      	cbz	r4, 800e9ee <__gethex+0x15a>
 800e9b4:	9b00      	ldr	r3, [sp, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	bf14      	ite	ne
 800e9ba:	2700      	movne	r7, #0
 800e9bc:	2706      	moveq	r7, #6
 800e9be:	4638      	mov	r0, r7
 800e9c0:	b009      	add	sp, #36	; 0x24
 800e9c2:	ecbd 8b02 	vpop	{d8}
 800e9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ca:	463e      	mov	r6, r7
 800e9cc:	4625      	mov	r5, r4
 800e9ce:	2401      	movs	r4, #1
 800e9d0:	e7ca      	b.n	800e968 <__gethex+0xd4>
 800e9d2:	f04f 0900 	mov.w	r9, #0
 800e9d6:	1cb1      	adds	r1, r6, #2
 800e9d8:	e7d3      	b.n	800e982 <__gethex+0xee>
 800e9da:	f04f 0901 	mov.w	r9, #1
 800e9de:	e7fa      	b.n	800e9d6 <__gethex+0x142>
 800e9e0:	230a      	movs	r3, #10
 800e9e2:	fb03 0202 	mla	r2, r3, r2, r0
 800e9e6:	3a10      	subs	r2, #16
 800e9e8:	e7d4      	b.n	800e994 <__gethex+0x100>
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	e7df      	b.n	800e9ae <__gethex+0x11a>
 800e9ee:	1bf3      	subs	r3, r6, r7
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	2b07      	cmp	r3, #7
 800e9f6:	dc0b      	bgt.n	800ea10 <__gethex+0x17c>
 800e9f8:	ee18 0a10 	vmov	r0, s16
 800e9fc:	f000 faec 	bl	800efd8 <_Balloc>
 800ea00:	4604      	mov	r4, r0
 800ea02:	b940      	cbnz	r0, 800ea16 <__gethex+0x182>
 800ea04:	4b5d      	ldr	r3, [pc, #372]	; (800eb7c <__gethex+0x2e8>)
 800ea06:	4602      	mov	r2, r0
 800ea08:	21de      	movs	r1, #222	; 0xde
 800ea0a:	485d      	ldr	r0, [pc, #372]	; (800eb80 <__gethex+0x2ec>)
 800ea0c:	f7ff f830 	bl	800da70 <__assert_func>
 800ea10:	3101      	adds	r1, #1
 800ea12:	105b      	asrs	r3, r3, #1
 800ea14:	e7ee      	b.n	800e9f4 <__gethex+0x160>
 800ea16:	f100 0914 	add.w	r9, r0, #20
 800ea1a:	f04f 0b00 	mov.w	fp, #0
 800ea1e:	f1ca 0301 	rsb	r3, sl, #1
 800ea22:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea26:	f8cd b000 	str.w	fp, [sp]
 800ea2a:	9306      	str	r3, [sp, #24]
 800ea2c:	42b7      	cmp	r7, r6
 800ea2e:	d340      	bcc.n	800eab2 <__gethex+0x21e>
 800ea30:	9802      	ldr	r0, [sp, #8]
 800ea32:	9b00      	ldr	r3, [sp, #0]
 800ea34:	f840 3b04 	str.w	r3, [r0], #4
 800ea38:	eba0 0009 	sub.w	r0, r0, r9
 800ea3c:	1080      	asrs	r0, r0, #2
 800ea3e:	0146      	lsls	r6, r0, #5
 800ea40:	6120      	str	r0, [r4, #16]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f000 fbba 	bl	800f1bc <__hi0bits>
 800ea48:	1a30      	subs	r0, r6, r0
 800ea4a:	f8d8 6000 	ldr.w	r6, [r8]
 800ea4e:	42b0      	cmp	r0, r6
 800ea50:	dd63      	ble.n	800eb1a <__gethex+0x286>
 800ea52:	1b87      	subs	r7, r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 ff5e 	bl	800f918 <__any_on>
 800ea5c:	4682      	mov	sl, r0
 800ea5e:	b1a8      	cbz	r0, 800ea8c <__gethex+0x1f8>
 800ea60:	1e7b      	subs	r3, r7, #1
 800ea62:	1159      	asrs	r1, r3, #5
 800ea64:	f003 021f 	and.w	r2, r3, #31
 800ea68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea6c:	f04f 0a01 	mov.w	sl, #1
 800ea70:	fa0a f202 	lsl.w	r2, sl, r2
 800ea74:	420a      	tst	r2, r1
 800ea76:	d009      	beq.n	800ea8c <__gethex+0x1f8>
 800ea78:	4553      	cmp	r3, sl
 800ea7a:	dd05      	ble.n	800ea88 <__gethex+0x1f4>
 800ea7c:	1eb9      	subs	r1, r7, #2
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 ff4a 	bl	800f918 <__any_on>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d145      	bne.n	800eb14 <__gethex+0x280>
 800ea88:	f04f 0a02 	mov.w	sl, #2
 800ea8c:	4639      	mov	r1, r7
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f7ff fe98 	bl	800e7c4 <rshift>
 800ea94:	443d      	add	r5, r7
 800ea96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea9a:	42ab      	cmp	r3, r5
 800ea9c:	da4c      	bge.n	800eb38 <__gethex+0x2a4>
 800ea9e:	ee18 0a10 	vmov	r0, s16
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	f000 fad8 	bl	800f058 <_Bfree>
 800eaa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaaa:	2300      	movs	r3, #0
 800eaac:	6013      	str	r3, [r2, #0]
 800eaae:	27a3      	movs	r7, #163	; 0xa3
 800eab0:	e785      	b.n	800e9be <__gethex+0x12a>
 800eab2:	1e73      	subs	r3, r6, #1
 800eab4:	9a05      	ldr	r2, [sp, #20]
 800eab6:	9303      	str	r3, [sp, #12]
 800eab8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d019      	beq.n	800eaf4 <__gethex+0x260>
 800eac0:	f1bb 0f20 	cmp.w	fp, #32
 800eac4:	d107      	bne.n	800ead6 <__gethex+0x242>
 800eac6:	9b02      	ldr	r3, [sp, #8]
 800eac8:	9a00      	ldr	r2, [sp, #0]
 800eaca:	f843 2b04 	str.w	r2, [r3], #4
 800eace:	9302      	str	r3, [sp, #8]
 800ead0:	2300      	movs	r3, #0
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	469b      	mov	fp, r3
 800ead6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eada:	f7ff fec5 	bl	800e868 <__hexdig_fun>
 800eade:	9b00      	ldr	r3, [sp, #0]
 800eae0:	f000 000f 	and.w	r0, r0, #15
 800eae4:	fa00 f00b 	lsl.w	r0, r0, fp
 800eae8:	4303      	orrs	r3, r0
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	f10b 0b04 	add.w	fp, fp, #4
 800eaf0:	9b03      	ldr	r3, [sp, #12]
 800eaf2:	e00d      	b.n	800eb10 <__gethex+0x27c>
 800eaf4:	9b03      	ldr	r3, [sp, #12]
 800eaf6:	9a06      	ldr	r2, [sp, #24]
 800eaf8:	4413      	add	r3, r2
 800eafa:	42bb      	cmp	r3, r7
 800eafc:	d3e0      	bcc.n	800eac0 <__gethex+0x22c>
 800eafe:	4618      	mov	r0, r3
 800eb00:	9901      	ldr	r1, [sp, #4]
 800eb02:	9307      	str	r3, [sp, #28]
 800eb04:	4652      	mov	r2, sl
 800eb06:	f001 f923 	bl	800fd50 <strncmp>
 800eb0a:	9b07      	ldr	r3, [sp, #28]
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1d7      	bne.n	800eac0 <__gethex+0x22c>
 800eb10:	461e      	mov	r6, r3
 800eb12:	e78b      	b.n	800ea2c <__gethex+0x198>
 800eb14:	f04f 0a03 	mov.w	sl, #3
 800eb18:	e7b8      	b.n	800ea8c <__gethex+0x1f8>
 800eb1a:	da0a      	bge.n	800eb32 <__gethex+0x29e>
 800eb1c:	1a37      	subs	r7, r6, r0
 800eb1e:	4621      	mov	r1, r4
 800eb20:	ee18 0a10 	vmov	r0, s16
 800eb24:	463a      	mov	r2, r7
 800eb26:	f000 fcb3 	bl	800f490 <__lshift>
 800eb2a:	1bed      	subs	r5, r5, r7
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	f100 0914 	add.w	r9, r0, #20
 800eb32:	f04f 0a00 	mov.w	sl, #0
 800eb36:	e7ae      	b.n	800ea96 <__gethex+0x202>
 800eb38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb3c:	42a8      	cmp	r0, r5
 800eb3e:	dd72      	ble.n	800ec26 <__gethex+0x392>
 800eb40:	1b45      	subs	r5, r0, r5
 800eb42:	42ae      	cmp	r6, r5
 800eb44:	dc36      	bgt.n	800ebb4 <__gethex+0x320>
 800eb46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d02a      	beq.n	800eba4 <__gethex+0x310>
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	d02c      	beq.n	800ebac <__gethex+0x318>
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d11c      	bne.n	800eb90 <__gethex+0x2fc>
 800eb56:	42ae      	cmp	r6, r5
 800eb58:	d11a      	bne.n	800eb90 <__gethex+0x2fc>
 800eb5a:	2e01      	cmp	r6, #1
 800eb5c:	d112      	bne.n	800eb84 <__gethex+0x2f0>
 800eb5e:	9a04      	ldr	r2, [sp, #16]
 800eb60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	2301      	movs	r3, #1
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	f8c9 3000 	str.w	r3, [r9]
 800eb6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb70:	2762      	movs	r7, #98	; 0x62
 800eb72:	601c      	str	r4, [r3, #0]
 800eb74:	e723      	b.n	800e9be <__gethex+0x12a>
 800eb76:	bf00      	nop
 800eb78:	08010ff8 	.word	0x08010ff8
 800eb7c:	08010f81 	.word	0x08010f81
 800eb80:	08010f92 	.word	0x08010f92
 800eb84:	1e71      	subs	r1, r6, #1
 800eb86:	4620      	mov	r0, r4
 800eb88:	f000 fec6 	bl	800f918 <__any_on>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d1e6      	bne.n	800eb5e <__gethex+0x2ca>
 800eb90:	ee18 0a10 	vmov	r0, s16
 800eb94:	4621      	mov	r1, r4
 800eb96:	f000 fa5f 	bl	800f058 <_Bfree>
 800eb9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	6013      	str	r3, [r2, #0]
 800eba0:	2750      	movs	r7, #80	; 0x50
 800eba2:	e70c      	b.n	800e9be <__gethex+0x12a>
 800eba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1f2      	bne.n	800eb90 <__gethex+0x2fc>
 800ebaa:	e7d8      	b.n	800eb5e <__gethex+0x2ca>
 800ebac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1d5      	bne.n	800eb5e <__gethex+0x2ca>
 800ebb2:	e7ed      	b.n	800eb90 <__gethex+0x2fc>
 800ebb4:	1e6f      	subs	r7, r5, #1
 800ebb6:	f1ba 0f00 	cmp.w	sl, #0
 800ebba:	d131      	bne.n	800ec20 <__gethex+0x38c>
 800ebbc:	b127      	cbz	r7, 800ebc8 <__gethex+0x334>
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 fea9 	bl	800f918 <__any_on>
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	117b      	asrs	r3, r7, #5
 800ebca:	2101      	movs	r1, #1
 800ebcc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ebd0:	f007 071f 	and.w	r7, r7, #31
 800ebd4:	fa01 f707 	lsl.w	r7, r1, r7
 800ebd8:	421f      	tst	r7, r3
 800ebda:	4629      	mov	r1, r5
 800ebdc:	4620      	mov	r0, r4
 800ebde:	bf18      	it	ne
 800ebe0:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebe4:	1b76      	subs	r6, r6, r5
 800ebe6:	f7ff fded 	bl	800e7c4 <rshift>
 800ebea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ebee:	2702      	movs	r7, #2
 800ebf0:	f1ba 0f00 	cmp.w	sl, #0
 800ebf4:	d048      	beq.n	800ec88 <__gethex+0x3f4>
 800ebf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d015      	beq.n	800ec2a <__gethex+0x396>
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d017      	beq.n	800ec32 <__gethex+0x39e>
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d109      	bne.n	800ec1a <__gethex+0x386>
 800ec06:	f01a 0f02 	tst.w	sl, #2
 800ec0a:	d006      	beq.n	800ec1a <__gethex+0x386>
 800ec0c:	f8d9 0000 	ldr.w	r0, [r9]
 800ec10:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec14:	f01a 0f01 	tst.w	sl, #1
 800ec18:	d10e      	bne.n	800ec38 <__gethex+0x3a4>
 800ec1a:	f047 0710 	orr.w	r7, r7, #16
 800ec1e:	e033      	b.n	800ec88 <__gethex+0x3f4>
 800ec20:	f04f 0a01 	mov.w	sl, #1
 800ec24:	e7d0      	b.n	800ebc8 <__gethex+0x334>
 800ec26:	2701      	movs	r7, #1
 800ec28:	e7e2      	b.n	800ebf0 <__gethex+0x35c>
 800ec2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec2c:	f1c3 0301 	rsb	r3, r3, #1
 800ec30:	9315      	str	r3, [sp, #84]	; 0x54
 800ec32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d0f0      	beq.n	800ec1a <__gethex+0x386>
 800ec38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec3c:	f104 0314 	add.w	r3, r4, #20
 800ec40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec48:	f04f 0c00 	mov.w	ip, #0
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec52:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ec56:	d01c      	beq.n	800ec92 <__gethex+0x3fe>
 800ec58:	3201      	adds	r2, #1
 800ec5a:	6002      	str	r2, [r0, #0]
 800ec5c:	2f02      	cmp	r7, #2
 800ec5e:	f104 0314 	add.w	r3, r4, #20
 800ec62:	d13f      	bne.n	800ece4 <__gethex+0x450>
 800ec64:	f8d8 2000 	ldr.w	r2, [r8]
 800ec68:	3a01      	subs	r2, #1
 800ec6a:	42b2      	cmp	r2, r6
 800ec6c:	d10a      	bne.n	800ec84 <__gethex+0x3f0>
 800ec6e:	1171      	asrs	r1, r6, #5
 800ec70:	2201      	movs	r2, #1
 800ec72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec76:	f006 061f 	and.w	r6, r6, #31
 800ec7a:	fa02 f606 	lsl.w	r6, r2, r6
 800ec7e:	421e      	tst	r6, r3
 800ec80:	bf18      	it	ne
 800ec82:	4617      	movne	r7, r2
 800ec84:	f047 0720 	orr.w	r7, r7, #32
 800ec88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec8a:	601c      	str	r4, [r3, #0]
 800ec8c:	9b04      	ldr	r3, [sp, #16]
 800ec8e:	601d      	str	r5, [r3, #0]
 800ec90:	e695      	b.n	800e9be <__gethex+0x12a>
 800ec92:	4299      	cmp	r1, r3
 800ec94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec98:	d8d8      	bhi.n	800ec4c <__gethex+0x3b8>
 800ec9a:	68a3      	ldr	r3, [r4, #8]
 800ec9c:	459b      	cmp	fp, r3
 800ec9e:	db19      	blt.n	800ecd4 <__gethex+0x440>
 800eca0:	6861      	ldr	r1, [r4, #4]
 800eca2:	ee18 0a10 	vmov	r0, s16
 800eca6:	3101      	adds	r1, #1
 800eca8:	f000 f996 	bl	800efd8 <_Balloc>
 800ecac:	4681      	mov	r9, r0
 800ecae:	b918      	cbnz	r0, 800ecb8 <__gethex+0x424>
 800ecb0:	4b1a      	ldr	r3, [pc, #104]	; (800ed1c <__gethex+0x488>)
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	2184      	movs	r1, #132	; 0x84
 800ecb6:	e6a8      	b.n	800ea0a <__gethex+0x176>
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	3202      	adds	r2, #2
 800ecbc:	f104 010c 	add.w	r1, r4, #12
 800ecc0:	0092      	lsls	r2, r2, #2
 800ecc2:	300c      	adds	r0, #12
 800ecc4:	f7fc fc90 	bl	800b5e8 <memcpy>
 800ecc8:	4621      	mov	r1, r4
 800ecca:	ee18 0a10 	vmov	r0, s16
 800ecce:	f000 f9c3 	bl	800f058 <_Bfree>
 800ecd2:	464c      	mov	r4, r9
 800ecd4:	6923      	ldr	r3, [r4, #16]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecdc:	6122      	str	r2, [r4, #16]
 800ecde:	2201      	movs	r2, #1
 800ece0:	615a      	str	r2, [r3, #20]
 800ece2:	e7bb      	b.n	800ec5c <__gethex+0x3c8>
 800ece4:	6922      	ldr	r2, [r4, #16]
 800ece6:	455a      	cmp	r2, fp
 800ece8:	dd0b      	ble.n	800ed02 <__gethex+0x46e>
 800ecea:	2101      	movs	r1, #1
 800ecec:	4620      	mov	r0, r4
 800ecee:	f7ff fd69 	bl	800e7c4 <rshift>
 800ecf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecf6:	3501      	adds	r5, #1
 800ecf8:	42ab      	cmp	r3, r5
 800ecfa:	f6ff aed0 	blt.w	800ea9e <__gethex+0x20a>
 800ecfe:	2701      	movs	r7, #1
 800ed00:	e7c0      	b.n	800ec84 <__gethex+0x3f0>
 800ed02:	f016 061f 	ands.w	r6, r6, #31
 800ed06:	d0fa      	beq.n	800ecfe <__gethex+0x46a>
 800ed08:	4453      	add	r3, sl
 800ed0a:	f1c6 0620 	rsb	r6, r6, #32
 800ed0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed12:	f000 fa53 	bl	800f1bc <__hi0bits>
 800ed16:	42b0      	cmp	r0, r6
 800ed18:	dbe7      	blt.n	800ecea <__gethex+0x456>
 800ed1a:	e7f0      	b.n	800ecfe <__gethex+0x46a>
 800ed1c:	08010f81 	.word	0x08010f81

0800ed20 <L_shift>:
 800ed20:	f1c2 0208 	rsb	r2, r2, #8
 800ed24:	0092      	lsls	r2, r2, #2
 800ed26:	b570      	push	{r4, r5, r6, lr}
 800ed28:	f1c2 0620 	rsb	r6, r2, #32
 800ed2c:	6843      	ldr	r3, [r0, #4]
 800ed2e:	6804      	ldr	r4, [r0, #0]
 800ed30:	fa03 f506 	lsl.w	r5, r3, r6
 800ed34:	432c      	orrs	r4, r5
 800ed36:	40d3      	lsrs	r3, r2
 800ed38:	6004      	str	r4, [r0, #0]
 800ed3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed3e:	4288      	cmp	r0, r1
 800ed40:	d3f4      	bcc.n	800ed2c <L_shift+0xc>
 800ed42:	bd70      	pop	{r4, r5, r6, pc}

0800ed44 <__match>:
 800ed44:	b530      	push	{r4, r5, lr}
 800ed46:	6803      	ldr	r3, [r0, #0]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed4e:	b914      	cbnz	r4, 800ed56 <__match+0x12>
 800ed50:	6003      	str	r3, [r0, #0]
 800ed52:	2001      	movs	r0, #1
 800ed54:	bd30      	pop	{r4, r5, pc}
 800ed56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed5e:	2d19      	cmp	r5, #25
 800ed60:	bf98      	it	ls
 800ed62:	3220      	addls	r2, #32
 800ed64:	42a2      	cmp	r2, r4
 800ed66:	d0f0      	beq.n	800ed4a <__match+0x6>
 800ed68:	2000      	movs	r0, #0
 800ed6a:	e7f3      	b.n	800ed54 <__match+0x10>

0800ed6c <__hexnan>:
 800ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	680b      	ldr	r3, [r1, #0]
 800ed72:	115e      	asrs	r6, r3, #5
 800ed74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed78:	f013 031f 	ands.w	r3, r3, #31
 800ed7c:	b087      	sub	sp, #28
 800ed7e:	bf18      	it	ne
 800ed80:	3604      	addne	r6, #4
 800ed82:	2500      	movs	r5, #0
 800ed84:	1f37      	subs	r7, r6, #4
 800ed86:	4690      	mov	r8, r2
 800ed88:	6802      	ldr	r2, [r0, #0]
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed92:	46b9      	mov	r9, r7
 800ed94:	463c      	mov	r4, r7
 800ed96:	9502      	str	r5, [sp, #8]
 800ed98:	46ab      	mov	fp, r5
 800ed9a:	7851      	ldrb	r1, [r2, #1]
 800ed9c:	1c53      	adds	r3, r2, #1
 800ed9e:	9303      	str	r3, [sp, #12]
 800eda0:	b341      	cbz	r1, 800edf4 <__hexnan+0x88>
 800eda2:	4608      	mov	r0, r1
 800eda4:	9205      	str	r2, [sp, #20]
 800eda6:	9104      	str	r1, [sp, #16]
 800eda8:	f7ff fd5e 	bl	800e868 <__hexdig_fun>
 800edac:	2800      	cmp	r0, #0
 800edae:	d14f      	bne.n	800ee50 <__hexnan+0xe4>
 800edb0:	9904      	ldr	r1, [sp, #16]
 800edb2:	9a05      	ldr	r2, [sp, #20]
 800edb4:	2920      	cmp	r1, #32
 800edb6:	d818      	bhi.n	800edea <__hexnan+0x7e>
 800edb8:	9b02      	ldr	r3, [sp, #8]
 800edba:	459b      	cmp	fp, r3
 800edbc:	dd13      	ble.n	800ede6 <__hexnan+0x7a>
 800edbe:	454c      	cmp	r4, r9
 800edc0:	d206      	bcs.n	800edd0 <__hexnan+0x64>
 800edc2:	2d07      	cmp	r5, #7
 800edc4:	dc04      	bgt.n	800edd0 <__hexnan+0x64>
 800edc6:	462a      	mov	r2, r5
 800edc8:	4649      	mov	r1, r9
 800edca:	4620      	mov	r0, r4
 800edcc:	f7ff ffa8 	bl	800ed20 <L_shift>
 800edd0:	4544      	cmp	r4, r8
 800edd2:	d950      	bls.n	800ee76 <__hexnan+0x10a>
 800edd4:	2300      	movs	r3, #0
 800edd6:	f1a4 0904 	sub.w	r9, r4, #4
 800edda:	f844 3c04 	str.w	r3, [r4, #-4]
 800edde:	f8cd b008 	str.w	fp, [sp, #8]
 800ede2:	464c      	mov	r4, r9
 800ede4:	461d      	mov	r5, r3
 800ede6:	9a03      	ldr	r2, [sp, #12]
 800ede8:	e7d7      	b.n	800ed9a <__hexnan+0x2e>
 800edea:	2929      	cmp	r1, #41	; 0x29
 800edec:	d156      	bne.n	800ee9c <__hexnan+0x130>
 800edee:	3202      	adds	r2, #2
 800edf0:	f8ca 2000 	str.w	r2, [sl]
 800edf4:	f1bb 0f00 	cmp.w	fp, #0
 800edf8:	d050      	beq.n	800ee9c <__hexnan+0x130>
 800edfa:	454c      	cmp	r4, r9
 800edfc:	d206      	bcs.n	800ee0c <__hexnan+0xa0>
 800edfe:	2d07      	cmp	r5, #7
 800ee00:	dc04      	bgt.n	800ee0c <__hexnan+0xa0>
 800ee02:	462a      	mov	r2, r5
 800ee04:	4649      	mov	r1, r9
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7ff ff8a 	bl	800ed20 <L_shift>
 800ee0c:	4544      	cmp	r4, r8
 800ee0e:	d934      	bls.n	800ee7a <__hexnan+0x10e>
 800ee10:	f1a8 0204 	sub.w	r2, r8, #4
 800ee14:	4623      	mov	r3, r4
 800ee16:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee1e:	429f      	cmp	r7, r3
 800ee20:	d2f9      	bcs.n	800ee16 <__hexnan+0xaa>
 800ee22:	1b3b      	subs	r3, r7, r4
 800ee24:	f023 0303 	bic.w	r3, r3, #3
 800ee28:	3304      	adds	r3, #4
 800ee2a:	3401      	adds	r4, #1
 800ee2c:	3e03      	subs	r6, #3
 800ee2e:	42b4      	cmp	r4, r6
 800ee30:	bf88      	it	hi
 800ee32:	2304      	movhi	r3, #4
 800ee34:	4443      	add	r3, r8
 800ee36:	2200      	movs	r2, #0
 800ee38:	f843 2b04 	str.w	r2, [r3], #4
 800ee3c:	429f      	cmp	r7, r3
 800ee3e:	d2fb      	bcs.n	800ee38 <__hexnan+0xcc>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	b91b      	cbnz	r3, 800ee4c <__hexnan+0xe0>
 800ee44:	4547      	cmp	r7, r8
 800ee46:	d127      	bne.n	800ee98 <__hexnan+0x12c>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	2005      	movs	r0, #5
 800ee4e:	e026      	b.n	800ee9e <__hexnan+0x132>
 800ee50:	3501      	adds	r5, #1
 800ee52:	2d08      	cmp	r5, #8
 800ee54:	f10b 0b01 	add.w	fp, fp, #1
 800ee58:	dd06      	ble.n	800ee68 <__hexnan+0xfc>
 800ee5a:	4544      	cmp	r4, r8
 800ee5c:	d9c3      	bls.n	800ede6 <__hexnan+0x7a>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee64:	2501      	movs	r5, #1
 800ee66:	3c04      	subs	r4, #4
 800ee68:	6822      	ldr	r2, [r4, #0]
 800ee6a:	f000 000f 	and.w	r0, r0, #15
 800ee6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ee72:	6022      	str	r2, [r4, #0]
 800ee74:	e7b7      	b.n	800ede6 <__hexnan+0x7a>
 800ee76:	2508      	movs	r5, #8
 800ee78:	e7b5      	b.n	800ede6 <__hexnan+0x7a>
 800ee7a:	9b01      	ldr	r3, [sp, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d0df      	beq.n	800ee40 <__hexnan+0xd4>
 800ee80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee84:	f1c3 0320 	rsb	r3, r3, #32
 800ee88:	fa22 f303 	lsr.w	r3, r2, r3
 800ee8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee90:	401a      	ands	r2, r3
 800ee92:	f846 2c04 	str.w	r2, [r6, #-4]
 800ee96:	e7d3      	b.n	800ee40 <__hexnan+0xd4>
 800ee98:	3f04      	subs	r7, #4
 800ee9a:	e7d1      	b.n	800ee40 <__hexnan+0xd4>
 800ee9c:	2004      	movs	r0, #4
 800ee9e:	b007      	add	sp, #28
 800eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eea4 <_localeconv_r>:
 800eea4:	4800      	ldr	r0, [pc, #0]	; (800eea8 <_localeconv_r+0x4>)
 800eea6:	4770      	bx	lr
 800eea8:	20000188 	.word	0x20000188

0800eeac <_lseek_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	4d07      	ldr	r5, [pc, #28]	; (800eecc <_lseek_r+0x20>)
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	602a      	str	r2, [r5, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	f7f5 f821 	bl	8003f02 <_lseek>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_lseek_r+0x1e>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_lseek_r+0x1e>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	20000a18 	.word	0x20000a18

0800eed0 <__swhatbuf_r>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	460e      	mov	r6, r1
 800eed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed8:	2900      	cmp	r1, #0
 800eeda:	b096      	sub	sp, #88	; 0x58
 800eedc:	4614      	mov	r4, r2
 800eede:	461d      	mov	r5, r3
 800eee0:	da08      	bge.n	800eef4 <__swhatbuf_r+0x24>
 800eee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	602a      	str	r2, [r5, #0]
 800eeea:	061a      	lsls	r2, r3, #24
 800eeec:	d410      	bmi.n	800ef10 <__swhatbuf_r+0x40>
 800eeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eef2:	e00e      	b.n	800ef12 <__swhatbuf_r+0x42>
 800eef4:	466a      	mov	r2, sp
 800eef6:	f000 ff4d 	bl	800fd94 <_fstat_r>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	dbf1      	blt.n	800eee2 <__swhatbuf_r+0x12>
 800eefe:	9a01      	ldr	r2, [sp, #4]
 800ef00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef08:	425a      	negs	r2, r3
 800ef0a:	415a      	adcs	r2, r3
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	e7ee      	b.n	800eeee <__swhatbuf_r+0x1e>
 800ef10:	2340      	movs	r3, #64	; 0x40
 800ef12:	2000      	movs	r0, #0
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	b016      	add	sp, #88	; 0x58
 800ef18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef1c <__smakebuf_r>:
 800ef1c:	898b      	ldrh	r3, [r1, #12]
 800ef1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef20:	079d      	lsls	r5, r3, #30
 800ef22:	4606      	mov	r6, r0
 800ef24:	460c      	mov	r4, r1
 800ef26:	d507      	bpl.n	800ef38 <__smakebuf_r+0x1c>
 800ef28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	6123      	str	r3, [r4, #16]
 800ef30:	2301      	movs	r3, #1
 800ef32:	6163      	str	r3, [r4, #20]
 800ef34:	b002      	add	sp, #8
 800ef36:	bd70      	pop	{r4, r5, r6, pc}
 800ef38:	ab01      	add	r3, sp, #4
 800ef3a:	466a      	mov	r2, sp
 800ef3c:	f7ff ffc8 	bl	800eed0 <__swhatbuf_r>
 800ef40:	9900      	ldr	r1, [sp, #0]
 800ef42:	4605      	mov	r5, r0
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7fc fbeb 	bl	800b720 <_malloc_r>
 800ef4a:	b948      	cbnz	r0, 800ef60 <__smakebuf_r+0x44>
 800ef4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef50:	059a      	lsls	r2, r3, #22
 800ef52:	d4ef      	bmi.n	800ef34 <__smakebuf_r+0x18>
 800ef54:	f023 0303 	bic.w	r3, r3, #3
 800ef58:	f043 0302 	orr.w	r3, r3, #2
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	e7e3      	b.n	800ef28 <__smakebuf_r+0xc>
 800ef60:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <__smakebuf_r+0x7c>)
 800ef62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	6020      	str	r0, [r4, #0]
 800ef68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef6c:	81a3      	strh	r3, [r4, #12]
 800ef6e:	9b00      	ldr	r3, [sp, #0]
 800ef70:	6163      	str	r3, [r4, #20]
 800ef72:	9b01      	ldr	r3, [sp, #4]
 800ef74:	6120      	str	r0, [r4, #16]
 800ef76:	b15b      	cbz	r3, 800ef90 <__smakebuf_r+0x74>
 800ef78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f000 ff1b 	bl	800fdb8 <_isatty_r>
 800ef82:	b128      	cbz	r0, 800ef90 <__smakebuf_r+0x74>
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	f023 0303 	bic.w	r3, r3, #3
 800ef8a:	f043 0301 	orr.w	r3, r3, #1
 800ef8e:	81a3      	strh	r3, [r4, #12]
 800ef90:	89a0      	ldrh	r0, [r4, #12]
 800ef92:	4305      	orrs	r5, r0
 800ef94:	81a5      	strh	r5, [r4, #12]
 800ef96:	e7cd      	b.n	800ef34 <__smakebuf_r+0x18>
 800ef98:	0800b391 	.word	0x0800b391

0800ef9c <__ascii_mbtowc>:
 800ef9c:	b082      	sub	sp, #8
 800ef9e:	b901      	cbnz	r1, 800efa2 <__ascii_mbtowc+0x6>
 800efa0:	a901      	add	r1, sp, #4
 800efa2:	b142      	cbz	r2, 800efb6 <__ascii_mbtowc+0x1a>
 800efa4:	b14b      	cbz	r3, 800efba <__ascii_mbtowc+0x1e>
 800efa6:	7813      	ldrb	r3, [r2, #0]
 800efa8:	600b      	str	r3, [r1, #0]
 800efaa:	7812      	ldrb	r2, [r2, #0]
 800efac:	1e10      	subs	r0, r2, #0
 800efae:	bf18      	it	ne
 800efb0:	2001      	movne	r0, #1
 800efb2:	b002      	add	sp, #8
 800efb4:	4770      	bx	lr
 800efb6:	4610      	mov	r0, r2
 800efb8:	e7fb      	b.n	800efb2 <__ascii_mbtowc+0x16>
 800efba:	f06f 0001 	mvn.w	r0, #1
 800efbe:	e7f8      	b.n	800efb2 <__ascii_mbtowc+0x16>

0800efc0 <__malloc_lock>:
 800efc0:	4801      	ldr	r0, [pc, #4]	; (800efc8 <__malloc_lock+0x8>)
 800efc2:	f7fc baee 	b.w	800b5a2 <__retarget_lock_acquire_recursive>
 800efc6:	bf00      	nop
 800efc8:	20000a0c 	.word	0x20000a0c

0800efcc <__malloc_unlock>:
 800efcc:	4801      	ldr	r0, [pc, #4]	; (800efd4 <__malloc_unlock+0x8>)
 800efce:	f7fc bae9 	b.w	800b5a4 <__retarget_lock_release_recursive>
 800efd2:	bf00      	nop
 800efd4:	20000a0c 	.word	0x20000a0c

0800efd8 <_Balloc>:
 800efd8:	b570      	push	{r4, r5, r6, lr}
 800efda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efdc:	4604      	mov	r4, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	b976      	cbnz	r6, 800f000 <_Balloc+0x28>
 800efe2:	2010      	movs	r0, #16
 800efe4:	f7fc fae0 	bl	800b5a8 <malloc>
 800efe8:	4602      	mov	r2, r0
 800efea:	6260      	str	r0, [r4, #36]	; 0x24
 800efec:	b920      	cbnz	r0, 800eff8 <_Balloc+0x20>
 800efee:	4b18      	ldr	r3, [pc, #96]	; (800f050 <_Balloc+0x78>)
 800eff0:	4818      	ldr	r0, [pc, #96]	; (800f054 <_Balloc+0x7c>)
 800eff2:	2166      	movs	r1, #102	; 0x66
 800eff4:	f7fe fd3c 	bl	800da70 <__assert_func>
 800eff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800effc:	6006      	str	r6, [r0, #0]
 800effe:	60c6      	str	r6, [r0, #12]
 800f000:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f002:	68f3      	ldr	r3, [r6, #12]
 800f004:	b183      	cbz	r3, 800f028 <_Balloc+0x50>
 800f006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f00e:	b9b8      	cbnz	r0, 800f040 <_Balloc+0x68>
 800f010:	2101      	movs	r1, #1
 800f012:	fa01 f605 	lsl.w	r6, r1, r5
 800f016:	1d72      	adds	r2, r6, #5
 800f018:	0092      	lsls	r2, r2, #2
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fc9d 	bl	800f95a <_calloc_r>
 800f020:	b160      	cbz	r0, 800f03c <_Balloc+0x64>
 800f022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f026:	e00e      	b.n	800f046 <_Balloc+0x6e>
 800f028:	2221      	movs	r2, #33	; 0x21
 800f02a:	2104      	movs	r1, #4
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 fc94 	bl	800f95a <_calloc_r>
 800f032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f034:	60f0      	str	r0, [r6, #12]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1e4      	bne.n	800f006 <_Balloc+0x2e>
 800f03c:	2000      	movs	r0, #0
 800f03e:	bd70      	pop	{r4, r5, r6, pc}
 800f040:	6802      	ldr	r2, [r0, #0]
 800f042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f046:	2300      	movs	r3, #0
 800f048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f04c:	e7f7      	b.n	800f03e <_Balloc+0x66>
 800f04e:	bf00      	nop
 800f050:	08010d68 	.word	0x08010d68
 800f054:	0801100c 	.word	0x0801100c

0800f058 <_Bfree>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f05c:	4605      	mov	r5, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	b976      	cbnz	r6, 800f080 <_Bfree+0x28>
 800f062:	2010      	movs	r0, #16
 800f064:	f7fc faa0 	bl	800b5a8 <malloc>
 800f068:	4602      	mov	r2, r0
 800f06a:	6268      	str	r0, [r5, #36]	; 0x24
 800f06c:	b920      	cbnz	r0, 800f078 <_Bfree+0x20>
 800f06e:	4b09      	ldr	r3, [pc, #36]	; (800f094 <_Bfree+0x3c>)
 800f070:	4809      	ldr	r0, [pc, #36]	; (800f098 <_Bfree+0x40>)
 800f072:	218a      	movs	r1, #138	; 0x8a
 800f074:	f7fe fcfc 	bl	800da70 <__assert_func>
 800f078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f07c:	6006      	str	r6, [r0, #0]
 800f07e:	60c6      	str	r6, [r0, #12]
 800f080:	b13c      	cbz	r4, 800f092 <_Bfree+0x3a>
 800f082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f084:	6862      	ldr	r2, [r4, #4]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f08c:	6021      	str	r1, [r4, #0]
 800f08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	08010d68 	.word	0x08010d68
 800f098:	0801100c 	.word	0x0801100c

0800f09c <__multadd>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	690d      	ldr	r5, [r1, #16]
 800f0a2:	4607      	mov	r7, r0
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	461e      	mov	r6, r3
 800f0a8:	f101 0c14 	add.w	ip, r1, #20
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f0b2:	b299      	uxth	r1, r3
 800f0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f0b8:	0c1e      	lsrs	r6, r3, #16
 800f0ba:	0c0b      	lsrs	r3, r1, #16
 800f0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f0c0:	b289      	uxth	r1, r1
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0c8:	4285      	cmp	r5, r0
 800f0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0d2:	dcec      	bgt.n	800f0ae <__multadd+0x12>
 800f0d4:	b30e      	cbz	r6, 800f11a <__multadd+0x7e>
 800f0d6:	68a3      	ldr	r3, [r4, #8]
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	dc19      	bgt.n	800f110 <__multadd+0x74>
 800f0dc:	6861      	ldr	r1, [r4, #4]
 800f0de:	4638      	mov	r0, r7
 800f0e0:	3101      	adds	r1, #1
 800f0e2:	f7ff ff79 	bl	800efd8 <_Balloc>
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	b928      	cbnz	r0, 800f0f6 <__multadd+0x5a>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	4b0c      	ldr	r3, [pc, #48]	; (800f120 <__multadd+0x84>)
 800f0ee:	480d      	ldr	r0, [pc, #52]	; (800f124 <__multadd+0x88>)
 800f0f0:	21b5      	movs	r1, #181	; 0xb5
 800f0f2:	f7fe fcbd 	bl	800da70 <__assert_func>
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	3202      	adds	r2, #2
 800f0fa:	f104 010c 	add.w	r1, r4, #12
 800f0fe:	0092      	lsls	r2, r2, #2
 800f100:	300c      	adds	r0, #12
 800f102:	f7fc fa71 	bl	800b5e8 <memcpy>
 800f106:	4621      	mov	r1, r4
 800f108:	4638      	mov	r0, r7
 800f10a:	f7ff ffa5 	bl	800f058 <_Bfree>
 800f10e:	4644      	mov	r4, r8
 800f110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f114:	3501      	adds	r5, #1
 800f116:	615e      	str	r6, [r3, #20]
 800f118:	6125      	str	r5, [r4, #16]
 800f11a:	4620      	mov	r0, r4
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	08010f81 	.word	0x08010f81
 800f124:	0801100c 	.word	0x0801100c

0800f128 <__s2b>:
 800f128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f12c:	460c      	mov	r4, r1
 800f12e:	4615      	mov	r5, r2
 800f130:	461f      	mov	r7, r3
 800f132:	2209      	movs	r2, #9
 800f134:	3308      	adds	r3, #8
 800f136:	4606      	mov	r6, r0
 800f138:	fb93 f3f2 	sdiv	r3, r3, r2
 800f13c:	2100      	movs	r1, #0
 800f13e:	2201      	movs	r2, #1
 800f140:	429a      	cmp	r2, r3
 800f142:	db09      	blt.n	800f158 <__s2b+0x30>
 800f144:	4630      	mov	r0, r6
 800f146:	f7ff ff47 	bl	800efd8 <_Balloc>
 800f14a:	b940      	cbnz	r0, 800f15e <__s2b+0x36>
 800f14c:	4602      	mov	r2, r0
 800f14e:	4b19      	ldr	r3, [pc, #100]	; (800f1b4 <__s2b+0x8c>)
 800f150:	4819      	ldr	r0, [pc, #100]	; (800f1b8 <__s2b+0x90>)
 800f152:	21ce      	movs	r1, #206	; 0xce
 800f154:	f7fe fc8c 	bl	800da70 <__assert_func>
 800f158:	0052      	lsls	r2, r2, #1
 800f15a:	3101      	adds	r1, #1
 800f15c:	e7f0      	b.n	800f140 <__s2b+0x18>
 800f15e:	9b08      	ldr	r3, [sp, #32]
 800f160:	6143      	str	r3, [r0, #20]
 800f162:	2d09      	cmp	r5, #9
 800f164:	f04f 0301 	mov.w	r3, #1
 800f168:	6103      	str	r3, [r0, #16]
 800f16a:	dd16      	ble.n	800f19a <__s2b+0x72>
 800f16c:	f104 0909 	add.w	r9, r4, #9
 800f170:	46c8      	mov	r8, r9
 800f172:	442c      	add	r4, r5
 800f174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f178:	4601      	mov	r1, r0
 800f17a:	3b30      	subs	r3, #48	; 0x30
 800f17c:	220a      	movs	r2, #10
 800f17e:	4630      	mov	r0, r6
 800f180:	f7ff ff8c 	bl	800f09c <__multadd>
 800f184:	45a0      	cmp	r8, r4
 800f186:	d1f5      	bne.n	800f174 <__s2b+0x4c>
 800f188:	f1a5 0408 	sub.w	r4, r5, #8
 800f18c:	444c      	add	r4, r9
 800f18e:	1b2d      	subs	r5, r5, r4
 800f190:	1963      	adds	r3, r4, r5
 800f192:	42bb      	cmp	r3, r7
 800f194:	db04      	blt.n	800f1a0 <__s2b+0x78>
 800f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19a:	340a      	adds	r4, #10
 800f19c:	2509      	movs	r5, #9
 800f19e:	e7f6      	b.n	800f18e <__s2b+0x66>
 800f1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1a4:	4601      	mov	r1, r0
 800f1a6:	3b30      	subs	r3, #48	; 0x30
 800f1a8:	220a      	movs	r2, #10
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7ff ff76 	bl	800f09c <__multadd>
 800f1b0:	e7ee      	b.n	800f190 <__s2b+0x68>
 800f1b2:	bf00      	nop
 800f1b4:	08010f81 	.word	0x08010f81
 800f1b8:	0801100c 	.word	0x0801100c

0800f1bc <__hi0bits>:
 800f1bc:	0c03      	lsrs	r3, r0, #16
 800f1be:	041b      	lsls	r3, r3, #16
 800f1c0:	b9d3      	cbnz	r3, 800f1f8 <__hi0bits+0x3c>
 800f1c2:	0400      	lsls	r0, r0, #16
 800f1c4:	2310      	movs	r3, #16
 800f1c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f1ca:	bf04      	itt	eq
 800f1cc:	0200      	lsleq	r0, r0, #8
 800f1ce:	3308      	addeq	r3, #8
 800f1d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f1d4:	bf04      	itt	eq
 800f1d6:	0100      	lsleq	r0, r0, #4
 800f1d8:	3304      	addeq	r3, #4
 800f1da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f1de:	bf04      	itt	eq
 800f1e0:	0080      	lsleq	r0, r0, #2
 800f1e2:	3302      	addeq	r3, #2
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	db05      	blt.n	800f1f4 <__hi0bits+0x38>
 800f1e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f1ec:	f103 0301 	add.w	r3, r3, #1
 800f1f0:	bf08      	it	eq
 800f1f2:	2320      	moveq	r3, #32
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	4770      	bx	lr
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	e7e4      	b.n	800f1c6 <__hi0bits+0xa>

0800f1fc <__lo0bits>:
 800f1fc:	6803      	ldr	r3, [r0, #0]
 800f1fe:	f013 0207 	ands.w	r2, r3, #7
 800f202:	4601      	mov	r1, r0
 800f204:	d00b      	beq.n	800f21e <__lo0bits+0x22>
 800f206:	07da      	lsls	r2, r3, #31
 800f208:	d423      	bmi.n	800f252 <__lo0bits+0x56>
 800f20a:	0798      	lsls	r0, r3, #30
 800f20c:	bf49      	itett	mi
 800f20e:	085b      	lsrmi	r3, r3, #1
 800f210:	089b      	lsrpl	r3, r3, #2
 800f212:	2001      	movmi	r0, #1
 800f214:	600b      	strmi	r3, [r1, #0]
 800f216:	bf5c      	itt	pl
 800f218:	600b      	strpl	r3, [r1, #0]
 800f21a:	2002      	movpl	r0, #2
 800f21c:	4770      	bx	lr
 800f21e:	b298      	uxth	r0, r3
 800f220:	b9a8      	cbnz	r0, 800f24e <__lo0bits+0x52>
 800f222:	0c1b      	lsrs	r3, r3, #16
 800f224:	2010      	movs	r0, #16
 800f226:	b2da      	uxtb	r2, r3
 800f228:	b90a      	cbnz	r2, 800f22e <__lo0bits+0x32>
 800f22a:	3008      	adds	r0, #8
 800f22c:	0a1b      	lsrs	r3, r3, #8
 800f22e:	071a      	lsls	r2, r3, #28
 800f230:	bf04      	itt	eq
 800f232:	091b      	lsreq	r3, r3, #4
 800f234:	3004      	addeq	r0, #4
 800f236:	079a      	lsls	r2, r3, #30
 800f238:	bf04      	itt	eq
 800f23a:	089b      	lsreq	r3, r3, #2
 800f23c:	3002      	addeq	r0, #2
 800f23e:	07da      	lsls	r2, r3, #31
 800f240:	d403      	bmi.n	800f24a <__lo0bits+0x4e>
 800f242:	085b      	lsrs	r3, r3, #1
 800f244:	f100 0001 	add.w	r0, r0, #1
 800f248:	d005      	beq.n	800f256 <__lo0bits+0x5a>
 800f24a:	600b      	str	r3, [r1, #0]
 800f24c:	4770      	bx	lr
 800f24e:	4610      	mov	r0, r2
 800f250:	e7e9      	b.n	800f226 <__lo0bits+0x2a>
 800f252:	2000      	movs	r0, #0
 800f254:	4770      	bx	lr
 800f256:	2020      	movs	r0, #32
 800f258:	4770      	bx	lr
	...

0800f25c <__i2b>:
 800f25c:	b510      	push	{r4, lr}
 800f25e:	460c      	mov	r4, r1
 800f260:	2101      	movs	r1, #1
 800f262:	f7ff feb9 	bl	800efd8 <_Balloc>
 800f266:	4602      	mov	r2, r0
 800f268:	b928      	cbnz	r0, 800f276 <__i2b+0x1a>
 800f26a:	4b05      	ldr	r3, [pc, #20]	; (800f280 <__i2b+0x24>)
 800f26c:	4805      	ldr	r0, [pc, #20]	; (800f284 <__i2b+0x28>)
 800f26e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f272:	f7fe fbfd 	bl	800da70 <__assert_func>
 800f276:	2301      	movs	r3, #1
 800f278:	6144      	str	r4, [r0, #20]
 800f27a:	6103      	str	r3, [r0, #16]
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop
 800f280:	08010f81 	.word	0x08010f81
 800f284:	0801100c 	.word	0x0801100c

0800f288 <__multiply>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	4691      	mov	r9, r2
 800f28e:	690a      	ldr	r2, [r1, #16]
 800f290:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f294:	429a      	cmp	r2, r3
 800f296:	bfb8      	it	lt
 800f298:	460b      	movlt	r3, r1
 800f29a:	460c      	mov	r4, r1
 800f29c:	bfbc      	itt	lt
 800f29e:	464c      	movlt	r4, r9
 800f2a0:	4699      	movlt	r9, r3
 800f2a2:	6927      	ldr	r7, [r4, #16]
 800f2a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2a8:	68a3      	ldr	r3, [r4, #8]
 800f2aa:	6861      	ldr	r1, [r4, #4]
 800f2ac:	eb07 060a 	add.w	r6, r7, sl
 800f2b0:	42b3      	cmp	r3, r6
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	bfb8      	it	lt
 800f2b6:	3101      	addlt	r1, #1
 800f2b8:	f7ff fe8e 	bl	800efd8 <_Balloc>
 800f2bc:	b930      	cbnz	r0, 800f2cc <__multiply+0x44>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	4b44      	ldr	r3, [pc, #272]	; (800f3d4 <__multiply+0x14c>)
 800f2c2:	4845      	ldr	r0, [pc, #276]	; (800f3d8 <__multiply+0x150>)
 800f2c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f2c8:	f7fe fbd2 	bl	800da70 <__assert_func>
 800f2cc:	f100 0514 	add.w	r5, r0, #20
 800f2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4543      	cmp	r3, r8
 800f2da:	d321      	bcc.n	800f320 <__multiply+0x98>
 800f2dc:	f104 0314 	add.w	r3, r4, #20
 800f2e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f2e4:	f109 0314 	add.w	r3, r9, #20
 800f2e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f2ec:	9202      	str	r2, [sp, #8]
 800f2ee:	1b3a      	subs	r2, r7, r4
 800f2f0:	3a15      	subs	r2, #21
 800f2f2:	f022 0203 	bic.w	r2, r2, #3
 800f2f6:	3204      	adds	r2, #4
 800f2f8:	f104 0115 	add.w	r1, r4, #21
 800f2fc:	428f      	cmp	r7, r1
 800f2fe:	bf38      	it	cc
 800f300:	2204      	movcc	r2, #4
 800f302:	9201      	str	r2, [sp, #4]
 800f304:	9a02      	ldr	r2, [sp, #8]
 800f306:	9303      	str	r3, [sp, #12]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d80c      	bhi.n	800f326 <__multiply+0x9e>
 800f30c:	2e00      	cmp	r6, #0
 800f30e:	dd03      	ble.n	800f318 <__multiply+0x90>
 800f310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f314:	2b00      	cmp	r3, #0
 800f316:	d05a      	beq.n	800f3ce <__multiply+0x146>
 800f318:	6106      	str	r6, [r0, #16]
 800f31a:	b005      	add	sp, #20
 800f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f320:	f843 2b04 	str.w	r2, [r3], #4
 800f324:	e7d8      	b.n	800f2d8 <__multiply+0x50>
 800f326:	f8b3 a000 	ldrh.w	sl, [r3]
 800f32a:	f1ba 0f00 	cmp.w	sl, #0
 800f32e:	d024      	beq.n	800f37a <__multiply+0xf2>
 800f330:	f104 0e14 	add.w	lr, r4, #20
 800f334:	46a9      	mov	r9, r5
 800f336:	f04f 0c00 	mov.w	ip, #0
 800f33a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f33e:	f8d9 1000 	ldr.w	r1, [r9]
 800f342:	fa1f fb82 	uxth.w	fp, r2
 800f346:	b289      	uxth	r1, r1
 800f348:	fb0a 110b 	mla	r1, sl, fp, r1
 800f34c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f350:	f8d9 2000 	ldr.w	r2, [r9]
 800f354:	4461      	add	r1, ip
 800f356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f35a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f35e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f362:	b289      	uxth	r1, r1
 800f364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f368:	4577      	cmp	r7, lr
 800f36a:	f849 1b04 	str.w	r1, [r9], #4
 800f36e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f372:	d8e2      	bhi.n	800f33a <__multiply+0xb2>
 800f374:	9a01      	ldr	r2, [sp, #4]
 800f376:	f845 c002 	str.w	ip, [r5, r2]
 800f37a:	9a03      	ldr	r2, [sp, #12]
 800f37c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f380:	3304      	adds	r3, #4
 800f382:	f1b9 0f00 	cmp.w	r9, #0
 800f386:	d020      	beq.n	800f3ca <__multiply+0x142>
 800f388:	6829      	ldr	r1, [r5, #0]
 800f38a:	f104 0c14 	add.w	ip, r4, #20
 800f38e:	46ae      	mov	lr, r5
 800f390:	f04f 0a00 	mov.w	sl, #0
 800f394:	f8bc b000 	ldrh.w	fp, [ip]
 800f398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f39c:	fb09 220b 	mla	r2, r9, fp, r2
 800f3a0:	4492      	add	sl, r2
 800f3a2:	b289      	uxth	r1, r1
 800f3a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f3a8:	f84e 1b04 	str.w	r1, [lr], #4
 800f3ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f3b0:	f8be 1000 	ldrh.w	r1, [lr]
 800f3b4:	0c12      	lsrs	r2, r2, #16
 800f3b6:	fb09 1102 	mla	r1, r9, r2, r1
 800f3ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f3be:	4567      	cmp	r7, ip
 800f3c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3c4:	d8e6      	bhi.n	800f394 <__multiply+0x10c>
 800f3c6:	9a01      	ldr	r2, [sp, #4]
 800f3c8:	50a9      	str	r1, [r5, r2]
 800f3ca:	3504      	adds	r5, #4
 800f3cc:	e79a      	b.n	800f304 <__multiply+0x7c>
 800f3ce:	3e01      	subs	r6, #1
 800f3d0:	e79c      	b.n	800f30c <__multiply+0x84>
 800f3d2:	bf00      	nop
 800f3d4:	08010f81 	.word	0x08010f81
 800f3d8:	0801100c 	.word	0x0801100c

0800f3dc <__pow5mult>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4615      	mov	r5, r2
 800f3e2:	f012 0203 	ands.w	r2, r2, #3
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	460f      	mov	r7, r1
 800f3ea:	d007      	beq.n	800f3fc <__pow5mult+0x20>
 800f3ec:	4c25      	ldr	r4, [pc, #148]	; (800f484 <__pow5mult+0xa8>)
 800f3ee:	3a01      	subs	r2, #1
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3f6:	f7ff fe51 	bl	800f09c <__multadd>
 800f3fa:	4607      	mov	r7, r0
 800f3fc:	10ad      	asrs	r5, r5, #2
 800f3fe:	d03d      	beq.n	800f47c <__pow5mult+0xa0>
 800f400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f402:	b97c      	cbnz	r4, 800f424 <__pow5mult+0x48>
 800f404:	2010      	movs	r0, #16
 800f406:	f7fc f8cf 	bl	800b5a8 <malloc>
 800f40a:	4602      	mov	r2, r0
 800f40c:	6270      	str	r0, [r6, #36]	; 0x24
 800f40e:	b928      	cbnz	r0, 800f41c <__pow5mult+0x40>
 800f410:	4b1d      	ldr	r3, [pc, #116]	; (800f488 <__pow5mult+0xac>)
 800f412:	481e      	ldr	r0, [pc, #120]	; (800f48c <__pow5mult+0xb0>)
 800f414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f418:	f7fe fb2a 	bl	800da70 <__assert_func>
 800f41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f420:	6004      	str	r4, [r0, #0]
 800f422:	60c4      	str	r4, [r0, #12]
 800f424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f42c:	b94c      	cbnz	r4, 800f442 <__pow5mult+0x66>
 800f42e:	f240 2171 	movw	r1, #625	; 0x271
 800f432:	4630      	mov	r0, r6
 800f434:	f7ff ff12 	bl	800f25c <__i2b>
 800f438:	2300      	movs	r3, #0
 800f43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f43e:	4604      	mov	r4, r0
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	f04f 0900 	mov.w	r9, #0
 800f446:	07eb      	lsls	r3, r5, #31
 800f448:	d50a      	bpl.n	800f460 <__pow5mult+0x84>
 800f44a:	4639      	mov	r1, r7
 800f44c:	4622      	mov	r2, r4
 800f44e:	4630      	mov	r0, r6
 800f450:	f7ff ff1a 	bl	800f288 <__multiply>
 800f454:	4639      	mov	r1, r7
 800f456:	4680      	mov	r8, r0
 800f458:	4630      	mov	r0, r6
 800f45a:	f7ff fdfd 	bl	800f058 <_Bfree>
 800f45e:	4647      	mov	r7, r8
 800f460:	106d      	asrs	r5, r5, #1
 800f462:	d00b      	beq.n	800f47c <__pow5mult+0xa0>
 800f464:	6820      	ldr	r0, [r4, #0]
 800f466:	b938      	cbnz	r0, 800f478 <__pow5mult+0x9c>
 800f468:	4622      	mov	r2, r4
 800f46a:	4621      	mov	r1, r4
 800f46c:	4630      	mov	r0, r6
 800f46e:	f7ff ff0b 	bl	800f288 <__multiply>
 800f472:	6020      	str	r0, [r4, #0]
 800f474:	f8c0 9000 	str.w	r9, [r0]
 800f478:	4604      	mov	r4, r0
 800f47a:	e7e4      	b.n	800f446 <__pow5mult+0x6a>
 800f47c:	4638      	mov	r0, r7
 800f47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f482:	bf00      	nop
 800f484:	08011158 	.word	0x08011158
 800f488:	08010d68 	.word	0x08010d68
 800f48c:	0801100c 	.word	0x0801100c

0800f490 <__lshift>:
 800f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f494:	460c      	mov	r4, r1
 800f496:	6849      	ldr	r1, [r1, #4]
 800f498:	6923      	ldr	r3, [r4, #16]
 800f49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	4691      	mov	r9, r2
 800f4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4a8:	f108 0601 	add.w	r6, r8, #1
 800f4ac:	42b3      	cmp	r3, r6
 800f4ae:	db0b      	blt.n	800f4c8 <__lshift+0x38>
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f7ff fd91 	bl	800efd8 <_Balloc>
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	b948      	cbnz	r0, 800f4ce <__lshift+0x3e>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	4b2a      	ldr	r3, [pc, #168]	; (800f568 <__lshift+0xd8>)
 800f4be:	482b      	ldr	r0, [pc, #172]	; (800f56c <__lshift+0xdc>)
 800f4c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f4c4:	f7fe fad4 	bl	800da70 <__assert_func>
 800f4c8:	3101      	adds	r1, #1
 800f4ca:	005b      	lsls	r3, r3, #1
 800f4cc:	e7ee      	b.n	800f4ac <__lshift+0x1c>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f100 0114 	add.w	r1, r0, #20
 800f4d4:	f100 0210 	add.w	r2, r0, #16
 800f4d8:	4618      	mov	r0, r3
 800f4da:	4553      	cmp	r3, sl
 800f4dc:	db37      	blt.n	800f54e <__lshift+0xbe>
 800f4de:	6920      	ldr	r0, [r4, #16]
 800f4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4e4:	f104 0314 	add.w	r3, r4, #20
 800f4e8:	f019 091f 	ands.w	r9, r9, #31
 800f4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f4f4:	d02f      	beq.n	800f556 <__lshift+0xc6>
 800f4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f4fa:	468a      	mov	sl, r1
 800f4fc:	f04f 0c00 	mov.w	ip, #0
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	fa02 f209 	lsl.w	r2, r2, r9
 800f506:	ea42 020c 	orr.w	r2, r2, ip
 800f50a:	f84a 2b04 	str.w	r2, [sl], #4
 800f50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f512:	4298      	cmp	r0, r3
 800f514:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f518:	d8f2      	bhi.n	800f500 <__lshift+0x70>
 800f51a:	1b03      	subs	r3, r0, r4
 800f51c:	3b15      	subs	r3, #21
 800f51e:	f023 0303 	bic.w	r3, r3, #3
 800f522:	3304      	adds	r3, #4
 800f524:	f104 0215 	add.w	r2, r4, #21
 800f528:	4290      	cmp	r0, r2
 800f52a:	bf38      	it	cc
 800f52c:	2304      	movcc	r3, #4
 800f52e:	f841 c003 	str.w	ip, [r1, r3]
 800f532:	f1bc 0f00 	cmp.w	ip, #0
 800f536:	d001      	beq.n	800f53c <__lshift+0xac>
 800f538:	f108 0602 	add.w	r6, r8, #2
 800f53c:	3e01      	subs	r6, #1
 800f53e:	4638      	mov	r0, r7
 800f540:	612e      	str	r6, [r5, #16]
 800f542:	4621      	mov	r1, r4
 800f544:	f7ff fd88 	bl	800f058 <_Bfree>
 800f548:	4628      	mov	r0, r5
 800f54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f552:	3301      	adds	r3, #1
 800f554:	e7c1      	b.n	800f4da <__lshift+0x4a>
 800f556:	3904      	subs	r1, #4
 800f558:	f853 2b04 	ldr.w	r2, [r3], #4
 800f55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f560:	4298      	cmp	r0, r3
 800f562:	d8f9      	bhi.n	800f558 <__lshift+0xc8>
 800f564:	e7ea      	b.n	800f53c <__lshift+0xac>
 800f566:	bf00      	nop
 800f568:	08010f81 	.word	0x08010f81
 800f56c:	0801100c 	.word	0x0801100c

0800f570 <__mcmp>:
 800f570:	b530      	push	{r4, r5, lr}
 800f572:	6902      	ldr	r2, [r0, #16]
 800f574:	690c      	ldr	r4, [r1, #16]
 800f576:	1b12      	subs	r2, r2, r4
 800f578:	d10e      	bne.n	800f598 <__mcmp+0x28>
 800f57a:	f100 0314 	add.w	r3, r0, #20
 800f57e:	3114      	adds	r1, #20
 800f580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f58c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f590:	42a5      	cmp	r5, r4
 800f592:	d003      	beq.n	800f59c <__mcmp+0x2c>
 800f594:	d305      	bcc.n	800f5a2 <__mcmp+0x32>
 800f596:	2201      	movs	r2, #1
 800f598:	4610      	mov	r0, r2
 800f59a:	bd30      	pop	{r4, r5, pc}
 800f59c:	4283      	cmp	r3, r0
 800f59e:	d3f3      	bcc.n	800f588 <__mcmp+0x18>
 800f5a0:	e7fa      	b.n	800f598 <__mcmp+0x28>
 800f5a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5a6:	e7f7      	b.n	800f598 <__mcmp+0x28>

0800f5a8 <__mdiff>:
 800f5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	4690      	mov	r8, r2
 800f5b6:	f7ff ffdb 	bl	800f570 <__mcmp>
 800f5ba:	1e05      	subs	r5, r0, #0
 800f5bc:	d110      	bne.n	800f5e0 <__mdiff+0x38>
 800f5be:	4629      	mov	r1, r5
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f7ff fd09 	bl	800efd8 <_Balloc>
 800f5c6:	b930      	cbnz	r0, 800f5d6 <__mdiff+0x2e>
 800f5c8:	4b3a      	ldr	r3, [pc, #232]	; (800f6b4 <__mdiff+0x10c>)
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	f240 2132 	movw	r1, #562	; 0x232
 800f5d0:	4839      	ldr	r0, [pc, #228]	; (800f6b8 <__mdiff+0x110>)
 800f5d2:	f7fe fa4d 	bl	800da70 <__assert_func>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	bfa4      	itt	ge
 800f5e2:	4643      	movge	r3, r8
 800f5e4:	46a0      	movge	r8, r4
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5ec:	bfa6      	itte	ge
 800f5ee:	461c      	movge	r4, r3
 800f5f0:	2500      	movge	r5, #0
 800f5f2:	2501      	movlt	r5, #1
 800f5f4:	f7ff fcf0 	bl	800efd8 <_Balloc>
 800f5f8:	b920      	cbnz	r0, 800f604 <__mdiff+0x5c>
 800f5fa:	4b2e      	ldr	r3, [pc, #184]	; (800f6b4 <__mdiff+0x10c>)
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f602:	e7e5      	b.n	800f5d0 <__mdiff+0x28>
 800f604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f608:	6926      	ldr	r6, [r4, #16]
 800f60a:	60c5      	str	r5, [r0, #12]
 800f60c:	f104 0914 	add.w	r9, r4, #20
 800f610:	f108 0514 	add.w	r5, r8, #20
 800f614:	f100 0e14 	add.w	lr, r0, #20
 800f618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f61c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f620:	f108 0210 	add.w	r2, r8, #16
 800f624:	46f2      	mov	sl, lr
 800f626:	2100      	movs	r1, #0
 800f628:	f859 3b04 	ldr.w	r3, [r9], #4
 800f62c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f630:	fa1f f883 	uxth.w	r8, r3
 800f634:	fa11 f18b 	uxtah	r1, r1, fp
 800f638:	0c1b      	lsrs	r3, r3, #16
 800f63a:	eba1 0808 	sub.w	r8, r1, r8
 800f63e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f642:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f646:	fa1f f888 	uxth.w	r8, r8
 800f64a:	1419      	asrs	r1, r3, #16
 800f64c:	454e      	cmp	r6, r9
 800f64e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f652:	f84a 3b04 	str.w	r3, [sl], #4
 800f656:	d8e7      	bhi.n	800f628 <__mdiff+0x80>
 800f658:	1b33      	subs	r3, r6, r4
 800f65a:	3b15      	subs	r3, #21
 800f65c:	f023 0303 	bic.w	r3, r3, #3
 800f660:	3304      	adds	r3, #4
 800f662:	3415      	adds	r4, #21
 800f664:	42a6      	cmp	r6, r4
 800f666:	bf38      	it	cc
 800f668:	2304      	movcc	r3, #4
 800f66a:	441d      	add	r5, r3
 800f66c:	4473      	add	r3, lr
 800f66e:	469e      	mov	lr, r3
 800f670:	462e      	mov	r6, r5
 800f672:	4566      	cmp	r6, ip
 800f674:	d30e      	bcc.n	800f694 <__mdiff+0xec>
 800f676:	f10c 0203 	add.w	r2, ip, #3
 800f67a:	1b52      	subs	r2, r2, r5
 800f67c:	f022 0203 	bic.w	r2, r2, #3
 800f680:	3d03      	subs	r5, #3
 800f682:	45ac      	cmp	ip, r5
 800f684:	bf38      	it	cc
 800f686:	2200      	movcc	r2, #0
 800f688:	441a      	add	r2, r3
 800f68a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f68e:	b17b      	cbz	r3, 800f6b0 <__mdiff+0x108>
 800f690:	6107      	str	r7, [r0, #16]
 800f692:	e7a3      	b.n	800f5dc <__mdiff+0x34>
 800f694:	f856 8b04 	ldr.w	r8, [r6], #4
 800f698:	fa11 f288 	uxtah	r2, r1, r8
 800f69c:	1414      	asrs	r4, r2, #16
 800f69e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6a2:	b292      	uxth	r2, r2
 800f6a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f6a8:	f84e 2b04 	str.w	r2, [lr], #4
 800f6ac:	1421      	asrs	r1, r4, #16
 800f6ae:	e7e0      	b.n	800f672 <__mdiff+0xca>
 800f6b0:	3f01      	subs	r7, #1
 800f6b2:	e7ea      	b.n	800f68a <__mdiff+0xe2>
 800f6b4:	08010f81 	.word	0x08010f81
 800f6b8:	0801100c 	.word	0x0801100c

0800f6bc <__ulp>:
 800f6bc:	b082      	sub	sp, #8
 800f6be:	ed8d 0b00 	vstr	d0, [sp]
 800f6c2:	9b01      	ldr	r3, [sp, #4]
 800f6c4:	4912      	ldr	r1, [pc, #72]	; (800f710 <__ulp+0x54>)
 800f6c6:	4019      	ands	r1, r3
 800f6c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	dd05      	ble.n	800f6dc <__ulp+0x20>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	ec43 2b10 	vmov	d0, r2, r3
 800f6d8:	b002      	add	sp, #8
 800f6da:	4770      	bx	lr
 800f6dc:	4249      	negs	r1, r1
 800f6de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f6e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f6e6:	f04f 0200 	mov.w	r2, #0
 800f6ea:	f04f 0300 	mov.w	r3, #0
 800f6ee:	da04      	bge.n	800f6fa <__ulp+0x3e>
 800f6f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f6f4:	fa41 f300 	asr.w	r3, r1, r0
 800f6f8:	e7ec      	b.n	800f6d4 <__ulp+0x18>
 800f6fa:	f1a0 0114 	sub.w	r1, r0, #20
 800f6fe:	291e      	cmp	r1, #30
 800f700:	bfda      	itte	le
 800f702:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f706:	fa20 f101 	lsrle.w	r1, r0, r1
 800f70a:	2101      	movgt	r1, #1
 800f70c:	460a      	mov	r2, r1
 800f70e:	e7e1      	b.n	800f6d4 <__ulp+0x18>
 800f710:	7ff00000 	.word	0x7ff00000

0800f714 <__b2d>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	6905      	ldr	r5, [r0, #16]
 800f718:	f100 0714 	add.w	r7, r0, #20
 800f71c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f720:	1f2e      	subs	r6, r5, #4
 800f722:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f726:	4620      	mov	r0, r4
 800f728:	f7ff fd48 	bl	800f1bc <__hi0bits>
 800f72c:	f1c0 0320 	rsb	r3, r0, #32
 800f730:	280a      	cmp	r0, #10
 800f732:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f7b0 <__b2d+0x9c>
 800f736:	600b      	str	r3, [r1, #0]
 800f738:	dc14      	bgt.n	800f764 <__b2d+0x50>
 800f73a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f73e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f742:	42b7      	cmp	r7, r6
 800f744:	ea41 030c 	orr.w	r3, r1, ip
 800f748:	bf34      	ite	cc
 800f74a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f74e:	2100      	movcs	r1, #0
 800f750:	3015      	adds	r0, #21
 800f752:	fa04 f000 	lsl.w	r0, r4, r0
 800f756:	fa21 f10e 	lsr.w	r1, r1, lr
 800f75a:	ea40 0201 	orr.w	r2, r0, r1
 800f75e:	ec43 2b10 	vmov	d0, r2, r3
 800f762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f764:	42b7      	cmp	r7, r6
 800f766:	bf3a      	itte	cc
 800f768:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f76c:	f1a5 0608 	subcc.w	r6, r5, #8
 800f770:	2100      	movcs	r1, #0
 800f772:	380b      	subs	r0, #11
 800f774:	d017      	beq.n	800f7a6 <__b2d+0x92>
 800f776:	f1c0 0c20 	rsb	ip, r0, #32
 800f77a:	fa04 f500 	lsl.w	r5, r4, r0
 800f77e:	42be      	cmp	r6, r7
 800f780:	fa21 f40c 	lsr.w	r4, r1, ip
 800f784:	ea45 0504 	orr.w	r5, r5, r4
 800f788:	bf8c      	ite	hi
 800f78a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f78e:	2400      	movls	r4, #0
 800f790:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f794:	fa01 f000 	lsl.w	r0, r1, r0
 800f798:	fa24 f40c 	lsr.w	r4, r4, ip
 800f79c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f7a0:	ea40 0204 	orr.w	r2, r0, r4
 800f7a4:	e7db      	b.n	800f75e <__b2d+0x4a>
 800f7a6:	ea44 030c 	orr.w	r3, r4, ip
 800f7aa:	460a      	mov	r2, r1
 800f7ac:	e7d7      	b.n	800f75e <__b2d+0x4a>
 800f7ae:	bf00      	nop
 800f7b0:	3ff00000 	.word	0x3ff00000

0800f7b4 <__d2b>:
 800f7b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	4689      	mov	r9, r1
 800f7ba:	2101      	movs	r1, #1
 800f7bc:	ec57 6b10 	vmov	r6, r7, d0
 800f7c0:	4690      	mov	r8, r2
 800f7c2:	f7ff fc09 	bl	800efd8 <_Balloc>
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	b930      	cbnz	r0, 800f7d8 <__d2b+0x24>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	4b25      	ldr	r3, [pc, #148]	; (800f864 <__d2b+0xb0>)
 800f7ce:	4826      	ldr	r0, [pc, #152]	; (800f868 <__d2b+0xb4>)
 800f7d0:	f240 310a 	movw	r1, #778	; 0x30a
 800f7d4:	f7fe f94c 	bl	800da70 <__assert_func>
 800f7d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f7dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7e0:	bb35      	cbnz	r5, 800f830 <__d2b+0x7c>
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	9301      	str	r3, [sp, #4]
 800f7e6:	d028      	beq.n	800f83a <__d2b+0x86>
 800f7e8:	4668      	mov	r0, sp
 800f7ea:	9600      	str	r6, [sp, #0]
 800f7ec:	f7ff fd06 	bl	800f1fc <__lo0bits>
 800f7f0:	9900      	ldr	r1, [sp, #0]
 800f7f2:	b300      	cbz	r0, 800f836 <__d2b+0x82>
 800f7f4:	9a01      	ldr	r2, [sp, #4]
 800f7f6:	f1c0 0320 	rsb	r3, r0, #32
 800f7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f7fe:	430b      	orrs	r3, r1
 800f800:	40c2      	lsrs	r2, r0
 800f802:	6163      	str	r3, [r4, #20]
 800f804:	9201      	str	r2, [sp, #4]
 800f806:	9b01      	ldr	r3, [sp, #4]
 800f808:	61a3      	str	r3, [r4, #24]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bf14      	ite	ne
 800f80e:	2202      	movne	r2, #2
 800f810:	2201      	moveq	r2, #1
 800f812:	6122      	str	r2, [r4, #16]
 800f814:	b1d5      	cbz	r5, 800f84c <__d2b+0x98>
 800f816:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f81a:	4405      	add	r5, r0
 800f81c:	f8c9 5000 	str.w	r5, [r9]
 800f820:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f824:	f8c8 0000 	str.w	r0, [r8]
 800f828:	4620      	mov	r0, r4
 800f82a:	b003      	add	sp, #12
 800f82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f834:	e7d5      	b.n	800f7e2 <__d2b+0x2e>
 800f836:	6161      	str	r1, [r4, #20]
 800f838:	e7e5      	b.n	800f806 <__d2b+0x52>
 800f83a:	a801      	add	r0, sp, #4
 800f83c:	f7ff fcde 	bl	800f1fc <__lo0bits>
 800f840:	9b01      	ldr	r3, [sp, #4]
 800f842:	6163      	str	r3, [r4, #20]
 800f844:	2201      	movs	r2, #1
 800f846:	6122      	str	r2, [r4, #16]
 800f848:	3020      	adds	r0, #32
 800f84a:	e7e3      	b.n	800f814 <__d2b+0x60>
 800f84c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f854:	f8c9 0000 	str.w	r0, [r9]
 800f858:	6918      	ldr	r0, [r3, #16]
 800f85a:	f7ff fcaf 	bl	800f1bc <__hi0bits>
 800f85e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f862:	e7df      	b.n	800f824 <__d2b+0x70>
 800f864:	08010f81 	.word	0x08010f81
 800f868:	0801100c 	.word	0x0801100c

0800f86c <__ratio>:
 800f86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f870:	4688      	mov	r8, r1
 800f872:	4669      	mov	r1, sp
 800f874:	4681      	mov	r9, r0
 800f876:	f7ff ff4d 	bl	800f714 <__b2d>
 800f87a:	a901      	add	r1, sp, #4
 800f87c:	4640      	mov	r0, r8
 800f87e:	ec55 4b10 	vmov	r4, r5, d0
 800f882:	f7ff ff47 	bl	800f714 <__b2d>
 800f886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f88a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f88e:	eba3 0c02 	sub.w	ip, r3, r2
 800f892:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f89c:	ec51 0b10 	vmov	r0, r1, d0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	bfd6      	itet	le
 800f8a4:	460a      	movle	r2, r1
 800f8a6:	462a      	movgt	r2, r5
 800f8a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8ac:	468b      	mov	fp, r1
 800f8ae:	462f      	mov	r7, r5
 800f8b0:	bfd4      	ite	le
 800f8b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f8b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	ee10 2a10 	vmov	r2, s0
 800f8c0:	465b      	mov	r3, fp
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	f7f0 fff4 	bl	80008b0 <__aeabi_ddiv>
 800f8c8:	ec41 0b10 	vmov	d0, r0, r1
 800f8cc:	b003      	add	sp, #12
 800f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8d2 <__copybits>:
 800f8d2:	3901      	subs	r1, #1
 800f8d4:	b570      	push	{r4, r5, r6, lr}
 800f8d6:	1149      	asrs	r1, r1, #5
 800f8d8:	6914      	ldr	r4, [r2, #16]
 800f8da:	3101      	adds	r1, #1
 800f8dc:	f102 0314 	add.w	r3, r2, #20
 800f8e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8e8:	1f05      	subs	r5, r0, #4
 800f8ea:	42a3      	cmp	r3, r4
 800f8ec:	d30c      	bcc.n	800f908 <__copybits+0x36>
 800f8ee:	1aa3      	subs	r3, r4, r2
 800f8f0:	3b11      	subs	r3, #17
 800f8f2:	f023 0303 	bic.w	r3, r3, #3
 800f8f6:	3211      	adds	r2, #17
 800f8f8:	42a2      	cmp	r2, r4
 800f8fa:	bf88      	it	hi
 800f8fc:	2300      	movhi	r3, #0
 800f8fe:	4418      	add	r0, r3
 800f900:	2300      	movs	r3, #0
 800f902:	4288      	cmp	r0, r1
 800f904:	d305      	bcc.n	800f912 <__copybits+0x40>
 800f906:	bd70      	pop	{r4, r5, r6, pc}
 800f908:	f853 6b04 	ldr.w	r6, [r3], #4
 800f90c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f910:	e7eb      	b.n	800f8ea <__copybits+0x18>
 800f912:	f840 3b04 	str.w	r3, [r0], #4
 800f916:	e7f4      	b.n	800f902 <__copybits+0x30>

0800f918 <__any_on>:
 800f918:	f100 0214 	add.w	r2, r0, #20
 800f91c:	6900      	ldr	r0, [r0, #16]
 800f91e:	114b      	asrs	r3, r1, #5
 800f920:	4298      	cmp	r0, r3
 800f922:	b510      	push	{r4, lr}
 800f924:	db11      	blt.n	800f94a <__any_on+0x32>
 800f926:	dd0a      	ble.n	800f93e <__any_on+0x26>
 800f928:	f011 011f 	ands.w	r1, r1, #31
 800f92c:	d007      	beq.n	800f93e <__any_on+0x26>
 800f92e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f932:	fa24 f001 	lsr.w	r0, r4, r1
 800f936:	fa00 f101 	lsl.w	r1, r0, r1
 800f93a:	428c      	cmp	r4, r1
 800f93c:	d10b      	bne.n	800f956 <__any_on+0x3e>
 800f93e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f942:	4293      	cmp	r3, r2
 800f944:	d803      	bhi.n	800f94e <__any_on+0x36>
 800f946:	2000      	movs	r0, #0
 800f948:	bd10      	pop	{r4, pc}
 800f94a:	4603      	mov	r3, r0
 800f94c:	e7f7      	b.n	800f93e <__any_on+0x26>
 800f94e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f952:	2900      	cmp	r1, #0
 800f954:	d0f5      	beq.n	800f942 <__any_on+0x2a>
 800f956:	2001      	movs	r0, #1
 800f958:	e7f6      	b.n	800f948 <__any_on+0x30>

0800f95a <_calloc_r>:
 800f95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f95c:	fba1 2402 	umull	r2, r4, r1, r2
 800f960:	b94c      	cbnz	r4, 800f976 <_calloc_r+0x1c>
 800f962:	4611      	mov	r1, r2
 800f964:	9201      	str	r2, [sp, #4]
 800f966:	f7fb fedb 	bl	800b720 <_malloc_r>
 800f96a:	9a01      	ldr	r2, [sp, #4]
 800f96c:	4605      	mov	r5, r0
 800f96e:	b930      	cbnz	r0, 800f97e <_calloc_r+0x24>
 800f970:	4628      	mov	r0, r5
 800f972:	b003      	add	sp, #12
 800f974:	bd30      	pop	{r4, r5, pc}
 800f976:	220c      	movs	r2, #12
 800f978:	6002      	str	r2, [r0, #0]
 800f97a:	2500      	movs	r5, #0
 800f97c:	e7f8      	b.n	800f970 <_calloc_r+0x16>
 800f97e:	4621      	mov	r1, r4
 800f980:	f7fb fe5a 	bl	800b638 <memset>
 800f984:	e7f4      	b.n	800f970 <_calloc_r+0x16>

0800f986 <_realloc_r>:
 800f986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98a:	4680      	mov	r8, r0
 800f98c:	4614      	mov	r4, r2
 800f98e:	460e      	mov	r6, r1
 800f990:	b921      	cbnz	r1, 800f99c <_realloc_r+0x16>
 800f992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f996:	4611      	mov	r1, r2
 800f998:	f7fb bec2 	b.w	800b720 <_malloc_r>
 800f99c:	b92a      	cbnz	r2, 800f9aa <_realloc_r+0x24>
 800f99e:	f7fb fe53 	bl	800b648 <_free_r>
 800f9a2:	4625      	mov	r5, r4
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9aa:	f000 fa15 	bl	800fdd8 <_malloc_usable_size_r>
 800f9ae:	4284      	cmp	r4, r0
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	d802      	bhi.n	800f9ba <_realloc_r+0x34>
 800f9b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9b8:	d812      	bhi.n	800f9e0 <_realloc_r+0x5a>
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	4640      	mov	r0, r8
 800f9be:	f7fb feaf 	bl	800b720 <_malloc_r>
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d0ed      	beq.n	800f9a4 <_realloc_r+0x1e>
 800f9c8:	42bc      	cmp	r4, r7
 800f9ca:	4622      	mov	r2, r4
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	bf28      	it	cs
 800f9d0:	463a      	movcs	r2, r7
 800f9d2:	f7fb fe09 	bl	800b5e8 <memcpy>
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4640      	mov	r0, r8
 800f9da:	f7fb fe35 	bl	800b648 <_free_r>
 800f9de:	e7e1      	b.n	800f9a4 <_realloc_r+0x1e>
 800f9e0:	4635      	mov	r5, r6
 800f9e2:	e7df      	b.n	800f9a4 <_realloc_r+0x1e>

0800f9e4 <__ssputs_r>:
 800f9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e8:	688e      	ldr	r6, [r1, #8]
 800f9ea:	429e      	cmp	r6, r3
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	4690      	mov	r8, r2
 800f9f2:	461f      	mov	r7, r3
 800f9f4:	d838      	bhi.n	800fa68 <__ssputs_r+0x84>
 800f9f6:	898a      	ldrh	r2, [r1, #12]
 800f9f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9fc:	d032      	beq.n	800fa64 <__ssputs_r+0x80>
 800f9fe:	6825      	ldr	r5, [r4, #0]
 800fa00:	6909      	ldr	r1, [r1, #16]
 800fa02:	eba5 0901 	sub.w	r9, r5, r1
 800fa06:	6965      	ldr	r5, [r4, #20]
 800fa08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa10:	3301      	adds	r3, #1
 800fa12:	444b      	add	r3, r9
 800fa14:	106d      	asrs	r5, r5, #1
 800fa16:	429d      	cmp	r5, r3
 800fa18:	bf38      	it	cc
 800fa1a:	461d      	movcc	r5, r3
 800fa1c:	0553      	lsls	r3, r2, #21
 800fa1e:	d531      	bpl.n	800fa84 <__ssputs_r+0xa0>
 800fa20:	4629      	mov	r1, r5
 800fa22:	f7fb fe7d 	bl	800b720 <_malloc_r>
 800fa26:	4606      	mov	r6, r0
 800fa28:	b950      	cbnz	r0, 800fa40 <__ssputs_r+0x5c>
 800fa2a:	230c      	movs	r3, #12
 800fa2c:	f8ca 3000 	str.w	r3, [sl]
 800fa30:	89a3      	ldrh	r3, [r4, #12]
 800fa32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa36:	81a3      	strh	r3, [r4, #12]
 800fa38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa40:	6921      	ldr	r1, [r4, #16]
 800fa42:	464a      	mov	r2, r9
 800fa44:	f7fb fdd0 	bl	800b5e8 <memcpy>
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa52:	81a3      	strh	r3, [r4, #12]
 800fa54:	6126      	str	r6, [r4, #16]
 800fa56:	6165      	str	r5, [r4, #20]
 800fa58:	444e      	add	r6, r9
 800fa5a:	eba5 0509 	sub.w	r5, r5, r9
 800fa5e:	6026      	str	r6, [r4, #0]
 800fa60:	60a5      	str	r5, [r4, #8]
 800fa62:	463e      	mov	r6, r7
 800fa64:	42be      	cmp	r6, r7
 800fa66:	d900      	bls.n	800fa6a <__ssputs_r+0x86>
 800fa68:	463e      	mov	r6, r7
 800fa6a:	6820      	ldr	r0, [r4, #0]
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4641      	mov	r1, r8
 800fa70:	f7fb fdc8 	bl	800b604 <memmove>
 800fa74:	68a3      	ldr	r3, [r4, #8]
 800fa76:	1b9b      	subs	r3, r3, r6
 800fa78:	60a3      	str	r3, [r4, #8]
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	4433      	add	r3, r6
 800fa7e:	6023      	str	r3, [r4, #0]
 800fa80:	2000      	movs	r0, #0
 800fa82:	e7db      	b.n	800fa3c <__ssputs_r+0x58>
 800fa84:	462a      	mov	r2, r5
 800fa86:	f7ff ff7e 	bl	800f986 <_realloc_r>
 800fa8a:	4606      	mov	r6, r0
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d1e1      	bne.n	800fa54 <__ssputs_r+0x70>
 800fa90:	6921      	ldr	r1, [r4, #16]
 800fa92:	4650      	mov	r0, sl
 800fa94:	f7fb fdd8 	bl	800b648 <_free_r>
 800fa98:	e7c7      	b.n	800fa2a <__ssputs_r+0x46>
	...

0800fa9c <_svfiprintf_r>:
 800fa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa0:	4698      	mov	r8, r3
 800faa2:	898b      	ldrh	r3, [r1, #12]
 800faa4:	061b      	lsls	r3, r3, #24
 800faa6:	b09d      	sub	sp, #116	; 0x74
 800faa8:	4607      	mov	r7, r0
 800faaa:	460d      	mov	r5, r1
 800faac:	4614      	mov	r4, r2
 800faae:	d50e      	bpl.n	800face <_svfiprintf_r+0x32>
 800fab0:	690b      	ldr	r3, [r1, #16]
 800fab2:	b963      	cbnz	r3, 800face <_svfiprintf_r+0x32>
 800fab4:	2140      	movs	r1, #64	; 0x40
 800fab6:	f7fb fe33 	bl	800b720 <_malloc_r>
 800faba:	6028      	str	r0, [r5, #0]
 800fabc:	6128      	str	r0, [r5, #16]
 800fabe:	b920      	cbnz	r0, 800faca <_svfiprintf_r+0x2e>
 800fac0:	230c      	movs	r3, #12
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac8:	e0d1      	b.n	800fc6e <_svfiprintf_r+0x1d2>
 800faca:	2340      	movs	r3, #64	; 0x40
 800facc:	616b      	str	r3, [r5, #20]
 800face:	2300      	movs	r3, #0
 800fad0:	9309      	str	r3, [sp, #36]	; 0x24
 800fad2:	2320      	movs	r3, #32
 800fad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fad8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fadc:	2330      	movs	r3, #48	; 0x30
 800fade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc88 <_svfiprintf_r+0x1ec>
 800fae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fae6:	f04f 0901 	mov.w	r9, #1
 800faea:	4623      	mov	r3, r4
 800faec:	469a      	mov	sl, r3
 800faee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faf2:	b10a      	cbz	r2, 800faf8 <_svfiprintf_r+0x5c>
 800faf4:	2a25      	cmp	r2, #37	; 0x25
 800faf6:	d1f9      	bne.n	800faec <_svfiprintf_r+0x50>
 800faf8:	ebba 0b04 	subs.w	fp, sl, r4
 800fafc:	d00b      	beq.n	800fb16 <_svfiprintf_r+0x7a>
 800fafe:	465b      	mov	r3, fp
 800fb00:	4622      	mov	r2, r4
 800fb02:	4629      	mov	r1, r5
 800fb04:	4638      	mov	r0, r7
 800fb06:	f7ff ff6d 	bl	800f9e4 <__ssputs_r>
 800fb0a:	3001      	adds	r0, #1
 800fb0c:	f000 80aa 	beq.w	800fc64 <_svfiprintf_r+0x1c8>
 800fb10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb12:	445a      	add	r2, fp
 800fb14:	9209      	str	r2, [sp, #36]	; 0x24
 800fb16:	f89a 3000 	ldrb.w	r3, [sl]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 80a2 	beq.w	800fc64 <_svfiprintf_r+0x1c8>
 800fb20:	2300      	movs	r3, #0
 800fb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb2a:	f10a 0a01 	add.w	sl, sl, #1
 800fb2e:	9304      	str	r3, [sp, #16]
 800fb30:	9307      	str	r3, [sp, #28]
 800fb32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb36:	931a      	str	r3, [sp, #104]	; 0x68
 800fb38:	4654      	mov	r4, sl
 800fb3a:	2205      	movs	r2, #5
 800fb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb40:	4851      	ldr	r0, [pc, #324]	; (800fc88 <_svfiprintf_r+0x1ec>)
 800fb42:	f7f0 fb6d 	bl	8000220 <memchr>
 800fb46:	9a04      	ldr	r2, [sp, #16]
 800fb48:	b9d8      	cbnz	r0, 800fb82 <_svfiprintf_r+0xe6>
 800fb4a:	06d0      	lsls	r0, r2, #27
 800fb4c:	bf44      	itt	mi
 800fb4e:	2320      	movmi	r3, #32
 800fb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb54:	0711      	lsls	r1, r2, #28
 800fb56:	bf44      	itt	mi
 800fb58:	232b      	movmi	r3, #43	; 0x2b
 800fb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb62:	2b2a      	cmp	r3, #42	; 0x2a
 800fb64:	d015      	beq.n	800fb92 <_svfiprintf_r+0xf6>
 800fb66:	9a07      	ldr	r2, [sp, #28]
 800fb68:	4654      	mov	r4, sl
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	f04f 0c0a 	mov.w	ip, #10
 800fb70:	4621      	mov	r1, r4
 800fb72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb76:	3b30      	subs	r3, #48	; 0x30
 800fb78:	2b09      	cmp	r3, #9
 800fb7a:	d94e      	bls.n	800fc1a <_svfiprintf_r+0x17e>
 800fb7c:	b1b0      	cbz	r0, 800fbac <_svfiprintf_r+0x110>
 800fb7e:	9207      	str	r2, [sp, #28]
 800fb80:	e014      	b.n	800fbac <_svfiprintf_r+0x110>
 800fb82:	eba0 0308 	sub.w	r3, r0, r8
 800fb86:	fa09 f303 	lsl.w	r3, r9, r3
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	9304      	str	r3, [sp, #16]
 800fb8e:	46a2      	mov	sl, r4
 800fb90:	e7d2      	b.n	800fb38 <_svfiprintf_r+0x9c>
 800fb92:	9b03      	ldr	r3, [sp, #12]
 800fb94:	1d19      	adds	r1, r3, #4
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	9103      	str	r1, [sp, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	bfbb      	ittet	lt
 800fb9e:	425b      	neglt	r3, r3
 800fba0:	f042 0202 	orrlt.w	r2, r2, #2
 800fba4:	9307      	strge	r3, [sp, #28]
 800fba6:	9307      	strlt	r3, [sp, #28]
 800fba8:	bfb8      	it	lt
 800fbaa:	9204      	strlt	r2, [sp, #16]
 800fbac:	7823      	ldrb	r3, [r4, #0]
 800fbae:	2b2e      	cmp	r3, #46	; 0x2e
 800fbb0:	d10c      	bne.n	800fbcc <_svfiprintf_r+0x130>
 800fbb2:	7863      	ldrb	r3, [r4, #1]
 800fbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800fbb6:	d135      	bne.n	800fc24 <_svfiprintf_r+0x188>
 800fbb8:	9b03      	ldr	r3, [sp, #12]
 800fbba:	1d1a      	adds	r2, r3, #4
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	9203      	str	r2, [sp, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	bfb8      	it	lt
 800fbc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fbc8:	3402      	adds	r4, #2
 800fbca:	9305      	str	r3, [sp, #20]
 800fbcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc98 <_svfiprintf_r+0x1fc>
 800fbd0:	7821      	ldrb	r1, [r4, #0]
 800fbd2:	2203      	movs	r2, #3
 800fbd4:	4650      	mov	r0, sl
 800fbd6:	f7f0 fb23 	bl	8000220 <memchr>
 800fbda:	b140      	cbz	r0, 800fbee <_svfiprintf_r+0x152>
 800fbdc:	2340      	movs	r3, #64	; 0x40
 800fbde:	eba0 000a 	sub.w	r0, r0, sl
 800fbe2:	fa03 f000 	lsl.w	r0, r3, r0
 800fbe6:	9b04      	ldr	r3, [sp, #16]
 800fbe8:	4303      	orrs	r3, r0
 800fbea:	3401      	adds	r4, #1
 800fbec:	9304      	str	r3, [sp, #16]
 800fbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf2:	4826      	ldr	r0, [pc, #152]	; (800fc8c <_svfiprintf_r+0x1f0>)
 800fbf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbf8:	2206      	movs	r2, #6
 800fbfa:	f7f0 fb11 	bl	8000220 <memchr>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d038      	beq.n	800fc74 <_svfiprintf_r+0x1d8>
 800fc02:	4b23      	ldr	r3, [pc, #140]	; (800fc90 <_svfiprintf_r+0x1f4>)
 800fc04:	bb1b      	cbnz	r3, 800fc4e <_svfiprintf_r+0x1b2>
 800fc06:	9b03      	ldr	r3, [sp, #12]
 800fc08:	3307      	adds	r3, #7
 800fc0a:	f023 0307 	bic.w	r3, r3, #7
 800fc0e:	3308      	adds	r3, #8
 800fc10:	9303      	str	r3, [sp, #12]
 800fc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc14:	4433      	add	r3, r6
 800fc16:	9309      	str	r3, [sp, #36]	; 0x24
 800fc18:	e767      	b.n	800faea <_svfiprintf_r+0x4e>
 800fc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc1e:	460c      	mov	r4, r1
 800fc20:	2001      	movs	r0, #1
 800fc22:	e7a5      	b.n	800fb70 <_svfiprintf_r+0xd4>
 800fc24:	2300      	movs	r3, #0
 800fc26:	3401      	adds	r4, #1
 800fc28:	9305      	str	r3, [sp, #20]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	f04f 0c0a 	mov.w	ip, #10
 800fc30:	4620      	mov	r0, r4
 800fc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc36:	3a30      	subs	r2, #48	; 0x30
 800fc38:	2a09      	cmp	r2, #9
 800fc3a:	d903      	bls.n	800fc44 <_svfiprintf_r+0x1a8>
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d0c5      	beq.n	800fbcc <_svfiprintf_r+0x130>
 800fc40:	9105      	str	r1, [sp, #20]
 800fc42:	e7c3      	b.n	800fbcc <_svfiprintf_r+0x130>
 800fc44:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc48:	4604      	mov	r4, r0
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e7f0      	b.n	800fc30 <_svfiprintf_r+0x194>
 800fc4e:	ab03      	add	r3, sp, #12
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	462a      	mov	r2, r5
 800fc54:	4b0f      	ldr	r3, [pc, #60]	; (800fc94 <_svfiprintf_r+0x1f8>)
 800fc56:	a904      	add	r1, sp, #16
 800fc58:	4638      	mov	r0, r7
 800fc5a:	f7fb ffcf 	bl	800bbfc <_printf_float>
 800fc5e:	1c42      	adds	r2, r0, #1
 800fc60:	4606      	mov	r6, r0
 800fc62:	d1d6      	bne.n	800fc12 <_svfiprintf_r+0x176>
 800fc64:	89ab      	ldrh	r3, [r5, #12]
 800fc66:	065b      	lsls	r3, r3, #25
 800fc68:	f53f af2c 	bmi.w	800fac4 <_svfiprintf_r+0x28>
 800fc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc6e:	b01d      	add	sp, #116	; 0x74
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	ab03      	add	r3, sp, #12
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	462a      	mov	r2, r5
 800fc7a:	4b06      	ldr	r3, [pc, #24]	; (800fc94 <_svfiprintf_r+0x1f8>)
 800fc7c:	a904      	add	r1, sp, #16
 800fc7e:	4638      	mov	r0, r7
 800fc80:	f7fc fa60 	bl	800c144 <_printf_i>
 800fc84:	e7eb      	b.n	800fc5e <_svfiprintf_r+0x1c2>
 800fc86:	bf00      	nop
 800fc88:	08010cc8 	.word	0x08010cc8
 800fc8c:	08010cd2 	.word	0x08010cd2
 800fc90:	0800bbfd 	.word	0x0800bbfd
 800fc94:	0800f9e5 	.word	0x0800f9e5
 800fc98:	08010cce 	.word	0x08010cce

0800fc9c <_putc_r>:
 800fc9c:	b570      	push	{r4, r5, r6, lr}
 800fc9e:	460d      	mov	r5, r1
 800fca0:	4614      	mov	r4, r2
 800fca2:	4606      	mov	r6, r0
 800fca4:	b118      	cbz	r0, 800fcae <_putc_r+0x12>
 800fca6:	6983      	ldr	r3, [r0, #24]
 800fca8:	b90b      	cbnz	r3, 800fcae <_putc_r+0x12>
 800fcaa:	f7fb fba5 	bl	800b3f8 <__sinit>
 800fcae:	4b1c      	ldr	r3, [pc, #112]	; (800fd20 <_putc_r+0x84>)
 800fcb0:	429c      	cmp	r4, r3
 800fcb2:	d124      	bne.n	800fcfe <_putc_r+0x62>
 800fcb4:	6874      	ldr	r4, [r6, #4]
 800fcb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcb8:	07d8      	lsls	r0, r3, #31
 800fcba:	d405      	bmi.n	800fcc8 <_putc_r+0x2c>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	0599      	lsls	r1, r3, #22
 800fcc0:	d402      	bmi.n	800fcc8 <_putc_r+0x2c>
 800fcc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcc4:	f7fb fc6d 	bl	800b5a2 <__retarget_lock_acquire_recursive>
 800fcc8:	68a3      	ldr	r3, [r4, #8]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	60a3      	str	r3, [r4, #8]
 800fcd0:	da05      	bge.n	800fcde <_putc_r+0x42>
 800fcd2:	69a2      	ldr	r2, [r4, #24]
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	db1c      	blt.n	800fd12 <_putc_r+0x76>
 800fcd8:	b2eb      	uxtb	r3, r5
 800fcda:	2b0a      	cmp	r3, #10
 800fcdc:	d019      	beq.n	800fd12 <_putc_r+0x76>
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	1c5a      	adds	r2, r3, #1
 800fce2:	6022      	str	r2, [r4, #0]
 800fce4:	701d      	strb	r5, [r3, #0]
 800fce6:	b2ed      	uxtb	r5, r5
 800fce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcea:	07da      	lsls	r2, r3, #31
 800fcec:	d405      	bmi.n	800fcfa <_putc_r+0x5e>
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	059b      	lsls	r3, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_putc_r+0x5e>
 800fcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcf6:	f7fb fc55 	bl	800b5a4 <__retarget_lock_release_recursive>
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	bd70      	pop	{r4, r5, r6, pc}
 800fcfe:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <_putc_r+0x88>)
 800fd00:	429c      	cmp	r4, r3
 800fd02:	d101      	bne.n	800fd08 <_putc_r+0x6c>
 800fd04:	68b4      	ldr	r4, [r6, #8]
 800fd06:	e7d6      	b.n	800fcb6 <_putc_r+0x1a>
 800fd08:	4b07      	ldr	r3, [pc, #28]	; (800fd28 <_putc_r+0x8c>)
 800fd0a:	429c      	cmp	r4, r3
 800fd0c:	bf08      	it	eq
 800fd0e:	68f4      	ldreq	r4, [r6, #12]
 800fd10:	e7d1      	b.n	800fcb6 <_putc_r+0x1a>
 800fd12:	4629      	mov	r1, r5
 800fd14:	4622      	mov	r2, r4
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7fd fdd8 	bl	800d8cc <__swbuf_r>
 800fd1c:	4605      	mov	r5, r0
 800fd1e:	e7e3      	b.n	800fce8 <_putc_r+0x4c>
 800fd20:	08010c84 	.word	0x08010c84
 800fd24:	08010ca4 	.word	0x08010ca4
 800fd28:	08010c64 	.word	0x08010c64

0800fd2c <_read_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4d07      	ldr	r5, [pc, #28]	; (800fd4c <_read_r+0x20>)
 800fd30:	4604      	mov	r4, r0
 800fd32:	4608      	mov	r0, r1
 800fd34:	4611      	mov	r1, r2
 800fd36:	2200      	movs	r2, #0
 800fd38:	602a      	str	r2, [r5, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f7f4 f89d 	bl	8003e7a <_read>
 800fd40:	1c43      	adds	r3, r0, #1
 800fd42:	d102      	bne.n	800fd4a <_read_r+0x1e>
 800fd44:	682b      	ldr	r3, [r5, #0]
 800fd46:	b103      	cbz	r3, 800fd4a <_read_r+0x1e>
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	bd38      	pop	{r3, r4, r5, pc}
 800fd4c:	20000a18 	.word	0x20000a18

0800fd50 <strncmp>:
 800fd50:	b510      	push	{r4, lr}
 800fd52:	b17a      	cbz	r2, 800fd74 <strncmp+0x24>
 800fd54:	4603      	mov	r3, r0
 800fd56:	3901      	subs	r1, #1
 800fd58:	1884      	adds	r4, r0, r2
 800fd5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd62:	4290      	cmp	r0, r2
 800fd64:	d101      	bne.n	800fd6a <strncmp+0x1a>
 800fd66:	42a3      	cmp	r3, r4
 800fd68:	d101      	bne.n	800fd6e <strncmp+0x1e>
 800fd6a:	1a80      	subs	r0, r0, r2
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d1f3      	bne.n	800fd5a <strncmp+0xa>
 800fd72:	e7fa      	b.n	800fd6a <strncmp+0x1a>
 800fd74:	4610      	mov	r0, r2
 800fd76:	e7f9      	b.n	800fd6c <strncmp+0x1c>

0800fd78 <__ascii_wctomb>:
 800fd78:	b149      	cbz	r1, 800fd8e <__ascii_wctomb+0x16>
 800fd7a:	2aff      	cmp	r2, #255	; 0xff
 800fd7c:	bf85      	ittet	hi
 800fd7e:	238a      	movhi	r3, #138	; 0x8a
 800fd80:	6003      	strhi	r3, [r0, #0]
 800fd82:	700a      	strbls	r2, [r1, #0]
 800fd84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fd88:	bf98      	it	ls
 800fd8a:	2001      	movls	r0, #1
 800fd8c:	4770      	bx	lr
 800fd8e:	4608      	mov	r0, r1
 800fd90:	4770      	bx	lr
	...

0800fd94 <_fstat_r>:
 800fd94:	b538      	push	{r3, r4, r5, lr}
 800fd96:	4d07      	ldr	r5, [pc, #28]	; (800fdb4 <_fstat_r+0x20>)
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	4608      	mov	r0, r1
 800fd9e:	4611      	mov	r1, r2
 800fda0:	602b      	str	r3, [r5, #0]
 800fda2:	f7f4 f893 	bl	8003ecc <_fstat>
 800fda6:	1c43      	adds	r3, r0, #1
 800fda8:	d102      	bne.n	800fdb0 <_fstat_r+0x1c>
 800fdaa:	682b      	ldr	r3, [r5, #0]
 800fdac:	b103      	cbz	r3, 800fdb0 <_fstat_r+0x1c>
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	bd38      	pop	{r3, r4, r5, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20000a18 	.word	0x20000a18

0800fdb8 <_isatty_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4d06      	ldr	r5, [pc, #24]	; (800fdd4 <_isatty_r+0x1c>)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	602b      	str	r3, [r5, #0]
 800fdc4:	f7f4 f892 	bl	8003eec <_isatty>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d102      	bne.n	800fdd2 <_isatty_r+0x1a>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	b103      	cbz	r3, 800fdd2 <_isatty_r+0x1a>
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	20000a18 	.word	0x20000a18

0800fdd8 <_malloc_usable_size_r>:
 800fdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fddc:	1f18      	subs	r0, r3, #4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	bfbc      	itt	lt
 800fde2:	580b      	ldrlt	r3, [r1, r0]
 800fde4:	18c0      	addlt	r0, r0, r3
 800fde6:	4770      	bx	lr

0800fde8 <_init>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	bf00      	nop
 800fdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdee:	bc08      	pop	{r3}
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	4770      	bx	lr

0800fdf4 <_fini>:
 800fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf6:	bf00      	nop
 800fdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdfa:	bc08      	pop	{r3}
 800fdfc:	469e      	mov	lr, r3
 800fdfe:	4770      	bx	lr
