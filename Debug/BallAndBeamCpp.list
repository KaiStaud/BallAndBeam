
BallAndBeamCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012dc  0800e7a0  0800e7a0  0001e7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa7c  0800fa7c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa7c  0800fa7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa84  0800fa84  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa84  0800fa84  0001fa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa88  0800fa88  0001fa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800fa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000200  0800fc8c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800fc8c  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8b1  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000415e  00000000  00000000  0004eae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00052c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  00054608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6ee  00000000  00000000  00055ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddd7  00000000  00000000  0008458e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d824  00000000  00000000  000a2365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bfb89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b7c  00000000  00000000  001bfbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e788 	.word	0x0800e788

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800e788 	.word	0x0800e788

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2uiz>:
 8000c0c:	004a      	lsls	r2, r1, #1
 8000c0e:	d211      	bcs.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d211      	bcs.n	8000c3a <__aeabi_d2uiz+0x2e>
 8000c16:	d50d      	bpl.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d40e      	bmi.n	8000c40 <__aeabi_d2uiz+0x34>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_d2uiz+0x3a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 b9aa 	b.w	8001058 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f83c 	bl	8000d88 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	460d      	mov	r5, r1
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_dcmplt>
 8000d2a:	b928      	cbnz	r0, 8000d38 <__aeabi_d2lz+0x1c>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d34:	f000 b80a 	b.w	8000d4c <__aeabi_d2ulz>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3e:	f000 f805 	bl	8000d4c <__aeabi_d2ulz>
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop

08000d4c <__aeabi_d2ulz>:
 8000d4c:	b5d0      	push	{r4, r6, r7, lr}
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__aeabi_d2ulz+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc81 	bl	800065c <__aeabi_dmul>
 8000d5a:	f7ff ff57 	bl	8000c0c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <__aeabi_d2ulz+0x38>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc78 	bl	800065c <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff faba 	bl	80002ec <__aeabi_dsub>
 8000d78:	f7ff ff48 	bl	8000c0c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <__udivmoddi4>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	9d08      	ldr	r5, [sp, #32]
 8000d8e:	4604      	mov	r4, r0
 8000d90:	468e      	mov	lr, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14d      	bne.n	8000e32 <__udivmoddi4+0xaa>
 8000d96:	428a      	cmp	r2, r1
 8000d98:	4694      	mov	ip, r2
 8000d9a:	d969      	bls.n	8000e70 <__udivmoddi4+0xe8>
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b152      	cbz	r2, 8000db8 <__udivmoddi4+0x30>
 8000da2:	fa01 f302 	lsl.w	r3, r1, r2
 8000da6:	f1c2 0120 	rsb	r1, r2, #32
 8000daa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db2:	ea41 0e03 	orr.w	lr, r1, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	0c21      	lsrs	r1, r4, #16
 8000dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000dc2:	fa1f f78c 	uxth.w	r7, ip
 8000dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dce:	fb06 f107 	mul.w	r1, r6, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x64>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dde:	f080 811f 	bcs.w	8001020 <__udivmoddi4+0x298>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 811c 	bls.w	8001020 <__udivmoddi4+0x298>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb00 f707 	mul.w	r7, r0, r7
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x92>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0c:	f080 810a 	bcs.w	8001024 <__udivmoddi4+0x29c>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f240 8107 	bls.w	8001024 <__udivmoddi4+0x29c>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1e:	1be4      	subs	r4, r4, r7
 8000e20:	2600      	movs	r6, #0
 8000e22:	b11d      	cbz	r5, 8000e2c <__udivmoddi4+0xa4>
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c5 4300 	strd	r4, r3, [r5]
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0xc2>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80ef 	beq.w	800101a <__udivmoddi4+0x292>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x160>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xd4>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80f9 	bhi.w	800104e <__udivmoddi4+0x2c6>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	469e      	mov	lr, r3
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e0      	beq.n	8000e2c <__udivmoddi4+0xa4>
 8000e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6e:	e7dd      	b.n	8000e2c <__udivmoddi4+0xa4>
 8000e70:	b902      	cbnz	r2, 8000e74 <__udivmoddi4+0xec>
 8000e72:	deff      	udf	#255	; 0xff
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 8092 	bne.w	8000fa2 <__udivmoddi4+0x21a>
 8000e7e:	eba1 010c 	sub.w	r1, r1, ip
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f fe8c 	uxth.w	lr, ip
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	0c20      	lsrs	r0, r4, #16
 8000e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e92:	fb07 1113 	mls	r1, r7, r3, r1
 8000e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9a:	fb0e f003 	mul.w	r0, lr, r3
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x12c>
 8000ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x12a>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f200 80cb 	bhi.w	8001048 <__udivmoddi4+0x2c0>
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	1a09      	subs	r1, r1, r0
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x156>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x154>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f200 80bb 	bhi.w	8001052 <__udivmoddi4+0x2ca>
 8000edc:	4608      	mov	r0, r1
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee6:	e79c      	b.n	8000e22 <__udivmoddi4+0x9a>
 8000ee8:	f1c6 0720 	rsb	r7, r6, #32
 8000eec:	40b3      	lsls	r3, r6
 8000eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	431c      	orrs	r4, r3
 8000f00:	40f9      	lsrs	r1, r7
 8000f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f06:	fa00 f306 	lsl.w	r3, r0, r6
 8000f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0e:	0c20      	lsrs	r0, r4, #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fb09 1118 	mls	r1, r9, r8, r1
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f20:	4288      	cmp	r0, r1
 8000f22:	fa02 f206 	lsl.w	r2, r2, r6
 8000f26:	d90b      	bls.n	8000f40 <__udivmoddi4+0x1b8>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f30:	f080 8088 	bcs.w	8001044 <__udivmoddi4+0x2bc>
 8000f34:	4288      	cmp	r0, r1
 8000f36:	f240 8085 	bls.w	8001044 <__udivmoddi4+0x2bc>
 8000f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f48:	fb09 1110 	mls	r1, r9, r0, r1
 8000f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f54:	458e      	cmp	lr, r1
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x1e2>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f60:	d26c      	bcs.n	800103c <__udivmoddi4+0x2b4>
 8000f62:	458e      	cmp	lr, r1
 8000f64:	d96a      	bls.n	800103c <__udivmoddi4+0x2b4>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4461      	add	r1, ip
 8000f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f72:	eba1 010e 	sub.w	r1, r1, lr
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	46a6      	mov	lr, r4
 8000f7c:	d356      	bcc.n	800102c <__udivmoddi4+0x2a4>
 8000f7e:	d053      	beq.n	8001028 <__udivmoddi4+0x2a0>
 8000f80:	b15d      	cbz	r5, 8000f9a <__udivmoddi4+0x212>
 8000f82:	ebb3 0208 	subs.w	r2, r3, r8
 8000f86:	eb61 010e 	sbc.w	r1, r1, lr
 8000f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f92:	40f1      	lsrs	r1, r6
 8000f94:	431f      	orrs	r7, r3
 8000f96:	e9c5 7100 	strd	r7, r1, [r5]
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	40d8      	lsrs	r0, r3
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fca:	fb00 f60e 	mul.w	r6, r0, lr
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x260>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fde:	d22f      	bcs.n	8001040 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d92d      	bls.n	8001040 <__udivmoddi4+0x2b8>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	b289      	uxth	r1, r1
 8000fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x28a>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001008:	d216      	bcs.n	8001038 <__udivmoddi4+0x2b0>
 800100a:	428b      	cmp	r3, r1
 800100c:	d914      	bls.n	8001038 <__udivmoddi4+0x2b0>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001018:	e738      	b.n	8000e8c <__udivmoddi4+0x104>
 800101a:	462e      	mov	r6, r5
 800101c:	4628      	mov	r0, r5
 800101e:	e705      	b.n	8000e2c <__udivmoddi4+0xa4>
 8001020:	4606      	mov	r6, r0
 8001022:	e6e3      	b.n	8000dec <__udivmoddi4+0x64>
 8001024:	4618      	mov	r0, r3
 8001026:	e6f8      	b.n	8000e1a <__udivmoddi4+0x92>
 8001028:	454b      	cmp	r3, r9
 800102a:	d2a9      	bcs.n	8000f80 <__udivmoddi4+0x1f8>
 800102c:	ebb9 0802 	subs.w	r8, r9, r2
 8001030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001034:	3801      	subs	r0, #1
 8001036:	e7a3      	b.n	8000f80 <__udivmoddi4+0x1f8>
 8001038:	4646      	mov	r6, r8
 800103a:	e7ea      	b.n	8001012 <__udivmoddi4+0x28a>
 800103c:	4620      	mov	r0, r4
 800103e:	e794      	b.n	8000f6a <__udivmoddi4+0x1e2>
 8001040:	4640      	mov	r0, r8
 8001042:	e7d1      	b.n	8000fe8 <__udivmoddi4+0x260>
 8001044:	46d0      	mov	r8, sl
 8001046:	e77b      	b.n	8000f40 <__udivmoddi4+0x1b8>
 8001048:	3b02      	subs	r3, #2
 800104a:	4461      	add	r1, ip
 800104c:	e732      	b.n	8000eb4 <__udivmoddi4+0x12c>
 800104e:	4630      	mov	r0, r6
 8001050:	e709      	b.n	8000e66 <__udivmoddi4+0xde>
 8001052:	4464      	add	r4, ip
 8001054:	3802      	subs	r0, #2
 8001056:	e742      	b.n	8000ede <__udivmoddi4+0x156>

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
 8001066:	edd7 7a01 	vldr	s15, [r7, #4]
 800106a:	eef0 7ae7 	vabs.f32	s15, s15
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>:
ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w, int addr) {
	_wire = w;
	i2cAddress = addr;
}

ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	_wire = w;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	601a      	str	r2, [r3, #0]
	i2cAddress = 210; //0x68;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	22d2      	movs	r2, #210	; 0xd2
 8001090:	605a      	str	r2, [r3, #4]
}
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN11ICM20948_WE4initEv>:

/************ Basic Settings ************/

bool ICM20948_WE::init() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	currentBank = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	721a      	strb	r2, [r3, #8]
	if (!reset_ICM20948()) {
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fcd9 	bl	8001a66 <_ZN11ICM20948_WE14reset_ICM20948Ev>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZN11ICM20948_WE4initEv+0x28>
		return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e03a      	b.n	800113e <_ZN11ICM20948_WE4initEv+0x9e>
	}

	accOffsetVal.x = 0.0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
	accCorrFactor.x = 1.0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = 1.0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = 1.0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
	accRangeFactor = 1.0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gyrOffsetVal.x = 0.0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
	gyrOffsetVal.y = 0.0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
	gyrOffsetVal.z = 0.0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
	gyrRangeFactor = 1.0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	fifoType = ICM20948_FIFO_ACC;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2210      	movs	r2, #16
 8001124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	sleep(false);
 8001128:	2100      	movs	r1, #0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fb9b 	bl	8001866 <_ZN11ICM20948_WE5sleepEb>
	writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR 
 8001130:	2301      	movs	r3, #1
 8001132:	2209      	movs	r2, #9
 8001134:	2102      	movs	r1, #2
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fbee 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>

	return true;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <_ZN11ICM20948_WE11autoOffsetsEv>:

void ICM20948_WE::autoOffsets() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	xyzFloat accRawVal, gyrRawVal;
	accOffsetVal.x = 0.0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28

	setGyrDLPF(ICM20948_DLPF_6); // lowest noise
 8001168:	2106      	movs	r1, #6
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa6c 	bl	8001648 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF>
	setGyrRange(ICM20948_GYRO_RANGE_250); // highest resolution
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fa2e 	bl	80015d4 <_ZN11ICM20948_WE11setGyrRangeE19ICM20948_GYRO_RANGE>
	setAccRange(ICM20948_ACC_RANGE_2G);
 8001178:	2100      	movs	r1, #0
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f990 	bl	80014a0 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
	setAccDLPF(ICM20948_DLPF_6);
 8001180:	2106      	movs	r1, #6
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f9c6 	bl	8001514 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
	HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f002 fcbb 	bl	8003b04 <HAL_Delay>

	for (int i = 0; i < 50; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	2b31      	cmp	r3, #49	; 0x31
 8001196:	dc36      	bgt.n	8001206 <_ZN11ICM20948_WE11autoOffsetsEv+0xbe>
		readSensor();
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 faa4 	bl	80016e6 <_ZN11ICM20948_WE10readSensorEv>
		accRawVal = getAccRawValues();
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 faaf 	bl	8001702 <_ZN11ICM20948_WE15getAccRawValuesEv>
 80011a4:	eef0 6a40 	vmov.f32	s13, s0
 80011a8:	eeb0 7a60 	vmov.f32	s14, s1
 80011ac:	eef0 7a41 	vmov.f32	s15, s2
 80011b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80011b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80011b8:	edc7 7a07 	vstr	s15, [r7, #28]
		accOffsetVal.x += accRawVal.x;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	ed93 7a08 	vldr	s14, [r3, #32]
 80011c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a08 	vstr	s15, [r3, #32]
		accOffsetVal.y += accRawVal.y;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80011d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		accOffsetVal.z += accRawVal.z;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80011ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		HAL_Delay(10);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f002 fc83 	bl	8003b04 <HAL_Delay>
	for (int i = 0; i < 50; i++) {
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	e7c5      	b.n	8001192 <_ZN11ICM20948_WE11autoOffsetsEv+0x4a>
	}

	accOffsetVal.x /= 50;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a08 	vldr	s14, [r3, #32]
 800120c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a08 	vstr	s15, [r3, #32]
	accOffsetVal.y /= 50;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001220:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	accOffsetVal.z /= 50;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001234:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	accOffsetVal.z -= 16384.0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001248:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001318 <_ZN11ICM20948_WE11autoOffsetsEv+0x1d0>
 800124c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	for (int i = 0; i < 50; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b31      	cmp	r3, #49	; 0x31
 800125e:	dc36      	bgt.n	80012ce <_ZN11ICM20948_WE11autoOffsetsEv+0x186>
		readSensor();
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fa40 	bl	80016e6 <_ZN11ICM20948_WE10readSensorEv>
		gyrRawVal = getGyrRawValues();
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 faa4 	bl	80017b4 <_ZN11ICM20948_WE15getGyrRawValuesEv>
 800126c:	eef0 6a40 	vmov.f32	s13, s0
 8001270:	eeb0 7a60 	vmov.f32	s14, s1
 8001274:	eef0 7a41 	vmov.f32	s15, s2
 8001278:	edc7 6a02 	vstr	s13, [r7, #8]
 800127c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001280:	edc7 7a04 	vstr	s15, [r7, #16]
		gyrOffsetVal.x += gyrRawVal.x;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800128a:	edd7 7a02 	vldr	s15, [r7, #8]
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		gyrOffsetVal.y += gyrRawVal.y;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800129e:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		gyrOffsetVal.z += gyrRawVal.z;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		HAL_Delay(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f002 fc1f 	bl	8003b04 <HAL_Delay>
	for (int i = 0; i < 50; i++) {
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	3301      	adds	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	e7c5      	b.n	800125a <_ZN11ICM20948_WE11autoOffsetsEv+0x112>
	}

	gyrOffsetVal.x /= 50;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80012d4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	gyrOffsetVal.y /= 50;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80012e8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	gyrOffsetVal.z /= 50;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012fc:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001314 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	42480000 	.word	0x42480000
 8001318:	46800000 	.word	0x46800000

0800131c <_ZN11ICM20948_WE13setAccOffsetsEffffff>:

void ICM20948_WE::setAccOffsets(float xMin, float xMax, float yMin, float yMax,
		float zMin, float zMax) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	61f8      	str	r0, [r7, #28]
 8001324:	ed87 0a06 	vstr	s0, [r7, #24]
 8001328:	edc7 0a05 	vstr	s1, [r7, #20]
 800132c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001330:	edc7 1a03 	vstr	s3, [r7, #12]
 8001334:	ed87 2a02 	vstr	s4, [r7, #8]
 8001338:	edc7 2a01 	vstr	s5, [r7, #4]
	accOffsetVal.x = (xMax + xMin) * 0.5;
 800133c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001340:	edd7 7a06 	vldr	s15, [r7, #24]
 8001344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	edc3 7a08 	vstr	s15, [r3, #32]
	accOffsetVal.y = (yMax + yMin) * 0.5;
 8001356:	ed97 7a03 	vldr	s14, [r7, #12]
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	accOffsetVal.z = (zMax + zMin) * 0.5;
 8001370:	ed97 7a01 	vldr	s14, [r7, #4]
 8001374:	edd7 7a02 	vldr	s15, [r7, #8]
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	accCorrFactor.x = (xMax + abs(xMin)) / 32768.0;
 800138a:	ed97 0a06 	vldr	s0, [r7, #24]
 800138e:	f7ff fe65 	bl	800105c <_ZSt3absf>
 8001392:	eeb0 7a40 	vmov.f32	s14, s0
 8001396:	edd7 7a05 	vldr	s15, [r7, #20]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	ee17 0a90 	vmov	r0, s15
 80013a2:	f7ff f903 	bl	80005ac <__aeabi_f2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 80013ac:	f7ff fa80 	bl	80008b0 <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fc48 	bl	8000c4c <__aeabi_d2f>
 80013bc:	4602      	mov	r2, r0
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = (yMax + abs(yMin)) / 32768.0;
 80013c2:	ed97 0a04 	vldr	s0, [r7, #16]
 80013c6:	f7ff fe49 	bl	800105c <_ZSt3absf>
 80013ca:	eeb0 7a40 	vmov.f32	s14, s0
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	ee17 0a90 	vmov	r0, s15
 80013da:	f7ff f8e7 	bl	80005ac <__aeabi_f2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 80013e4:	f7ff fa64 	bl	80008b0 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fc2c 	bl	8000c4c <__aeabi_d2f>
 80013f4:	4602      	mov	r2, r0
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = (zMax + abs(zMin)) / 32768.0;
 80013fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fe:	f7ff fe2d 	bl	800105c <_ZSt3absf>
 8001402:	eeb0 7a40 	vmov.f32	s14, s0
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f8cb 	bl	80005ac <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 800141c:	f7ff fa48 	bl	80008b0 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fc10 	bl	8000c4c <__aeabi_d2f>
 800142c:	4602      	mov	r2, r0
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40e00000 	.word	0x40e00000

08001440 <_ZN11ICM20948_WE9enableAccEb>:

uint8_t ICM20948_WE::whoAmI() {
	return readRegister8(0, ICM20948_WHO_AM_I);
}

void ICM20948_WE::enableAcc(bool enAcc) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_2);
 800144c:	2207      	movs	r2, #7
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fab7 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (enAcc) {
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <_ZN11ICM20948_WE9enableAccEb+0x3a>
		regVal &= ~ICM20948_ACC_EN;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800146c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001470:	b2da      	uxtb	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001478:	e008      	b.n	800148c <_ZN11ICM20948_WE9enableAccEb+0x4c>
	} else {
		regVal |= ICM20948_ACC_EN;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001480:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001484:	b2da      	uxtb	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, 0x00); //regVal);
 800148c:	2300      	movs	r3, #0
 800148e:	2207      	movs	r2, #7
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa40 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>:

void ICM20948_WE::setAccRange(ICM20948_accRange accRange) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 80014ac:	2214      	movs	r2, #20
 80014ae:	2102      	movs	r1, #2
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fa87 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80014c6:	f023 0306 	bic.w	r3, r3, #6
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (accRange << 1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80014f2:	2214      	movs	r2, #20
 80014f4:	2102      	movs	r1, #2
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fa0e 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
	accRangeFactor = 1 << accRange;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setAccDLPF(ICM20948_dlpf dlpf) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 8001520:	2214      	movs	r2, #20
 8001522:	2102      	movs	r1, #2
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fa4d 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d111      	bne.n	800155e <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001552:	2214      	movs	r2, #20
 8001554:	2102      	movs	r1, #2
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9de 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 800155c:	e026      	b.n	80015ac <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001576:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800157a:	b2da      	uxtb	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001588:	b25a      	sxtb	r2, r3
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	b2da      	uxtb	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80015a2:	2214      	movs	r2, #20
 80015a4:	2102      	movs	r1, #2
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f9b6 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>:

void ICM20948_WE::setAccSampleRateDivider(uint16_t accSplRateDiv) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
	writeRegister16(2, ICM20948_ACCEL_SMPLRT_DIV_1, accSplRateDiv);
 80015be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015c2:	2210      	movs	r2, #16
 80015c4:	2102      	movs	r1, #2
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f9cd 	bl	8001966 <_ZN11ICM20948_WE15writeRegister16Ehhs>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN11ICM20948_WE11setGyrRangeE19ICM20948_GYRO_RANGE>:
		regVal |= ICM20948_GYR_EN;
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, regVal);
}

void ICM20948_WE::setGyrRange(ICM20948_gyroRange gyroRange) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_GYRO_CONFIG_1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2102      	movs	r1, #2
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f9ed 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80015fa:	f023 0306 	bic.w	r3, r3, #6
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (gyroRange << 1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800160c:	b25a      	sxtb	r2, r3
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001626:	2201      	movs	r2, #1
 8001628:	2102      	movs	r1, #2
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f974 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
	gyrRangeFactor = (1 << gyroRange);
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	2201      	movs	r2, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	b2da      	uxtb	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setGyrDLPF(ICM20948_dlpf dlpf) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_GYRO_CONFIG_1);
 8001654:	2201      	movs	r2, #1
 8001656:	2102      	movs	r1, #2
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f9b3 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d111      	bne.n	8001692 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001686:	2201      	movs	r2, #1
 8001688:	2102      	movs	r1, #2
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f944 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 8001690:	e026      	b.n	80016e0 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016aa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016d6:	2201      	movs	r2, #1
 80016d8:	2102      	movs	r1, #2
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f91c 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN11ICM20948_WE10readSensorEv>:
	}
}

/************* x,y,z results *************/

void ICM20948_WE::readSensor() {
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	readAllData(buffer);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3309      	adds	r3, #9
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f990 	bl	8001a1a <_ZN11ICM20948_WE11readAllDataEPh>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZN11ICM20948_WE15getAccRawValuesEv>:

xyzFloat ICM20948_WE::getAccRawValues() {
 8001702:	b580      	push	{r7, lr}
 8001704:	b08c      	sub	sp, #48	; 0x30
 8001706:	af00      	add	r7, sp, #0
 8001708:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal;
	accRawVal.x = (int16_t) (((buffer[0]) << 8) | buffer[1]) * 1.0;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	7a9b      	ldrb	r3, [r3, #10]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa8f 	bl	8000c4c <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
	accRawVal.y = (int16_t) (((buffer[2]) << 8) | (int16_t) buffer[3]) * 1.0;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21a      	sxth	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	7b1b      	ldrb	r3, [r3, #12]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21b      	sxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff1f 	bl	8000588 <__aeabi_i2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa7b 	bl	8000c4c <__aeabi_d2f>
 8001756:	4603      	mov	r3, r0
 8001758:	61fb      	str	r3, [r7, #28]
	accRawVal.z = (int16_t) (((buffer[4]) << 8) | buffer[5]) * 1.0;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	7b5b      	ldrb	r3, [r3, #13]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	7b9b      	ldrb	r3, [r3, #14]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe ff0b 	bl	8000588 <__aeabi_i2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa67 	bl	8000c4c <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	623b      	str	r3, [r7, #32]
	return accRawVal;
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	f107 0218 	add.w	r2, r7, #24
 800178a:	ca07      	ldmia	r2, {r0, r1, r2}
 800178c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	ee06 1a90 	vmov	s13, r1
 800179a:	ee07 2a10 	vmov	s14, r2
 800179e:	ee07 3a90 	vmov	s15, r3
}
 80017a2:	eeb0 0a66 	vmov.f32	s0, s13
 80017a6:	eef0 0a47 	vmov.f32	s1, s14
 80017aa:	eeb0 1a67 	vmov.f32	s2, s15
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN11ICM20948_WE15getGyrRawValuesEv>:
	float tmp = (rawTemp * 1.0 - ICM20948_ROOM_TEMP_OFFSET)
			/ ICM20948_T_SENSITIVITY + 21.0;
	return tmp;
}

xyzFloat ICM20948_WE::getGyrRawValues() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6178      	str	r0, [r7, #20]
	xyzFloat gyrRawVal;

	gyrRawVal.x = (int16_t) (((buffer[6]) << 8) | buffer[7]) * 1.0;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	7bdb      	ldrb	r3, [r3, #15]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	7c1b      	ldrb	r3, [r3, #16]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feda 	bl	8000588 <__aeabi_i2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff fa36 	bl	8000c4c <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
	gyrRawVal.y = (int16_t) (((buffer[8]) << 8) | buffer[9]) * 1.0;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	7c5b      	ldrb	r3, [r3, #17]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	7c9b      	ldrb	r3, [r3, #18]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fec6 	bl	8000588 <__aeabi_i2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff fa22 	bl	8000c4c <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	61fb      	str	r3, [r7, #28]
	gyrRawVal.z = (int16_t) (((buffer[10]) << 8) | buffer[11]) * 1.0;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	7cdb      	ldrb	r3, [r3, #19]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	7d1b      	ldrb	r3, [r3, #20]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feb2 	bl	8000588 <__aeabi_i2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff fa0e 	bl	8000c4c <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	623b      	str	r3, [r7, #32]

	return gyrRawVal;
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	f107 0218 	add.w	r2, r7, #24
 800183c:	ca07      	ldmia	r2, {r0, r1, r2}
 800183e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	ee06 1a90 	vmov	s13, r1
 800184c:	ee07 2a10 	vmov	s14, r2
 8001850:	ee07 3a90 	vmov	s15, r3
}
 8001854:	eeb0 0a66 	vmov.f32	s0, s13
 8001858:	eef0 0a47 	vmov.f32	s1, s14
 800185c:	eeb0 1a67 	vmov.f32	s2, s15
 8001860:	3730      	adds	r7, #48	; 0x30
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_ZN11ICM20948_WE5sleepEb>:

void ICM20948_WE::setAccAverageInCycleMode(ICM20948_accAvgLowPower avg) {
	writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
}

void ICM20948_WE::sleep(bool sleep) {
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 8001872:	2206      	movs	r2, #6
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8a4 	bl	80019c4 <_ZN11ICM20948_WE13readRegister8Ehh>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (sleep) {
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <_ZN11ICM20948_WE5sleepEb+0x3a>
		regVal |= ICM20948_SLEEP;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800189e:	e008      	b.n	80018b2 <_ZN11ICM20948_WE5sleepEb+0x4c>
	} else {
		regVal &= ~ICM20948_SLEEP;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80018a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80018b8:	2206      	movs	r2, #6
 80018ba:	2100      	movs	r1, #0
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f82b 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZN11ICM20948_WE10switchBankEh>:
	gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);

	return gyrRawVal;
}

void ICM20948_WE::switchBank(uint8_t newBank) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
	if (newBank != currentBank) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7a1b      	ldrb	r3, [r3, #8]
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d017      	beq.n	8001910 <_ZN11ICM20948_WE10switchBankEh+0x46>
		currentBank = newBank;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	721a      	strb	r2, [r3, #8]

		std::uint8_t pData[2] = { ICM20948_REG_BANK_SEL, currentBank << 4 };
 80018e6:	2300      	movs	r3, #0
 80018e8:	81bb      	strh	r3, [r7, #12]
 80018ea:	237f      	movs	r3, #127	; 0x7f
 80018ec:	733b      	strb	r3, [r7, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7a1b      	ldrb	r3, [r3, #8]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	b299      	uxth	r1, r3
 8001902:	f107 020c 	add.w	r2, r7, #12
 8001906:	230a      	movs	r3, #10
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2302      	movs	r3, #2
 800190c:	f002 ff4a 	bl	80047a4 <HAL_I2C_Master_Transmit>
	}
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>:

uint8_t ICM20948_WE::writeRegister8(uint8_t bank, uint8_t reg, uint8_t val) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	70fb      	strb	r3, [r7, #3]
 800192a:	460b      	mov	r3, r1
 800192c:	70bb      	strb	r3, [r7, #2]
 800192e:	4613      	mov	r3, r2
 8001930:	707b      	strb	r3, [r7, #1]
	switchBank(bank);
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffc7 	bl	80018ca <_ZN11ICM20948_WE10switchBankEh>
	std::uint8_t pData[2] = { reg, val };
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	733b      	strb	r3, [r7, #12]
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	b299      	uxth	r1, r3
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	230a      	movs	r3, #10
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2302      	movs	r3, #2
 8001958:	f002 ff24 	bl	80047a4 <HAL_I2C_Master_Transmit>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZN11ICM20948_WE15writeRegister16Ehhs>:

uint8_t ICM20948_WE::writeRegister16(uint8_t bank, uint8_t reg, int16_t val) {
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af02      	add	r7, sp, #8
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	4608      	mov	r0, r1
 8001970:	4611      	mov	r1, r2
 8001972:	461a      	mov	r2, r3
 8001974:	4603      	mov	r3, r0
 8001976:	70fb      	strb	r3, [r7, #3]
 8001978:	460b      	mov	r3, r1
 800197a:	70bb      	strb	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	803b      	strh	r3, [r7, #0]
	switchBank(bank);
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffa0 	bl	80018ca <_ZN11ICM20948_WE10switchBankEh>
	int8_t MSByte = (int8_t) ((val >> 8) & 0xFF);
 800198a:	883b      	ldrh	r3, [r7, #0]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	73fb      	strb	r3, [r7, #15]
	uint8_t LSByte = val & 0xFF;
 8001992:	883b      	ldrh	r3, [r7, #0]
 8001994:	73bb      	strb	r3, [r7, #14]
	std::uint8_t pData[3] = { reg, MSByte, LSByte };
 8001996:	78bb      	ldrb	r3, [r7, #2]
 8001998:	723b      	strb	r3, [r7, #8]
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	727b      	strb	r3, [r7, #9]
 800199e:	7bbb      	ldrb	r3, [r7, #14]
 80019a0:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 3, 10);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	b299      	uxth	r1, r3
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	230a      	movs	r3, #10
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2303      	movs	r3, #3
 80019b6:	f002 fef5 	bl	80047a4 <HAL_I2C_Master_Transmit>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZN11ICM20948_WE13readRegister8Ehh>:

uint8_t ICM20948_WE::readRegister8(uint8_t bank, uint8_t reg) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	4613      	mov	r3, r2
 80019d2:	70bb      	strb	r3, [r7, #2]
	switchBank(bank);
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff76 	bl	80018ca <_ZN11ICM20948_WE10switchBankEh>
	uint8_t regValue = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &reg, 2, 10);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	b299      	uxth	r1, r3
 80019ec:	1cba      	adds	r2, r7, #2
 80019ee:	230a      	movs	r3, #10
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	f002 fed6 	bl	80047a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_wire, i2cAddress, &regValue, 1, 10);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	b299      	uxth	r1, r3
 8001a02:	f107 020f 	add.w	r2, r7, #15
 8001a06:	230a      	movs	r3, #10
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f002 ffbe 	bl	800498c <HAL_I2C_Master_Receive>
	return regValue;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZN11ICM20948_WE11readAllDataEPh>:
	MSByte = reg16Val[1];
	MSByte = reg16Val[0];
	return (MSByte << 8) + LSByte;
}

void ICM20948_WE::readAllData(uint8_t *data) {
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
	switchBank(0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff4f 	bl	80018ca <_ZN11ICM20948_WE10switchBankEh>
	uint8_t x_acc_h = 0x2D;
 8001a2c:	232d      	movs	r3, #45	; 0x2d
 8001a2e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &x_acc_h, 1, 10);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	b299      	uxth	r1, r3
 8001a3a:	f107 020f 	add.w	r2, r7, #15
 8001a3e:	230a      	movs	r3, #10
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	f002 feae 	bl	80047a4 <HAL_I2C_Master_Transmit>
//    HAL_I2C_Master_Transmit(_wire, i2cAddress, ICM20948_ACCEL_OUT, 1, 10);
	HAL_I2C_Master_Receive(_wire, i2cAddress, data, 20, 10);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	b299      	uxth	r1, r3
 8001a52:	230a      	movs	r3, #10
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2314      	movs	r3, #20
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	f002 ff97 	bl	800498c <HAL_I2C_Master_Receive>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_ZN11ICM20948_WE14reset_ICM20948Ev>:
	regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
	enableMagDataRead(AK09916_HXL, 0x08);
	return regValue;
}

uint8_t ICM20948_WE::reset_ICM20948() {
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	uint8_t ack = writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	2206      	movs	r2, #6
 8001a72:	2100      	movs	r1, #0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff4f 	bl	8001918 <_ZN11ICM20948_WE14writeRegister8Ehhh>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);  // wait for registers to reset
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f002 f840 	bl	8003b04 <HAL_Delay>
	return (ack == 0);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f007 ffd8 	bl	8009a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4904      	ldr	r1, [pc, #16]	; (8001ac4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8001ab6:	f000 fc1a 	bl	80022ee <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001aba:	4603      	mov	r3, r0
					__idx, __base); }
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0800e7a0 	.word	0x0800e7a0
 8001ac8:	0800c249 	.word	0x0800c249

08001acc <_Z13set_dutycycleiPPc>:
static void MX_I2C3_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

uint8_t set_dutycycle(int argc, char *argv[]){
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b08d      	sub	sp, #52	; 0x34
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	uint64_t pulse_width = std::stoi(argv[1]);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681e      	ldr	r6, [r3, #0]
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f007 ff63 	bl	80099ac <_ZNSaIcEC1Ev>
 8001ae6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4631      	mov	r1, r6
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 ffd9 	bl	8009aa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	220a      	movs	r2, #10
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ffca 	bl	8001a98 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001b04:	4603      	mov	r3, r0
 8001b06:	17da      	asrs	r2, r3, #31
 8001b08:	461c      	mov	r4, r3
 8001b0a:	4615      	mov	r5, r2
 8001b0c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4618      	mov	r0, r3
 8001b16:	f007 ff9a 	bl	8009a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 ff45 	bl	80099ae <_ZNSaIcED1Ev>
	if(pulse_width <= 1000)
 8001b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b28:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	f173 0300 	sbcs.w	r3, r3, #0
 8001b32:	d205      	bcs.n	8001b40 <_Z13set_dutycycleiPPc+0x74>
	{
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse_width);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <_Z13set_dutycycleiPPc+0x80>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
			return EXIT_SUCCESS;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <_Z13set_dutycycleiPPc+0x76>
	}else{
		return EXIT_FAILURE;
 8001b40:	2301      	movs	r3, #1
	}
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3734      	adds	r7, #52	; 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002cc 	.word	0x200002cc

08001b50 <_Z12tilt_requestiPPc>:

uint8_t tilt_request(int argc, char *argv[]){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
// IO Access needs to be done via direct Register Access! NO HAL!
//	for(int i=0;i<10;i++){
//	GPIOA->ODR^=1<<5;  // blink the led//	  HAL_Delay(500);
//	HAL_Delay(100);
//}
	if(strcmp(argv[1],"up") == 0){
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	491f      	ldr	r1, [pc, #124]	; (8001be0 <_Z12tilt_requestiPPc+0x90>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fbac 	bl	80002c0 <strcmp>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10b      	bne.n	8001b86 <_Z12tilt_requestiPPc+0x36>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot CC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <_Z12tilt_requestiPPc+0x94>)
 8001b76:	f002 fd4b 	bl	8004610 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <_Z12tilt_requestiPPc+0x98>)
 8001b80:	f002 fd46 	bl	8004610 <HAL_GPIO_WritePin>
 8001b84:	e017      	b.n	8001bb6 <_Z12tilt_requestiPPc+0x66>
	}
	else if(strcmp(argv[1],"down") == 0){
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4917      	ldr	r1, [pc, #92]	; (8001bec <_Z12tilt_requestiPPc+0x9c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb96 	bl	80002c0 <strcmp>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10b      	bne.n	8001bb2 <_Z12tilt_requestiPPc+0x62>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot AC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <_Z12tilt_requestiPPc+0x94>)
 8001ba2:	f002 fd35 	bl	8004610 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2104      	movs	r1, #4
 8001baa:	480f      	ldr	r0, [pc, #60]	; (8001be8 <_Z12tilt_requestiPPc+0x98>)
 8001bac:	f002 fd30 	bl	8004610 <HAL_GPIO_WritePin>
 8001bb0:	e001      	b.n	8001bb6 <_Z12tilt_requestiPPc+0x66>
	}else{
		return EXIT_FAILURE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <_Z12tilt_requestiPPc+0x86>
	}

	// Wont work, bad hal stuff!
  //HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
  HAL_Delay(1000);
 8001bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bba:	f001 ffa3 	bl	8003b04 <HAL_Delay>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <_Z12tilt_requestiPPc+0x94>)
 8001bc6:	f002 fd23 	bl	8004610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <_Z12tilt_requestiPPc+0x98>)
 8001bd0:	f002 fd1e 	bl	8004610 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
  return EXIT_SUCCESS;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0800e7a8 	.word	0x0800e7a8
 8001be4:	48000800 	.word	0x48000800
 8001be8:	48000c00 	.word	0x48000c00
 8001bec:	0800e7ac 	.word	0x0800e7ac

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b096      	sub	sp, #88	; 0x58
 8001bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf6:	f001 ff14 	bl	8003a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfa:	f000 f8b3 	bl	8001d64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfe:	f000 fa93 	bl	8002128 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001c02:	f000 f905 	bl	8001e10 <_ZL14MX_FDCAN1_Initv>
  MX_I2C3_Init();
 8001c06:	f000 f94f 	bl	8001ea8 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001c0a:	f000 fa2d 	bl	8002068 <_ZL19MX_USART2_UART_Initv>
  MX_TIM5_Init();
 8001c0e:	f000 f999 	bl	8001f44 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001c12:	2104      	movs	r1, #4
 8001c14:	483f      	ldr	r0, [pc, #252]	; (8001d14 <main+0x124>)
 8001c16:	f004 fbad 	bl	8006374 <HAL_TIM_PWM_Start>
  CLI_INIT(&huart2);
 8001c1a:	483f      	ldr	r0, [pc, #252]	; (8001d18 <main+0x128>)
 8001c1c:	f000 feac 	bl	8002978 <cli_init>
   CLI_ADD_CMD("tilt", "tilt [up] / [down]", tilt_request);
 8001c20:	4a3e      	ldr	r2, [pc, #248]	; (8001d1c <main+0x12c>)
 8001c22:	493f      	ldr	r1, [pc, #252]	; (8001d20 <main+0x130>)
 8001c24:	483f      	ldr	r0, [pc, #252]	; (8001d24 <main+0x134>)
 8001c26:	f001 fbed 	bl	8003404 <cli_add_command>
   CLI_ADD_CMD("set_pwm", "lambda[0...1000]", set_dutycycle);
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <main+0x138>)
 8001c2c:	493f      	ldr	r1, [pc, #252]	; (8001d2c <main+0x13c>)
 8001c2e:	4840      	ldr	r0, [pc, #256]	; (8001d30 <main+0x140>)
 8001c30:	f001 fbe8 	bl	8003404 <cli_add_command>
   CLI_RUN();
 8001c34:	f001 fa02 	bl	800303c <cli_run>
   ICM20948_WE myIMU = ICM20948_WE(&hi2c3);
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	493d      	ldr	r1, [pc, #244]	; (8001d34 <main+0x144>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa1c 	bl	800107c <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>


  	if(!myIMU.init()){
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fa29 	bl	80010a0 <_ZN11ICM20948_WE4initEv>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <main+0x72>
  	  printf("ICM20948 does not respond\r\n");
 8001c5a:	4837      	ldr	r0, [pc, #220]	; (8001d38 <main+0x148>)
 8001c5c:	f009 fb0c 	bl	800b278 <puts>
 8001c60:	e002      	b.n	8001c68 <main+0x78>
  }
  else{
    printf("ICM20948 is connected\r\n");
 8001c62:	4836      	ldr	r0, [pc, #216]	; (8001d3c <main+0x14c>)
 8001c64:	f009 fb08 	bl	800b278 <puts>
  }


  	printf("Position your ICM20948 flat and don't move it - calibrating...\r\n");
 8001c68:	4835      	ldr	r0, [pc, #212]	; (8001d40 <main+0x150>)
 8001c6a:	f009 fb05 	bl	800b278 <puts>
  HAL_Delay(1000);
 8001c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c72:	f001 ff47 	bl	8003b04 <HAL_Delay>
  myIMU.enableAcc(true);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fbdf 	bl	8001440 <_ZN11ICM20948_WE9enableAccEb>

  myIMU.setAccRange(ICM20948_ACC_RANGE_2G);
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc09 	bl	80014a0 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
  myIMU.setAccSampleRateDivider(10);
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	210a      	movs	r1, #10
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc8c 	bl	80015b2 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>
  myIMU.setAccDLPF(ICM20948_DLPF_6);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc37 	bl	8001514 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
  myIMU.setAccOffsets(-16330.0, 16450.0, -16600.0, 16180.0, -16640.0, 16560.0);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	eddf 2a26 	vldr	s5, [pc, #152]	; 8001d44 <main+0x154>
 8001cae:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8001d48 <main+0x158>
 8001cb2:	eddf 1a26 	vldr	s3, [pc, #152]	; 8001d4c <main+0x15c>
 8001cb6:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001d50 <main+0x160>
 8001cba:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001d54 <main+0x164>
 8001cbe:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001d58 <main+0x168>
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb2a 	bl	800131c <_ZN11ICM20948_WE13setAccOffsetsEffffff>
  myIMU.autoOffsets();
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa3b 	bl	8001148 <_ZN11ICM20948_WE11autoOffsetsEv>

  printf("Done!\r\n");
 8001cd2:	4822      	ldr	r0, [pc, #136]	; (8001d5c <main+0x16c>)
 8001cd4:	f009 fad0 	bl	800b278 <puts>
  HAL_Delay(1000);
 8001cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cdc:	f001 ff12 	bl	8003b04 <HAL_Delay>

  // Aktivierte Achsen lesen:
  uint8_t active_axes;
  uint8_t disable_acc_reg = 0x7;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(&hi2c3, 210, &disable_acc_reg, 1, 10);
 8001ce4:	1dba      	adds	r2, r7, #6
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	21d2      	movs	r1, #210	; 0xd2
 8001cee:	4811      	ldr	r0, [pc, #68]	; (8001d34 <main+0x144>)
 8001cf0:	f002 fd58 	bl	80047a4 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c3, 210, &active_axes, 1, 10);
 8001cf4:	1dfa      	adds	r2, r7, #7
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	21d2      	movs	r1, #210	; 0xd2
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <main+0x144>)
 8001d00:	f002 fe44 	bl	800498c <HAL_I2C_Master_Receive>
  printf("Active axes: 0x%x\r\n",active_axes);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4815      	ldr	r0, [pc, #84]	; (8001d60 <main+0x170>)
 8001d0a:	f009 fa19 	bl	800b140 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   CLI_RUN();
 8001d0e:	f001 f995 	bl	800303c <cli_run>
 8001d12:	e7fc      	b.n	8001d0e <main+0x11e>
 8001d14:	200002cc 	.word	0x200002cc
 8001d18:	20000318 	.word	0x20000318
 8001d1c:	08001b51 	.word	0x08001b51
 8001d20:	0800e7b4 	.word	0x0800e7b4
 8001d24:	0800e7c8 	.word	0x0800e7c8
 8001d28:	08001acd 	.word	0x08001acd
 8001d2c:	0800e7d0 	.word	0x0800e7d0
 8001d30:	0800e7e4 	.word	0x0800e7e4
 8001d34:	20000280 	.word	0x20000280
 8001d38:	0800e7ec 	.word	0x0800e7ec
 8001d3c:	0800e808 	.word	0x0800e808
 8001d40:	0800e820 	.word	0x0800e820
 8001d44:	46816000 	.word	0x46816000
 8001d48:	c6820000 	.word	0xc6820000
 8001d4c:	467cd000 	.word	0x467cd000
 8001d50:	c681b000 	.word	0xc681b000
 8001d54:	46808400 	.word	0x46808400
 8001d58:	c67f2800 	.word	0xc67f2800
 8001d5c:	0800e860 	.word	0x0800e860
 8001d60:	0800e868 	.word	0x0800e868

08001d64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	; 0x50
 8001d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6a:	f107 0318 	add.w	r3, r7, #24
 8001d6e:	2238      	movs	r2, #56	; 0x38
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f008 f928 	bl	8009fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f003 fa06 	bl	8005198 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d96:	2340      	movs	r3, #64	; 0x40
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001da2:	2304      	movs	r3, #4
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001da6:	2355      	movs	r3, #85	; 0x55
 8001da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 faa0 	bl	8005300 <HAL_RCC_OscConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001dd0:	f000 fa4e 	bl	8002270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2104      	movs	r1, #4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fd9f 	bl	8005930 <HAL_RCC_ClockConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001e02:	f000 fa35 	bl	8002270 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3750      	adds	r7, #80	; 0x50
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001e18:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001e82:	f002 f87d 	bl	8003f80 <HAL_FDCAN_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001e96:	f000 f9eb 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000021c 	.word	0x2000021c
 8001ea4:	40006400 	.word	0x40006400

08001ea8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <_ZL12MX_I2C3_Initv+0x94>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <_ZL12MX_I2C3_Initv+0x98>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ee2:	4815      	ldr	r0, [pc, #84]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001ee4:	f002 fbcf 	bl	8004686 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001ef8:	f000 f9ba 	bl	8002270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001efc:	2100      	movs	r1, #0
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001f00:	f003 f8b2 	bl	8005068 <HAL_I2CEx_ConfigAnalogFilter>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001f14:	f000 f9ac 	bl	8002270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <_ZL12MX_I2C3_Initv+0x90>)
 8001f1c:	f003 f8ef 	bl	80050fe <HAL_I2CEx_ConfigDigitalFilter>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001f30:	f000 f99e 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000280 	.word	0x20000280
 8001f3c:	40007800 	.word	0x40007800
 8001f40:	30a0a7fb 	.word	0x30a0a7fb

08001f44 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <_ZL12MX_TIM5_Initv+0x120>)
 8001f7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8001f7c:	4b38      	ldr	r3, [pc, #224]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001f88:	4b35      	ldr	r3, [pc, #212]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f96:	4b32      	ldr	r3, [pc, #200]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f9c:	4830      	ldr	r0, [pc, #192]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001f9e:	f004 f931 	bl	8006204 <HAL_TIM_Base_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8001fb2:	f000 f95d 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4827      	ldr	r0, [pc, #156]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001fc4:	f004 fbfc 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8001fd8:	f000 f94a 	bl	8002270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fdc:	4820      	ldr	r0, [pc, #128]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8001fde:	f004 f968 	bl	80062b2 <HAL_TIM_PWM_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8001ff2:	f000 f93d 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4816      	ldr	r0, [pc, #88]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8002006:	f005 f985 	bl	8007314 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800201a:	f000 f929 	bl	8002270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	2360      	movs	r3, #96	; 0x60
 8002020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002022:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002026:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2204      	movs	r2, #4
 8002034:	4619      	mov	r1, r3
 8002036:	480a      	ldr	r0, [pc, #40]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8002038:	f004 faae 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <_ZL12MX_TIM5_Initv+0x10c>
  {
    Error_Handler();
 800204c:	f000 f910 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZL12MX_TIM5_Initv+0x11c>)
 8002052:	f000 fa8b 	bl	800256c <HAL_TIM_MspPostInit>

}
 8002056:	bf00      	nop
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200002cc 	.word	0x200002cc
 8002064:	40000c00 	.word	0x40000c00

08002068 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800206e:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8002070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b0:	481b      	ldr	r0, [pc, #108]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020b2:	f005 f9c5 	bl	8007440 <HAL_UART_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80020c6:	f000 f8d3 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ca:	2100      	movs	r1, #0
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020ce:	f007 fba2 	bl	8009816 <HAL_UARTEx_SetTxFifoThreshold>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80020e2:	f000 f8c5 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e6:	2100      	movs	r1, #0
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80020ea:	f007 fbd2 	bl	8009892 <HAL_UARTEx_SetRxFifoThreshold>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80020fe:	f000 f8b7 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002104:	f007 fb4e 	bl	80097a4 <HAL_UARTEx_DisableFifoMode>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002118:	f000 f8aa 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000318 	.word	0x20000318
 8002124:	40004400 	.word	0x40004400

08002128 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	4b49      	ldr	r3, [pc, #292]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a48      	ldr	r2, [pc, #288]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a42      	ldr	r2, [pc, #264]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b40      	ldr	r3, [pc, #256]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217a:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a30      	ldr	r2, [pc, #192]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <_ZL12MX_GPIO_Initv+0x13c>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2120      	movs	r1, #32
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f002 fa27 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <_ZL12MX_GPIO_Initv+0x140>)
 80021ca:	f002 fa21 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2104      	movs	r1, #4
 80021d2:	4826      	ldr	r0, [pc, #152]	; (800226c <_ZL12MX_GPIO_Initv+0x144>)
 80021d4:	f002 fa1c 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	481e      	ldr	r0, [pc, #120]	; (8002268 <_ZL12MX_GPIO_Initv+0x140>)
 80021f0:	f002 f88c 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021f4:	2320      	movs	r3, #32
 80021f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220e:	f002 f87d 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 8002212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	480f      	ldr	r0, [pc, #60]	; (8002268 <_ZL12MX_GPIO_Initv+0x140>)
 800222c:	f002 f86e 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 8002230:	2304      	movs	r3, #4
 8002232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4809      	ldr	r0, [pc, #36]	; (800226c <_ZL12MX_GPIO_Initv+0x144>)
 8002248:	f002 f860 	bl	800430c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2028      	movs	r0, #40	; 0x28
 8002252:	f001 fd8e 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002256:	2028      	movs	r0, #40	; 0x28
 8002258:	f001 fda5 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	48000800 	.word	0x48000800
 800226c:	48000c00 	.word	0x48000c00

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>

0800227a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	f007 fc4f 	bl	8009b24 <__errno>
 8002286:	4603      	mov	r3, r0
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f007 fc49 	bl	8009b24 <__errno>
 8002292:	4603      	mov	r3, r0
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	f007 fc3b 	bl	8009b24 <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80022c0:	f007 fc30 	bl	8009b24 <__errno>
 80022c4:	4602      	mov	r2, r0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 80022e0:	2300      	movs	r3, #0
	  }
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b08b      	sub	sp, #44	; 0x2c
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ffba 	bl	800227a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002306:	f107 0118 	add.w	r1, r7, #24
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d102      	bne.n	8002322 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f007 fb4d 	bl	80099bc <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002322:	f007 fbff 	bl	8009b24 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800232a:	2b22      	cmp	r3, #34	; 0x22
 800232c:	d006      	beq.n	800233c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800232e:	4621      	mov	r1, r4
 8002330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002332:	f7ff ffd0 	bl	80022d6 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002340:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002346:	68b8      	ldr	r0, [r7, #8]
 8002348:	f007 fb3e 	bl	80099c8 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]

      return __ret;
 8002362:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff9a 	bl	80022a2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800236e:	4623      	mov	r3, r4
    }
 8002370:	4618      	mov	r0, r3
 8002372:	372c      	adds	r7, #44	; 0x2c
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}

08002378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x44>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x44>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x44>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x44>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x44>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023ae:	f002 ff97 	bl	80052e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b09e      	sub	sp, #120	; 0x78
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2254      	movs	r2, #84	; 0x54
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f007 fdf1 	bl	8009fc8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a20      	ldr	r2, [pc, #128]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d138      	bne.n	8002462 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fcb1 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800240c:	f7ff ff30 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 8002416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241a:	6593      	str	r3, [r2, #88]	; 0x58
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002444:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002452:	2309      	movs	r3, #9
 8002454:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_FDCAN_MspInit+0xb4>)
 800245e:	f001 ff55 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3778      	adds	r7, #120	; 0x78
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40006400 	.word	0x40006400
 8002470:	40021000 	.word	0x40021000
 8002474:	48000400 	.word	0x48000400

08002478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b09e      	sub	sp, #120	; 0x78
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	2254      	movs	r2, #84	; 0x54
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f007 fd95 	bl	8009fc8 <memset>
  if(hi2c->Instance==I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_I2C_MspInit+0xa8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d137      	bne.n	8002518 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80024a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fc56 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024c2:	f7ff fed5 	bl	8002270 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_I2C_MspInit+0xac>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_I2C_MspInit+0xac>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_I2C_MspInit+0xac>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e4:	2312      	movs	r3, #18
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80024f0:	2308      	movs	r3, #8
 80024f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024f8:	4619      	mov	r1, r3
 80024fa:	480b      	ldr	r0, [pc, #44]	; (8002528 <HAL_I2C_MspInit+0xb0>)
 80024fc:	f001 ff06 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_I2C_MspInit+0xac>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_I2C_MspInit+0xac>)
 8002506:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800250a:	6593      	str	r3, [r2, #88]	; 0x58
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_I2C_MspInit+0xac>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002518:	bf00      	nop
 800251a:	3778      	adds	r7, #120	; 0x78
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40007800 	.word	0x40007800
 8002524:	40021000 	.word	0x40021000
 8002528:	48000800 	.word	0x48000800

0800252c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_TIM_Base_MspInit+0x38>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10b      	bne.n	8002556 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_TIM_Base_MspInit+0x3c>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_TIM_Base_MspInit+0x3c>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6593      	str	r3, [r2, #88]	; 0x58
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_TIM_Base_MspInit+0x3c>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_TIM_MspPostInit+0x64>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d11c      	bne.n	80025c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_TIM_MspPostInit+0x68>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_TIM_MspPostInit+0x68>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_TIM_MspPostInit+0x68>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4619      	mov	r1, r3
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HAL_TIM_MspPostInit+0x6c>)
 80025c4:	f001 fea2 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40021000 	.word	0x40021000
 80025d8:	48000800 	.word	0x48000800

080025dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b09e      	sub	sp, #120	; 0x78
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	2254      	movs	r2, #84	; 0x54
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f007 fce3 	bl	8009fc8 <memset>
  if(huart->Instance==USART2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_UART_MspInit+0xb8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d13e      	bne.n	800268a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800260c:	2302      	movs	r3, #2
 800260e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fba5 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002624:	f7ff fe24 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_UART_MspInit+0xbc>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_UART_MspInit+0xbc>)
 800262e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_UART_MspInit+0xbc>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_UART_MspInit+0xbc>)
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <HAL_UART_MspInit+0xbc>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_UART_MspInit+0xbc>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002658:	230c      	movs	r3, #12
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002668:	2307      	movs	r3, #7
 800266a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002670:	4619      	mov	r1, r3
 8002672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002676:	f001 fe49 	bl	800430c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2026      	movs	r0, #38	; 0x26
 8002680:	f001 fb77 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002684:	2026      	movs	r0, #38	; 0x26
 8002686:	f001 fb8e 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3778      	adds	r7, #120	; 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40004400 	.word	0x40004400
 8002698:	40021000 	.word	0x40021000

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <NMI_Handler+0x4>

080026a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler+0x4>

080026ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <UsageFault_Handler+0x4>

080026ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e8:	f001 f9ee 	bl	8003ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <USART2_IRQHandler+0x10>)
 80026f6:	f005 f887 	bl	8007808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000318 	.word	0x20000318

08002704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800270c:	f001 ff98 	bl	8004640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <_write>:
 * 	These functions need to be redefined over the [_weak] versions defined by
 * 	GCC (or in syscalls.c by cubeMX) to make the stdio library functional.
 *
 ******************************************************************************/

int _write(int file, char *data, int len){
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	if(file != STDOUT_FILENO && file != STDERR_FILENO){
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00a      	beq.n	800273c <_write+0x28>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d007      	beq.n	800273c <_write+0x28>
		errno = EBADF;
 800272c:	f007 f9fa 	bl	8009b24 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	2209      	movs	r2, #9
 8002734:	601a      	str	r2, [r3, #0]
		return -1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800273a:	e041      	b.n	80027c0 <_write+0xac>
	}

	if(cli_password_ok == false){
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <_write+0xb4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <_write+0x3a>
		return len;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e038      	b.n	80027c0 <_write+0xac>
	}

	HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]

	if (!(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) ) {
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <_write+0xb8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	2b00      	cmp	r3, #0
 800275c:	d119      	bne.n	8002792 <_write+0x7e>
		cli_tx_isr_flag = true;
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <_write+0xbc>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
		/* Disable interrupts to prevent UART from throwing an RX interrupt while the peripheral is locked as
		 * this would prevent the RX interrupt from restarting HAL_UART_Receive_IT  */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002764:	2025      	movs	r0, #37	; 0x25
 8002766:	f001 fb2c 	bl	8003dc2 <HAL_NVIC_DisableIRQ>

		/* Transmits with interrupts. This must be done this way so that we can re-activate USART interrupts
		 * before the transfer terminates so that we can continue reading from the terminal*/
		status = HAL_UART_Transmit_IT(huart_shell, (uint8_t *)data, len);
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <_write+0xc0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	b292      	uxth	r2, r2
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4618      	mov	r0, r3
 8002776:	f004 ff49 	bl	800760c <HAL_UART_Transmit_IT>
 800277a:	4603      	mov	r3, r0
 800277c:	75fb      	strb	r3, [r7, #23]

		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277e:	2025      	movs	r0, #37	; 0x25
 8002780:	f001 fb11 	bl	8003da6 <HAL_NVIC_EnableIRQ>

		/* Wait for the transfer to terminate*/
		while(cli_tx_isr_flag == true){
 8002784:	bf00      	nop
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <_write+0xbc>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1fa      	bne.n	8002786 <_write+0x72>
 8002790:	e010      	b.n	80027b4 <_write+0xa0>
			/* flag will be set to false in HAL_UART_TxCpltCallback*/
		}
	}else{
		/* We are called from an interrupt, using Transmit_IT would not work */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002792:	2025      	movs	r0, #37	; 0x25
 8002794:	f001 fb15 	bl	8003dc2 <HAL_NVIC_DisableIRQ>
		status = HAL_UART_Transmit(huart_shell, (uint8_t *)data, len, 1000);
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <_write+0xc0>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	f004 fe9b 	bl	80074e0 <HAL_UART_Transmit>
 80027aa:	4603      	mov	r3, r0
 80027ac:	75fb      	strb	r3, [r7, #23]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ae:	2025      	movs	r0, #37	; 0x25
 80027b0:	f001 faf9 	bl	8003da6 <HAL_NVIC_EnableIRQ>
	}



	if(status == HAL_OK){
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <_write+0xaa>
		return len;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	e000      	b.n	80027c0 <_write+0xac>
	}else{
		return 0;
 80027be:	2300      	movs	r3, #0
	}
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000087b 	.word	0x2000087b
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	2000087c 	.word	0x2000087c
 80027d4:	200003d4 	.word	0x200003d4

080027d8 <cli_history_add>:
  * @brief          add a command to the history
  * @param  buff:   command
  * @retval         null
  */
static void cli_history_add(char* buff)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    uint16_t len;
    uint8_t index = history.latest;
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <cli_history_add+0xe4>)
 80027e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80027e6:	73fb      	strb	r3, [r7, #15]

    if (NULL == buff) return;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d060      	beq.n	80028b0 <cli_history_add+0xd8>

    len = strlen((const char *)buff);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fd fd70 	bl	80002d4 <strlen>
 80027f4:	4603      	mov	r3, r0
 80027f6:	81bb      	strh	r3, [r7, #12]
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80027f8:	89bb      	ldrh	r3, [r7, #12]
 80027fa:	2b4f      	cmp	r3, #79	; 0x4f
 80027fc:	d85a      	bhi.n	80028b4 <cli_history_add+0xdc>

    /* find the latest one */
    if (0 != index) {
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <cli_history_add+0x34>
        index--;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3b01      	subs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e001      	b.n	8002810 <cli_history_add+0x38>
    } else {
        index = HISTORY_MAX - 1;
 800280c:	2309      	movs	r3, #9
 800280e:	73fb      	strb	r3, [r7, #15]
    }

    if (0 != memcmp(history.cmd[index], buff, len)) {
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <cli_history_add+0xe4>)
 800281c:	4413      	add	r3, r2
 800281e:	89ba      	ldrh	r2, [r7, #12]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f007 fb98 	bl	8009f58 <memcmp>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d03b      	beq.n	80028a6 <cli_history_add+0xce>
        /* if the new one is different with the latest one, the save */
        memset((void *)history.cmd[history.latest], 0x00, MAX_LINE_LEN);
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <cli_history_add+0xe4>)
 8002830:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002834:	461a      	mov	r2, r3
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <cli_history_add+0xe4>)
 8002840:	4413      	add	r3, r2
 8002842:	2250      	movs	r2, #80	; 0x50
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f007 fbbe 	bl	8009fc8 <memset>
        memcpy((void *)history.cmd[history.latest], (const void *)buff, len);
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <cli_history_add+0xe4>)
 800284e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002852:	461a      	mov	r2, r3
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <cli_history_add+0xe4>)
 800285e:	4413      	add	r3, r2
 8002860:	89ba      	ldrh	r2, [r7, #12]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f007 fb87 	bl	8009f78 <memcpy>
        if (history.count < HISTORY_MAX) {
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <cli_history_add+0xe4>)
 800286c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002870:	2b09      	cmp	r3, #9
 8002872:	d807      	bhi.n	8002884 <cli_history_add+0xac>
            history.count++;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <cli_history_add+0xe4>)
 8002876:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800287a:	3301      	adds	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <cli_history_add+0xe4>)
 8002880:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
        }

        history.latest++;
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <cli_history_add+0xe4>)
 8002886:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <cli_history_add+0xe4>)
 8002890:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        if (history.latest >= HISTORY_MAX) {
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <cli_history_add+0xe4>)
 8002896:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800289a:	2b09      	cmp	r3, #9
 800289c:	d903      	bls.n	80028a6 <cli_history_add+0xce>
            history.latest = 0;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <cli_history_add+0xe4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        }
    }

    history.show = 0;
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <cli_history_add+0xe4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80028ae:	e002      	b.n	80028b6 <cli_history_add+0xde>
    if (NULL == buff) return;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <cli_history_add+0xde>
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80028b4:	bf00      	nop
}
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000558 	.word	0x20000558

080028c0 <cli_history_show>:
  * @param  mode:       TRUE for look up, FALSE for look down
  * @param  p_history:  target history command
  * @retval             TRUE for no history found, FALSE for success
  */
static uint8_t cli_history_show(uint8_t mode, char** p_history)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
    uint8_t err = true;
 80028cc:	2301      	movs	r3, #1
 80028ce:	737b      	strb	r3, [r7, #13]
    uint8_t num;
    uint8_t index;

    if (0 == history.count) return err;
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <cli_history_show+0xb4>)
 80028d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <cli_history_show+0x1e>
 80028da:	7b7b      	ldrb	r3, [r7, #13]
 80028dc:	e044      	b.n	8002968 <cli_history_show+0xa8>

    if (true == mode) {
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d110      	bne.n	8002906 <cli_history_show+0x46>
        /* look up */
        if (history.show < history.count) {
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <cli_history_show+0xb4>)
 80028e6:	f893 2322 	ldrb.w	r2, [r3, #802]	; 0x322
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <cli_history_show+0xb4>)
 80028ec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d215      	bcs.n	8002920 <cli_history_show+0x60>
            history.show++;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <cli_history_show+0xb4>)
 80028f6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80028fa:	3301      	adds	r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <cli_history_show+0xb4>)
 8002900:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002904:	e00c      	b.n	8002920 <cli_history_show+0x60>
        }
    } else {
        /* look down */
        if (1 < history.show) {
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <cli_history_show+0xb4>)
 8002908:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800290c:	2b01      	cmp	r3, #1
 800290e:	d907      	bls.n	8002920 <cli_history_show+0x60>
            history.show--;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <cli_history_show+0xb4>)
 8002912:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002916:	3b01      	subs	r3, #1
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <cli_history_show+0xb4>)
 800291c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
        }
    }

    num = history.show;
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <cli_history_show+0xb4>)
 8002922:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002926:	73fb      	strb	r3, [r7, #15]
    index = history.latest;
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <cli_history_show+0xb4>)
 800292a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800292e:	73bb      	strb	r3, [r7, #14]
    while (num) {
 8002930:	e00b      	b.n	800294a <cli_history_show+0x8a>
        if (0 != index) {
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <cli_history_show+0x80>
            index--;
 8002938:	7bbb      	ldrb	r3, [r7, #14]
 800293a:	3b01      	subs	r3, #1
 800293c:	73bb      	strb	r3, [r7, #14]
 800293e:	e001      	b.n	8002944 <cli_history_show+0x84>
        } else {
            index = HISTORY_MAX - 1;
 8002940:	2309      	movs	r3, #9
 8002942:	73bb      	strb	r3, [r7, #14]
        }
        num--;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	3b01      	subs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
    while (num) {
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <cli_history_show+0x72>
    }

    err = false;
 8002950:	2300      	movs	r3, #0
 8002952:	737b      	strb	r3, [r7, #13]
    *p_history = history.cmd[index];
 8002954:	7bba      	ldrb	r2, [r7, #14]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <cli_history_show+0xb4>)
 8002960:	441a      	add	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	601a      	str	r2, [r3, #0]

    return err;
 8002966:	7b7b      	ldrb	r3, [r7, #13]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20000558 	.word	0x20000558

08002978 <cli_init>:

void cli_init(UART_HandleTypeDef *handle_uart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	huart_shell = handle_uart;
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <cli_init+0xc4>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
	shell_queue_init(&cli_rx_buff);
 8002986:	482e      	ldr	r0, [pc, #184]	; (8002a40 <cli_init+0xc8>)
 8002988:	f000 fee6 	bl	8003758 <shell_queue_init>
    memset((uint8_t *)&history, 0, sizeof(history));
 800298c:	f240 3223 	movw	r2, #803	; 0x323
 8002990:	2100      	movs	r1, #0
 8002992:	482c      	ldr	r0, [pc, #176]	; (8002a44 <cli_init+0xcc>)
 8002994:	f007 fb18 	bl	8009fc8 <memset>

    HAL_UART_MspInit(huart_shell);
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <cli_init+0xc4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fe1d 	bl	80025dc <HAL_UART_MspInit>
    HAL_UART_Receive_IT(huart_shell, &cBuffer, 1);
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <cli_init+0xc4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	4927      	ldr	r1, [pc, #156]	; (8002a48 <cli_init+0xd0>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fed6 	bl	800775c <HAL_UART_Receive_IT>

    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e015      	b.n	80029e2 <cli_init+0x6a>
    	CLI_commands[j].pCmd = "";
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <cli_init+0xd4>)
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <cli_init+0xd8>)
 80029c6:	601a      	str	r2, [r3, #0]
    	CLI_commands[j].pFun = NULL;
 80029c8:	4920      	ldr	r1, [pc, #128]	; (8002a4c <cli_init+0xd4>)
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3308      	adds	r3, #8
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b1f      	cmp	r3, #31
 80029e6:	d9e6      	bls.n	80029b6 <cli_init+0x3e>
    }

#ifndef CLI_PASSWORD
    cli_password_ok = true;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <cli_init+0xdc>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
    greet();
 80029ee:	f000 fb31 	bl	8003054 <greet>
#endif

    CLI_ADD_CMD("help", cli_help_help, cli_help);
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <cli_init+0xe0>)
 80029f4:	4919      	ldr	r1, [pc, #100]	; (8002a5c <cli_init+0xe4>)
 80029f6:	481a      	ldr	r0, [pc, #104]	; (8002a60 <cli_init+0xe8>)
 80029f8:	f000 fd04 	bl	8003404 <cli_add_command>
    CLI_ADD_CMD("cls", cli_clear_help, cli_clear);
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <cli_init+0xec>)
 80029fe:	491a      	ldr	r1, [pc, #104]	; (8002a68 <cli_init+0xf0>)
 8002a00:	481a      	ldr	r0, [pc, #104]	; (8002a6c <cli_init+0xf4>)
 8002a02:	f000 fcff 	bl	8003404 <cli_add_command>
    CLI_ADD_CMD("reset", cli_reset_help, cli_reset);
 8002a06:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <cli_init+0xf8>)
 8002a08:	491a      	ldr	r1, [pc, #104]	; (8002a74 <cli_init+0xfc>)
 8002a0a:	481b      	ldr	r0, [pc, #108]	; (8002a78 <cli_init+0x100>)
 8002a0c:	f000 fcfa 	bl	8003404 <cli_add_command>
    CLI_ADD_CMD("log", cli_log_help, cli_log);
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <cli_init+0x104>)
 8002a12:	491b      	ldr	r1, [pc, #108]	; (8002a80 <cli_init+0x108>)
 8002a14:	481b      	ldr	r0, [pc, #108]	; (8002a84 <cli_init+0x10c>)
 8002a16:	f000 fcf5 	bl	8003404 <cli_add_command>

    if(CLI_LAST_LOG_CATEGORY > 32){
    	ERR("Too many log categories defined. The max number of log categories that can be user defined is 31.\n");
    }

    LOG(CLI_LOG_SHELL, "Command line successfully initialized.\n");
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <cli_init+0x110>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <cli_init+0xba>
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <cli_init+0x114>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4818      	ldr	r0, [pc, #96]	; (8002a90 <cli_init+0x118>)
 8002a2e:	f008 fb87 	bl	800b140 <iprintf>

}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200003d4 	.word	0x200003d4
 8002a40:	200003ac 	.word	0x200003ac
 8002a44:	20000558 	.word	0x20000558
 8002a48:	200003a8 	.word	0x200003a8
 8002a4c:	200003d8 	.word	0x200003d8
 8002a50:	0800e8b8 	.word	0x0800e8b8
 8002a54:	2000087b 	.word	0x2000087b
 8002a58:	08003205 	.word	0x08003205
 8002a5c:	0800f3ec 	.word	0x0800f3ec
 8002a60:	0800e8bc 	.word	0x0800e8bc
 8002a64:	08003359 	.word	0x08003359
 8002a68:	0800f3fc 	.word	0x0800f3fc
 8002a6c:	0800e8c4 	.word	0x0800e8c4
 8002a70:	080033b5 	.word	0x080033b5
 8002a74:	0800f410 	.word	0x0800f410
 8002a78:	0800e8c8 	.word	0x0800e8c8
 8002a7c:	080034d9 	.word	0x080034d9
 8002a80:	0800f41c 	.word	0x0800f41c
 8002a84:	0800e8d0 	.word	0x0800e8d0
 8002a88:	2000001c 	.word	0x2000001c
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	0800e8d4 	.word	0x0800e8d4

08002a94 <HAL_UART_RxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done receiving a char
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	shell_queue_in(&cli_rx_buff, &cBuffer);
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <HAL_UART_RxCpltCallback+0x24>)
 8002a9e:	4807      	ldr	r0, [pc, #28]	; (8002abc <HAL_UART_RxCpltCallback+0x28>)
 8002aa0:	f000 fe9a 	bl	80037d8 <shell_queue_in>
	HAL_UART_Receive_IT(huart, &cBuffer, 1);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <HAL_UART_RxCpltCallback+0x24>)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f004 fe57 	bl	800775c <HAL_UART_Receive_IT>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003a8 	.word	0x200003a8
 8002abc:	200003ac 	.word	0x200003ac

08002ac0 <HAL_UART_TxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done transmitting data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	cli_tx_isr_flag = false;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_UART_TxCpltCallback+0x1c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000087c 	.word	0x2000087c

08002ae0 <cli_rx_handle>:
  * @brief  handle commands from the terminal
  * @param  commands
  * @retval null
  */
static void cli_rx_handle(shell_queue_s *rx_buff)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b091      	sub	sp, #68	; 0x44
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    static HANDLE_TYPE_S Handle = {.buff = {0},.len = 0};
    uint8_t i = Handle.len;
 8002ae8:	4bb9      	ldr	r3, [pc, #740]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cmd_match = false;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t exec_req = false;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*  ---------------------------------------
        Step1: save chars from the terminal
        ---------------------------------------
     */
    bool newChar = true;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    while(newChar) {
 8002b04:	e15e      	b.n	8002dc4 <cli_rx_handle+0x2e4>
        if(Handle.len < MAX_LINE_LEN) {  /* check the buffer */
 8002b06:	4bb2      	ldr	r3, [pc, #712]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8002b0e:	f200 8173 	bhi.w	8002df8 <cli_rx_handle+0x318>
        	newChar = shell_queue_out(rx_buff, Handle.buff+Handle.len);
 8002b12:	4baf      	ldr	r3, [pc, #700]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4bad      	ldr	r3, [pc, #692]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fe7a 	bl	800381a <shell_queue_out>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

            /* new char coming from the terminal, copy it to Handle.buff */
            if(newChar) {
 8002b34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d069      	beq.n	8002c10 <cli_rx_handle+0x130>
                /* KEY_BACKSPACE -->get DELETE key from keyboard */
                if (Handle.buff[Handle.len] == KEY_BACKSPACE || Handle.buff[Handle.len] == KEY_DEL) {
 8002b3c:	4ba4      	ldr	r3, [pc, #656]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b42:	461a      	mov	r2, r3
 8002b44:	4ba2      	ldr	r3, [pc, #648]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d007      	beq.n	8002b5c <cli_rx_handle+0x7c>
 8002b4c:	4ba0      	ldr	r3, [pc, #640]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b9e      	ldr	r3, [pc, #632]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	2b7f      	cmp	r3, #127	; 0x7f
 8002b5a:	d11c      	bne.n	8002b96 <cli_rx_handle+0xb6>
                    /* buffer not empty */
                    if (Handle.len > 0) {
 8002b5c:	4b9c      	ldr	r3, [pc, #624]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 812e 	beq.w	8002dc4 <cli_rx_handle+0x2e4>
                        /* delete a char in terminal */
                        TERMINAL_MOVE_LEFT(1);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	489a      	ldr	r0, [pc, #616]	; (8002dd4 <cli_rx_handle+0x2f4>)
 8002b6c:	f008 fae8 	bl	800b140 <iprintf>
                        TERMINAL_CLEAR_END();
 8002b70:	4899      	ldr	r0, [pc, #612]	; (8002dd8 <cli_rx_handle+0x2f8>)
 8002b72:	f008 fae5 	bl	800b140 <iprintf>
                        Handle.buff[Handle.len] = '\0';
 8002b76:	4b96      	ldr	r3, [pc, #600]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b94      	ldr	r3, [pc, #592]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]
                        Handle.len--;
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    if (Handle.len > 0) {
 8002b94:	e116      	b.n	8002dc4 <cli_rx_handle+0x2e4>
                    }

                } else if(Handle.buff[Handle.len] == KEY_ENTER){
 8002b96:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	2b0d      	cmp	r3, #13
 8002ba4:	d10b      	bne.n	8002bbe <cli_rx_handle+0xde>
                	exec_req = true;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                	Handle.len++;
 8002bac:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b86      	ldr	r3, [pc, #536]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bbc:	e102      	b.n	8002dc4 <cli_rx_handle+0x2e4>
                }else if(strstr((const char *)Handle.buff, KEY_DELETE) != NULL){
 8002bbe:	4987      	ldr	r1, [pc, #540]	; (8002ddc <cli_rx_handle+0x2fc>)
 8002bc0:	4883      	ldr	r0, [pc, #524]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bc2:	f008 fc20 	bl	800b406 <strstr>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <cli_rx_handle+0x11e>
                	strcpy((char *)&Handle.buff[Handle.len-3], (char *)&Handle.buff[Handle.len+1]);
 8002bcc:	4b80      	ldr	r3, [pc, #512]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd2:	3b03      	subs	r3, #3
 8002bd4:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bd6:	441a      	add	r2, r3
 8002bd8:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	3301      	adds	r3, #1
 8002be0:	497b      	ldr	r1, [pc, #492]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002be2:	440b      	add	r3, r1
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f008 fc05 	bl	800b3f6 <strcpy>
                	Handle.len -= 3;
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf2:	3b03      	subs	r3, #3
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bfc:	e0e2      	b.n	8002dc4 <cli_rx_handle+0x2e4>
            	}else{
                    Handle.len++;
 8002bfe:	4b74      	ldr	r3, [pc, #464]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c04:	3301      	adds	r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c0e:	e0d9      	b.n	8002dc4 <cli_rx_handle+0x2e4>
                }

            } else if(cli_password_ok){
 8002c10:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <cli_rx_handle+0x300>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80d5 	beq.w	8002dc4 <cli_rx_handle+0x2e4>
                /* all chars copied to Handle.buff */
                uint8_t key = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                uint8_t err = 0xff;
 8002c20:	23ff      	movs	r3, #255	; 0xff
 8002c22:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                char *p_hist_cmd = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28

                if (Handle.len >= 3) {
 8002c2a:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	f240 80a7 	bls.w	8002d84 <cli_rx_handle+0x2a4>
                    if (strstr((const char *)Handle.buff, KEY_UP) != NULL) {
 8002c36:	496b      	ldr	r1, [pc, #428]	; (8002de4 <cli_rx_handle+0x304>)
 8002c38:	4865      	ldr	r0, [pc, #404]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c3a:	f008 fbe4 	bl	800b406 <strstr>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01c      	beq.n	8002c7e <cli_rx_handle+0x19e>
                        key = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002c4a:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d907      	bls.n	8002c64 <cli_rx_handle+0x184>
 8002c54:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c5a:	3b03      	subs	r3, #3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	485d      	ldr	r0, [pc, #372]	; (8002dd4 <cli_rx_handle+0x2f4>)
 8002c60:	f008 fa6e 	bl	800b140 <iprintf>
                        TERMINAL_CLEAR_END();
 8002c64:	485c      	ldr	r0, [pc, #368]	; (8002dd8 <cli_rx_handle+0x2f8>)
 8002c66:	f008 fa6b 	bl	800b140 <iprintf>
                        err = cli_history_show(true, &p_hist_cmd);
 8002c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7ff fe25 	bl	80028c0 <cli_history_show>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002c7c:	e038      	b.n	8002cf0 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_DOWN) != NULL) {
 8002c7e:	495a      	ldr	r1, [pc, #360]	; (8002de8 <cli_rx_handle+0x308>)
 8002c80:	4853      	ldr	r0, [pc, #332]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c82:	f008 fbc0 	bl	800b406 <strstr>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <cli_rx_handle+0x1e6>
                        key = 2;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002c92:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d907      	bls.n	8002cac <cli_rx_handle+0x1cc>
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca2:	3b03      	subs	r3, #3
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	484b      	ldr	r0, [pc, #300]	; (8002dd4 <cli_rx_handle+0x2f4>)
 8002ca8:	f008 fa4a 	bl	800b140 <iprintf>
                        TERMINAL_CLEAR_END();
 8002cac:	484a      	ldr	r0, [pc, #296]	; (8002dd8 <cli_rx_handle+0x2f8>)
 8002cae:	f008 fa47 	bl	800b140 <iprintf>
                        err = cli_history_show(false, &p_hist_cmd);
 8002cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7ff fe01 	bl	80028c0 <cli_history_show>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002cc4:	e014      	b.n	8002cf0 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_RIGHT) != NULL) {
 8002cc6:	4949      	ldr	r1, [pc, #292]	; (8002dec <cli_rx_handle+0x30c>)
 8002cc8:	4841      	ldr	r0, [pc, #260]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002cca:	f008 fb9c 	bl	800b406 <strstr>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <cli_rx_handle+0x1fc>
                        key = 3;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002cda:	e009      	b.n	8002cf0 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_LEFT) != NULL) {
 8002cdc:	4944      	ldr	r1, [pc, #272]	; (8002df0 <cli_rx_handle+0x310>)
 8002cde:	483c      	ldr	r0, [pc, #240]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002ce0:	f008 fb91 	bl	800b406 <strstr>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <cli_rx_handle+0x210>
                        key = 4;
 8002cea:	2304      	movs	r3, #4
 8002cec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }

                    if (key != 0) {
 8002cf0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d045      	beq.n	8002d84 <cli_rx_handle+0x2a4>
                        if (!err) {
 8002cf8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d124      	bne.n	8002d4a <cli_rx_handle+0x26a>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002d00:	2251      	movs	r2, #81	; 0x51
 8002d02:	2100      	movs	r1, #0
 8002d04:	4832      	ldr	r0, [pc, #200]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d06:	f007 f95f 	bl	8009fc8 <memset>
                            memcpy(Handle.buff, p_hist_cmd, strlen(p_hist_cmd));
 8002d0a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fae0 	bl	80002d4 <strlen>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4621      	mov	r1, r4
 8002d1a:	482d      	ldr	r0, [pc, #180]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d1c:	f007 f92c 	bl	8009f78 <memcpy>
                            Handle.len = strlen(p_hist_cmd);
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fad6 	bl	80002d4 <strlen>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            Handle.buff[Handle.len] = '\0';
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	5499      	strb	r1, [r3, r2]
                            printf("%s", Handle.buff);  /* display history command */
 8002d40:	4923      	ldr	r1, [pc, #140]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d42:	482c      	ldr	r0, [pc, #176]	; (8002df4 <cli_rx_handle+0x314>)
 8002d44:	f008 f9fc 	bl	800b140 <iprintf>
 8002d48:	e01c      	b.n	8002d84 <cli_rx_handle+0x2a4>
                        } else if (err && (0 != key)) {
 8002d4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <cli_rx_handle+0x2a4>
 8002d52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d014      	beq.n	8002d84 <cli_rx_handle+0x2a4>
                            /* no history found */
                            TERMINAL_MOVE_LEFT(Handle.len-3);
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d907      	bls.n	8002d74 <cli_rx_handle+0x294>
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d6a:	3b03      	subs	r3, #3
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4819      	ldr	r0, [pc, #100]	; (8002dd4 <cli_rx_handle+0x2f4>)
 8002d70:	f008 f9e6 	bl	800b140 <iprintf>
                            TERMINAL_CLEAR_END();
 8002d74:	4818      	ldr	r0, [pc, #96]	; (8002dd8 <cli_rx_handle+0x2f8>)
 8002d76:	f008 f9e3 	bl	800b140 <iprintf>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002d7a:	2251      	movs	r2, #81	; 0x51
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4814      	ldr	r0, [pc, #80]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d80:	f007 f922 	bl	8009fc8 <memset>
                        }
                    }
                }

                if ((key == 0) && (Handle.len > i)) {
 8002d84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d137      	bne.n	8002dfc <cli_rx_handle+0x31c>
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d92:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d230      	bcs.n	8002dfc <cli_rx_handle+0x31c>
                    /* display char in terminal */
                    for (; i < Handle.len; i++) {
 8002d9a:	e00b      	b.n	8002db4 <cli_rx_handle+0x2d4>
                    	printf("%c", Handle.buff[i]);
 8002d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 f9e3 	bl	800b170 <putchar>
                    for (; i < Handle.len; i++) {
 8002daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dae:	3301      	adds	r3, #1
 8002db0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <cli_rx_handle+0x2f0>)
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3ec      	bcc.n	8002d9c <cli_rx_handle+0x2bc>

                    }
                }
                break;
 8002dc2:	e01b      	b.n	8002dfc <cli_rx_handle+0x31c>
    while(newChar) {
 8002dc4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f ae9c 	bne.w	8002b06 <cli_rx_handle+0x26>
 8002dce:	e016      	b.n	8002dfe <cli_rx_handle+0x31e>
 8002dd0:	20000880 	.word	0x20000880
 8002dd4:	0800e910 	.word	0x0800e910
 8002dd8:	0800e918 	.word	0x0800e918
 8002ddc:	0800e91c 	.word	0x0800e91c
 8002de0:	2000087b 	.word	0x2000087b
 8002de4:	0800e924 	.word	0x0800e924
 8002de8:	0800e928 	.word	0x0800e928
 8002dec:	0800e92c 	.word	0x0800e92c
 8002df0:	0800e930 	.word	0x0800e930
 8002df4:	0800e934 	.word	0x0800e934
            }

        } else {
            /* buffer full */
            break;
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <cli_rx_handle+0x31e>
                break;
 8002dfc:	bf00      	nop

    /*  ---------------------------------------
        Step2: handle the commands
        ---------------------------------------
     */
    if(exec_req && !cli_password_ok){
 8002dfe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <cli_rx_handle+0x340>
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <cli_rx_handle+0x510>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <cli_rx_handle+0x340>
    		cli_password_ok = true;
    		greet();
    	}
    	Handle.len = 0;
#else
    	cli_password_ok = true;
 8002e14:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <cli_rx_handle+0x510>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
    	greet();
 8002e1a:	f000 f91b 	bl	8003054 <greet>
 8002e1e:	e0d2      	b.n	8002fc6 <cli_rx_handle+0x4e6>
#endif
    }else if(exec_req && (Handle.len == 1)) {
 8002e20:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <cli_rx_handle+0x362>
 8002e28:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <cli_rx_handle+0x362>
        /* KEY_ENTER -->ENTER key from terminal */
    	PRINT_CLI_NAME();
 8002e32:	4871      	ldr	r0, [pc, #452]	; (8002ff8 <cli_rx_handle+0x518>)
 8002e34:	f008 f984 	bl	800b140 <iprintf>
        Handle.len = 0;
 8002e38:	4b6e      	ldr	r3, [pc, #440]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002e40:	e0c1      	b.n	8002fc6 <cli_rx_handle+0x4e6>
    } else if(exec_req && Handle.len > 1) {  /* check for the length of command */
 8002e42:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80bd 	beq.w	8002fc6 <cli_rx_handle+0x4e6>
 8002e4c:	4b69      	ldr	r3, [pc, #420]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f240 80b7 	bls.w	8002fc6 <cli_rx_handle+0x4e6>
		NL1();
 8002e58:	200a      	movs	r0, #10
 8002e5a:	f008 f989 	bl	800b170 <putchar>
		Handle.buff[Handle.len - 1] = '\0';
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	54d1      	strb	r1, [r2, r3]
		cli_history_add((char *)Handle.buff);
 8002e6c:	4861      	ldr	r0, [pc, #388]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e6e:	f7ff fcb3 	bl	80027d8 <cli_history_add>
		char *command = strtok((char *)Handle.buff, " \t");
 8002e72:	4962      	ldr	r1, [pc, #392]	; (8002ffc <cli_rx_handle+0x51c>)
 8002e74:	485f      	ldr	r0, [pc, #380]	; (8002ff4 <cli_rx_handle+0x514>)
 8002e76:	f009 f907 	bl	800c088 <strtok>
 8002e7a:	6338      	str	r0, [r7, #48]	; 0x30

		/* looking for a match */
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002e82:	e089      	b.n	8002f98 <cli_rx_handle+0x4b8>
			if(0 == strcmp(command, CLI_commands[i].pCmd)) {
 8002e84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e88:	495d      	ldr	r1, [pc, #372]	; (8003000 <cli_rx_handle+0x520>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9a:	f7fd fa11 	bl	80002c0 <strcmp>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d174      	bne.n	8002f8e <cli_rx_handle+0x4ae>
				cmd_match = true;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				//Split arguments string to argc/argv
				uint8_t argc = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				char 	*argv[MAX_ARGC];
				argv[0] = command;
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	60bb      	str	r3, [r7, #8]

				char *token = strtok(NULL, " \t");
 8002eb4:	4951      	ldr	r1, [pc, #324]	; (8002ffc <cli_rx_handle+0x51c>)
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f009 f8e6 	bl	800c088 <strtok>
 8002ebc:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 8002ebe:	e01d      	b.n	8002efc <cli_rx_handle+0x41c>
					if(argc >= MAX_ARGC){
 8002ec0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d907      	bls.n	8002ed8 <cli_rx_handle+0x3f8>
						printf(CLI_FONT_RED "Maximum number of arguments is %d. Ignoring the rest of the arguments."CLI_FONT_DEFAULT, MAX_ARGC-1);NL1();
 8002ec8:	2107      	movs	r1, #7
 8002eca:	484e      	ldr	r0, [pc, #312]	; (8003004 <cli_rx_handle+0x524>)
 8002ecc:	f008 f938 	bl	800b140 <iprintf>
 8002ed0:	200a      	movs	r0, #10
 8002ed2:	f008 f94d 	bl	800b170 <putchar>
						break;
 8002ed6:	e014      	b.n	8002f02 <cli_rx_handle+0x422>
					}
					argv[argc] = token;
 8002ed8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3340      	adds	r3, #64	; 0x40
 8002ee0:	443b      	add	r3, r7
 8002ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee4:	f843 2c38 	str.w	r2, [r3, #-56]
					argc++;
 8002ee8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002eec:	3301      	adds	r3, #1
 8002eee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					token = strtok(NULL, " \t");
 8002ef2:	4942      	ldr	r1, [pc, #264]	; (8002ffc <cli_rx_handle+0x51c>)
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f009 f8c7 	bl	800c088 <strtok>
 8002efa:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1de      	bne.n	8002ec0 <cli_rx_handle+0x3e0>
				}

				if(CLI_commands[i].pFun != NULL) {
 8002f02:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002f06:	493e      	ldr	r1, [pc, #248]	; (8003000 <cli_rx_handle+0x520>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3308      	adds	r3, #8
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d032      	beq.n	8002f80 <cli_rx_handle+0x4a0>
					/* call the func. */
					TERMINAL_HIDE_CURSOR();
 8002f1a:	483b      	ldr	r0, [pc, #236]	; (8003008 <cli_rx_handle+0x528>)
 8002f1c:	f008 f910 	bl	800b140 <iprintf>
					uint8_t result = CLI_commands[i].pFun(argc, argv);
 8002f20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002f24:	4936      	ldr	r1, [pc, #216]	; (8003000 <cli_rx_handle+0x520>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3308      	adds	r3, #8
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002f38:	f107 0108 	add.w	r1, r7, #8
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if(result == EXIT_SUCCESS){
 8002f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <cli_rx_handle+0x484>
						printf(CLI_FONT_GREEN "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8002f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f52:	461a      	mov	r2, r3
 8002f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f56:	482d      	ldr	r0, [pc, #180]	; (800300c <cli_rx_handle+0x52c>)
 8002f58:	f008 f8f2 	bl	800b140 <iprintf>
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f008 f907 	bl	800b170 <putchar>
 8002f62:	e009      	b.n	8002f78 <cli_rx_handle+0x498>
					}else{
						printf(CLI_FONT_RED "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8002f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f6c:	4828      	ldr	r0, [pc, #160]	; (8003010 <cli_rx_handle+0x530>)
 8002f6e:	f008 f8e7 	bl	800b140 <iprintf>
 8002f72:	200a      	movs	r0, #10
 8002f74:	f008 f8fc 	bl	800b170 <putchar>
					}
					TERMINAL_SHOW_CURSOR();
 8002f78:	4826      	ldr	r0, [pc, #152]	; (8003014 <cli_rx_handle+0x534>)
 8002f7a:	f008 f8e1 	bl	800b140 <iprintf>
					break;
 8002f7e:	e010      	b.n	8002fa2 <cli_rx_handle+0x4c2>
				} else {
					/* func. is void */
					printf(CLI_FONT_RED "Command %s exists but no function is associated to it.", command);NL1();
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	4825      	ldr	r0, [pc, #148]	; (8003018 <cli_rx_handle+0x538>)
 8002f84:	f008 f8dc 	bl	800b140 <iprintf>
 8002f88:	200a      	movs	r0, #10
 8002f8a:	f008 f8f1 	bl	800b170 <putchar>
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8002f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f92:	3301      	adds	r3, #1
 8002f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f9c:	2b1f      	cmp	r3, #31
 8002f9e:	f67f af71 	bls.w	8002e84 <cli_rx_handle+0x3a4>
				}
			}
		}

		if(!cmd_match) {
 8002fa2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <cli_rx_handle+0x4d8>
			/* no matching command */
			printf("\r\nCommand \"%s\" unknown, try: help", Handle.buff);NL1();
 8002faa:	4912      	ldr	r1, [pc, #72]	; (8002ff4 <cli_rx_handle+0x514>)
 8002fac:	481b      	ldr	r0, [pc, #108]	; (800301c <cli_rx_handle+0x53c>)
 8002fae:	f008 f8c7 	bl	800b140 <iprintf>
 8002fb2:	200a      	movs	r0, #10
 8002fb4:	f008 f8dc 	bl	800b170 <putchar>
		}

		Handle.len = 0;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <cli_rx_handle+0x514>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		PRINT_CLI_NAME();
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <cli_rx_handle+0x518>)
 8002fc2:	f008 f8bd 	bl	800b140 <iprintf>

    }


    if(Handle.len >= MAX_LINE_LEN) {
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <cli_rx_handle+0x514>)
 8002fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fcc:	2b4f      	cmp	r3, #79	; 0x4f
 8002fce:	d90a      	bls.n	8002fe6 <cli_rx_handle+0x506>
        /* full, so restart the count */
    	printf(CLI_FONT_RED "\r\nMax command length is %d.\r\n" CLI_FONT_DEFAULT, MAX_LINE_LEN-1);
 8002fd0:	214f      	movs	r1, #79	; 0x4f
 8002fd2:	4813      	ldr	r0, [pc, #76]	; (8003020 <cli_rx_handle+0x540>)
 8002fd4:	f008 f8b4 	bl	800b140 <iprintf>
    	PRINT_CLI_NAME();
 8002fd8:	4807      	ldr	r0, [pc, #28]	; (8002ff8 <cli_rx_handle+0x518>)
 8002fda:	f008 f8b1 	bl	800b140 <iprintf>
        Handle.len = 0;
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <cli_rx_handle+0x514>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	3744      	adds	r7, #68	; 0x44
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000087b 	.word	0x2000087b
 8002ff4:	20000880 	.word	0x20000880
 8002ff8:	0800e938 	.word	0x0800e938
 8002ffc:	0800e944 	.word	0x0800e944
 8003000:	200003d8 	.word	0x200003d8
 8003004:	0800e948 	.word	0x0800e948
 8003008:	0800e9a0 	.word	0x0800e9a0
 800300c:	0800e9a8 	.word	0x0800e9a8
 8003010:	0800e9c8 	.word	0x0800e9c8
 8003014:	0800e9e8 	.word	0x0800e9e8
 8003018:	0800e9f0 	.word	0x0800e9f0
 800301c:	0800ea30 	.word	0x0800ea30
 8003020:	0800ea54 	.word	0x0800ea54

08003024 <cli_tx_handle>:
  * @brief  tx handle, flushes stdout buffer
  * @param  null
  * @retval null
  */
static void cli_tx_handle(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
    fflush(stdout);
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <cli_tx_handle+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f006 fe40 	bl	8009cb4 <fflush>
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	2000002c 	.word	0x2000002c

0800303c <cli_run>:

void cli_run(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    cli_rx_handle(&cli_rx_buff);
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <cli_run+0x14>)
 8003042:	f7ff fd4d 	bl	8002ae0 <cli_rx_handle>
    cli_tx_handle();
 8003046:	f7ff ffed 	bl	8003024 <cli_tx_handle>
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200003ac 	.word	0x200003ac

08003054 <greet>:

void greet(void){
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
    NL1();
 8003058:	200a      	movs	r0, #10
 800305a:	f008 f889 	bl	800b170 <putchar>
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 800305e:	484d      	ldr	r0, [pc, #308]	; (8003194 <greet+0x140>)
 8003060:	f008 f86e 	bl	800b140 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003064:	484c      	ldr	r0, [pc, #304]	; (8003198 <greet+0x144>)
 8003066:	f008 f86b 	bl	800b140 <iprintf>
    TERMINAL_RESET_CURSOR();
 800306a:	484c      	ldr	r0, [pc, #304]	; (800319c <greet+0x148>)
 800306c:	f008 f868 	bl	800b140 <iprintf>
    TERMINAL_FONT_BLUE();
 8003070:	484b      	ldr	r0, [pc, #300]	; (80031a0 <greet+0x14c>)
 8003072:	f008 f865 	bl	800b140 <iprintf>
    printf("                             ///////////////////////////////////////////    ");NL1();
 8003076:	484b      	ldr	r0, [pc, #300]	; (80031a4 <greet+0x150>)
 8003078:	f008 f862 	bl	800b140 <iprintf>
 800307c:	200a      	movs	r0, #10
 800307e:	f008 f877 	bl	800b170 <putchar>
    printf("                             /////*   .////////////////////////     *///    ");NL1();
 8003082:	4849      	ldr	r0, [pc, #292]	; (80031a8 <greet+0x154>)
 8003084:	f008 f85c 	bl	800b140 <iprintf>
 8003088:	200a      	movs	r0, #10
 800308a:	f008 f871 	bl	800b170 <putchar>
    printf("            %%%%%%         %%%%%%  ///   ////  //   //////////  //   ////   //    ");NL1();
 800308e:	4847      	ldr	r0, [pc, #284]	; (80031ac <greet+0x158>)
 8003090:	f008 f856 	bl	800b140 <iprintf>
 8003094:	200a      	movs	r0, #10
 8003096:	f008 f86b 	bl	800b170 <putchar>
    printf("            %%%%%%        %%%%%%   ///  //////////   ////////  ///  //////////    ");NL1();
 800309a:	4845      	ldr	r0, [pc, #276]	; (80031b0 <greet+0x15c>)
 800309c:	f008 f850 	bl	800b140 <iprintf>
 80030a0:	200a      	movs	r0, #10
 80030a2:	f008 f865 	bl	800b170 <putchar>
    printf("           %%%%%%        %%%%%%%%   ((((   (((((((((   ((((((  (((((   .(((((((    ");NL1();
 80030a6:	4843      	ldr	r0, [pc, #268]	; (80031b4 <greet+0x160>)
 80030a8:	f008 f84a 	bl	800b140 <iprintf>
 80030ac:	200a      	movs	r0, #10
 80030ae:	f008 f85f 	bl	800b170 <putchar>
    printf("          %%%%%%        %%%%%%%%    (((((((    (((((((  ((((  (((((((((    ((((    ");NL1();
 80030b2:	4841      	ldr	r0, [pc, #260]	; (80031b8 <greet+0x164>)
 80030b4:	f008 f844 	bl	800b140 <iprintf>
 80030b8:	200a      	movs	r0, #10
 80030ba:	f008 f859 	bl	800b170 <putchar>
    printf("          %%%%%%      %%%%  %%%%    ((((((((((   ((((((  ((  ((((((((((((((  ((    ");NL1();
 80030be:	483f      	ldr	r0, [pc, #252]	; (80031bc <greet+0x168>)
 80030c0:	f008 f83e 	bl	800b140 <iprintf>
 80030c4:	200a      	movs	r0, #10
 80030c6:	f008 f853 	bl	800b170 <putchar>
    printf("         %%%%%%%%    %%%%%%   %%%%%%%%  (((*((((((  .(((((((    ((((((( ((((((   ((    ");NL1();
 80030ca:	483d      	ldr	r0, [pc, #244]	; (80031c0 <greet+0x16c>)
 80030cc:	f008 f838 	bl	800b140 <iprintf>
 80030d0:	200a      	movs	r0, #10
 80030d2:	f008 f84d 	bl	800b170 <putchar>
    printf("         %%%%*%%%%%%%%%%%%           (((        (((((((((   ((((((((        ((((    ");NL1();
 80030d6:	483b      	ldr	r0, [pc, #236]	; (80031c4 <greet+0x170>)
 80030d8:	f008 f832 	bl	800b140 <iprintf>
 80030dc:	200a      	movs	r0, #10
 80030de:	f008 f847 	bl	800b170 <putchar>
    printf("        %%%%   %%%%.             ###################   ##################### (((");NL1();
 80030e2:	4839      	ldr	r0, [pc, #228]	; (80031c8 <greet+0x174>)
 80030e4:	f008 f82c 	bl	800b140 <iprintf>
 80030e8:	200a      	movs	r0, #10
 80030ea:	f008 f841 	bl	800b170 <putchar>
    printf("       %%%%%%          (((      ##################   ##################((((((( ");NL1();
 80030ee:	4837      	ldr	r0, [pc, #220]	; (80031cc <greet+0x178>)
 80030f0:	f008 f826 	bl	800b140 <iprintf>
 80030f4:	200a      	movs	r0, #10
 80030f6:	f008 f83b 	bl	800b170 <putchar>
    printf("       %%%%               (((( #################   ##############(((((((##    ");NL1();
 80030fa:	4835      	ldr	r0, [pc, #212]	; (80031d0 <greet+0x17c>)
 80030fc:	f008 f820 	bl	800b140 <iprintf>
 8003100:	200a      	movs	r0, #10
 8003102:	f008 f835 	bl	800b170 <putchar>
    printf("      %%%%%%                   (((((((((##################((((((((((#######    ");NL1();
 8003106:	4833      	ldr	r0, [pc, #204]	; (80031d4 <greet+0x180>)
 8003108:	f008 f81a 	bl	800b140 <iprintf>
 800310c:	200a      	movs	r0, #10
 800310e:	f008 f82f 	bl	800b170 <putchar>
    printf("     %%%%%%                     ########(((((((((((((((((((################    ");NL1();
 8003112:	4831      	ldr	r0, [pc, #196]	; (80031d8 <greet+0x184>)
 8003114:	f008 f814 	bl	800b140 <iprintf>
 8003118:	200a      	movs	r0, #10
 800311a:	f008 f829 	bl	800b170 <putchar>
    printf("     %%%%%%                     ##%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%    ");NL1();
 800311e:	482f      	ldr	r0, [pc, #188]	; (80031dc <greet+0x188>)
 8003120:	f008 f80e 	bl	800b140 <iprintf>
 8003124:	200a      	movs	r0, #10
 8003126:	f008 f823 	bl	800b170 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800312a:	482d      	ldr	r0, [pc, #180]	; (80031e0 <greet+0x18c>)
 800312c:	f008 f808 	bl	800b140 <iprintf>
 8003130:	200a      	movs	r0, #10
 8003132:	f008 f81d 	bl	800b170 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003136:	482a      	ldr	r0, [pc, #168]	; (80031e0 <greet+0x18c>)
 8003138:	f008 f802 	bl	800b140 <iprintf>
 800313c:	200a      	movs	r0, #10
 800313e:	f008 f817 	bl	800b170 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003142:	4828      	ldr	r0, [pc, #160]	; (80031e4 <greet+0x190>)
 8003144:	f007 fffc 	bl	800b140 <iprintf>
 8003148:	200a      	movs	r0, #10
 800314a:	f008 f811 	bl	800b170 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800314e:	4825      	ldr	r0, [pc, #148]	; (80031e4 <greet+0x190>)
 8003150:	f007 fff6 	bl	800b140 <iprintf>
 8003154:	200a      	movs	r0, #10
 8003156:	f008 f80b 	bl	800b170 <putchar>
    printf("µShell v0.1 - by Morgan Diepart (mdiepart@uliege.be)");NL1();
 800315a:	4823      	ldr	r0, [pc, #140]	; (80031e8 <greet+0x194>)
 800315c:	f007 fff0 	bl	800b140 <iprintf>
 8003160:	200a      	movs	r0, #10
 8003162:	f008 f805 	bl	800b170 <putchar>
    printf("Original work from https://github.com/ShareCat/STM32CommandLine");NL1();
 8003166:	4821      	ldr	r0, [pc, #132]	; (80031ec <greet+0x198>)
 8003168:	f007 ffea 	bl	800b140 <iprintf>
 800316c:	200a      	movs	r0, #10
 800316e:	f007 ffff 	bl	800b170 <putchar>
    printf("-------------------------------");
 8003172:	481f      	ldr	r0, [pc, #124]	; (80031f0 <greet+0x19c>)
 8003174:	f007 ffe4 	bl	800b140 <iprintf>
    NL2();
 8003178:	481e      	ldr	r0, [pc, #120]	; (80031f4 <greet+0x1a0>)
 800317a:	f008 f87d 	bl	800b278 <puts>
    TERMINAL_FONT_DEFAULT();
 800317e:	481e      	ldr	r0, [pc, #120]	; (80031f8 <greet+0x1a4>)
 8003180:	f007 ffde 	bl	800b140 <iprintf>
    PRINT_CLI_NAME();
 8003184:	481d      	ldr	r0, [pc, #116]	; (80031fc <greet+0x1a8>)
 8003186:	f007 ffdb 	bl	800b140 <iprintf>
    TERMINAL_SHOW_CURSOR();
 800318a:	481d      	ldr	r0, [pc, #116]	; (8003200 <greet+0x1ac>)
 800318c:	f007 ffd8 	bl	800b140 <iprintf>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	0800ea80 	.word	0x0800ea80
 8003198:	0800ea88 	.word	0x0800ea88
 800319c:	0800ea90 	.word	0x0800ea90
 80031a0:	0800ea94 	.word	0x0800ea94
 80031a4:	0800ea9c 	.word	0x0800ea9c
 80031a8:	0800eaec 	.word	0x0800eaec
 80031ac:	0800eb3c 	.word	0x0800eb3c
 80031b0:	0800eb90 	.word	0x0800eb90
 80031b4:	0800ebe4 	.word	0x0800ebe4
 80031b8:	0800ec38 	.word	0x0800ec38
 80031bc:	0800ec8c 	.word	0x0800ec8c
 80031c0:	0800ece0 	.word	0x0800ece0
 80031c4:	0800ed38 	.word	0x0800ed38
 80031c8:	0800ed90 	.word	0x0800ed90
 80031cc:	0800ede4 	.word	0x0800ede4
 80031d0:	0800ee34 	.word	0x0800ee34
 80031d4:	0800ee84 	.word	0x0800ee84
 80031d8:	0800eed4 	.word	0x0800eed4
 80031dc:	0800ef24 	.word	0x0800ef24
 80031e0:	0800ef8c 	.word	0x0800ef8c
 80031e4:	0800f008 	.word	0x0800f008
 80031e8:	0800f080 	.word	0x0800f080
 80031ec:	0800f0b8 	.word	0x0800f0b8
 80031f0:	0800f0f8 	.word	0x0800f0f8
 80031f4:	0800f118 	.word	0x0800f118
 80031f8:	0800f11c 	.word	0x0800f11c
 80031fc:	0800e938 	.word	0x0800e938
 8003200:	0800e9e8 	.word	0x0800e9e8

08003204 <cli_help>:
  * @brief  printf the help info.
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_help(int argc, char *argv[])
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	if(argc == 1){
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d13e      	bne.n	8003292 <cli_help+0x8e>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e036      	b.n	8003288 <cli_help+0x84>
	    	if(strcmp(CLI_commands[i].pCmd, "") != 0){
 800321a:	494a      	ldr	r1, [pc, #296]	; (8003344 <cli_help+0x140>)
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d028      	beq.n	8003282 <cli_help+0x7e>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 8003230:	4944      	ldr	r1, [pc, #272]	; (8003344 <cli_help+0x140>)
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	4841      	ldr	r0, [pc, #260]	; (8003348 <cli_help+0x144>)
 8003244:	f007 ff7c 	bl	800b140 <iprintf>
 8003248:	200a      	movs	r0, #10
 800324a:	f007 ff91 	bl	800b170 <putchar>
		        if (CLI_commands[i].pHelp) {
 800324e:	493d      	ldr	r1, [pc, #244]	; (8003344 <cli_help+0x140>)
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	3304      	adds	r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <cli_help+0x7e>
		            printf(CLI_commands[i].pHelp);NL2();
 8003264:	4937      	ldr	r1, [pc, #220]	; (8003344 <cli_help+0x140>)
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3304      	adds	r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f007 ff62 	bl	800b140 <iprintf>
 800327c:	4833      	ldr	r0, [pc, #204]	; (800334c <cli_help+0x148>)
 800327e:	f007 fffb 	bl	800b278 <puts>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b1f      	cmp	r3, #31
 800328c:	d9c5      	bls.n	800321a <cli_help+0x16>
		        }
	    	}
	    }
	    return EXIT_SUCCESS;
 800328e:	2300      	movs	r3, #0
 8003290:	e053      	b.n	800333a <cli_help+0x136>
	}else if(argc == 2){
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d146      	bne.n	8003326 <cli_help+0x122>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	e034      	b.n	8003308 <cli_help+0x104>
	    	if(strcmp(CLI_commands[i].pCmd, argv[1]) == 0){
 800329e:	4929      	ldr	r1, [pc, #164]	; (8003344 <cli_help+0x140>)
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fd f802 	bl	80002c0 <strcmp>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11f      	bne.n	8003302 <cli_help+0xfe>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 80032c2:	4920      	ldr	r1, [pc, #128]	; (8003344 <cli_help+0x140>)
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4619      	mov	r1, r3
 80032d4:	481c      	ldr	r0, [pc, #112]	; (8003348 <cli_help+0x144>)
 80032d6:	f007 ff33 	bl	800b140 <iprintf>
 80032da:	200a      	movs	r0, #10
 80032dc:	f007 ff48 	bl	800b170 <putchar>
	    		printf(CLI_commands[i].pHelp);NL1();
 80032e0:	4918      	ldr	r1, [pc, #96]	; (8003344 <cli_help+0x140>)
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3304      	adds	r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 ff24 	bl	800b140 <iprintf>
 80032f8:	200a      	movs	r0, #10
 80032fa:	f007 ff39 	bl	800b170 <putchar>
	    		return EXIT_SUCCESS;
 80032fe:	2300      	movs	r3, #0
 8003300:	e01b      	b.n	800333a <cli_help+0x136>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3301      	adds	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b1f      	cmp	r3, #31
 800330c:	d9c7      	bls.n	800329e <cli_help+0x9a>
	    	}
	    }
	    printf("No help found for command %s.", argv[1]);NL1();
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	480e      	ldr	r0, [pc, #56]	; (8003350 <cli_help+0x14c>)
 8003318:	f007 ff12 	bl	800b140 <iprintf>
 800331c:	200a      	movs	r0, #10
 800331e:	f007 ff27 	bl	800b170 <putchar>
	    return EXIT_FAILURE;
 8003322:	2301      	movs	r3, #1
 8003324:	e009      	b.n	800333a <cli_help+0x136>
	}else{
		printf("Command \"%s\" takes at most 1 argument.", argv[0]);NL1();
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <cli_help+0x150>)
 800332e:	f007 ff07 	bl	800b140 <iprintf>
 8003332:	200a      	movs	r0, #10
 8003334:	f007 ff1c 	bl	800b170 <putchar>
		return EXIT_FAILURE;
 8003338:	2301      	movs	r3, #1
	}
    return EXIT_FAILURE;
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200003d8 	.word	0x200003d8
 8003348:	0800f124 	.word	0x0800f124
 800334c:	0800f118 	.word	0x0800f118
 8003350:	0800f12c 	.word	0x0800f12c
 8003354:	0800f14c 	.word	0x0800f14c

08003358 <cli_clear>:
  * @brief  clear the screen
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_clear(int argc, char *argv[])
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	if(argc != 1){
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d00a      	beq.n	800337e <cli_clear+0x26>
		printf("command \"%s\" does not take any argument.", argv[0]);NL1();
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4619      	mov	r1, r3
 800336e:	480c      	ldr	r0, [pc, #48]	; (80033a0 <cli_clear+0x48>)
 8003370:	f007 fee6 	bl	800b140 <iprintf>
 8003374:	200a      	movs	r0, #10
 8003376:	f007 fefb 	bl	800b170 <putchar>
		return EXIT_FAILURE;
 800337a:	2301      	movs	r3, #1
 800337c:	e00c      	b.n	8003398 <cli_clear+0x40>
	}
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 800337e:	4809      	ldr	r0, [pc, #36]	; (80033a4 <cli_clear+0x4c>)
 8003380:	f007 fede 	bl	800b140 <iprintf>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8003384:	4808      	ldr	r0, [pc, #32]	; (80033a8 <cli_clear+0x50>)
 8003386:	f007 fedb 	bl	800b140 <iprintf>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 800338a:	4808      	ldr	r0, [pc, #32]	; (80033ac <cli_clear+0x54>)
 800338c:	f007 fed8 	bl	800b140 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003390:	4807      	ldr	r0, [pc, #28]	; (80033b0 <cli_clear+0x58>)
 8003392:	f007 fed5 	bl	800b140 <iprintf>

    return EXIT_SUCCESS;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	0800f174 	.word	0x0800f174
 80033a4:	0800ea80 	.word	0x0800ea80
 80033a8:	0800f11c 	.word	0x0800f11c
 80033ac:	0800ea90 	.word	0x0800ea90
 80033b0:	0800ea88 	.word	0x0800ea88

080033b4 <cli_reset>:
  * @brief  MCU reboot
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_reset(int argc, char *argv[])
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	if(argc > 1){
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	dd0a      	ble.n	80033da <cli_reset+0x26>
		printf("Command \"%s\" takes no argument.", argv[0]);NL1();
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	480c      	ldr	r0, [pc, #48]	; (80033fc <cli_reset+0x48>)
 80033cc:	f007 feb8 	bl	800b140 <iprintf>
 80033d0:	200a      	movs	r0, #10
 80033d2:	f007 fecd 	bl	800b170 <putchar>
		return EXIT_FAILURE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00b      	b.n	80033f2 <cli_reset+0x3e>
	}

	NL1();printf("[END]: System Rebooting");NL1();
 80033da:	200a      	movs	r0, #10
 80033dc:	f007 fec8 	bl	800b170 <putchar>
 80033e0:	4807      	ldr	r0, [pc, #28]	; (8003400 <cli_reset+0x4c>)
 80033e2:	f007 fead 	bl	800b140 <iprintf>
 80033e6:	200a      	movs	r0, #10
 80033e8:	f007 fec2 	bl	800b170 <putchar>
	HAL_NVIC_SystemReset();
 80033ec:	f000 fcf7 	bl	8003dde <HAL_NVIC_SystemReset>
	return EXIT_SUCCESS;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	0800f1a0 	.word	0x0800f1a0
 8003400:	0800f1c0 	.word	0x0800f1c0

08003404 <cli_add_command>:

void cli_add_command(const char *command, const char *help, uint8_t (*exec)(int argc, char *argv[])){
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
	for(; i < MAX_COMMAND_NB; i++){
 8003414:	e02b      	b.n	800346e <cli_add_command+0x6a>
		if(strcmp(CLI_commands[i].pCmd, "") == 0){
 8003416:	4929      	ldr	r1, [pc, #164]	; (80034bc <cli_add_command+0xb8>)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11d      	bne.n	8003468 <cli_add_command+0x64>
			CLI_commands[i].pCmd = command;
 800342c:	4923      	ldr	r1, [pc, #140]	; (80034bc <cli_add_command+0xb8>)
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pFun = exec;
 800343e:	491f      	ldr	r1, [pc, #124]	; (80034bc <cli_add_command+0xb8>)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3308      	adds	r3, #8
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pHelp = help;
 8003452:	491a      	ldr	r1, [pc, #104]	; (80034bc <cli_add_command+0xb8>)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3304      	adds	r3, #4
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	601a      	str	r2, [r3, #0]
			break;
 8003466:	e005      	b.n	8003474 <cli_add_command+0x70>
	for(; i < MAX_COMMAND_NB; i++){
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3301      	adds	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b1f      	cmp	r3, #31
 8003472:	d9d0      	bls.n	8003416 <cli_add_command+0x12>
		}
	}
	if(i == MAX_COMMAND_NB){
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d10f      	bne.n	800349a <cli_add_command+0x96>
		ERR("Cannot add command %s, max number of commands "
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <cli_add_command+0xbc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68d8      	ldr	r0, [r3, #12]
 8003480:	2320      	movs	r3, #32
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	f240 237d 	movw	r3, #637	; 0x27d
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <cli_add_command+0xc0>)
 800348e:	490e      	ldr	r1, [pc, #56]	; (80034c8 <cli_add_command+0xc4>)
 8003490:	f006 fcf8 	bl	8009e84 <fiprintf>
				"reached. The maximum number of command is set to %d.\n" CLI_FONT_DEFAULT,
				command, MAX_COMMAND_NB); NL1();
 8003494:	200a      	movs	r0, #10
 8003496:	f007 fe6b 	bl	800b170 <putchar>
	}
	LOG(CLI_LOG_SHELL, "Command %s added to shell.\n", command);
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <cli_add_command+0xc8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <cli_add_command+0xb0>
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <cli_add_command+0xcc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4809      	ldr	r0, [pc, #36]	; (80034d4 <cli_add_command+0xd0>)
 80034b0:	f007 fe46 	bl	800b140 <iprintf>
}
 80034b4:	bf00      	nop
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200003d8 	.word	0x200003d8
 80034c0:	2000002c 	.word	0x2000002c
 80034c4:	0800f1d8 	.word	0x0800f1d8
 80034c8:	0800f1f8 	.word	0x0800f1f8
 80034cc:	2000001c 	.word	0x2000001c
 80034d0:	20000000 	.word	0x20000000
 80034d4:	0800f280 	.word	0x0800f280

080034d8 <cli_log>:

uint8_t cli_log(int argc, char *argv[]){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	if(argc < 2){
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	dc09      	bgt.n	80034fc <cli_log+0x24>
		printf("Command %s takes at least one argument. Use \"help %s\" for usage.\n", argv[0], argv[0]);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4859      	ldr	r0, [pc, #356]	; (8003658 <cli_log+0x180>)
 80034f4:	f007 fe24 	bl	800b140 <iprintf>
		return EXIT_FAILURE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0a8      	b.n	800364e <cli_log+0x176>
	}

	if(strcmp(argv[1], "on") == 0){
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	3304      	adds	r3, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4956      	ldr	r1, [pc, #344]	; (800365c <cli_log+0x184>)
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc fedb 	bl	80002c0 <strcmp>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d131      	bne.n	8003574 <cli_log+0x9c>
		if(argc < 3){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	dc07      	bgt.n	8003526 <cli_log+0x4e>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	4850      	ldr	r0, [pc, #320]	; (8003660 <cli_log+0x188>)
 800351e:	f007 fe0f 	bl	800b140 <iprintf>
			return EXIT_FAILURE;
 8003522:	2301      	movs	r3, #1
 8003524:	e093      	b.n	800364e <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <cli_log+0x18c>)
 800352e:	4618      	mov	r0, r3
 8003530:	f7fc fec6 	bl	80002c0 <strcmp>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d108      	bne.n	800354c <cli_log+0x74>
			cli_log_stat = 0xFFFFFFFF;
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <cli_log+0x190>)
 800353c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003540:	601a      	str	r2, [r3, #0]
			printf("All logs enabled.\n");
 8003542:	484a      	ldr	r0, [pc, #296]	; (800366c <cli_log+0x194>)
 8003544:	f007 fe98 	bl	800b278 <puts>
			return EXIT_SUCCESS;
 8003548:	2300      	movs	r3, #0
 800354a:	e080      	b.n	800364e <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 800354c:	2302      	movs	r3, #2
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e00a      	b.n	8003568 <cli_log+0x90>
				cli_enable_log_entry(argv[i]);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4413      	add	r3, r2
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f8c9 	bl	80036f4 <cli_enable_log_entry>
			for(int i = 2; i < argc; i++){
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	dbf0      	blt.n	8003552 <cli_log+0x7a>
			}
			return EXIT_SUCCESS;
 8003570:	2300      	movs	r3, #0
 8003572:	e06c      	b.n	800364e <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "off") == 0){
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	493d      	ldr	r1, [pc, #244]	; (8003670 <cli_log+0x198>)
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc fe9f 	bl	80002c0 <strcmp>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d133      	bne.n	80035f0 <cli_log+0x118>
		printf("Turning off all logs\n");
 8003588:	483a      	ldr	r0, [pc, #232]	; (8003674 <cli_log+0x19c>)
 800358a:	f007 fe75 	bl	800b278 <puts>
		if(argc < 3){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	dc07      	bgt.n	80035a4 <cli_log+0xcc>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	4831      	ldr	r0, [pc, #196]	; (8003660 <cli_log+0x188>)
 800359c:	f007 fdd0 	bl	800b140 <iprintf>
			return EXIT_FAILURE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e054      	b.n	800364e <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	492e      	ldr	r1, [pc, #184]	; (8003664 <cli_log+0x18c>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc fe87 	bl	80002c0 <strcmp>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <cli_log+0xf0>
			cli_log_stat = 0;
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <cli_log+0x190>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
			printf("All logs disabled.\n");
 80035be:	482e      	ldr	r0, [pc, #184]	; (8003678 <cli_log+0x1a0>)
 80035c0:	f007 fe5a 	bl	800b278 <puts>
			return EXIT_SUCCESS;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e042      	b.n	800364e <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 80035c8:	2302      	movs	r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e00a      	b.n	80035e4 <cli_log+0x10c>
				cli_disable_log_entry(argv[i]);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f859 	bl	8003690 <cli_disable_log_entry>
			for(int i = 2; i < argc; i++){
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dbf0      	blt.n	80035ce <cli_log+0xf6>
			}
			return EXIT_SUCCESS;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e02e      	b.n	800364e <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "show") == 0){
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4921      	ldr	r1, [pc, #132]	; (800367c <cli_log+0x1a4>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc fe61 	bl	80002c0 <strcmp>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d123      	bne.n	800364c <cli_log+0x174>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e01b      	b.n	8003642 <cli_log+0x16a>
			printf("%16s:\t", cli_logs_names[i]);
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <cli_log+0x1a8>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	4619      	mov	r1, r3
 8003614:	481b      	ldr	r0, [pc, #108]	; (8003684 <cli_log+0x1ac>)
 8003616:	f007 fd93 	bl	800b140 <iprintf>
			if(cli_log_stat&(1<<i)){
 800361a:	2201      	movs	r2, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	461a      	mov	r2, r3
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <cli_log+0x190>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <cli_log+0x15e>
				printf(CLI_FONT_GREEN"Enabled"CLI_FONT_DEFAULT"\n");
 800362e:	4816      	ldr	r0, [pc, #88]	; (8003688 <cli_log+0x1b0>)
 8003630:	f007 fe22 	bl	800b278 <puts>
 8003634:	e002      	b.n	800363c <cli_log+0x164>
			}else{
				printf(CLI_FONT_RED"Disabled"CLI_FONT_DEFAULT"\n");
 8003636:	4815      	ldr	r0, [pc, #84]	; (800368c <cli_log+0x1b4>)
 8003638:	f007 fe1e 	bl	800b278 <puts>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3301      	adds	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b06      	cmp	r3, #6
 8003646:	d9e0      	bls.n	800360a <cli_log+0x132>
			}
		}
		return EXIT_SUCCESS;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <cli_log+0x176>
	}

	return EXIT_FAILURE;
 800364c:	2301      	movs	r3, #1
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	0800f2b0 	.word	0x0800f2b0
 800365c:	0800f2f4 	.word	0x0800f2f4
 8003660:	0800f2f8 	.word	0x0800f2f8
 8003664:	0800f324 	.word	0x0800f324
 8003668:	2000001c 	.word	0x2000001c
 800366c:	0800f328 	.word	0x0800f328
 8003670:	0800f33c 	.word	0x0800f33c
 8003674:	0800f340 	.word	0x0800f340
 8003678:	0800f358 	.word	0x0800f358
 800367c:	0800f36c 	.word	0x0800f36c
 8003680:	20000000 	.word	0x20000000
 8003684:	0800f374 	.word	0x0800f374
 8003688:	0800f37c 	.word	0x0800f37c
 800368c:	0800f394 	.word	0x0800f394

08003690 <cli_disable_log_entry>:

void cli_disable_log_entry(char *str){
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e01c      	b.n	80036d8 <cli_disable_log_entry+0x48>
		if(strcmp(str, cli_logs_names[i]) == 0){
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <cli_disable_log_entry+0x58>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fc fe09 	bl	80002c0 <strcmp>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10e      	bne.n	80036d2 <cli_disable_log_entry+0x42>
			printf("LOG disabled for category %s.\n", str);
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <cli_disable_log_entry+0x5c>)
 80036b8:	f007 fd42 	bl	800b140 <iprintf>
			cli_log_stat &= ~(1<<i);
 80036bc:	2201      	movs	r2, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <cli_disable_log_entry+0x60>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4013      	ands	r3, r2
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <cli_disable_log_entry+0x60>)
 80036d0:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d9df      	bls.n	800369e <cli_disable_log_entry+0xe>
		}
	}
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000000 	.word	0x20000000
 80036ec:	0800f3ac 	.word	0x0800f3ac
 80036f0:	2000001c 	.word	0x2000001c

080036f4 <cli_enable_log_entry>:

void cli_enable_log_entry(char *str){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e01b      	b.n	800373a <cli_enable_log_entry+0x46>
		if(strcmp(str, cli_logs_names[i]) == 0){
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <cli_enable_log_entry+0x58>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7fc fdd7 	bl	80002c0 <strcmp>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <cli_enable_log_entry+0x40>
			printf("LOG enabled for category %s.\n", str);
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	480d      	ldr	r0, [pc, #52]	; (8003750 <cli_enable_log_entry+0x5c>)
 800371c:	f007 fd10 	bl	800b140 <iprintf>
			cli_log_stat |= (1<<i);
 8003720:	2201      	movs	r2, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	461a      	mov	r2, r3
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <cli_enable_log_entry+0x60>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <cli_enable_log_entry+0x60>)
 8003732:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d9e0      	bls.n	8003702 <cli_enable_log_entry+0xe>
		}
	}
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000000 	.word	0x20000000
 8003750:	0800f3cc 	.word	0x0800f3cc
 8003754:	2000001c 	.word	0x2000001c

08003758 <shell_queue_init>:
 * @brief  shell_queue_init inits the contents of the queue to zeros
 * @param  queue
 * @retval True
 */
uint8_t shell_queue_init(shell_queue_s *queue)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]

    memset(queue->PBase, 0, SHELL_QUEUE_LENGTH);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3308      	adds	r3, #8
 8003772:	2220      	movs	r2, #32
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f006 fc26 	bl	8009fc8 <memset>

    return true;
 800377c:	2301      	movs	r3, #1
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <shell_queue_full>:
 * @brief  shell_queue_full checks if the queue is full
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_full(shell_queue_s *queue)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
    if((((queue->Rear) + 1) % SHELL_QUEUE_LENGTH) == queue->Front) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d101      	bne.n	80037a4 <shell_queue_full+0x1e>
        return true;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <shell_queue_full+0x20>
    } else {
        return false;
 80037a4:	2300      	movs	r3, #0
    }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <shell_queue_empty>:
 * @brief  shell_queue_empty checks if the queue is empty
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_empty(shell_queue_s *queue)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
    if(queue->Front == queue->Rear) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d101      	bne.n	80037ca <shell_queue_empty+0x18>
        return true;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <shell_queue_empty+0x1a>
    } else {
        return false;
 80037ca:	2300      	movs	r3, #0
    }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <shell_queue_in>:
 * @brief  shell_queue_in inserts a byte in the queue
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_in(shell_queue_s *queue, uint8_t *PData)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

    if(shell_queue_full(queue)) {
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffcf 	bl	8003786 <shell_queue_full>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <shell_queue_in+0x1a>
        return false;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e00f      	b.n	8003812 <shell_queue_in+0x3a>
    }

    queue->PBase[queue->Rear] = *PData;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	7811      	ldrb	r1, [r2, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	460a      	mov	r2, r1
 8003800:	721a      	strb	r2, [r3, #8]
    queue->Rear = ((queue->Rear) + 1) % SHELL_QUEUE_LENGTH;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	3301      	adds	r3, #1
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	605a      	str	r2, [r3, #4]

    return true;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <shell_queue_out>:
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */

uint8_t shell_queue_out(shell_queue_s *queue, uint8_t *PData)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
    if(shell_queue_empty(queue)) {
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffc4 	bl	80037b2 <shell_queue_empty>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <shell_queue_out+0x1a>
        return false;
 8003830:	2300      	movs	r3, #0
 8003832:	e00e      	b.n	8003852 <shell_queue_out+0x38>
    }

    *PData = queue->PBase[queue->Front];
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	7a1a      	ldrb	r2, [r3, #8]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	701a      	strb	r2, [r3, #0]
    queue->Front = ((queue->Front) + 1) % SHELL_QUEUE_LENGTH;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]

    return true;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
	return 1;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_kill>:

int _kill(int pid, int sig)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003874:	f006 f956 	bl	8009b24 <__errno>
 8003878:	4603      	mov	r3, r0
 800387a:	2216      	movs	r2, #22
 800387c:	601a      	str	r2, [r3, #0]
	return -1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_exit>:

void _exit (int status)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003892:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffe7 	bl	800386a <_kill>
	while (1) {}		/* Make sure we hang here */
 800389c:	e7fe      	b.n	800389c <_exit+0x12>

0800389e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e00a      	b.n	80038c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038b0:	f3af 8000 	nop.w
 80038b4:	4601      	mov	r1, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	60ba      	str	r2, [r7, #8]
 80038bc:	b2ca      	uxtb	r2, r1
 80038be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3301      	adds	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	dbf0      	blt.n	80038b0 <_read+0x12>
	}

return len;
 80038ce:	687b      	ldr	r3, [r7, #4]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	return -1;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003900:	605a      	str	r2, [r3, #4]
	return 0;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_isatty>:

int _isatty(int file)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
	return 0;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <_sbrk+0x5c>)
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <_sbrk+0x60>)
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <_sbrk+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <_sbrk+0x64>)
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <_sbrk+0x68>)
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <_sbrk+0x64>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	429a      	cmp	r2, r3
 800396e:	d207      	bcs.n	8003980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003970:	f006 f8d8 	bl	8009b24 <__errno>
 8003974:	4603      	mov	r3, r0
 8003976:	220c      	movs	r2, #12
 8003978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800397e:	e009      	b.n	8003994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <_sbrk+0x64>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <_sbrk+0x64>)
 8003990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20020000 	.word	0x20020000
 80039a0:	00000400 	.word	0x00000400
 80039a4:	200008d4 	.word	0x200008d4
 80039a8:	200008f0 	.word	0x200008f0

080039ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <SystemInit+0x20>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <SystemInit+0x20>)
 80039b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039d0:	480d      	ldr	r0, [pc, #52]	; (8003a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80039d6:	490e      	ldr	r1, [pc, #56]	; (8003a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <LoopForever+0xe>)
  movs r3, #0
 80039da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80039dc:	e002      	b.n	80039e4 <LoopCopyDataInit>

080039de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039e2:	3304      	adds	r3, #4

080039e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e8:	d3f9      	bcc.n	80039de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ea:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039ec:	4c0b      	ldr	r4, [pc, #44]	; (8003a1c <LoopForever+0x16>)
  movs r3, #0
 80039ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f0:	e001      	b.n	80039f6 <LoopFillZerobss>

080039f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f4:	3204      	adds	r2, #4

080039f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f8:	d3fb      	bcc.n	80039f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039fa:	f7ff ffd7 	bl	80039ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039fe:	f006 fa73 	bl	8009ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a02:	f7fe f8f5 	bl	8001bf0 <main>

08003a06 <LoopForever>:

LoopForever:
    b LoopForever
 8003a06:	e7fe      	b.n	8003a06 <LoopForever>
  ldr   r0, =_estack
 8003a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a10:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003a14:	0800fa8c 	.word	0x0800fa8c
  ldr r2, =_sbss
 8003a18:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003a1c:	200008f0 	.word	0x200008f0

08003a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a20:	e7fe      	b.n	8003a20 <ADC1_2_IRQHandler>

08003a22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f000 f995 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 f80e 	bl	8003a54 <HAL_InitTick>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	71fb      	strb	r3, [r7, #7]
 8003a42:	e001      	b.n	8003a48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a44:	f7fe fc98 	bl	8002378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a48:	79fb      	ldrb	r3, [r7, #7]

}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a60:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_InitTick+0x68>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_InitTick+0x6c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_InitTick+0x68>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9b2 	bl	8003de6 <HAL_SYSTICK_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d809      	bhi.n	8003aa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a96:	f000 f96c 	bl	8003d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_InitTick+0x70>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e007      	b.n	8003ab2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e004      	b.n	8003ab2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e001      	b.n	8003ab2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000028 	.word	0x20000028
 8003ac0:	20000020 	.word	0x20000020
 8003ac4:	20000024 	.word	0x20000024

08003ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_IncTick+0x1c>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_IncTick+0x20>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4a03      	ldr	r2, [pc, #12]	; (8003ae4 <HAL_IncTick+0x1c>)
 8003ad8:	6013      	str	r3, [r2, #0]
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	200008d8 	.word	0x200008d8
 8003ae8:	20000028 	.word	0x20000028

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_GetTick+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	200008d8 	.word	0x200008d8

08003b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff ffee 	bl	8003aec <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d004      	beq.n	8003b28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_Delay+0x40>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b28:	bf00      	nop
 8003b2a:	f7ff ffdf 	bl	8003aec <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d8f7      	bhi.n	8003b2a <HAL_Delay+0x26>
  {
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000028 	.word	0x20000028

08003b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	60d3      	str	r3, [r2, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0307 	and.w	r3, r3, #7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db0b      	blt.n	8003bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4907      	ldr	r1, [pc, #28]	; (8003be4 <__NVIC_EnableIRQ+0x38>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db12      	blt.n	8003c20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	490a      	ldr	r1, [pc, #40]	; (8003c2c <__NVIC_DisableIRQ+0x44>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	3320      	adds	r3, #32
 8003c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c14:	f3bf 8f4f 	dsb	sy
}
 8003c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c1a:	f3bf 8f6f 	isb	sy
}
 8003c1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db0a      	blt.n	8003c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <__NVIC_SetPriority+0x4c>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c58:	e00a      	b.n	8003c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <__NVIC_SetPriority+0x50>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3b04      	subs	r3, #4
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	761a      	strb	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e100 	.word	0xe000e100
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf28      	it	cs
 8003ca2:	2304      	movcs	r3, #4
 8003ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <NVIC_EncodePriority+0x30>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <NVIC_EncodePriority+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43d9      	mvns	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	4313      	orrs	r3, r2
         );
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003cf0:	f3bf 8f4f 	dsb	sy
}
 8003cf4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <__NVIC_SystemReset+0x24>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cfe:	4904      	ldr	r1, [pc, #16]	; (8003d10 <__NVIC_SystemReset+0x24>)
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_SystemReset+0x28>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d06:	f3bf 8f4f 	dsb	sy
}
 8003d0a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <__NVIC_SystemReset+0x20>
 8003d10:	e000ed00 	.word	0xe000ed00
 8003d14:	05fa0004 	.word	0x05fa0004

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d3c:	f7ff ff78 	bl	8003c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff feef 	bl	8003b48 <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff06 	bl	8003b90 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff7a 	bl	8003c84 <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff49 	bl	8003c30 <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fef9 	bl	8003bac <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff09 	bl	8003be8 <__NVIC_DisableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003de2:	f7ff ff83 	bl	8003cec <__NVIC_SystemReset>

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff92 	bl	8003d18 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d005      	beq.n	8003e22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e037      	b.n	8003e92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 020e 	bic.w	r2, r2, #14
 8003e30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f003 021f 	and.w	r2, r3, #31
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f202 	lsl.w	r2, r1, r2
 8003e64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e047      	b.n	8003f74 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 020e 	bic.w	r2, r2, #14
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
    }
  }
  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e147      	b.n	8004222 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe fa0a 	bl	80023c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0210 	bic.w	r2, r2, #16
 8003fba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fbc:	f7ff fd96 	bl	8003aec <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003fc2:	e012      	b.n	8003fea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003fc4:	f7ff fd92 	bl	8003aec <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b0a      	cmp	r3, #10
 8003fd0:	d90b      	bls.n	8003fea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e11b      	b.n	8004222 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d0e5      	beq.n	8003fc4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004008:	f7ff fd70 	bl	8003aec <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800400e:	e012      	b.n	8004036 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004010:	f7ff fd6c 	bl	8003aec <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b0a      	cmp	r3, #10
 800401c:	d90b      	bls.n	8004036 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0f5      	b.n	8004222 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0e5      	beq.n	8004010 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0202 	orr.w	r2, r2, #2
 8004052:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a74      	ldr	r2, [pc, #464]	; (800422c <HAL_FDCAN_Init+0x2ac>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d103      	bne.n	8004066 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800405e:	4a74      	ldr	r2, [pc, #464]	; (8004230 <HAL_FDCAN_Init+0x2b0>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7c1b      	ldrb	r3, [r3, #16]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d108      	bne.n	8004080 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407c:	619a      	str	r2, [r3, #24]
 800407e:	e007      	b.n	8004090 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7c5b      	ldrb	r3, [r3, #17]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d108      	bne.n	80040aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a6:	619a      	str	r2, [r3, #24]
 80040a8:	e007      	b.n	80040ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7c9b      	ldrb	r3, [r3, #18]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	e007      	b.n	80040e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004108:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0210 	bic.w	r2, r2, #16
 8004118:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d108      	bne.n	8004134 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0204 	orr.w	r2, r2, #4
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	e02c      	b.n	800418e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d028      	beq.n	800418e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d01c      	beq.n	800417e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004152:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0210 	orr.w	r2, r2, #16
 8004162:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d110      	bne.n	800418e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	e007      	b.n	800418e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	3b01      	subs	r3, #1
 8004194:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	3b01      	subs	r3, #1
 800419c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800419e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80041a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80041b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c2:	d115      	bne.n	80041f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	3b01      	subs	r3, #1
 80041d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	3b01      	subs	r3, #1
 80041da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80041ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f814 	bl	8004234 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40006400 	.word	0x40006400
 8004230:	40006500 	.word	0x40006500

08004234 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800423c:	4b30      	ldr	r3, [pc, #192]	; (8004300 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800423e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d103      	bne.n	8004252 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004250:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004262:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004272:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	041a      	lsls	r2, r3, #16
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004298:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	061a      	lsls	r2, r3, #24
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e005      	b.n	80042e6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3304      	adds	r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d3f3      	bcc.n	80042da <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	4000a400 	.word	0x4000a400
 8004304:	40006800 	.word	0x40006800
 8004308:	40006c00 	.word	0x40006c00

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800431a:	e15a      	b.n	80045d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 814c 	beq.w	80045cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b01      	cmp	r3, #1
 800433e:	d005      	beq.n	800434c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004348:	2b02      	cmp	r3, #2
 800434a:	d130      	bne.n	80043ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2203      	movs	r2, #3
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004382:	2201      	movs	r2, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 0201 	and.w	r2, r3, #1
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d017      	beq.n	80043ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d123      	bne.n	800443e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3208      	adds	r2, #8
 8004438:	6939      	ldr	r1, [r7, #16]
 800443a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0203 	and.w	r2, r3, #3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80a6 	beq.w	80045cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004480:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <HAL_GPIO_Init+0x2e4>)
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	4a5a      	ldr	r2, [pc, #360]	; (80045f0 <HAL_GPIO_Init+0x2e4>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6613      	str	r3, [r2, #96]	; 0x60
 800448c:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <HAL_GPIO_Init+0x2e4>)
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004498:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	3302      	adds	r3, #2
 80044a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	220f      	movs	r2, #15
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044c2:	d01f      	beq.n	8004504 <HAL_GPIO_Init+0x1f8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <HAL_GPIO_Init+0x2ec>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d019      	beq.n	8004500 <HAL_GPIO_Init+0x1f4>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a4b      	ldr	r2, [pc, #300]	; (80045fc <HAL_GPIO_Init+0x2f0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_GPIO_Init+0x1f0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a4a      	ldr	r2, [pc, #296]	; (8004600 <HAL_GPIO_Init+0x2f4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00d      	beq.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a49      	ldr	r2, [pc, #292]	; (8004604 <HAL_GPIO_Init+0x2f8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <HAL_GPIO_Init+0x1e8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a48      	ldr	r2, [pc, #288]	; (8004608 <HAL_GPIO_Init+0x2fc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_GPIO_Init+0x1e4>
 80044ec:	2305      	movs	r3, #5
 80044ee:	e00a      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044f0:	2306      	movs	r3, #6
 80044f2:	e008      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044f4:	2304      	movs	r3, #4
 80044f6:	e006      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044f8:	2303      	movs	r3, #3
 80044fa:	e004      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e002      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <HAL_GPIO_Init+0x1fa>
 8004504:	2300      	movs	r3, #0
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	f002 0203 	and.w	r2, r2, #3
 800450c:	0092      	lsls	r2, r2, #2
 800450e:	4093      	lsls	r3, r2
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004516:	4937      	ldr	r1, [pc, #220]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004524:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_GPIO_Init+0x300>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	43db      	mvns	r3, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004548:	4a30      	ldr	r2, [pc, #192]	; (800460c <HAL_GPIO_Init+0x300>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800454e:	4b2f      	ldr	r3, [pc, #188]	; (800460c <HAL_GPIO_Init+0x300>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004572:	4a26      	ldr	r2, [pc, #152]	; (800460c <HAL_GPIO_Init+0x300>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_GPIO_Init+0x300>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_GPIO_Init+0x300>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_GPIO_Init+0x300>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045c6:	4a11      	ldr	r2, [pc, #68]	; (800460c <HAL_GPIO_Init+0x300>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f ae9d 	bne.w	800431c <HAL_GPIO_Init+0x10>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40010000 	.word	0x40010000
 80045f8:	48000400 	.word	0x48000400
 80045fc:	48000800 	.word	0x48000800
 8004600:	48000c00 	.word	0x48000c00
 8004604:	48001000 	.word	0x48001000
 8004608:	48001400 	.word	0x48001400
 800460c:	40010400 	.word	0x40010400

08004610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
 800461c:	4613      	mov	r3, r2
 800461e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004620:	787b      	ldrb	r3, [r7, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800462c:	e002      	b.n	8004634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f806 	bl	8004670 <HAL_GPIO_EXTI_Callback>
  }
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40010400 	.word	0x40010400

08004670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e081      	b.n	800479c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fd fee3 	bl	8002478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fc:	609a      	str	r2, [r3, #8]
 80046fe:	e006      	b.n	800470e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800470c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d104      	bne.n	8004720 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800471e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004732:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004742:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69d9      	ldr	r1, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	461a      	mov	r2, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
 80047b4:	4613      	mov	r3, r2
 80047b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	f040 80da 	bne.w	800497a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2C_Master_Transmit+0x30>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e0d3      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047dc:	f7ff f986 	bl	8003aec <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2319      	movs	r3, #25
 80047e8:	2201      	movs	r2, #1
 80047ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f9e6 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0be      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2221      	movs	r2, #33	; 0x21
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2210      	movs	r2, #16
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	893a      	ldrh	r2, [r7, #8]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2bff      	cmp	r3, #255	; 0xff
 800482e:	d90e      	bls.n	800484e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	22ff      	movs	r2, #255	; 0xff
 8004834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	b2da      	uxtb	r2, r3
 800483c:	8979      	ldrh	r1, [r7, #10]
 800483e:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_I2C_Master_Transmit+0x1e0>)
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fbdc 	bl	8005004 <I2C_TransferConfig>
 800484c:	e06c      	b.n	8004928 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	b2da      	uxtb	r2, r3
 800485e:	8979      	ldrh	r1, [r7, #10]
 8004860:	4b48      	ldr	r3, [pc, #288]	; (8004984 <HAL_I2C_Master_Transmit+0x1e0>)
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fbcb 	bl	8005004 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800486e:	e05b      	b.n	8004928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	6a39      	ldr	r1, [r7, #32]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f9e3 	bl	8004c40 <I2C_WaitOnTXISFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e07b      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d034      	beq.n	8004928 <HAL_I2C_Master_Transmit+0x184>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d130      	bne.n	8004928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f975 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e04d      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2bff      	cmp	r3, #255	; 0xff
 80048e8:	d90e      	bls.n	8004908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fb7f 	bl	8005004 <I2C_TransferConfig>
 8004906:	e00f      	b.n	8004928 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	b2da      	uxtb	r2, r3
 8004918:	8979      	ldrh	r1, [r7, #10]
 800491a:	2300      	movs	r3, #0
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fb6e 	bl	8005004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d19e      	bne.n	8004870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	6a39      	ldr	r1, [r7, #32]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f9c2 	bl	8004cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01a      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2220      	movs	r2, #32
 800494c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_I2C_Master_Transmit+0x1e4>)
 800495a:	400b      	ands	r3, r1
 800495c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	80002000 	.word	0x80002000
 8004988:	fe00e800 	.word	0xfe00e800

0800498c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	460b      	mov	r3, r1
 800499a:	817b      	strh	r3, [r7, #10]
 800499c:	4613      	mov	r3, r2
 800499e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	f040 80db 	bne.w	8004b64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_I2C_Master_Receive+0x30>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e0d4      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049c4:	f7ff f892 	bl	8003aec <HAL_GetTick>
 80049c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2319      	movs	r3, #25
 80049d0:	2201      	movs	r2, #1
 80049d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f8f2 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0bf      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2222      	movs	r2, #34	; 0x22
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2210      	movs	r2, #16
 80049f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	893a      	ldrh	r2, [r7, #8]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2bff      	cmp	r3, #255	; 0xff
 8004a16:	d90e      	bls.n	8004a36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	8979      	ldrh	r1, [r7, #10]
 8004a26:	4b52      	ldr	r3, [pc, #328]	; (8004b70 <HAL_I2C_Master_Receive+0x1e4>)
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fae8 	bl	8005004 <I2C_TransferConfig>
 8004a34:	e06d      	b.n	8004b12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	4b49      	ldr	r3, [pc, #292]	; (8004b70 <HAL_I2C_Master_Receive+0x1e4>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fad7 	bl	8005004 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004a56:	e05c      	b.n	8004b12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	6a39      	ldr	r1, [r7, #32]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f96b 	bl	8004d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e07c      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d034      	beq.n	8004b12 <HAL_I2C_Master_Receive+0x186>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d130      	bne.n	8004b12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f880 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e04d      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2bff      	cmp	r3, #255	; 0xff
 8004ad2:	d90e      	bls.n	8004af2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	22ff      	movs	r2, #255	; 0xff
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa8a 	bl	8005004 <I2C_TransferConfig>
 8004af0:	e00f      	b.n	8004b12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fa79 	bl	8005004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d19d      	bne.n	8004a58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	6a39      	ldr	r1, [r7, #32]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f8cd 	bl	8004cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01a      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2220      	movs	r2, #32
 8004b36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_I2C_Master_Receive+0x1e8>)
 8004b44:	400b      	ands	r3, r1
 8004b46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	80002400 	.word	0x80002400
 8004b74:	fe00e800 	.word	0xfe00e800

08004b78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d103      	bne.n	8004b96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d007      	beq.n	8004bb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	619a      	str	r2, [r3, #24]
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd0:	e022      	b.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd8:	d01e      	beq.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fe ff87 	bl	8003aec <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d113      	bne.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e00f      	b.n	8004c38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d0cd      	beq.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c4c:	e02c      	b.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8ea 	bl	8004e2c <I2C_IsErrorOccurred>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02a      	b.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c68:	d01e      	beq.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe ff3f 	bl	8003aec <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d113      	bne.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e007      	b.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d1cb      	bne.n	8004c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ccc:	e028      	b.n	8004d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8aa 	bl	8004e2c <I2C_IsErrorOccurred>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e026      	b.n	8004d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fe ff03 	bl	8003aec <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e007      	b.n	8004d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d1cf      	bne.n	8004cce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d44:	e064      	b.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f86e 	bl	8004e2c <I2C_IsErrorOccurred>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e062      	b.n	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d138      	bne.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d105      	bne.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e04e      	b.n	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d107      	bne.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d9e:	e002      	b.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2220      	movs	r2, #32
 8004dac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e022      	b.n	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fe fe87 	bl	8003aec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e007      	b.n	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d193      	bne.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	fe00e800 	.word	0xfe00e800

08004e2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d075      	beq.n	8004f44 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e60:	e056      	b.n	8004f10 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e68:	d052      	beq.n	8004f10 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fe fe3f 	bl	8003aec <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_IsErrorOccurred+0x54>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d147      	bne.n	8004f10 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea2:	d12e      	bne.n	8004f02 <I2C_IsErrorOccurred+0xd6>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	d02a      	beq.n	8004f02 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d027      	beq.n	8004f02 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec2:	f7fe fe13 	bl	8003aec <HAL_GetTick>
 8004ec6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec8:	e01b      	b.n	8004f02 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004eca:	f7fe fe0f 	bl	8003aec <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b19      	cmp	r3, #25
 8004ed6:	d914      	bls.n	8004f02 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d1dc      	bne.n	8004eca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d003      	beq.n	8004f26 <I2C_IsErrorOccurred+0xfa>
 8004f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d09d      	beq.n	8004e62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2220      	movs	r2, #32
 8004f34:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004faa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01c      	beq.n	8004ff4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fddc 	bl	8004b78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <I2C_IsErrorOccurred+0x1d4>)
 8004fcc:	400b      	ands	r3, r1
 8004fce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	817b      	strh	r3, [r7, #10]
 8005012:	4613      	mov	r3, r2
 8005014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800501c:	7a7b      	ldrb	r3, [r7, #9]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005024:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	4313      	orrs	r3, r2
 800502e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005032:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	0d5b      	lsrs	r3, r3, #21
 800503e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <I2C_TransferConfig+0x60>)
 8005044:	430b      	orrs	r3, r1
 8005046:	43db      	mvns	r3, r3
 8005048:	ea02 0103 	and.w	r1, r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	03ff63ff 	.word	0x03ff63ff

08005068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	d138      	bne.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005088:	2302      	movs	r3, #2
 800508a:	e032      	b.n	80050f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	d139      	bne.n	8005188 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800511e:	2302      	movs	r3, #2
 8005120:	e033      	b.n	800518a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2224      	movs	r2, #36	; 0x24
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005150:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d141      	bne.n	800522a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d131      	bne.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ba:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051cc:	4a41      	ldr	r2, [pc, #260]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2232      	movs	r2, #50	; 0x32
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	4a3f      	ldr	r2, [pc, #252]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	0c9b      	lsrs	r3, r3, #18
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ea:	e002      	b.n	80051f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d102      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f2      	bne.n	80051ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005206:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d158      	bne.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e057      	b.n	80052c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005218:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005228:	e04d      	b.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005230:	d141      	bne.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d131      	bne.n	80052a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005240:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005246:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005258:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800525e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2232      	movs	r2, #50	; 0x32
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0c9b      	lsrs	r3, r3, #18
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005276:	e002      	b.n	800527e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528a:	d102      	bne.n	8005292 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f2      	bne.n	8005278 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529e:	d112      	bne.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e011      	b.n	80052c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052b4:	e007      	b.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052be:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40007000 	.word	0x40007000
 80052d8:	20000020 	.word	0x20000020
 80052dc:	431bde83 	.word	0x431bde83

080052e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a04      	ldr	r2, [pc, #16]	; (80052fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ee:	6093      	str	r3, [r2, #8]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40007000 	.word	0x40007000

08005300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e306      	b.n	8005920 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d075      	beq.n	800540a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531e:	4b97      	ldr	r3, [pc, #604]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005328:	4b94      	ldr	r3, [pc, #592]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d102      	bne.n	800533e <HAL_RCC_OscConfig+0x3e>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d002      	beq.n	8005344 <HAL_RCC_OscConfig+0x44>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005344:	4b8d      	ldr	r3, [pc, #564]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05b      	beq.n	8005408 <HAL_RCC_OscConfig+0x108>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d157      	bne.n	8005408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e2e1      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005364:	d106      	bne.n	8005374 <HAL_RCC_OscConfig+0x74>
 8005366:	4b85      	ldr	r3, [pc, #532]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a84      	ldr	r2, [pc, #528]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e01d      	b.n	80053b0 <HAL_RCC_OscConfig+0xb0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x98>
 800537e:	4b7f      	ldr	r3, [pc, #508]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7e      	ldr	r2, [pc, #504]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b7c      	ldr	r3, [pc, #496]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7b      	ldr	r2, [pc, #492]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0xb0>
 8005398:	4b78      	ldr	r3, [pc, #480]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a77      	ldr	r2, [pc, #476]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800539e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b75      	ldr	r3, [pc, #468]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a74      	ldr	r2, [pc, #464]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80053aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fe fb98 	bl	8003aec <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fe fb94 	bl	8003aec <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e2a6      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d2:	4b6a      	ldr	r3, [pc, #424]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0xc0>
 80053de:	e014      	b.n	800540a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fe fb84 	bl	8003aec <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fe fb80 	bl	8003aec <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e292      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fa:	4b60      	ldr	r3, [pc, #384]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0xe8>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d075      	beq.n	8005502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005416:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005420:	4b56      	ldr	r3, [pc, #344]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d102      	bne.n	8005436 <HAL_RCC_OscConfig+0x136>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d002      	beq.n	800543c <HAL_RCC_OscConfig+0x13c>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d11f      	bne.n	800547c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543c:	4b4f      	ldr	r3, [pc, #316]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_OscConfig+0x154>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e265      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b49      	ldr	r3, [pc, #292]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	4946      	ldr	r1, [pc, #280]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005468:	4b45      	ldr	r3, [pc, #276]	; (8005580 <HAL_RCC_OscConfig+0x280>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe faf1 	bl	8003a54 <HAL_InitTick>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d043      	beq.n	8005500 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e251      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d023      	beq.n	80054cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005484:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800548a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fe fb2c 	bl	8003aec <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fe fb28 	bl	8003aec <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e23a      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054aa:	4b34      	ldr	r3, [pc, #208]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b31      	ldr	r3, [pc, #196]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	492d      	ldr	r1, [pc, #180]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
 80054ca:	e01a      	b.n	8005502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2a      	ldr	r2, [pc, #168]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fe fb08 	bl	8003aec <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fe fb04 	bl	8003aec <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e216      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054f2:	4b22      	ldr	r3, [pc, #136]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1e0>
 80054fe:	e000      	b.n	8005502 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005500:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d041      	beq.n	8005592 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01c      	beq.n	8005550 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fe fae1 	bl	8003aec <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fe fadd 	bl	8003aec <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1ef      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ef      	beq.n	800552e <HAL_RCC_OscConfig+0x22e>
 800554e:	e020      	b.n	8005592 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_RCC_OscConfig+0x27c>)
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005560:	f7fe fac4 	bl	8003aec <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005566:	e00d      	b.n	8005584 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005568:	f7fe fac0 	bl	8003aec <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d906      	bls.n	8005584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e1d2      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005584:	4b8c      	ldr	r3, [pc, #560]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ea      	bne.n	8005568 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80a6 	beq.w	80056ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a4:	4b84      	ldr	r3, [pc, #528]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2b4>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x2b6>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	4b7f      	ldr	r3, [pc, #508]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	4a7e      	ldr	r2, [pc, #504]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c4:	6593      	str	r3, [r2, #88]	; 0x58
 80055c6:	4b7c      	ldr	r3, [pc, #496]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055d2:	2301      	movs	r3, #1
 80055d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d6:	4b79      	ldr	r3, [pc, #484]	; (80057bc <HAL_RCC_OscConfig+0x4bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d118      	bne.n	8005614 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e2:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x4bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a75      	ldr	r2, [pc, #468]	; (80057bc <HAL_RCC_OscConfig+0x4bc>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ee:	f7fe fa7d 	bl	8003aec <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fe fa79 	bl	8003aec <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e18b      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005608:	4b6c      	ldr	r3, [pc, #432]	; (80057bc <HAL_RCC_OscConfig+0x4bc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d108      	bne.n	800562e <HAL_RCC_OscConfig+0x32e>
 800561c:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a65      	ldr	r2, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800562c:	e024      	b.n	8005678 <HAL_RCC_OscConfig+0x378>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b05      	cmp	r3, #5
 8005634:	d110      	bne.n	8005658 <HAL_RCC_OscConfig+0x358>
 8005636:	4b60      	ldr	r3, [pc, #384]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	4a5e      	ldr	r2, [pc, #376]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005646:	4b5c      	ldr	r3, [pc, #368]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	4a5a      	ldr	r2, [pc, #360]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005656:	e00f      	b.n	8005678 <HAL_RCC_OscConfig+0x378>
 8005658:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a56      	ldr	r2, [pc, #344]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005668:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	4a52      	ldr	r2, [pc, #328]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fe fa34 	bl	8003aec <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fe fa30 	bl	8003aec <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e140      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569e:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ed      	beq.n	8005688 <HAL_RCC_OscConfig+0x388>
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fe fa1d 	bl	8003aec <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056b4:	e00a      	b.n	80056cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fe fa19 	bl	8003aec <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e129      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056cc:	4b3a      	ldr	r3, [pc, #232]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ed      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056da:	7ffb      	ldrb	r3, [r7, #31]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d105      	bne.n	80056ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03c      	beq.n	8005772 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005706:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fe f9ec 	bl	8003aec <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005718:	f7fe f9e8 	bl	8003aec <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0fa      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800572c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ef      	beq.n	8005718 <HAL_RCC_OscConfig+0x418>
 8005738:	e01b      	b.n	8005772 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800573a:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800573c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005740:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fe f9cf 	bl	8003aec <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005752:	f7fe f9cb 	bl	8003aec <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0dd      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ef      	bne.n	8005752 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80d1 	beq.w	800591e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800577c:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b0c      	cmp	r3, #12
 8005786:	f000 808b 	beq.w	80058a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d15e      	bne.n	8005850 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <HAL_RCC_OscConfig+0x4b8>)
 8005798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fe f9a5 	bl	8003aec <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a4:	e00c      	b.n	80057c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fe f9a1 	bl	8003aec <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d905      	bls.n	80057c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0b3      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c0:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ec      	bne.n	80057a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057cc:	4b56      	ldr	r3, [pc, #344]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	4b56      	ldr	r3, [pc, #344]	; (800592c <HAL_RCC_OscConfig+0x62c>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6a11      	ldr	r1, [r2, #32]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057dc:	3a01      	subs	r2, #1
 80057de:	0112      	lsls	r2, r2, #4
 80057e0:	4311      	orrs	r1, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80057e6:	0212      	lsls	r2, r2, #8
 80057e8:	4311      	orrs	r1, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057ee:	0852      	lsrs	r2, r2, #1
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0552      	lsls	r2, r2, #21
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057fa:	0852      	lsrs	r2, r2, #1
 80057fc:	3a01      	subs	r2, #1
 80057fe:	0652      	lsls	r2, r2, #25
 8005800:	4311      	orrs	r1, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005806:	06d2      	lsls	r2, r2, #27
 8005808:	430a      	orrs	r2, r1
 800580a:	4947      	ldr	r1, [pc, #284]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 800580c:	4313      	orrs	r3, r2
 800580e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a44      	ldr	r2, [pc, #272]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800581a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800581c:	4b42      	ldr	r3, [pc, #264]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a41      	ldr	r2, [pc, #260]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005826:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005828:	f7fe f960 	bl	8003aec <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005830:	f7fe f95c 	bl	8003aec <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e06e      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x530>
 800584e:	e066      	b.n	800591e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a31      	ldr	r2, [pc, #196]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005868:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 800586e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fe f938 	bl	8003aec <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7fe f934 	bl	8003aec <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e046      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x580>
 800589e:	e03e      	b.n	800591e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e039      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058ac:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <HAL_RCC_OscConfig+0x628>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0203 	and.w	r2, r3, #3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d12c      	bne.n	800591a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	3b01      	subs	r3, #1
 80058cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d123      	bne.n	800591a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d11b      	bne.n	800591a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d113      	bne.n	800591a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	3b01      	subs	r3, #1
 8005900:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d109      	bne.n	800591a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	3b01      	subs	r3, #1
 8005914:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d001      	beq.n	800591e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	019f800c 	.word	0x019f800c

08005930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e11e      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005948:	4b91      	ldr	r3, [pc, #580]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d910      	bls.n	8005978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b8e      	ldr	r3, [pc, #568]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f023 020f 	bic.w	r2, r3, #15
 800595e:	498c      	ldr	r1, [pc, #560]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b8a      	ldr	r3, [pc, #552]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e106      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d073      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d129      	bne.n	80059e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598c:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0f4      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800599c:	f000 f99e 	bl	8005cdc <RCC_GetSysClockFreqFromPLLSource>
 80059a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4a7c      	ldr	r2, [pc, #496]	; (8005b98 <HAL_RCC_ClockConfig+0x268>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d93f      	bls.n	8005a2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059aa:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d033      	beq.n	8005a2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d12f      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ca:	4b72      	ldr	r3, [pc, #456]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d2:	4a70      	ldr	r2, [pc, #448]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 80059d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059da:	2380      	movs	r3, #128	; 0x80
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e024      	b.n	8005a2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d107      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e8:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0c6      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f8:	4b66      	ldr	r3, [pc, #408]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0be      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a08:	f000 f8ce 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4a61      	ldr	r2, [pc, #388]	; (8005b98 <HAL_RCC_ClockConfig+0x268>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d909      	bls.n	8005a2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a16:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a1e:	4a5d      	ldr	r2, [pc, #372]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b5a      	ldr	r3, [pc, #360]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4957      	ldr	r1, [pc, #348]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fe f856 	bl	8003aec <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fe f852 	bl	8003aec <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e095      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b4e      	ldr	r3, [pc, #312]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d023      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a84:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a42      	ldr	r2, [pc, #264]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a9c:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005aa4:	4a3b      	ldr	r2, [pc, #236]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aac:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4936      	ldr	r1, [pc, #216]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ac6:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad2:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d21d      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 020f 	bic.w	r2, r3, #15
 8005ae8:	4929      	ldr	r1, [pc, #164]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005af0:	f7fd fffc 	bl	8003aec <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	e00a      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af8:	f7fd fff8 	bl	8003aec <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e03b      	b.n	8005b86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d1ed      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4917      	ldr	r1, [pc, #92]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	490f      	ldr	r1, [pc, #60]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b5a:	f000 f825 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <HAL_RCC_ClockConfig+0x264>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	490c      	ldr	r1, [pc, #48]	; (8005b9c <HAL_RCC_ClockConfig+0x26c>)
 8005b6c:	5ccb      	ldrb	r3, [r1, r3]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd ff68 	bl	8003a54 <HAL_InitTick>
 8005b84:	4603      	mov	r3, r0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40022000 	.word	0x40022000
 8005b94:	40021000 	.word	0x40021000
 8005b98:	04c4b400 	.word	0x04c4b400
 8005b9c:	0800f4f8 	.word	0x0800f4f8
 8005ba0:	20000020 	.word	0x20000020
 8005ba4:	20000024 	.word	0x20000024

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bae:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bba:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	e047      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bc0:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d102      	bne.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e03e      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bd2:	4b23      	ldr	r3, [pc, #140]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 030c 	and.w	r3, r3, #12
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d136      	bne.n	8005c4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d10c      	bne.n	8005c16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bfc:	4a1a      	ldr	r2, [pc, #104]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c06:	68d2      	ldr	r2, [r2, #12]
 8005c08:	0a12      	lsrs	r2, r2, #8
 8005c0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	617b      	str	r3, [r7, #20]
      break;
 8005c14:	e00c      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c16:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	4a10      	ldr	r2, [pc, #64]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c20:	68d2      	ldr	r2, [r2, #12]
 8005c22:	0a12      	lsrs	r2, r2, #8
 8005c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
      break;
 8005c2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	0e5b      	lsrs	r3, r3, #25
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e001      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c50:	693b      	ldr	r3, [r7, #16]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	016e3600 	.word	0x016e3600

08005c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000020 	.word	0x20000020

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4904      	ldr	r1, [pc, #16]	; (8005cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	0800f508 	.word	0x0800f508

08005cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cb4:	f7ff ffda 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0adb      	lsrs	r3, r3, #11
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4904      	ldr	r1, [pc, #16]	; (8005cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	0800f508 	.word	0x0800f508

08005cdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cec:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d10c      	bne.n	8005d1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d00:	4a17      	ldr	r2, [pc, #92]	; (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d0a:	68d2      	ldr	r2, [r2, #12]
 8005d0c:	0a12      	lsrs	r2, r2, #8
 8005d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	617b      	str	r3, [r7, #20]
    break;
 8005d18:	e00c      	b.n	8005d34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d1a:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	4a0e      	ldr	r2, [pc, #56]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d24:	68d2      	ldr	r2, [r2, #12]
 8005d26:	0a12      	lsrs	r2, r2, #8
 8005d28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
    break;
 8005d32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0e5b      	lsrs	r3, r3, #25
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d4e:	687b      	ldr	r3, [r7, #4]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	016e3600 	.word	0x016e3600
 8005d64:	00f42400 	.word	0x00f42400

08005d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d70:	2300      	movs	r3, #0
 8005d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d74:	2300      	movs	r3, #0
 8005d76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8098 	beq.w	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d86:	2300      	movs	r3, #0
 8005d88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8a:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6593      	str	r3, [r2, #88]	; 0x58
 8005da2:	4b3d      	ldr	r3, [pc, #244]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dae:	2301      	movs	r3, #1
 8005db0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db2:	4b3a      	ldr	r3, [pc, #232]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a39      	ldr	r2, [pc, #228]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dbe:	f7fd fe95 	bl	8003aec <HAL_GetTick>
 8005dc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc4:	e009      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fd fe91 	bl	8003aec <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d902      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	74fb      	strb	r3, [r7, #19]
        break;
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dda:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0ef      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d159      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dec:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01e      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d019      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e08:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e14:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	4a1f      	ldr	r2, [pc, #124]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e34:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d016      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fd fe51 	bl	8003aec <HAL_GetTick>
 8005e4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4c:	e00b      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f7fd fe4d 	bl	8003aec <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d902      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	74fb      	strb	r3, [r7, #19]
            break;
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ec      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	4903      	ldr	r1, [pc, #12]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e90:	e008      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e92:	7cfb      	ldrb	r3, [r7, #19]
 8005e94:	74bb      	strb	r3, [r7, #18]
 8005e96:	e005      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea4:	7c7b      	ldrb	r3, [r7, #17]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eaa:	4ba7      	ldr	r3, [pc, #668]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	4aa6      	ldr	r2, [pc, #664]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec2:	4ba1      	ldr	r3, [pc, #644]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f023 0203 	bic.w	r2, r3, #3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	499d      	ldr	r1, [pc, #628]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee4:	4b98      	ldr	r3, [pc, #608]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f023 020c 	bic.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4995      	ldr	r1, [pc, #596]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f06:	4b90      	ldr	r3, [pc, #576]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	498c      	ldr	r1, [pc, #560]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f28:	4b87      	ldr	r3, [pc, #540]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	4984      	ldr	r1, [pc, #528]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4a:	4b7f      	ldr	r3, [pc, #508]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	497b      	ldr	r1, [pc, #492]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6c:	4b76      	ldr	r3, [pc, #472]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	4973      	ldr	r1, [pc, #460]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f8e:	4b6e      	ldr	r3, [pc, #440]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	496a      	ldr	r1, [pc, #424]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fb0:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	4962      	ldr	r1, [pc, #392]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	4959      	ldr	r1, [pc, #356]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ff4:	4b54      	ldr	r3, [pc, #336]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ffa:	f023 0203 	bic.w	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	4951      	ldr	r1, [pc, #324]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006016:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	4948      	ldr	r1, [pc, #288]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006034:	2b00      	cmp	r3, #0
 8006036:	d015      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006038:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4940      	ldr	r1, [pc, #256]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006058:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606c:	2b00      	cmp	r3, #0
 800606e:	d015      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006070:	4b35      	ldr	r3, [pc, #212]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4932      	ldr	r1, [pc, #200]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006090:	4b2d      	ldr	r3, [pc, #180]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4a2c      	ldr	r2, [pc, #176]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800609a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d015      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060a8:	4b27      	ldr	r3, [pc, #156]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	4924      	ldr	r1, [pc, #144]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060c6:	d105      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c8:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d015      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	4916      	ldr	r1, [pc, #88]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060fe:	d105      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4a10      	ldr	r2, [pc, #64]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800610a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d019      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	4908      	ldr	r1, [pc, #32]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006136:	d109      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a02      	ldr	r2, [pc, #8]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006142:	60d3      	str	r3, [r2, #12]
 8006144:	e002      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006158:	4b29      	ldr	r3, [pc, #164]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	4926      	ldr	r1, [pc, #152]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006176:	d105      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006178:	4b21      	ldr	r3, [pc, #132]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800617e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006182:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	4918      	ldr	r1, [pc, #96]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ae:	d105      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4a12      	ldr	r2, [pc, #72]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d015      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	490a      	ldr	r1, [pc, #40]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e6:	d105      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000

08006204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e049      	b.n	80062aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc f97e 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f000 fbd2 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e049      	b.n	8006358 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f841 	bl	8006360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fb7b 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PWM_Start+0x24>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e03c      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d109      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x3e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e02f      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start+0x58>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e022      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d109      	bne.n	80063e6 <HAL_TIM_PWM_Start+0x72>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e015      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_PWM_Start+0x8c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e008      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0a6      	b.n	8006568 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xb6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006428:	e023      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xc6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	e01b      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006448:	e013      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b0c      	cmp	r3, #12
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0xe6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006458:	e00b      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0xf6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006468:	e003      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 ff24 	bl	80072c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <HAL_TIM_PWM_Start+0x1fc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a39      	ldr	r2, [pc, #228]	; (8006574 <HAL_TIM_PWM_Start+0x200>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a37      	ldr	r2, [pc, #220]	; (8006578 <HAL_TIM_PWM_Start+0x204>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a36      	ldr	r2, [pc, #216]	; (800657c <HAL_TIM_PWM_Start+0x208>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a34      	ldr	r2, [pc, #208]	; (8006580 <HAL_TIM_PWM_Start+0x20c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a33      	ldr	r2, [pc, #204]	; (8006584 <HAL_TIM_PWM_Start+0x210>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_TIM_PWM_Start+0x14c>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_TIM_PWM_Start+0x14e>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_TIM_PWM_Start+0x1fc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d01d      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_TIM_PWM_Start+0x214>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a24      	ldr	r2, [pc, #144]	; (800658c <HAL_TIM_PWM_Start+0x218>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a23      	ldr	r2, [pc, #140]	; (8006590 <HAL_TIM_PWM_Start+0x21c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a19      	ldr	r2, [pc, #100]	; (8006574 <HAL_TIM_PWM_Start+0x200>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <HAL_TIM_PWM_Start+0x204>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIM_PWM_Start+0x1b2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_TIM_PWM_Start+0x210>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d115      	bne.n	8006552 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	4b19      	ldr	r3, [pc, #100]	; (8006594 <HAL_TIM_PWM_Start+0x220>)
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b06      	cmp	r3, #6
 8006536:	d015      	beq.n	8006564 <HAL_TIM_PWM_Start+0x1f0>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653e:	d011      	beq.n	8006564 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	e008      	b.n	8006564 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e000      	b.n	8006566 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40013400 	.word	0x40013400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800
 8006584:	40015000 	.word	0x40015000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	00010007 	.word	0x00010007

08006598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0ff      	b.n	80067b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b14      	cmp	r3, #20
 80065c2:	f200 80f0 	bhi.w	80067a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006621 	.word	0x08006621
 80065d0:	080067a7 	.word	0x080067a7
 80065d4:	080067a7 	.word	0x080067a7
 80065d8:	080067a7 	.word	0x080067a7
 80065dc:	08006661 	.word	0x08006661
 80065e0:	080067a7 	.word	0x080067a7
 80065e4:	080067a7 	.word	0x080067a7
 80065e8:	080067a7 	.word	0x080067a7
 80065ec:	080066a3 	.word	0x080066a3
 80065f0:	080067a7 	.word	0x080067a7
 80065f4:	080067a7 	.word	0x080067a7
 80065f8:	080067a7 	.word	0x080067a7
 80065fc:	080066e3 	.word	0x080066e3
 8006600:	080067a7 	.word	0x080067a7
 8006604:	080067a7 	.word	0x080067a7
 8006608:	080067a7 	.word	0x080067a7
 800660c:	08006725 	.word	0x08006725
 8006610:	080067a7 	.word	0x080067a7
 8006614:	080067a7 	.word	0x080067a7
 8006618:	080067a7 	.word	0x080067a7
 800661c:	08006765 	.word	0x08006765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa88 	bl	8006b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	619a      	str	r2, [r3, #24]
      break;
 800665e:	e0a5      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fb02 	bl	8006c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	021a      	lsls	r2, r3, #8
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	619a      	str	r2, [r3, #24]
      break;
 80066a0:	e084      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fb75 	bl	8006d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0208 	orr.w	r2, r2, #8
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0204 	bic.w	r2, r2, #4
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	61da      	str	r2, [r3, #28]
      break;
 80066e0:	e064      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fbe7 	bl	8006ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	021a      	lsls	r2, r3, #8
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	61da      	str	r2, [r3, #28]
      break;
 8006722:	e043      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fc5a 	bl	8006fe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006762:	e023      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fca4 	bl	80070b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80067a4:	e002      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]
      break;
 80067aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_ConfigClockSource+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e0f6      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x20a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80067fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6f      	ldr	r2, [pc, #444]	; (80069d4 <HAL_TIM_ConfigClockSource+0x214>)
 8006816:	4293      	cmp	r3, r2
 8006818:	f000 80c1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800681c:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_TIM_ConfigClockSource+0x214>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f200 80c6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006824:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <HAL_TIM_ConfigClockSource+0x218>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f000 80b9 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800682c:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <HAL_TIM_ConfigClockSource+0x218>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f200 80be 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006834:	4a69      	ldr	r2, [pc, #420]	; (80069dc <HAL_TIM_ConfigClockSource+0x21c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f000 80b1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800683c:	4a67      	ldr	r2, [pc, #412]	; (80069dc <HAL_TIM_ConfigClockSource+0x21c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f200 80b6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006844:	4a66      	ldr	r2, [pc, #408]	; (80069e0 <HAL_TIM_ConfigClockSource+0x220>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 80a9 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800684c:	4a64      	ldr	r2, [pc, #400]	; (80069e0 <HAL_TIM_ConfigClockSource+0x220>)
 800684e:	4293      	cmp	r3, r2
 8006850:	f200 80ae 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006854:	4a63      	ldr	r2, [pc, #396]	; (80069e4 <HAL_TIM_ConfigClockSource+0x224>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f000 80a1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800685c:	4a61      	ldr	r2, [pc, #388]	; (80069e4 <HAL_TIM_ConfigClockSource+0x224>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f200 80a6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006864:	4a60      	ldr	r2, [pc, #384]	; (80069e8 <HAL_TIM_ConfigClockSource+0x228>)
 8006866:	4293      	cmp	r3, r2
 8006868:	f000 8099 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800686c:	4a5e      	ldr	r2, [pc, #376]	; (80069e8 <HAL_TIM_ConfigClockSource+0x228>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f200 809e 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006878:	f000 8091 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800687c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006880:	f200 8096 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006888:	f000 8089 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1de>
 800688c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006890:	f200 808e 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d03e      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x158>
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	f200 8087 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	f000 8086 	beq.w	80069b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d87f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068b0:	2b70      	cmp	r3, #112	; 0x70
 80068b2:	d01a      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x12a>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d87b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068b8:	2b60      	cmp	r3, #96	; 0x60
 80068ba:	d050      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x19e>
 80068bc:	2b60      	cmp	r3, #96	; 0x60
 80068be:	d877      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c0:	2b50      	cmp	r3, #80	; 0x50
 80068c2:	d03c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x17e>
 80068c4:	2b50      	cmp	r3, #80	; 0x50
 80068c6:	d873      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d058      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1be>
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d86f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d064      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1de>
 80068d4:	2b30      	cmp	r3, #48	; 0x30
 80068d6:	d86b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d060      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1de>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d867      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1de>
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d05a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1de>
 80068e8:	e062      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f000 fcc5 	bl	8007288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	609a      	str	r2, [r3, #8]
      break;
 8006916:	e04f      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6899      	ldr	r1, [r3, #8]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f000 fcae 	bl	8007288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693a:	609a      	str	r2, [r3, #8]
      break;
 800693c:	e03c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	461a      	mov	r2, r3
 800694c:	f000 fc20 	bl	8007190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2150      	movs	r1, #80	; 0x50
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fc79 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 800695c:	e02c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	461a      	mov	r2, r3
 800696c:	f000 fc3f 	bl	80071ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2160      	movs	r1, #96	; 0x60
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fc69 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 800697c:	e01c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	461a      	mov	r2, r3
 800698c:	f000 fc00 	bl	8007190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fc59 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 800699c:	e00c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 fc50 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 80069ae:	e003      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80069b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	00100070 	.word	0x00100070
 80069d8:	00100060 	.word	0x00100060
 80069dc:	00100050 	.word	0x00100050
 80069e0:	00100040 	.word	0x00100040
 80069e4:	00100030 	.word	0x00100030
 80069e8:	00100020 	.word	0x00100020

080069ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a46      	ldr	r2, [pc, #280]	; (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d017      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d013      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a43      	ldr	r2, [pc, #268]	; (8006b1c <TIM_Base_SetConfig+0x130>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a42      	ldr	r2, [pc, #264]	; (8006b20 <TIM_Base_SetConfig+0x134>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a41      	ldr	r2, [pc, #260]	; (8006b24 <TIM_Base_SetConfig+0x138>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a40      	ldr	r2, [pc, #256]	; (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <TIM_Base_SetConfig+0x140>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d023      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d01f      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <TIM_Base_SetConfig+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01b      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <TIM_Base_SetConfig+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d017      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2e      	ldr	r2, [pc, #184]	; (8006b24 <TIM_Base_SetConfig+0x138>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00f      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2d      	ldr	r2, [pc, #180]	; (8006b30 <TIM_Base_SetConfig+0x144>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00b      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <TIM_Base_SetConfig+0x148>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <TIM_Base_SetConfig+0x14c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_Base_SetConfig+0xaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <TIM_Base_SetConfig+0x140>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d108      	bne.n	8006aa8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x110>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <TIM_Base_SetConfig+0x13c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x110>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <TIM_Base_SetConfig+0x144>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x110>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <TIM_Base_SetConfig+0x148>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x110>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <TIM_Base_SetConfig+0x14c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x110>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <TIM_Base_SetConfig+0x140>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d103      	bne.n	8006b04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	615a      	str	r2, [r3, #20]
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40000400 	.word	0x40000400
 8006b20:	40000800 	.word	0x40000800
 8006b24:	40000c00 	.word	0x40000c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40015000 	.word	0x40015000
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800

08006b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 0302 	bic.w	r3, r3, #2
 8006b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <TIM_OC1_SetConfig+0x11c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x88>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a2f      	ldr	r2, [pc, #188]	; (8006c5c <TIM_OC1_SetConfig+0x120>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x88>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <TIM_OC1_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x88>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <TIM_OC1_SetConfig+0x128>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x88>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <TIM_OC1_SetConfig+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x88>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <TIM_OC1_SetConfig+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10c      	bne.n	8006bde <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0308 	bic.w	r3, r3, #8
 8006bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1d      	ldr	r2, [pc, #116]	; (8006c58 <TIM_OC1_SetConfig+0x11c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <TIM_OC1_SetConfig+0xd2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a1c      	ldr	r2, [pc, #112]	; (8006c5c <TIM_OC1_SetConfig+0x120>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <TIM_OC1_SetConfig+0xd2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <TIM_OC1_SetConfig+0x124>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_OC1_SetConfig+0xd2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <TIM_OC1_SetConfig+0x128>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC1_SetConfig+0xd2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <TIM_OC1_SetConfig+0x12c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC1_SetConfig+0xd2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a18      	ldr	r2, [pc, #96]	; (8006c6c <TIM_OC1_SetConfig+0x130>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d111      	bne.n	8006c32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	621a      	str	r2, [r3, #32]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40013400 	.word	0x40013400
 8006c60:	40014000 	.word	0x40014000
 8006c64:	40014400 	.word	0x40014400
 8006c68:	40014800 	.word	0x40014800
 8006c6c:	40015000 	.word	0x40015000

08006c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0210 	bic.w	r2, r3, #16
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <TIM_OC2_SetConfig+0x110>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <TIM_OC2_SetConfig+0x74>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <TIM_OC2_SetConfig+0x114>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC2_SetConfig+0x74>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <TIM_OC2_SetConfig+0x118>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10d      	bne.n	8006d00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <TIM_OC2_SetConfig+0x110>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <TIM_OC2_SetConfig+0xc0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <TIM_OC2_SetConfig+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00f      	beq.n	8006d30 <TIM_OC2_SetConfig+0xc0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <TIM_OC2_SetConfig+0x11c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_OC2_SetConfig+0xc0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <TIM_OC2_SetConfig+0x120>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_OC2_SetConfig+0xc0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <TIM_OC2_SetConfig+0x124>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC2_SetConfig+0xc0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <TIM_OC2_SetConfig+0x118>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d113      	bne.n	8006d58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40015000 	.word	0x40015000
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800

08006d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <TIM_OC3_SetConfig+0x10c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_OC3_SetConfig+0x72>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <TIM_OC3_SetConfig+0x110>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_OC3_SetConfig+0x72>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a29      	ldr	r2, [pc, #164]	; (8006eac <TIM_OC3_SetConfig+0x114>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10d      	bne.n	8006e26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <TIM_OC3_SetConfig+0x10c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <TIM_OC3_SetConfig+0xbe>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <TIM_OC3_SetConfig+0x110>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00f      	beq.n	8006e56 <TIM_OC3_SetConfig+0xbe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <TIM_OC3_SetConfig+0x118>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00b      	beq.n	8006e56 <TIM_OC3_SetConfig+0xbe>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <TIM_OC3_SetConfig+0x11c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d007      	beq.n	8006e56 <TIM_OC3_SetConfig+0xbe>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <TIM_OC3_SetConfig+0x120>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0xbe>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <TIM_OC3_SetConfig+0x114>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d113      	bne.n	8006e7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40015000 	.word	0x40015000
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800

08006ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <TIM_OC4_SetConfig+0x110>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_OC4_SetConfig+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2b      	ldr	r2, [pc, #172]	; (8006fd0 <TIM_OC4_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC4_SetConfig+0x74>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <TIM_OC4_SetConfig+0x118>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10d      	bne.n	8006f4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	031b      	lsls	r3, r3, #12
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <TIM_OC4_SetConfig+0x110>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_OC4_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <TIM_OC4_SetConfig+0x114>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00f      	beq.n	8006f7c <TIM_OC4_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <TIM_OC4_SetConfig+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_OC4_SetConfig+0xc0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <TIM_OC4_SetConfig+0x120>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_OC4_SetConfig+0xc0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <TIM_OC4_SetConfig+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC4_SetConfig+0xc0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <TIM_OC4_SetConfig+0x118>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d113      	bne.n	8006fa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	019b      	lsls	r3, r3, #6
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	019b      	lsls	r3, r3, #6
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40013400 	.word	0x40013400
 8006fd4:	40015000 	.word	0x40015000
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <TIM_OC5_SetConfig+0xbc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <TIM_OC5_SetConfig+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <TIM_OC5_SetConfig+0xc0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_OC5_SetConfig+0x82>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <TIM_OC5_SetConfig+0xc4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_OC5_SetConfig+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC5_SetConfig+0xc8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_OC5_SetConfig+0x82>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC5_SetConfig+0xcc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC5_SetConfig+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC5_SetConfig+0xd0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d109      	bne.n	800707a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	621a      	str	r2, [r3, #32]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800
 80070b4:	40015000 	.word	0x40015000

080070b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	051b      	lsls	r3, r3, #20
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1a      	ldr	r2, [pc, #104]	; (8007178 <TIM_OC6_SetConfig+0xc0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <TIM_OC6_SetConfig+0x84>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <TIM_OC6_SetConfig+0xc4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_OC6_SetConfig+0x84>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a18      	ldr	r2, [pc, #96]	; (8007180 <TIM_OC6_SetConfig+0xc8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_OC6_SetConfig+0x84>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <TIM_OC6_SetConfig+0xcc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC6_SetConfig+0x84>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <TIM_OC6_SetConfig+0xd0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC6_SetConfig+0x84>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a15      	ldr	r2, [pc, #84]	; (800718c <TIM_OC6_SetConfig+0xd4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d109      	bne.n	8007150 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800
 800718c:	40015000 	.word	0x40015000

08007190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f023 0201 	bic.w	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 030a 	bic.w	r3, r3, #10
 80071cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0210 	bic.w	r2, r3, #16
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800722a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	f043 0307 	orr.w	r3, r3, #7
 8007274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	021a      	lsls	r2, r3, #8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	609a      	str	r2, [r3, #8]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2201      	movs	r2, #1
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	431a      	orrs	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007328:	2302      	movs	r3, #2
 800732a:	e074      	b.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a34      	ldr	r2, [pc, #208]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a33      	ldr	r2, [pc, #204]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a31      	ldr	r2, [pc, #196]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d108      	bne.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007370:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a21      	ldr	r2, [pc, #132]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d01d      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a11      	ldr	r2, [pc, #68]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d10c      	bne.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40013400 	.word	0x40013400
 800742c:	40015000 	.word	0x40015000
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40014000 	.word	0x40014000

08007440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e042      	b.n	80074d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fb f8b9 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2224      	movs	r2, #36	; 0x24
 800746e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0201 	bic.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fcee 	bl	8007e64 <UART_SetConfig>
 8007488:	4603      	mov	r3, r0
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e022      	b.n	80074d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 ffde 	bl	800845c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 f865 	bl	80085a0 <UART_CheckIdleState>
 80074d6:	4603      	mov	r3, r0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	f040 8083 	bne.w	8007602 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <HAL_UART_Transmit+0x28>
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e07b      	b.n	8007604 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_UART_Transmit+0x3a>
 8007516:	2302      	movs	r3, #2
 8007518:	e074      	b.n	8007604 <HAL_UART_Transmit+0x124>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007532:	f7fc fadb 	bl	8003aec <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007550:	d108      	bne.n	8007564 <HAL_UART_Transmit+0x84>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	e003      	b.n	800756c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007574:	e02c      	b.n	80075d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 f858 	bl	8008636 <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e039      	b.n	8007604 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3302      	adds	r3, #2
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e007      	b.n	80075be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1cc      	bne.n	8007576 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2140      	movs	r1, #64	; 0x40
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f001 f825 	bl	8008636 <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e006      	b.n	8007604 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e000      	b.n	8007604 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
  }
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800760c:	b480      	push	{r7}
 800760e:	b091      	sub	sp, #68	; 0x44
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 808c 	bne.w	800773e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_UART_Transmit_IT+0x26>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e084      	b.n	8007740 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_UART_Transmit_IT+0x38>
 8007640:	2302      	movs	r3, #2
 8007642:	e07d      	b.n	8007740 <HAL_UART_Transmit_IT+0x134>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2221      	movs	r2, #33	; 0x21
 8007674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007680:	d12e      	bne.n	80076e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768a:	d107      	bne.n	800769c <HAL_UART_Transmit_IT+0x90>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a2d      	ldr	r2, [pc, #180]	; (800774c <HAL_UART_Transmit_IT+0x140>)
 8007698:	675a      	str	r2, [r3, #116]	; 0x74
 800769a:	e002      	b.n	80076a2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <HAL_UART_Transmit_IT+0x144>)
 80076a0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ca:	637a      	str	r2, [r7, #52]	; 0x34
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e5      	bne.n	80076aa <HAL_UART_Transmit_IT+0x9e>
 80076de:	e02c      	b.n	800773a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e8:	d107      	bne.n	80076fa <HAL_UART_Transmit_IT+0xee>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a17      	ldr	r2, [pc, #92]	; (8007754 <HAL_UART_Transmit_IT+0x148>)
 80076f6:	675a      	str	r2, [r3, #116]	; 0x74
 80076f8:	e002      	b.n	8007700 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a16      	ldr	r2, [pc, #88]	; (8007758 <HAL_UART_Transmit_IT+0x14c>)
 80076fe:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69f9      	ldr	r1, [r7, #28]
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	61bb      	str	r3, [r7, #24]
   return(result);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	e000      	b.n	8007740 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	3744      	adds	r7, #68	; 0x44
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	08008d6f 	.word	0x08008d6f
 8007750:	08008c8f 	.word	0x08008c8f
 8007754:	08008bcd 	.word	0x08008bcd
 8007758:	08008b15 	.word	0x08008b15

0800775c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	; 0x28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	2b20      	cmp	r3, #32
 8007772:	d142      	bne.n	80077fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_UART_Receive_IT+0x24>
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e03b      	b.n	80077fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_UART_Receive_IT+0x36>
 800778e:	2302      	movs	r3, #2
 8007790:	e034      	b.n	80077fc <HAL_UART_Receive_IT+0xa0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a17      	ldr	r2, [pc, #92]	; (8007804 <HAL_UART_Receive_IT+0xa8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01f      	beq.n	80077ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	613b      	str	r3, [r7, #16]
   return(result);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	69f9      	ldr	r1, [r7, #28]
 80077dc:	6a3a      	ldr	r2, [r7, #32]
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e6      	bne.n	80077b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	461a      	mov	r2, r3
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 ffe9 	bl	80087c8 <UART_Start_Receive_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	e000      	b.n	80077fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3728      	adds	r7, #40	; 0x28
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40008000 	.word	0x40008000

08007808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0ba      	sub	sp, #232	; 0xe8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800782e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007832:	f640 030f 	movw	r3, #2063	; 0x80f
 8007836:	4013      	ands	r3, r2
 8007838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800783c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11b      	bne.n	800787c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d015      	beq.n	800787c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d105      	bne.n	8007868 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800785c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 82d6 	beq.w	8007e1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
      }
      return;
 800787a:	e2d0      	b.n	8007e1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800787c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 811f 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007886:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800788a:	4b8b      	ldr	r3, [pc, #556]	; (8007ab8 <HAL_UART_IRQHandler+0x2b0>)
 800788c:	4013      	ands	r3, r2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007892:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007896:	4b89      	ldr	r3, [pc, #548]	; (8007abc <HAL_UART_IRQHandler+0x2b4>)
 8007898:	4013      	ands	r3, r2
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8112 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d011      	beq.n	80078d0 <HAL_UART_IRQHandler+0xc8>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2201      	movs	r2, #1
 80078be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c6:	f043 0201 	orr.w	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d011      	beq.n	8007900 <HAL_UART_IRQHandler+0xf8>
 80078dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2202      	movs	r2, #2
 80078ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f6:	f043 0204 	orr.w	r2, r3, #4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d011      	beq.n	8007930 <HAL_UART_IRQHandler+0x128>
 800790c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2204      	movs	r2, #4
 800791e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007926:	f043 0202 	orr.w	r2, r3, #2
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d017      	beq.n	800796c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007948:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800794c:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <HAL_UART_IRQHandler+0x2b0>)
 800794e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2208      	movs	r2, #8
 800795a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007962:	f043 0208 	orr.w	r2, r3, #8
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007974:	2b00      	cmp	r3, #0
 8007976:	d012      	beq.n	800799e <HAL_UART_IRQHandler+0x196>
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800798c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	f043 0220 	orr.w	r2, r3, #32
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 823c 	beq.w	8007e22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b40      	cmp	r3, #64	; 0x40
 80079f4:	d005      	beq.n	8007a02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d04f      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f80a 	bl	8008a1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d141      	bne.n	8007a9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1d9      	bne.n	8007a16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d013      	beq.n	8007a92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <HAL_UART_IRQHandler+0x2b8>)
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fc fa1a 	bl	8003eb0 <HAL_DMA_Abort_IT>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d017      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a90:	e00f      	b.n	8007ab2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9d0 	bl	8007e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a98:	e00b      	b.n	8007ab2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f9cc 	bl	8007e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	e007      	b.n	8007ab2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f9c8 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007ab0:	e1b7      	b.n	8007e22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab2:	bf00      	nop
    return;
 8007ab4:	e1b5      	b.n	8007e22 <HAL_UART_IRQHandler+0x61a>
 8007ab6:	bf00      	nop
 8007ab8:	10000001 	.word	0x10000001
 8007abc:	04000120 	.word	0x04000120
 8007ac0:	08008ae9 	.word	0x08008ae9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	f040 814a 	bne.w	8007d62 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8143 	beq.w	8007d62 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 813c 	beq.w	8007d62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2210      	movs	r2, #16
 8007af0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	f040 80b5 	bne.w	8007c6c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8187 	beq.w	8007e26 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b22:	429a      	cmp	r2, r3
 8007b24:	f080 817f 	bcs.w	8007e26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 8086 	bne.w	8007c50 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1da      	bne.n	8007b44 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e1      	bne.n	8007b8e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e3      	bne.n	8007bca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c20:	f023 0310 	bic.w	r3, r3, #16
 8007c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e4      	bne.n	8007c10 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fc f8d7 	bl	8003dfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8f1 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c6a:	e0dc      	b.n	8007e26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80ce 	beq.w	8007e2a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 80c9 	beq.w	8007e2a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cba:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e4      	bne.n	8007c98 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e1      	bne.n	8007cce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0310 	bic.w	r3, r3, #16
 8007d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	69b9      	ldr	r1, [r7, #24]
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e4      	bne.n	8007d1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f876 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d60:	e063      	b.n	8007e2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <HAL_UART_IRQHandler+0x584>
 8007d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fcef 	bl	8009768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d8a:	e051      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d014      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d03a      	beq.n	8007e2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
    }
    return;
 8007dc0:	e035      	b.n	8007e2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_UART_IRQHandler+0x5da>
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 f83c 	bl	8008e58 <UART_EndTransmit_IT>
    return;
 8007de0:	e026      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <HAL_UART_IRQHandler+0x5fa>
 8007dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fcc8 	bl	8009790 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e00:	e016      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_UART_IRQHandler+0x628>
 8007e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da0c      	bge.n	8007e30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fcb0 	bl	800977c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e1c:	e008      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
      return;
 8007e1e:	bf00      	nop
 8007e20:	e006      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
    return;
 8007e22:	bf00      	nop
 8007e24:	e004      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
      return;
 8007e26:	bf00      	nop
 8007e28:	e002      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
      return;
 8007e2a:	bf00      	nop
 8007e2c:	e000      	b.n	8007e30 <HAL_UART_IRQHandler+0x628>
    return;
 8007e2e:	bf00      	nop
  }
}
 8007e30:	37e8      	adds	r7, #232	; 0xe8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop

08007e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e68:	b08c      	sub	sp, #48	; 0x30
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4baa      	ldr	r3, [pc, #680]	; (800813c <UART_SetConfig+0x2d8>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a9f      	ldr	r2, [pc, #636]	; (8008140 <UART_SetConfig+0x2dc>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007eda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	f023 010f 	bic.w	r1, r3, #15
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a90      	ldr	r2, [pc, #576]	; (8008144 <UART_SetConfig+0x2e0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d125      	bne.n	8007f54 <UART_SetConfig+0xf0>
 8007f08:	4b8f      	ldr	r3, [pc, #572]	; (8008148 <UART_SetConfig+0x2e4>)
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d81a      	bhi.n	8007f4c <UART_SetConfig+0xe8>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0xb8>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e116      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e112      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e10e      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e10a      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e106      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a7c      	ldr	r2, [pc, #496]	; (800814c <UART_SetConfig+0x2e8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d138      	bne.n	8007fd0 <UART_SetConfig+0x16c>
 8007f5e:	4b7a      	ldr	r3, [pc, #488]	; (8008148 <UART_SetConfig+0x2e4>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	f003 030c 	and.w	r3, r3, #12
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	d82d      	bhi.n	8007fc8 <UART_SetConfig+0x164>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x110>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007fa9 	.word	0x08007fa9
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007fc9 	.word	0x08007fc9
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08007fb9 	.word	0x08007fb9
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	08007fc9 	.word	0x08007fc9
 8007f90:	08007fc9 	.word	0x08007fc9
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fc9 	.word	0x08007fc9
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fae:	e0d8      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb6:	e0d4      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fbe:	e0d0      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc6:	e0cc      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fce:	e0c8      	b.n	8008162 <UART_SetConfig+0x2fe>
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a5e      	ldr	r2, [pc, #376]	; (8008150 <UART_SetConfig+0x2ec>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d125      	bne.n	8008026 <UART_SetConfig+0x1c2>
 8007fda:	4b5b      	ldr	r3, [pc, #364]	; (8008148 <UART_SetConfig+0x2e4>)
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fe4:	2b30      	cmp	r3, #48	; 0x30
 8007fe6:	d016      	beq.n	8008016 <UART_SetConfig+0x1b2>
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d818      	bhi.n	800801e <UART_SetConfig+0x1ba>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d00a      	beq.n	8008006 <UART_SetConfig+0x1a2>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d814      	bhi.n	800801e <UART_SetConfig+0x1ba>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <UART_SetConfig+0x19a>
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d008      	beq.n	800800e <UART_SetConfig+0x1aa>
 8007ffc:	e00f      	b.n	800801e <UART_SetConfig+0x1ba>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008004:	e0ad      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008006:	2302      	movs	r3, #2
 8008008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800c:	e0a9      	b.n	8008162 <UART_SetConfig+0x2fe>
 800800e:	2304      	movs	r3, #4
 8008010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008014:	e0a5      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008016:	2308      	movs	r3, #8
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801c:	e0a1      	b.n	8008162 <UART_SetConfig+0x2fe>
 800801e:	2310      	movs	r3, #16
 8008020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008024:	e09d      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a4a      	ldr	r2, [pc, #296]	; (8008154 <UART_SetConfig+0x2f0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d125      	bne.n	800807c <UART_SetConfig+0x218>
 8008030:	4b45      	ldr	r3, [pc, #276]	; (8008148 <UART_SetConfig+0x2e4>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800803a:	2bc0      	cmp	r3, #192	; 0xc0
 800803c:	d016      	beq.n	800806c <UART_SetConfig+0x208>
 800803e:	2bc0      	cmp	r3, #192	; 0xc0
 8008040:	d818      	bhi.n	8008074 <UART_SetConfig+0x210>
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d00a      	beq.n	800805c <UART_SetConfig+0x1f8>
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d814      	bhi.n	8008074 <UART_SetConfig+0x210>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <UART_SetConfig+0x1f0>
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d008      	beq.n	8008064 <UART_SetConfig+0x200>
 8008052:	e00f      	b.n	8008074 <UART_SetConfig+0x210>
 8008054:	2300      	movs	r3, #0
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805a:	e082      	b.n	8008162 <UART_SetConfig+0x2fe>
 800805c:	2302      	movs	r3, #2
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008062:	e07e      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008064:	2304      	movs	r3, #4
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806a:	e07a      	b.n	8008162 <UART_SetConfig+0x2fe>
 800806c:	2308      	movs	r3, #8
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008072:	e076      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008074:	2310      	movs	r3, #16
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807a:	e072      	b.n	8008162 <UART_SetConfig+0x2fe>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a35      	ldr	r2, [pc, #212]	; (8008158 <UART_SetConfig+0x2f4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d12a      	bne.n	80080dc <UART_SetConfig+0x278>
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <UART_SetConfig+0x2e4>)
 8008088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008094:	d01a      	beq.n	80080cc <UART_SetConfig+0x268>
 8008096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809a:	d81b      	bhi.n	80080d4 <UART_SetConfig+0x270>
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d00c      	beq.n	80080bc <UART_SetConfig+0x258>
 80080a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a6:	d815      	bhi.n	80080d4 <UART_SetConfig+0x270>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <UART_SetConfig+0x250>
 80080ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b0:	d008      	beq.n	80080c4 <UART_SetConfig+0x260>
 80080b2:	e00f      	b.n	80080d4 <UART_SetConfig+0x270>
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e052      	b.n	8008162 <UART_SetConfig+0x2fe>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e04e      	b.n	8008162 <UART_SetConfig+0x2fe>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e04a      	b.n	8008162 <UART_SetConfig+0x2fe>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e046      	b.n	8008162 <UART_SetConfig+0x2fe>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e042      	b.n	8008162 <UART_SetConfig+0x2fe>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a17      	ldr	r2, [pc, #92]	; (8008140 <UART_SetConfig+0x2dc>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d13a      	bne.n	800815c <UART_SetConfig+0x2f8>
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <UART_SetConfig+0x2e4>)
 80080e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f4:	d01a      	beq.n	800812c <UART_SetConfig+0x2c8>
 80080f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fa:	d81b      	bhi.n	8008134 <UART_SetConfig+0x2d0>
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008100:	d00c      	beq.n	800811c <UART_SetConfig+0x2b8>
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008106:	d815      	bhi.n	8008134 <UART_SetConfig+0x2d0>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <UART_SetConfig+0x2b0>
 800810c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0x2c0>
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x2d0>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811a:	e022      	b.n	8008162 <UART_SetConfig+0x2fe>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008122:	e01e      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e01a      	b.n	8008162 <UART_SetConfig+0x2fe>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e016      	b.n	8008162 <UART_SetConfig+0x2fe>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e012      	b.n	8008162 <UART_SetConfig+0x2fe>
 800813c:	cfff69f3 	.word	0xcfff69f3
 8008140:	40008000 	.word	0x40008000
 8008144:	40013800 	.word	0x40013800
 8008148:	40021000 	.word	0x40021000
 800814c:	40004400 	.word	0x40004400
 8008150:	40004800 	.word	0x40004800
 8008154:	40004c00 	.word	0x40004c00
 8008158:	40005000 	.word	0x40005000
 800815c:	2310      	movs	r3, #16
 800815e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4aae      	ldr	r2, [pc, #696]	; (8008420 <UART_SetConfig+0x5bc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	f040 8097 	bne.w	800829c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800816e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008172:	2b08      	cmp	r3, #8
 8008174:	d823      	bhi.n	80081be <UART_SetConfig+0x35a>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x318>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081bf 	.word	0x080081bf
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081bf 	.word	0x080081bf
 800818c:	080081af 	.word	0x080081af
 8008190:	080081bf 	.word	0x080081bf
 8008194:	080081bf 	.word	0x080081bf
 8008198:	080081bf 	.word	0x080081bf
 800819c:	080081b7 	.word	0x080081b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a0:	f7fd fd70 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 80081a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081a6:	e010      	b.n	80081ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a8:	4b9e      	ldr	r3, [pc, #632]	; (8008424 <UART_SetConfig+0x5c0>)
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081ac:	e00d      	b.n	80081ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ae:	f7fd fcfb 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 80081b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081b4:	e009      	b.n	80081ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081bc:	e005      	b.n	80081ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8130 	beq.w	8008432 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	4a94      	ldr	r2, [pc, #592]	; (8008428 <UART_SetConfig+0x5c4>)
 80081d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081dc:	461a      	mov	r2, r3
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d305      	bcc.n	8008202 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d903      	bls.n	800820a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008208:	e113      	b.n	8008432 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	2200      	movs	r2, #0
 800820e:	60bb      	str	r3, [r7, #8]
 8008210:	60fa      	str	r2, [r7, #12]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	4a84      	ldr	r2, [pc, #528]	; (8008428 <UART_SetConfig+0x5c4>)
 8008218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821c:	b29b      	uxth	r3, r3
 800821e:	2200      	movs	r2, #0
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822c:	f7f8 fd5e 	bl	8000cec <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	020b      	lsls	r3, r1, #8
 8008242:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008246:	0202      	lsls	r2, r0, #8
 8008248:	6979      	ldr	r1, [r7, #20]
 800824a:	6849      	ldr	r1, [r1, #4]
 800824c:	0849      	lsrs	r1, r1, #1
 800824e:	2000      	movs	r0, #0
 8008250:	460c      	mov	r4, r1
 8008252:	4605      	mov	r5, r0
 8008254:	eb12 0804 	adds.w	r8, r2, r4
 8008258:	eb43 0905 	adc.w	r9, r3, r5
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	469a      	mov	sl, r3
 8008264:	4693      	mov	fp, r2
 8008266:	4652      	mov	r2, sl
 8008268:	465b      	mov	r3, fp
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 fd3d 	bl	8000cec <__aeabi_uldivmod>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4613      	mov	r3, r2
 8008278:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008280:	d308      	bcc.n	8008294 <UART_SetConfig+0x430>
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008288:	d204      	bcs.n	8008294 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	e0ce      	b.n	8008432 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800829a:	e0ca      	b.n	8008432 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a4:	d166      	bne.n	8008374 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d827      	bhi.n	80082fe <UART_SetConfig+0x49a>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0x450>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082d9 	.word	0x080082d9
 80082b8:	080082e1 	.word	0x080082e1
 80082bc:	080082e9 	.word	0x080082e9
 80082c0:	080082ff 	.word	0x080082ff
 80082c4:	080082ef 	.word	0x080082ef
 80082c8:	080082ff 	.word	0x080082ff
 80082cc:	080082ff 	.word	0x080082ff
 80082d0:	080082ff 	.word	0x080082ff
 80082d4:	080082f7 	.word	0x080082f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7fd fcd4 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 80082dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082de:	e014      	b.n	800830a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e0:	f7fd fce6 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 80082e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082e6:	e010      	b.n	800830a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e8:	4b4e      	ldr	r3, [pc, #312]	; (8008424 <UART_SetConfig+0x5c0>)
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082ec:	e00d      	b.n	800830a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ee:	f7fd fc5b 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082f4:	e009      	b.n	800830a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082fc:	e005      	b.n	800830a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8090 	beq.w	8008432 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	4a44      	ldr	r2, [pc, #272]	; (8008428 <UART_SetConfig+0x5c4>)
 8008318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800831c:	461a      	mov	r2, r3
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	fbb3 f3f2 	udiv	r3, r3, r2
 8008324:	005a      	lsls	r2, r3, #1
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	441a      	add	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d916      	bls.n	800836c <UART_SetConfig+0x508>
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008344:	d212      	bcs.n	800836c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f023 030f 	bic.w	r3, r3, #15
 800834e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	b29b      	uxth	r3, r3
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	b29a      	uxth	r2, r3
 800835c:	8bfb      	ldrh	r3, [r7, #30]
 800835e:	4313      	orrs	r3, r2
 8008360:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	8bfa      	ldrh	r2, [r7, #30]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	e062      	b.n	8008432 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008372:	e05e      	b.n	8008432 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008378:	2b08      	cmp	r3, #8
 800837a:	d828      	bhi.n	80083ce <UART_SetConfig+0x56a>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <UART_SetConfig+0x520>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083a9 	.word	0x080083a9
 8008388:	080083b1 	.word	0x080083b1
 800838c:	080083b9 	.word	0x080083b9
 8008390:	080083cf 	.word	0x080083cf
 8008394:	080083bf 	.word	0x080083bf
 8008398:	080083cf 	.word	0x080083cf
 800839c:	080083cf 	.word	0x080083cf
 80083a0:	080083cf 	.word	0x080083cf
 80083a4:	080083c7 	.word	0x080083c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a8:	f7fd fc6c 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 80083ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ae:	e014      	b.n	80083da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b0:	f7fd fc7e 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 80083b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083b6:	e010      	b.n	80083da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b8:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <UART_SetConfig+0x5c0>)
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083bc:	e00d      	b.n	80083da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083be:	f7fd fbf3 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c4:	e009      	b.n	80083da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083cc:	e005      	b.n	80083da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083d8:	bf00      	nop
    }

    if (pclk != 0U)
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d028      	beq.n	8008432 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	4a10      	ldr	r2, [pc, #64]	; (8008428 <UART_SetConfig+0x5c4>)
 80083e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ea:	461a      	mov	r2, r3
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	441a      	add	r2, r3
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008402:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d910      	bls.n	800842c <UART_SetConfig+0x5c8>
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008410:	d20c      	bcs.n	800842c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	b29a      	uxth	r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60da      	str	r2, [r3, #12]
 800841c:	e009      	b.n	8008432 <UART_SetConfig+0x5ce>
 800841e:	bf00      	nop
 8008420:	40008000 	.word	0x40008000
 8008424:	00f42400 	.word	0x00f42400
 8008428:	0800f510 	.word	0x0800f510
      }
      else
      {
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2201      	movs	r2, #1
 8008436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2201      	movs	r2, #1
 800843e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2200      	movs	r2, #0
 8008446:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800844e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008452:	4618      	mov	r0, r3
 8008454:	3730      	adds	r7, #48	; 0x30
 8008456:	46bd      	mov	sp, r7
 8008458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800845c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01a      	beq.n	8008572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855a:	d10a      	bne.n	8008572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085b0:	f7fb fa9c 	bl	8003aec <HAL_GetTick>
 80085b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d10e      	bne.n	80085e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f82f 	bl	8008636 <UART_WaitOnFlagUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e025      	b.n	800862e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d10e      	bne.n	800860e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f819 	bl	8008636 <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e00f      	b.n	800862e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b09c      	sub	sp, #112	; 0x70
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008646:	e0a9      	b.n	800879c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800864e:	f000 80a5 	beq.w	800879c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008652:	f7fb fa4b 	bl	8003aec <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800865e:	429a      	cmp	r2, r3
 8008660:	d302      	bcc.n	8008668 <UART_WaitOnFlagUntilTimeout+0x32>
 8008662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008664:	2b00      	cmp	r3, #0
 8008666:	d140      	bne.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800867c:	667b      	str	r3, [r7, #100]	; 0x64
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008688:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800868c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e6      	bne.n	8008668 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	663b      	str	r3, [r7, #96]	; 0x60
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80086bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2220      	movs	r2, #32
 80086da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e069      	b.n	80087be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d051      	beq.n	800879c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008706:	d149      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008710:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
 8008732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e6      	bne.n	8008712 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	613b      	str	r3, [r7, #16]
   return(result);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f023 0301 	bic.w	r3, r3, #1
 800875a:	66bb      	str	r3, [r7, #104]	; 0x68
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008764:	623a      	str	r2, [r7, #32]
 8008766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	69f9      	ldr	r1, [r7, #28]
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	61bb      	str	r3, [r7, #24]
   return(result);
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e5      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e010      	b.n	80087be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69da      	ldr	r2, [r3, #28]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4013      	ands	r3, r2
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bf0c      	ite	eq
 80087ac:	2301      	moveq	r3, #1
 80087ae:	2300      	movne	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	f43f af46 	beq.w	8008648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3770      	adds	r7, #112	; 0x70
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b0a3      	sub	sp, #140	; 0x8c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d10e      	bne.n	800881a <UART_Start_Receive_IT+0x52>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <UART_Start_Receive_IT+0x48>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f240 12ff 	movw	r2, #511	; 0x1ff
 800880a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800880e:	e02d      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	22ff      	movs	r2, #255	; 0xff
 8008814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008818:	e028      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <UART_Start_Receive_IT+0x76>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <UART_Start_Receive_IT+0x6c>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	22ff      	movs	r2, #255	; 0xff
 800882e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008832:	e01b      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	227f      	movs	r2, #127	; 0x7f
 8008838:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800883c:	e016      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008846:	d10d      	bne.n	8008864 <UART_Start_Receive_IT+0x9c>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <UART_Start_Receive_IT+0x92>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	227f      	movs	r2, #127	; 0x7f
 8008854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008858:	e008      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	223f      	movs	r2, #63	; 0x3f
 800885e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008862:	e003      	b.n	800886c <UART_Start_Receive_IT+0xa4>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2222      	movs	r2, #34	; 0x22
 8008878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800888c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3308      	adds	r3, #8
 800889c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088a0:	673a      	str	r2, [r7, #112]	; 0x70
 80088a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80088a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80088ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e3      	bne.n	800887c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d153      	bne.n	8008966 <UART_Start_Receive_IT+0x19e>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d34d      	bcc.n	8008966 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d2:	d107      	bne.n	80088e4 <UART_Start_Receive_IT+0x11c>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a4b      	ldr	r2, [pc, #300]	; (8008a0c <UART_Start_Receive_IT+0x244>)
 80088e0:	671a      	str	r2, [r3, #112]	; 0x70
 80088e2:	e002      	b.n	80088ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a4a      	ldr	r2, [pc, #296]	; (8008a10 <UART_Start_Receive_IT+0x248>)
 80088e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01a      	beq.n	8008930 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800891c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800891e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008922:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800892a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e4      	bne.n	80088fa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008950:	64ba      	str	r2, [r7, #72]	; 0x48
 8008952:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e5      	bne.n	8008930 <UART_Start_Receive_IT+0x168>
 8008964:	e04a      	b.n	80089fc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896e:	d107      	bne.n	8008980 <UART_Start_Receive_IT+0x1b8>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <UART_Start_Receive_IT+0x24c>)
 800897c:	671a      	str	r2, [r3, #112]	; 0x70
 800897e:	e002      	b.n	8008986 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <UART_Start_Receive_IT+0x250>)
 8008984:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d019      	beq.n	80089ca <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80089aa:	677b      	str	r3, [r7, #116]	; 0x74
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
 80089b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_Start_Receive_IT+0x1ce>
 80089c8:	e018      	b.n	80089fc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	613b      	str	r3, [r7, #16]
   return(result);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f043 0320 	orr.w	r3, r3, #32
 80089de:	67bb      	str	r3, [r7, #120]	; 0x78
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e8:	623b      	str	r3, [r7, #32]
 80089ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	69f9      	ldr	r1, [r7, #28]
 80089ee:	6a3a      	ldr	r2, [r7, #32]
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	378c      	adds	r7, #140	; 0x8c
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	08009469 	.word	0x08009469
 8008a10:	08009171 	.word	0x08009171
 8008a14:	0800900f 	.word	0x0800900f
 8008a18:	08008eaf 	.word	0x08008eaf

08008a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b095      	sub	sp, #84	; 0x54
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a42:	643b      	str	r3, [r7, #64]	; 0x40
 8008a44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e6      	bne.n	8008a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d118      	bne.n	8008ac8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f023 0310 	bic.w	r3, r3, #16
 8008aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6979      	ldr	r1, [r7, #20]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e6      	bne.n	8008a96 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008adc:	bf00      	nop
 8008ade:	3754      	adds	r7, #84	; 0x54
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff f996 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b08f      	sub	sp, #60	; 0x3c
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b22:	2b21      	cmp	r3, #33	; 0x21
 8008b24:	d14c      	bne.n	8008bc0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d132      	bne.n	8008b98 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b52:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e6      	bne.n	8008b32 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b78:	633b      	str	r3, [r7, #48]	; 0x30
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	61bb      	str	r3, [r7, #24]
 8008b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6979      	ldr	r1, [r7, #20]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008b96:	e013      	b.n	8008bc0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008bc0:	bf00      	nop
 8008bc2:	373c      	adds	r7, #60	; 0x3c
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b091      	sub	sp, #68	; 0x44
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bda:	2b21      	cmp	r3, #33	; 0x21
 8008bdc:	d151      	bne.n	8008c82 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d132      	bne.n	8008c50 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	633b      	str	r3, [r7, #48]	; 0x30
 8008c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3a:	61fb      	str	r3, [r7, #28]
 8008c3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	69b9      	ldr	r1, [r7, #24]
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	617b      	str	r3, [r7, #20]
   return(result);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e6      	bne.n	8008c1c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008c4e:	e018      	b.n	8008c82 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008c82:	bf00      	nop
 8008c84:	3744      	adds	r7, #68	; 0x44
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b091      	sub	sp, #68	; 0x44
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d160      	bne.n	8008d62 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ca8:	e057      	b.n	8008d5a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d133      	bne.n	8008d1e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e5      	bne.n	8008cb6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	69b9      	ldr	r1, [r7, #24]
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	617b      	str	r3, [r7, #20]
   return(result);
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d1c:	e021      	b.n	8008d62 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d013      	beq.n	8008d54 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d56:	3b01      	subs	r3, #1
 8008d58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1a4      	bne.n	8008caa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008d60:	e7ff      	b.n	8008d62 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008d62:	bf00      	nop
 8008d64:	3744      	adds	r7, #68	; 0x44
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b091      	sub	sp, #68	; 0x44
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d7c:	2b21      	cmp	r3, #33	; 0x21
 8008d7e:	d165      	bne.n	8008e4c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d86:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d88:	e05c      	b.n	8008e44 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d133      	bne.n	8008dfe <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008dac:	637b      	str	r3, [r7, #52]	; 0x34
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e5      	bne.n	8008d96 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dde:	633b      	str	r3, [r7, #48]	; 0x30
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6979      	ldr	r1, [r7, #20]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	613b      	str	r3, [r7, #16]
   return(result);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e6      	bne.n	8008dca <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008dfc:	e026      	b.n	8008e4c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d018      	beq.n	8008e3e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e10:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e20:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	1c9a      	adds	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e40:	3b01      	subs	r3, #1
 8008e42:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008e44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d19f      	bne.n	8008d8a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008e4a:	e7ff      	b.n	8008e4c <UART_TxISR_16BIT_FIFOEN+0xde>
 8008e4c:	bf00      	nop
 8008e4e:	3744      	adds	r7, #68	; 0x44
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	61bb      	str	r3, [r7, #24]
 8008e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e6      	bne.n	8008e60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7f9 fe0d 	bl	8002ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea6:	bf00      	nop
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b096      	sub	sp, #88	; 0x58
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ebc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec6:	2b22      	cmp	r3, #34	; 0x22
 8008ec8:	f040 8095 	bne.w	8008ff6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ed6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008eda:	b2d9      	uxtb	r1, r3
 8008edc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	400a      	ands	r2, r1
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d178      	bne.n	8009006 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f28:	653b      	str	r3, [r7, #80]	; 0x50
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f32:	647b      	str	r3, [r7, #68]	; 0x44
 8008f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e6      	bne.n	8008f14 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	623b      	str	r3, [r7, #32]
   return(result);
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f66:	633a      	str	r2, [r7, #48]	; 0x30
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d12e      	bne.n	8008fee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0310 	bic.w	r3, r3, #16
 8008faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb4:	61fb      	str	r3, [r7, #28]
 8008fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	69b9      	ldr	r1, [r7, #24]
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e6      	bne.n	8008f96 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f003 0310 	and.w	r3, r3, #16
 8008fd2:	2b10      	cmp	r3, #16
 8008fd4:	d103      	bne.n	8008fde <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe ff30 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fec:	e00b      	b.n	8009006 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f9 fd50 	bl	8002a94 <HAL_UART_RxCpltCallback>
}
 8008ff4:	e007      	b.n	8009006 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0208 	orr.w	r2, r2, #8
 8009004:	619a      	str	r2, [r3, #24]
}
 8009006:	bf00      	nop
 8009008:	3758      	adds	r7, #88	; 0x58
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b096      	sub	sp, #88	; 0x58
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800901c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009026:	2b22      	cmp	r3, #34	; 0x22
 8009028:	f040 8095 	bne.w	8009156 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800903c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009040:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009044:	4013      	ands	r3, r2
 8009046:	b29a      	uxth	r2, r3
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009050:	1c9a      	adds	r2, r3, #2
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800906e:	b29b      	uxth	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d178      	bne.n	8009166 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009092:	643b      	str	r3, [r7, #64]	; 0x40
 8009094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e6      	bne.n	8009074 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e5      	bne.n	80090a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d12e      	bne.n	800914e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	60bb      	str	r3, [r7, #8]
   return(result);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f023 0310 	bic.w	r3, r3, #16
 800910a:	647b      	str	r3, [r7, #68]	; 0x44
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6979      	ldr	r1, [r7, #20]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	613b      	str	r3, [r7, #16]
   return(result);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e6      	bne.n	80090f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f003 0310 	and.w	r3, r3, #16
 8009132:	2b10      	cmp	r3, #16
 8009134:	d103      	bne.n	800913e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2210      	movs	r2, #16
 800913c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fe fe80 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800914c:	e00b      	b.n	8009166 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7f9 fca0 	bl	8002a94 <HAL_UART_RxCpltCallback>
}
 8009154:	e007      	b.n	8009166 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0208 	orr.w	r2, r2, #8
 8009164:	619a      	str	r2, [r3, #24]
}
 8009166:	bf00      	nop
 8009168:	3758      	adds	r7, #88	; 0x58
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b0a6      	sub	sp, #152	; 0x98
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800917e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	2b22      	cmp	r3, #34	; 0x22
 80091a8:	f040 814f 	bne.w	800944a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091b6:	e0f6      	b.n	80093a6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091c2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80091c6:	b2d9      	uxtb	r1, r3
 80091c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d2:	400a      	ands	r2, r1
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	2b00      	cmp	r3, #0
 8009208:	d053      	beq.n	80092b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800920a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800921a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009230:	f043 0201 	orr.w	r2, r3, #1
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2202      	movs	r2, #2
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009260:	f043 0204 	orr.w	r2, r3, #4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800926a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2204      	movs	r2, #4
 8009288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009290:	f043 0202 	orr.w	r2, r3, #2
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7fe fdc7 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d173      	bne.n	80093a6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e4      	bne.n	80092be <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009318:	657a      	str	r2, [r7, #84]	; 0x54
 800931a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800931e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e3      	bne.n	80092f4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2220      	movs	r2, #32
 8009330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d12e      	bne.n	80093a0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	f023 0310 	bic.w	r3, r3, #16
 800935c:	67bb      	str	r3, [r7, #120]	; 0x78
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009366:	643b      	str	r3, [r7, #64]	; 0x40
 8009368:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800936c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e6      	bne.n	8009348 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b10      	cmp	r3, #16
 8009386:	d103      	bne.n	8009390 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2210      	movs	r2, #16
 800938e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fe fd57 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
 800939e:	e002      	b.n	80093a6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7f9 fb77 	bl	8002a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80093ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f47f aefe 	bne.w	80091b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093c6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d045      	beq.n	800945a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093d8:	429a      	cmp	r2, r3
 80093da:	d23e      	bcs.n	800945a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093f2:	673b      	str	r3, [r7, #112]	; 0x70
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3308      	adds	r3, #8
 80093fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e5      	bne.n	80093dc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a14      	ldr	r2, [pc, #80]	; (8009464 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009414:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	60bb      	str	r3, [r7, #8]
   return(result);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f043 0320 	orr.w	r3, r3, #32
 800942a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	613b      	str	r3, [r7, #16]
   return(result);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009448:	e007      	b.n	800945a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0208 	orr.w	r2, r2, #8
 8009458:	619a      	str	r2, [r3, #24]
}
 800945a:	bf00      	nop
 800945c:	3798      	adds	r7, #152	; 0x98
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	08008eaf 	.word	0x08008eaf

08009468 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b0a8      	sub	sp, #160	; 0xa0
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009476:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949e:	2b22      	cmp	r3, #34	; 0x22
 80094a0:	f040 8153 	bne.w	800974a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ae:	e0fa      	b.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80094c2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80094c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80094ca:	4013      	ands	r3, r2
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	2b00      	cmp	r3, #0
 8009504:	d053      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d011      	beq.n	8009536 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2201      	movs	r2, #1
 8009524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800952c:	f043 0201 	orr.w	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009536:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d011      	beq.n	8009566 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2202      	movs	r2, #2
 8009554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955c:	f043 0204 	orr.w	r2, r3, #4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009566:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d011      	beq.n	8009596 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2204      	movs	r2, #4
 8009584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800958c:	f043 0202 	orr.w	r2, r3, #2
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d006      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fe fc49 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d175      	bne.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095de:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e4      	bne.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009618:	65ba      	str	r2, [r7, #88]	; 0x58
 800961a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800961e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009620:	e841 2300 	strex	r3, r2, [r1]
 8009624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e1      	bne.n	80095f0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d12e      	bne.n	80096a0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009658:	f023 0310 	bic.w	r3, r3, #16
 800965c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009666:	647b      	str	r3, [r7, #68]	; 0x44
 8009668:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800966c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e6      	bne.n	8009648 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b10      	cmp	r3, #16
 8009686:	d103      	bne.n	8009690 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2210      	movs	r2, #16
 800968e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fe fbd7 	bl	8007e4c <HAL_UARTEx_RxEventCallback>
 800969e:	e002      	b.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7f9 f9f7 	bl	8002a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x254>
 80096ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f47f aefa 	bne.w	80094b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d045      	beq.n	800975a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096d4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80096d8:	429a      	cmp	r2, r3
 80096da:	d23e      	bcs.n	800975a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	623b      	str	r3, [r7, #32]
   return(result);
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096f2:	677b      	str	r3, [r7, #116]	; 0x74
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80096fc:	633a      	str	r2, [r7, #48]	; 0x30
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e5      	bne.n	80096dc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a14      	ldr	r2, [pc, #80]	; (8009764 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009714:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	60fb      	str	r3, [r7, #12]
   return(result);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f043 0320 	orr.w	r3, r3, #32
 800972a:	673b      	str	r3, [r7, #112]	; 0x70
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	69b9      	ldr	r1, [r7, #24]
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	e841 2300 	strex	r3, r2, [r1]
 8009740:	617b      	str	r3, [r7, #20]
   return(result);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e6      	bne.n	8009716 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009748:	e007      	b.n	800975a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0208 	orr.w	r2, r2, #8
 8009758:	619a      	str	r2, [r3, #24]
}
 800975a:	bf00      	nop
 800975c:	37a0      	adds	r7, #160	; 0xa0
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	0800900f 	.word	0x0800900f

08009768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_UARTEx_DisableFifoMode+0x16>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e027      	b.n	800980a <HAL_UARTEx_DisableFifoMode+0x66>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2224      	movs	r2, #36	; 0x24
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0201 	bic.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800982a:	2302      	movs	r3, #2
 800982c:	e02d      	b.n	800988a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2224      	movs	r2, #36	; 0x24
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f850 	bl	8009910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e02d      	b.n	8009906 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2224      	movs	r2, #36	; 0x24
 80098b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f812 	bl	8009910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991c:	2b00      	cmp	r3, #0
 800991e:	d108      	bne.n	8009932 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009930:	e031      	b.n	8009996 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009932:	2308      	movs	r3, #8
 8009934:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009936:	2308      	movs	r3, #8
 8009938:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	0e5b      	lsrs	r3, r3, #25
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	0f5b      	lsrs	r3, r3, #29
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	7b3a      	ldrb	r2, [r7, #12]
 800995e:	4911      	ldr	r1, [pc, #68]	; (80099a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009960:	5c8a      	ldrb	r2, [r1, r2]
 8009962:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009966:	7b3a      	ldrb	r2, [r7, #12]
 8009968:	490f      	ldr	r1, [pc, #60]	; (80099a8 <UARTEx_SetNbDataToProcess+0x98>)
 800996a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800996c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	7b7a      	ldrb	r2, [r7, #13]
 800997c:	4909      	ldr	r1, [pc, #36]	; (80099a4 <UARTEx_SetNbDataToProcess+0x94>)
 800997e:	5c8a      	ldrb	r2, [r1, r2]
 8009980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009984:	7b7a      	ldrb	r2, [r7, #13]
 8009986:	4908      	ldr	r1, [pc, #32]	; (80099a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009988:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800998a:	fb93 f3f2 	sdiv	r3, r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	0800f528 	.word	0x0800f528
 80099a8:	0800f530 	.word	0x0800f530

080099ac <_ZNSaIcEC1Ev>:
 80099ac:	4770      	bx	lr

080099ae <_ZNSaIcED1Ev>:
 80099ae:	4770      	bx	lr

080099b0 <_ZSt17__throw_bad_allocv>:
 80099b0:	b508      	push	{r3, lr}
 80099b2:	f000 f8af 	bl	8009b14 <abort>

080099b6 <_ZSt19__throw_logic_errorPKc>:
 80099b6:	b508      	push	{r3, lr}
 80099b8:	f000 f8ac 	bl	8009b14 <abort>

080099bc <_ZSt24__throw_invalid_argumentPKc>:
 80099bc:	b508      	push	{r3, lr}
 80099be:	f000 f8a9 	bl	8009b14 <abort>

080099c2 <_ZSt20__throw_length_errorPKc>:
 80099c2:	b508      	push	{r3, lr}
 80099c4:	f000 f8a6 	bl	8009b14 <abort>

080099c8 <_ZSt20__throw_out_of_rangePKc>:
 80099c8:	b508      	push	{r3, lr}
 80099ca:	f000 f8a3 	bl	8009b14 <abort>

080099ce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80099ce:	b10a      	cbz	r2, 80099d4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80099d0:	f000 bad2 	b.w	8009f78 <memcpy>
 80099d4:	4770      	bx	lr
	...

080099d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80099d8:	b508      	push	{r3, lr}
 80099da:	680b      	ldr	r3, [r1, #0]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d302      	bcc.n	80099e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80099e2:	480d      	ldr	r0, [pc, #52]	; (8009a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80099e4:	f7ff ffed 	bl	80099c2 <_ZSt20__throw_length_errorPKc>
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d90b      	bls.n	8009a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80099ec:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80099f0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80099f4:	d206      	bcs.n	8009a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80099f6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80099fa:	bf2a      	itet	cs
 80099fc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009a00:	6008      	strcc	r0, [r1, #0]
 8009a02:	600b      	strcs	r3, [r1, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	3001      	adds	r0, #1
 8009a08:	d501      	bpl.n	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009a0a:	f7ff ffd1 	bl	80099b0 <_ZSt17__throw_bad_allocv>
 8009a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009a12:	f000 b860 	b.w	8009ad6 <_Znwj>
 8009a16:	bf00      	nop
 8009a18:	0800f538 	.word	0x0800f538

08009a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009a1c:	f850 3b08 	ldr.w	r3, [r0], #8
 8009a20:	4283      	cmp	r3, r0
 8009a22:	d002      	beq.n	8009a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 b854 	b.w	8009ad2 <_ZdlPv>
 8009a2a:	4770      	bx	lr

08009a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009a2c:	2a01      	cmp	r2, #1
 8009a2e:	b410      	push	{r4}
 8009a30:	d104      	bne.n	8009a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8009a32:	780a      	ldrb	r2, [r1, #0]
 8009a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a38:	7002      	strb	r2, [r0, #0]
 8009a3a:	4770      	bx	lr
 8009a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a40:	f7ff bfc5 	b.w	80099ce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009a44:	b508      	push	{r3, lr}
 8009a46:	1a52      	subs	r2, r2, r1
 8009a48:	f7ff fff0 	bl	8009a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a4c:	bd08      	pop	{r3, pc}

08009a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	f7ff ffe3 	bl	8009a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009a56:	4620      	mov	r0, r4
 8009a58:	bd10      	pop	{r4, pc}

08009a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	4770      	bx	lr
	...

08009a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	4616      	mov	r6, r2
 8009a66:	460d      	mov	r5, r1
 8009a68:	b919      	cbnz	r1, 8009a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009a6a:	b112      	cbz	r2, 8009a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009a6c:	480d      	ldr	r0, [pc, #52]	; (8009aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009a6e:	f7ff ffa2 	bl	80099b6 <_ZSt19__throw_logic_errorPKc>
 8009a72:	1b73      	subs	r3, r6, r5
 8009a74:	2b0f      	cmp	r3, #15
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	d907      	bls.n	8009a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	a901      	add	r1, sp, #4
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7ff ffaa 	bl	80099d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	6020      	str	r0, [r4, #0]
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	f7ff ffd8 	bl	8009a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	54d1      	strb	r1, [r2, r3]
 8009a9e:	b002      	add	sp, #8
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0800f550 	.word	0x0800f550

08009aa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	f100 0308 	add.w	r3, r0, #8
 8009aae:	4604      	mov	r4, r0
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	b159      	cbz	r1, 8009ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	f7f6 fc0c 	bl	80002d4 <strlen>
 8009abc:	182a      	adds	r2, r5, r0
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f04f 0300 	mov.w	r3, #0
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7ff ffcb 	bl	8009a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009aca:	4620      	mov	r0, r4
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	2201      	movs	r2, #1
 8009ad0:	e7f5      	b.n	8009abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08009ad2 <_ZdlPv>:
 8009ad2:	f000 ba39 	b.w	8009f48 <free>

08009ad6 <_Znwj>:
 8009ad6:	2801      	cmp	r0, #1
 8009ad8:	bf38      	it	cc
 8009ada:	2001      	movcc	r0, #1
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fa29 	bl	8009f38 <malloc>
 8009ae6:	b930      	cbnz	r0, 8009af6 <_Znwj+0x20>
 8009ae8:	f000 f806 	bl	8009af8 <_ZSt15get_new_handlerv>
 8009aec:	b908      	cbnz	r0, 8009af2 <_Znwj+0x1c>
 8009aee:	f000 f811 	bl	8009b14 <abort>
 8009af2:	4780      	blx	r0
 8009af4:	e7f4      	b.n	8009ae0 <_Znwj+0xa>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <_ZSt15get_new_handlerv>:
 8009af8:	4b02      	ldr	r3, [pc, #8]	; (8009b04 <_ZSt15get_new_handlerv+0xc>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	f3bf 8f5b 	dmb	ish
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	200008dc 	.word	0x200008dc

08009b08 <nanf>:
 8009b08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b10 <nanf+0x8>
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	7fc00000 	.word	0x7fc00000

08009b14 <abort>:
 8009b14:	b508      	push	{r3, lr}
 8009b16:	2006      	movs	r0, #6
 8009b18:	f001 fbee 	bl	800b2f8 <raise>
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f7f9 feb4 	bl	800388a <_exit>
	...

08009b24 <__errno>:
 8009b24:	4b01      	ldr	r3, [pc, #4]	; (8009b2c <__errno+0x8>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	2000002c 	.word	0x2000002c

08009b30 <__sflush_r>:
 8009b30:	898a      	ldrh	r2, [r1, #12]
 8009b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	4605      	mov	r5, r0
 8009b38:	0710      	lsls	r0, r2, #28
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	d458      	bmi.n	8009bf0 <__sflush_r+0xc0>
 8009b3e:	684b      	ldr	r3, [r1, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc05      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dc02      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	d0f9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b5c:	682f      	ldr	r7, [r5, #0]
 8009b5e:	602b      	str	r3, [r5, #0]
 8009b60:	d032      	beq.n	8009bc8 <__sflush_r+0x98>
 8009b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	075a      	lsls	r2, r3, #29
 8009b68:	d505      	bpl.n	8009b76 <__sflush_r+0x46>
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	1ac0      	subs	r0, r0, r3
 8009b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b70:	b10b      	cbz	r3, 8009b76 <__sflush_r+0x46>
 8009b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b74:	1ac0      	subs	r0, r0, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b7c:	6a21      	ldr	r1, [r4, #32]
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b0      	blx	r6
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	d106      	bne.n	8009b96 <__sflush_r+0x66>
 8009b88:	6829      	ldr	r1, [r5, #0]
 8009b8a:	291d      	cmp	r1, #29
 8009b8c:	d82c      	bhi.n	8009be8 <__sflush_r+0xb8>
 8009b8e:	4a2a      	ldr	r2, [pc, #168]	; (8009c38 <__sflush_r+0x108>)
 8009b90:	40ca      	lsrs	r2, r1
 8009b92:	07d6      	lsls	r6, r2, #31
 8009b94:	d528      	bpl.n	8009be8 <__sflush_r+0xb8>
 8009b96:	2200      	movs	r2, #0
 8009b98:	6062      	str	r2, [r4, #4]
 8009b9a:	04d9      	lsls	r1, r3, #19
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	d504      	bpl.n	8009bac <__sflush_r+0x7c>
 8009ba2:	1c42      	adds	r2, r0, #1
 8009ba4:	d101      	bne.n	8009baa <__sflush_r+0x7a>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	b903      	cbnz	r3, 8009bac <__sflush_r+0x7c>
 8009baa:	6560      	str	r0, [r4, #84]	; 0x54
 8009bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	2900      	cmp	r1, #0
 8009bb2:	d0ca      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	d002      	beq.n	8009bc2 <__sflush_r+0x92>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f000 fa0b 	bl	8009fd8 <_free_r>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8009bc6:	e7c1      	b.n	8009b4c <__sflush_r+0x1c>
 8009bc8:	6a21      	ldr	r1, [r4, #32]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b0      	blx	r6
 8009bd0:	1c41      	adds	r1, r0, #1
 8009bd2:	d1c7      	bne.n	8009b64 <__sflush_r+0x34>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0c4      	beq.n	8009b64 <__sflush_r+0x34>
 8009bda:	2b1d      	cmp	r3, #29
 8009bdc:	d001      	beq.n	8009be2 <__sflush_r+0xb2>
 8009bde:	2b16      	cmp	r3, #22
 8009be0:	d101      	bne.n	8009be6 <__sflush_r+0xb6>
 8009be2:	602f      	str	r7, [r5, #0]
 8009be4:	e7b1      	b.n	8009b4a <__sflush_r+0x1a>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	e7ad      	b.n	8009b4c <__sflush_r+0x1c>
 8009bf0:	690f      	ldr	r7, [r1, #16]
 8009bf2:	2f00      	cmp	r7, #0
 8009bf4:	d0a9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bf6:	0793      	lsls	r3, r2, #30
 8009bf8:	680e      	ldr	r6, [r1, #0]
 8009bfa:	bf08      	it	eq
 8009bfc:	694b      	ldreq	r3, [r1, #20]
 8009bfe:	600f      	str	r7, [r1, #0]
 8009c00:	bf18      	it	ne
 8009c02:	2300      	movne	r3, #0
 8009c04:	eba6 0807 	sub.w	r8, r6, r7
 8009c08:	608b      	str	r3, [r1, #8]
 8009c0a:	f1b8 0f00 	cmp.w	r8, #0
 8009c0e:	dd9c      	ble.n	8009b4a <__sflush_r+0x1a>
 8009c10:	6a21      	ldr	r1, [r4, #32]
 8009c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c14:	4643      	mov	r3, r8
 8009c16:	463a      	mov	r2, r7
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b0      	blx	r6
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	dc06      	bgt.n	8009c2e <__sflush_r+0xfe>
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c2c:	e78e      	b.n	8009b4c <__sflush_r+0x1c>
 8009c2e:	4407      	add	r7, r0
 8009c30:	eba8 0800 	sub.w	r8, r8, r0
 8009c34:	e7e9      	b.n	8009c0a <__sflush_r+0xda>
 8009c36:	bf00      	nop
 8009c38:	20400001 	.word	0x20400001

08009c3c <_fflush_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b913      	cbnz	r3, 8009c4c <_fflush_r+0x10>
 8009c46:	2500      	movs	r5, #0
 8009c48:	4628      	mov	r0, r5
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	b118      	cbz	r0, 8009c56 <_fflush_r+0x1a>
 8009c4e:	6983      	ldr	r3, [r0, #24]
 8009c50:	b90b      	cbnz	r3, 8009c56 <_fflush_r+0x1a>
 8009c52:	f000 f899 	bl	8009d88 <__sinit>
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <_fflush_r+0x6c>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d11b      	bne.n	8009c94 <_fflush_r+0x58>
 8009c5c:	686c      	ldr	r4, [r5, #4]
 8009c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <_fflush_r+0xa>
 8009c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c68:	07d0      	lsls	r0, r2, #31
 8009c6a:	d404      	bmi.n	8009c76 <_fflush_r+0x3a>
 8009c6c:	0599      	lsls	r1, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_fflush_r+0x3a>
 8009c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c72:	f000 f95e 	bl	8009f32 <__retarget_lock_acquire_recursive>
 8009c76:	4628      	mov	r0, r5
 8009c78:	4621      	mov	r1, r4
 8009c7a:	f7ff ff59 	bl	8009b30 <__sflush_r>
 8009c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c80:	07da      	lsls	r2, r3, #31
 8009c82:	4605      	mov	r5, r0
 8009c84:	d4e0      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	059b      	lsls	r3, r3, #22
 8009c8a:	d4dd      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8e:	f000 f951 	bl	8009f34 <__retarget_lock_release_recursive>
 8009c92:	e7d9      	b.n	8009c48 <_fflush_r+0xc>
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <_fflush_r+0x70>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d101      	bne.n	8009c9e <_fflush_r+0x62>
 8009c9a:	68ac      	ldr	r4, [r5, #8]
 8009c9c:	e7df      	b.n	8009c5e <_fflush_r+0x22>
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <_fflush_r+0x74>)
 8009ca0:	429c      	cmp	r4, r3
 8009ca2:	bf08      	it	eq
 8009ca4:	68ec      	ldreq	r4, [r5, #12]
 8009ca6:	e7da      	b.n	8009c5e <_fflush_r+0x22>
 8009ca8:	0800f59c 	.word	0x0800f59c
 8009cac:	0800f5bc 	.word	0x0800f5bc
 8009cb0:	0800f57c 	.word	0x0800f57c

08009cb4 <fflush>:
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	b920      	cbnz	r0, 8009cc2 <fflush+0xe>
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <fflush+0x18>)
 8009cba:	4905      	ldr	r1, [pc, #20]	; (8009cd0 <fflush+0x1c>)
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f000 b8f3 	b.w	8009ea8 <_fwalk_reent>
 8009cc2:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <fflush+0x20>)
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f7ff bfb9 	b.w	8009c3c <_fflush_r>
 8009cca:	bf00      	nop
 8009ccc:	0800f5dc 	.word	0x0800f5dc
 8009cd0:	08009c3d 	.word	0x08009c3d
 8009cd4:	2000002c 	.word	0x2000002c

08009cd8 <std>:
 8009cd8:	2300      	movs	r3, #0
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	e9c0 3300 	strd	r3, r3, [r0]
 8009ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ce6:	6083      	str	r3, [r0, #8]
 8009ce8:	8181      	strh	r1, [r0, #12]
 8009cea:	6643      	str	r3, [r0, #100]	; 0x64
 8009cec:	81c2      	strh	r2, [r0, #14]
 8009cee:	6183      	str	r3, [r0, #24]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	305c      	adds	r0, #92	; 0x5c
 8009cf6:	f000 f967 	bl	8009fc8 <memset>
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <std+0x38>)
 8009cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8009cfe:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <std+0x3c>)
 8009d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d02:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <std+0x40>)
 8009d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d06:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <std+0x44>)
 8009d08:	6224      	str	r4, [r4, #32]
 8009d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	bf00      	nop
 8009d10:	0800b371 	.word	0x0800b371
 8009d14:	0800b393 	.word	0x0800b393
 8009d18:	0800b3cb 	.word	0x0800b3cb
 8009d1c:	0800b3ef 	.word	0x0800b3ef

08009d20 <_cleanup_r>:
 8009d20:	4901      	ldr	r1, [pc, #4]	; (8009d28 <_cleanup_r+0x8>)
 8009d22:	f000 b8c1 	b.w	8009ea8 <_fwalk_reent>
 8009d26:	bf00      	nop
 8009d28:	08009c3d 	.word	0x08009c3d

08009d2c <__sfmoreglue>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	2268      	movs	r2, #104	; 0x68
 8009d30:	1e4d      	subs	r5, r1, #1
 8009d32:	4355      	muls	r5, r2
 8009d34:	460e      	mov	r6, r1
 8009d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d3a:	f000 f9b9 	bl	800a0b0 <_malloc_r>
 8009d3e:	4604      	mov	r4, r0
 8009d40:	b140      	cbz	r0, 8009d54 <__sfmoreglue+0x28>
 8009d42:	2100      	movs	r1, #0
 8009d44:	e9c0 1600 	strd	r1, r6, [r0]
 8009d48:	300c      	adds	r0, #12
 8009d4a:	60a0      	str	r0, [r4, #8]
 8009d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d50:	f000 f93a 	bl	8009fc8 <memset>
 8009d54:	4620      	mov	r0, r4
 8009d56:	bd70      	pop	{r4, r5, r6, pc}

08009d58 <__sfp_lock_acquire>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__sfp_lock_acquire+0x8>)
 8009d5a:	f000 b8ea 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 8009d5e:	bf00      	nop
 8009d60:	200008e1 	.word	0x200008e1

08009d64 <__sfp_lock_release>:
 8009d64:	4801      	ldr	r0, [pc, #4]	; (8009d6c <__sfp_lock_release+0x8>)
 8009d66:	f000 b8e5 	b.w	8009f34 <__retarget_lock_release_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	200008e1 	.word	0x200008e1

08009d70 <__sinit_lock_acquire>:
 8009d70:	4801      	ldr	r0, [pc, #4]	; (8009d78 <__sinit_lock_acquire+0x8>)
 8009d72:	f000 b8de 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 8009d76:	bf00      	nop
 8009d78:	200008e2 	.word	0x200008e2

08009d7c <__sinit_lock_release>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__sinit_lock_release+0x8>)
 8009d7e:	f000 b8d9 	b.w	8009f34 <__retarget_lock_release_recursive>
 8009d82:	bf00      	nop
 8009d84:	200008e2 	.word	0x200008e2

08009d88 <__sinit>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	f7ff fff0 	bl	8009d70 <__sinit_lock_acquire>
 8009d90:	69a3      	ldr	r3, [r4, #24]
 8009d92:	b11b      	cbz	r3, 8009d9c <__sinit+0x14>
 8009d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d98:	f7ff bff0 	b.w	8009d7c <__sinit_lock_release>
 8009d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009da0:	6523      	str	r3, [r4, #80]	; 0x50
 8009da2:	4b13      	ldr	r3, [pc, #76]	; (8009df0 <__sinit+0x68>)
 8009da4:	4a13      	ldr	r2, [pc, #76]	; (8009df4 <__sinit+0x6c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	bf04      	itt	eq
 8009dae:	2301      	moveq	r3, #1
 8009db0:	61a3      	streq	r3, [r4, #24]
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f820 	bl	8009df8 <__sfp>
 8009db8:	6060      	str	r0, [r4, #4]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 f81c 	bl	8009df8 <__sfp>
 8009dc0:	60a0      	str	r0, [r4, #8]
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 f818 	bl	8009df8 <__sfp>
 8009dc8:	2200      	movs	r2, #0
 8009dca:	60e0      	str	r0, [r4, #12]
 8009dcc:	2104      	movs	r1, #4
 8009dce:	6860      	ldr	r0, [r4, #4]
 8009dd0:	f7ff ff82 	bl	8009cd8 <std>
 8009dd4:	68a0      	ldr	r0, [r4, #8]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	2109      	movs	r1, #9
 8009dda:	f7ff ff7d 	bl	8009cd8 <std>
 8009dde:	68e0      	ldr	r0, [r4, #12]
 8009de0:	2202      	movs	r2, #2
 8009de2:	2112      	movs	r1, #18
 8009de4:	f7ff ff78 	bl	8009cd8 <std>
 8009de8:	2301      	movs	r3, #1
 8009dea:	61a3      	str	r3, [r4, #24]
 8009dec:	e7d2      	b.n	8009d94 <__sinit+0xc>
 8009dee:	bf00      	nop
 8009df0:	0800f5dc 	.word	0x0800f5dc
 8009df4:	08009d21 	.word	0x08009d21

08009df8 <__sfp>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	f7ff ffac 	bl	8009d58 <__sfp_lock_acquire>
 8009e00:	4b1e      	ldr	r3, [pc, #120]	; (8009e7c <__sfp+0x84>)
 8009e02:	681e      	ldr	r6, [r3, #0]
 8009e04:	69b3      	ldr	r3, [r6, #24]
 8009e06:	b913      	cbnz	r3, 8009e0e <__sfp+0x16>
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffbd 	bl	8009d88 <__sinit>
 8009e0e:	3648      	adds	r6, #72	; 0x48
 8009e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	d503      	bpl.n	8009e20 <__sfp+0x28>
 8009e18:	6833      	ldr	r3, [r6, #0]
 8009e1a:	b30b      	cbz	r3, 8009e60 <__sfp+0x68>
 8009e1c:	6836      	ldr	r6, [r6, #0]
 8009e1e:	e7f7      	b.n	8009e10 <__sfp+0x18>
 8009e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e24:	b9d5      	cbnz	r5, 8009e5c <__sfp+0x64>
 8009e26:	4b16      	ldr	r3, [pc, #88]	; (8009e80 <__sfp+0x88>)
 8009e28:	60e3      	str	r3, [r4, #12]
 8009e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8009e30:	f000 f87e 	bl	8009f30 <__retarget_lock_init_recursive>
 8009e34:	f7ff ff96 	bl	8009d64 <__sfp_lock_release>
 8009e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e40:	6025      	str	r5, [r4, #0]
 8009e42:	61a5      	str	r5, [r4, #24]
 8009e44:	2208      	movs	r2, #8
 8009e46:	4629      	mov	r1, r5
 8009e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e4c:	f000 f8bc 	bl	8009fc8 <memset>
 8009e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e58:	4620      	mov	r0, r4
 8009e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5c:	3468      	adds	r4, #104	; 0x68
 8009e5e:	e7d9      	b.n	8009e14 <__sfp+0x1c>
 8009e60:	2104      	movs	r1, #4
 8009e62:	4638      	mov	r0, r7
 8009e64:	f7ff ff62 	bl	8009d2c <__sfmoreglue>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	6030      	str	r0, [r6, #0]
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d1d5      	bne.n	8009e1c <__sfp+0x24>
 8009e70:	f7ff ff78 	bl	8009d64 <__sfp_lock_release>
 8009e74:	230c      	movs	r3, #12
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	e7ee      	b.n	8009e58 <__sfp+0x60>
 8009e7a:	bf00      	nop
 8009e7c:	0800f5dc 	.word	0x0800f5dc
 8009e80:	ffff0001 	.word	0xffff0001

08009e84 <fiprintf>:
 8009e84:	b40e      	push	{r1, r2, r3}
 8009e86:	b503      	push	{r0, r1, lr}
 8009e88:	4601      	mov	r1, r0
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <fiprintf+0x20>)
 8009e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e92:	6800      	ldr	r0, [r0, #0]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f000 f9a9 	bl	800a1ec <_vfiprintf_r>
 8009e9a:	b002      	add	sp, #8
 8009e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea0:	b003      	add	sp, #12
 8009ea2:	4770      	bx	lr
 8009ea4:	2000002c 	.word	0x2000002c

08009ea8 <_fwalk_reent>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	4606      	mov	r6, r0
 8009eae:	4688      	mov	r8, r1
 8009eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009eb4:	2700      	movs	r7, #0
 8009eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eba:	f1b9 0901 	subs.w	r9, r9, #1
 8009ebe:	d505      	bpl.n	8009ecc <_fwalk_reent+0x24>
 8009ec0:	6824      	ldr	r4, [r4, #0]
 8009ec2:	2c00      	cmp	r4, #0
 8009ec4:	d1f7      	bne.n	8009eb6 <_fwalk_reent+0xe>
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ecc:	89ab      	ldrh	r3, [r5, #12]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d907      	bls.n	8009ee2 <_fwalk_reent+0x3a>
 8009ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	d003      	beq.n	8009ee2 <_fwalk_reent+0x3a>
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	47c0      	blx	r8
 8009ee0:	4307      	orrs	r7, r0
 8009ee2:	3568      	adds	r5, #104	; 0x68
 8009ee4:	e7e9      	b.n	8009eba <_fwalk_reent+0x12>
	...

08009ee8 <__libc_init_array>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4d0d      	ldr	r5, [pc, #52]	; (8009f20 <__libc_init_array+0x38>)
 8009eec:	4c0d      	ldr	r4, [pc, #52]	; (8009f24 <__libc_init_array+0x3c>)
 8009eee:	1b64      	subs	r4, r4, r5
 8009ef0:	10a4      	asrs	r4, r4, #2
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	42a6      	cmp	r6, r4
 8009ef6:	d109      	bne.n	8009f0c <__libc_init_array+0x24>
 8009ef8:	4d0b      	ldr	r5, [pc, #44]	; (8009f28 <__libc_init_array+0x40>)
 8009efa:	4c0c      	ldr	r4, [pc, #48]	; (8009f2c <__libc_init_array+0x44>)
 8009efc:	f004 fc44 	bl	800e788 <_init>
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	2600      	movs	r6, #0
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	d105      	bne.n	8009f16 <__libc_init_array+0x2e>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f10:	4798      	blx	r3
 8009f12:	3601      	adds	r6, #1
 8009f14:	e7ee      	b.n	8009ef4 <__libc_init_array+0xc>
 8009f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1a:	4798      	blx	r3
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	e7f2      	b.n	8009f06 <__libc_init_array+0x1e>
 8009f20:	0800fa84 	.word	0x0800fa84
 8009f24:	0800fa84 	.word	0x0800fa84
 8009f28:	0800fa84 	.word	0x0800fa84
 8009f2c:	0800fa88 	.word	0x0800fa88

08009f30 <__retarget_lock_init_recursive>:
 8009f30:	4770      	bx	lr

08009f32 <__retarget_lock_acquire_recursive>:
 8009f32:	4770      	bx	lr

08009f34 <__retarget_lock_release_recursive>:
 8009f34:	4770      	bx	lr
	...

08009f38 <malloc>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	; (8009f44 <malloc+0xc>)
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	f000 b8b7 	b.w	800a0b0 <_malloc_r>
 8009f42:	bf00      	nop
 8009f44:	2000002c 	.word	0x2000002c

08009f48 <free>:
 8009f48:	4b02      	ldr	r3, [pc, #8]	; (8009f54 <free+0xc>)
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	6818      	ldr	r0, [r3, #0]
 8009f4e:	f000 b843 	b.w	8009fd8 <_free_r>
 8009f52:	bf00      	nop
 8009f54:	2000002c 	.word	0x2000002c

08009f58 <memcmp>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	3901      	subs	r1, #1
 8009f5c:	4402      	add	r2, r0
 8009f5e:	4290      	cmp	r0, r2
 8009f60:	d101      	bne.n	8009f66 <memcmp+0xe>
 8009f62:	2000      	movs	r0, #0
 8009f64:	e005      	b.n	8009f72 <memcmp+0x1a>
 8009f66:	7803      	ldrb	r3, [r0, #0]
 8009f68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d001      	beq.n	8009f74 <memcmp+0x1c>
 8009f70:	1b18      	subs	r0, r3, r4
 8009f72:	bd10      	pop	{r4, pc}
 8009f74:	3001      	adds	r0, #1
 8009f76:	e7f2      	b.n	8009f5e <memcmp+0x6>

08009f78 <memcpy>:
 8009f78:	440a      	add	r2, r1
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f80:	d100      	bne.n	8009f84 <memcpy+0xc>
 8009f82:	4770      	bx	lr
 8009f84:	b510      	push	{r4, lr}
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f8e:	4291      	cmp	r1, r2
 8009f90:	d1f9      	bne.n	8009f86 <memcpy+0xe>
 8009f92:	bd10      	pop	{r4, pc}

08009f94 <memmove>:
 8009f94:	4288      	cmp	r0, r1
 8009f96:	b510      	push	{r4, lr}
 8009f98:	eb01 0402 	add.w	r4, r1, r2
 8009f9c:	d902      	bls.n	8009fa4 <memmove+0x10>
 8009f9e:	4284      	cmp	r4, r0
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	d807      	bhi.n	8009fb4 <memmove+0x20>
 8009fa4:	1e43      	subs	r3, r0, #1
 8009fa6:	42a1      	cmp	r1, r4
 8009fa8:	d008      	beq.n	8009fbc <memmove+0x28>
 8009faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fb2:	e7f8      	b.n	8009fa6 <memmove+0x12>
 8009fb4:	4402      	add	r2, r0
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	428a      	cmp	r2, r1
 8009fba:	d100      	bne.n	8009fbe <memmove+0x2a>
 8009fbc:	bd10      	pop	{r4, pc}
 8009fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fc6:	e7f7      	b.n	8009fb8 <memmove+0x24>

08009fc8 <memset>:
 8009fc8:	4402      	add	r2, r0
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d100      	bne.n	8009fd2 <memset+0xa>
 8009fd0:	4770      	bx	lr
 8009fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd6:	e7f9      	b.n	8009fcc <memset+0x4>

08009fd8 <_free_r>:
 8009fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fda:	2900      	cmp	r1, #0
 8009fdc:	d044      	beq.n	800a068 <_free_r+0x90>
 8009fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe2:	9001      	str	r0, [sp, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8009fea:	bfb8      	it	lt
 8009fec:	18e4      	addlt	r4, r4, r3
 8009fee:	f003 fcaf 	bl	800d950 <__malloc_lock>
 8009ff2:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <_free_r+0x94>)
 8009ff4:	9801      	ldr	r0, [sp, #4]
 8009ff6:	6813      	ldr	r3, [r2, #0]
 8009ff8:	b933      	cbnz	r3, 800a008 <_free_r+0x30>
 8009ffa:	6063      	str	r3, [r4, #4]
 8009ffc:	6014      	str	r4, [r2, #0]
 8009ffe:	b003      	add	sp, #12
 800a000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a004:	f003 bcaa 	b.w	800d95c <__malloc_unlock>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d908      	bls.n	800a01e <_free_r+0x46>
 800a00c:	6825      	ldr	r5, [r4, #0]
 800a00e:	1961      	adds	r1, r4, r5
 800a010:	428b      	cmp	r3, r1
 800a012:	bf01      	itttt	eq
 800a014:	6819      	ldreq	r1, [r3, #0]
 800a016:	685b      	ldreq	r3, [r3, #4]
 800a018:	1949      	addeq	r1, r1, r5
 800a01a:	6021      	streq	r1, [r4, #0]
 800a01c:	e7ed      	b.n	8009ffa <_free_r+0x22>
 800a01e:	461a      	mov	r2, r3
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	b10b      	cbz	r3, 800a028 <_free_r+0x50>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d9fa      	bls.n	800a01e <_free_r+0x46>
 800a028:	6811      	ldr	r1, [r2, #0]
 800a02a:	1855      	adds	r5, r2, r1
 800a02c:	42a5      	cmp	r5, r4
 800a02e:	d10b      	bne.n	800a048 <_free_r+0x70>
 800a030:	6824      	ldr	r4, [r4, #0]
 800a032:	4421      	add	r1, r4
 800a034:	1854      	adds	r4, r2, r1
 800a036:	42a3      	cmp	r3, r4
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	d1e0      	bne.n	8009ffe <_free_r+0x26>
 800a03c:	681c      	ldr	r4, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	6053      	str	r3, [r2, #4]
 800a042:	4421      	add	r1, r4
 800a044:	6011      	str	r1, [r2, #0]
 800a046:	e7da      	b.n	8009ffe <_free_r+0x26>
 800a048:	d902      	bls.n	800a050 <_free_r+0x78>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	e7d6      	b.n	8009ffe <_free_r+0x26>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf04      	itt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	bf04      	itt	eq
 800a060:	1949      	addeq	r1, r1, r5
 800a062:	6021      	streq	r1, [r4, #0]
 800a064:	6054      	str	r4, [r2, #4]
 800a066:	e7ca      	b.n	8009ffe <_free_r+0x26>
 800a068:	b003      	add	sp, #12
 800a06a:	bd30      	pop	{r4, r5, pc}
 800a06c:	200008e4 	.word	0x200008e4

0800a070 <sbrk_aligned>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	4e0e      	ldr	r6, [pc, #56]	; (800a0ac <sbrk_aligned+0x3c>)
 800a074:	460c      	mov	r4, r1
 800a076:	6831      	ldr	r1, [r6, #0]
 800a078:	4605      	mov	r5, r0
 800a07a:	b911      	cbnz	r1, 800a082 <sbrk_aligned+0x12>
 800a07c:	f001 f904 	bl	800b288 <_sbrk_r>
 800a080:	6030      	str	r0, [r6, #0]
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f001 f8ff 	bl	800b288 <_sbrk_r>
 800a08a:	1c43      	adds	r3, r0, #1
 800a08c:	d00a      	beq.n	800a0a4 <sbrk_aligned+0x34>
 800a08e:	1cc4      	adds	r4, r0, #3
 800a090:	f024 0403 	bic.w	r4, r4, #3
 800a094:	42a0      	cmp	r0, r4
 800a096:	d007      	beq.n	800a0a8 <sbrk_aligned+0x38>
 800a098:	1a21      	subs	r1, r4, r0
 800a09a:	4628      	mov	r0, r5
 800a09c:	f001 f8f4 	bl	800b288 <_sbrk_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d101      	bne.n	800a0a8 <sbrk_aligned+0x38>
 800a0a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	200008e8 	.word	0x200008e8

0800a0b0 <_malloc_r>:
 800a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b4:	1ccd      	adds	r5, r1, #3
 800a0b6:	f025 0503 	bic.w	r5, r5, #3
 800a0ba:	3508      	adds	r5, #8
 800a0bc:	2d0c      	cmp	r5, #12
 800a0be:	bf38      	it	cc
 800a0c0:	250c      	movcc	r5, #12
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	db01      	blt.n	800a0cc <_malloc_r+0x1c>
 800a0c8:	42a9      	cmp	r1, r5
 800a0ca:	d905      	bls.n	800a0d8 <_malloc_r+0x28>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d8:	4e2e      	ldr	r6, [pc, #184]	; (800a194 <_malloc_r+0xe4>)
 800a0da:	f003 fc39 	bl	800d950 <__malloc_lock>
 800a0de:	6833      	ldr	r3, [r6, #0]
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	bb34      	cbnz	r4, 800a132 <_malloc_r+0x82>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7ff ffc2 	bl	800a070 <sbrk_aligned>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	d14d      	bne.n	800a18e <_malloc_r+0xde>
 800a0f2:	6834      	ldr	r4, [r6, #0]
 800a0f4:	4626      	mov	r6, r4
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d140      	bne.n	800a17c <_malloc_r+0xcc>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4638      	mov	r0, r7
 800a100:	eb04 0803 	add.w	r8, r4, r3
 800a104:	f001 f8c0 	bl	800b288 <_sbrk_r>
 800a108:	4580      	cmp	r8, r0
 800a10a:	d13a      	bne.n	800a182 <_malloc_r+0xd2>
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	3503      	adds	r5, #3
 800a110:	1a6d      	subs	r5, r5, r1
 800a112:	f025 0503 	bic.w	r5, r5, #3
 800a116:	3508      	adds	r5, #8
 800a118:	2d0c      	cmp	r5, #12
 800a11a:	bf38      	it	cc
 800a11c:	250c      	movcc	r5, #12
 800a11e:	4629      	mov	r1, r5
 800a120:	4638      	mov	r0, r7
 800a122:	f7ff ffa5 	bl	800a070 <sbrk_aligned>
 800a126:	3001      	adds	r0, #1
 800a128:	d02b      	beq.n	800a182 <_malloc_r+0xd2>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	442b      	add	r3, r5
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	e00e      	b.n	800a150 <_malloc_r+0xa0>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	1b52      	subs	r2, r2, r5
 800a136:	d41e      	bmi.n	800a176 <_malloc_r+0xc6>
 800a138:	2a0b      	cmp	r2, #11
 800a13a:	d916      	bls.n	800a16a <_malloc_r+0xba>
 800a13c:	1961      	adds	r1, r4, r5
 800a13e:	42a3      	cmp	r3, r4
 800a140:	6025      	str	r5, [r4, #0]
 800a142:	bf18      	it	ne
 800a144:	6059      	strne	r1, [r3, #4]
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	bf08      	it	eq
 800a14a:	6031      	streq	r1, [r6, #0]
 800a14c:	5162      	str	r2, [r4, r5]
 800a14e:	604b      	str	r3, [r1, #4]
 800a150:	4638      	mov	r0, r7
 800a152:	f104 060b 	add.w	r6, r4, #11
 800a156:	f003 fc01 	bl	800d95c <__malloc_unlock>
 800a15a:	f026 0607 	bic.w	r6, r6, #7
 800a15e:	1d23      	adds	r3, r4, #4
 800a160:	1af2      	subs	r2, r6, r3
 800a162:	d0b6      	beq.n	800a0d2 <_malloc_r+0x22>
 800a164:	1b9b      	subs	r3, r3, r6
 800a166:	50a3      	str	r3, [r4, r2]
 800a168:	e7b3      	b.n	800a0d2 <_malloc_r+0x22>
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	bf0c      	ite	eq
 800a170:	6032      	streq	r2, [r6, #0]
 800a172:	605a      	strne	r2, [r3, #4]
 800a174:	e7ec      	b.n	800a150 <_malloc_r+0xa0>
 800a176:	4623      	mov	r3, r4
 800a178:	6864      	ldr	r4, [r4, #4]
 800a17a:	e7b2      	b.n	800a0e2 <_malloc_r+0x32>
 800a17c:	4634      	mov	r4, r6
 800a17e:	6876      	ldr	r6, [r6, #4]
 800a180:	e7b9      	b.n	800a0f6 <_malloc_r+0x46>
 800a182:	230c      	movs	r3, #12
 800a184:	603b      	str	r3, [r7, #0]
 800a186:	4638      	mov	r0, r7
 800a188:	f003 fbe8 	bl	800d95c <__malloc_unlock>
 800a18c:	e7a1      	b.n	800a0d2 <_malloc_r+0x22>
 800a18e:	6025      	str	r5, [r4, #0]
 800a190:	e7de      	b.n	800a150 <_malloc_r+0xa0>
 800a192:	bf00      	nop
 800a194:	200008e4 	.word	0x200008e4

0800a198 <__sfputc_r>:
 800a198:	6893      	ldr	r3, [r2, #8]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	b410      	push	{r4}
 800a1a0:	6093      	str	r3, [r2, #8]
 800a1a2:	da08      	bge.n	800a1b6 <__sfputc_r+0x1e>
 800a1a4:	6994      	ldr	r4, [r2, #24]
 800a1a6:	42a3      	cmp	r3, r4
 800a1a8:	db01      	blt.n	800a1ae <__sfputc_r+0x16>
 800a1aa:	290a      	cmp	r1, #10
 800a1ac:	d103      	bne.n	800a1b6 <__sfputc_r+0x1e>
 800a1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b2:	f002 b853 	b.w	800c25c <__swbuf_r>
 800a1b6:	6813      	ldr	r3, [r2, #0]
 800a1b8:	1c58      	adds	r0, r3, #1
 800a1ba:	6010      	str	r0, [r2, #0]
 800a1bc:	7019      	strb	r1, [r3, #0]
 800a1be:	4608      	mov	r0, r1
 800a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <__sfputs_r>:
 800a1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	460f      	mov	r7, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	18d5      	adds	r5, r2, r3
 800a1d0:	42ac      	cmp	r4, r5
 800a1d2:	d101      	bne.n	800a1d8 <__sfputs_r+0x12>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	e007      	b.n	800a1e8 <__sfputs_r+0x22>
 800a1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1dc:	463a      	mov	r2, r7
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff ffda 	bl	800a198 <__sfputc_r>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d1f3      	bne.n	800a1d0 <__sfputs_r+0xa>
 800a1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1ec <_vfiprintf_r>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	b09d      	sub	sp, #116	; 0x74
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	4698      	mov	r8, r3
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	b118      	cbz	r0, 800a204 <_vfiprintf_r+0x18>
 800a1fc:	6983      	ldr	r3, [r0, #24]
 800a1fe:	b90b      	cbnz	r3, 800a204 <_vfiprintf_r+0x18>
 800a200:	f7ff fdc2 	bl	8009d88 <__sinit>
 800a204:	4b89      	ldr	r3, [pc, #548]	; (800a42c <_vfiprintf_r+0x240>)
 800a206:	429d      	cmp	r5, r3
 800a208:	d11b      	bne.n	800a242 <_vfiprintf_r+0x56>
 800a20a:	6875      	ldr	r5, [r6, #4]
 800a20c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d405      	bmi.n	800a21e <_vfiprintf_r+0x32>
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d402      	bmi.n	800a21e <_vfiprintf_r+0x32>
 800a218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21a:	f7ff fe8a 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	071b      	lsls	r3, r3, #28
 800a222:	d501      	bpl.n	800a228 <_vfiprintf_r+0x3c>
 800a224:	692b      	ldr	r3, [r5, #16]
 800a226:	b9eb      	cbnz	r3, 800a264 <_vfiprintf_r+0x78>
 800a228:	4629      	mov	r1, r5
 800a22a:	4630      	mov	r0, r6
 800a22c:	f002 f87a 	bl	800c324 <__swsetup_r>
 800a230:	b1c0      	cbz	r0, 800a264 <_vfiprintf_r+0x78>
 800a232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a234:	07dc      	lsls	r4, r3, #31
 800a236:	d50e      	bpl.n	800a256 <_vfiprintf_r+0x6a>
 800a238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a23c:	b01d      	add	sp, #116	; 0x74
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	4b7b      	ldr	r3, [pc, #492]	; (800a430 <_vfiprintf_r+0x244>)
 800a244:	429d      	cmp	r5, r3
 800a246:	d101      	bne.n	800a24c <_vfiprintf_r+0x60>
 800a248:	68b5      	ldr	r5, [r6, #8]
 800a24a:	e7df      	b.n	800a20c <_vfiprintf_r+0x20>
 800a24c:	4b79      	ldr	r3, [pc, #484]	; (800a434 <_vfiprintf_r+0x248>)
 800a24e:	429d      	cmp	r5, r3
 800a250:	bf08      	it	eq
 800a252:	68f5      	ldreq	r5, [r6, #12]
 800a254:	e7da      	b.n	800a20c <_vfiprintf_r+0x20>
 800a256:	89ab      	ldrh	r3, [r5, #12]
 800a258:	0598      	lsls	r0, r3, #22
 800a25a:	d4ed      	bmi.n	800a238 <_vfiprintf_r+0x4c>
 800a25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25e:	f7ff fe69 	bl	8009f34 <__retarget_lock_release_recursive>
 800a262:	e7e9      	b.n	800a238 <_vfiprintf_r+0x4c>
 800a264:	2300      	movs	r3, #0
 800a266:	9309      	str	r3, [sp, #36]	; 0x24
 800a268:	2320      	movs	r3, #32
 800a26a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a26e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a272:	2330      	movs	r3, #48	; 0x30
 800a274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a438 <_vfiprintf_r+0x24c>
 800a278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a27c:	f04f 0901 	mov.w	r9, #1
 800a280:	4623      	mov	r3, r4
 800a282:	469a      	mov	sl, r3
 800a284:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a288:	b10a      	cbz	r2, 800a28e <_vfiprintf_r+0xa2>
 800a28a:	2a25      	cmp	r2, #37	; 0x25
 800a28c:	d1f9      	bne.n	800a282 <_vfiprintf_r+0x96>
 800a28e:	ebba 0b04 	subs.w	fp, sl, r4
 800a292:	d00b      	beq.n	800a2ac <_vfiprintf_r+0xc0>
 800a294:	465b      	mov	r3, fp
 800a296:	4622      	mov	r2, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff ff93 	bl	800a1c6 <__sfputs_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f000 80aa 	beq.w	800a3fa <_vfiprintf_r+0x20e>
 800a2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a8:	445a      	add	r2, fp
 800a2aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 80a2 	beq.w	800a3fa <_vfiprintf_r+0x20e>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c0:	f10a 0a01 	add.w	sl, sl, #1
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	9307      	str	r3, [sp, #28]
 800a2c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ce:	4654      	mov	r4, sl
 800a2d0:	2205      	movs	r2, #5
 800a2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d6:	4858      	ldr	r0, [pc, #352]	; (800a438 <_vfiprintf_r+0x24c>)
 800a2d8:	f7f5 ffa2 	bl	8000220 <memchr>
 800a2dc:	9a04      	ldr	r2, [sp, #16]
 800a2de:	b9d8      	cbnz	r0, 800a318 <_vfiprintf_r+0x12c>
 800a2e0:	06d1      	lsls	r1, r2, #27
 800a2e2:	bf44      	itt	mi
 800a2e4:	2320      	movmi	r3, #32
 800a2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ea:	0713      	lsls	r3, r2, #28
 800a2ec:	bf44      	itt	mi
 800a2ee:	232b      	movmi	r3, #43	; 0x2b
 800a2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fa:	d015      	beq.n	800a328 <_vfiprintf_r+0x13c>
 800a2fc:	9a07      	ldr	r2, [sp, #28]
 800a2fe:	4654      	mov	r4, sl
 800a300:	2000      	movs	r0, #0
 800a302:	f04f 0c0a 	mov.w	ip, #10
 800a306:	4621      	mov	r1, r4
 800a308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a30c:	3b30      	subs	r3, #48	; 0x30
 800a30e:	2b09      	cmp	r3, #9
 800a310:	d94e      	bls.n	800a3b0 <_vfiprintf_r+0x1c4>
 800a312:	b1b0      	cbz	r0, 800a342 <_vfiprintf_r+0x156>
 800a314:	9207      	str	r2, [sp, #28]
 800a316:	e014      	b.n	800a342 <_vfiprintf_r+0x156>
 800a318:	eba0 0308 	sub.w	r3, r0, r8
 800a31c:	fa09 f303 	lsl.w	r3, r9, r3
 800a320:	4313      	orrs	r3, r2
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	46a2      	mov	sl, r4
 800a326:	e7d2      	b.n	800a2ce <_vfiprintf_r+0xe2>
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	1d19      	adds	r1, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	9103      	str	r1, [sp, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	bfbb      	ittet	lt
 800a334:	425b      	neglt	r3, r3
 800a336:	f042 0202 	orrlt.w	r2, r2, #2
 800a33a:	9307      	strge	r3, [sp, #28]
 800a33c:	9307      	strlt	r3, [sp, #28]
 800a33e:	bfb8      	it	lt
 800a340:	9204      	strlt	r2, [sp, #16]
 800a342:	7823      	ldrb	r3, [r4, #0]
 800a344:	2b2e      	cmp	r3, #46	; 0x2e
 800a346:	d10c      	bne.n	800a362 <_vfiprintf_r+0x176>
 800a348:	7863      	ldrb	r3, [r4, #1]
 800a34a:	2b2a      	cmp	r3, #42	; 0x2a
 800a34c:	d135      	bne.n	800a3ba <_vfiprintf_r+0x1ce>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	1d1a      	adds	r2, r3, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	9203      	str	r2, [sp, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	bfb8      	it	lt
 800a35a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a35e:	3402      	adds	r4, #2
 800a360:	9305      	str	r3, [sp, #20]
 800a362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a448 <_vfiprintf_r+0x25c>
 800a366:	7821      	ldrb	r1, [r4, #0]
 800a368:	2203      	movs	r2, #3
 800a36a:	4650      	mov	r0, sl
 800a36c:	f7f5 ff58 	bl	8000220 <memchr>
 800a370:	b140      	cbz	r0, 800a384 <_vfiprintf_r+0x198>
 800a372:	2340      	movs	r3, #64	; 0x40
 800a374:	eba0 000a 	sub.w	r0, r0, sl
 800a378:	fa03 f000 	lsl.w	r0, r3, r0
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	4303      	orrs	r3, r0
 800a380:	3401      	adds	r4, #1
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	482c      	ldr	r0, [pc, #176]	; (800a43c <_vfiprintf_r+0x250>)
 800a38a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a38e:	2206      	movs	r2, #6
 800a390:	f7f5 ff46 	bl	8000220 <memchr>
 800a394:	2800      	cmp	r0, #0
 800a396:	d03f      	beq.n	800a418 <_vfiprintf_r+0x22c>
 800a398:	4b29      	ldr	r3, [pc, #164]	; (800a440 <_vfiprintf_r+0x254>)
 800a39a:	bb1b      	cbnz	r3, 800a3e4 <_vfiprintf_r+0x1f8>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	3307      	adds	r3, #7
 800a3a0:	f023 0307 	bic.w	r3, r3, #7
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3aa:	443b      	add	r3, r7
 800a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ae:	e767      	b.n	800a280 <_vfiprintf_r+0x94>
 800a3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	e7a5      	b.n	800a306 <_vfiprintf_r+0x11a>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3cc:	3a30      	subs	r2, #48	; 0x30
 800a3ce:	2a09      	cmp	r2, #9
 800a3d0:	d903      	bls.n	800a3da <_vfiprintf_r+0x1ee>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0c5      	beq.n	800a362 <_vfiprintf_r+0x176>
 800a3d6:	9105      	str	r1, [sp, #20]
 800a3d8:	e7c3      	b.n	800a362 <_vfiprintf_r+0x176>
 800a3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3de:	4604      	mov	r4, r0
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e7f0      	b.n	800a3c6 <_vfiprintf_r+0x1da>
 800a3e4:	ab03      	add	r3, sp, #12
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	4b16      	ldr	r3, [pc, #88]	; (800a444 <_vfiprintf_r+0x258>)
 800a3ec:	a904      	add	r1, sp, #16
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f000 f8cc 	bl	800a58c <_printf_float>
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	1c78      	adds	r0, r7, #1
 800a3f8:	d1d6      	bne.n	800a3a8 <_vfiprintf_r+0x1bc>
 800a3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fc:	07d9      	lsls	r1, r3, #31
 800a3fe:	d405      	bmi.n	800a40c <_vfiprintf_r+0x220>
 800a400:	89ab      	ldrh	r3, [r5, #12]
 800a402:	059a      	lsls	r2, r3, #22
 800a404:	d402      	bmi.n	800a40c <_vfiprintf_r+0x220>
 800a406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a408:	f7ff fd94 	bl	8009f34 <__retarget_lock_release_recursive>
 800a40c:	89ab      	ldrh	r3, [r5, #12]
 800a40e:	065b      	lsls	r3, r3, #25
 800a410:	f53f af12 	bmi.w	800a238 <_vfiprintf_r+0x4c>
 800a414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a416:	e711      	b.n	800a23c <_vfiprintf_r+0x50>
 800a418:	ab03      	add	r3, sp, #12
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4b09      	ldr	r3, [pc, #36]	; (800a444 <_vfiprintf_r+0x258>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	4630      	mov	r0, r6
 800a424:	f000 fb56 	bl	800aad4 <_printf_i>
 800a428:	e7e4      	b.n	800a3f4 <_vfiprintf_r+0x208>
 800a42a:	bf00      	nop
 800a42c:	0800f59c 	.word	0x0800f59c
 800a430:	0800f5bc 	.word	0x0800f5bc
 800a434:	0800f57c 	.word	0x0800f57c
 800a438:	0800f5e0 	.word	0x0800f5e0
 800a43c:	0800f5ea 	.word	0x0800f5ea
 800a440:	0800a58d 	.word	0x0800a58d
 800a444:	0800a1c7 	.word	0x0800a1c7
 800a448:	0800f5e6 	.word	0x0800f5e6

0800a44c <__cvt>:
 800a44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	ec55 4b10 	vmov	r4, r5, d0
 800a454:	2d00      	cmp	r5, #0
 800a456:	460e      	mov	r6, r1
 800a458:	4619      	mov	r1, r3
 800a45a:	462b      	mov	r3, r5
 800a45c:	bfbb      	ittet	lt
 800a45e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a462:	461d      	movlt	r5, r3
 800a464:	2300      	movge	r3, #0
 800a466:	232d      	movlt	r3, #45	; 0x2d
 800a468:	700b      	strb	r3, [r1, #0]
 800a46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a470:	4691      	mov	r9, r2
 800a472:	f023 0820 	bic.w	r8, r3, #32
 800a476:	bfbc      	itt	lt
 800a478:	4622      	movlt	r2, r4
 800a47a:	4614      	movlt	r4, r2
 800a47c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a480:	d005      	beq.n	800a48e <__cvt+0x42>
 800a482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a486:	d100      	bne.n	800a48a <__cvt+0x3e>
 800a488:	3601      	adds	r6, #1
 800a48a:	2102      	movs	r1, #2
 800a48c:	e000      	b.n	800a490 <__cvt+0x44>
 800a48e:	2103      	movs	r1, #3
 800a490:	ab03      	add	r3, sp, #12
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	ab02      	add	r3, sp, #8
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	ec45 4b10 	vmov	d0, r4, r5
 800a49c:	4653      	mov	r3, sl
 800a49e:	4632      	mov	r2, r6
 800a4a0:	f002 f86a 	bl	800c578 <_dtoa_r>
 800a4a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	d102      	bne.n	800a4b2 <__cvt+0x66>
 800a4ac:	f019 0f01 	tst.w	r9, #1
 800a4b0:	d022      	beq.n	800a4f8 <__cvt+0xac>
 800a4b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4b6:	eb07 0906 	add.w	r9, r7, r6
 800a4ba:	d110      	bne.n	800a4de <__cvt+0x92>
 800a4bc:	783b      	ldrb	r3, [r7, #0]
 800a4be:	2b30      	cmp	r3, #48	; 0x30
 800a4c0:	d10a      	bne.n	800a4d8 <__cvt+0x8c>
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f6 fb2f 	bl	8000b2c <__aeabi_dcmpeq>
 800a4ce:	b918      	cbnz	r0, 800a4d8 <__cvt+0x8c>
 800a4d0:	f1c6 0601 	rsb	r6, r6, #1
 800a4d4:	f8ca 6000 	str.w	r6, [sl]
 800a4d8:	f8da 3000 	ldr.w	r3, [sl]
 800a4dc:	4499      	add	r9, r3
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f6 fb21 	bl	8000b2c <__aeabi_dcmpeq>
 800a4ea:	b108      	cbz	r0, 800a4f0 <__cvt+0xa4>
 800a4ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4f0:	2230      	movs	r2, #48	; 0x30
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	454b      	cmp	r3, r9
 800a4f6:	d307      	bcc.n	800a508 <__cvt+0xbc>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4fc:	1bdb      	subs	r3, r3, r7
 800a4fe:	4638      	mov	r0, r7
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	b004      	add	sp, #16
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a508:	1c59      	adds	r1, r3, #1
 800a50a:	9103      	str	r1, [sp, #12]
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	e7f0      	b.n	800a4f2 <__cvt+0xa6>

0800a510 <__exponent>:
 800a510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a512:	4603      	mov	r3, r0
 800a514:	2900      	cmp	r1, #0
 800a516:	bfb8      	it	lt
 800a518:	4249      	neglt	r1, r1
 800a51a:	f803 2b02 	strb.w	r2, [r3], #2
 800a51e:	bfb4      	ite	lt
 800a520:	222d      	movlt	r2, #45	; 0x2d
 800a522:	222b      	movge	r2, #43	; 0x2b
 800a524:	2909      	cmp	r1, #9
 800a526:	7042      	strb	r2, [r0, #1]
 800a528:	dd2a      	ble.n	800a580 <__exponent+0x70>
 800a52a:	f10d 0407 	add.w	r4, sp, #7
 800a52e:	46a4      	mov	ip, r4
 800a530:	270a      	movs	r7, #10
 800a532:	46a6      	mov	lr, r4
 800a534:	460a      	mov	r2, r1
 800a536:	fb91 f6f7 	sdiv	r6, r1, r7
 800a53a:	fb07 1516 	mls	r5, r7, r6, r1
 800a53e:	3530      	adds	r5, #48	; 0x30
 800a540:	2a63      	cmp	r2, #99	; 0x63
 800a542:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a54a:	4631      	mov	r1, r6
 800a54c:	dcf1      	bgt.n	800a532 <__exponent+0x22>
 800a54e:	3130      	adds	r1, #48	; 0x30
 800a550:	f1ae 0502 	sub.w	r5, lr, #2
 800a554:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a558:	1c44      	adds	r4, r0, #1
 800a55a:	4629      	mov	r1, r5
 800a55c:	4561      	cmp	r1, ip
 800a55e:	d30a      	bcc.n	800a576 <__exponent+0x66>
 800a560:	f10d 0209 	add.w	r2, sp, #9
 800a564:	eba2 020e 	sub.w	r2, r2, lr
 800a568:	4565      	cmp	r5, ip
 800a56a:	bf88      	it	hi
 800a56c:	2200      	movhi	r2, #0
 800a56e:	4413      	add	r3, r2
 800a570:	1a18      	subs	r0, r3, r0
 800a572:	b003      	add	sp, #12
 800a574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a57a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a57e:	e7ed      	b.n	800a55c <__exponent+0x4c>
 800a580:	2330      	movs	r3, #48	; 0x30
 800a582:	3130      	adds	r1, #48	; 0x30
 800a584:	7083      	strb	r3, [r0, #2]
 800a586:	70c1      	strb	r1, [r0, #3]
 800a588:	1d03      	adds	r3, r0, #4
 800a58a:	e7f1      	b.n	800a570 <__exponent+0x60>

0800a58c <_printf_float>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	ed2d 8b02 	vpush	{d8}
 800a594:	b08d      	sub	sp, #52	; 0x34
 800a596:	460c      	mov	r4, r1
 800a598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a59c:	4616      	mov	r6, r2
 800a59e:	461f      	mov	r7, r3
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	f003 f947 	bl	800d834 <_localeconv_r>
 800a5a6:	f8d0 a000 	ldr.w	sl, [r0]
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	f7f5 fe92 	bl	80002d4 <strlen>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5c0:	3307      	adds	r3, #7
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	f103 0208 	add.w	r2, r3, #8
 800a5ca:	f8c8 2000 	str.w	r2, [r8]
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5de:	9307      	str	r3, [sp, #28]
 800a5e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5e4:	ee08 0a10 	vmov	s16, r0
 800a5e8:	4b9f      	ldr	r3, [pc, #636]	; (800a868 <_printf_float+0x2dc>)
 800a5ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5f2:	f7f6 facd 	bl	8000b90 <__aeabi_dcmpun>
 800a5f6:	bb88      	cbnz	r0, 800a65c <_printf_float+0xd0>
 800a5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5fc:	4b9a      	ldr	r3, [pc, #616]	; (800a868 <_printf_float+0x2dc>)
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a602:	f7f6 faa7 	bl	8000b54 <__aeabi_dcmple>
 800a606:	bb48      	cbnz	r0, 800a65c <_printf_float+0xd0>
 800a608:	2200      	movs	r2, #0
 800a60a:	2300      	movs	r3, #0
 800a60c:	4640      	mov	r0, r8
 800a60e:	4649      	mov	r1, r9
 800a610:	f7f6 fa96 	bl	8000b40 <__aeabi_dcmplt>
 800a614:	b110      	cbz	r0, 800a61c <_printf_float+0x90>
 800a616:	232d      	movs	r3, #45	; 0x2d
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61c:	4b93      	ldr	r3, [pc, #588]	; (800a86c <_printf_float+0x2e0>)
 800a61e:	4894      	ldr	r0, [pc, #592]	; (800a870 <_printf_float+0x2e4>)
 800a620:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a624:	bf94      	ite	ls
 800a626:	4698      	movls	r8, r3
 800a628:	4680      	movhi	r8, r0
 800a62a:	2303      	movs	r3, #3
 800a62c:	6123      	str	r3, [r4, #16]
 800a62e:	9b05      	ldr	r3, [sp, #20]
 800a630:	f023 0204 	bic.w	r2, r3, #4
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	f04f 0900 	mov.w	r9, #0
 800a63a:	9700      	str	r7, [sp, #0]
 800a63c:	4633      	mov	r3, r6
 800a63e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a640:	4621      	mov	r1, r4
 800a642:	4628      	mov	r0, r5
 800a644:	f000 f9d8 	bl	800a9f8 <_printf_common>
 800a648:	3001      	adds	r0, #1
 800a64a:	f040 8090 	bne.w	800a76e <_printf_float+0x1e2>
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a652:	b00d      	add	sp, #52	; 0x34
 800a654:	ecbd 8b02 	vpop	{d8}
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	4642      	mov	r2, r8
 800a65e:	464b      	mov	r3, r9
 800a660:	4640      	mov	r0, r8
 800a662:	4649      	mov	r1, r9
 800a664:	f7f6 fa94 	bl	8000b90 <__aeabi_dcmpun>
 800a668:	b140      	cbz	r0, 800a67c <_printf_float+0xf0>
 800a66a:	464b      	mov	r3, r9
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfbc      	itt	lt
 800a670:	232d      	movlt	r3, #45	; 0x2d
 800a672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a676:	487f      	ldr	r0, [pc, #508]	; (800a874 <_printf_float+0x2e8>)
 800a678:	4b7f      	ldr	r3, [pc, #508]	; (800a878 <_printf_float+0x2ec>)
 800a67a:	e7d1      	b.n	800a620 <_printf_float+0x94>
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a682:	9206      	str	r2, [sp, #24]
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	d13f      	bne.n	800a708 <_printf_float+0x17c>
 800a688:	2306      	movs	r3, #6
 800a68a:	6063      	str	r3, [r4, #4]
 800a68c:	9b05      	ldr	r3, [sp, #20]
 800a68e:	6861      	ldr	r1, [r4, #4]
 800a690:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a694:	2300      	movs	r3, #0
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	ab0a      	add	r3, sp, #40	; 0x28
 800a69a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a69e:	ab09      	add	r3, sp, #36	; 0x24
 800a6a0:	ec49 8b10 	vmov	d0, r8, r9
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	6022      	str	r2, [r4, #0]
 800a6a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7ff fecd 	bl	800a44c <__cvt>
 800a6b2:	9b06      	ldr	r3, [sp, #24]
 800a6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6b6:	2b47      	cmp	r3, #71	; 0x47
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	d108      	bne.n	800a6ce <_printf_float+0x142>
 800a6bc:	1cc8      	adds	r0, r1, #3
 800a6be:	db02      	blt.n	800a6c6 <_printf_float+0x13a>
 800a6c0:	6863      	ldr	r3, [r4, #4]
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	dd41      	ble.n	800a74a <_printf_float+0x1be>
 800a6c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6ca:	fa5f fb8b 	uxtb.w	fp, fp
 800a6ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6d2:	d820      	bhi.n	800a716 <_printf_float+0x18a>
 800a6d4:	3901      	subs	r1, #1
 800a6d6:	465a      	mov	r2, fp
 800a6d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a6de:	f7ff ff17 	bl	800a510 <__exponent>
 800a6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6e4:	1813      	adds	r3, r2, r0
 800a6e6:	2a01      	cmp	r2, #1
 800a6e8:	4681      	mov	r9, r0
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	dc02      	bgt.n	800a6f4 <_printf_float+0x168>
 800a6ee:	6822      	ldr	r2, [r4, #0]
 800a6f0:	07d2      	lsls	r2, r2, #31
 800a6f2:	d501      	bpl.n	800a6f8 <_printf_float+0x16c>
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d09c      	beq.n	800a63a <_printf_float+0xae>
 800a700:	232d      	movs	r3, #45	; 0x2d
 800a702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a706:	e798      	b.n	800a63a <_printf_float+0xae>
 800a708:	9a06      	ldr	r2, [sp, #24]
 800a70a:	2a47      	cmp	r2, #71	; 0x47
 800a70c:	d1be      	bne.n	800a68c <_printf_float+0x100>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1bc      	bne.n	800a68c <_printf_float+0x100>
 800a712:	2301      	movs	r3, #1
 800a714:	e7b9      	b.n	800a68a <_printf_float+0xfe>
 800a716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a71a:	d118      	bne.n	800a74e <_printf_float+0x1c2>
 800a71c:	2900      	cmp	r1, #0
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	dd0b      	ble.n	800a73a <_printf_float+0x1ae>
 800a722:	6121      	str	r1, [r4, #16]
 800a724:	b913      	cbnz	r3, 800a72c <_printf_float+0x1a0>
 800a726:	6822      	ldr	r2, [r4, #0]
 800a728:	07d0      	lsls	r0, r2, #31
 800a72a:	d502      	bpl.n	800a732 <_printf_float+0x1a6>
 800a72c:	3301      	adds	r3, #1
 800a72e:	440b      	add	r3, r1
 800a730:	6123      	str	r3, [r4, #16]
 800a732:	65a1      	str	r1, [r4, #88]	; 0x58
 800a734:	f04f 0900 	mov.w	r9, #0
 800a738:	e7de      	b.n	800a6f8 <_printf_float+0x16c>
 800a73a:	b913      	cbnz	r3, 800a742 <_printf_float+0x1b6>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	07d2      	lsls	r2, r2, #31
 800a740:	d501      	bpl.n	800a746 <_printf_float+0x1ba>
 800a742:	3302      	adds	r3, #2
 800a744:	e7f4      	b.n	800a730 <_printf_float+0x1a4>
 800a746:	2301      	movs	r3, #1
 800a748:	e7f2      	b.n	800a730 <_printf_float+0x1a4>
 800a74a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a750:	4299      	cmp	r1, r3
 800a752:	db05      	blt.n	800a760 <_printf_float+0x1d4>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	6121      	str	r1, [r4, #16]
 800a758:	07d8      	lsls	r0, r3, #31
 800a75a:	d5ea      	bpl.n	800a732 <_printf_float+0x1a6>
 800a75c:	1c4b      	adds	r3, r1, #1
 800a75e:	e7e7      	b.n	800a730 <_printf_float+0x1a4>
 800a760:	2900      	cmp	r1, #0
 800a762:	bfd4      	ite	le
 800a764:	f1c1 0202 	rsble	r2, r1, #2
 800a768:	2201      	movgt	r2, #1
 800a76a:	4413      	add	r3, r2
 800a76c:	e7e0      	b.n	800a730 <_printf_float+0x1a4>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	055a      	lsls	r2, r3, #21
 800a772:	d407      	bmi.n	800a784 <_printf_float+0x1f8>
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	4642      	mov	r2, r8
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	d12c      	bne.n	800a7dc <_printf_float+0x250>
 800a782:	e764      	b.n	800a64e <_printf_float+0xc2>
 800a784:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a788:	f240 80e0 	bls.w	800a94c <_printf_float+0x3c0>
 800a78c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a790:	2200      	movs	r2, #0
 800a792:	2300      	movs	r3, #0
 800a794:	f7f6 f9ca 	bl	8000b2c <__aeabi_dcmpeq>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d034      	beq.n	800a806 <_printf_float+0x27a>
 800a79c:	4a37      	ldr	r2, [pc, #220]	; (800a87c <_printf_float+0x2f0>)
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f af51 	beq.w	800a64e <_printf_float+0xc2>
 800a7ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	db02      	blt.n	800a7ba <_printf_float+0x22e>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07d8      	lsls	r0, r3, #31
 800a7b8:	d510      	bpl.n	800a7dc <_printf_float+0x250>
 800a7ba:	ee18 3a10 	vmov	r3, s16
 800a7be:	4652      	mov	r2, sl
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af41 	beq.w	800a64e <_printf_float+0xc2>
 800a7cc:	f04f 0800 	mov.w	r8, #0
 800a7d0:	f104 091a 	add.w	r9, r4, #26
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	dc09      	bgt.n	800a7f0 <_printf_float+0x264>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	079b      	lsls	r3, r3, #30
 800a7e0:	f100 8105 	bmi.w	800a9ee <_printf_float+0x462>
 800a7e4:	68e0      	ldr	r0, [r4, #12]
 800a7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e8:	4298      	cmp	r0, r3
 800a7ea:	bfb8      	it	lt
 800a7ec:	4618      	movlt	r0, r3
 800a7ee:	e730      	b.n	800a652 <_printf_float+0xc6>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	464a      	mov	r2, r9
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	47b8      	blx	r7
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	f43f af27 	beq.w	800a64e <_printf_float+0xc2>
 800a800:	f108 0801 	add.w	r8, r8, #1
 800a804:	e7e6      	b.n	800a7d4 <_printf_float+0x248>
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc39      	bgt.n	800a880 <_printf_float+0x2f4>
 800a80c:	4a1b      	ldr	r2, [pc, #108]	; (800a87c <_printf_float+0x2f0>)
 800a80e:	2301      	movs	r3, #1
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f af19 	beq.w	800a64e <_printf_float+0xc2>
 800a81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a820:	4313      	orrs	r3, r2
 800a822:	d102      	bne.n	800a82a <_printf_float+0x29e>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	07d9      	lsls	r1, r3, #31
 800a828:	d5d8      	bpl.n	800a7dc <_printf_float+0x250>
 800a82a:	ee18 3a10 	vmov	r3, s16
 800a82e:	4652      	mov	r2, sl
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af09 	beq.w	800a64e <_printf_float+0xc2>
 800a83c:	f04f 0900 	mov.w	r9, #0
 800a840:	f104 0a1a 	add.w	sl, r4, #26
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	425b      	negs	r3, r3
 800a848:	454b      	cmp	r3, r9
 800a84a:	dc01      	bgt.n	800a850 <_printf_float+0x2c4>
 800a84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84e:	e792      	b.n	800a776 <_printf_float+0x1ea>
 800a850:	2301      	movs	r3, #1
 800a852:	4652      	mov	r2, sl
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f aef7 	beq.w	800a64e <_printf_float+0xc2>
 800a860:	f109 0901 	add.w	r9, r9, #1
 800a864:	e7ee      	b.n	800a844 <_printf_float+0x2b8>
 800a866:	bf00      	nop
 800a868:	7fefffff 	.word	0x7fefffff
 800a86c:	0800f5f1 	.word	0x0800f5f1
 800a870:	0800f5f5 	.word	0x0800f5f5
 800a874:	0800f5fd 	.word	0x0800f5fd
 800a878:	0800f5f9 	.word	0x0800f5f9
 800a87c:	0800f601 	.word	0x0800f601
 800a880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a884:	429a      	cmp	r2, r3
 800a886:	bfa8      	it	ge
 800a888:	461a      	movge	r2, r3
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	4691      	mov	r9, r2
 800a88e:	dc37      	bgt.n	800a900 <_printf_float+0x374>
 800a890:	f04f 0b00 	mov.w	fp, #0
 800a894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a898:	f104 021a 	add.w	r2, r4, #26
 800a89c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	eba3 0309 	sub.w	r3, r3, r9
 800a8a4:	455b      	cmp	r3, fp
 800a8a6:	dc33      	bgt.n	800a910 <_printf_float+0x384>
 800a8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	db3b      	blt.n	800a928 <_printf_float+0x39c>
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	07da      	lsls	r2, r3, #31
 800a8b4:	d438      	bmi.n	800a928 <_printf_float+0x39c>
 800a8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b8:	9a05      	ldr	r2, [sp, #20]
 800a8ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8bc:	1a9a      	subs	r2, r3, r2
 800a8be:	eba3 0901 	sub.w	r9, r3, r1
 800a8c2:	4591      	cmp	r9, r2
 800a8c4:	bfa8      	it	ge
 800a8c6:	4691      	movge	r9, r2
 800a8c8:	f1b9 0f00 	cmp.w	r9, #0
 800a8cc:	dc35      	bgt.n	800a93a <_printf_float+0x3ae>
 800a8ce:	f04f 0800 	mov.w	r8, #0
 800a8d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8d6:	f104 0a1a 	add.w	sl, r4, #26
 800a8da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	eba3 0309 	sub.w	r3, r3, r9
 800a8e4:	4543      	cmp	r3, r8
 800a8e6:	f77f af79 	ble.w	800a7dc <_printf_float+0x250>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4652      	mov	r2, sl
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	47b8      	blx	r7
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f43f aeaa 	beq.w	800a64e <_printf_float+0xc2>
 800a8fa:	f108 0801 	add.w	r8, r8, #1
 800a8fe:	e7ec      	b.n	800a8da <_printf_float+0x34e>
 800a900:	4613      	mov	r3, r2
 800a902:	4631      	mov	r1, r6
 800a904:	4642      	mov	r2, r8
 800a906:	4628      	mov	r0, r5
 800a908:	47b8      	blx	r7
 800a90a:	3001      	adds	r0, #1
 800a90c:	d1c0      	bne.n	800a890 <_printf_float+0x304>
 800a90e:	e69e      	b.n	800a64e <_printf_float+0xc2>
 800a910:	2301      	movs	r3, #1
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	9205      	str	r2, [sp, #20]
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	f43f ae97 	beq.w	800a64e <_printf_float+0xc2>
 800a920:	9a05      	ldr	r2, [sp, #20]
 800a922:	f10b 0b01 	add.w	fp, fp, #1
 800a926:	e7b9      	b.n	800a89c <_printf_float+0x310>
 800a928:	ee18 3a10 	vmov	r3, s16
 800a92c:	4652      	mov	r2, sl
 800a92e:	4631      	mov	r1, r6
 800a930:	4628      	mov	r0, r5
 800a932:	47b8      	blx	r7
 800a934:	3001      	adds	r0, #1
 800a936:	d1be      	bne.n	800a8b6 <_printf_float+0x32a>
 800a938:	e689      	b.n	800a64e <_printf_float+0xc2>
 800a93a:	9a05      	ldr	r2, [sp, #20]
 800a93c:	464b      	mov	r3, r9
 800a93e:	4442      	add	r2, r8
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	d1c1      	bne.n	800a8ce <_printf_float+0x342>
 800a94a:	e680      	b.n	800a64e <_printf_float+0xc2>
 800a94c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a94e:	2a01      	cmp	r2, #1
 800a950:	dc01      	bgt.n	800a956 <_printf_float+0x3ca>
 800a952:	07db      	lsls	r3, r3, #31
 800a954:	d538      	bpl.n	800a9c8 <_printf_float+0x43c>
 800a956:	2301      	movs	r3, #1
 800a958:	4642      	mov	r2, r8
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	f43f ae74 	beq.w	800a64e <_printf_float+0xc2>
 800a966:	ee18 3a10 	vmov	r3, s16
 800a96a:	4652      	mov	r2, sl
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	47b8      	blx	r7
 800a972:	3001      	adds	r0, #1
 800a974:	f43f ae6b 	beq.w	800a64e <_printf_float+0xc2>
 800a978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a97c:	2200      	movs	r2, #0
 800a97e:	2300      	movs	r3, #0
 800a980:	f7f6 f8d4 	bl	8000b2c <__aeabi_dcmpeq>
 800a984:	b9d8      	cbnz	r0, 800a9be <_printf_float+0x432>
 800a986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a988:	f108 0201 	add.w	r2, r8, #1
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4631      	mov	r1, r6
 800a990:	4628      	mov	r0, r5
 800a992:	47b8      	blx	r7
 800a994:	3001      	adds	r0, #1
 800a996:	d10e      	bne.n	800a9b6 <_printf_float+0x42a>
 800a998:	e659      	b.n	800a64e <_printf_float+0xc2>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae52 	beq.w	800a64e <_printf_float+0xc2>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4543      	cmp	r3, r8
 800a9b4:	dcf1      	bgt.n	800a99a <_printf_float+0x40e>
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9bc:	e6dc      	b.n	800a778 <_printf_float+0x1ec>
 800a9be:	f04f 0800 	mov.w	r8, #0
 800a9c2:	f104 0a1a 	add.w	sl, r4, #26
 800a9c6:	e7f2      	b.n	800a9ae <_printf_float+0x422>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	e7df      	b.n	800a98e <_printf_float+0x402>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f43f ae38 	beq.w	800a64e <_printf_float+0xc2>
 800a9de:	f108 0801 	add.w	r8, r8, #1
 800a9e2:	68e3      	ldr	r3, [r4, #12]
 800a9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9e6:	1a5b      	subs	r3, r3, r1
 800a9e8:	4543      	cmp	r3, r8
 800a9ea:	dcf0      	bgt.n	800a9ce <_printf_float+0x442>
 800a9ec:	e6fa      	b.n	800a7e4 <_printf_float+0x258>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	f104 0919 	add.w	r9, r4, #25
 800a9f6:	e7f4      	b.n	800a9e2 <_printf_float+0x456>

0800a9f8 <_printf_common>:
 800a9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	4699      	mov	r9, r3
 800aa00:	688a      	ldr	r2, [r1, #8]
 800aa02:	690b      	ldr	r3, [r1, #16]
 800aa04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	bfb8      	it	lt
 800aa0c:	4613      	movlt	r3, r2
 800aa0e:	6033      	str	r3, [r6, #0]
 800aa10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa14:	4607      	mov	r7, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	b10a      	cbz	r2, 800aa1e <_printf_common+0x26>
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	6033      	str	r3, [r6, #0]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	0699      	lsls	r1, r3, #26
 800aa22:	bf42      	ittt	mi
 800aa24:	6833      	ldrmi	r3, [r6, #0]
 800aa26:	3302      	addmi	r3, #2
 800aa28:	6033      	strmi	r3, [r6, #0]
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	f015 0506 	ands.w	r5, r5, #6
 800aa30:	d106      	bne.n	800aa40 <_printf_common+0x48>
 800aa32:	f104 0a19 	add.w	sl, r4, #25
 800aa36:	68e3      	ldr	r3, [r4, #12]
 800aa38:	6832      	ldr	r2, [r6, #0]
 800aa3a:	1a9b      	subs	r3, r3, r2
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	dc26      	bgt.n	800aa8e <_printf_common+0x96>
 800aa40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa44:	1e13      	subs	r3, r2, #0
 800aa46:	6822      	ldr	r2, [r4, #0]
 800aa48:	bf18      	it	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	0692      	lsls	r2, r2, #26
 800aa4e:	d42b      	bmi.n	800aaa8 <_printf_common+0xb0>
 800aa50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa54:	4649      	mov	r1, r9
 800aa56:	4638      	mov	r0, r7
 800aa58:	47c0      	blx	r8
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	d01e      	beq.n	800aa9c <_printf_common+0xa4>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	68e5      	ldr	r5, [r4, #12]
 800aa62:	6832      	ldr	r2, [r6, #0]
 800aa64:	f003 0306 	and.w	r3, r3, #6
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	bf08      	it	eq
 800aa6c:	1aad      	subeq	r5, r5, r2
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	bf0c      	ite	eq
 800aa74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa78:	2500      	movne	r5, #0
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	bfc4      	itt	gt
 800aa7e:	1a9b      	subgt	r3, r3, r2
 800aa80:	18ed      	addgt	r5, r5, r3
 800aa82:	2600      	movs	r6, #0
 800aa84:	341a      	adds	r4, #26
 800aa86:	42b5      	cmp	r5, r6
 800aa88:	d11a      	bne.n	800aac0 <_printf_common+0xc8>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e008      	b.n	800aaa0 <_printf_common+0xa8>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4652      	mov	r2, sl
 800aa92:	4649      	mov	r1, r9
 800aa94:	4638      	mov	r0, r7
 800aa96:	47c0      	blx	r8
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d103      	bne.n	800aaa4 <_printf_common+0xac>
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	e7c6      	b.n	800aa36 <_printf_common+0x3e>
 800aaa8:	18e1      	adds	r1, r4, r3
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	2030      	movs	r0, #48	; 0x30
 800aaae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aab2:	4422      	add	r2, r4
 800aab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aabc:	3302      	adds	r3, #2
 800aabe:	e7c7      	b.n	800aa50 <_printf_common+0x58>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4622      	mov	r2, r4
 800aac4:	4649      	mov	r1, r9
 800aac6:	4638      	mov	r0, r7
 800aac8:	47c0      	blx	r8
 800aaca:	3001      	adds	r0, #1
 800aacc:	d0e6      	beq.n	800aa9c <_printf_common+0xa4>
 800aace:	3601      	adds	r6, #1
 800aad0:	e7d9      	b.n	800aa86 <_printf_common+0x8e>
	...

0800aad4 <_printf_i>:
 800aad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	7e0f      	ldrb	r7, [r1, #24]
 800aada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aadc:	2f78      	cmp	r7, #120	; 0x78
 800aade:	4691      	mov	r9, r2
 800aae0:	4680      	mov	r8, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	469a      	mov	sl, r3
 800aae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaea:	d807      	bhi.n	800aafc <_printf_i+0x28>
 800aaec:	2f62      	cmp	r7, #98	; 0x62
 800aaee:	d80a      	bhi.n	800ab06 <_printf_i+0x32>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	f000 80d8 	beq.w	800aca6 <_printf_i+0x1d2>
 800aaf6:	2f58      	cmp	r7, #88	; 0x58
 800aaf8:	f000 80a3 	beq.w	800ac42 <_printf_i+0x16e>
 800aafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab04:	e03a      	b.n	800ab7c <_printf_i+0xa8>
 800ab06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab0a:	2b15      	cmp	r3, #21
 800ab0c:	d8f6      	bhi.n	800aafc <_printf_i+0x28>
 800ab0e:	a101      	add	r1, pc, #4	; (adr r1, 800ab14 <_printf_i+0x40>)
 800ab10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab14:	0800ab6d 	.word	0x0800ab6d
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800aafd 	.word	0x0800aafd
 800ab20:	0800aafd 	.word	0x0800aafd
 800ab24:	0800aafd 	.word	0x0800aafd
 800ab28:	0800aafd 	.word	0x0800aafd
 800ab2c:	0800ab81 	.word	0x0800ab81
 800ab30:	0800aafd 	.word	0x0800aafd
 800ab34:	0800aafd 	.word	0x0800aafd
 800ab38:	0800aafd 	.word	0x0800aafd
 800ab3c:	0800aafd 	.word	0x0800aafd
 800ab40:	0800ac8d 	.word	0x0800ac8d
 800ab44:	0800abb1 	.word	0x0800abb1
 800ab48:	0800ac6f 	.word	0x0800ac6f
 800ab4c:	0800aafd 	.word	0x0800aafd
 800ab50:	0800aafd 	.word	0x0800aafd
 800ab54:	0800acaf 	.word	0x0800acaf
 800ab58:	0800aafd 	.word	0x0800aafd
 800ab5c:	0800abb1 	.word	0x0800abb1
 800ab60:	0800aafd 	.word	0x0800aafd
 800ab64:	0800aafd 	.word	0x0800aafd
 800ab68:	0800ac77 	.word	0x0800ac77
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	1d1a      	adds	r2, r3, #4
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	602a      	str	r2, [r5, #0]
 800ab74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e0a3      	b.n	800acc8 <_printf_i+0x1f4>
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	6829      	ldr	r1, [r5, #0]
 800ab84:	0606      	lsls	r6, r0, #24
 800ab86:	f101 0304 	add.w	r3, r1, #4
 800ab8a:	d50a      	bpl.n	800aba2 <_printf_i+0xce>
 800ab8c:	680e      	ldr	r6, [r1, #0]
 800ab8e:	602b      	str	r3, [r5, #0]
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	da03      	bge.n	800ab9c <_printf_i+0xc8>
 800ab94:	232d      	movs	r3, #45	; 0x2d
 800ab96:	4276      	negs	r6, r6
 800ab98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab9c:	485e      	ldr	r0, [pc, #376]	; (800ad18 <_printf_i+0x244>)
 800ab9e:	230a      	movs	r3, #10
 800aba0:	e019      	b.n	800abd6 <_printf_i+0x102>
 800aba2:	680e      	ldr	r6, [r1, #0]
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abaa:	bf18      	it	ne
 800abac:	b236      	sxthne	r6, r6
 800abae:	e7ef      	b.n	800ab90 <_printf_i+0xbc>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	6820      	ldr	r0, [r4, #0]
 800abb4:	1d19      	adds	r1, r3, #4
 800abb6:	6029      	str	r1, [r5, #0]
 800abb8:	0601      	lsls	r1, r0, #24
 800abba:	d501      	bpl.n	800abc0 <_printf_i+0xec>
 800abbc:	681e      	ldr	r6, [r3, #0]
 800abbe:	e002      	b.n	800abc6 <_printf_i+0xf2>
 800abc0:	0646      	lsls	r6, r0, #25
 800abc2:	d5fb      	bpl.n	800abbc <_printf_i+0xe8>
 800abc4:	881e      	ldrh	r6, [r3, #0]
 800abc6:	4854      	ldr	r0, [pc, #336]	; (800ad18 <_printf_i+0x244>)
 800abc8:	2f6f      	cmp	r7, #111	; 0x6f
 800abca:	bf0c      	ite	eq
 800abcc:	2308      	moveq	r3, #8
 800abce:	230a      	movne	r3, #10
 800abd0:	2100      	movs	r1, #0
 800abd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abd6:	6865      	ldr	r5, [r4, #4]
 800abd8:	60a5      	str	r5, [r4, #8]
 800abda:	2d00      	cmp	r5, #0
 800abdc:	bfa2      	ittt	ge
 800abde:	6821      	ldrge	r1, [r4, #0]
 800abe0:	f021 0104 	bicge.w	r1, r1, #4
 800abe4:	6021      	strge	r1, [r4, #0]
 800abe6:	b90e      	cbnz	r6, 800abec <_printf_i+0x118>
 800abe8:	2d00      	cmp	r5, #0
 800abea:	d04d      	beq.n	800ac88 <_printf_i+0x1b4>
 800abec:	4615      	mov	r5, r2
 800abee:	fbb6 f1f3 	udiv	r1, r6, r3
 800abf2:	fb03 6711 	mls	r7, r3, r1, r6
 800abf6:	5dc7      	ldrb	r7, [r0, r7]
 800abf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abfc:	4637      	mov	r7, r6
 800abfe:	42bb      	cmp	r3, r7
 800ac00:	460e      	mov	r6, r1
 800ac02:	d9f4      	bls.n	800abee <_printf_i+0x11a>
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	d10b      	bne.n	800ac20 <_printf_i+0x14c>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	07de      	lsls	r6, r3, #31
 800ac0c:	d508      	bpl.n	800ac20 <_printf_i+0x14c>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4299      	cmp	r1, r3
 800ac14:	bfde      	ittt	le
 800ac16:	2330      	movle	r3, #48	; 0x30
 800ac18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac20:	1b52      	subs	r2, r2, r5
 800ac22:	6122      	str	r2, [r4, #16]
 800ac24:	f8cd a000 	str.w	sl, [sp]
 800ac28:	464b      	mov	r3, r9
 800ac2a:	aa03      	add	r2, sp, #12
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4640      	mov	r0, r8
 800ac30:	f7ff fee2 	bl	800a9f8 <_printf_common>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d14c      	bne.n	800acd2 <_printf_i+0x1fe>
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac3c:	b004      	add	sp, #16
 800ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac42:	4835      	ldr	r0, [pc, #212]	; (800ad18 <_printf_i+0x244>)
 800ac44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac48:	6829      	ldr	r1, [r5, #0]
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac50:	6029      	str	r1, [r5, #0]
 800ac52:	061d      	lsls	r5, r3, #24
 800ac54:	d514      	bpl.n	800ac80 <_printf_i+0x1ac>
 800ac56:	07df      	lsls	r7, r3, #31
 800ac58:	bf44      	itt	mi
 800ac5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac5e:	6023      	strmi	r3, [r4, #0]
 800ac60:	b91e      	cbnz	r6, 800ac6a <_printf_i+0x196>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	f023 0320 	bic.w	r3, r3, #32
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	e7b0      	b.n	800abd0 <_printf_i+0xfc>
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	f043 0320 	orr.w	r3, r3, #32
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	2378      	movs	r3, #120	; 0x78
 800ac78:	4828      	ldr	r0, [pc, #160]	; (800ad1c <_printf_i+0x248>)
 800ac7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac7e:	e7e3      	b.n	800ac48 <_printf_i+0x174>
 800ac80:	0659      	lsls	r1, r3, #25
 800ac82:	bf48      	it	mi
 800ac84:	b2b6      	uxthmi	r6, r6
 800ac86:	e7e6      	b.n	800ac56 <_printf_i+0x182>
 800ac88:	4615      	mov	r5, r2
 800ac8a:	e7bb      	b.n	800ac04 <_printf_i+0x130>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	6826      	ldr	r6, [r4, #0]
 800ac90:	6961      	ldr	r1, [r4, #20]
 800ac92:	1d18      	adds	r0, r3, #4
 800ac94:	6028      	str	r0, [r5, #0]
 800ac96:	0635      	lsls	r5, r6, #24
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	d501      	bpl.n	800aca0 <_printf_i+0x1cc>
 800ac9c:	6019      	str	r1, [r3, #0]
 800ac9e:	e002      	b.n	800aca6 <_printf_i+0x1d2>
 800aca0:	0670      	lsls	r0, r6, #25
 800aca2:	d5fb      	bpl.n	800ac9c <_printf_i+0x1c8>
 800aca4:	8019      	strh	r1, [r3, #0]
 800aca6:	2300      	movs	r3, #0
 800aca8:	6123      	str	r3, [r4, #16]
 800acaa:	4615      	mov	r5, r2
 800acac:	e7ba      	b.n	800ac24 <_printf_i+0x150>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	602a      	str	r2, [r5, #0]
 800acb4:	681d      	ldr	r5, [r3, #0]
 800acb6:	6862      	ldr	r2, [r4, #4]
 800acb8:	2100      	movs	r1, #0
 800acba:	4628      	mov	r0, r5
 800acbc:	f7f5 fab0 	bl	8000220 <memchr>
 800acc0:	b108      	cbz	r0, 800acc6 <_printf_i+0x1f2>
 800acc2:	1b40      	subs	r0, r0, r5
 800acc4:	6060      	str	r0, [r4, #4]
 800acc6:	6863      	ldr	r3, [r4, #4]
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	2300      	movs	r3, #0
 800accc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd0:	e7a8      	b.n	800ac24 <_printf_i+0x150>
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	462a      	mov	r2, r5
 800acd6:	4649      	mov	r1, r9
 800acd8:	4640      	mov	r0, r8
 800acda:	47d0      	blx	sl
 800acdc:	3001      	adds	r0, #1
 800acde:	d0ab      	beq.n	800ac38 <_printf_i+0x164>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	079b      	lsls	r3, r3, #30
 800ace4:	d413      	bmi.n	800ad0e <_printf_i+0x23a>
 800ace6:	68e0      	ldr	r0, [r4, #12]
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	4298      	cmp	r0, r3
 800acec:	bfb8      	it	lt
 800acee:	4618      	movlt	r0, r3
 800acf0:	e7a4      	b.n	800ac3c <_printf_i+0x168>
 800acf2:	2301      	movs	r3, #1
 800acf4:	4632      	mov	r2, r6
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	47d0      	blx	sl
 800acfc:	3001      	adds	r0, #1
 800acfe:	d09b      	beq.n	800ac38 <_printf_i+0x164>
 800ad00:	3501      	adds	r5, #1
 800ad02:	68e3      	ldr	r3, [r4, #12]
 800ad04:	9903      	ldr	r1, [sp, #12]
 800ad06:	1a5b      	subs	r3, r3, r1
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	dcf2      	bgt.n	800acf2 <_printf_i+0x21e>
 800ad0c:	e7eb      	b.n	800ace6 <_printf_i+0x212>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	f104 0619 	add.w	r6, r4, #25
 800ad14:	e7f5      	b.n	800ad02 <_printf_i+0x22e>
 800ad16:	bf00      	nop
 800ad18:	0800f603 	.word	0x0800f603
 800ad1c:	0800f614 	.word	0x0800f614

0800ad20 <_scanf_float>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	b087      	sub	sp, #28
 800ad26:	4617      	mov	r7, r2
 800ad28:	9303      	str	r3, [sp, #12]
 800ad2a:	688b      	ldr	r3, [r1, #8]
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad32:	bf83      	ittte	hi
 800ad34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad38:	195b      	addhi	r3, r3, r5
 800ad3a:	9302      	strhi	r3, [sp, #8]
 800ad3c:	2300      	movls	r3, #0
 800ad3e:	bf86      	itte	hi
 800ad40:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad44:	608b      	strhi	r3, [r1, #8]
 800ad46:	9302      	strls	r3, [sp, #8]
 800ad48:	680b      	ldr	r3, [r1, #0]
 800ad4a:	468b      	mov	fp, r1
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad52:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	465e      	mov	r6, fp
 800ad60:	46aa      	mov	sl, r5
 800ad62:	46a9      	mov	r9, r5
 800ad64:	9501      	str	r5, [sp, #4]
 800ad66:	68a2      	ldr	r2, [r4, #8]
 800ad68:	b152      	cbz	r2, 800ad80 <_scanf_float+0x60>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b4e      	cmp	r3, #78	; 0x4e
 800ad70:	d864      	bhi.n	800ae3c <_scanf_float+0x11c>
 800ad72:	2b40      	cmp	r3, #64	; 0x40
 800ad74:	d83c      	bhi.n	800adf0 <_scanf_float+0xd0>
 800ad76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ad7a:	b2c8      	uxtb	r0, r1
 800ad7c:	280e      	cmp	r0, #14
 800ad7e:	d93a      	bls.n	800adf6 <_scanf_float+0xd6>
 800ad80:	f1b9 0f00 	cmp.w	r9, #0
 800ad84:	d003      	beq.n	800ad8e <_scanf_float+0x6e>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad92:	f1ba 0f01 	cmp.w	sl, #1
 800ad96:	f200 8113 	bhi.w	800afc0 <_scanf_float+0x2a0>
 800ad9a:	455e      	cmp	r6, fp
 800ad9c:	f200 8105 	bhi.w	800afaa <_scanf_float+0x28a>
 800ada0:	2501      	movs	r5, #1
 800ada2:	4628      	mov	r0, r5
 800ada4:	b007      	add	sp, #28
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800adae:	2a0d      	cmp	r2, #13
 800adb0:	d8e6      	bhi.n	800ad80 <_scanf_float+0x60>
 800adb2:	a101      	add	r1, pc, #4	; (adr r1, 800adb8 <_scanf_float+0x98>)
 800adb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adb8:	0800aef7 	.word	0x0800aef7
 800adbc:	0800ad81 	.word	0x0800ad81
 800adc0:	0800ad81 	.word	0x0800ad81
 800adc4:	0800ad81 	.word	0x0800ad81
 800adc8:	0800af57 	.word	0x0800af57
 800adcc:	0800af2f 	.word	0x0800af2f
 800add0:	0800ad81 	.word	0x0800ad81
 800add4:	0800ad81 	.word	0x0800ad81
 800add8:	0800af05 	.word	0x0800af05
 800addc:	0800ad81 	.word	0x0800ad81
 800ade0:	0800ad81 	.word	0x0800ad81
 800ade4:	0800ad81 	.word	0x0800ad81
 800ade8:	0800ad81 	.word	0x0800ad81
 800adec:	0800aebd 	.word	0x0800aebd
 800adf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800adf4:	e7db      	b.n	800adae <_scanf_float+0x8e>
 800adf6:	290e      	cmp	r1, #14
 800adf8:	d8c2      	bhi.n	800ad80 <_scanf_float+0x60>
 800adfa:	a001      	add	r0, pc, #4	; (adr r0, 800ae00 <_scanf_float+0xe0>)
 800adfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae00:	0800aeaf 	.word	0x0800aeaf
 800ae04:	0800ad81 	.word	0x0800ad81
 800ae08:	0800aeaf 	.word	0x0800aeaf
 800ae0c:	0800af43 	.word	0x0800af43
 800ae10:	0800ad81 	.word	0x0800ad81
 800ae14:	0800ae5d 	.word	0x0800ae5d
 800ae18:	0800ae99 	.word	0x0800ae99
 800ae1c:	0800ae99 	.word	0x0800ae99
 800ae20:	0800ae99 	.word	0x0800ae99
 800ae24:	0800ae99 	.word	0x0800ae99
 800ae28:	0800ae99 	.word	0x0800ae99
 800ae2c:	0800ae99 	.word	0x0800ae99
 800ae30:	0800ae99 	.word	0x0800ae99
 800ae34:	0800ae99 	.word	0x0800ae99
 800ae38:	0800ae99 	.word	0x0800ae99
 800ae3c:	2b6e      	cmp	r3, #110	; 0x6e
 800ae3e:	d809      	bhi.n	800ae54 <_scanf_float+0x134>
 800ae40:	2b60      	cmp	r3, #96	; 0x60
 800ae42:	d8b2      	bhi.n	800adaa <_scanf_float+0x8a>
 800ae44:	2b54      	cmp	r3, #84	; 0x54
 800ae46:	d077      	beq.n	800af38 <_scanf_float+0x218>
 800ae48:	2b59      	cmp	r3, #89	; 0x59
 800ae4a:	d199      	bne.n	800ad80 <_scanf_float+0x60>
 800ae4c:	2d07      	cmp	r5, #7
 800ae4e:	d197      	bne.n	800ad80 <_scanf_float+0x60>
 800ae50:	2508      	movs	r5, #8
 800ae52:	e029      	b.n	800aea8 <_scanf_float+0x188>
 800ae54:	2b74      	cmp	r3, #116	; 0x74
 800ae56:	d06f      	beq.n	800af38 <_scanf_float+0x218>
 800ae58:	2b79      	cmp	r3, #121	; 0x79
 800ae5a:	e7f6      	b.n	800ae4a <_scanf_float+0x12a>
 800ae5c:	6821      	ldr	r1, [r4, #0]
 800ae5e:	05c8      	lsls	r0, r1, #23
 800ae60:	d51a      	bpl.n	800ae98 <_scanf_float+0x178>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae68:	6021      	str	r1, [r4, #0]
 800ae6a:	f109 0901 	add.w	r9, r9, #1
 800ae6e:	b11b      	cbz	r3, 800ae78 <_scanf_float+0x158>
 800ae70:	3b01      	subs	r3, #1
 800ae72:	3201      	adds	r2, #1
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	60a2      	str	r2, [r4, #8]
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	6923      	ldr	r3, [r4, #16]
 800ae80:	3301      	adds	r3, #1
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	f340 8084 	ble.w	800af98 <_scanf_float+0x278>
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	603b      	str	r3, [r7, #0]
 800ae96:	e766      	b.n	800ad66 <_scanf_float+0x46>
 800ae98:	eb1a 0f05 	cmn.w	sl, r5
 800ae9c:	f47f af70 	bne.w	800ad80 <_scanf_float+0x60>
 800aea0:	6822      	ldr	r2, [r4, #0]
 800aea2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aea6:	6022      	str	r2, [r4, #0]
 800aea8:	f806 3b01 	strb.w	r3, [r6], #1
 800aeac:	e7e4      	b.n	800ae78 <_scanf_float+0x158>
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	0610      	lsls	r0, r2, #24
 800aeb2:	f57f af65 	bpl.w	800ad80 <_scanf_float+0x60>
 800aeb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeba:	e7f4      	b.n	800aea6 <_scanf_float+0x186>
 800aebc:	f1ba 0f00 	cmp.w	sl, #0
 800aec0:	d10e      	bne.n	800aee0 <_scanf_float+0x1c0>
 800aec2:	f1b9 0f00 	cmp.w	r9, #0
 800aec6:	d10e      	bne.n	800aee6 <_scanf_float+0x1c6>
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aece:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aed2:	d108      	bne.n	800aee6 <_scanf_float+0x1c6>
 800aed4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aed8:	6022      	str	r2, [r4, #0]
 800aeda:	f04f 0a01 	mov.w	sl, #1
 800aede:	e7e3      	b.n	800aea8 <_scanf_float+0x188>
 800aee0:	f1ba 0f02 	cmp.w	sl, #2
 800aee4:	d055      	beq.n	800af92 <_scanf_float+0x272>
 800aee6:	2d01      	cmp	r5, #1
 800aee8:	d002      	beq.n	800aef0 <_scanf_float+0x1d0>
 800aeea:	2d04      	cmp	r5, #4
 800aeec:	f47f af48 	bne.w	800ad80 <_scanf_float+0x60>
 800aef0:	3501      	adds	r5, #1
 800aef2:	b2ed      	uxtb	r5, r5
 800aef4:	e7d8      	b.n	800aea8 <_scanf_float+0x188>
 800aef6:	f1ba 0f01 	cmp.w	sl, #1
 800aefa:	f47f af41 	bne.w	800ad80 <_scanf_float+0x60>
 800aefe:	f04f 0a02 	mov.w	sl, #2
 800af02:	e7d1      	b.n	800aea8 <_scanf_float+0x188>
 800af04:	b97d      	cbnz	r5, 800af26 <_scanf_float+0x206>
 800af06:	f1b9 0f00 	cmp.w	r9, #0
 800af0a:	f47f af3c 	bne.w	800ad86 <_scanf_float+0x66>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af18:	f47f af39 	bne.w	800ad8e <_scanf_float+0x6e>
 800af1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af20:	6022      	str	r2, [r4, #0]
 800af22:	2501      	movs	r5, #1
 800af24:	e7c0      	b.n	800aea8 <_scanf_float+0x188>
 800af26:	2d03      	cmp	r5, #3
 800af28:	d0e2      	beq.n	800aef0 <_scanf_float+0x1d0>
 800af2a:	2d05      	cmp	r5, #5
 800af2c:	e7de      	b.n	800aeec <_scanf_float+0x1cc>
 800af2e:	2d02      	cmp	r5, #2
 800af30:	f47f af26 	bne.w	800ad80 <_scanf_float+0x60>
 800af34:	2503      	movs	r5, #3
 800af36:	e7b7      	b.n	800aea8 <_scanf_float+0x188>
 800af38:	2d06      	cmp	r5, #6
 800af3a:	f47f af21 	bne.w	800ad80 <_scanf_float+0x60>
 800af3e:	2507      	movs	r5, #7
 800af40:	e7b2      	b.n	800aea8 <_scanf_float+0x188>
 800af42:	6822      	ldr	r2, [r4, #0]
 800af44:	0591      	lsls	r1, r2, #22
 800af46:	f57f af1b 	bpl.w	800ad80 <_scanf_float+0x60>
 800af4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af4e:	6022      	str	r2, [r4, #0]
 800af50:	f8cd 9004 	str.w	r9, [sp, #4]
 800af54:	e7a8      	b.n	800aea8 <_scanf_float+0x188>
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af60:	d006      	beq.n	800af70 <_scanf_float+0x250>
 800af62:	0550      	lsls	r0, r2, #21
 800af64:	f57f af0c 	bpl.w	800ad80 <_scanf_float+0x60>
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	f43f af0f 	beq.w	800ad8e <_scanf_float+0x6e>
 800af70:	0591      	lsls	r1, r2, #22
 800af72:	bf58      	it	pl
 800af74:	9901      	ldrpl	r1, [sp, #4]
 800af76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af7a:	bf58      	it	pl
 800af7c:	eba9 0101 	subpl.w	r1, r9, r1
 800af80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af84:	bf58      	it	pl
 800af86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	f04f 0900 	mov.w	r9, #0
 800af90:	e78a      	b.n	800aea8 <_scanf_float+0x188>
 800af92:	f04f 0a03 	mov.w	sl, #3
 800af96:	e787      	b.n	800aea8 <_scanf_float+0x188>
 800af98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af9c:	4639      	mov	r1, r7
 800af9e:	4640      	mov	r0, r8
 800afa0:	4798      	blx	r3
 800afa2:	2800      	cmp	r0, #0
 800afa4:	f43f aedf 	beq.w	800ad66 <_scanf_float+0x46>
 800afa8:	e6ea      	b.n	800ad80 <_scanf_float+0x60>
 800afaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afb2:	463a      	mov	r2, r7
 800afb4:	4640      	mov	r0, r8
 800afb6:	4798      	blx	r3
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	3b01      	subs	r3, #1
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	e6ec      	b.n	800ad9a <_scanf_float+0x7a>
 800afc0:	1e6b      	subs	r3, r5, #1
 800afc2:	2b06      	cmp	r3, #6
 800afc4:	d825      	bhi.n	800b012 <_scanf_float+0x2f2>
 800afc6:	2d02      	cmp	r5, #2
 800afc8:	d836      	bhi.n	800b038 <_scanf_float+0x318>
 800afca:	455e      	cmp	r6, fp
 800afcc:	f67f aee8 	bls.w	800ada0 <_scanf_float+0x80>
 800afd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afd8:	463a      	mov	r2, r7
 800afda:	4640      	mov	r0, r8
 800afdc:	4798      	blx	r3
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	e7f1      	b.n	800afca <_scanf_float+0x2aa>
 800afe6:	9802      	ldr	r0, [sp, #8]
 800afe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aff0:	9002      	str	r0, [sp, #8]
 800aff2:	463a      	mov	r2, r7
 800aff4:	4640      	mov	r0, r8
 800aff6:	4798      	blx	r3
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	3b01      	subs	r3, #1
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b002:	fa5f fa8a 	uxtb.w	sl, sl
 800b006:	f1ba 0f02 	cmp.w	sl, #2
 800b00a:	d1ec      	bne.n	800afe6 <_scanf_float+0x2c6>
 800b00c:	3d03      	subs	r5, #3
 800b00e:	b2ed      	uxtb	r5, r5
 800b010:	1b76      	subs	r6, r6, r5
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	05da      	lsls	r2, r3, #23
 800b016:	d52f      	bpl.n	800b078 <_scanf_float+0x358>
 800b018:	055b      	lsls	r3, r3, #21
 800b01a:	d510      	bpl.n	800b03e <_scanf_float+0x31e>
 800b01c:	455e      	cmp	r6, fp
 800b01e:	f67f aebf 	bls.w	800ada0 <_scanf_float+0x80>
 800b022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b026:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b02a:	463a      	mov	r2, r7
 800b02c:	4640      	mov	r0, r8
 800b02e:	4798      	blx	r3
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	3b01      	subs	r3, #1
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	e7f1      	b.n	800b01c <_scanf_float+0x2fc>
 800b038:	46aa      	mov	sl, r5
 800b03a:	9602      	str	r6, [sp, #8]
 800b03c:	e7df      	b.n	800affe <_scanf_float+0x2de>
 800b03e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	2965      	cmp	r1, #101	; 0x65
 800b046:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b04a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	d00c      	beq.n	800b06c <_scanf_float+0x34c>
 800b052:	2945      	cmp	r1, #69	; 0x45
 800b054:	d00a      	beq.n	800b06c <_scanf_float+0x34c>
 800b056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05a:	463a      	mov	r2, r7
 800b05c:	4640      	mov	r0, r8
 800b05e:	4798      	blx	r3
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b066:	3b01      	subs	r3, #1
 800b068:	1eb5      	subs	r5, r6, #2
 800b06a:	6123      	str	r3, [r4, #16]
 800b06c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b070:	463a      	mov	r2, r7
 800b072:	4640      	mov	r0, r8
 800b074:	4798      	blx	r3
 800b076:	462e      	mov	r6, r5
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	f015 0510 	ands.w	r5, r5, #16
 800b07e:	d159      	bne.n	800b134 <_scanf_float+0x414>
 800b080:	7035      	strb	r5, [r6, #0]
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b08c:	d11b      	bne.n	800b0c6 <_scanf_float+0x3a6>
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	454b      	cmp	r3, r9
 800b092:	eba3 0209 	sub.w	r2, r3, r9
 800b096:	d123      	bne.n	800b0e0 <_scanf_float+0x3c0>
 800b098:	2200      	movs	r2, #0
 800b09a:	4659      	mov	r1, fp
 800b09c:	4640      	mov	r0, r8
 800b09e:	f000 ffed 	bl	800c07c <_strtod_r>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	f012 0f02 	tst.w	r2, #2
 800b0aa:	ec57 6b10 	vmov	r6, r7, d0
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	d021      	beq.n	800b0f6 <_scanf_float+0x3d6>
 800b0b2:	9903      	ldr	r1, [sp, #12]
 800b0b4:	1d1a      	adds	r2, r3, #4
 800b0b6:	600a      	str	r2, [r1, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	e9c3 6700 	strd	r6, r7, [r3]
 800b0be:	68e3      	ldr	r3, [r4, #12]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	60e3      	str	r3, [r4, #12]
 800b0c4:	e66d      	b.n	800ada2 <_scanf_float+0x82>
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0e5      	beq.n	800b098 <_scanf_float+0x378>
 800b0cc:	9905      	ldr	r1, [sp, #20]
 800b0ce:	230a      	movs	r3, #10
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	3101      	adds	r1, #1
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f001 f8b5 	bl	800c244 <_strtol_r>
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	9e05      	ldr	r6, [sp, #20]
 800b0de:	1ac2      	subs	r2, r0, r3
 800b0e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b0e4:	429e      	cmp	r6, r3
 800b0e6:	bf28      	it	cs
 800b0e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b0ec:	4912      	ldr	r1, [pc, #72]	; (800b138 <_scanf_float+0x418>)
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 f91e 	bl	800b330 <siprintf>
 800b0f4:	e7d0      	b.n	800b098 <_scanf_float+0x378>
 800b0f6:	9903      	ldr	r1, [sp, #12]
 800b0f8:	f012 0f04 	tst.w	r2, #4
 800b0fc:	f103 0204 	add.w	r2, r3, #4
 800b100:	600a      	str	r2, [r1, #0]
 800b102:	d1d9      	bne.n	800b0b8 <_scanf_float+0x398>
 800b104:	f8d3 8000 	ldr.w	r8, [r3]
 800b108:	ee10 2a10 	vmov	r2, s0
 800b10c:	ee10 0a10 	vmov	r0, s0
 800b110:	463b      	mov	r3, r7
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fd3c 	bl	8000b90 <__aeabi_dcmpun>
 800b118:	b128      	cbz	r0, 800b126 <_scanf_float+0x406>
 800b11a:	4808      	ldr	r0, [pc, #32]	; (800b13c <_scanf_float+0x41c>)
 800b11c:	f7fe fcf4 	bl	8009b08 <nanf>
 800b120:	ed88 0a00 	vstr	s0, [r8]
 800b124:	e7cb      	b.n	800b0be <_scanf_float+0x39e>
 800b126:	4630      	mov	r0, r6
 800b128:	4639      	mov	r1, r7
 800b12a:	f7f5 fd8f 	bl	8000c4c <__aeabi_d2f>
 800b12e:	f8c8 0000 	str.w	r0, [r8]
 800b132:	e7c4      	b.n	800b0be <_scanf_float+0x39e>
 800b134:	2500      	movs	r5, #0
 800b136:	e634      	b.n	800ada2 <_scanf_float+0x82>
 800b138:	0800f625 	.word	0x0800f625
 800b13c:	0800f72f 	.word	0x0800f72f

0800b140 <iprintf>:
 800b140:	b40f      	push	{r0, r1, r2, r3}
 800b142:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <iprintf+0x2c>)
 800b144:	b513      	push	{r0, r1, r4, lr}
 800b146:	681c      	ldr	r4, [r3, #0]
 800b148:	b124      	cbz	r4, 800b154 <iprintf+0x14>
 800b14a:	69a3      	ldr	r3, [r4, #24]
 800b14c:	b913      	cbnz	r3, 800b154 <iprintf+0x14>
 800b14e:	4620      	mov	r0, r4
 800b150:	f7fe fe1a 	bl	8009d88 <__sinit>
 800b154:	ab05      	add	r3, sp, #20
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	68a1      	ldr	r1, [r4, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7ff f845 	bl	800a1ec <_vfiprintf_r>
 800b162:	b002      	add	sp, #8
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	b004      	add	sp, #16
 800b16a:	4770      	bx	lr
 800b16c:	2000002c 	.word	0x2000002c

0800b170 <putchar>:
 800b170:	4b09      	ldr	r3, [pc, #36]	; (800b198 <putchar+0x28>)
 800b172:	b513      	push	{r0, r1, r4, lr}
 800b174:	681c      	ldr	r4, [r3, #0]
 800b176:	4601      	mov	r1, r0
 800b178:	b134      	cbz	r4, 800b188 <putchar+0x18>
 800b17a:	69a3      	ldr	r3, [r4, #24]
 800b17c:	b923      	cbnz	r3, 800b188 <putchar+0x18>
 800b17e:	9001      	str	r0, [sp, #4]
 800b180:	4620      	mov	r0, r4
 800b182:	f7fe fe01 	bl	8009d88 <__sinit>
 800b186:	9901      	ldr	r1, [sp, #4]
 800b188:	68a2      	ldr	r2, [r4, #8]
 800b18a:	4620      	mov	r0, r4
 800b18c:	b002      	add	sp, #8
 800b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b192:	f003 ba4b 	b.w	800e62c <_putc_r>
 800b196:	bf00      	nop
 800b198:	2000002c 	.word	0x2000002c

0800b19c <_puts_r>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	460e      	mov	r6, r1
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b118      	cbz	r0, 800b1ac <_puts_r+0x10>
 800b1a4:	6983      	ldr	r3, [r0, #24]
 800b1a6:	b90b      	cbnz	r3, 800b1ac <_puts_r+0x10>
 800b1a8:	f7fe fdee 	bl	8009d88 <__sinit>
 800b1ac:	69ab      	ldr	r3, [r5, #24]
 800b1ae:	68ac      	ldr	r4, [r5, #8]
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_puts_r+0x1c>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f7fe fde8 	bl	8009d88 <__sinit>
 800b1b8:	4b2c      	ldr	r3, [pc, #176]	; (800b26c <_puts_r+0xd0>)
 800b1ba:	429c      	cmp	r4, r3
 800b1bc:	d120      	bne.n	800b200 <_puts_r+0x64>
 800b1be:	686c      	ldr	r4, [r5, #4]
 800b1c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d405      	bmi.n	800b1d2 <_puts_r+0x36>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	0598      	lsls	r0, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_puts_r+0x36>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f7fe feb0 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	0719      	lsls	r1, r3, #28
 800b1d6:	d51d      	bpl.n	800b214 <_puts_r+0x78>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	b1db      	cbz	r3, 800b214 <_puts_r+0x78>
 800b1dc:	3e01      	subs	r6, #1
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	60a3      	str	r3, [r4, #8]
 800b1e8:	bb39      	cbnz	r1, 800b23a <_puts_r+0x9e>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da38      	bge.n	800b260 <_puts_r+0xc4>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	210a      	movs	r1, #10
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f001 f832 	bl	800c25c <__swbuf_r>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d011      	beq.n	800b220 <_puts_r+0x84>
 800b1fc:	250a      	movs	r5, #10
 800b1fe:	e011      	b.n	800b224 <_puts_r+0x88>
 800b200:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <_puts_r+0xd4>)
 800b202:	429c      	cmp	r4, r3
 800b204:	d101      	bne.n	800b20a <_puts_r+0x6e>
 800b206:	68ac      	ldr	r4, [r5, #8]
 800b208:	e7da      	b.n	800b1c0 <_puts_r+0x24>
 800b20a:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <_puts_r+0xd8>)
 800b20c:	429c      	cmp	r4, r3
 800b20e:	bf08      	it	eq
 800b210:	68ec      	ldreq	r4, [r5, #12]
 800b212:	e7d5      	b.n	800b1c0 <_puts_r+0x24>
 800b214:	4621      	mov	r1, r4
 800b216:	4628      	mov	r0, r5
 800b218:	f001 f884 	bl	800c324 <__swsetup_r>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0dd      	beq.n	800b1dc <_puts_r+0x40>
 800b220:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b226:	07da      	lsls	r2, r3, #31
 800b228:	d405      	bmi.n	800b236 <_puts_r+0x9a>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_puts_r+0x9a>
 800b230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b232:	f7fe fe7f 	bl	8009f34 <__retarget_lock_release_recursive>
 800b236:	4628      	mov	r0, r5
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da04      	bge.n	800b248 <_puts_r+0xac>
 800b23e:	69a2      	ldr	r2, [r4, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	dc06      	bgt.n	800b252 <_puts_r+0xb6>
 800b244:	290a      	cmp	r1, #10
 800b246:	d004      	beq.n	800b252 <_puts_r+0xb6>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	7019      	strb	r1, [r3, #0]
 800b250:	e7c5      	b.n	800b1de <_puts_r+0x42>
 800b252:	4622      	mov	r2, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f001 f801 	bl	800c25c <__swbuf_r>
 800b25a:	3001      	adds	r0, #1
 800b25c:	d1bf      	bne.n	800b1de <_puts_r+0x42>
 800b25e:	e7df      	b.n	800b220 <_puts_r+0x84>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	250a      	movs	r5, #10
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	701d      	strb	r5, [r3, #0]
 800b26a:	e7db      	b.n	800b224 <_puts_r+0x88>
 800b26c:	0800f59c 	.word	0x0800f59c
 800b270:	0800f5bc 	.word	0x0800f5bc
 800b274:	0800f57c 	.word	0x0800f57c

0800b278 <puts>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <puts+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7ff bf8d 	b.w	800b19c <_puts_r>
 800b282:	bf00      	nop
 800b284:	2000002c 	.word	0x2000002c

0800b288 <_sbrk_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d06      	ldr	r5, [pc, #24]	; (800b2a4 <_sbrk_r+0x1c>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7f8 fb54 	bl	8003940 <_sbrk>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_sbrk_r+0x1a>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_sbrk_r+0x1a>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	200008ec 	.word	0x200008ec

0800b2a8 <_raise_r>:
 800b2a8:	291f      	cmp	r1, #31
 800b2aa:	b538      	push	{r3, r4, r5, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	d904      	bls.n	800b2bc <_raise_r+0x14>
 800b2b2:	2316      	movs	r3, #22
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2be:	b112      	cbz	r2, 800b2c6 <_raise_r+0x1e>
 800b2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2c4:	b94b      	cbnz	r3, 800b2da <_raise_r+0x32>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 f830 	bl	800b32c <_getpid_r>
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d6:	f000 b817 	b.w	800b308 <_kill_r>
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d00a      	beq.n	800b2f4 <_raise_r+0x4c>
 800b2de:	1c59      	adds	r1, r3, #1
 800b2e0:	d103      	bne.n	800b2ea <_raise_r+0x42>
 800b2e2:	2316      	movs	r3, #22
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	e7e7      	b.n	800b2ba <_raise_r+0x12>
 800b2ea:	2400      	movs	r4, #0
 800b2ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	4798      	blx	r3
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e7e0      	b.n	800b2ba <_raise_r+0x12>

0800b2f8 <raise>:
 800b2f8:	4b02      	ldr	r3, [pc, #8]	; (800b304 <raise+0xc>)
 800b2fa:	4601      	mov	r1, r0
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	f7ff bfd3 	b.w	800b2a8 <_raise_r>
 800b302:	bf00      	nop
 800b304:	2000002c 	.word	0x2000002c

0800b308 <_kill_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_kill_r+0x20>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	4611      	mov	r1, r2
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	f7f8 faa8 	bl	800386a <_kill>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	d102      	bne.n	800b324 <_kill_r+0x1c>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	b103      	cbz	r3, 800b324 <_kill_r+0x1c>
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	200008ec 	.word	0x200008ec

0800b32c <_getpid_r>:
 800b32c:	f7f8 ba95 	b.w	800385a <_getpid>

0800b330 <siprintf>:
 800b330:	b40e      	push	{r1, r2, r3}
 800b332:	b500      	push	{lr}
 800b334:	b09c      	sub	sp, #112	; 0x70
 800b336:	ab1d      	add	r3, sp, #116	; 0x74
 800b338:	9002      	str	r0, [sp, #8]
 800b33a:	9006      	str	r0, [sp, #24]
 800b33c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b340:	4809      	ldr	r0, [pc, #36]	; (800b368 <siprintf+0x38>)
 800b342:	9107      	str	r1, [sp, #28]
 800b344:	9104      	str	r1, [sp, #16]
 800b346:	4909      	ldr	r1, [pc, #36]	; (800b36c <siprintf+0x3c>)
 800b348:	f853 2b04 	ldr.w	r2, [r3], #4
 800b34c:	9105      	str	r1, [sp, #20]
 800b34e:	6800      	ldr	r0, [r0, #0]
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	a902      	add	r1, sp, #8
 800b354:	f003 f86a 	bl	800e42c <_svfiprintf_r>
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	2200      	movs	r2, #0
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	b01c      	add	sp, #112	; 0x70
 800b360:	f85d eb04 	ldr.w	lr, [sp], #4
 800b364:	b003      	add	sp, #12
 800b366:	4770      	bx	lr
 800b368:	2000002c 	.word	0x2000002c
 800b36c:	ffff0208 	.word	0xffff0208

0800b370 <__sread>:
 800b370:	b510      	push	{r4, lr}
 800b372:	460c      	mov	r4, r1
 800b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b378:	f003 f9a0 	bl	800e6bc <_read_r>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	bfab      	itete	ge
 800b380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b382:	89a3      	ldrhlt	r3, [r4, #12]
 800b384:	181b      	addge	r3, r3, r0
 800b386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b38a:	bfac      	ite	ge
 800b38c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b38e:	81a3      	strhlt	r3, [r4, #12]
 800b390:	bd10      	pop	{r4, pc}

0800b392 <__swrite>:
 800b392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b396:	461f      	mov	r7, r3
 800b398:	898b      	ldrh	r3, [r1, #12]
 800b39a:	05db      	lsls	r3, r3, #23
 800b39c:	4605      	mov	r5, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	d505      	bpl.n	800b3b0 <__swrite+0x1e>
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f002 fa46 	bl	800d83c <_lseek_r>
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	4632      	mov	r2, r6
 800b3be:	463b      	mov	r3, r7
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	f000 bf9b 	b.w	800c300 <_write_r>

0800b3ca <__sseek>:
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d2:	f002 fa33 	bl	800d83c <_lseek_r>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	bf15      	itete	ne
 800b3dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3e6:	81a3      	strheq	r3, [r4, #12]
 800b3e8:	bf18      	it	ne
 800b3ea:	81a3      	strhne	r3, [r4, #12]
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <__sclose>:
 800b3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f2:	f001 b823 	b.w	800c43c <_close_r>

0800b3f6 <strcpy>:
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fc:	f803 2b01 	strb.w	r2, [r3], #1
 800b400:	2a00      	cmp	r2, #0
 800b402:	d1f9      	bne.n	800b3f8 <strcpy+0x2>
 800b404:	4770      	bx	lr

0800b406 <strstr>:
 800b406:	780a      	ldrb	r2, [r1, #0]
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	b96a      	cbnz	r2, 800b428 <strstr+0x22>
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
 800b40e:	429a      	cmp	r2, r3
 800b410:	d109      	bne.n	800b426 <strstr+0x20>
 800b412:	460c      	mov	r4, r1
 800b414:	4605      	mov	r5, r0
 800b416:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0f6      	beq.n	800b40c <strstr+0x6>
 800b41e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b422:	429e      	cmp	r6, r3
 800b424:	d0f7      	beq.n	800b416 <strstr+0x10>
 800b426:	3001      	adds	r0, #1
 800b428:	7803      	ldrb	r3, [r0, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1ef      	bne.n	800b40e <strstr+0x8>
 800b42e:	4618      	mov	r0, r3
 800b430:	e7ec      	b.n	800b40c <strstr+0x6>

0800b432 <sulp>:
 800b432:	b570      	push	{r4, r5, r6, lr}
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
 800b438:	ec45 4b10 	vmov	d0, r4, r5
 800b43c:	4616      	mov	r6, r2
 800b43e:	f002 fe05 	bl	800e04c <__ulp>
 800b442:	ec51 0b10 	vmov	r0, r1, d0
 800b446:	b17e      	cbz	r6, 800b468 <sulp+0x36>
 800b448:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b44c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b450:	2b00      	cmp	r3, #0
 800b452:	dd09      	ble.n	800b468 <sulp+0x36>
 800b454:	051b      	lsls	r3, r3, #20
 800b456:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b45a:	2400      	movs	r4, #0
 800b45c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b460:	4622      	mov	r2, r4
 800b462:	462b      	mov	r3, r5
 800b464:	f7f5 f8fa 	bl	800065c <__aeabi_dmul>
 800b468:	bd70      	pop	{r4, r5, r6, pc}
 800b46a:	0000      	movs	r0, r0
 800b46c:	0000      	movs	r0, r0
	...

0800b470 <_strtod_l>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	ed2d 8b02 	vpush	{d8}
 800b478:	b09d      	sub	sp, #116	; 0x74
 800b47a:	461f      	mov	r7, r3
 800b47c:	2300      	movs	r3, #0
 800b47e:	9318      	str	r3, [sp, #96]	; 0x60
 800b480:	4ba2      	ldr	r3, [pc, #648]	; (800b70c <_strtod_l+0x29c>)
 800b482:	9213      	str	r2, [sp, #76]	; 0x4c
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	9305      	str	r3, [sp, #20]
 800b488:	4604      	mov	r4, r0
 800b48a:	4618      	mov	r0, r3
 800b48c:	4688      	mov	r8, r1
 800b48e:	f7f4 ff21 	bl	80002d4 <strlen>
 800b492:	f04f 0a00 	mov.w	sl, #0
 800b496:	4605      	mov	r5, r0
 800b498:	f04f 0b00 	mov.w	fp, #0
 800b49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	2a2b      	cmp	r2, #43	; 0x2b
 800b4a6:	d04e      	beq.n	800b546 <_strtod_l+0xd6>
 800b4a8:	d83b      	bhi.n	800b522 <_strtod_l+0xb2>
 800b4aa:	2a0d      	cmp	r2, #13
 800b4ac:	d834      	bhi.n	800b518 <_strtod_l+0xa8>
 800b4ae:	2a08      	cmp	r2, #8
 800b4b0:	d834      	bhi.n	800b51c <_strtod_l+0xac>
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d03e      	beq.n	800b534 <_strtod_l+0xc4>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4bc:	7833      	ldrb	r3, [r6, #0]
 800b4be:	2b30      	cmp	r3, #48	; 0x30
 800b4c0:	f040 80b0 	bne.w	800b624 <_strtod_l+0x1b4>
 800b4c4:	7873      	ldrb	r3, [r6, #1]
 800b4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4ca:	2b58      	cmp	r3, #88	; 0x58
 800b4cc:	d168      	bne.n	800b5a0 <_strtod_l+0x130>
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	ab18      	add	r3, sp, #96	; 0x60
 800b4d4:	9702      	str	r7, [sp, #8]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	4a8d      	ldr	r2, [pc, #564]	; (800b710 <_strtod_l+0x2a0>)
 800b4da:	ab19      	add	r3, sp, #100	; 0x64
 800b4dc:	a917      	add	r1, sp, #92	; 0x5c
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 fea0 	bl	800d224 <__gethex>
 800b4e4:	f010 0707 	ands.w	r7, r0, #7
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	d005      	beq.n	800b4f8 <_strtod_l+0x88>
 800b4ec:	2f06      	cmp	r7, #6
 800b4ee:	d12c      	bne.n	800b54a <_strtod_l+0xda>
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 8590 	bne.w	800c020 <_strtod_l+0xbb0>
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	b1eb      	cbz	r3, 800b540 <_strtod_l+0xd0>
 800b504:	4652      	mov	r2, sl
 800b506:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b50a:	ec43 2b10 	vmov	d0, r2, r3
 800b50e:	b01d      	add	sp, #116	; 0x74
 800b510:	ecbd 8b02 	vpop	{d8}
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	2a20      	cmp	r2, #32
 800b51a:	d1cc      	bne.n	800b4b6 <_strtod_l+0x46>
 800b51c:	3301      	adds	r3, #1
 800b51e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b520:	e7be      	b.n	800b4a0 <_strtod_l+0x30>
 800b522:	2a2d      	cmp	r2, #45	; 0x2d
 800b524:	d1c7      	bne.n	800b4b6 <_strtod_l+0x46>
 800b526:	2201      	movs	r2, #1
 800b528:	920a      	str	r2, [sp, #40]	; 0x28
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b52e:	785b      	ldrb	r3, [r3, #1]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1c2      	bne.n	800b4ba <_strtod_l+0x4a>
 800b534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b536:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f040 856e 	bne.w	800c01c <_strtod_l+0xbac>
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	e7e1      	b.n	800b50a <_strtod_l+0x9a>
 800b546:	2200      	movs	r2, #0
 800b548:	e7ee      	b.n	800b528 <_strtod_l+0xb8>
 800b54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b54c:	b13a      	cbz	r2, 800b55e <_strtod_l+0xee>
 800b54e:	2135      	movs	r1, #53	; 0x35
 800b550:	a81a      	add	r0, sp, #104	; 0x68
 800b552:	f002 fe86 	bl	800e262 <__copybits>
 800b556:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b558:	4620      	mov	r0, r4
 800b55a:	f002 fa45 	bl	800d9e8 <_Bfree>
 800b55e:	3f01      	subs	r7, #1
 800b560:	2f04      	cmp	r7, #4
 800b562:	d806      	bhi.n	800b572 <_strtod_l+0x102>
 800b564:	e8df f007 	tbb	[pc, r7]
 800b568:	1714030a 	.word	0x1714030a
 800b56c:	0a          	.byte	0x0a
 800b56d:	00          	.byte	0x00
 800b56e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b572:	0728      	lsls	r0, r5, #28
 800b574:	d5c0      	bpl.n	800b4f8 <_strtod_l+0x88>
 800b576:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b57a:	e7bd      	b.n	800b4f8 <_strtod_l+0x88>
 800b57c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b586:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b58a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b58e:	e7f0      	b.n	800b572 <_strtod_l+0x102>
 800b590:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b714 <_strtod_l+0x2a4>
 800b594:	e7ed      	b.n	800b572 <_strtod_l+0x102>
 800b596:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b59a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b59e:	e7e8      	b.n	800b572 <_strtod_l+0x102>
 800b5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5a6:	785b      	ldrb	r3, [r3, #1]
 800b5a8:	2b30      	cmp	r3, #48	; 0x30
 800b5aa:	d0f9      	beq.n	800b5a0 <_strtod_l+0x130>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0a3      	beq.n	800b4f8 <_strtod_l+0x88>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f04f 0900 	mov.w	r9, #0
 800b5b6:	9304      	str	r3, [sp, #16]
 800b5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b5c0:	464f      	mov	r7, r9
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b5c6:	7806      	ldrb	r6, [r0, #0]
 800b5c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b5cc:	b2d9      	uxtb	r1, r3
 800b5ce:	2909      	cmp	r1, #9
 800b5d0:	d92a      	bls.n	800b628 <_strtod_l+0x1b8>
 800b5d2:	9905      	ldr	r1, [sp, #20]
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	f003 f88b 	bl	800e6f0 <strncmp>
 800b5da:	b398      	cbz	r0, 800b644 <_strtod_l+0x1d4>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	4632      	mov	r2, r6
 800b5e0:	463d      	mov	r5, r7
 800b5e2:	9005      	str	r0, [sp, #20]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2a65      	cmp	r2, #101	; 0x65
 800b5e8:	d001      	beq.n	800b5ee <_strtod_l+0x17e>
 800b5ea:	2a45      	cmp	r2, #69	; 0x45
 800b5ec:	d118      	bne.n	800b620 <_strtod_l+0x1b0>
 800b5ee:	b91d      	cbnz	r5, 800b5f8 <_strtod_l+0x188>
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	4302      	orrs	r2, r0
 800b5f4:	d09e      	beq.n	800b534 <_strtod_l+0xc4>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b5fc:	f108 0201 	add.w	r2, r8, #1
 800b600:	9217      	str	r2, [sp, #92]	; 0x5c
 800b602:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b606:	2a2b      	cmp	r2, #43	; 0x2b
 800b608:	d075      	beq.n	800b6f6 <_strtod_l+0x286>
 800b60a:	2a2d      	cmp	r2, #45	; 0x2d
 800b60c:	d07b      	beq.n	800b706 <_strtod_l+0x296>
 800b60e:	f04f 0c00 	mov.w	ip, #0
 800b612:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b616:	2909      	cmp	r1, #9
 800b618:	f240 8082 	bls.w	800b720 <_strtod_l+0x2b0>
 800b61c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b620:	2600      	movs	r6, #0
 800b622:	e09d      	b.n	800b760 <_strtod_l+0x2f0>
 800b624:	2300      	movs	r3, #0
 800b626:	e7c4      	b.n	800b5b2 <_strtod_l+0x142>
 800b628:	2f08      	cmp	r7, #8
 800b62a:	bfd8      	it	le
 800b62c:	9907      	ldrle	r1, [sp, #28]
 800b62e:	f100 0001 	add.w	r0, r0, #1
 800b632:	bfda      	itte	le
 800b634:	fb02 3301 	mlale	r3, r2, r1, r3
 800b638:	9307      	strle	r3, [sp, #28]
 800b63a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b63e:	3701      	adds	r7, #1
 800b640:	9017      	str	r0, [sp, #92]	; 0x5c
 800b642:	e7bf      	b.n	800b5c4 <_strtod_l+0x154>
 800b644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b646:	195a      	adds	r2, r3, r5
 800b648:	9217      	str	r2, [sp, #92]	; 0x5c
 800b64a:	5d5a      	ldrb	r2, [r3, r5]
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	d037      	beq.n	800b6c0 <_strtod_l+0x250>
 800b650:	9005      	str	r0, [sp, #20]
 800b652:	463d      	mov	r5, r7
 800b654:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b658:	2b09      	cmp	r3, #9
 800b65a:	d912      	bls.n	800b682 <_strtod_l+0x212>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e7c2      	b.n	800b5e6 <_strtod_l+0x176>
 800b660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	9217      	str	r2, [sp, #92]	; 0x5c
 800b666:	785a      	ldrb	r2, [r3, #1]
 800b668:	3001      	adds	r0, #1
 800b66a:	2a30      	cmp	r2, #48	; 0x30
 800b66c:	d0f8      	beq.n	800b660 <_strtod_l+0x1f0>
 800b66e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b672:	2b08      	cmp	r3, #8
 800b674:	f200 84d9 	bhi.w	800c02a <_strtod_l+0xbba>
 800b678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b67a:	9005      	str	r0, [sp, #20]
 800b67c:	2000      	movs	r0, #0
 800b67e:	9308      	str	r3, [sp, #32]
 800b680:	4605      	mov	r5, r0
 800b682:	3a30      	subs	r2, #48	; 0x30
 800b684:	f100 0301 	add.w	r3, r0, #1
 800b688:	d014      	beq.n	800b6b4 <_strtod_l+0x244>
 800b68a:	9905      	ldr	r1, [sp, #20]
 800b68c:	4419      	add	r1, r3
 800b68e:	9105      	str	r1, [sp, #20]
 800b690:	462b      	mov	r3, r5
 800b692:	eb00 0e05 	add.w	lr, r0, r5
 800b696:	210a      	movs	r1, #10
 800b698:	4573      	cmp	r3, lr
 800b69a:	d113      	bne.n	800b6c4 <_strtod_l+0x254>
 800b69c:	182b      	adds	r3, r5, r0
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	f105 0501 	add.w	r5, r5, #1
 800b6a4:	4405      	add	r5, r0
 800b6a6:	dc1c      	bgt.n	800b6e2 <_strtod_l+0x272>
 800b6a8:	9907      	ldr	r1, [sp, #28]
 800b6aa:	230a      	movs	r3, #10
 800b6ac:	fb03 2301 	mla	r3, r3, r1, r2
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6b6:	1c51      	adds	r1, r2, #1
 800b6b8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b6ba:	7852      	ldrb	r2, [r2, #1]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	e7c9      	b.n	800b654 <_strtod_l+0x1e4>
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	e7d2      	b.n	800b66a <_strtod_l+0x1fa>
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	dc04      	bgt.n	800b6d2 <_strtod_l+0x262>
 800b6c8:	9e07      	ldr	r6, [sp, #28]
 800b6ca:	434e      	muls	r6, r1
 800b6cc:	9607      	str	r6, [sp, #28]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	e7e2      	b.n	800b698 <_strtod_l+0x228>
 800b6d2:	f103 0c01 	add.w	ip, r3, #1
 800b6d6:	f1bc 0f10 	cmp.w	ip, #16
 800b6da:	bfd8      	it	le
 800b6dc:	fb01 f909 	mulle.w	r9, r1, r9
 800b6e0:	e7f5      	b.n	800b6ce <_strtod_l+0x25e>
 800b6e2:	2d10      	cmp	r5, #16
 800b6e4:	bfdc      	itt	le
 800b6e6:	230a      	movle	r3, #10
 800b6e8:	fb03 2909 	mlale	r9, r3, r9, r2
 800b6ec:	e7e1      	b.n	800b6b2 <_strtod_l+0x242>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9305      	str	r3, [sp, #20]
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e77c      	b.n	800b5f0 <_strtod_l+0x180>
 800b6f6:	f04f 0c00 	mov.w	ip, #0
 800b6fa:	f108 0202 	add.w	r2, r8, #2
 800b6fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800b700:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b704:	e785      	b.n	800b612 <_strtod_l+0x1a2>
 800b706:	f04f 0c01 	mov.w	ip, #1
 800b70a:	e7f6      	b.n	800b6fa <_strtod_l+0x28a>
 800b70c:	0800f910 	.word	0x0800f910
 800b710:	0800f62c 	.word	0x0800f62c
 800b714:	7ff00000 	.word	0x7ff00000
 800b718:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b71a:	1c51      	adds	r1, r2, #1
 800b71c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b71e:	7852      	ldrb	r2, [r2, #1]
 800b720:	2a30      	cmp	r2, #48	; 0x30
 800b722:	d0f9      	beq.n	800b718 <_strtod_l+0x2a8>
 800b724:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b728:	2908      	cmp	r1, #8
 800b72a:	f63f af79 	bhi.w	800b620 <_strtod_l+0x1b0>
 800b72e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b734:	9206      	str	r2, [sp, #24]
 800b736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b738:	1c51      	adds	r1, r2, #1
 800b73a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b73c:	7852      	ldrb	r2, [r2, #1]
 800b73e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b742:	2e09      	cmp	r6, #9
 800b744:	d937      	bls.n	800b7b6 <_strtod_l+0x346>
 800b746:	9e06      	ldr	r6, [sp, #24]
 800b748:	1b89      	subs	r1, r1, r6
 800b74a:	2908      	cmp	r1, #8
 800b74c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b750:	dc02      	bgt.n	800b758 <_strtod_l+0x2e8>
 800b752:	4576      	cmp	r6, lr
 800b754:	bfa8      	it	ge
 800b756:	4676      	movge	r6, lr
 800b758:	f1bc 0f00 	cmp.w	ip, #0
 800b75c:	d000      	beq.n	800b760 <_strtod_l+0x2f0>
 800b75e:	4276      	negs	r6, r6
 800b760:	2d00      	cmp	r5, #0
 800b762:	d14d      	bne.n	800b800 <_strtod_l+0x390>
 800b764:	9904      	ldr	r1, [sp, #16]
 800b766:	4301      	orrs	r1, r0
 800b768:	f47f aec6 	bne.w	800b4f8 <_strtod_l+0x88>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f47f aee1 	bne.w	800b534 <_strtod_l+0xc4>
 800b772:	2a69      	cmp	r2, #105	; 0x69
 800b774:	d027      	beq.n	800b7c6 <_strtod_l+0x356>
 800b776:	dc24      	bgt.n	800b7c2 <_strtod_l+0x352>
 800b778:	2a49      	cmp	r2, #73	; 0x49
 800b77a:	d024      	beq.n	800b7c6 <_strtod_l+0x356>
 800b77c:	2a4e      	cmp	r2, #78	; 0x4e
 800b77e:	f47f aed9 	bne.w	800b534 <_strtod_l+0xc4>
 800b782:	499f      	ldr	r1, [pc, #636]	; (800ba00 <_strtod_l+0x590>)
 800b784:	a817      	add	r0, sp, #92	; 0x5c
 800b786:	f001 ffa5 	bl	800d6d4 <__match>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f aed2 	beq.w	800b534 <_strtod_l+0xc4>
 800b790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b28      	cmp	r3, #40	; 0x28
 800b796:	d12d      	bne.n	800b7f4 <_strtod_l+0x384>
 800b798:	499a      	ldr	r1, [pc, #616]	; (800ba04 <_strtod_l+0x594>)
 800b79a:	aa1a      	add	r2, sp, #104	; 0x68
 800b79c:	a817      	add	r0, sp, #92	; 0x5c
 800b79e:	f001 ffad 	bl	800d6fc <__hexnan>
 800b7a2:	2805      	cmp	r0, #5
 800b7a4:	d126      	bne.n	800b7f4 <_strtod_l+0x384>
 800b7a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b7ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b7b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b7b4:	e6a0      	b.n	800b4f8 <_strtod_l+0x88>
 800b7b6:	210a      	movs	r1, #10
 800b7b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b7bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b7c0:	e7b9      	b.n	800b736 <_strtod_l+0x2c6>
 800b7c2:	2a6e      	cmp	r2, #110	; 0x6e
 800b7c4:	e7db      	b.n	800b77e <_strtod_l+0x30e>
 800b7c6:	4990      	ldr	r1, [pc, #576]	; (800ba08 <_strtod_l+0x598>)
 800b7c8:	a817      	add	r0, sp, #92	; 0x5c
 800b7ca:	f001 ff83 	bl	800d6d4 <__match>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f43f aeb0 	beq.w	800b534 <_strtod_l+0xc4>
 800b7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7d6:	498d      	ldr	r1, [pc, #564]	; (800ba0c <_strtod_l+0x59c>)
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	a817      	add	r0, sp, #92	; 0x5c
 800b7dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7de:	f001 ff79 	bl	800d6d4 <__match>
 800b7e2:	b910      	cbnz	r0, 800b7ea <_strtod_l+0x37a>
 800b7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ba1c <_strtod_l+0x5ac>
 800b7ee:	f04f 0a00 	mov.w	sl, #0
 800b7f2:	e681      	b.n	800b4f8 <_strtod_l+0x88>
 800b7f4:	4886      	ldr	r0, [pc, #536]	; (800ba10 <_strtod_l+0x5a0>)
 800b7f6:	f002 ff73 	bl	800e6e0 <nan>
 800b7fa:	ec5b ab10 	vmov	sl, fp, d0
 800b7fe:	e67b      	b.n	800b4f8 <_strtod_l+0x88>
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	9807      	ldr	r0, [sp, #28]
 800b804:	1af3      	subs	r3, r6, r3
 800b806:	2f00      	cmp	r7, #0
 800b808:	bf08      	it	eq
 800b80a:	462f      	moveq	r7, r5
 800b80c:	2d10      	cmp	r5, #16
 800b80e:	9306      	str	r3, [sp, #24]
 800b810:	46a8      	mov	r8, r5
 800b812:	bfa8      	it	ge
 800b814:	f04f 0810 	movge.w	r8, #16
 800b818:	f7f4 fea6 	bl	8000568 <__aeabi_ui2d>
 800b81c:	2d09      	cmp	r5, #9
 800b81e:	4682      	mov	sl, r0
 800b820:	468b      	mov	fp, r1
 800b822:	dd13      	ble.n	800b84c <_strtod_l+0x3dc>
 800b824:	4b7b      	ldr	r3, [pc, #492]	; (800ba14 <_strtod_l+0x5a4>)
 800b826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b82a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b82e:	f7f4 ff15 	bl	800065c <__aeabi_dmul>
 800b832:	4682      	mov	sl, r0
 800b834:	4648      	mov	r0, r9
 800b836:	468b      	mov	fp, r1
 800b838:	f7f4 fe96 	bl	8000568 <__aeabi_ui2d>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4650      	mov	r0, sl
 800b842:	4659      	mov	r1, fp
 800b844:	f7f4 fd54 	bl	80002f0 <__adddf3>
 800b848:	4682      	mov	sl, r0
 800b84a:	468b      	mov	fp, r1
 800b84c:	2d0f      	cmp	r5, #15
 800b84e:	dc38      	bgt.n	800b8c2 <_strtod_l+0x452>
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f43f ae50 	beq.w	800b4f8 <_strtod_l+0x88>
 800b858:	dd24      	ble.n	800b8a4 <_strtod_l+0x434>
 800b85a:	2b16      	cmp	r3, #22
 800b85c:	dc0b      	bgt.n	800b876 <_strtod_l+0x406>
 800b85e:	496d      	ldr	r1, [pc, #436]	; (800ba14 <_strtod_l+0x5a4>)
 800b860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b868:	4652      	mov	r2, sl
 800b86a:	465b      	mov	r3, fp
 800b86c:	f7f4 fef6 	bl	800065c <__aeabi_dmul>
 800b870:	4682      	mov	sl, r0
 800b872:	468b      	mov	fp, r1
 800b874:	e640      	b.n	800b4f8 <_strtod_l+0x88>
 800b876:	9a06      	ldr	r2, [sp, #24]
 800b878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b87c:	4293      	cmp	r3, r2
 800b87e:	db20      	blt.n	800b8c2 <_strtod_l+0x452>
 800b880:	4c64      	ldr	r4, [pc, #400]	; (800ba14 <_strtod_l+0x5a4>)
 800b882:	f1c5 050f 	rsb	r5, r5, #15
 800b886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b88a:	4652      	mov	r2, sl
 800b88c:	465b      	mov	r3, fp
 800b88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b892:	f7f4 fee3 	bl	800065c <__aeabi_dmul>
 800b896:	9b06      	ldr	r3, [sp, #24]
 800b898:	1b5d      	subs	r5, r3, r5
 800b89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8a2:	e7e3      	b.n	800b86c <_strtod_l+0x3fc>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	3316      	adds	r3, #22
 800b8a8:	db0b      	blt.n	800b8c2 <_strtod_l+0x452>
 800b8aa:	9b05      	ldr	r3, [sp, #20]
 800b8ac:	1b9e      	subs	r6, r3, r6
 800b8ae:	4b59      	ldr	r3, [pc, #356]	; (800ba14 <_strtod_l+0x5a4>)
 800b8b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f7f4 fff8 	bl	80008b0 <__aeabi_ddiv>
 800b8c0:	e7d6      	b.n	800b870 <_strtod_l+0x400>
 800b8c2:	9b06      	ldr	r3, [sp, #24]
 800b8c4:	eba5 0808 	sub.w	r8, r5, r8
 800b8c8:	4498      	add	r8, r3
 800b8ca:	f1b8 0f00 	cmp.w	r8, #0
 800b8ce:	dd74      	ble.n	800b9ba <_strtod_l+0x54a>
 800b8d0:	f018 030f 	ands.w	r3, r8, #15
 800b8d4:	d00a      	beq.n	800b8ec <_strtod_l+0x47c>
 800b8d6:	494f      	ldr	r1, [pc, #316]	; (800ba14 <_strtod_l+0x5a4>)
 800b8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8dc:	4652      	mov	r2, sl
 800b8de:	465b      	mov	r3, fp
 800b8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e4:	f7f4 feba 	bl	800065c <__aeabi_dmul>
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	f038 080f 	bics.w	r8, r8, #15
 800b8f0:	d04f      	beq.n	800b992 <_strtod_l+0x522>
 800b8f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b8f6:	dd22      	ble.n	800b93e <_strtod_l+0x4ce>
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	462e      	mov	r6, r5
 800b8fc:	9507      	str	r5, [sp, #28]
 800b8fe:	9505      	str	r5, [sp, #20]
 800b900:	2322      	movs	r3, #34	; 0x22
 800b902:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ba1c <_strtod_l+0x5ac>
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	f04f 0a00 	mov.w	sl, #0
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f43f adf2 	beq.w	800b4f8 <_strtod_l+0x88>
 800b914:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b916:	4620      	mov	r0, r4
 800b918:	f002 f866 	bl	800d9e8 <_Bfree>
 800b91c:	9905      	ldr	r1, [sp, #20]
 800b91e:	4620      	mov	r0, r4
 800b920:	f002 f862 	bl	800d9e8 <_Bfree>
 800b924:	4631      	mov	r1, r6
 800b926:	4620      	mov	r0, r4
 800b928:	f002 f85e 	bl	800d9e8 <_Bfree>
 800b92c:	9907      	ldr	r1, [sp, #28]
 800b92e:	4620      	mov	r0, r4
 800b930:	f002 f85a 	bl	800d9e8 <_Bfree>
 800b934:	4629      	mov	r1, r5
 800b936:	4620      	mov	r0, r4
 800b938:	f002 f856 	bl	800d9e8 <_Bfree>
 800b93c:	e5dc      	b.n	800b4f8 <_strtod_l+0x88>
 800b93e:	4b36      	ldr	r3, [pc, #216]	; (800ba18 <_strtod_l+0x5a8>)
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	2300      	movs	r3, #0
 800b944:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b948:	4650      	mov	r0, sl
 800b94a:	4659      	mov	r1, fp
 800b94c:	4699      	mov	r9, r3
 800b94e:	f1b8 0f01 	cmp.w	r8, #1
 800b952:	dc21      	bgt.n	800b998 <_strtod_l+0x528>
 800b954:	b10b      	cbz	r3, 800b95a <_strtod_l+0x4ea>
 800b956:	4682      	mov	sl, r0
 800b958:	468b      	mov	fp, r1
 800b95a:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <_strtod_l+0x5a8>)
 800b95c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b960:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b964:	4652      	mov	r2, sl
 800b966:	465b      	mov	r3, fp
 800b968:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b96c:	f7f4 fe76 	bl	800065c <__aeabi_dmul>
 800b970:	4b2a      	ldr	r3, [pc, #168]	; (800ba1c <_strtod_l+0x5ac>)
 800b972:	460a      	mov	r2, r1
 800b974:	400b      	ands	r3, r1
 800b976:	492a      	ldr	r1, [pc, #168]	; (800ba20 <_strtod_l+0x5b0>)
 800b978:	428b      	cmp	r3, r1
 800b97a:	4682      	mov	sl, r0
 800b97c:	d8bc      	bhi.n	800b8f8 <_strtod_l+0x488>
 800b97e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b982:	428b      	cmp	r3, r1
 800b984:	bf86      	itte	hi
 800b986:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ba24 <_strtod_l+0x5b4>
 800b98a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b98e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b992:	2300      	movs	r3, #0
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	e084      	b.n	800baa2 <_strtod_l+0x632>
 800b998:	f018 0f01 	tst.w	r8, #1
 800b99c:	d005      	beq.n	800b9aa <_strtod_l+0x53a>
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fe5a 	bl	800065c <__aeabi_dmul>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	9a04      	ldr	r2, [sp, #16]
 800b9ac:	3208      	adds	r2, #8
 800b9ae:	f109 0901 	add.w	r9, r9, #1
 800b9b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b9b6:	9204      	str	r2, [sp, #16]
 800b9b8:	e7c9      	b.n	800b94e <_strtod_l+0x4de>
 800b9ba:	d0ea      	beq.n	800b992 <_strtod_l+0x522>
 800b9bc:	f1c8 0800 	rsb	r8, r8, #0
 800b9c0:	f018 020f 	ands.w	r2, r8, #15
 800b9c4:	d00a      	beq.n	800b9dc <_strtod_l+0x56c>
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <_strtod_l+0x5a4>)
 800b9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f7f4 ff6c 	bl	80008b0 <__aeabi_ddiv>
 800b9d8:	4682      	mov	sl, r0
 800b9da:	468b      	mov	fp, r1
 800b9dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b9e0:	d0d7      	beq.n	800b992 <_strtod_l+0x522>
 800b9e2:	f1b8 0f1f 	cmp.w	r8, #31
 800b9e6:	dd1f      	ble.n	800ba28 <_strtod_l+0x5b8>
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	462e      	mov	r6, r5
 800b9ec:	9507      	str	r5, [sp, #28]
 800b9ee:	9505      	str	r5, [sp, #20]
 800b9f0:	2322      	movs	r3, #34	; 0x22
 800b9f2:	f04f 0a00 	mov.w	sl, #0
 800b9f6:	f04f 0b00 	mov.w	fp, #0
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	e786      	b.n	800b90c <_strtod_l+0x49c>
 800b9fe:	bf00      	nop
 800ba00:	0800f5fe 	.word	0x0800f5fe
 800ba04:	0800f640 	.word	0x0800f640
 800ba08:	0800f5f6 	.word	0x0800f5f6
 800ba0c:	0800f834 	.word	0x0800f834
 800ba10:	0800f72f 	.word	0x0800f72f
 800ba14:	0800f9a8 	.word	0x0800f9a8
 800ba18:	0800f980 	.word	0x0800f980
 800ba1c:	7ff00000 	.word	0x7ff00000
 800ba20:	7ca00000 	.word	0x7ca00000
 800ba24:	7fefffff 	.word	0x7fefffff
 800ba28:	f018 0310 	ands.w	r3, r8, #16
 800ba2c:	bf18      	it	ne
 800ba2e:	236a      	movne	r3, #106	; 0x6a
 800ba30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bde0 <_strtod_l+0x970>
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	4650      	mov	r0, sl
 800ba38:	4659      	mov	r1, fp
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f018 0f01 	tst.w	r8, #1
 800ba40:	d004      	beq.n	800ba4c <_strtod_l+0x5dc>
 800ba42:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba46:	f7f4 fe09 	bl	800065c <__aeabi_dmul>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ba50:	f109 0908 	add.w	r9, r9, #8
 800ba54:	d1f2      	bne.n	800ba3c <_strtod_l+0x5cc>
 800ba56:	b10b      	cbz	r3, 800ba5c <_strtod_l+0x5ec>
 800ba58:	4682      	mov	sl, r0
 800ba5a:	468b      	mov	fp, r1
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	b1c3      	cbz	r3, 800ba92 <_strtod_l+0x622>
 800ba60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	dd11      	ble.n	800ba92 <_strtod_l+0x622>
 800ba6e:	2b1f      	cmp	r3, #31
 800ba70:	f340 8124 	ble.w	800bcbc <_strtod_l+0x84c>
 800ba74:	2b34      	cmp	r3, #52	; 0x34
 800ba76:	bfde      	ittt	le
 800ba78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ba7c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ba80:	fa03 f202 	lslle.w	r2, r3, r2
 800ba84:	f04f 0a00 	mov.w	sl, #0
 800ba88:	bfcc      	ite	gt
 800ba8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ba8e:	ea02 0b01 	andle.w	fp, r2, r1
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4650      	mov	r0, sl
 800ba98:	4659      	mov	r1, fp
 800ba9a:	f7f5 f847 	bl	8000b2c <__aeabi_dcmpeq>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d1a2      	bne.n	800b9e8 <_strtod_l+0x578>
 800baa2:	9b07      	ldr	r3, [sp, #28]
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	9908      	ldr	r1, [sp, #32]
 800baa8:	462b      	mov	r3, r5
 800baaa:	463a      	mov	r2, r7
 800baac:	4620      	mov	r0, r4
 800baae:	f002 f803 	bl	800dab8 <__s2b>
 800bab2:	9007      	str	r0, [sp, #28]
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f43f af1f 	beq.w	800b8f8 <_strtod_l+0x488>
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	1b9e      	subs	r6, r3, r6
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfb4      	ite	lt
 800bac4:	4633      	movlt	r3, r6
 800bac6:	2300      	movge	r3, #0
 800bac8:	930c      	str	r3, [sp, #48]	; 0x30
 800baca:	9b06      	ldr	r3, [sp, #24]
 800bacc:	2500      	movs	r5, #0
 800bace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bad2:	9312      	str	r3, [sp, #72]	; 0x48
 800bad4:	462e      	mov	r6, r5
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	4620      	mov	r0, r4
 800bada:	6859      	ldr	r1, [r3, #4]
 800badc:	f001 ff44 	bl	800d968 <_Balloc>
 800bae0:	9005      	str	r0, [sp, #20]
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f43f af0c 	beq.w	800b900 <_strtod_l+0x490>
 800bae8:	9b07      	ldr	r3, [sp, #28]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	3202      	adds	r2, #2
 800baee:	f103 010c 	add.w	r1, r3, #12
 800baf2:	0092      	lsls	r2, r2, #2
 800baf4:	300c      	adds	r0, #12
 800baf6:	f7fe fa3f 	bl	8009f78 <memcpy>
 800bafa:	ec4b ab10 	vmov	d0, sl, fp
 800bafe:	aa1a      	add	r2, sp, #104	; 0x68
 800bb00:	a919      	add	r1, sp, #100	; 0x64
 800bb02:	4620      	mov	r0, r4
 800bb04:	f002 fb1e 	bl	800e144 <__d2b>
 800bb08:	ec4b ab18 	vmov	d8, sl, fp
 800bb0c:	9018      	str	r0, [sp, #96]	; 0x60
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f43f aef6 	beq.w	800b900 <_strtod_l+0x490>
 800bb14:	2101      	movs	r1, #1
 800bb16:	4620      	mov	r0, r4
 800bb18:	f002 f868 	bl	800dbec <__i2b>
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f43f aeee 	beq.w	800b900 <_strtod_l+0x490>
 800bb24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb26:	9904      	ldr	r1, [sp, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfab      	itete	ge
 800bb2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bb2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bb30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bb32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bb36:	bfac      	ite	ge
 800bb38:	eb03 0902 	addge.w	r9, r3, r2
 800bb3c:	1ad7      	sublt	r7, r2, r3
 800bb3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb40:	eba3 0801 	sub.w	r8, r3, r1
 800bb44:	4490      	add	r8, r2
 800bb46:	4ba1      	ldr	r3, [pc, #644]	; (800bdcc <_strtod_l+0x95c>)
 800bb48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb4c:	4598      	cmp	r8, r3
 800bb4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb52:	f280 80c7 	bge.w	800bce4 <_strtod_l+0x874>
 800bb56:	eba3 0308 	sub.w	r3, r3, r8
 800bb5a:	2b1f      	cmp	r3, #31
 800bb5c:	eba2 0203 	sub.w	r2, r2, r3
 800bb60:	f04f 0101 	mov.w	r1, #1
 800bb64:	f300 80b1 	bgt.w	800bcca <_strtod_l+0x85a>
 800bb68:	fa01 f303 	lsl.w	r3, r1, r3
 800bb6c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9308      	str	r3, [sp, #32]
 800bb72:	eb09 0802 	add.w	r8, r9, r2
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	45c1      	cmp	r9, r8
 800bb7a:	4417      	add	r7, r2
 800bb7c:	441f      	add	r7, r3
 800bb7e:	464b      	mov	r3, r9
 800bb80:	bfa8      	it	ge
 800bb82:	4643      	movge	r3, r8
 800bb84:	42bb      	cmp	r3, r7
 800bb86:	bfa8      	it	ge
 800bb88:	463b      	movge	r3, r7
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bfc2      	ittt	gt
 800bb8e:	eba8 0803 	subgt.w	r8, r8, r3
 800bb92:	1aff      	subgt	r7, r7, r3
 800bb94:	eba9 0903 	subgt.w	r9, r9, r3
 800bb98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd17      	ble.n	800bbce <_strtod_l+0x75e>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	461a      	mov	r2, r3
 800bba2:	4620      	mov	r0, r4
 800bba4:	f002 f8e2 	bl	800dd6c <__pow5mult>
 800bba8:	4606      	mov	r6, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f43f aea8 	beq.w	800b900 <_strtod_l+0x490>
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f002 f82f 	bl	800dc18 <__multiply>
 800bbba:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	f43f ae9f 	beq.w	800b900 <_strtod_l+0x490>
 800bbc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f001 ff0f 	bl	800d9e8 <_Bfree>
 800bbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbcc:	9318      	str	r3, [sp, #96]	; 0x60
 800bbce:	f1b8 0f00 	cmp.w	r8, #0
 800bbd2:	f300 808c 	bgt.w	800bcee <_strtod_l+0x87e>
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd08      	ble.n	800bbee <_strtod_l+0x77e>
 800bbdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbde:	9905      	ldr	r1, [sp, #20]
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f002 f8c3 	bl	800dd6c <__pow5mult>
 800bbe6:	9005      	str	r0, [sp, #20]
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f43f ae89 	beq.w	800b900 <_strtod_l+0x490>
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	dd08      	ble.n	800bc04 <_strtod_l+0x794>
 800bbf2:	9905      	ldr	r1, [sp, #20]
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f002 f912 	bl	800de20 <__lshift>
 800bbfc:	9005      	str	r0, [sp, #20]
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f ae7e 	beq.w	800b900 <_strtod_l+0x490>
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	dd08      	ble.n	800bc1c <_strtod_l+0x7ac>
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	464a      	mov	r2, r9
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f002 f906 	bl	800de20 <__lshift>
 800bc14:	4606      	mov	r6, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f43f ae72 	beq.w	800b900 <_strtod_l+0x490>
 800bc1c:	9a05      	ldr	r2, [sp, #20]
 800bc1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc20:	4620      	mov	r0, r4
 800bc22:	f002 f989 	bl	800df38 <__mdiff>
 800bc26:	4605      	mov	r5, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f ae69 	beq.w	800b900 <_strtod_l+0x490>
 800bc2e:	68c3      	ldr	r3, [r0, #12]
 800bc30:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc32:	2300      	movs	r3, #0
 800bc34:	60c3      	str	r3, [r0, #12]
 800bc36:	4631      	mov	r1, r6
 800bc38:	f002 f962 	bl	800df00 <__mcmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	da60      	bge.n	800bd02 <_strtod_l+0x892>
 800bc40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc42:	ea53 030a 	orrs.w	r3, r3, sl
 800bc46:	f040 8082 	bne.w	800bd4e <_strtod_l+0x8de>
 800bc4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d17d      	bne.n	800bd4e <_strtod_l+0x8de>
 800bc52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc56:	0d1b      	lsrs	r3, r3, #20
 800bc58:	051b      	lsls	r3, r3, #20
 800bc5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc5e:	d976      	bls.n	800bd4e <_strtod_l+0x8de>
 800bc60:	696b      	ldr	r3, [r5, #20]
 800bc62:	b913      	cbnz	r3, 800bc6a <_strtod_l+0x7fa>
 800bc64:	692b      	ldr	r3, [r5, #16]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	dd71      	ble.n	800bd4e <_strtod_l+0x8de>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f002 f8d6 	bl	800de20 <__lshift>
 800bc74:	4631      	mov	r1, r6
 800bc76:	4605      	mov	r5, r0
 800bc78:	f002 f942 	bl	800df00 <__mcmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	dd66      	ble.n	800bd4e <_strtod_l+0x8de>
 800bc80:	9904      	ldr	r1, [sp, #16]
 800bc82:	4a53      	ldr	r2, [pc, #332]	; (800bdd0 <_strtod_l+0x960>)
 800bc84:	465b      	mov	r3, fp
 800bc86:	2900      	cmp	r1, #0
 800bc88:	f000 8081 	beq.w	800bd8e <_strtod_l+0x91e>
 800bc8c:	ea02 010b 	and.w	r1, r2, fp
 800bc90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc94:	dc7b      	bgt.n	800bd8e <_strtod_l+0x91e>
 800bc96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc9a:	f77f aea9 	ble.w	800b9f0 <_strtod_l+0x580>
 800bc9e:	4b4d      	ldr	r3, [pc, #308]	; (800bdd4 <_strtod_l+0x964>)
 800bca0:	4650      	mov	r0, sl
 800bca2:	4659      	mov	r1, fp
 800bca4:	2200      	movs	r2, #0
 800bca6:	f7f4 fcd9 	bl	800065c <__aeabi_dmul>
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4303      	orrs	r3, r0
 800bcae:	bf08      	it	eq
 800bcb0:	2322      	moveq	r3, #34	; 0x22
 800bcb2:	4682      	mov	sl, r0
 800bcb4:	468b      	mov	fp, r1
 800bcb6:	bf08      	it	eq
 800bcb8:	6023      	streq	r3, [r4, #0]
 800bcba:	e62b      	b.n	800b914 <_strtod_l+0x4a4>
 800bcbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc4:	ea03 0a0a 	and.w	sl, r3, sl
 800bcc8:	e6e3      	b.n	800ba92 <_strtod_l+0x622>
 800bcca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bcce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bcd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bcd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bcda:	fa01 f308 	lsl.w	r3, r1, r8
 800bcde:	9308      	str	r3, [sp, #32]
 800bce0:	910d      	str	r1, [sp, #52]	; 0x34
 800bce2:	e746      	b.n	800bb72 <_strtod_l+0x702>
 800bce4:	2300      	movs	r3, #0
 800bce6:	9308      	str	r3, [sp, #32]
 800bce8:	2301      	movs	r3, #1
 800bcea:	930d      	str	r3, [sp, #52]	; 0x34
 800bcec:	e741      	b.n	800bb72 <_strtod_l+0x702>
 800bcee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcf0:	4642      	mov	r2, r8
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f002 f894 	bl	800de20 <__lshift>
 800bcf8:	9018      	str	r0, [sp, #96]	; 0x60
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f47f af6b 	bne.w	800bbd6 <_strtod_l+0x766>
 800bd00:	e5fe      	b.n	800b900 <_strtod_l+0x490>
 800bd02:	465f      	mov	r7, fp
 800bd04:	d16e      	bne.n	800bde4 <_strtod_l+0x974>
 800bd06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd0c:	b342      	cbz	r2, 800bd60 <_strtod_l+0x8f0>
 800bd0e:	4a32      	ldr	r2, [pc, #200]	; (800bdd8 <_strtod_l+0x968>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d128      	bne.n	800bd66 <_strtod_l+0x8f6>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4651      	mov	r1, sl
 800bd18:	b1eb      	cbz	r3, 800bd56 <_strtod_l+0x8e6>
 800bd1a:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <_strtod_l+0x960>)
 800bd1c:	403b      	ands	r3, r7
 800bd1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd26:	d819      	bhi.n	800bd5c <_strtod_l+0x8ec>
 800bd28:	0d1b      	lsrs	r3, r3, #20
 800bd2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	4299      	cmp	r1, r3
 800bd34:	d117      	bne.n	800bd66 <_strtod_l+0x8f6>
 800bd36:	4b29      	ldr	r3, [pc, #164]	; (800bddc <_strtod_l+0x96c>)
 800bd38:	429f      	cmp	r7, r3
 800bd3a:	d102      	bne.n	800bd42 <_strtod_l+0x8d2>
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f43f addf 	beq.w	800b900 <_strtod_l+0x490>
 800bd42:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <_strtod_l+0x960>)
 800bd44:	403b      	ands	r3, r7
 800bd46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bd4a:	f04f 0a00 	mov.w	sl, #0
 800bd4e:	9b04      	ldr	r3, [sp, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1a4      	bne.n	800bc9e <_strtod_l+0x82e>
 800bd54:	e5de      	b.n	800b914 <_strtod_l+0x4a4>
 800bd56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd5a:	e7ea      	b.n	800bd32 <_strtod_l+0x8c2>
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	e7e8      	b.n	800bd32 <_strtod_l+0x8c2>
 800bd60:	ea53 030a 	orrs.w	r3, r3, sl
 800bd64:	d08c      	beq.n	800bc80 <_strtod_l+0x810>
 800bd66:	9b08      	ldr	r3, [sp, #32]
 800bd68:	b1db      	cbz	r3, 800bda2 <_strtod_l+0x932>
 800bd6a:	423b      	tst	r3, r7
 800bd6c:	d0ef      	beq.n	800bd4e <_strtod_l+0x8de>
 800bd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	b1c3      	cbz	r3, 800bdaa <_strtod_l+0x93a>
 800bd78:	f7ff fb5b 	bl	800b432 <sulp>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	ec51 0b18 	vmov	r0, r1, d8
 800bd84:	f7f4 fab4 	bl	80002f0 <__adddf3>
 800bd88:	4682      	mov	sl, r0
 800bd8a:	468b      	mov	fp, r1
 800bd8c:	e7df      	b.n	800bd4e <_strtod_l+0x8de>
 800bd8e:	4013      	ands	r3, r2
 800bd90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bda0:	e7d5      	b.n	800bd4e <_strtod_l+0x8de>
 800bda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda4:	ea13 0f0a 	tst.w	r3, sl
 800bda8:	e7e0      	b.n	800bd6c <_strtod_l+0x8fc>
 800bdaa:	f7ff fb42 	bl	800b432 <sulp>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	ec51 0b18 	vmov	r0, r1, d8
 800bdb6:	f7f4 fa99 	bl	80002ec <__aeabi_dsub>
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	f7f4 feb3 	bl	8000b2c <__aeabi_dcmpeq>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0c1      	beq.n	800bd4e <_strtod_l+0x8de>
 800bdca:	e611      	b.n	800b9f0 <_strtod_l+0x580>
 800bdcc:	fffffc02 	.word	0xfffffc02
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	39500000 	.word	0x39500000
 800bdd8:	000fffff 	.word	0x000fffff
 800bddc:	7fefffff 	.word	0x7fefffff
 800bde0:	0800f658 	.word	0x0800f658
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	f002 fa08 	bl	800e1fc <__ratio>
 800bdec:	ec59 8b10 	vmov	r8, r9, d0
 800bdf0:	ee10 0a10 	vmov	r0, s0
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	f7f4 feaa 	bl	8000b54 <__aeabi_dcmple>
 800be00:	2800      	cmp	r0, #0
 800be02:	d07a      	beq.n	800befa <_strtod_l+0xa8a>
 800be04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d04a      	beq.n	800bea0 <_strtod_l+0xa30>
 800be0a:	4b95      	ldr	r3, [pc, #596]	; (800c060 <_strtod_l+0xbf0>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c060 <_strtod_l+0xbf0>
 800be16:	f04f 0800 	mov.w	r8, #0
 800be1a:	4b92      	ldr	r3, [pc, #584]	; (800c064 <_strtod_l+0xbf4>)
 800be1c:	403b      	ands	r3, r7
 800be1e:	930d      	str	r3, [sp, #52]	; 0x34
 800be20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be22:	4b91      	ldr	r3, [pc, #580]	; (800c068 <_strtod_l+0xbf8>)
 800be24:	429a      	cmp	r2, r3
 800be26:	f040 80b0 	bne.w	800bf8a <_strtod_l+0xb1a>
 800be2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800be32:	ec4b ab10 	vmov	d0, sl, fp
 800be36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be3a:	f002 f907 	bl	800e04c <__ulp>
 800be3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be42:	ec53 2b10 	vmov	r2, r3, d0
 800be46:	f7f4 fc09 	bl	800065c <__aeabi_dmul>
 800be4a:	4652      	mov	r2, sl
 800be4c:	465b      	mov	r3, fp
 800be4e:	f7f4 fa4f 	bl	80002f0 <__adddf3>
 800be52:	460b      	mov	r3, r1
 800be54:	4983      	ldr	r1, [pc, #524]	; (800c064 <_strtod_l+0xbf4>)
 800be56:	4a85      	ldr	r2, [pc, #532]	; (800c06c <_strtod_l+0xbfc>)
 800be58:	4019      	ands	r1, r3
 800be5a:	4291      	cmp	r1, r2
 800be5c:	4682      	mov	sl, r0
 800be5e:	d960      	bls.n	800bf22 <_strtod_l+0xab2>
 800be60:	ee18 3a90 	vmov	r3, s17
 800be64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800be68:	4293      	cmp	r3, r2
 800be6a:	d104      	bne.n	800be76 <_strtod_l+0xa06>
 800be6c:	ee18 3a10 	vmov	r3, s16
 800be70:	3301      	adds	r3, #1
 800be72:	f43f ad45 	beq.w	800b900 <_strtod_l+0x490>
 800be76:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c078 <_strtod_l+0xc08>
 800be7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be80:	4620      	mov	r0, r4
 800be82:	f001 fdb1 	bl	800d9e8 <_Bfree>
 800be86:	9905      	ldr	r1, [sp, #20]
 800be88:	4620      	mov	r0, r4
 800be8a:	f001 fdad 	bl	800d9e8 <_Bfree>
 800be8e:	4631      	mov	r1, r6
 800be90:	4620      	mov	r0, r4
 800be92:	f001 fda9 	bl	800d9e8 <_Bfree>
 800be96:	4629      	mov	r1, r5
 800be98:	4620      	mov	r0, r4
 800be9a:	f001 fda5 	bl	800d9e8 <_Bfree>
 800be9e:	e61a      	b.n	800bad6 <_strtod_l+0x666>
 800bea0:	f1ba 0f00 	cmp.w	sl, #0
 800bea4:	d11b      	bne.n	800bede <_strtod_l+0xa6e>
 800bea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beaa:	b9f3      	cbnz	r3, 800beea <_strtod_l+0xa7a>
 800beac:	4b6c      	ldr	r3, [pc, #432]	; (800c060 <_strtod_l+0xbf0>)
 800beae:	2200      	movs	r2, #0
 800beb0:	4640      	mov	r0, r8
 800beb2:	4649      	mov	r1, r9
 800beb4:	f7f4 fe44 	bl	8000b40 <__aeabi_dcmplt>
 800beb8:	b9d0      	cbnz	r0, 800bef0 <_strtod_l+0xa80>
 800beba:	4640      	mov	r0, r8
 800bebc:	4649      	mov	r1, r9
 800bebe:	4b6c      	ldr	r3, [pc, #432]	; (800c070 <_strtod_l+0xc00>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	f7f4 fbcb 	bl	800065c <__aeabi_dmul>
 800bec6:	4680      	mov	r8, r0
 800bec8:	4689      	mov	r9, r1
 800beca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bed2:	9315      	str	r3, [sp, #84]	; 0x54
 800bed4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bedc:	e79d      	b.n	800be1a <_strtod_l+0x9aa>
 800bede:	f1ba 0f01 	cmp.w	sl, #1
 800bee2:	d102      	bne.n	800beea <_strtod_l+0xa7a>
 800bee4:	2f00      	cmp	r7, #0
 800bee6:	f43f ad83 	beq.w	800b9f0 <_strtod_l+0x580>
 800beea:	4b62      	ldr	r3, [pc, #392]	; (800c074 <_strtod_l+0xc04>)
 800beec:	2200      	movs	r2, #0
 800beee:	e78e      	b.n	800be0e <_strtod_l+0x99e>
 800bef0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c070 <_strtod_l+0xc00>
 800bef4:	f04f 0800 	mov.w	r8, #0
 800bef8:	e7e7      	b.n	800beca <_strtod_l+0xa5a>
 800befa:	4b5d      	ldr	r3, [pc, #372]	; (800c070 <_strtod_l+0xc00>)
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fbab 	bl	800065c <__aeabi_dmul>
 800bf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	b933      	cbnz	r3, 800bf1c <_strtod_l+0xaac>
 800bf0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf12:	900e      	str	r0, [sp, #56]	; 0x38
 800bf14:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf1a:	e7dd      	b.n	800bed8 <_strtod_l+0xa68>
 800bf1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bf20:	e7f9      	b.n	800bf16 <_strtod_l+0xaa6>
 800bf22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1a8      	bne.n	800be7e <_strtod_l+0xa0e>
 800bf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf32:	0d1b      	lsrs	r3, r3, #20
 800bf34:	051b      	lsls	r3, r3, #20
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d1a1      	bne.n	800be7e <_strtod_l+0xa0e>
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 feed 	bl	8000d1c <__aeabi_d2lz>
 800bf42:	f7f4 fb5d 	bl	8000600 <__aeabi_l2d>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f9cd 	bl	80002ec <__aeabi_dsub>
 800bf52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf58:	ea43 030a 	orr.w	r3, r3, sl
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	4680      	mov	r8, r0
 800bf60:	4689      	mov	r9, r1
 800bf62:	d055      	beq.n	800c010 <_strtod_l+0xba0>
 800bf64:	a336      	add	r3, pc, #216	; (adr r3, 800c040 <_strtod_l+0xbd0>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f7f4 fde9 	bl	8000b40 <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f47f acd0 	bne.w	800b914 <_strtod_l+0x4a4>
 800bf74:	a334      	add	r3, pc, #208	; (adr r3, 800c048 <_strtod_l+0xbd8>)
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 fdfd 	bl	8000b7c <__aeabi_dcmpgt>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f af7b 	beq.w	800be7e <_strtod_l+0xa0e>
 800bf88:	e4c4      	b.n	800b914 <_strtod_l+0x4a4>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	b333      	cbz	r3, 800bfdc <_strtod_l+0xb6c>
 800bf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf94:	d822      	bhi.n	800bfdc <_strtod_l+0xb6c>
 800bf96:	a32e      	add	r3, pc, #184	; (adr r3, 800c050 <_strtod_l+0xbe0>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	f7f4 fdd8 	bl	8000b54 <__aeabi_dcmple>
 800bfa4:	b1a0      	cbz	r0, 800bfd0 <_strtod_l+0xb60>
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	f7f4 fe2f 	bl	8000c0c <__aeabi_d2uiz>
 800bfae:	2801      	cmp	r0, #1
 800bfb0:	bf38      	it	cc
 800bfb2:	2001      	movcc	r0, #1
 800bfb4:	f7f4 fad8 	bl	8000568 <__aeabi_ui2d>
 800bfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4689      	mov	r9, r1
 800bfbe:	bb23      	cbnz	r3, 800c00a <_strtod_l+0xb9a>
 800bfc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfc4:	9010      	str	r0, [sp, #64]	; 0x40
 800bfc6:	9311      	str	r3, [sp, #68]	; 0x44
 800bfc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bfd8:	1a9b      	subs	r3, r3, r2
 800bfda:	9309      	str	r3, [sp, #36]	; 0x24
 800bfdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfe0:	eeb0 0a48 	vmov.f32	s0, s16
 800bfe4:	eef0 0a68 	vmov.f32	s1, s17
 800bfe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfec:	f002 f82e 	bl	800e04c <__ulp>
 800bff0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff4:	ec53 2b10 	vmov	r2, r3, d0
 800bff8:	f7f4 fb30 	bl	800065c <__aeabi_dmul>
 800bffc:	ec53 2b18 	vmov	r2, r3, d8
 800c000:	f7f4 f976 	bl	80002f0 <__adddf3>
 800c004:	4682      	mov	sl, r0
 800c006:	468b      	mov	fp, r1
 800c008:	e78d      	b.n	800bf26 <_strtod_l+0xab6>
 800c00a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c00e:	e7db      	b.n	800bfc8 <_strtod_l+0xb58>
 800c010:	a311      	add	r3, pc, #68	; (adr r3, 800c058 <_strtod_l+0xbe8>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 fd93 	bl	8000b40 <__aeabi_dcmplt>
 800c01a:	e7b2      	b.n	800bf82 <_strtod_l+0xb12>
 800c01c:	2300      	movs	r3, #0
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	f7ff ba6b 	b.w	800b500 <_strtod_l+0x90>
 800c02a:	2a65      	cmp	r2, #101	; 0x65
 800c02c:	f43f ab5f 	beq.w	800b6ee <_strtod_l+0x27e>
 800c030:	2a45      	cmp	r2, #69	; 0x45
 800c032:	f43f ab5c 	beq.w	800b6ee <_strtod_l+0x27e>
 800c036:	2301      	movs	r3, #1
 800c038:	f7ff bb94 	b.w	800b764 <_strtod_l+0x2f4>
 800c03c:	f3af 8000 	nop.w
 800c040:	94a03595 	.word	0x94a03595
 800c044:	3fdfffff 	.word	0x3fdfffff
 800c048:	35afe535 	.word	0x35afe535
 800c04c:	3fe00000 	.word	0x3fe00000
 800c050:	ffc00000 	.word	0xffc00000
 800c054:	41dfffff 	.word	0x41dfffff
 800c058:	94a03595 	.word	0x94a03595
 800c05c:	3fcfffff 	.word	0x3fcfffff
 800c060:	3ff00000 	.word	0x3ff00000
 800c064:	7ff00000 	.word	0x7ff00000
 800c068:	7fe00000 	.word	0x7fe00000
 800c06c:	7c9fffff 	.word	0x7c9fffff
 800c070:	3fe00000 	.word	0x3fe00000
 800c074:	bff00000 	.word	0xbff00000
 800c078:	7fefffff 	.word	0x7fefffff

0800c07c <_strtod_r>:
 800c07c:	4b01      	ldr	r3, [pc, #4]	; (800c084 <_strtod_r+0x8>)
 800c07e:	f7ff b9f7 	b.w	800b470 <_strtod_l>
 800c082:	bf00      	nop
 800c084:	20000094 	.word	0x20000094

0800c088 <strtok>:
 800c088:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <strtok+0x5c>)
 800c08a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c08c:	681e      	ldr	r6, [r3, #0]
 800c08e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c090:	4605      	mov	r5, r0
 800c092:	b9fc      	cbnz	r4, 800c0d4 <strtok+0x4c>
 800c094:	2050      	movs	r0, #80	; 0x50
 800c096:	9101      	str	r1, [sp, #4]
 800c098:	f7fd ff4e 	bl	8009f38 <malloc>
 800c09c:	9901      	ldr	r1, [sp, #4]
 800c09e:	65b0      	str	r0, [r6, #88]	; 0x58
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	b920      	cbnz	r0, 800c0ae <strtok+0x26>
 800c0a4:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <strtok+0x60>)
 800c0a6:	4811      	ldr	r0, [pc, #68]	; (800c0ec <strtok+0x64>)
 800c0a8:	2157      	movs	r1, #87	; 0x57
 800c0aa:	f000 f9a9 	bl	800c400 <__assert_func>
 800c0ae:	e9c0 4400 	strd	r4, r4, [r0]
 800c0b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c0b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c0ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c0be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c0c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c0c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c0ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c0ce:	6184      	str	r4, [r0, #24]
 800c0d0:	7704      	strb	r4, [r0, #28]
 800c0d2:	6244      	str	r4, [r0, #36]	; 0x24
 800c0d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4628      	mov	r0, r5
 800c0da:	b002      	add	sp, #8
 800c0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0e0:	f000 b806 	b.w	800c0f0 <__strtok_r>
 800c0e4:	2000002c 	.word	0x2000002c
 800c0e8:	0800f680 	.word	0x0800f680
 800c0ec:	0800f697 	.word	0x0800f697

0800c0f0 <__strtok_r>:
 800c0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0f2:	b908      	cbnz	r0, 800c0f8 <__strtok_r+0x8>
 800c0f4:	6810      	ldr	r0, [r2, #0]
 800c0f6:	b188      	cbz	r0, 800c11c <__strtok_r+0x2c>
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c100:	460f      	mov	r7, r1
 800c102:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c106:	b91e      	cbnz	r6, 800c110 <__strtok_r+0x20>
 800c108:	b965      	cbnz	r5, 800c124 <__strtok_r+0x34>
 800c10a:	6015      	str	r5, [r2, #0]
 800c10c:	4628      	mov	r0, r5
 800c10e:	e005      	b.n	800c11c <__strtok_r+0x2c>
 800c110:	42b5      	cmp	r5, r6
 800c112:	d1f6      	bne.n	800c102 <__strtok_r+0x12>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f0      	bne.n	800c0fa <__strtok_r+0xa>
 800c118:	6014      	str	r4, [r2, #0]
 800c11a:	7003      	strb	r3, [r0, #0]
 800c11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11e:	461c      	mov	r4, r3
 800c120:	e00c      	b.n	800c13c <__strtok_r+0x4c>
 800c122:	b915      	cbnz	r5, 800c12a <__strtok_r+0x3a>
 800c124:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c128:	460e      	mov	r6, r1
 800c12a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c12e:	42ab      	cmp	r3, r5
 800c130:	d1f7      	bne.n	800c122 <__strtok_r+0x32>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0f3      	beq.n	800c11e <__strtok_r+0x2e>
 800c136:	2300      	movs	r3, #0
 800c138:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c13c:	6014      	str	r4, [r2, #0]
 800c13e:	e7ed      	b.n	800c11c <__strtok_r+0x2c>

0800c140 <_strtol_l.constprop.0>:
 800c140:	2b01      	cmp	r3, #1
 800c142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c146:	d001      	beq.n	800c14c <_strtol_l.constprop.0+0xc>
 800c148:	2b24      	cmp	r3, #36	; 0x24
 800c14a:	d906      	bls.n	800c15a <_strtol_l.constprop.0+0x1a>
 800c14c:	f7fd fcea 	bl	8009b24 <__errno>
 800c150:	2316      	movs	r3, #22
 800c152:	6003      	str	r3, [r0, #0]
 800c154:	2000      	movs	r0, #0
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c240 <_strtol_l.constprop.0+0x100>
 800c15e:	460d      	mov	r5, r1
 800c160:	462e      	mov	r6, r5
 800c162:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c166:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c16a:	f017 0708 	ands.w	r7, r7, #8
 800c16e:	d1f7      	bne.n	800c160 <_strtol_l.constprop.0+0x20>
 800c170:	2c2d      	cmp	r4, #45	; 0x2d
 800c172:	d132      	bne.n	800c1da <_strtol_l.constprop.0+0x9a>
 800c174:	782c      	ldrb	r4, [r5, #0]
 800c176:	2701      	movs	r7, #1
 800c178:	1cb5      	adds	r5, r6, #2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d05b      	beq.n	800c236 <_strtol_l.constprop.0+0xf6>
 800c17e:	2b10      	cmp	r3, #16
 800c180:	d109      	bne.n	800c196 <_strtol_l.constprop.0+0x56>
 800c182:	2c30      	cmp	r4, #48	; 0x30
 800c184:	d107      	bne.n	800c196 <_strtol_l.constprop.0+0x56>
 800c186:	782c      	ldrb	r4, [r5, #0]
 800c188:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c18c:	2c58      	cmp	r4, #88	; 0x58
 800c18e:	d14d      	bne.n	800c22c <_strtol_l.constprop.0+0xec>
 800c190:	786c      	ldrb	r4, [r5, #1]
 800c192:	2310      	movs	r3, #16
 800c194:	3502      	adds	r5, #2
 800c196:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c19a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c19e:	f04f 0c00 	mov.w	ip, #0
 800c1a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c1a6:	4666      	mov	r6, ip
 800c1a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c1ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c1b0:	f1be 0f09 	cmp.w	lr, #9
 800c1b4:	d816      	bhi.n	800c1e4 <_strtol_l.constprop.0+0xa4>
 800c1b6:	4674      	mov	r4, lr
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	dd24      	ble.n	800c206 <_strtol_l.constprop.0+0xc6>
 800c1bc:	f1bc 0f00 	cmp.w	ip, #0
 800c1c0:	db1e      	blt.n	800c200 <_strtol_l.constprop.0+0xc0>
 800c1c2:	45b1      	cmp	r9, r6
 800c1c4:	d31c      	bcc.n	800c200 <_strtol_l.constprop.0+0xc0>
 800c1c6:	d101      	bne.n	800c1cc <_strtol_l.constprop.0+0x8c>
 800c1c8:	45a2      	cmp	sl, r4
 800c1ca:	db19      	blt.n	800c200 <_strtol_l.constprop.0+0xc0>
 800c1cc:	fb06 4603 	mla	r6, r6, r3, r4
 800c1d0:	f04f 0c01 	mov.w	ip, #1
 800c1d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1d8:	e7e8      	b.n	800c1ac <_strtol_l.constprop.0+0x6c>
 800c1da:	2c2b      	cmp	r4, #43	; 0x2b
 800c1dc:	bf04      	itt	eq
 800c1de:	782c      	ldrbeq	r4, [r5, #0]
 800c1e0:	1cb5      	addeq	r5, r6, #2
 800c1e2:	e7ca      	b.n	800c17a <_strtol_l.constprop.0+0x3a>
 800c1e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c1e8:	f1be 0f19 	cmp.w	lr, #25
 800c1ec:	d801      	bhi.n	800c1f2 <_strtol_l.constprop.0+0xb2>
 800c1ee:	3c37      	subs	r4, #55	; 0x37
 800c1f0:	e7e2      	b.n	800c1b8 <_strtol_l.constprop.0+0x78>
 800c1f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1f6:	f1be 0f19 	cmp.w	lr, #25
 800c1fa:	d804      	bhi.n	800c206 <_strtol_l.constprop.0+0xc6>
 800c1fc:	3c57      	subs	r4, #87	; 0x57
 800c1fe:	e7db      	b.n	800c1b8 <_strtol_l.constprop.0+0x78>
 800c200:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c204:	e7e6      	b.n	800c1d4 <_strtol_l.constprop.0+0x94>
 800c206:	f1bc 0f00 	cmp.w	ip, #0
 800c20a:	da05      	bge.n	800c218 <_strtol_l.constprop.0+0xd8>
 800c20c:	2322      	movs	r3, #34	; 0x22
 800c20e:	6003      	str	r3, [r0, #0]
 800c210:	4646      	mov	r6, r8
 800c212:	b942      	cbnz	r2, 800c226 <_strtol_l.constprop.0+0xe6>
 800c214:	4630      	mov	r0, r6
 800c216:	e79e      	b.n	800c156 <_strtol_l.constprop.0+0x16>
 800c218:	b107      	cbz	r7, 800c21c <_strtol_l.constprop.0+0xdc>
 800c21a:	4276      	negs	r6, r6
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d0f9      	beq.n	800c214 <_strtol_l.constprop.0+0xd4>
 800c220:	f1bc 0f00 	cmp.w	ip, #0
 800c224:	d000      	beq.n	800c228 <_strtol_l.constprop.0+0xe8>
 800c226:	1e69      	subs	r1, r5, #1
 800c228:	6011      	str	r1, [r2, #0]
 800c22a:	e7f3      	b.n	800c214 <_strtol_l.constprop.0+0xd4>
 800c22c:	2430      	movs	r4, #48	; 0x30
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1b1      	bne.n	800c196 <_strtol_l.constprop.0+0x56>
 800c232:	2308      	movs	r3, #8
 800c234:	e7af      	b.n	800c196 <_strtol_l.constprop.0+0x56>
 800c236:	2c30      	cmp	r4, #48	; 0x30
 800c238:	d0a5      	beq.n	800c186 <_strtol_l.constprop.0+0x46>
 800c23a:	230a      	movs	r3, #10
 800c23c:	e7ab      	b.n	800c196 <_strtol_l.constprop.0+0x56>
 800c23e:	bf00      	nop
 800c240:	0800f731 	.word	0x0800f731

0800c244 <_strtol_r>:
 800c244:	f7ff bf7c 	b.w	800c140 <_strtol_l.constprop.0>

0800c248 <strtol>:
 800c248:	4613      	mov	r3, r2
 800c24a:	460a      	mov	r2, r1
 800c24c:	4601      	mov	r1, r0
 800c24e:	4802      	ldr	r0, [pc, #8]	; (800c258 <strtol+0x10>)
 800c250:	6800      	ldr	r0, [r0, #0]
 800c252:	f7ff bf75 	b.w	800c140 <_strtol_l.constprop.0>
 800c256:	bf00      	nop
 800c258:	2000002c 	.word	0x2000002c

0800c25c <__swbuf_r>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	460e      	mov	r6, r1
 800c260:	4614      	mov	r4, r2
 800c262:	4605      	mov	r5, r0
 800c264:	b118      	cbz	r0, 800c26e <__swbuf_r+0x12>
 800c266:	6983      	ldr	r3, [r0, #24]
 800c268:	b90b      	cbnz	r3, 800c26e <__swbuf_r+0x12>
 800c26a:	f7fd fd8d 	bl	8009d88 <__sinit>
 800c26e:	4b21      	ldr	r3, [pc, #132]	; (800c2f4 <__swbuf_r+0x98>)
 800c270:	429c      	cmp	r4, r3
 800c272:	d12b      	bne.n	800c2cc <__swbuf_r+0x70>
 800c274:	686c      	ldr	r4, [r5, #4]
 800c276:	69a3      	ldr	r3, [r4, #24]
 800c278:	60a3      	str	r3, [r4, #8]
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	071a      	lsls	r2, r3, #28
 800c27e:	d52f      	bpl.n	800c2e0 <__swbuf_r+0x84>
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	b36b      	cbz	r3, 800c2e0 <__swbuf_r+0x84>
 800c284:	6923      	ldr	r3, [r4, #16]
 800c286:	6820      	ldr	r0, [r4, #0]
 800c288:	1ac0      	subs	r0, r0, r3
 800c28a:	6963      	ldr	r3, [r4, #20]
 800c28c:	b2f6      	uxtb	r6, r6
 800c28e:	4283      	cmp	r3, r0
 800c290:	4637      	mov	r7, r6
 800c292:	dc04      	bgt.n	800c29e <__swbuf_r+0x42>
 800c294:	4621      	mov	r1, r4
 800c296:	4628      	mov	r0, r5
 800c298:	f7fd fcd0 	bl	8009c3c <_fflush_r>
 800c29c:	bb30      	cbnz	r0, 800c2ec <__swbuf_r+0x90>
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	60a3      	str	r3, [r4, #8]
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	6022      	str	r2, [r4, #0]
 800c2aa:	701e      	strb	r6, [r3, #0]
 800c2ac:	6963      	ldr	r3, [r4, #20]
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	4283      	cmp	r3, r0
 800c2b2:	d004      	beq.n	800c2be <__swbuf_r+0x62>
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	07db      	lsls	r3, r3, #31
 800c2b8:	d506      	bpl.n	800c2c8 <__swbuf_r+0x6c>
 800c2ba:	2e0a      	cmp	r6, #10
 800c2bc:	d104      	bne.n	800c2c8 <__swbuf_r+0x6c>
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f7fd fcbb 	bl	8009c3c <_fflush_r>
 800c2c6:	b988      	cbnz	r0, 800c2ec <__swbuf_r+0x90>
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2cc:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <__swbuf_r+0x9c>)
 800c2ce:	429c      	cmp	r4, r3
 800c2d0:	d101      	bne.n	800c2d6 <__swbuf_r+0x7a>
 800c2d2:	68ac      	ldr	r4, [r5, #8]
 800c2d4:	e7cf      	b.n	800c276 <__swbuf_r+0x1a>
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <__swbuf_r+0xa0>)
 800c2d8:	429c      	cmp	r4, r3
 800c2da:	bf08      	it	eq
 800c2dc:	68ec      	ldreq	r4, [r5, #12]
 800c2de:	e7ca      	b.n	800c276 <__swbuf_r+0x1a>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 f81e 	bl	800c324 <__swsetup_r>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d0cb      	beq.n	800c284 <__swbuf_r+0x28>
 800c2ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c2f0:	e7ea      	b.n	800c2c8 <__swbuf_r+0x6c>
 800c2f2:	bf00      	nop
 800c2f4:	0800f59c 	.word	0x0800f59c
 800c2f8:	0800f5bc 	.word	0x0800f5bc
 800c2fc:	0800f57c 	.word	0x0800f57c

0800c300 <_write_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d07      	ldr	r5, [pc, #28]	; (800c320 <_write_r+0x20>)
 800c304:	4604      	mov	r4, r0
 800c306:	4608      	mov	r0, r1
 800c308:	4611      	mov	r1, r2
 800c30a:	2200      	movs	r2, #0
 800c30c:	602a      	str	r2, [r5, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	f7f6 fa00 	bl	8002714 <_write>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d102      	bne.n	800c31e <_write_r+0x1e>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	b103      	cbz	r3, 800c31e <_write_r+0x1e>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	200008ec 	.word	0x200008ec

0800c324 <__swsetup_r>:
 800c324:	4b32      	ldr	r3, [pc, #200]	; (800c3f0 <__swsetup_r+0xcc>)
 800c326:	b570      	push	{r4, r5, r6, lr}
 800c328:	681d      	ldr	r5, [r3, #0]
 800c32a:	4606      	mov	r6, r0
 800c32c:	460c      	mov	r4, r1
 800c32e:	b125      	cbz	r5, 800c33a <__swsetup_r+0x16>
 800c330:	69ab      	ldr	r3, [r5, #24]
 800c332:	b913      	cbnz	r3, 800c33a <__swsetup_r+0x16>
 800c334:	4628      	mov	r0, r5
 800c336:	f7fd fd27 	bl	8009d88 <__sinit>
 800c33a:	4b2e      	ldr	r3, [pc, #184]	; (800c3f4 <__swsetup_r+0xd0>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	d10f      	bne.n	800c360 <__swsetup_r+0x3c>
 800c340:	686c      	ldr	r4, [r5, #4]
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c348:	0719      	lsls	r1, r3, #28
 800c34a:	d42c      	bmi.n	800c3a6 <__swsetup_r+0x82>
 800c34c:	06dd      	lsls	r5, r3, #27
 800c34e:	d411      	bmi.n	800c374 <__swsetup_r+0x50>
 800c350:	2309      	movs	r3, #9
 800c352:	6033      	str	r3, [r6, #0]
 800c354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c358:	81a3      	strh	r3, [r4, #12]
 800c35a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c35e:	e03e      	b.n	800c3de <__swsetup_r+0xba>
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <__swsetup_r+0xd4>)
 800c362:	429c      	cmp	r4, r3
 800c364:	d101      	bne.n	800c36a <__swsetup_r+0x46>
 800c366:	68ac      	ldr	r4, [r5, #8]
 800c368:	e7eb      	b.n	800c342 <__swsetup_r+0x1e>
 800c36a:	4b24      	ldr	r3, [pc, #144]	; (800c3fc <__swsetup_r+0xd8>)
 800c36c:	429c      	cmp	r4, r3
 800c36e:	bf08      	it	eq
 800c370:	68ec      	ldreq	r4, [r5, #12]
 800c372:	e7e6      	b.n	800c342 <__swsetup_r+0x1e>
 800c374:	0758      	lsls	r0, r3, #29
 800c376:	d512      	bpl.n	800c39e <__swsetup_r+0x7a>
 800c378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c37a:	b141      	cbz	r1, 800c38e <__swsetup_r+0x6a>
 800c37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c380:	4299      	cmp	r1, r3
 800c382:	d002      	beq.n	800c38a <__swsetup_r+0x66>
 800c384:	4630      	mov	r0, r6
 800c386:	f7fd fe27 	bl	8009fd8 <_free_r>
 800c38a:	2300      	movs	r3, #0
 800c38c:	6363      	str	r3, [r4, #52]	; 0x34
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	2300      	movs	r3, #0
 800c398:	6063      	str	r3, [r4, #4]
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	f043 0308 	orr.w	r3, r3, #8
 800c3a4:	81a3      	strh	r3, [r4, #12]
 800c3a6:	6923      	ldr	r3, [r4, #16]
 800c3a8:	b94b      	cbnz	r3, 800c3be <__swsetup_r+0x9a>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3b4:	d003      	beq.n	800c3be <__swsetup_r+0x9a>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f001 fa77 	bl	800d8ac <__smakebuf_r>
 800c3be:	89a0      	ldrh	r0, [r4, #12]
 800c3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3c4:	f010 0301 	ands.w	r3, r0, #1
 800c3c8:	d00a      	beq.n	800c3e0 <__swsetup_r+0xbc>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60a3      	str	r3, [r4, #8]
 800c3ce:	6963      	ldr	r3, [r4, #20]
 800c3d0:	425b      	negs	r3, r3
 800c3d2:	61a3      	str	r3, [r4, #24]
 800c3d4:	6923      	ldr	r3, [r4, #16]
 800c3d6:	b943      	cbnz	r3, 800c3ea <__swsetup_r+0xc6>
 800c3d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3dc:	d1ba      	bne.n	800c354 <__swsetup_r+0x30>
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	0781      	lsls	r1, r0, #30
 800c3e2:	bf58      	it	pl
 800c3e4:	6963      	ldrpl	r3, [r4, #20]
 800c3e6:	60a3      	str	r3, [r4, #8]
 800c3e8:	e7f4      	b.n	800c3d4 <__swsetup_r+0xb0>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e7f7      	b.n	800c3de <__swsetup_r+0xba>
 800c3ee:	bf00      	nop
 800c3f0:	2000002c 	.word	0x2000002c
 800c3f4:	0800f59c 	.word	0x0800f59c
 800c3f8:	0800f5bc 	.word	0x0800f5bc
 800c3fc:	0800f57c 	.word	0x0800f57c

0800c400 <__assert_func>:
 800c400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c402:	4614      	mov	r4, r2
 800c404:	461a      	mov	r2, r3
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <__assert_func+0x2c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4605      	mov	r5, r0
 800c40c:	68d8      	ldr	r0, [r3, #12]
 800c40e:	b14c      	cbz	r4, 800c424 <__assert_func+0x24>
 800c410:	4b07      	ldr	r3, [pc, #28]	; (800c430 <__assert_func+0x30>)
 800c412:	9100      	str	r1, [sp, #0]
 800c414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c418:	4906      	ldr	r1, [pc, #24]	; (800c434 <__assert_func+0x34>)
 800c41a:	462b      	mov	r3, r5
 800c41c:	f7fd fd32 	bl	8009e84 <fiprintf>
 800c420:	f7fd fb78 	bl	8009b14 <abort>
 800c424:	4b04      	ldr	r3, [pc, #16]	; (800c438 <__assert_func+0x38>)
 800c426:	461c      	mov	r4, r3
 800c428:	e7f3      	b.n	800c412 <__assert_func+0x12>
 800c42a:	bf00      	nop
 800c42c:	2000002c 	.word	0x2000002c
 800c430:	0800f6f4 	.word	0x0800f6f4
 800c434:	0800f701 	.word	0x0800f701
 800c438:	0800f72f 	.word	0x0800f72f

0800c43c <_close_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d06      	ldr	r5, [pc, #24]	; (800c458 <_close_r+0x1c>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	f7f7 fa46 	bl	80038d8 <_close>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d102      	bne.n	800c456 <_close_r+0x1a>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	b103      	cbz	r3, 800c456 <_close_r+0x1a>
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	200008ec 	.word	0x200008ec

0800c45c <quorem>:
 800c45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c460:	6903      	ldr	r3, [r0, #16]
 800c462:	690c      	ldr	r4, [r1, #16]
 800c464:	42a3      	cmp	r3, r4
 800c466:	4607      	mov	r7, r0
 800c468:	f2c0 8081 	blt.w	800c56e <quorem+0x112>
 800c46c:	3c01      	subs	r4, #1
 800c46e:	f101 0814 	add.w	r8, r1, #20
 800c472:	f100 0514 	add.w	r5, r0, #20
 800c476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c484:	3301      	adds	r3, #1
 800c486:	429a      	cmp	r2, r3
 800c488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c48c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c490:	fbb2 f6f3 	udiv	r6, r2, r3
 800c494:	d331      	bcc.n	800c4fa <quorem+0x9e>
 800c496:	f04f 0e00 	mov.w	lr, #0
 800c49a:	4640      	mov	r0, r8
 800c49c:	46ac      	mov	ip, r5
 800c49e:	46f2      	mov	sl, lr
 800c4a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4a4:	b293      	uxth	r3, r2
 800c4a6:	fb06 e303 	mla	r3, r6, r3, lr
 800c4aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	ebaa 0303 	sub.w	r3, sl, r3
 800c4b4:	f8dc a000 	ldr.w	sl, [ip]
 800c4b8:	0c12      	lsrs	r2, r2, #16
 800c4ba:	fa13 f38a 	uxtah	r3, r3, sl
 800c4be:	fb06 e202 	mla	r2, r6, r2, lr
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4ca:	b292      	uxth	r2, r2
 800c4cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c4d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c4d8:	4581      	cmp	r9, r0
 800c4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4de:	f84c 3b04 	str.w	r3, [ip], #4
 800c4e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4e6:	d2db      	bcs.n	800c4a0 <quorem+0x44>
 800c4e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4ec:	b92b      	cbnz	r3, 800c4fa <quorem+0x9e>
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	3b04      	subs	r3, #4
 800c4f2:	429d      	cmp	r5, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	d32e      	bcc.n	800c556 <quorem+0xfa>
 800c4f8:	613c      	str	r4, [r7, #16]
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	f001 fd00 	bl	800df00 <__mcmp>
 800c500:	2800      	cmp	r0, #0
 800c502:	db24      	blt.n	800c54e <quorem+0xf2>
 800c504:	3601      	adds	r6, #1
 800c506:	4628      	mov	r0, r5
 800c508:	f04f 0c00 	mov.w	ip, #0
 800c50c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c510:	f8d0 e000 	ldr.w	lr, [r0]
 800c514:	b293      	uxth	r3, r2
 800c516:	ebac 0303 	sub.w	r3, ip, r3
 800c51a:	0c12      	lsrs	r2, r2, #16
 800c51c:	fa13 f38e 	uxtah	r3, r3, lr
 800c520:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c528:	b29b      	uxth	r3, r3
 800c52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c52e:	45c1      	cmp	r9, r8
 800c530:	f840 3b04 	str.w	r3, [r0], #4
 800c534:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c538:	d2e8      	bcs.n	800c50c <quorem+0xb0>
 800c53a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c542:	b922      	cbnz	r2, 800c54e <quorem+0xf2>
 800c544:	3b04      	subs	r3, #4
 800c546:	429d      	cmp	r5, r3
 800c548:	461a      	mov	r2, r3
 800c54a:	d30a      	bcc.n	800c562 <quorem+0x106>
 800c54c:	613c      	str	r4, [r7, #16]
 800c54e:	4630      	mov	r0, r6
 800c550:	b003      	add	sp, #12
 800c552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c556:	6812      	ldr	r2, [r2, #0]
 800c558:	3b04      	subs	r3, #4
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	d1cc      	bne.n	800c4f8 <quorem+0x9c>
 800c55e:	3c01      	subs	r4, #1
 800c560:	e7c7      	b.n	800c4f2 <quorem+0x96>
 800c562:	6812      	ldr	r2, [r2, #0]
 800c564:	3b04      	subs	r3, #4
 800c566:	2a00      	cmp	r2, #0
 800c568:	d1f0      	bne.n	800c54c <quorem+0xf0>
 800c56a:	3c01      	subs	r4, #1
 800c56c:	e7eb      	b.n	800c546 <quorem+0xea>
 800c56e:	2000      	movs	r0, #0
 800c570:	e7ee      	b.n	800c550 <quorem+0xf4>
 800c572:	0000      	movs	r0, r0
 800c574:	0000      	movs	r0, r0
	...

0800c578 <_dtoa_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	ed2d 8b04 	vpush	{d8-d9}
 800c580:	ec57 6b10 	vmov	r6, r7, d0
 800c584:	b093      	sub	sp, #76	; 0x4c
 800c586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c58c:	9106      	str	r1, [sp, #24]
 800c58e:	ee10 aa10 	vmov	sl, s0
 800c592:	4604      	mov	r4, r0
 800c594:	9209      	str	r2, [sp, #36]	; 0x24
 800c596:	930c      	str	r3, [sp, #48]	; 0x30
 800c598:	46bb      	mov	fp, r7
 800c59a:	b975      	cbnz	r5, 800c5ba <_dtoa_r+0x42>
 800c59c:	2010      	movs	r0, #16
 800c59e:	f7fd fccb 	bl	8009f38 <malloc>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c5a6:	b920      	cbnz	r0, 800c5b2 <_dtoa_r+0x3a>
 800c5a8:	4ba7      	ldr	r3, [pc, #668]	; (800c848 <_dtoa_r+0x2d0>)
 800c5aa:	21ea      	movs	r1, #234	; 0xea
 800c5ac:	48a7      	ldr	r0, [pc, #668]	; (800c84c <_dtoa_r+0x2d4>)
 800c5ae:	f7ff ff27 	bl	800c400 <__assert_func>
 800c5b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5b6:	6005      	str	r5, [r0, #0]
 800c5b8:	60c5      	str	r5, [r0, #12]
 800c5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5bc:	6819      	ldr	r1, [r3, #0]
 800c5be:	b151      	cbz	r1, 800c5d6 <_dtoa_r+0x5e>
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	604a      	str	r2, [r1, #4]
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	4093      	lsls	r3, r2
 800c5c8:	608b      	str	r3, [r1, #8]
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f001 fa0c 	bl	800d9e8 <_Bfree>
 800c5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	1e3b      	subs	r3, r7, #0
 800c5d8:	bfaa      	itet	ge
 800c5da:	2300      	movge	r3, #0
 800c5dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c5e0:	f8c8 3000 	strge.w	r3, [r8]
 800c5e4:	4b9a      	ldr	r3, [pc, #616]	; (800c850 <_dtoa_r+0x2d8>)
 800c5e6:	bfbc      	itt	lt
 800c5e8:	2201      	movlt	r2, #1
 800c5ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c5ee:	ea33 030b 	bics.w	r3, r3, fp
 800c5f2:	d11b      	bne.n	800c62c <_dtoa_r+0xb4>
 800c5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c600:	4333      	orrs	r3, r6
 800c602:	f000 8592 	beq.w	800d12a <_dtoa_r+0xbb2>
 800c606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c608:	b963      	cbnz	r3, 800c624 <_dtoa_r+0xac>
 800c60a:	4b92      	ldr	r3, [pc, #584]	; (800c854 <_dtoa_r+0x2dc>)
 800c60c:	e022      	b.n	800c654 <_dtoa_r+0xdc>
 800c60e:	4b92      	ldr	r3, [pc, #584]	; (800c858 <_dtoa_r+0x2e0>)
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	3308      	adds	r3, #8
 800c614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	9801      	ldr	r0, [sp, #4]
 800c61a:	b013      	add	sp, #76	; 0x4c
 800c61c:	ecbd 8b04 	vpop	{d8-d9}
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4b8b      	ldr	r3, [pc, #556]	; (800c854 <_dtoa_r+0x2dc>)
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	3303      	adds	r3, #3
 800c62a:	e7f3      	b.n	800c614 <_dtoa_r+0x9c>
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	f7f4 fa7a 	bl	8000b2c <__aeabi_dcmpeq>
 800c638:	ec4b ab19 	vmov	d9, sl, fp
 800c63c:	4680      	mov	r8, r0
 800c63e:	b158      	cbz	r0, 800c658 <_dtoa_r+0xe0>
 800c640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c642:	2301      	movs	r3, #1
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 856b 	beq.w	800d124 <_dtoa_r+0xbac>
 800c64e:	4883      	ldr	r0, [pc, #524]	; (800c85c <_dtoa_r+0x2e4>)
 800c650:	6018      	str	r0, [r3, #0]
 800c652:	1e43      	subs	r3, r0, #1
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	e7df      	b.n	800c618 <_dtoa_r+0xa0>
 800c658:	ec4b ab10 	vmov	d0, sl, fp
 800c65c:	aa10      	add	r2, sp, #64	; 0x40
 800c65e:	a911      	add	r1, sp, #68	; 0x44
 800c660:	4620      	mov	r0, r4
 800c662:	f001 fd6f 	bl	800e144 <__d2b>
 800c666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c66a:	ee08 0a10 	vmov	s16, r0
 800c66e:	2d00      	cmp	r5, #0
 800c670:	f000 8084 	beq.w	800c77c <_dtoa_r+0x204>
 800c674:	ee19 3a90 	vmov	r3, s19
 800c678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c67c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c680:	4656      	mov	r6, sl
 800c682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c68a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c68e:	4b74      	ldr	r3, [pc, #464]	; (800c860 <_dtoa_r+0x2e8>)
 800c690:	2200      	movs	r2, #0
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	f7f3 fe29 	bl	80002ec <__aeabi_dsub>
 800c69a:	a365      	add	r3, pc, #404	; (adr r3, 800c830 <_dtoa_r+0x2b8>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ffdc 	bl	800065c <__aeabi_dmul>
 800c6a4:	a364      	add	r3, pc, #400	; (adr r3, 800c838 <_dtoa_r+0x2c0>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fe21 	bl	80002f0 <__adddf3>
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	f7f3 ff68 	bl	8000588 <__aeabi_i2d>
 800c6b8:	a361      	add	r3, pc, #388	; (adr r3, 800c840 <_dtoa_r+0x2c8>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 ffcd 	bl	800065c <__aeabi_dmul>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f3 fe11 	bl	80002f0 <__adddf3>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f7f4 fa73 	bl	8000bbc <__aeabi_d2iz>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	9000      	str	r0, [sp, #0]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f4 fa2e 	bl	8000b40 <__aeabi_dcmplt>
 800c6e4:	b150      	cbz	r0, 800c6fc <_dtoa_r+0x184>
 800c6e6:	9800      	ldr	r0, [sp, #0]
 800c6e8:	f7f3 ff4e 	bl	8000588 <__aeabi_i2d>
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	f7f4 fa1c 	bl	8000b2c <__aeabi_dcmpeq>
 800c6f4:	b910      	cbnz	r0, 800c6fc <_dtoa_r+0x184>
 800c6f6:	9b00      	ldr	r3, [sp, #0]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	9b00      	ldr	r3, [sp, #0]
 800c6fe:	2b16      	cmp	r3, #22
 800c700:	d85a      	bhi.n	800c7b8 <_dtoa_r+0x240>
 800c702:	9a00      	ldr	r2, [sp, #0]
 800c704:	4b57      	ldr	r3, [pc, #348]	; (800c864 <_dtoa_r+0x2ec>)
 800c706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	ec51 0b19 	vmov	r0, r1, d9
 800c712:	f7f4 fa15 	bl	8000b40 <__aeabi_dcmplt>
 800c716:	2800      	cmp	r0, #0
 800c718:	d050      	beq.n	800c7bc <_dtoa_r+0x244>
 800c71a:	9b00      	ldr	r3, [sp, #0]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	2300      	movs	r3, #0
 800c722:	930b      	str	r3, [sp, #44]	; 0x2c
 800c724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c726:	1b5d      	subs	r5, r3, r5
 800c728:	1e6b      	subs	r3, r5, #1
 800c72a:	9305      	str	r3, [sp, #20]
 800c72c:	bf45      	ittet	mi
 800c72e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c732:	9304      	strmi	r3, [sp, #16]
 800c734:	2300      	movpl	r3, #0
 800c736:	2300      	movmi	r3, #0
 800c738:	bf4c      	ite	mi
 800c73a:	9305      	strmi	r3, [sp, #20]
 800c73c:	9304      	strpl	r3, [sp, #16]
 800c73e:	9b00      	ldr	r3, [sp, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	db3d      	blt.n	800c7c0 <_dtoa_r+0x248>
 800c744:	9b05      	ldr	r3, [sp, #20]
 800c746:	9a00      	ldr	r2, [sp, #0]
 800c748:	920a      	str	r2, [sp, #40]	; 0x28
 800c74a:	4413      	add	r3, r2
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	2300      	movs	r3, #0
 800c750:	9307      	str	r3, [sp, #28]
 800c752:	9b06      	ldr	r3, [sp, #24]
 800c754:	2b09      	cmp	r3, #9
 800c756:	f200 8089 	bhi.w	800c86c <_dtoa_r+0x2f4>
 800c75a:	2b05      	cmp	r3, #5
 800c75c:	bfc4      	itt	gt
 800c75e:	3b04      	subgt	r3, #4
 800c760:	9306      	strgt	r3, [sp, #24]
 800c762:	9b06      	ldr	r3, [sp, #24]
 800c764:	f1a3 0302 	sub.w	r3, r3, #2
 800c768:	bfcc      	ite	gt
 800c76a:	2500      	movgt	r5, #0
 800c76c:	2501      	movle	r5, #1
 800c76e:	2b03      	cmp	r3, #3
 800c770:	f200 8087 	bhi.w	800c882 <_dtoa_r+0x30a>
 800c774:	e8df f003 	tbb	[pc, r3]
 800c778:	59383a2d 	.word	0x59383a2d
 800c77c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c780:	441d      	add	r5, r3
 800c782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c786:	2b20      	cmp	r3, #32
 800c788:	bfc1      	itttt	gt
 800c78a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c78e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c792:	fa0b f303 	lslgt.w	r3, fp, r3
 800c796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c79a:	bfda      	itte	le
 800c79c:	f1c3 0320 	rsble	r3, r3, #32
 800c7a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c7a4:	4318      	orrgt	r0, r3
 800c7a6:	f7f3 fedf 	bl	8000568 <__aeabi_ui2d>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c7b2:	3d01      	subs	r5, #1
 800c7b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c7b6:	e76a      	b.n	800c68e <_dtoa_r+0x116>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e7b2      	b.n	800c722 <_dtoa_r+0x1aa>
 800c7bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7be:	e7b1      	b.n	800c724 <_dtoa_r+0x1ac>
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	9a00      	ldr	r2, [sp, #0]
 800c7c4:	1a9b      	subs	r3, r3, r2
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	4253      	negs	r3, r2
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d0:	e7bf      	b.n	800c752 <_dtoa_r+0x1da>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9308      	str	r3, [sp, #32]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dc55      	bgt.n	800c888 <_dtoa_r+0x310>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7e6:	e00c      	b.n	800c802 <_dtoa_r+0x28a>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e7f3      	b.n	800c7d4 <_dtoa_r+0x25c>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	9302      	str	r3, [sp, #8]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	9303      	str	r3, [sp, #12]
 800c7fe:	bfb8      	it	lt
 800c800:	2301      	movlt	r3, #1
 800c802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c804:	2200      	movs	r2, #0
 800c806:	6042      	str	r2, [r0, #4]
 800c808:	2204      	movs	r2, #4
 800c80a:	f102 0614 	add.w	r6, r2, #20
 800c80e:	429e      	cmp	r6, r3
 800c810:	6841      	ldr	r1, [r0, #4]
 800c812:	d93d      	bls.n	800c890 <_dtoa_r+0x318>
 800c814:	4620      	mov	r0, r4
 800c816:	f001 f8a7 	bl	800d968 <_Balloc>
 800c81a:	9001      	str	r0, [sp, #4]
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d13b      	bne.n	800c898 <_dtoa_r+0x320>
 800c820:	4b11      	ldr	r3, [pc, #68]	; (800c868 <_dtoa_r+0x2f0>)
 800c822:	4602      	mov	r2, r0
 800c824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c828:	e6c0      	b.n	800c5ac <_dtoa_r+0x34>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e7df      	b.n	800c7ee <_dtoa_r+0x276>
 800c82e:	bf00      	nop
 800c830:	636f4361 	.word	0x636f4361
 800c834:	3fd287a7 	.word	0x3fd287a7
 800c838:	8b60c8b3 	.word	0x8b60c8b3
 800c83c:	3fc68a28 	.word	0x3fc68a28
 800c840:	509f79fb 	.word	0x509f79fb
 800c844:	3fd34413 	.word	0x3fd34413
 800c848:	0800f680 	.word	0x0800f680
 800c84c:	0800f83e 	.word	0x0800f83e
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	0800f83a 	.word	0x0800f83a
 800c858:	0800f831 	.word	0x0800f831
 800c85c:	0800f602 	.word	0x0800f602
 800c860:	3ff80000 	.word	0x3ff80000
 800c864:	0800f9a8 	.word	0x0800f9a8
 800c868:	0800f899 	.word	0x0800f899
 800c86c:	2501      	movs	r5, #1
 800c86e:	2300      	movs	r3, #0
 800c870:	9306      	str	r3, [sp, #24]
 800c872:	9508      	str	r5, [sp, #32]
 800c874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c87c:	2200      	movs	r2, #0
 800c87e:	2312      	movs	r3, #18
 800c880:	e7b0      	b.n	800c7e4 <_dtoa_r+0x26c>
 800c882:	2301      	movs	r3, #1
 800c884:	9308      	str	r3, [sp, #32]
 800c886:	e7f5      	b.n	800c874 <_dtoa_r+0x2fc>
 800c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c88e:	e7b8      	b.n	800c802 <_dtoa_r+0x28a>
 800c890:	3101      	adds	r1, #1
 800c892:	6041      	str	r1, [r0, #4]
 800c894:	0052      	lsls	r2, r2, #1
 800c896:	e7b8      	b.n	800c80a <_dtoa_r+0x292>
 800c898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89a:	9a01      	ldr	r2, [sp, #4]
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	9b03      	ldr	r3, [sp, #12]
 800c8a0:	2b0e      	cmp	r3, #14
 800c8a2:	f200 809d 	bhi.w	800c9e0 <_dtoa_r+0x468>
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	f000 809a 	beq.w	800c9e0 <_dtoa_r+0x468>
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	dd32      	ble.n	800c918 <_dtoa_r+0x3a0>
 800c8b2:	4ab7      	ldr	r2, [pc, #732]	; (800cb90 <_dtoa_r+0x618>)
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8c0:	9b00      	ldr	r3, [sp, #0]
 800c8c2:	05d8      	lsls	r0, r3, #23
 800c8c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c8c8:	d516      	bpl.n	800c8f8 <_dtoa_r+0x380>
 800c8ca:	4bb2      	ldr	r3, [pc, #712]	; (800cb94 <_dtoa_r+0x61c>)
 800c8cc:	ec51 0b19 	vmov	r0, r1, d9
 800c8d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8d4:	f7f3 ffec 	bl	80008b0 <__aeabi_ddiv>
 800c8d8:	f007 070f 	and.w	r7, r7, #15
 800c8dc:	4682      	mov	sl, r0
 800c8de:	468b      	mov	fp, r1
 800c8e0:	2503      	movs	r5, #3
 800c8e2:	4eac      	ldr	r6, [pc, #688]	; (800cb94 <_dtoa_r+0x61c>)
 800c8e4:	b957      	cbnz	r7, 800c8fc <_dtoa_r+0x384>
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	f7f3 ffdf 	bl	80008b0 <__aeabi_ddiv>
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	468b      	mov	fp, r1
 800c8f6:	e028      	b.n	800c94a <_dtoa_r+0x3d2>
 800c8f8:	2502      	movs	r5, #2
 800c8fa:	e7f2      	b.n	800c8e2 <_dtoa_r+0x36a>
 800c8fc:	07f9      	lsls	r1, r7, #31
 800c8fe:	d508      	bpl.n	800c912 <_dtoa_r+0x39a>
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c908:	f7f3 fea8 	bl	800065c <__aeabi_dmul>
 800c90c:	3501      	adds	r5, #1
 800c90e:	4680      	mov	r8, r0
 800c910:	4689      	mov	r9, r1
 800c912:	107f      	asrs	r7, r7, #1
 800c914:	3608      	adds	r6, #8
 800c916:	e7e5      	b.n	800c8e4 <_dtoa_r+0x36c>
 800c918:	f000 809b 	beq.w	800ca52 <_dtoa_r+0x4da>
 800c91c:	9b00      	ldr	r3, [sp, #0]
 800c91e:	4f9d      	ldr	r7, [pc, #628]	; (800cb94 <_dtoa_r+0x61c>)
 800c920:	425e      	negs	r6, r3
 800c922:	4b9b      	ldr	r3, [pc, #620]	; (800cb90 <_dtoa_r+0x618>)
 800c924:	f006 020f 	and.w	r2, r6, #15
 800c928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	ec51 0b19 	vmov	r0, r1, d9
 800c934:	f7f3 fe92 	bl	800065c <__aeabi_dmul>
 800c938:	1136      	asrs	r6, r6, #4
 800c93a:	4682      	mov	sl, r0
 800c93c:	468b      	mov	fp, r1
 800c93e:	2300      	movs	r3, #0
 800c940:	2502      	movs	r5, #2
 800c942:	2e00      	cmp	r6, #0
 800c944:	d17a      	bne.n	800ca3c <_dtoa_r+0x4c4>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1d3      	bne.n	800c8f2 <_dtoa_r+0x37a>
 800c94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8082 	beq.w	800ca56 <_dtoa_r+0x4de>
 800c952:	4b91      	ldr	r3, [pc, #580]	; (800cb98 <_dtoa_r+0x620>)
 800c954:	2200      	movs	r2, #0
 800c956:	4650      	mov	r0, sl
 800c958:	4659      	mov	r1, fp
 800c95a:	f7f4 f8f1 	bl	8000b40 <__aeabi_dcmplt>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d079      	beq.n	800ca56 <_dtoa_r+0x4de>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d076      	beq.n	800ca56 <_dtoa_r+0x4de>
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd36      	ble.n	800c9dc <_dtoa_r+0x464>
 800c96e:	9b00      	ldr	r3, [sp, #0]
 800c970:	4650      	mov	r0, sl
 800c972:	4659      	mov	r1, fp
 800c974:	1e5f      	subs	r7, r3, #1
 800c976:	2200      	movs	r2, #0
 800c978:	4b88      	ldr	r3, [pc, #544]	; (800cb9c <_dtoa_r+0x624>)
 800c97a:	f7f3 fe6f 	bl	800065c <__aeabi_dmul>
 800c97e:	9e02      	ldr	r6, [sp, #8]
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	3501      	adds	r5, #1
 800c986:	4628      	mov	r0, r5
 800c988:	f7f3 fdfe 	bl	8000588 <__aeabi_i2d>
 800c98c:	4652      	mov	r2, sl
 800c98e:	465b      	mov	r3, fp
 800c990:	f7f3 fe64 	bl	800065c <__aeabi_dmul>
 800c994:	4b82      	ldr	r3, [pc, #520]	; (800cba0 <_dtoa_r+0x628>)
 800c996:	2200      	movs	r2, #0
 800c998:	f7f3 fcaa 	bl	80002f0 <__adddf3>
 800c99c:	46d0      	mov	r8, sl
 800c99e:	46d9      	mov	r9, fp
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d158      	bne.n	800ca5c <_dtoa_r+0x4e4>
 800c9aa:	4b7e      	ldr	r3, [pc, #504]	; (800cba4 <_dtoa_r+0x62c>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f3 fc9b 	bl	80002ec <__aeabi_dsub>
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	465b      	mov	r3, fp
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	4689      	mov	r9, r1
 800c9be:	f7f4 f8dd 	bl	8000b7c <__aeabi_dcmpgt>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f040 8295 	bne.w	800cef2 <_dtoa_r+0x97a>
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	f7f4 f8b5 	bl	8000b40 <__aeabi_dcmplt>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f040 8289 	bne.w	800ceee <_dtoa_r+0x976>
 800c9dc:	ec5b ab19 	vmov	sl, fp, d9
 800c9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f2c0 8148 	blt.w	800cc78 <_dtoa_r+0x700>
 800c9e8:	9a00      	ldr	r2, [sp, #0]
 800c9ea:	2a0e      	cmp	r2, #14
 800c9ec:	f300 8144 	bgt.w	800cc78 <_dtoa_r+0x700>
 800c9f0:	4b67      	ldr	r3, [pc, #412]	; (800cb90 <_dtoa_r+0x618>)
 800c9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f280 80d5 	bge.w	800cbac <_dtoa_r+0x634>
 800ca02:	9b03      	ldr	r3, [sp, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f300 80d1 	bgt.w	800cbac <_dtoa_r+0x634>
 800ca0a:	f040 826f 	bne.w	800ceec <_dtoa_r+0x974>
 800ca0e:	4b65      	ldr	r3, [pc, #404]	; (800cba4 <_dtoa_r+0x62c>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7f3 fe21 	bl	800065c <__aeabi_dmul>
 800ca1a:	4652      	mov	r2, sl
 800ca1c:	465b      	mov	r3, fp
 800ca1e:	f7f4 f8a3 	bl	8000b68 <__aeabi_dcmpge>
 800ca22:	9e03      	ldr	r6, [sp, #12]
 800ca24:	4637      	mov	r7, r6
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f040 8245 	bne.w	800ceb6 <_dtoa_r+0x93e>
 800ca2c:	9d01      	ldr	r5, [sp, #4]
 800ca2e:	2331      	movs	r3, #49	; 0x31
 800ca30:	f805 3b01 	strb.w	r3, [r5], #1
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	e240      	b.n	800cebe <_dtoa_r+0x946>
 800ca3c:	07f2      	lsls	r2, r6, #31
 800ca3e:	d505      	bpl.n	800ca4c <_dtoa_r+0x4d4>
 800ca40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca44:	f7f3 fe0a 	bl	800065c <__aeabi_dmul>
 800ca48:	3501      	adds	r5, #1
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	1076      	asrs	r6, r6, #1
 800ca4e:	3708      	adds	r7, #8
 800ca50:	e777      	b.n	800c942 <_dtoa_r+0x3ca>
 800ca52:	2502      	movs	r5, #2
 800ca54:	e779      	b.n	800c94a <_dtoa_r+0x3d2>
 800ca56:	9f00      	ldr	r7, [sp, #0]
 800ca58:	9e03      	ldr	r6, [sp, #12]
 800ca5a:	e794      	b.n	800c986 <_dtoa_r+0x40e>
 800ca5c:	9901      	ldr	r1, [sp, #4]
 800ca5e:	4b4c      	ldr	r3, [pc, #304]	; (800cb90 <_dtoa_r+0x618>)
 800ca60:	4431      	add	r1, r6
 800ca62:	910d      	str	r1, [sp, #52]	; 0x34
 800ca64:	9908      	ldr	r1, [sp, #32]
 800ca66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca6e:	2900      	cmp	r1, #0
 800ca70:	d043      	beq.n	800cafa <_dtoa_r+0x582>
 800ca72:	494d      	ldr	r1, [pc, #308]	; (800cba8 <_dtoa_r+0x630>)
 800ca74:	2000      	movs	r0, #0
 800ca76:	f7f3 ff1b 	bl	80008b0 <__aeabi_ddiv>
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	f7f3 fc35 	bl	80002ec <__aeabi_dsub>
 800ca82:	9d01      	ldr	r5, [sp, #4]
 800ca84:	4682      	mov	sl, r0
 800ca86:	468b      	mov	fp, r1
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	f7f4 f896 	bl	8000bbc <__aeabi_d2iz>
 800ca90:	4606      	mov	r6, r0
 800ca92:	f7f3 fd79 	bl	8000588 <__aeabi_i2d>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	f7f3 fc25 	bl	80002ec <__aeabi_dsub>
 800caa2:	3630      	adds	r6, #48	; 0x30
 800caa4:	f805 6b01 	strb.w	r6, [r5], #1
 800caa8:	4652      	mov	r2, sl
 800caaa:	465b      	mov	r3, fp
 800caac:	4680      	mov	r8, r0
 800caae:	4689      	mov	r9, r1
 800cab0:	f7f4 f846 	bl	8000b40 <__aeabi_dcmplt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d163      	bne.n	800cb80 <_dtoa_r+0x608>
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	4936      	ldr	r1, [pc, #216]	; (800cb98 <_dtoa_r+0x620>)
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7f3 fc14 	bl	80002ec <__aeabi_dsub>
 800cac4:	4652      	mov	r2, sl
 800cac6:	465b      	mov	r3, fp
 800cac8:	f7f4 f83a 	bl	8000b40 <__aeabi_dcmplt>
 800cacc:	2800      	cmp	r0, #0
 800cace:	f040 80b5 	bne.w	800cc3c <_dtoa_r+0x6c4>
 800cad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cad4:	429d      	cmp	r5, r3
 800cad6:	d081      	beq.n	800c9dc <_dtoa_r+0x464>
 800cad8:	4b30      	ldr	r3, [pc, #192]	; (800cb9c <_dtoa_r+0x624>)
 800cada:	2200      	movs	r2, #0
 800cadc:	4650      	mov	r0, sl
 800cade:	4659      	mov	r1, fp
 800cae0:	f7f3 fdbc 	bl	800065c <__aeabi_dmul>
 800cae4:	4b2d      	ldr	r3, [pc, #180]	; (800cb9c <_dtoa_r+0x624>)
 800cae6:	4682      	mov	sl, r0
 800cae8:	468b      	mov	fp, r1
 800caea:	4640      	mov	r0, r8
 800caec:	4649      	mov	r1, r9
 800caee:	2200      	movs	r2, #0
 800caf0:	f7f3 fdb4 	bl	800065c <__aeabi_dmul>
 800caf4:	4680      	mov	r8, r0
 800caf6:	4689      	mov	r9, r1
 800caf8:	e7c6      	b.n	800ca88 <_dtoa_r+0x510>
 800cafa:	4650      	mov	r0, sl
 800cafc:	4659      	mov	r1, fp
 800cafe:	f7f3 fdad 	bl	800065c <__aeabi_dmul>
 800cb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb04:	9d01      	ldr	r5, [sp, #4]
 800cb06:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb08:	4682      	mov	sl, r0
 800cb0a:	468b      	mov	fp, r1
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4640      	mov	r0, r8
 800cb10:	f7f4 f854 	bl	8000bbc <__aeabi_d2iz>
 800cb14:	4606      	mov	r6, r0
 800cb16:	f7f3 fd37 	bl	8000588 <__aeabi_i2d>
 800cb1a:	3630      	adds	r6, #48	; 0x30
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4640      	mov	r0, r8
 800cb22:	4649      	mov	r1, r9
 800cb24:	f7f3 fbe2 	bl	80002ec <__aeabi_dsub>
 800cb28:	f805 6b01 	strb.w	r6, [r5], #1
 800cb2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	4680      	mov	r8, r0
 800cb32:	4689      	mov	r9, r1
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	d124      	bne.n	800cb84 <_dtoa_r+0x60c>
 800cb3a:	4b1b      	ldr	r3, [pc, #108]	; (800cba8 <_dtoa_r+0x630>)
 800cb3c:	4650      	mov	r0, sl
 800cb3e:	4659      	mov	r1, fp
 800cb40:	f7f3 fbd6 	bl	80002f0 <__adddf3>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4640      	mov	r0, r8
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	f7f4 f816 	bl	8000b7c <__aeabi_dcmpgt>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d173      	bne.n	800cc3c <_dtoa_r+0x6c4>
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	4913      	ldr	r1, [pc, #76]	; (800cba8 <_dtoa_r+0x630>)
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	f7f3 fbc6 	bl	80002ec <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 ffea 	bl	8000b40 <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f43f af35 	beq.w	800c9dc <_dtoa_r+0x464>
 800cb72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb74:	1e6b      	subs	r3, r5, #1
 800cb76:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb7c:	2b30      	cmp	r3, #48	; 0x30
 800cb7e:	d0f8      	beq.n	800cb72 <_dtoa_r+0x5fa>
 800cb80:	9700      	str	r7, [sp, #0]
 800cb82:	e049      	b.n	800cc18 <_dtoa_r+0x6a0>
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <_dtoa_r+0x624>)
 800cb86:	f7f3 fd69 	bl	800065c <__aeabi_dmul>
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	4689      	mov	r9, r1
 800cb8e:	e7bd      	b.n	800cb0c <_dtoa_r+0x594>
 800cb90:	0800f9a8 	.word	0x0800f9a8
 800cb94:	0800f980 	.word	0x0800f980
 800cb98:	3ff00000 	.word	0x3ff00000
 800cb9c:	40240000 	.word	0x40240000
 800cba0:	401c0000 	.word	0x401c0000
 800cba4:	40140000 	.word	0x40140000
 800cba8:	3fe00000 	.word	0x3fe00000
 800cbac:	9d01      	ldr	r5, [sp, #4]
 800cbae:	4656      	mov	r6, sl
 800cbb0:	465f      	mov	r7, fp
 800cbb2:	4642      	mov	r2, r8
 800cbb4:	464b      	mov	r3, r9
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fe79 	bl	80008b0 <__aeabi_ddiv>
 800cbbe:	f7f3 fffd 	bl	8000bbc <__aeabi_d2iz>
 800cbc2:	4682      	mov	sl, r0
 800cbc4:	f7f3 fce0 	bl	8000588 <__aeabi_i2d>
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	f7f3 fd46 	bl	800065c <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cbdc:	f7f3 fb86 	bl	80002ec <__aeabi_dsub>
 800cbe0:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe4:	9e01      	ldr	r6, [sp, #4]
 800cbe6:	9f03      	ldr	r7, [sp, #12]
 800cbe8:	1bae      	subs	r6, r5, r6
 800cbea:	42b7      	cmp	r7, r6
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	d135      	bne.n	800cc5e <_dtoa_r+0x6e6>
 800cbf2:	f7f3 fb7d 	bl	80002f0 <__adddf3>
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	464b      	mov	r3, r9
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	f7f3 ffbd 	bl	8000b7c <__aeabi_dcmpgt>
 800cc02:	b9d0      	cbnz	r0, 800cc3a <_dtoa_r+0x6c2>
 800cc04:	4642      	mov	r2, r8
 800cc06:	464b      	mov	r3, r9
 800cc08:	4630      	mov	r0, r6
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	f7f3 ff8e 	bl	8000b2c <__aeabi_dcmpeq>
 800cc10:	b110      	cbz	r0, 800cc18 <_dtoa_r+0x6a0>
 800cc12:	f01a 0f01 	tst.w	sl, #1
 800cc16:	d110      	bne.n	800cc3a <_dtoa_r+0x6c2>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	ee18 1a10 	vmov	r1, s16
 800cc1e:	f000 fee3 	bl	800d9e8 <_Bfree>
 800cc22:	2300      	movs	r3, #0
 800cc24:	9800      	ldr	r0, [sp, #0]
 800cc26:	702b      	strb	r3, [r5, #0]
 800cc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	6018      	str	r0, [r3, #0]
 800cc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f43f acf1 	beq.w	800c618 <_dtoa_r+0xa0>
 800cc36:	601d      	str	r5, [r3, #0]
 800cc38:	e4ee      	b.n	800c618 <_dtoa_r+0xa0>
 800cc3a:	9f00      	ldr	r7, [sp, #0]
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	461d      	mov	r5, r3
 800cc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc44:	2a39      	cmp	r2, #57	; 0x39
 800cc46:	d106      	bne.n	800cc56 <_dtoa_r+0x6de>
 800cc48:	9a01      	ldr	r2, [sp, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d1f7      	bne.n	800cc3e <_dtoa_r+0x6c6>
 800cc4e:	9901      	ldr	r1, [sp, #4]
 800cc50:	2230      	movs	r2, #48	; 0x30
 800cc52:	3701      	adds	r7, #1
 800cc54:	700a      	strb	r2, [r1, #0]
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	3201      	adds	r2, #1
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e790      	b.n	800cb80 <_dtoa_r+0x608>
 800cc5e:	4ba6      	ldr	r3, [pc, #664]	; (800cef8 <_dtoa_r+0x980>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	f7f3 fcfb 	bl	800065c <__aeabi_dmul>
 800cc66:	2200      	movs	r2, #0
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	f7f3 ff5d 	bl	8000b2c <__aeabi_dcmpeq>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d09d      	beq.n	800cbb2 <_dtoa_r+0x63a>
 800cc76:	e7cf      	b.n	800cc18 <_dtoa_r+0x6a0>
 800cc78:	9a08      	ldr	r2, [sp, #32]
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	f000 80d7 	beq.w	800ce2e <_dtoa_r+0x8b6>
 800cc80:	9a06      	ldr	r2, [sp, #24]
 800cc82:	2a01      	cmp	r2, #1
 800cc84:	f300 80ba 	bgt.w	800cdfc <_dtoa_r+0x884>
 800cc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	f000 80b2 	beq.w	800cdf4 <_dtoa_r+0x87c>
 800cc90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc94:	9e07      	ldr	r6, [sp, #28]
 800cc96:	9d04      	ldr	r5, [sp, #16]
 800cc98:	9a04      	ldr	r2, [sp, #16]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	9204      	str	r2, [sp, #16]
 800cc9e:	9a05      	ldr	r2, [sp, #20]
 800cca0:	2101      	movs	r1, #1
 800cca2:	441a      	add	r2, r3
 800cca4:	4620      	mov	r0, r4
 800cca6:	9205      	str	r2, [sp, #20]
 800cca8:	f000 ffa0 	bl	800dbec <__i2b>
 800ccac:	4607      	mov	r7, r0
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	dd0c      	ble.n	800cccc <_dtoa_r+0x754>
 800ccb2:	9b05      	ldr	r3, [sp, #20]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dd09      	ble.n	800cccc <_dtoa_r+0x754>
 800ccb8:	42ab      	cmp	r3, r5
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	bfa8      	it	ge
 800ccbe:	462b      	movge	r3, r5
 800ccc0:	1ad2      	subs	r2, r2, r3
 800ccc2:	9204      	str	r2, [sp, #16]
 800ccc4:	9a05      	ldr	r2, [sp, #20]
 800ccc6:	1aed      	subs	r5, r5, r3
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	9305      	str	r3, [sp, #20]
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	b31b      	cbz	r3, 800cd18 <_dtoa_r+0x7a0>
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 80af 	beq.w	800ce36 <_dtoa_r+0x8be>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	dd13      	ble.n	800cd04 <_dtoa_r+0x78c>
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4632      	mov	r2, r6
 800cce0:	4620      	mov	r0, r4
 800cce2:	f001 f843 	bl	800dd6c <__pow5mult>
 800cce6:	ee18 2a10 	vmov	r2, s16
 800ccea:	4601      	mov	r1, r0
 800ccec:	4607      	mov	r7, r0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 ff92 	bl	800dc18 <__multiply>
 800ccf4:	ee18 1a10 	vmov	r1, s16
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fe74 	bl	800d9e8 <_Bfree>
 800cd00:	ee08 8a10 	vmov	s16, r8
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	1b9a      	subs	r2, r3, r6
 800cd08:	d006      	beq.n	800cd18 <_dtoa_r+0x7a0>
 800cd0a:	ee18 1a10 	vmov	r1, s16
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f001 f82c 	bl	800dd6c <__pow5mult>
 800cd14:	ee08 0a10 	vmov	s16, r0
 800cd18:	2101      	movs	r1, #1
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f000 ff66 	bl	800dbec <__i2b>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	f340 8088 	ble.w	800ce3a <_dtoa_r+0x8c2>
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4601      	mov	r1, r0
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f001 f81c 	bl	800dd6c <__pow5mult>
 800cd34:	9b06      	ldr	r3, [sp, #24]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	4606      	mov	r6, r0
 800cd3a:	f340 8081 	ble.w	800ce40 <_dtoa_r+0x8c8>
 800cd3e:	f04f 0800 	mov.w	r8, #0
 800cd42:	6933      	ldr	r3, [r6, #16]
 800cd44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd48:	6918      	ldr	r0, [r3, #16]
 800cd4a:	f000 feff 	bl	800db4c <__hi0bits>
 800cd4e:	f1c0 0020 	rsb	r0, r0, #32
 800cd52:	9b05      	ldr	r3, [sp, #20]
 800cd54:	4418      	add	r0, r3
 800cd56:	f010 001f 	ands.w	r0, r0, #31
 800cd5a:	f000 8092 	beq.w	800ce82 <_dtoa_r+0x90a>
 800cd5e:	f1c0 0320 	rsb	r3, r0, #32
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	f340 808a 	ble.w	800ce7c <_dtoa_r+0x904>
 800cd68:	f1c0 001c 	rsb	r0, r0, #28
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	4403      	add	r3, r0
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	9b05      	ldr	r3, [sp, #20]
 800cd74:	4403      	add	r3, r0
 800cd76:	4405      	add	r5, r0
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dd07      	ble.n	800cd90 <_dtoa_r+0x818>
 800cd80:	ee18 1a10 	vmov	r1, s16
 800cd84:	461a      	mov	r2, r3
 800cd86:	4620      	mov	r0, r4
 800cd88:	f001 f84a 	bl	800de20 <__lshift>
 800cd8c:	ee08 0a10 	vmov	s16, r0
 800cd90:	9b05      	ldr	r3, [sp, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	dd05      	ble.n	800cda2 <_dtoa_r+0x82a>
 800cd96:	4631      	mov	r1, r6
 800cd98:	461a      	mov	r2, r3
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f001 f840 	bl	800de20 <__lshift>
 800cda0:	4606      	mov	r6, r0
 800cda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d06e      	beq.n	800ce86 <_dtoa_r+0x90e>
 800cda8:	ee18 0a10 	vmov	r0, s16
 800cdac:	4631      	mov	r1, r6
 800cdae:	f001 f8a7 	bl	800df00 <__mcmp>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	da67      	bge.n	800ce86 <_dtoa_r+0x90e>
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	ee18 1a10 	vmov	r1, s16
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 fe31 	bl	800da2c <__multadd>
 800cdca:	9b08      	ldr	r3, [sp, #32]
 800cdcc:	ee08 0a10 	vmov	s16, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 81b1 	beq.w	800d138 <_dtoa_r+0xbc0>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4639      	mov	r1, r7
 800cdda:	220a      	movs	r2, #10
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fe25 	bl	800da2c <__multadd>
 800cde2:	9b02      	ldr	r3, [sp, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	4607      	mov	r7, r0
 800cde8:	f300 808e 	bgt.w	800cf08 <_dtoa_r+0x990>
 800cdec:	9b06      	ldr	r3, [sp, #24]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	dc51      	bgt.n	800ce96 <_dtoa_r+0x91e>
 800cdf2:	e089      	b.n	800cf08 <_dtoa_r+0x990>
 800cdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdfa:	e74b      	b.n	800cc94 <_dtoa_r+0x71c>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	1e5e      	subs	r6, r3, #1
 800ce00:	9b07      	ldr	r3, [sp, #28]
 800ce02:	42b3      	cmp	r3, r6
 800ce04:	bfbf      	itttt	lt
 800ce06:	9b07      	ldrlt	r3, [sp, #28]
 800ce08:	9607      	strlt	r6, [sp, #28]
 800ce0a:	1af2      	sublt	r2, r6, r3
 800ce0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce0e:	bfb6      	itet	lt
 800ce10:	189b      	addlt	r3, r3, r2
 800ce12:	1b9e      	subge	r6, r3, r6
 800ce14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ce16:	9b03      	ldr	r3, [sp, #12]
 800ce18:	bfb8      	it	lt
 800ce1a:	2600      	movlt	r6, #0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfb7      	itett	lt
 800ce20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ce24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ce28:	1a9d      	sublt	r5, r3, r2
 800ce2a:	2300      	movlt	r3, #0
 800ce2c:	e734      	b.n	800cc98 <_dtoa_r+0x720>
 800ce2e:	9e07      	ldr	r6, [sp, #28]
 800ce30:	9d04      	ldr	r5, [sp, #16]
 800ce32:	9f08      	ldr	r7, [sp, #32]
 800ce34:	e73b      	b.n	800ccae <_dtoa_r+0x736>
 800ce36:	9a07      	ldr	r2, [sp, #28]
 800ce38:	e767      	b.n	800cd0a <_dtoa_r+0x792>
 800ce3a:	9b06      	ldr	r3, [sp, #24]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	dc18      	bgt.n	800ce72 <_dtoa_r+0x8fa>
 800ce40:	f1ba 0f00 	cmp.w	sl, #0
 800ce44:	d115      	bne.n	800ce72 <_dtoa_r+0x8fa>
 800ce46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce4a:	b993      	cbnz	r3, 800ce72 <_dtoa_r+0x8fa>
 800ce4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce50:	0d1b      	lsrs	r3, r3, #20
 800ce52:	051b      	lsls	r3, r3, #20
 800ce54:	b183      	cbz	r3, 800ce78 <_dtoa_r+0x900>
 800ce56:	9b04      	ldr	r3, [sp, #16]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	9b05      	ldr	r3, [sp, #20]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	f04f 0801 	mov.w	r8, #1
 800ce66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f47f af6a 	bne.w	800cd42 <_dtoa_r+0x7ca>
 800ce6e:	2001      	movs	r0, #1
 800ce70:	e76f      	b.n	800cd52 <_dtoa_r+0x7da>
 800ce72:	f04f 0800 	mov.w	r8, #0
 800ce76:	e7f6      	b.n	800ce66 <_dtoa_r+0x8ee>
 800ce78:	4698      	mov	r8, r3
 800ce7a:	e7f4      	b.n	800ce66 <_dtoa_r+0x8ee>
 800ce7c:	f43f af7d 	beq.w	800cd7a <_dtoa_r+0x802>
 800ce80:	4618      	mov	r0, r3
 800ce82:	301c      	adds	r0, #28
 800ce84:	e772      	b.n	800cd6c <_dtoa_r+0x7f4>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc37      	bgt.n	800cefc <_dtoa_r+0x984>
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dd34      	ble.n	800cefc <_dtoa_r+0x984>
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	9302      	str	r3, [sp, #8]
 800ce96:	9b02      	ldr	r3, [sp, #8]
 800ce98:	b96b      	cbnz	r3, 800ceb6 <_dtoa_r+0x93e>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 fdc4 	bl	800da2c <__multadd>
 800cea4:	4601      	mov	r1, r0
 800cea6:	4606      	mov	r6, r0
 800cea8:	ee18 0a10 	vmov	r0, s16
 800ceac:	f001 f828 	bl	800df00 <__mcmp>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f73f adbb 	bgt.w	800ca2c <_dtoa_r+0x4b4>
 800ceb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb8:	9d01      	ldr	r5, [sp, #4]
 800ceba:	43db      	mvns	r3, r3
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	4631      	mov	r1, r6
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fd8f 	bl	800d9e8 <_Bfree>
 800ceca:	2f00      	cmp	r7, #0
 800cecc:	f43f aea4 	beq.w	800cc18 <_dtoa_r+0x6a0>
 800ced0:	f1b8 0f00 	cmp.w	r8, #0
 800ced4:	d005      	beq.n	800cee2 <_dtoa_r+0x96a>
 800ced6:	45b8      	cmp	r8, r7
 800ced8:	d003      	beq.n	800cee2 <_dtoa_r+0x96a>
 800ceda:	4641      	mov	r1, r8
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fd83 	bl	800d9e8 <_Bfree>
 800cee2:	4639      	mov	r1, r7
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fd7f 	bl	800d9e8 <_Bfree>
 800ceea:	e695      	b.n	800cc18 <_dtoa_r+0x6a0>
 800ceec:	2600      	movs	r6, #0
 800ceee:	4637      	mov	r7, r6
 800cef0:	e7e1      	b.n	800ceb6 <_dtoa_r+0x93e>
 800cef2:	9700      	str	r7, [sp, #0]
 800cef4:	4637      	mov	r7, r6
 800cef6:	e599      	b.n	800ca2c <_dtoa_r+0x4b4>
 800cef8:	40240000 	.word	0x40240000
 800cefc:	9b08      	ldr	r3, [sp, #32]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 80ca 	beq.w	800d098 <_dtoa_r+0xb20>
 800cf04:	9b03      	ldr	r3, [sp, #12]
 800cf06:	9302      	str	r3, [sp, #8]
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	dd05      	ble.n	800cf18 <_dtoa_r+0x9a0>
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	462a      	mov	r2, r5
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 ff85 	bl	800de20 <__lshift>
 800cf16:	4607      	mov	r7, r0
 800cf18:	f1b8 0f00 	cmp.w	r8, #0
 800cf1c:	d05b      	beq.n	800cfd6 <_dtoa_r+0xa5e>
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4620      	mov	r0, r4
 800cf22:	f000 fd21 	bl	800d968 <_Balloc>
 800cf26:	4605      	mov	r5, r0
 800cf28:	b928      	cbnz	r0, 800cf36 <_dtoa_r+0x9be>
 800cf2a:	4b87      	ldr	r3, [pc, #540]	; (800d148 <_dtoa_r+0xbd0>)
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf32:	f7ff bb3b 	b.w	800c5ac <_dtoa_r+0x34>
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	3202      	adds	r2, #2
 800cf3a:	0092      	lsls	r2, r2, #2
 800cf3c:	f107 010c 	add.w	r1, r7, #12
 800cf40:	300c      	adds	r0, #12
 800cf42:	f7fd f819 	bl	8009f78 <memcpy>
 800cf46:	2201      	movs	r2, #1
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 ff68 	bl	800de20 <__lshift>
 800cf50:	9b01      	ldr	r3, [sp, #4]
 800cf52:	f103 0901 	add.w	r9, r3, #1
 800cf56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	f00a 0301 	and.w	r3, sl, #1
 800cf62:	46b8      	mov	r8, r7
 800cf64:	9304      	str	r3, [sp, #16]
 800cf66:	4607      	mov	r7, r0
 800cf68:	4631      	mov	r1, r6
 800cf6a:	ee18 0a10 	vmov	r0, s16
 800cf6e:	f7ff fa75 	bl	800c45c <quorem>
 800cf72:	4641      	mov	r1, r8
 800cf74:	9002      	str	r0, [sp, #8]
 800cf76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf7a:	ee18 0a10 	vmov	r0, s16
 800cf7e:	f000 ffbf 	bl	800df00 <__mcmp>
 800cf82:	463a      	mov	r2, r7
 800cf84:	9003      	str	r0, [sp, #12]
 800cf86:	4631      	mov	r1, r6
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 ffd5 	bl	800df38 <__mdiff>
 800cf8e:	68c2      	ldr	r2, [r0, #12]
 800cf90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cf94:	4605      	mov	r5, r0
 800cf96:	bb02      	cbnz	r2, 800cfda <_dtoa_r+0xa62>
 800cf98:	4601      	mov	r1, r0
 800cf9a:	ee18 0a10 	vmov	r0, s16
 800cf9e:	f000 ffaf 	bl	800df00 <__mcmp>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	9207      	str	r2, [sp, #28]
 800cfaa:	f000 fd1d 	bl	800d9e8 <_Bfree>
 800cfae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cfb2:	ea43 0102 	orr.w	r1, r3, r2
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	430b      	orrs	r3, r1
 800cfba:	464d      	mov	r5, r9
 800cfbc:	d10f      	bne.n	800cfde <_dtoa_r+0xa66>
 800cfbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfc2:	d02a      	beq.n	800d01a <_dtoa_r+0xaa2>
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	dd02      	ble.n	800cfd0 <_dtoa_r+0xa58>
 800cfca:	9b02      	ldr	r3, [sp, #8]
 800cfcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cfd0:	f88b a000 	strb.w	sl, [fp]
 800cfd4:	e775      	b.n	800cec2 <_dtoa_r+0x94a>
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	e7ba      	b.n	800cf50 <_dtoa_r+0x9d8>
 800cfda:	2201      	movs	r2, #1
 800cfdc:	e7e2      	b.n	800cfa4 <_dtoa_r+0xa2c>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db04      	blt.n	800cfee <_dtoa_r+0xa76>
 800cfe4:	9906      	ldr	r1, [sp, #24]
 800cfe6:	430b      	orrs	r3, r1
 800cfe8:	9904      	ldr	r1, [sp, #16]
 800cfea:	430b      	orrs	r3, r1
 800cfec:	d122      	bne.n	800d034 <_dtoa_r+0xabc>
 800cfee:	2a00      	cmp	r2, #0
 800cff0:	ddee      	ble.n	800cfd0 <_dtoa_r+0xa58>
 800cff2:	ee18 1a10 	vmov	r1, s16
 800cff6:	2201      	movs	r2, #1
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 ff11 	bl	800de20 <__lshift>
 800cffe:	4631      	mov	r1, r6
 800d000:	ee08 0a10 	vmov	s16, r0
 800d004:	f000 ff7c 	bl	800df00 <__mcmp>
 800d008:	2800      	cmp	r0, #0
 800d00a:	dc03      	bgt.n	800d014 <_dtoa_r+0xa9c>
 800d00c:	d1e0      	bne.n	800cfd0 <_dtoa_r+0xa58>
 800d00e:	f01a 0f01 	tst.w	sl, #1
 800d012:	d0dd      	beq.n	800cfd0 <_dtoa_r+0xa58>
 800d014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d018:	d1d7      	bne.n	800cfca <_dtoa_r+0xa52>
 800d01a:	2339      	movs	r3, #57	; 0x39
 800d01c:	f88b 3000 	strb.w	r3, [fp]
 800d020:	462b      	mov	r3, r5
 800d022:	461d      	mov	r5, r3
 800d024:	3b01      	subs	r3, #1
 800d026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d02a:	2a39      	cmp	r2, #57	; 0x39
 800d02c:	d071      	beq.n	800d112 <_dtoa_r+0xb9a>
 800d02e:	3201      	adds	r2, #1
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	e746      	b.n	800cec2 <_dtoa_r+0x94a>
 800d034:	2a00      	cmp	r2, #0
 800d036:	dd07      	ble.n	800d048 <_dtoa_r+0xad0>
 800d038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d03c:	d0ed      	beq.n	800d01a <_dtoa_r+0xaa2>
 800d03e:	f10a 0301 	add.w	r3, sl, #1
 800d042:	f88b 3000 	strb.w	r3, [fp]
 800d046:	e73c      	b.n	800cec2 <_dtoa_r+0x94a>
 800d048:	9b05      	ldr	r3, [sp, #20]
 800d04a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d04e:	4599      	cmp	r9, r3
 800d050:	d047      	beq.n	800d0e2 <_dtoa_r+0xb6a>
 800d052:	ee18 1a10 	vmov	r1, s16
 800d056:	2300      	movs	r3, #0
 800d058:	220a      	movs	r2, #10
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fce6 	bl	800da2c <__multadd>
 800d060:	45b8      	cmp	r8, r7
 800d062:	ee08 0a10 	vmov	s16, r0
 800d066:	f04f 0300 	mov.w	r3, #0
 800d06a:	f04f 020a 	mov.w	r2, #10
 800d06e:	4641      	mov	r1, r8
 800d070:	4620      	mov	r0, r4
 800d072:	d106      	bne.n	800d082 <_dtoa_r+0xb0a>
 800d074:	f000 fcda 	bl	800da2c <__multadd>
 800d078:	4680      	mov	r8, r0
 800d07a:	4607      	mov	r7, r0
 800d07c:	f109 0901 	add.w	r9, r9, #1
 800d080:	e772      	b.n	800cf68 <_dtoa_r+0x9f0>
 800d082:	f000 fcd3 	bl	800da2c <__multadd>
 800d086:	4639      	mov	r1, r7
 800d088:	4680      	mov	r8, r0
 800d08a:	2300      	movs	r3, #0
 800d08c:	220a      	movs	r2, #10
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 fccc 	bl	800da2c <__multadd>
 800d094:	4607      	mov	r7, r0
 800d096:	e7f1      	b.n	800d07c <_dtoa_r+0xb04>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	9d01      	ldr	r5, [sp, #4]
 800d09e:	ee18 0a10 	vmov	r0, s16
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	f7ff f9da 	bl	800c45c <quorem>
 800d0a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0ac:	9b01      	ldr	r3, [sp, #4]
 800d0ae:	f805 ab01 	strb.w	sl, [r5], #1
 800d0b2:	1aea      	subs	r2, r5, r3
 800d0b4:	9b02      	ldr	r3, [sp, #8]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	dd09      	ble.n	800d0ce <_dtoa_r+0xb56>
 800d0ba:	ee18 1a10 	vmov	r1, s16
 800d0be:	2300      	movs	r3, #0
 800d0c0:	220a      	movs	r2, #10
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fcb2 	bl	800da2c <__multadd>
 800d0c8:	ee08 0a10 	vmov	s16, r0
 800d0cc:	e7e7      	b.n	800d09e <_dtoa_r+0xb26>
 800d0ce:	9b02      	ldr	r3, [sp, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	bfc8      	it	gt
 800d0d4:	461d      	movgt	r5, r3
 800d0d6:	9b01      	ldr	r3, [sp, #4]
 800d0d8:	bfd8      	it	le
 800d0da:	2501      	movle	r5, #1
 800d0dc:	441d      	add	r5, r3
 800d0de:	f04f 0800 	mov.w	r8, #0
 800d0e2:	ee18 1a10 	vmov	r1, s16
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 fe99 	bl	800de20 <__lshift>
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	ee08 0a10 	vmov	s16, r0
 800d0f4:	f000 ff04 	bl	800df00 <__mcmp>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	dc91      	bgt.n	800d020 <_dtoa_r+0xaa8>
 800d0fc:	d102      	bne.n	800d104 <_dtoa_r+0xb8c>
 800d0fe:	f01a 0f01 	tst.w	sl, #1
 800d102:	d18d      	bne.n	800d020 <_dtoa_r+0xaa8>
 800d104:	462b      	mov	r3, r5
 800d106:	461d      	mov	r5, r3
 800d108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d10c:	2a30      	cmp	r2, #48	; 0x30
 800d10e:	d0fa      	beq.n	800d106 <_dtoa_r+0xb8e>
 800d110:	e6d7      	b.n	800cec2 <_dtoa_r+0x94a>
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d184      	bne.n	800d022 <_dtoa_r+0xaaa>
 800d118:	9b00      	ldr	r3, [sp, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	2331      	movs	r3, #49	; 0x31
 800d120:	7013      	strb	r3, [r2, #0]
 800d122:	e6ce      	b.n	800cec2 <_dtoa_r+0x94a>
 800d124:	4b09      	ldr	r3, [pc, #36]	; (800d14c <_dtoa_r+0xbd4>)
 800d126:	f7ff ba95 	b.w	800c654 <_dtoa_r+0xdc>
 800d12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f47f aa6e 	bne.w	800c60e <_dtoa_r+0x96>
 800d132:	4b07      	ldr	r3, [pc, #28]	; (800d150 <_dtoa_r+0xbd8>)
 800d134:	f7ff ba8e 	b.w	800c654 <_dtoa_r+0xdc>
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dcae      	bgt.n	800d09c <_dtoa_r+0xb24>
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	2b02      	cmp	r3, #2
 800d142:	f73f aea8 	bgt.w	800ce96 <_dtoa_r+0x91e>
 800d146:	e7a9      	b.n	800d09c <_dtoa_r+0xb24>
 800d148:	0800f899 	.word	0x0800f899
 800d14c:	0800f601 	.word	0x0800f601
 800d150:	0800f831 	.word	0x0800f831

0800d154 <rshift>:
 800d154:	6903      	ldr	r3, [r0, #16]
 800d156:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d15a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d15e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d162:	f100 0414 	add.w	r4, r0, #20
 800d166:	dd45      	ble.n	800d1f4 <rshift+0xa0>
 800d168:	f011 011f 	ands.w	r1, r1, #31
 800d16c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d174:	d10c      	bne.n	800d190 <rshift+0x3c>
 800d176:	f100 0710 	add.w	r7, r0, #16
 800d17a:	4629      	mov	r1, r5
 800d17c:	42b1      	cmp	r1, r6
 800d17e:	d334      	bcc.n	800d1ea <rshift+0x96>
 800d180:	1a9b      	subs	r3, r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	1eea      	subs	r2, r5, #3
 800d186:	4296      	cmp	r6, r2
 800d188:	bf38      	it	cc
 800d18a:	2300      	movcc	r3, #0
 800d18c:	4423      	add	r3, r4
 800d18e:	e015      	b.n	800d1bc <rshift+0x68>
 800d190:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d194:	f1c1 0820 	rsb	r8, r1, #32
 800d198:	40cf      	lsrs	r7, r1
 800d19a:	f105 0e04 	add.w	lr, r5, #4
 800d19e:	46a1      	mov	r9, r4
 800d1a0:	4576      	cmp	r6, lr
 800d1a2:	46f4      	mov	ip, lr
 800d1a4:	d815      	bhi.n	800d1d2 <rshift+0x7e>
 800d1a6:	1a9a      	subs	r2, r3, r2
 800d1a8:	0092      	lsls	r2, r2, #2
 800d1aa:	3a04      	subs	r2, #4
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	42ae      	cmp	r6, r5
 800d1b0:	bf38      	it	cc
 800d1b2:	2200      	movcc	r2, #0
 800d1b4:	18a3      	adds	r3, r4, r2
 800d1b6:	50a7      	str	r7, [r4, r2]
 800d1b8:	b107      	cbz	r7, 800d1bc <rshift+0x68>
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	1b1a      	subs	r2, r3, r4
 800d1be:	42a3      	cmp	r3, r4
 800d1c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1c4:	bf08      	it	eq
 800d1c6:	2300      	moveq	r3, #0
 800d1c8:	6102      	str	r2, [r0, #16]
 800d1ca:	bf08      	it	eq
 800d1cc:	6143      	streq	r3, [r0, #20]
 800d1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	f8dc c000 	ldr.w	ip, [ip]
 800d1d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1da:	ea4c 0707 	orr.w	r7, ip, r7
 800d1de:	f849 7b04 	str.w	r7, [r9], #4
 800d1e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1e6:	40cf      	lsrs	r7, r1
 800d1e8:	e7da      	b.n	800d1a0 <rshift+0x4c>
 800d1ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1f2:	e7c3      	b.n	800d17c <rshift+0x28>
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	e7e1      	b.n	800d1bc <rshift+0x68>

0800d1f8 <__hexdig_fun>:
 800d1f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d802      	bhi.n	800d206 <__hexdig_fun+0xe>
 800d200:	3820      	subs	r0, #32
 800d202:	b2c0      	uxtb	r0, r0
 800d204:	4770      	bx	lr
 800d206:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d20a:	2b05      	cmp	r3, #5
 800d20c:	d801      	bhi.n	800d212 <__hexdig_fun+0x1a>
 800d20e:	3847      	subs	r0, #71	; 0x47
 800d210:	e7f7      	b.n	800d202 <__hexdig_fun+0xa>
 800d212:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d216:	2b05      	cmp	r3, #5
 800d218:	d801      	bhi.n	800d21e <__hexdig_fun+0x26>
 800d21a:	3827      	subs	r0, #39	; 0x27
 800d21c:	e7f1      	b.n	800d202 <__hexdig_fun+0xa>
 800d21e:	2000      	movs	r0, #0
 800d220:	4770      	bx	lr
	...

0800d224 <__gethex>:
 800d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	ed2d 8b02 	vpush	{d8}
 800d22c:	b089      	sub	sp, #36	; 0x24
 800d22e:	ee08 0a10 	vmov	s16, r0
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	4bb4      	ldr	r3, [pc, #720]	; (800d508 <__gethex+0x2e4>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	468b      	mov	fp, r1
 800d23e:	4690      	mov	r8, r2
 800d240:	f7f3 f848 	bl	80002d4 <strlen>
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	f8db 2000 	ldr.w	r2, [fp]
 800d24a:	4403      	add	r3, r0
 800d24c:	4682      	mov	sl, r0
 800d24e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	1c93      	adds	r3, r2, #2
 800d256:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d25a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d25e:	32fe      	adds	r2, #254	; 0xfe
 800d260:	18d1      	adds	r1, r2, r3
 800d262:	461f      	mov	r7, r3
 800d264:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d268:	9100      	str	r1, [sp, #0]
 800d26a:	2830      	cmp	r0, #48	; 0x30
 800d26c:	d0f8      	beq.n	800d260 <__gethex+0x3c>
 800d26e:	f7ff ffc3 	bl	800d1f8 <__hexdig_fun>
 800d272:	4604      	mov	r4, r0
 800d274:	2800      	cmp	r0, #0
 800d276:	d13a      	bne.n	800d2ee <__gethex+0xca>
 800d278:	9901      	ldr	r1, [sp, #4]
 800d27a:	4652      	mov	r2, sl
 800d27c:	4638      	mov	r0, r7
 800d27e:	f001 fa37 	bl	800e6f0 <strncmp>
 800d282:	4605      	mov	r5, r0
 800d284:	2800      	cmp	r0, #0
 800d286:	d168      	bne.n	800d35a <__gethex+0x136>
 800d288:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d28c:	eb07 060a 	add.w	r6, r7, sl
 800d290:	f7ff ffb2 	bl	800d1f8 <__hexdig_fun>
 800d294:	2800      	cmp	r0, #0
 800d296:	d062      	beq.n	800d35e <__gethex+0x13a>
 800d298:	4633      	mov	r3, r6
 800d29a:	7818      	ldrb	r0, [r3, #0]
 800d29c:	2830      	cmp	r0, #48	; 0x30
 800d29e:	461f      	mov	r7, r3
 800d2a0:	f103 0301 	add.w	r3, r3, #1
 800d2a4:	d0f9      	beq.n	800d29a <__gethex+0x76>
 800d2a6:	f7ff ffa7 	bl	800d1f8 <__hexdig_fun>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	fab0 f480 	clz	r4, r0
 800d2b0:	0964      	lsrs	r4, r4, #5
 800d2b2:	4635      	mov	r5, r6
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	463a      	mov	r2, r7
 800d2b8:	4616      	mov	r6, r2
 800d2ba:	3201      	adds	r2, #1
 800d2bc:	7830      	ldrb	r0, [r6, #0]
 800d2be:	f7ff ff9b 	bl	800d1f8 <__hexdig_fun>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d1f8      	bne.n	800d2b8 <__gethex+0x94>
 800d2c6:	9901      	ldr	r1, [sp, #4]
 800d2c8:	4652      	mov	r2, sl
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f001 fa10 	bl	800e6f0 <strncmp>
 800d2d0:	b980      	cbnz	r0, 800d2f4 <__gethex+0xd0>
 800d2d2:	b94d      	cbnz	r5, 800d2e8 <__gethex+0xc4>
 800d2d4:	eb06 050a 	add.w	r5, r6, sl
 800d2d8:	462a      	mov	r2, r5
 800d2da:	4616      	mov	r6, r2
 800d2dc:	3201      	adds	r2, #1
 800d2de:	7830      	ldrb	r0, [r6, #0]
 800d2e0:	f7ff ff8a 	bl	800d1f8 <__hexdig_fun>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d1f8      	bne.n	800d2da <__gethex+0xb6>
 800d2e8:	1bad      	subs	r5, r5, r6
 800d2ea:	00ad      	lsls	r5, r5, #2
 800d2ec:	e004      	b.n	800d2f8 <__gethex+0xd4>
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	4625      	mov	r5, r4
 800d2f2:	e7e0      	b.n	800d2b6 <__gethex+0x92>
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	d1f7      	bne.n	800d2e8 <__gethex+0xc4>
 800d2f8:	7833      	ldrb	r3, [r6, #0]
 800d2fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d2fe:	2b50      	cmp	r3, #80	; 0x50
 800d300:	d13b      	bne.n	800d37a <__gethex+0x156>
 800d302:	7873      	ldrb	r3, [r6, #1]
 800d304:	2b2b      	cmp	r3, #43	; 0x2b
 800d306:	d02c      	beq.n	800d362 <__gethex+0x13e>
 800d308:	2b2d      	cmp	r3, #45	; 0x2d
 800d30a:	d02e      	beq.n	800d36a <__gethex+0x146>
 800d30c:	1c71      	adds	r1, r6, #1
 800d30e:	f04f 0900 	mov.w	r9, #0
 800d312:	7808      	ldrb	r0, [r1, #0]
 800d314:	f7ff ff70 	bl	800d1f8 <__hexdig_fun>
 800d318:	1e43      	subs	r3, r0, #1
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b18      	cmp	r3, #24
 800d31e:	d82c      	bhi.n	800d37a <__gethex+0x156>
 800d320:	f1a0 0210 	sub.w	r2, r0, #16
 800d324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d328:	f7ff ff66 	bl	800d1f8 <__hexdig_fun>
 800d32c:	1e43      	subs	r3, r0, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b18      	cmp	r3, #24
 800d332:	d91d      	bls.n	800d370 <__gethex+0x14c>
 800d334:	f1b9 0f00 	cmp.w	r9, #0
 800d338:	d000      	beq.n	800d33c <__gethex+0x118>
 800d33a:	4252      	negs	r2, r2
 800d33c:	4415      	add	r5, r2
 800d33e:	f8cb 1000 	str.w	r1, [fp]
 800d342:	b1e4      	cbz	r4, 800d37e <__gethex+0x15a>
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	bf14      	ite	ne
 800d34a:	2700      	movne	r7, #0
 800d34c:	2706      	moveq	r7, #6
 800d34e:	4638      	mov	r0, r7
 800d350:	b009      	add	sp, #36	; 0x24
 800d352:	ecbd 8b02 	vpop	{d8}
 800d356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35a:	463e      	mov	r6, r7
 800d35c:	4625      	mov	r5, r4
 800d35e:	2401      	movs	r4, #1
 800d360:	e7ca      	b.n	800d2f8 <__gethex+0xd4>
 800d362:	f04f 0900 	mov.w	r9, #0
 800d366:	1cb1      	adds	r1, r6, #2
 800d368:	e7d3      	b.n	800d312 <__gethex+0xee>
 800d36a:	f04f 0901 	mov.w	r9, #1
 800d36e:	e7fa      	b.n	800d366 <__gethex+0x142>
 800d370:	230a      	movs	r3, #10
 800d372:	fb03 0202 	mla	r2, r3, r2, r0
 800d376:	3a10      	subs	r2, #16
 800d378:	e7d4      	b.n	800d324 <__gethex+0x100>
 800d37a:	4631      	mov	r1, r6
 800d37c:	e7df      	b.n	800d33e <__gethex+0x11a>
 800d37e:	1bf3      	subs	r3, r6, r7
 800d380:	3b01      	subs	r3, #1
 800d382:	4621      	mov	r1, r4
 800d384:	2b07      	cmp	r3, #7
 800d386:	dc0b      	bgt.n	800d3a0 <__gethex+0x17c>
 800d388:	ee18 0a10 	vmov	r0, s16
 800d38c:	f000 faec 	bl	800d968 <_Balloc>
 800d390:	4604      	mov	r4, r0
 800d392:	b940      	cbnz	r0, 800d3a6 <__gethex+0x182>
 800d394:	4b5d      	ldr	r3, [pc, #372]	; (800d50c <__gethex+0x2e8>)
 800d396:	4602      	mov	r2, r0
 800d398:	21de      	movs	r1, #222	; 0xde
 800d39a:	485d      	ldr	r0, [pc, #372]	; (800d510 <__gethex+0x2ec>)
 800d39c:	f7ff f830 	bl	800c400 <__assert_func>
 800d3a0:	3101      	adds	r1, #1
 800d3a2:	105b      	asrs	r3, r3, #1
 800d3a4:	e7ee      	b.n	800d384 <__gethex+0x160>
 800d3a6:	f100 0914 	add.w	r9, r0, #20
 800d3aa:	f04f 0b00 	mov.w	fp, #0
 800d3ae:	f1ca 0301 	rsb	r3, sl, #1
 800d3b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3b6:	f8cd b000 	str.w	fp, [sp]
 800d3ba:	9306      	str	r3, [sp, #24]
 800d3bc:	42b7      	cmp	r7, r6
 800d3be:	d340      	bcc.n	800d442 <__gethex+0x21e>
 800d3c0:	9802      	ldr	r0, [sp, #8]
 800d3c2:	9b00      	ldr	r3, [sp, #0]
 800d3c4:	f840 3b04 	str.w	r3, [r0], #4
 800d3c8:	eba0 0009 	sub.w	r0, r0, r9
 800d3cc:	1080      	asrs	r0, r0, #2
 800d3ce:	0146      	lsls	r6, r0, #5
 800d3d0:	6120      	str	r0, [r4, #16]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fbba 	bl	800db4c <__hi0bits>
 800d3d8:	1a30      	subs	r0, r6, r0
 800d3da:	f8d8 6000 	ldr.w	r6, [r8]
 800d3de:	42b0      	cmp	r0, r6
 800d3e0:	dd63      	ble.n	800d4aa <__gethex+0x286>
 800d3e2:	1b87      	subs	r7, r0, r6
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 ff5e 	bl	800e2a8 <__any_on>
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	b1a8      	cbz	r0, 800d41c <__gethex+0x1f8>
 800d3f0:	1e7b      	subs	r3, r7, #1
 800d3f2:	1159      	asrs	r1, r3, #5
 800d3f4:	f003 021f 	and.w	r2, r3, #31
 800d3f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d3fc:	f04f 0a01 	mov.w	sl, #1
 800d400:	fa0a f202 	lsl.w	r2, sl, r2
 800d404:	420a      	tst	r2, r1
 800d406:	d009      	beq.n	800d41c <__gethex+0x1f8>
 800d408:	4553      	cmp	r3, sl
 800d40a:	dd05      	ble.n	800d418 <__gethex+0x1f4>
 800d40c:	1eb9      	subs	r1, r7, #2
 800d40e:	4620      	mov	r0, r4
 800d410:	f000 ff4a 	bl	800e2a8 <__any_on>
 800d414:	2800      	cmp	r0, #0
 800d416:	d145      	bne.n	800d4a4 <__gethex+0x280>
 800d418:	f04f 0a02 	mov.w	sl, #2
 800d41c:	4639      	mov	r1, r7
 800d41e:	4620      	mov	r0, r4
 800d420:	f7ff fe98 	bl	800d154 <rshift>
 800d424:	443d      	add	r5, r7
 800d426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d42a:	42ab      	cmp	r3, r5
 800d42c:	da4c      	bge.n	800d4c8 <__gethex+0x2a4>
 800d42e:	ee18 0a10 	vmov	r0, s16
 800d432:	4621      	mov	r1, r4
 800d434:	f000 fad8 	bl	800d9e8 <_Bfree>
 800d438:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d43a:	2300      	movs	r3, #0
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	27a3      	movs	r7, #163	; 0xa3
 800d440:	e785      	b.n	800d34e <__gethex+0x12a>
 800d442:	1e73      	subs	r3, r6, #1
 800d444:	9a05      	ldr	r2, [sp, #20]
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d019      	beq.n	800d484 <__gethex+0x260>
 800d450:	f1bb 0f20 	cmp.w	fp, #32
 800d454:	d107      	bne.n	800d466 <__gethex+0x242>
 800d456:	9b02      	ldr	r3, [sp, #8]
 800d458:	9a00      	ldr	r2, [sp, #0]
 800d45a:	f843 2b04 	str.w	r2, [r3], #4
 800d45e:	9302      	str	r3, [sp, #8]
 800d460:	2300      	movs	r3, #0
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	469b      	mov	fp, r3
 800d466:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d46a:	f7ff fec5 	bl	800d1f8 <__hexdig_fun>
 800d46e:	9b00      	ldr	r3, [sp, #0]
 800d470:	f000 000f 	and.w	r0, r0, #15
 800d474:	fa00 f00b 	lsl.w	r0, r0, fp
 800d478:	4303      	orrs	r3, r0
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	f10b 0b04 	add.w	fp, fp, #4
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	e00d      	b.n	800d4a0 <__gethex+0x27c>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	9a06      	ldr	r2, [sp, #24]
 800d488:	4413      	add	r3, r2
 800d48a:	42bb      	cmp	r3, r7
 800d48c:	d3e0      	bcc.n	800d450 <__gethex+0x22c>
 800d48e:	4618      	mov	r0, r3
 800d490:	9901      	ldr	r1, [sp, #4]
 800d492:	9307      	str	r3, [sp, #28]
 800d494:	4652      	mov	r2, sl
 800d496:	f001 f92b 	bl	800e6f0 <strncmp>
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d1d7      	bne.n	800d450 <__gethex+0x22c>
 800d4a0:	461e      	mov	r6, r3
 800d4a2:	e78b      	b.n	800d3bc <__gethex+0x198>
 800d4a4:	f04f 0a03 	mov.w	sl, #3
 800d4a8:	e7b8      	b.n	800d41c <__gethex+0x1f8>
 800d4aa:	da0a      	bge.n	800d4c2 <__gethex+0x29e>
 800d4ac:	1a37      	subs	r7, r6, r0
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	ee18 0a10 	vmov	r0, s16
 800d4b4:	463a      	mov	r2, r7
 800d4b6:	f000 fcb3 	bl	800de20 <__lshift>
 800d4ba:	1bed      	subs	r5, r5, r7
 800d4bc:	4604      	mov	r4, r0
 800d4be:	f100 0914 	add.w	r9, r0, #20
 800d4c2:	f04f 0a00 	mov.w	sl, #0
 800d4c6:	e7ae      	b.n	800d426 <__gethex+0x202>
 800d4c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d4cc:	42a8      	cmp	r0, r5
 800d4ce:	dd72      	ble.n	800d5b6 <__gethex+0x392>
 800d4d0:	1b45      	subs	r5, r0, r5
 800d4d2:	42ae      	cmp	r6, r5
 800d4d4:	dc36      	bgt.n	800d544 <__gethex+0x320>
 800d4d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d02a      	beq.n	800d534 <__gethex+0x310>
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d02c      	beq.n	800d53c <__gethex+0x318>
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d11c      	bne.n	800d520 <__gethex+0x2fc>
 800d4e6:	42ae      	cmp	r6, r5
 800d4e8:	d11a      	bne.n	800d520 <__gethex+0x2fc>
 800d4ea:	2e01      	cmp	r6, #1
 800d4ec:	d112      	bne.n	800d514 <__gethex+0x2f0>
 800d4ee:	9a04      	ldr	r2, [sp, #16]
 800d4f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	6123      	str	r3, [r4, #16]
 800d4fa:	f8c9 3000 	str.w	r3, [r9]
 800d4fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d500:	2762      	movs	r7, #98	; 0x62
 800d502:	601c      	str	r4, [r3, #0]
 800d504:	e723      	b.n	800d34e <__gethex+0x12a>
 800d506:	bf00      	nop
 800d508:	0800f910 	.word	0x0800f910
 800d50c:	0800f899 	.word	0x0800f899
 800d510:	0800f8aa 	.word	0x0800f8aa
 800d514:	1e71      	subs	r1, r6, #1
 800d516:	4620      	mov	r0, r4
 800d518:	f000 fec6 	bl	800e2a8 <__any_on>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d1e6      	bne.n	800d4ee <__gethex+0x2ca>
 800d520:	ee18 0a10 	vmov	r0, s16
 800d524:	4621      	mov	r1, r4
 800d526:	f000 fa5f 	bl	800d9e8 <_Bfree>
 800d52a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d52c:	2300      	movs	r3, #0
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	2750      	movs	r7, #80	; 0x50
 800d532:	e70c      	b.n	800d34e <__gethex+0x12a>
 800d534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1f2      	bne.n	800d520 <__gethex+0x2fc>
 800d53a:	e7d8      	b.n	800d4ee <__gethex+0x2ca>
 800d53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1d5      	bne.n	800d4ee <__gethex+0x2ca>
 800d542:	e7ed      	b.n	800d520 <__gethex+0x2fc>
 800d544:	1e6f      	subs	r7, r5, #1
 800d546:	f1ba 0f00 	cmp.w	sl, #0
 800d54a:	d131      	bne.n	800d5b0 <__gethex+0x38c>
 800d54c:	b127      	cbz	r7, 800d558 <__gethex+0x334>
 800d54e:	4639      	mov	r1, r7
 800d550:	4620      	mov	r0, r4
 800d552:	f000 fea9 	bl	800e2a8 <__any_on>
 800d556:	4682      	mov	sl, r0
 800d558:	117b      	asrs	r3, r7, #5
 800d55a:	2101      	movs	r1, #1
 800d55c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d560:	f007 071f 	and.w	r7, r7, #31
 800d564:	fa01 f707 	lsl.w	r7, r1, r7
 800d568:	421f      	tst	r7, r3
 800d56a:	4629      	mov	r1, r5
 800d56c:	4620      	mov	r0, r4
 800d56e:	bf18      	it	ne
 800d570:	f04a 0a02 	orrne.w	sl, sl, #2
 800d574:	1b76      	subs	r6, r6, r5
 800d576:	f7ff fded 	bl	800d154 <rshift>
 800d57a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d57e:	2702      	movs	r7, #2
 800d580:	f1ba 0f00 	cmp.w	sl, #0
 800d584:	d048      	beq.n	800d618 <__gethex+0x3f4>
 800d586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d015      	beq.n	800d5ba <__gethex+0x396>
 800d58e:	2b03      	cmp	r3, #3
 800d590:	d017      	beq.n	800d5c2 <__gethex+0x39e>
 800d592:	2b01      	cmp	r3, #1
 800d594:	d109      	bne.n	800d5aa <__gethex+0x386>
 800d596:	f01a 0f02 	tst.w	sl, #2
 800d59a:	d006      	beq.n	800d5aa <__gethex+0x386>
 800d59c:	f8d9 0000 	ldr.w	r0, [r9]
 800d5a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d5a4:	f01a 0f01 	tst.w	sl, #1
 800d5a8:	d10e      	bne.n	800d5c8 <__gethex+0x3a4>
 800d5aa:	f047 0710 	orr.w	r7, r7, #16
 800d5ae:	e033      	b.n	800d618 <__gethex+0x3f4>
 800d5b0:	f04f 0a01 	mov.w	sl, #1
 800d5b4:	e7d0      	b.n	800d558 <__gethex+0x334>
 800d5b6:	2701      	movs	r7, #1
 800d5b8:	e7e2      	b.n	800d580 <__gethex+0x35c>
 800d5ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5bc:	f1c3 0301 	rsb	r3, r3, #1
 800d5c0:	9315      	str	r3, [sp, #84]	; 0x54
 800d5c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0f0      	beq.n	800d5aa <__gethex+0x386>
 800d5c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5cc:	f104 0314 	add.w	r3, r4, #20
 800d5d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d5d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d5d8:	f04f 0c00 	mov.w	ip, #0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d5e6:	d01c      	beq.n	800d622 <__gethex+0x3fe>
 800d5e8:	3201      	adds	r2, #1
 800d5ea:	6002      	str	r2, [r0, #0]
 800d5ec:	2f02      	cmp	r7, #2
 800d5ee:	f104 0314 	add.w	r3, r4, #20
 800d5f2:	d13f      	bne.n	800d674 <__gethex+0x450>
 800d5f4:	f8d8 2000 	ldr.w	r2, [r8]
 800d5f8:	3a01      	subs	r2, #1
 800d5fa:	42b2      	cmp	r2, r6
 800d5fc:	d10a      	bne.n	800d614 <__gethex+0x3f0>
 800d5fe:	1171      	asrs	r1, r6, #5
 800d600:	2201      	movs	r2, #1
 800d602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d606:	f006 061f 	and.w	r6, r6, #31
 800d60a:	fa02 f606 	lsl.w	r6, r2, r6
 800d60e:	421e      	tst	r6, r3
 800d610:	bf18      	it	ne
 800d612:	4617      	movne	r7, r2
 800d614:	f047 0720 	orr.w	r7, r7, #32
 800d618:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d61a:	601c      	str	r4, [r3, #0]
 800d61c:	9b04      	ldr	r3, [sp, #16]
 800d61e:	601d      	str	r5, [r3, #0]
 800d620:	e695      	b.n	800d34e <__gethex+0x12a>
 800d622:	4299      	cmp	r1, r3
 800d624:	f843 cc04 	str.w	ip, [r3, #-4]
 800d628:	d8d8      	bhi.n	800d5dc <__gethex+0x3b8>
 800d62a:	68a3      	ldr	r3, [r4, #8]
 800d62c:	459b      	cmp	fp, r3
 800d62e:	db19      	blt.n	800d664 <__gethex+0x440>
 800d630:	6861      	ldr	r1, [r4, #4]
 800d632:	ee18 0a10 	vmov	r0, s16
 800d636:	3101      	adds	r1, #1
 800d638:	f000 f996 	bl	800d968 <_Balloc>
 800d63c:	4681      	mov	r9, r0
 800d63e:	b918      	cbnz	r0, 800d648 <__gethex+0x424>
 800d640:	4b1a      	ldr	r3, [pc, #104]	; (800d6ac <__gethex+0x488>)
 800d642:	4602      	mov	r2, r0
 800d644:	2184      	movs	r1, #132	; 0x84
 800d646:	e6a8      	b.n	800d39a <__gethex+0x176>
 800d648:	6922      	ldr	r2, [r4, #16]
 800d64a:	3202      	adds	r2, #2
 800d64c:	f104 010c 	add.w	r1, r4, #12
 800d650:	0092      	lsls	r2, r2, #2
 800d652:	300c      	adds	r0, #12
 800d654:	f7fc fc90 	bl	8009f78 <memcpy>
 800d658:	4621      	mov	r1, r4
 800d65a:	ee18 0a10 	vmov	r0, s16
 800d65e:	f000 f9c3 	bl	800d9e8 <_Bfree>
 800d662:	464c      	mov	r4, r9
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d66c:	6122      	str	r2, [r4, #16]
 800d66e:	2201      	movs	r2, #1
 800d670:	615a      	str	r2, [r3, #20]
 800d672:	e7bb      	b.n	800d5ec <__gethex+0x3c8>
 800d674:	6922      	ldr	r2, [r4, #16]
 800d676:	455a      	cmp	r2, fp
 800d678:	dd0b      	ble.n	800d692 <__gethex+0x46e>
 800d67a:	2101      	movs	r1, #1
 800d67c:	4620      	mov	r0, r4
 800d67e:	f7ff fd69 	bl	800d154 <rshift>
 800d682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d686:	3501      	adds	r5, #1
 800d688:	42ab      	cmp	r3, r5
 800d68a:	f6ff aed0 	blt.w	800d42e <__gethex+0x20a>
 800d68e:	2701      	movs	r7, #1
 800d690:	e7c0      	b.n	800d614 <__gethex+0x3f0>
 800d692:	f016 061f 	ands.w	r6, r6, #31
 800d696:	d0fa      	beq.n	800d68e <__gethex+0x46a>
 800d698:	4453      	add	r3, sl
 800d69a:	f1c6 0620 	rsb	r6, r6, #32
 800d69e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d6a2:	f000 fa53 	bl	800db4c <__hi0bits>
 800d6a6:	42b0      	cmp	r0, r6
 800d6a8:	dbe7      	blt.n	800d67a <__gethex+0x456>
 800d6aa:	e7f0      	b.n	800d68e <__gethex+0x46a>
 800d6ac:	0800f899 	.word	0x0800f899

0800d6b0 <L_shift>:
 800d6b0:	f1c2 0208 	rsb	r2, r2, #8
 800d6b4:	0092      	lsls	r2, r2, #2
 800d6b6:	b570      	push	{r4, r5, r6, lr}
 800d6b8:	f1c2 0620 	rsb	r6, r2, #32
 800d6bc:	6843      	ldr	r3, [r0, #4]
 800d6be:	6804      	ldr	r4, [r0, #0]
 800d6c0:	fa03 f506 	lsl.w	r5, r3, r6
 800d6c4:	432c      	orrs	r4, r5
 800d6c6:	40d3      	lsrs	r3, r2
 800d6c8:	6004      	str	r4, [r0, #0]
 800d6ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6ce:	4288      	cmp	r0, r1
 800d6d0:	d3f4      	bcc.n	800d6bc <L_shift+0xc>
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}

0800d6d4 <__match>:
 800d6d4:	b530      	push	{r4, r5, lr}
 800d6d6:	6803      	ldr	r3, [r0, #0]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6de:	b914      	cbnz	r4, 800d6e6 <__match+0x12>
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	bd30      	pop	{r4, r5, pc}
 800d6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d6ee:	2d19      	cmp	r5, #25
 800d6f0:	bf98      	it	ls
 800d6f2:	3220      	addls	r2, #32
 800d6f4:	42a2      	cmp	r2, r4
 800d6f6:	d0f0      	beq.n	800d6da <__match+0x6>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	e7f3      	b.n	800d6e4 <__match+0x10>

0800d6fc <__hexnan>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	680b      	ldr	r3, [r1, #0]
 800d702:	115e      	asrs	r6, r3, #5
 800d704:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d708:	f013 031f 	ands.w	r3, r3, #31
 800d70c:	b087      	sub	sp, #28
 800d70e:	bf18      	it	ne
 800d710:	3604      	addne	r6, #4
 800d712:	2500      	movs	r5, #0
 800d714:	1f37      	subs	r7, r6, #4
 800d716:	4690      	mov	r8, r2
 800d718:	6802      	ldr	r2, [r0, #0]
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	4682      	mov	sl, r0
 800d71e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d722:	46b9      	mov	r9, r7
 800d724:	463c      	mov	r4, r7
 800d726:	9502      	str	r5, [sp, #8]
 800d728:	46ab      	mov	fp, r5
 800d72a:	7851      	ldrb	r1, [r2, #1]
 800d72c:	1c53      	adds	r3, r2, #1
 800d72e:	9303      	str	r3, [sp, #12]
 800d730:	b341      	cbz	r1, 800d784 <__hexnan+0x88>
 800d732:	4608      	mov	r0, r1
 800d734:	9205      	str	r2, [sp, #20]
 800d736:	9104      	str	r1, [sp, #16]
 800d738:	f7ff fd5e 	bl	800d1f8 <__hexdig_fun>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d14f      	bne.n	800d7e0 <__hexnan+0xe4>
 800d740:	9904      	ldr	r1, [sp, #16]
 800d742:	9a05      	ldr	r2, [sp, #20]
 800d744:	2920      	cmp	r1, #32
 800d746:	d818      	bhi.n	800d77a <__hexnan+0x7e>
 800d748:	9b02      	ldr	r3, [sp, #8]
 800d74a:	459b      	cmp	fp, r3
 800d74c:	dd13      	ble.n	800d776 <__hexnan+0x7a>
 800d74e:	454c      	cmp	r4, r9
 800d750:	d206      	bcs.n	800d760 <__hexnan+0x64>
 800d752:	2d07      	cmp	r5, #7
 800d754:	dc04      	bgt.n	800d760 <__hexnan+0x64>
 800d756:	462a      	mov	r2, r5
 800d758:	4649      	mov	r1, r9
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7ff ffa8 	bl	800d6b0 <L_shift>
 800d760:	4544      	cmp	r4, r8
 800d762:	d950      	bls.n	800d806 <__hexnan+0x10a>
 800d764:	2300      	movs	r3, #0
 800d766:	f1a4 0904 	sub.w	r9, r4, #4
 800d76a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d76e:	f8cd b008 	str.w	fp, [sp, #8]
 800d772:	464c      	mov	r4, r9
 800d774:	461d      	mov	r5, r3
 800d776:	9a03      	ldr	r2, [sp, #12]
 800d778:	e7d7      	b.n	800d72a <__hexnan+0x2e>
 800d77a:	2929      	cmp	r1, #41	; 0x29
 800d77c:	d156      	bne.n	800d82c <__hexnan+0x130>
 800d77e:	3202      	adds	r2, #2
 800d780:	f8ca 2000 	str.w	r2, [sl]
 800d784:	f1bb 0f00 	cmp.w	fp, #0
 800d788:	d050      	beq.n	800d82c <__hexnan+0x130>
 800d78a:	454c      	cmp	r4, r9
 800d78c:	d206      	bcs.n	800d79c <__hexnan+0xa0>
 800d78e:	2d07      	cmp	r5, #7
 800d790:	dc04      	bgt.n	800d79c <__hexnan+0xa0>
 800d792:	462a      	mov	r2, r5
 800d794:	4649      	mov	r1, r9
 800d796:	4620      	mov	r0, r4
 800d798:	f7ff ff8a 	bl	800d6b0 <L_shift>
 800d79c:	4544      	cmp	r4, r8
 800d79e:	d934      	bls.n	800d80a <__hexnan+0x10e>
 800d7a0:	f1a8 0204 	sub.w	r2, r8, #4
 800d7a4:	4623      	mov	r3, r4
 800d7a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7aa:	f842 1f04 	str.w	r1, [r2, #4]!
 800d7ae:	429f      	cmp	r7, r3
 800d7b0:	d2f9      	bcs.n	800d7a6 <__hexnan+0xaa>
 800d7b2:	1b3b      	subs	r3, r7, r4
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	3401      	adds	r4, #1
 800d7bc:	3e03      	subs	r6, #3
 800d7be:	42b4      	cmp	r4, r6
 800d7c0:	bf88      	it	hi
 800d7c2:	2304      	movhi	r3, #4
 800d7c4:	4443      	add	r3, r8
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f843 2b04 	str.w	r2, [r3], #4
 800d7cc:	429f      	cmp	r7, r3
 800d7ce:	d2fb      	bcs.n	800d7c8 <__hexnan+0xcc>
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	b91b      	cbnz	r3, 800d7dc <__hexnan+0xe0>
 800d7d4:	4547      	cmp	r7, r8
 800d7d6:	d127      	bne.n	800d828 <__hexnan+0x12c>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	603b      	str	r3, [r7, #0]
 800d7dc:	2005      	movs	r0, #5
 800d7de:	e026      	b.n	800d82e <__hexnan+0x132>
 800d7e0:	3501      	adds	r5, #1
 800d7e2:	2d08      	cmp	r5, #8
 800d7e4:	f10b 0b01 	add.w	fp, fp, #1
 800d7e8:	dd06      	ble.n	800d7f8 <__hexnan+0xfc>
 800d7ea:	4544      	cmp	r4, r8
 800d7ec:	d9c3      	bls.n	800d776 <__hexnan+0x7a>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7f4:	2501      	movs	r5, #1
 800d7f6:	3c04      	subs	r4, #4
 800d7f8:	6822      	ldr	r2, [r4, #0]
 800d7fa:	f000 000f 	and.w	r0, r0, #15
 800d7fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d802:	6022      	str	r2, [r4, #0]
 800d804:	e7b7      	b.n	800d776 <__hexnan+0x7a>
 800d806:	2508      	movs	r5, #8
 800d808:	e7b5      	b.n	800d776 <__hexnan+0x7a>
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d0df      	beq.n	800d7d0 <__hexnan+0xd4>
 800d810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d814:	f1c3 0320 	rsb	r3, r3, #32
 800d818:	fa22 f303 	lsr.w	r3, r2, r3
 800d81c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d820:	401a      	ands	r2, r3
 800d822:	f846 2c04 	str.w	r2, [r6, #-4]
 800d826:	e7d3      	b.n	800d7d0 <__hexnan+0xd4>
 800d828:	3f04      	subs	r7, #4
 800d82a:	e7d1      	b.n	800d7d0 <__hexnan+0xd4>
 800d82c:	2004      	movs	r0, #4
 800d82e:	b007      	add	sp, #28
 800d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d834 <_localeconv_r>:
 800d834:	4800      	ldr	r0, [pc, #0]	; (800d838 <_localeconv_r+0x4>)
 800d836:	4770      	bx	lr
 800d838:	20000184 	.word	0x20000184

0800d83c <_lseek_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d07      	ldr	r5, [pc, #28]	; (800d85c <_lseek_r+0x20>)
 800d840:	4604      	mov	r4, r0
 800d842:	4608      	mov	r0, r1
 800d844:	4611      	mov	r1, r2
 800d846:	2200      	movs	r2, #0
 800d848:	602a      	str	r2, [r5, #0]
 800d84a:	461a      	mov	r2, r3
 800d84c:	f7f6 f86b 	bl	8003926 <_lseek>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d102      	bne.n	800d85a <_lseek_r+0x1e>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	b103      	cbz	r3, 800d85a <_lseek_r+0x1e>
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	200008ec 	.word	0x200008ec

0800d860 <__swhatbuf_r>:
 800d860:	b570      	push	{r4, r5, r6, lr}
 800d862:	460e      	mov	r6, r1
 800d864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d868:	2900      	cmp	r1, #0
 800d86a:	b096      	sub	sp, #88	; 0x58
 800d86c:	4614      	mov	r4, r2
 800d86e:	461d      	mov	r5, r3
 800d870:	da08      	bge.n	800d884 <__swhatbuf_r+0x24>
 800d872:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	602a      	str	r2, [r5, #0]
 800d87a:	061a      	lsls	r2, r3, #24
 800d87c:	d410      	bmi.n	800d8a0 <__swhatbuf_r+0x40>
 800d87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d882:	e00e      	b.n	800d8a2 <__swhatbuf_r+0x42>
 800d884:	466a      	mov	r2, sp
 800d886:	f000 ff55 	bl	800e734 <_fstat_r>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	dbf1      	blt.n	800d872 <__swhatbuf_r+0x12>
 800d88e:	9a01      	ldr	r2, [sp, #4]
 800d890:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d894:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d898:	425a      	negs	r2, r3
 800d89a:	415a      	adcs	r2, r3
 800d89c:	602a      	str	r2, [r5, #0]
 800d89e:	e7ee      	b.n	800d87e <__swhatbuf_r+0x1e>
 800d8a0:	2340      	movs	r3, #64	; 0x40
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	b016      	add	sp, #88	; 0x58
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8ac <__smakebuf_r>:
 800d8ac:	898b      	ldrh	r3, [r1, #12]
 800d8ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8b0:	079d      	lsls	r5, r3, #30
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	d507      	bpl.n	800d8c8 <__smakebuf_r+0x1c>
 800d8b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8bc:	6023      	str	r3, [r4, #0]
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	6163      	str	r3, [r4, #20]
 800d8c4:	b002      	add	sp, #8
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}
 800d8c8:	ab01      	add	r3, sp, #4
 800d8ca:	466a      	mov	r2, sp
 800d8cc:	f7ff ffc8 	bl	800d860 <__swhatbuf_r>
 800d8d0:	9900      	ldr	r1, [sp, #0]
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7fc fbeb 	bl	800a0b0 <_malloc_r>
 800d8da:	b948      	cbnz	r0, 800d8f0 <__smakebuf_r+0x44>
 800d8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e0:	059a      	lsls	r2, r3, #22
 800d8e2:	d4ef      	bmi.n	800d8c4 <__smakebuf_r+0x18>
 800d8e4:	f023 0303 	bic.w	r3, r3, #3
 800d8e8:	f043 0302 	orr.w	r3, r3, #2
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	e7e3      	b.n	800d8b8 <__smakebuf_r+0xc>
 800d8f0:	4b0d      	ldr	r3, [pc, #52]	; (800d928 <__smakebuf_r+0x7c>)
 800d8f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	6020      	str	r0, [r4, #0]
 800d8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8fc:	81a3      	strh	r3, [r4, #12]
 800d8fe:	9b00      	ldr	r3, [sp, #0]
 800d900:	6163      	str	r3, [r4, #20]
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	6120      	str	r0, [r4, #16]
 800d906:	b15b      	cbz	r3, 800d920 <__smakebuf_r+0x74>
 800d908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d90c:	4630      	mov	r0, r6
 800d90e:	f000 ff23 	bl	800e758 <_isatty_r>
 800d912:	b128      	cbz	r0, 800d920 <__smakebuf_r+0x74>
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f023 0303 	bic.w	r3, r3, #3
 800d91a:	f043 0301 	orr.w	r3, r3, #1
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	89a0      	ldrh	r0, [r4, #12]
 800d922:	4305      	orrs	r5, r0
 800d924:	81a5      	strh	r5, [r4, #12]
 800d926:	e7cd      	b.n	800d8c4 <__smakebuf_r+0x18>
 800d928:	08009d21 	.word	0x08009d21

0800d92c <__ascii_mbtowc>:
 800d92c:	b082      	sub	sp, #8
 800d92e:	b901      	cbnz	r1, 800d932 <__ascii_mbtowc+0x6>
 800d930:	a901      	add	r1, sp, #4
 800d932:	b142      	cbz	r2, 800d946 <__ascii_mbtowc+0x1a>
 800d934:	b14b      	cbz	r3, 800d94a <__ascii_mbtowc+0x1e>
 800d936:	7813      	ldrb	r3, [r2, #0]
 800d938:	600b      	str	r3, [r1, #0]
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	1e10      	subs	r0, r2, #0
 800d93e:	bf18      	it	ne
 800d940:	2001      	movne	r0, #1
 800d942:	b002      	add	sp, #8
 800d944:	4770      	bx	lr
 800d946:	4610      	mov	r0, r2
 800d948:	e7fb      	b.n	800d942 <__ascii_mbtowc+0x16>
 800d94a:	f06f 0001 	mvn.w	r0, #1
 800d94e:	e7f8      	b.n	800d942 <__ascii_mbtowc+0x16>

0800d950 <__malloc_lock>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__malloc_lock+0x8>)
 800d952:	f7fc baee 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	200008e0 	.word	0x200008e0

0800d95c <__malloc_unlock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__malloc_unlock+0x8>)
 800d95e:	f7fc bae9 	b.w	8009f34 <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	200008e0 	.word	0x200008e0

0800d968 <_Balloc>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	b976      	cbnz	r6, 800d990 <_Balloc+0x28>
 800d972:	2010      	movs	r0, #16
 800d974:	f7fc fae0 	bl	8009f38 <malloc>
 800d978:	4602      	mov	r2, r0
 800d97a:	6260      	str	r0, [r4, #36]	; 0x24
 800d97c:	b920      	cbnz	r0, 800d988 <_Balloc+0x20>
 800d97e:	4b18      	ldr	r3, [pc, #96]	; (800d9e0 <_Balloc+0x78>)
 800d980:	4818      	ldr	r0, [pc, #96]	; (800d9e4 <_Balloc+0x7c>)
 800d982:	2166      	movs	r1, #102	; 0x66
 800d984:	f7fe fd3c 	bl	800c400 <__assert_func>
 800d988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d98c:	6006      	str	r6, [r0, #0]
 800d98e:	60c6      	str	r6, [r0, #12]
 800d990:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d992:	68f3      	ldr	r3, [r6, #12]
 800d994:	b183      	cbz	r3, 800d9b8 <_Balloc+0x50>
 800d996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d99e:	b9b8      	cbnz	r0, 800d9d0 <_Balloc+0x68>
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9a6:	1d72      	adds	r2, r6, #5
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 fc9d 	bl	800e2ea <_calloc_r>
 800d9b0:	b160      	cbz	r0, 800d9cc <_Balloc+0x64>
 800d9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9b6:	e00e      	b.n	800d9d6 <_Balloc+0x6e>
 800d9b8:	2221      	movs	r2, #33	; 0x21
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 fc94 	bl	800e2ea <_calloc_r>
 800d9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9c4:	60f0      	str	r0, [r6, #12]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1e4      	bne.n	800d996 <_Balloc+0x2e>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	6802      	ldr	r2, [r0, #0]
 800d9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9dc:	e7f7      	b.n	800d9ce <_Balloc+0x66>
 800d9de:	bf00      	nop
 800d9e0:	0800f680 	.word	0x0800f680
 800d9e4:	0800f924 	.word	0x0800f924

0800d9e8 <_Bfree>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	b976      	cbnz	r6, 800da10 <_Bfree+0x28>
 800d9f2:	2010      	movs	r0, #16
 800d9f4:	f7fc faa0 	bl	8009f38 <malloc>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	6268      	str	r0, [r5, #36]	; 0x24
 800d9fc:	b920      	cbnz	r0, 800da08 <_Bfree+0x20>
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <_Bfree+0x3c>)
 800da00:	4809      	ldr	r0, [pc, #36]	; (800da28 <_Bfree+0x40>)
 800da02:	218a      	movs	r1, #138	; 0x8a
 800da04:	f7fe fcfc 	bl	800c400 <__assert_func>
 800da08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da0c:	6006      	str	r6, [r0, #0]
 800da0e:	60c6      	str	r6, [r0, #12]
 800da10:	b13c      	cbz	r4, 800da22 <_Bfree+0x3a>
 800da12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da14:	6862      	ldr	r2, [r4, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da1c:	6021      	str	r1, [r4, #0]
 800da1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	0800f680 	.word	0x0800f680
 800da28:	0800f924 	.word	0x0800f924

0800da2c <__multadd>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	690d      	ldr	r5, [r1, #16]
 800da32:	4607      	mov	r7, r0
 800da34:	460c      	mov	r4, r1
 800da36:	461e      	mov	r6, r3
 800da38:	f101 0c14 	add.w	ip, r1, #20
 800da3c:	2000      	movs	r0, #0
 800da3e:	f8dc 3000 	ldr.w	r3, [ip]
 800da42:	b299      	uxth	r1, r3
 800da44:	fb02 6101 	mla	r1, r2, r1, r6
 800da48:	0c1e      	lsrs	r6, r3, #16
 800da4a:	0c0b      	lsrs	r3, r1, #16
 800da4c:	fb02 3306 	mla	r3, r2, r6, r3
 800da50:	b289      	uxth	r1, r1
 800da52:	3001      	adds	r0, #1
 800da54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da58:	4285      	cmp	r5, r0
 800da5a:	f84c 1b04 	str.w	r1, [ip], #4
 800da5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da62:	dcec      	bgt.n	800da3e <__multadd+0x12>
 800da64:	b30e      	cbz	r6, 800daaa <__multadd+0x7e>
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	42ab      	cmp	r3, r5
 800da6a:	dc19      	bgt.n	800daa0 <__multadd+0x74>
 800da6c:	6861      	ldr	r1, [r4, #4]
 800da6e:	4638      	mov	r0, r7
 800da70:	3101      	adds	r1, #1
 800da72:	f7ff ff79 	bl	800d968 <_Balloc>
 800da76:	4680      	mov	r8, r0
 800da78:	b928      	cbnz	r0, 800da86 <__multadd+0x5a>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <__multadd+0x84>)
 800da7e:	480d      	ldr	r0, [pc, #52]	; (800dab4 <__multadd+0x88>)
 800da80:	21b5      	movs	r1, #181	; 0xb5
 800da82:	f7fe fcbd 	bl	800c400 <__assert_func>
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	3202      	adds	r2, #2
 800da8a:	f104 010c 	add.w	r1, r4, #12
 800da8e:	0092      	lsls	r2, r2, #2
 800da90:	300c      	adds	r0, #12
 800da92:	f7fc fa71 	bl	8009f78 <memcpy>
 800da96:	4621      	mov	r1, r4
 800da98:	4638      	mov	r0, r7
 800da9a:	f7ff ffa5 	bl	800d9e8 <_Bfree>
 800da9e:	4644      	mov	r4, r8
 800daa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daa4:	3501      	adds	r5, #1
 800daa6:	615e      	str	r6, [r3, #20]
 800daa8:	6125      	str	r5, [r4, #16]
 800daaa:	4620      	mov	r0, r4
 800daac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab0:	0800f899 	.word	0x0800f899
 800dab4:	0800f924 	.word	0x0800f924

0800dab8 <__s2b>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	460c      	mov	r4, r1
 800dabe:	4615      	mov	r5, r2
 800dac0:	461f      	mov	r7, r3
 800dac2:	2209      	movs	r2, #9
 800dac4:	3308      	adds	r3, #8
 800dac6:	4606      	mov	r6, r0
 800dac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dacc:	2100      	movs	r1, #0
 800dace:	2201      	movs	r2, #1
 800dad0:	429a      	cmp	r2, r3
 800dad2:	db09      	blt.n	800dae8 <__s2b+0x30>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ff47 	bl	800d968 <_Balloc>
 800dada:	b940      	cbnz	r0, 800daee <__s2b+0x36>
 800dadc:	4602      	mov	r2, r0
 800dade:	4b19      	ldr	r3, [pc, #100]	; (800db44 <__s2b+0x8c>)
 800dae0:	4819      	ldr	r0, [pc, #100]	; (800db48 <__s2b+0x90>)
 800dae2:	21ce      	movs	r1, #206	; 0xce
 800dae4:	f7fe fc8c 	bl	800c400 <__assert_func>
 800dae8:	0052      	lsls	r2, r2, #1
 800daea:	3101      	adds	r1, #1
 800daec:	e7f0      	b.n	800dad0 <__s2b+0x18>
 800daee:	9b08      	ldr	r3, [sp, #32]
 800daf0:	6143      	str	r3, [r0, #20]
 800daf2:	2d09      	cmp	r5, #9
 800daf4:	f04f 0301 	mov.w	r3, #1
 800daf8:	6103      	str	r3, [r0, #16]
 800dafa:	dd16      	ble.n	800db2a <__s2b+0x72>
 800dafc:	f104 0909 	add.w	r9, r4, #9
 800db00:	46c8      	mov	r8, r9
 800db02:	442c      	add	r4, r5
 800db04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db08:	4601      	mov	r1, r0
 800db0a:	3b30      	subs	r3, #48	; 0x30
 800db0c:	220a      	movs	r2, #10
 800db0e:	4630      	mov	r0, r6
 800db10:	f7ff ff8c 	bl	800da2c <__multadd>
 800db14:	45a0      	cmp	r8, r4
 800db16:	d1f5      	bne.n	800db04 <__s2b+0x4c>
 800db18:	f1a5 0408 	sub.w	r4, r5, #8
 800db1c:	444c      	add	r4, r9
 800db1e:	1b2d      	subs	r5, r5, r4
 800db20:	1963      	adds	r3, r4, r5
 800db22:	42bb      	cmp	r3, r7
 800db24:	db04      	blt.n	800db30 <__s2b+0x78>
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	340a      	adds	r4, #10
 800db2c:	2509      	movs	r5, #9
 800db2e:	e7f6      	b.n	800db1e <__s2b+0x66>
 800db30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db34:	4601      	mov	r1, r0
 800db36:	3b30      	subs	r3, #48	; 0x30
 800db38:	220a      	movs	r2, #10
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ff76 	bl	800da2c <__multadd>
 800db40:	e7ee      	b.n	800db20 <__s2b+0x68>
 800db42:	bf00      	nop
 800db44:	0800f899 	.word	0x0800f899
 800db48:	0800f924 	.word	0x0800f924

0800db4c <__hi0bits>:
 800db4c:	0c03      	lsrs	r3, r0, #16
 800db4e:	041b      	lsls	r3, r3, #16
 800db50:	b9d3      	cbnz	r3, 800db88 <__hi0bits+0x3c>
 800db52:	0400      	lsls	r0, r0, #16
 800db54:	2310      	movs	r3, #16
 800db56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db5a:	bf04      	itt	eq
 800db5c:	0200      	lsleq	r0, r0, #8
 800db5e:	3308      	addeq	r3, #8
 800db60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db64:	bf04      	itt	eq
 800db66:	0100      	lsleq	r0, r0, #4
 800db68:	3304      	addeq	r3, #4
 800db6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db6e:	bf04      	itt	eq
 800db70:	0080      	lsleq	r0, r0, #2
 800db72:	3302      	addeq	r3, #2
 800db74:	2800      	cmp	r0, #0
 800db76:	db05      	blt.n	800db84 <__hi0bits+0x38>
 800db78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db7c:	f103 0301 	add.w	r3, r3, #1
 800db80:	bf08      	it	eq
 800db82:	2320      	moveq	r3, #32
 800db84:	4618      	mov	r0, r3
 800db86:	4770      	bx	lr
 800db88:	2300      	movs	r3, #0
 800db8a:	e7e4      	b.n	800db56 <__hi0bits+0xa>

0800db8c <__lo0bits>:
 800db8c:	6803      	ldr	r3, [r0, #0]
 800db8e:	f013 0207 	ands.w	r2, r3, #7
 800db92:	4601      	mov	r1, r0
 800db94:	d00b      	beq.n	800dbae <__lo0bits+0x22>
 800db96:	07da      	lsls	r2, r3, #31
 800db98:	d423      	bmi.n	800dbe2 <__lo0bits+0x56>
 800db9a:	0798      	lsls	r0, r3, #30
 800db9c:	bf49      	itett	mi
 800db9e:	085b      	lsrmi	r3, r3, #1
 800dba0:	089b      	lsrpl	r3, r3, #2
 800dba2:	2001      	movmi	r0, #1
 800dba4:	600b      	strmi	r3, [r1, #0]
 800dba6:	bf5c      	itt	pl
 800dba8:	600b      	strpl	r3, [r1, #0]
 800dbaa:	2002      	movpl	r0, #2
 800dbac:	4770      	bx	lr
 800dbae:	b298      	uxth	r0, r3
 800dbb0:	b9a8      	cbnz	r0, 800dbde <__lo0bits+0x52>
 800dbb2:	0c1b      	lsrs	r3, r3, #16
 800dbb4:	2010      	movs	r0, #16
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	b90a      	cbnz	r2, 800dbbe <__lo0bits+0x32>
 800dbba:	3008      	adds	r0, #8
 800dbbc:	0a1b      	lsrs	r3, r3, #8
 800dbbe:	071a      	lsls	r2, r3, #28
 800dbc0:	bf04      	itt	eq
 800dbc2:	091b      	lsreq	r3, r3, #4
 800dbc4:	3004      	addeq	r0, #4
 800dbc6:	079a      	lsls	r2, r3, #30
 800dbc8:	bf04      	itt	eq
 800dbca:	089b      	lsreq	r3, r3, #2
 800dbcc:	3002      	addeq	r0, #2
 800dbce:	07da      	lsls	r2, r3, #31
 800dbd0:	d403      	bmi.n	800dbda <__lo0bits+0x4e>
 800dbd2:	085b      	lsrs	r3, r3, #1
 800dbd4:	f100 0001 	add.w	r0, r0, #1
 800dbd8:	d005      	beq.n	800dbe6 <__lo0bits+0x5a>
 800dbda:	600b      	str	r3, [r1, #0]
 800dbdc:	4770      	bx	lr
 800dbde:	4610      	mov	r0, r2
 800dbe0:	e7e9      	b.n	800dbb6 <__lo0bits+0x2a>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	4770      	bx	lr
 800dbe6:	2020      	movs	r0, #32
 800dbe8:	4770      	bx	lr
	...

0800dbec <__i2b>:
 800dbec:	b510      	push	{r4, lr}
 800dbee:	460c      	mov	r4, r1
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	f7ff feb9 	bl	800d968 <_Balloc>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	b928      	cbnz	r0, 800dc06 <__i2b+0x1a>
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <__i2b+0x24>)
 800dbfc:	4805      	ldr	r0, [pc, #20]	; (800dc14 <__i2b+0x28>)
 800dbfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc02:	f7fe fbfd 	bl	800c400 <__assert_func>
 800dc06:	2301      	movs	r3, #1
 800dc08:	6144      	str	r4, [r0, #20]
 800dc0a:	6103      	str	r3, [r0, #16]
 800dc0c:	bd10      	pop	{r4, pc}
 800dc0e:	bf00      	nop
 800dc10:	0800f899 	.word	0x0800f899
 800dc14:	0800f924 	.word	0x0800f924

0800dc18 <__multiply>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	4691      	mov	r9, r2
 800dc1e:	690a      	ldr	r2, [r1, #16]
 800dc20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	bfb8      	it	lt
 800dc28:	460b      	movlt	r3, r1
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	bfbc      	itt	lt
 800dc2e:	464c      	movlt	r4, r9
 800dc30:	4699      	movlt	r9, r3
 800dc32:	6927      	ldr	r7, [r4, #16]
 800dc34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	6861      	ldr	r1, [r4, #4]
 800dc3c:	eb07 060a 	add.w	r6, r7, sl
 800dc40:	42b3      	cmp	r3, r6
 800dc42:	b085      	sub	sp, #20
 800dc44:	bfb8      	it	lt
 800dc46:	3101      	addlt	r1, #1
 800dc48:	f7ff fe8e 	bl	800d968 <_Balloc>
 800dc4c:	b930      	cbnz	r0, 800dc5c <__multiply+0x44>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	4b44      	ldr	r3, [pc, #272]	; (800dd64 <__multiply+0x14c>)
 800dc52:	4845      	ldr	r0, [pc, #276]	; (800dd68 <__multiply+0x150>)
 800dc54:	f240 115d 	movw	r1, #349	; 0x15d
 800dc58:	f7fe fbd2 	bl	800c400 <__assert_func>
 800dc5c:	f100 0514 	add.w	r5, r0, #20
 800dc60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc64:	462b      	mov	r3, r5
 800dc66:	2200      	movs	r2, #0
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	d321      	bcc.n	800dcb0 <__multiply+0x98>
 800dc6c:	f104 0314 	add.w	r3, r4, #20
 800dc70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc74:	f109 0314 	add.w	r3, r9, #20
 800dc78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc7c:	9202      	str	r2, [sp, #8]
 800dc7e:	1b3a      	subs	r2, r7, r4
 800dc80:	3a15      	subs	r2, #21
 800dc82:	f022 0203 	bic.w	r2, r2, #3
 800dc86:	3204      	adds	r2, #4
 800dc88:	f104 0115 	add.w	r1, r4, #21
 800dc8c:	428f      	cmp	r7, r1
 800dc8e:	bf38      	it	cc
 800dc90:	2204      	movcc	r2, #4
 800dc92:	9201      	str	r2, [sp, #4]
 800dc94:	9a02      	ldr	r2, [sp, #8]
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d80c      	bhi.n	800dcb6 <__multiply+0x9e>
 800dc9c:	2e00      	cmp	r6, #0
 800dc9e:	dd03      	ble.n	800dca8 <__multiply+0x90>
 800dca0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d05a      	beq.n	800dd5e <__multiply+0x146>
 800dca8:	6106      	str	r6, [r0, #16]
 800dcaa:	b005      	add	sp, #20
 800dcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb0:	f843 2b04 	str.w	r2, [r3], #4
 800dcb4:	e7d8      	b.n	800dc68 <__multiply+0x50>
 800dcb6:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcba:	f1ba 0f00 	cmp.w	sl, #0
 800dcbe:	d024      	beq.n	800dd0a <__multiply+0xf2>
 800dcc0:	f104 0e14 	add.w	lr, r4, #20
 800dcc4:	46a9      	mov	r9, r5
 800dcc6:	f04f 0c00 	mov.w	ip, #0
 800dcca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcce:	f8d9 1000 	ldr.w	r1, [r9]
 800dcd2:	fa1f fb82 	uxth.w	fp, r2
 800dcd6:	b289      	uxth	r1, r1
 800dcd8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dcdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dce0:	f8d9 2000 	ldr.w	r2, [r9]
 800dce4:	4461      	add	r1, ip
 800dce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcea:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcf2:	b289      	uxth	r1, r1
 800dcf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcf8:	4577      	cmp	r7, lr
 800dcfa:	f849 1b04 	str.w	r1, [r9], #4
 800dcfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd02:	d8e2      	bhi.n	800dcca <__multiply+0xb2>
 800dd04:	9a01      	ldr	r2, [sp, #4]
 800dd06:	f845 c002 	str.w	ip, [r5, r2]
 800dd0a:	9a03      	ldr	r2, [sp, #12]
 800dd0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd10:	3304      	adds	r3, #4
 800dd12:	f1b9 0f00 	cmp.w	r9, #0
 800dd16:	d020      	beq.n	800dd5a <__multiply+0x142>
 800dd18:	6829      	ldr	r1, [r5, #0]
 800dd1a:	f104 0c14 	add.w	ip, r4, #20
 800dd1e:	46ae      	mov	lr, r5
 800dd20:	f04f 0a00 	mov.w	sl, #0
 800dd24:	f8bc b000 	ldrh.w	fp, [ip]
 800dd28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd2c:	fb09 220b 	mla	r2, r9, fp, r2
 800dd30:	4492      	add	sl, r2
 800dd32:	b289      	uxth	r1, r1
 800dd34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd38:	f84e 1b04 	str.w	r1, [lr], #4
 800dd3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd40:	f8be 1000 	ldrh.w	r1, [lr]
 800dd44:	0c12      	lsrs	r2, r2, #16
 800dd46:	fb09 1102 	mla	r1, r9, r2, r1
 800dd4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd4e:	4567      	cmp	r7, ip
 800dd50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd54:	d8e6      	bhi.n	800dd24 <__multiply+0x10c>
 800dd56:	9a01      	ldr	r2, [sp, #4]
 800dd58:	50a9      	str	r1, [r5, r2]
 800dd5a:	3504      	adds	r5, #4
 800dd5c:	e79a      	b.n	800dc94 <__multiply+0x7c>
 800dd5e:	3e01      	subs	r6, #1
 800dd60:	e79c      	b.n	800dc9c <__multiply+0x84>
 800dd62:	bf00      	nop
 800dd64:	0800f899 	.word	0x0800f899
 800dd68:	0800f924 	.word	0x0800f924

0800dd6c <__pow5mult>:
 800dd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd70:	4615      	mov	r5, r2
 800dd72:	f012 0203 	ands.w	r2, r2, #3
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	d007      	beq.n	800dd8c <__pow5mult+0x20>
 800dd7c:	4c25      	ldr	r4, [pc, #148]	; (800de14 <__pow5mult+0xa8>)
 800dd7e:	3a01      	subs	r2, #1
 800dd80:	2300      	movs	r3, #0
 800dd82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd86:	f7ff fe51 	bl	800da2c <__multadd>
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	10ad      	asrs	r5, r5, #2
 800dd8e:	d03d      	beq.n	800de0c <__pow5mult+0xa0>
 800dd90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd92:	b97c      	cbnz	r4, 800ddb4 <__pow5mult+0x48>
 800dd94:	2010      	movs	r0, #16
 800dd96:	f7fc f8cf 	bl	8009f38 <malloc>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	6270      	str	r0, [r6, #36]	; 0x24
 800dd9e:	b928      	cbnz	r0, 800ddac <__pow5mult+0x40>
 800dda0:	4b1d      	ldr	r3, [pc, #116]	; (800de18 <__pow5mult+0xac>)
 800dda2:	481e      	ldr	r0, [pc, #120]	; (800de1c <__pow5mult+0xb0>)
 800dda4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dda8:	f7fe fb2a 	bl	800c400 <__assert_func>
 800ddac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddb0:	6004      	str	r4, [r0, #0]
 800ddb2:	60c4      	str	r4, [r0, #12]
 800ddb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddbc:	b94c      	cbnz	r4, 800ddd2 <__pow5mult+0x66>
 800ddbe:	f240 2171 	movw	r1, #625	; 0x271
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f7ff ff12 	bl	800dbec <__i2b>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddce:	4604      	mov	r4, r0
 800ddd0:	6003      	str	r3, [r0, #0]
 800ddd2:	f04f 0900 	mov.w	r9, #0
 800ddd6:	07eb      	lsls	r3, r5, #31
 800ddd8:	d50a      	bpl.n	800ddf0 <__pow5mult+0x84>
 800ddda:	4639      	mov	r1, r7
 800dddc:	4622      	mov	r2, r4
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ff1a 	bl	800dc18 <__multiply>
 800dde4:	4639      	mov	r1, r7
 800dde6:	4680      	mov	r8, r0
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff fdfd 	bl	800d9e8 <_Bfree>
 800ddee:	4647      	mov	r7, r8
 800ddf0:	106d      	asrs	r5, r5, #1
 800ddf2:	d00b      	beq.n	800de0c <__pow5mult+0xa0>
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	b938      	cbnz	r0, 800de08 <__pow5mult+0x9c>
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f7ff ff0b 	bl	800dc18 <__multiply>
 800de02:	6020      	str	r0, [r4, #0]
 800de04:	f8c0 9000 	str.w	r9, [r0]
 800de08:	4604      	mov	r4, r0
 800de0a:	e7e4      	b.n	800ddd6 <__pow5mult+0x6a>
 800de0c:	4638      	mov	r0, r7
 800de0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de12:	bf00      	nop
 800de14:	0800fa70 	.word	0x0800fa70
 800de18:	0800f680 	.word	0x0800f680
 800de1c:	0800f924 	.word	0x0800f924

0800de20 <__lshift>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	460c      	mov	r4, r1
 800de26:	6849      	ldr	r1, [r1, #4]
 800de28:	6923      	ldr	r3, [r4, #16]
 800de2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de2e:	68a3      	ldr	r3, [r4, #8]
 800de30:	4607      	mov	r7, r0
 800de32:	4691      	mov	r9, r2
 800de34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de38:	f108 0601 	add.w	r6, r8, #1
 800de3c:	42b3      	cmp	r3, r6
 800de3e:	db0b      	blt.n	800de58 <__lshift+0x38>
 800de40:	4638      	mov	r0, r7
 800de42:	f7ff fd91 	bl	800d968 <_Balloc>
 800de46:	4605      	mov	r5, r0
 800de48:	b948      	cbnz	r0, 800de5e <__lshift+0x3e>
 800de4a:	4602      	mov	r2, r0
 800de4c:	4b2a      	ldr	r3, [pc, #168]	; (800def8 <__lshift+0xd8>)
 800de4e:	482b      	ldr	r0, [pc, #172]	; (800defc <__lshift+0xdc>)
 800de50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de54:	f7fe fad4 	bl	800c400 <__assert_func>
 800de58:	3101      	adds	r1, #1
 800de5a:	005b      	lsls	r3, r3, #1
 800de5c:	e7ee      	b.n	800de3c <__lshift+0x1c>
 800de5e:	2300      	movs	r3, #0
 800de60:	f100 0114 	add.w	r1, r0, #20
 800de64:	f100 0210 	add.w	r2, r0, #16
 800de68:	4618      	mov	r0, r3
 800de6a:	4553      	cmp	r3, sl
 800de6c:	db37      	blt.n	800dede <__lshift+0xbe>
 800de6e:	6920      	ldr	r0, [r4, #16]
 800de70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de74:	f104 0314 	add.w	r3, r4, #20
 800de78:	f019 091f 	ands.w	r9, r9, #31
 800de7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de84:	d02f      	beq.n	800dee6 <__lshift+0xc6>
 800de86:	f1c9 0e20 	rsb	lr, r9, #32
 800de8a:	468a      	mov	sl, r1
 800de8c:	f04f 0c00 	mov.w	ip, #0
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	fa02 f209 	lsl.w	r2, r2, r9
 800de96:	ea42 020c 	orr.w	r2, r2, ip
 800de9a:	f84a 2b04 	str.w	r2, [sl], #4
 800de9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea2:	4298      	cmp	r0, r3
 800dea4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dea8:	d8f2      	bhi.n	800de90 <__lshift+0x70>
 800deaa:	1b03      	subs	r3, r0, r4
 800deac:	3b15      	subs	r3, #21
 800deae:	f023 0303 	bic.w	r3, r3, #3
 800deb2:	3304      	adds	r3, #4
 800deb4:	f104 0215 	add.w	r2, r4, #21
 800deb8:	4290      	cmp	r0, r2
 800deba:	bf38      	it	cc
 800debc:	2304      	movcc	r3, #4
 800debe:	f841 c003 	str.w	ip, [r1, r3]
 800dec2:	f1bc 0f00 	cmp.w	ip, #0
 800dec6:	d001      	beq.n	800decc <__lshift+0xac>
 800dec8:	f108 0602 	add.w	r6, r8, #2
 800decc:	3e01      	subs	r6, #1
 800dece:	4638      	mov	r0, r7
 800ded0:	612e      	str	r6, [r5, #16]
 800ded2:	4621      	mov	r1, r4
 800ded4:	f7ff fd88 	bl	800d9e8 <_Bfree>
 800ded8:	4628      	mov	r0, r5
 800deda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dede:	f842 0f04 	str.w	r0, [r2, #4]!
 800dee2:	3301      	adds	r3, #1
 800dee4:	e7c1      	b.n	800de6a <__lshift+0x4a>
 800dee6:	3904      	subs	r1, #4
 800dee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800deec:	f841 2f04 	str.w	r2, [r1, #4]!
 800def0:	4298      	cmp	r0, r3
 800def2:	d8f9      	bhi.n	800dee8 <__lshift+0xc8>
 800def4:	e7ea      	b.n	800decc <__lshift+0xac>
 800def6:	bf00      	nop
 800def8:	0800f899 	.word	0x0800f899
 800defc:	0800f924 	.word	0x0800f924

0800df00 <__mcmp>:
 800df00:	b530      	push	{r4, r5, lr}
 800df02:	6902      	ldr	r2, [r0, #16]
 800df04:	690c      	ldr	r4, [r1, #16]
 800df06:	1b12      	subs	r2, r2, r4
 800df08:	d10e      	bne.n	800df28 <__mcmp+0x28>
 800df0a:	f100 0314 	add.w	r3, r0, #20
 800df0e:	3114      	adds	r1, #20
 800df10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df20:	42a5      	cmp	r5, r4
 800df22:	d003      	beq.n	800df2c <__mcmp+0x2c>
 800df24:	d305      	bcc.n	800df32 <__mcmp+0x32>
 800df26:	2201      	movs	r2, #1
 800df28:	4610      	mov	r0, r2
 800df2a:	bd30      	pop	{r4, r5, pc}
 800df2c:	4283      	cmp	r3, r0
 800df2e:	d3f3      	bcc.n	800df18 <__mcmp+0x18>
 800df30:	e7fa      	b.n	800df28 <__mcmp+0x28>
 800df32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df36:	e7f7      	b.n	800df28 <__mcmp+0x28>

0800df38 <__mdiff>:
 800df38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	460c      	mov	r4, r1
 800df3e:	4606      	mov	r6, r0
 800df40:	4611      	mov	r1, r2
 800df42:	4620      	mov	r0, r4
 800df44:	4690      	mov	r8, r2
 800df46:	f7ff ffdb 	bl	800df00 <__mcmp>
 800df4a:	1e05      	subs	r5, r0, #0
 800df4c:	d110      	bne.n	800df70 <__mdiff+0x38>
 800df4e:	4629      	mov	r1, r5
 800df50:	4630      	mov	r0, r6
 800df52:	f7ff fd09 	bl	800d968 <_Balloc>
 800df56:	b930      	cbnz	r0, 800df66 <__mdiff+0x2e>
 800df58:	4b3a      	ldr	r3, [pc, #232]	; (800e044 <__mdiff+0x10c>)
 800df5a:	4602      	mov	r2, r0
 800df5c:	f240 2132 	movw	r1, #562	; 0x232
 800df60:	4839      	ldr	r0, [pc, #228]	; (800e048 <__mdiff+0x110>)
 800df62:	f7fe fa4d 	bl	800c400 <__assert_func>
 800df66:	2301      	movs	r3, #1
 800df68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df70:	bfa4      	itt	ge
 800df72:	4643      	movge	r3, r8
 800df74:	46a0      	movge	r8, r4
 800df76:	4630      	mov	r0, r6
 800df78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df7c:	bfa6      	itte	ge
 800df7e:	461c      	movge	r4, r3
 800df80:	2500      	movge	r5, #0
 800df82:	2501      	movlt	r5, #1
 800df84:	f7ff fcf0 	bl	800d968 <_Balloc>
 800df88:	b920      	cbnz	r0, 800df94 <__mdiff+0x5c>
 800df8a:	4b2e      	ldr	r3, [pc, #184]	; (800e044 <__mdiff+0x10c>)
 800df8c:	4602      	mov	r2, r0
 800df8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df92:	e7e5      	b.n	800df60 <__mdiff+0x28>
 800df94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df98:	6926      	ldr	r6, [r4, #16]
 800df9a:	60c5      	str	r5, [r0, #12]
 800df9c:	f104 0914 	add.w	r9, r4, #20
 800dfa0:	f108 0514 	add.w	r5, r8, #20
 800dfa4:	f100 0e14 	add.w	lr, r0, #20
 800dfa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfb0:	f108 0210 	add.w	r2, r8, #16
 800dfb4:	46f2      	mov	sl, lr
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfc0:	fa1f f883 	uxth.w	r8, r3
 800dfc4:	fa11 f18b 	uxtah	r1, r1, fp
 800dfc8:	0c1b      	lsrs	r3, r3, #16
 800dfca:	eba1 0808 	sub.w	r8, r1, r8
 800dfce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfd6:	fa1f f888 	uxth.w	r8, r8
 800dfda:	1419      	asrs	r1, r3, #16
 800dfdc:	454e      	cmp	r6, r9
 800dfde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfe2:	f84a 3b04 	str.w	r3, [sl], #4
 800dfe6:	d8e7      	bhi.n	800dfb8 <__mdiff+0x80>
 800dfe8:	1b33      	subs	r3, r6, r4
 800dfea:	3b15      	subs	r3, #21
 800dfec:	f023 0303 	bic.w	r3, r3, #3
 800dff0:	3304      	adds	r3, #4
 800dff2:	3415      	adds	r4, #21
 800dff4:	42a6      	cmp	r6, r4
 800dff6:	bf38      	it	cc
 800dff8:	2304      	movcc	r3, #4
 800dffa:	441d      	add	r5, r3
 800dffc:	4473      	add	r3, lr
 800dffe:	469e      	mov	lr, r3
 800e000:	462e      	mov	r6, r5
 800e002:	4566      	cmp	r6, ip
 800e004:	d30e      	bcc.n	800e024 <__mdiff+0xec>
 800e006:	f10c 0203 	add.w	r2, ip, #3
 800e00a:	1b52      	subs	r2, r2, r5
 800e00c:	f022 0203 	bic.w	r2, r2, #3
 800e010:	3d03      	subs	r5, #3
 800e012:	45ac      	cmp	ip, r5
 800e014:	bf38      	it	cc
 800e016:	2200      	movcc	r2, #0
 800e018:	441a      	add	r2, r3
 800e01a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e01e:	b17b      	cbz	r3, 800e040 <__mdiff+0x108>
 800e020:	6107      	str	r7, [r0, #16]
 800e022:	e7a3      	b.n	800df6c <__mdiff+0x34>
 800e024:	f856 8b04 	ldr.w	r8, [r6], #4
 800e028:	fa11 f288 	uxtah	r2, r1, r8
 800e02c:	1414      	asrs	r4, r2, #16
 800e02e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e032:	b292      	uxth	r2, r2
 800e034:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e038:	f84e 2b04 	str.w	r2, [lr], #4
 800e03c:	1421      	asrs	r1, r4, #16
 800e03e:	e7e0      	b.n	800e002 <__mdiff+0xca>
 800e040:	3f01      	subs	r7, #1
 800e042:	e7ea      	b.n	800e01a <__mdiff+0xe2>
 800e044:	0800f899 	.word	0x0800f899
 800e048:	0800f924 	.word	0x0800f924

0800e04c <__ulp>:
 800e04c:	b082      	sub	sp, #8
 800e04e:	ed8d 0b00 	vstr	d0, [sp]
 800e052:	9b01      	ldr	r3, [sp, #4]
 800e054:	4912      	ldr	r1, [pc, #72]	; (800e0a0 <__ulp+0x54>)
 800e056:	4019      	ands	r1, r3
 800e058:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e05c:	2900      	cmp	r1, #0
 800e05e:	dd05      	ble.n	800e06c <__ulp+0x20>
 800e060:	2200      	movs	r2, #0
 800e062:	460b      	mov	r3, r1
 800e064:	ec43 2b10 	vmov	d0, r2, r3
 800e068:	b002      	add	sp, #8
 800e06a:	4770      	bx	lr
 800e06c:	4249      	negs	r1, r1
 800e06e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e072:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e076:	f04f 0200 	mov.w	r2, #0
 800e07a:	f04f 0300 	mov.w	r3, #0
 800e07e:	da04      	bge.n	800e08a <__ulp+0x3e>
 800e080:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e084:	fa41 f300 	asr.w	r3, r1, r0
 800e088:	e7ec      	b.n	800e064 <__ulp+0x18>
 800e08a:	f1a0 0114 	sub.w	r1, r0, #20
 800e08e:	291e      	cmp	r1, #30
 800e090:	bfda      	itte	le
 800e092:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e096:	fa20 f101 	lsrle.w	r1, r0, r1
 800e09a:	2101      	movgt	r1, #1
 800e09c:	460a      	mov	r2, r1
 800e09e:	e7e1      	b.n	800e064 <__ulp+0x18>
 800e0a0:	7ff00000 	.word	0x7ff00000

0800e0a4 <__b2d>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	6905      	ldr	r5, [r0, #16]
 800e0a8:	f100 0714 	add.w	r7, r0, #20
 800e0ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0b0:	1f2e      	subs	r6, r5, #4
 800e0b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f7ff fd48 	bl	800db4c <__hi0bits>
 800e0bc:	f1c0 0320 	rsb	r3, r0, #32
 800e0c0:	280a      	cmp	r0, #10
 800e0c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e140 <__b2d+0x9c>
 800e0c6:	600b      	str	r3, [r1, #0]
 800e0c8:	dc14      	bgt.n	800e0f4 <__b2d+0x50>
 800e0ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0d2:	42b7      	cmp	r7, r6
 800e0d4:	ea41 030c 	orr.w	r3, r1, ip
 800e0d8:	bf34      	ite	cc
 800e0da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0de:	2100      	movcs	r1, #0
 800e0e0:	3015      	adds	r0, #21
 800e0e2:	fa04 f000 	lsl.w	r0, r4, r0
 800e0e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e0ea:	ea40 0201 	orr.w	r2, r0, r1
 800e0ee:	ec43 2b10 	vmov	d0, r2, r3
 800e0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f4:	42b7      	cmp	r7, r6
 800e0f6:	bf3a      	itte	cc
 800e0f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e100:	2100      	movcs	r1, #0
 800e102:	380b      	subs	r0, #11
 800e104:	d017      	beq.n	800e136 <__b2d+0x92>
 800e106:	f1c0 0c20 	rsb	ip, r0, #32
 800e10a:	fa04 f500 	lsl.w	r5, r4, r0
 800e10e:	42be      	cmp	r6, r7
 800e110:	fa21 f40c 	lsr.w	r4, r1, ip
 800e114:	ea45 0504 	orr.w	r5, r5, r4
 800e118:	bf8c      	ite	hi
 800e11a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e11e:	2400      	movls	r4, #0
 800e120:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e124:	fa01 f000 	lsl.w	r0, r1, r0
 800e128:	fa24 f40c 	lsr.w	r4, r4, ip
 800e12c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e130:	ea40 0204 	orr.w	r2, r0, r4
 800e134:	e7db      	b.n	800e0ee <__b2d+0x4a>
 800e136:	ea44 030c 	orr.w	r3, r4, ip
 800e13a:	460a      	mov	r2, r1
 800e13c:	e7d7      	b.n	800e0ee <__b2d+0x4a>
 800e13e:	bf00      	nop
 800e140:	3ff00000 	.word	0x3ff00000

0800e144 <__d2b>:
 800e144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e148:	4689      	mov	r9, r1
 800e14a:	2101      	movs	r1, #1
 800e14c:	ec57 6b10 	vmov	r6, r7, d0
 800e150:	4690      	mov	r8, r2
 800e152:	f7ff fc09 	bl	800d968 <_Balloc>
 800e156:	4604      	mov	r4, r0
 800e158:	b930      	cbnz	r0, 800e168 <__d2b+0x24>
 800e15a:	4602      	mov	r2, r0
 800e15c:	4b25      	ldr	r3, [pc, #148]	; (800e1f4 <__d2b+0xb0>)
 800e15e:	4826      	ldr	r0, [pc, #152]	; (800e1f8 <__d2b+0xb4>)
 800e160:	f240 310a 	movw	r1, #778	; 0x30a
 800e164:	f7fe f94c 	bl	800c400 <__assert_func>
 800e168:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e16c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e170:	bb35      	cbnz	r5, 800e1c0 <__d2b+0x7c>
 800e172:	2e00      	cmp	r6, #0
 800e174:	9301      	str	r3, [sp, #4]
 800e176:	d028      	beq.n	800e1ca <__d2b+0x86>
 800e178:	4668      	mov	r0, sp
 800e17a:	9600      	str	r6, [sp, #0]
 800e17c:	f7ff fd06 	bl	800db8c <__lo0bits>
 800e180:	9900      	ldr	r1, [sp, #0]
 800e182:	b300      	cbz	r0, 800e1c6 <__d2b+0x82>
 800e184:	9a01      	ldr	r2, [sp, #4]
 800e186:	f1c0 0320 	rsb	r3, r0, #32
 800e18a:	fa02 f303 	lsl.w	r3, r2, r3
 800e18e:	430b      	orrs	r3, r1
 800e190:	40c2      	lsrs	r2, r0
 800e192:	6163      	str	r3, [r4, #20]
 800e194:	9201      	str	r2, [sp, #4]
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	61a3      	str	r3, [r4, #24]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bf14      	ite	ne
 800e19e:	2202      	movne	r2, #2
 800e1a0:	2201      	moveq	r2, #1
 800e1a2:	6122      	str	r2, [r4, #16]
 800e1a4:	b1d5      	cbz	r5, 800e1dc <__d2b+0x98>
 800e1a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1aa:	4405      	add	r5, r0
 800e1ac:	f8c9 5000 	str.w	r5, [r9]
 800e1b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1b4:	f8c8 0000 	str.w	r0, [r8]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	b003      	add	sp, #12
 800e1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1c4:	e7d5      	b.n	800e172 <__d2b+0x2e>
 800e1c6:	6161      	str	r1, [r4, #20]
 800e1c8:	e7e5      	b.n	800e196 <__d2b+0x52>
 800e1ca:	a801      	add	r0, sp, #4
 800e1cc:	f7ff fcde 	bl	800db8c <__lo0bits>
 800e1d0:	9b01      	ldr	r3, [sp, #4]
 800e1d2:	6163      	str	r3, [r4, #20]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	6122      	str	r2, [r4, #16]
 800e1d8:	3020      	adds	r0, #32
 800e1da:	e7e3      	b.n	800e1a4 <__d2b+0x60>
 800e1dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1e4:	f8c9 0000 	str.w	r0, [r9]
 800e1e8:	6918      	ldr	r0, [r3, #16]
 800e1ea:	f7ff fcaf 	bl	800db4c <__hi0bits>
 800e1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1f2:	e7df      	b.n	800e1b4 <__d2b+0x70>
 800e1f4:	0800f899 	.word	0x0800f899
 800e1f8:	0800f924 	.word	0x0800f924

0800e1fc <__ratio>:
 800e1fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e200:	4688      	mov	r8, r1
 800e202:	4669      	mov	r1, sp
 800e204:	4681      	mov	r9, r0
 800e206:	f7ff ff4d 	bl	800e0a4 <__b2d>
 800e20a:	a901      	add	r1, sp, #4
 800e20c:	4640      	mov	r0, r8
 800e20e:	ec55 4b10 	vmov	r4, r5, d0
 800e212:	f7ff ff47 	bl	800e0a4 <__b2d>
 800e216:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e21a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e21e:	eba3 0c02 	sub.w	ip, r3, r2
 800e222:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e22c:	ec51 0b10 	vmov	r0, r1, d0
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfd6      	itet	le
 800e234:	460a      	movle	r2, r1
 800e236:	462a      	movgt	r2, r5
 800e238:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e23c:	468b      	mov	fp, r1
 800e23e:	462f      	mov	r7, r5
 800e240:	bfd4      	ite	le
 800e242:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e246:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e24a:	4620      	mov	r0, r4
 800e24c:	ee10 2a10 	vmov	r2, s0
 800e250:	465b      	mov	r3, fp
 800e252:	4639      	mov	r1, r7
 800e254:	f7f2 fb2c 	bl	80008b0 <__aeabi_ddiv>
 800e258:	ec41 0b10 	vmov	d0, r0, r1
 800e25c:	b003      	add	sp, #12
 800e25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e262 <__copybits>:
 800e262:	3901      	subs	r1, #1
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	1149      	asrs	r1, r1, #5
 800e268:	6914      	ldr	r4, [r2, #16]
 800e26a:	3101      	adds	r1, #1
 800e26c:	f102 0314 	add.w	r3, r2, #20
 800e270:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e274:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e278:	1f05      	subs	r5, r0, #4
 800e27a:	42a3      	cmp	r3, r4
 800e27c:	d30c      	bcc.n	800e298 <__copybits+0x36>
 800e27e:	1aa3      	subs	r3, r4, r2
 800e280:	3b11      	subs	r3, #17
 800e282:	f023 0303 	bic.w	r3, r3, #3
 800e286:	3211      	adds	r2, #17
 800e288:	42a2      	cmp	r2, r4
 800e28a:	bf88      	it	hi
 800e28c:	2300      	movhi	r3, #0
 800e28e:	4418      	add	r0, r3
 800e290:	2300      	movs	r3, #0
 800e292:	4288      	cmp	r0, r1
 800e294:	d305      	bcc.n	800e2a2 <__copybits+0x40>
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	f853 6b04 	ldr.w	r6, [r3], #4
 800e29c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2a0:	e7eb      	b.n	800e27a <__copybits+0x18>
 800e2a2:	f840 3b04 	str.w	r3, [r0], #4
 800e2a6:	e7f4      	b.n	800e292 <__copybits+0x30>

0800e2a8 <__any_on>:
 800e2a8:	f100 0214 	add.w	r2, r0, #20
 800e2ac:	6900      	ldr	r0, [r0, #16]
 800e2ae:	114b      	asrs	r3, r1, #5
 800e2b0:	4298      	cmp	r0, r3
 800e2b2:	b510      	push	{r4, lr}
 800e2b4:	db11      	blt.n	800e2da <__any_on+0x32>
 800e2b6:	dd0a      	ble.n	800e2ce <__any_on+0x26>
 800e2b8:	f011 011f 	ands.w	r1, r1, #31
 800e2bc:	d007      	beq.n	800e2ce <__any_on+0x26>
 800e2be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2c2:	fa24 f001 	lsr.w	r0, r4, r1
 800e2c6:	fa00 f101 	lsl.w	r1, r0, r1
 800e2ca:	428c      	cmp	r4, r1
 800e2cc:	d10b      	bne.n	800e2e6 <__any_on+0x3e>
 800e2ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d803      	bhi.n	800e2de <__any_on+0x36>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	4603      	mov	r3, r0
 800e2dc:	e7f7      	b.n	800e2ce <__any_on+0x26>
 800e2de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	d0f5      	beq.n	800e2d2 <__any_on+0x2a>
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	e7f6      	b.n	800e2d8 <__any_on+0x30>

0800e2ea <_calloc_r>:
 800e2ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ec:	fba1 2402 	umull	r2, r4, r1, r2
 800e2f0:	b94c      	cbnz	r4, 800e306 <_calloc_r+0x1c>
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	9201      	str	r2, [sp, #4]
 800e2f6:	f7fb fedb 	bl	800a0b0 <_malloc_r>
 800e2fa:	9a01      	ldr	r2, [sp, #4]
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	b930      	cbnz	r0, 800e30e <_calloc_r+0x24>
 800e300:	4628      	mov	r0, r5
 800e302:	b003      	add	sp, #12
 800e304:	bd30      	pop	{r4, r5, pc}
 800e306:	220c      	movs	r2, #12
 800e308:	6002      	str	r2, [r0, #0]
 800e30a:	2500      	movs	r5, #0
 800e30c:	e7f8      	b.n	800e300 <_calloc_r+0x16>
 800e30e:	4621      	mov	r1, r4
 800e310:	f7fb fe5a 	bl	8009fc8 <memset>
 800e314:	e7f4      	b.n	800e300 <_calloc_r+0x16>

0800e316 <_realloc_r>:
 800e316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31a:	4680      	mov	r8, r0
 800e31c:	4614      	mov	r4, r2
 800e31e:	460e      	mov	r6, r1
 800e320:	b921      	cbnz	r1, 800e32c <_realloc_r+0x16>
 800e322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e326:	4611      	mov	r1, r2
 800e328:	f7fb bec2 	b.w	800a0b0 <_malloc_r>
 800e32c:	b92a      	cbnz	r2, 800e33a <_realloc_r+0x24>
 800e32e:	f7fb fe53 	bl	8009fd8 <_free_r>
 800e332:	4625      	mov	r5, r4
 800e334:	4628      	mov	r0, r5
 800e336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33a:	f000 fa1d 	bl	800e778 <_malloc_usable_size_r>
 800e33e:	4284      	cmp	r4, r0
 800e340:	4607      	mov	r7, r0
 800e342:	d802      	bhi.n	800e34a <_realloc_r+0x34>
 800e344:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e348:	d812      	bhi.n	800e370 <_realloc_r+0x5a>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4640      	mov	r0, r8
 800e34e:	f7fb feaf 	bl	800a0b0 <_malloc_r>
 800e352:	4605      	mov	r5, r0
 800e354:	2800      	cmp	r0, #0
 800e356:	d0ed      	beq.n	800e334 <_realloc_r+0x1e>
 800e358:	42bc      	cmp	r4, r7
 800e35a:	4622      	mov	r2, r4
 800e35c:	4631      	mov	r1, r6
 800e35e:	bf28      	it	cs
 800e360:	463a      	movcs	r2, r7
 800e362:	f7fb fe09 	bl	8009f78 <memcpy>
 800e366:	4631      	mov	r1, r6
 800e368:	4640      	mov	r0, r8
 800e36a:	f7fb fe35 	bl	8009fd8 <_free_r>
 800e36e:	e7e1      	b.n	800e334 <_realloc_r+0x1e>
 800e370:	4635      	mov	r5, r6
 800e372:	e7df      	b.n	800e334 <_realloc_r+0x1e>

0800e374 <__ssputs_r>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	688e      	ldr	r6, [r1, #8]
 800e37a:	429e      	cmp	r6, r3
 800e37c:	4682      	mov	sl, r0
 800e37e:	460c      	mov	r4, r1
 800e380:	4690      	mov	r8, r2
 800e382:	461f      	mov	r7, r3
 800e384:	d838      	bhi.n	800e3f8 <__ssputs_r+0x84>
 800e386:	898a      	ldrh	r2, [r1, #12]
 800e388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e38c:	d032      	beq.n	800e3f4 <__ssputs_r+0x80>
 800e38e:	6825      	ldr	r5, [r4, #0]
 800e390:	6909      	ldr	r1, [r1, #16]
 800e392:	eba5 0901 	sub.w	r9, r5, r1
 800e396:	6965      	ldr	r5, [r4, #20]
 800e398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	444b      	add	r3, r9
 800e3a4:	106d      	asrs	r5, r5, #1
 800e3a6:	429d      	cmp	r5, r3
 800e3a8:	bf38      	it	cc
 800e3aa:	461d      	movcc	r5, r3
 800e3ac:	0553      	lsls	r3, r2, #21
 800e3ae:	d531      	bpl.n	800e414 <__ssputs_r+0xa0>
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	f7fb fe7d 	bl	800a0b0 <_malloc_r>
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	b950      	cbnz	r0, 800e3d0 <__ssputs_r+0x5c>
 800e3ba:	230c      	movs	r3, #12
 800e3bc:	f8ca 3000 	str.w	r3, [sl]
 800e3c0:	89a3      	ldrh	r3, [r4, #12]
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d0:	6921      	ldr	r1, [r4, #16]
 800e3d2:	464a      	mov	r2, r9
 800e3d4:	f7fb fdd0 	bl	8009f78 <memcpy>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e2:	81a3      	strh	r3, [r4, #12]
 800e3e4:	6126      	str	r6, [r4, #16]
 800e3e6:	6165      	str	r5, [r4, #20]
 800e3e8:	444e      	add	r6, r9
 800e3ea:	eba5 0509 	sub.w	r5, r5, r9
 800e3ee:	6026      	str	r6, [r4, #0]
 800e3f0:	60a5      	str	r5, [r4, #8]
 800e3f2:	463e      	mov	r6, r7
 800e3f4:	42be      	cmp	r6, r7
 800e3f6:	d900      	bls.n	800e3fa <__ssputs_r+0x86>
 800e3f8:	463e      	mov	r6, r7
 800e3fa:	6820      	ldr	r0, [r4, #0]
 800e3fc:	4632      	mov	r2, r6
 800e3fe:	4641      	mov	r1, r8
 800e400:	f7fb fdc8 	bl	8009f94 <memmove>
 800e404:	68a3      	ldr	r3, [r4, #8]
 800e406:	1b9b      	subs	r3, r3, r6
 800e408:	60a3      	str	r3, [r4, #8]
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	4433      	add	r3, r6
 800e40e:	6023      	str	r3, [r4, #0]
 800e410:	2000      	movs	r0, #0
 800e412:	e7db      	b.n	800e3cc <__ssputs_r+0x58>
 800e414:	462a      	mov	r2, r5
 800e416:	f7ff ff7e 	bl	800e316 <_realloc_r>
 800e41a:	4606      	mov	r6, r0
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d1e1      	bne.n	800e3e4 <__ssputs_r+0x70>
 800e420:	6921      	ldr	r1, [r4, #16]
 800e422:	4650      	mov	r0, sl
 800e424:	f7fb fdd8 	bl	8009fd8 <_free_r>
 800e428:	e7c7      	b.n	800e3ba <__ssputs_r+0x46>
	...

0800e42c <_svfiprintf_r>:
 800e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e430:	4698      	mov	r8, r3
 800e432:	898b      	ldrh	r3, [r1, #12]
 800e434:	061b      	lsls	r3, r3, #24
 800e436:	b09d      	sub	sp, #116	; 0x74
 800e438:	4607      	mov	r7, r0
 800e43a:	460d      	mov	r5, r1
 800e43c:	4614      	mov	r4, r2
 800e43e:	d50e      	bpl.n	800e45e <_svfiprintf_r+0x32>
 800e440:	690b      	ldr	r3, [r1, #16]
 800e442:	b963      	cbnz	r3, 800e45e <_svfiprintf_r+0x32>
 800e444:	2140      	movs	r1, #64	; 0x40
 800e446:	f7fb fe33 	bl	800a0b0 <_malloc_r>
 800e44a:	6028      	str	r0, [r5, #0]
 800e44c:	6128      	str	r0, [r5, #16]
 800e44e:	b920      	cbnz	r0, 800e45a <_svfiprintf_r+0x2e>
 800e450:	230c      	movs	r3, #12
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e458:	e0d1      	b.n	800e5fe <_svfiprintf_r+0x1d2>
 800e45a:	2340      	movs	r3, #64	; 0x40
 800e45c:	616b      	str	r3, [r5, #20]
 800e45e:	2300      	movs	r3, #0
 800e460:	9309      	str	r3, [sp, #36]	; 0x24
 800e462:	2320      	movs	r3, #32
 800e464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e468:	f8cd 800c 	str.w	r8, [sp, #12]
 800e46c:	2330      	movs	r3, #48	; 0x30
 800e46e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e618 <_svfiprintf_r+0x1ec>
 800e472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e476:	f04f 0901 	mov.w	r9, #1
 800e47a:	4623      	mov	r3, r4
 800e47c:	469a      	mov	sl, r3
 800e47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e482:	b10a      	cbz	r2, 800e488 <_svfiprintf_r+0x5c>
 800e484:	2a25      	cmp	r2, #37	; 0x25
 800e486:	d1f9      	bne.n	800e47c <_svfiprintf_r+0x50>
 800e488:	ebba 0b04 	subs.w	fp, sl, r4
 800e48c:	d00b      	beq.n	800e4a6 <_svfiprintf_r+0x7a>
 800e48e:	465b      	mov	r3, fp
 800e490:	4622      	mov	r2, r4
 800e492:	4629      	mov	r1, r5
 800e494:	4638      	mov	r0, r7
 800e496:	f7ff ff6d 	bl	800e374 <__ssputs_r>
 800e49a:	3001      	adds	r0, #1
 800e49c:	f000 80aa 	beq.w	800e5f4 <_svfiprintf_r+0x1c8>
 800e4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4a2:	445a      	add	r2, fp
 800e4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 80a2 	beq.w	800e5f4 <_svfiprintf_r+0x1c8>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4ba:	f10a 0a01 	add.w	sl, sl, #1
 800e4be:	9304      	str	r3, [sp, #16]
 800e4c0:	9307      	str	r3, [sp, #28]
 800e4c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800e4c8:	4654      	mov	r4, sl
 800e4ca:	2205      	movs	r2, #5
 800e4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d0:	4851      	ldr	r0, [pc, #324]	; (800e618 <_svfiprintf_r+0x1ec>)
 800e4d2:	f7f1 fea5 	bl	8000220 <memchr>
 800e4d6:	9a04      	ldr	r2, [sp, #16]
 800e4d8:	b9d8      	cbnz	r0, 800e512 <_svfiprintf_r+0xe6>
 800e4da:	06d0      	lsls	r0, r2, #27
 800e4dc:	bf44      	itt	mi
 800e4de:	2320      	movmi	r3, #32
 800e4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4e4:	0711      	lsls	r1, r2, #28
 800e4e6:	bf44      	itt	mi
 800e4e8:	232b      	movmi	r3, #43	; 0x2b
 800e4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4f4:	d015      	beq.n	800e522 <_svfiprintf_r+0xf6>
 800e4f6:	9a07      	ldr	r2, [sp, #28]
 800e4f8:	4654      	mov	r4, sl
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	f04f 0c0a 	mov.w	ip, #10
 800e500:	4621      	mov	r1, r4
 800e502:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e506:	3b30      	subs	r3, #48	; 0x30
 800e508:	2b09      	cmp	r3, #9
 800e50a:	d94e      	bls.n	800e5aa <_svfiprintf_r+0x17e>
 800e50c:	b1b0      	cbz	r0, 800e53c <_svfiprintf_r+0x110>
 800e50e:	9207      	str	r2, [sp, #28]
 800e510:	e014      	b.n	800e53c <_svfiprintf_r+0x110>
 800e512:	eba0 0308 	sub.w	r3, r0, r8
 800e516:	fa09 f303 	lsl.w	r3, r9, r3
 800e51a:	4313      	orrs	r3, r2
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	46a2      	mov	sl, r4
 800e520:	e7d2      	b.n	800e4c8 <_svfiprintf_r+0x9c>
 800e522:	9b03      	ldr	r3, [sp, #12]
 800e524:	1d19      	adds	r1, r3, #4
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	9103      	str	r1, [sp, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	bfbb      	ittet	lt
 800e52e:	425b      	neglt	r3, r3
 800e530:	f042 0202 	orrlt.w	r2, r2, #2
 800e534:	9307      	strge	r3, [sp, #28]
 800e536:	9307      	strlt	r3, [sp, #28]
 800e538:	bfb8      	it	lt
 800e53a:	9204      	strlt	r2, [sp, #16]
 800e53c:	7823      	ldrb	r3, [r4, #0]
 800e53e:	2b2e      	cmp	r3, #46	; 0x2e
 800e540:	d10c      	bne.n	800e55c <_svfiprintf_r+0x130>
 800e542:	7863      	ldrb	r3, [r4, #1]
 800e544:	2b2a      	cmp	r3, #42	; 0x2a
 800e546:	d135      	bne.n	800e5b4 <_svfiprintf_r+0x188>
 800e548:	9b03      	ldr	r3, [sp, #12]
 800e54a:	1d1a      	adds	r2, r3, #4
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	9203      	str	r2, [sp, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	bfb8      	it	lt
 800e554:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e558:	3402      	adds	r4, #2
 800e55a:	9305      	str	r3, [sp, #20]
 800e55c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e628 <_svfiprintf_r+0x1fc>
 800e560:	7821      	ldrb	r1, [r4, #0]
 800e562:	2203      	movs	r2, #3
 800e564:	4650      	mov	r0, sl
 800e566:	f7f1 fe5b 	bl	8000220 <memchr>
 800e56a:	b140      	cbz	r0, 800e57e <_svfiprintf_r+0x152>
 800e56c:	2340      	movs	r3, #64	; 0x40
 800e56e:	eba0 000a 	sub.w	r0, r0, sl
 800e572:	fa03 f000 	lsl.w	r0, r3, r0
 800e576:	9b04      	ldr	r3, [sp, #16]
 800e578:	4303      	orrs	r3, r0
 800e57a:	3401      	adds	r4, #1
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e582:	4826      	ldr	r0, [pc, #152]	; (800e61c <_svfiprintf_r+0x1f0>)
 800e584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e588:	2206      	movs	r2, #6
 800e58a:	f7f1 fe49 	bl	8000220 <memchr>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d038      	beq.n	800e604 <_svfiprintf_r+0x1d8>
 800e592:	4b23      	ldr	r3, [pc, #140]	; (800e620 <_svfiprintf_r+0x1f4>)
 800e594:	bb1b      	cbnz	r3, 800e5de <_svfiprintf_r+0x1b2>
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	3307      	adds	r3, #7
 800e59a:	f023 0307 	bic.w	r3, r3, #7
 800e59e:	3308      	adds	r3, #8
 800e5a0:	9303      	str	r3, [sp, #12]
 800e5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a4:	4433      	add	r3, r6
 800e5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5a8:	e767      	b.n	800e47a <_svfiprintf_r+0x4e>
 800e5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	e7a5      	b.n	800e500 <_svfiprintf_r+0xd4>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	3401      	adds	r4, #1
 800e5b8:	9305      	str	r3, [sp, #20]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	f04f 0c0a 	mov.w	ip, #10
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5c6:	3a30      	subs	r2, #48	; 0x30
 800e5c8:	2a09      	cmp	r2, #9
 800e5ca:	d903      	bls.n	800e5d4 <_svfiprintf_r+0x1a8>
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d0c5      	beq.n	800e55c <_svfiprintf_r+0x130>
 800e5d0:	9105      	str	r1, [sp, #20]
 800e5d2:	e7c3      	b.n	800e55c <_svfiprintf_r+0x130>
 800e5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5d8:	4604      	mov	r4, r0
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e7f0      	b.n	800e5c0 <_svfiprintf_r+0x194>
 800e5de:	ab03      	add	r3, sp, #12
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4b0f      	ldr	r3, [pc, #60]	; (800e624 <_svfiprintf_r+0x1f8>)
 800e5e6:	a904      	add	r1, sp, #16
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f7fb ffcf 	bl	800a58c <_printf_float>
 800e5ee:	1c42      	adds	r2, r0, #1
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	d1d6      	bne.n	800e5a2 <_svfiprintf_r+0x176>
 800e5f4:	89ab      	ldrh	r3, [r5, #12]
 800e5f6:	065b      	lsls	r3, r3, #25
 800e5f8:	f53f af2c 	bmi.w	800e454 <_svfiprintf_r+0x28>
 800e5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5fe:	b01d      	add	sp, #116	; 0x74
 800e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e604:	ab03      	add	r3, sp, #12
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	462a      	mov	r2, r5
 800e60a:	4b06      	ldr	r3, [pc, #24]	; (800e624 <_svfiprintf_r+0x1f8>)
 800e60c:	a904      	add	r1, sp, #16
 800e60e:	4638      	mov	r0, r7
 800e610:	f7fc fa60 	bl	800aad4 <_printf_i>
 800e614:	e7eb      	b.n	800e5ee <_svfiprintf_r+0x1c2>
 800e616:	bf00      	nop
 800e618:	0800f5e0 	.word	0x0800f5e0
 800e61c:	0800f5ea 	.word	0x0800f5ea
 800e620:	0800a58d 	.word	0x0800a58d
 800e624:	0800e375 	.word	0x0800e375
 800e628:	0800f5e6 	.word	0x0800f5e6

0800e62c <_putc_r>:
 800e62c:	b570      	push	{r4, r5, r6, lr}
 800e62e:	460d      	mov	r5, r1
 800e630:	4614      	mov	r4, r2
 800e632:	4606      	mov	r6, r0
 800e634:	b118      	cbz	r0, 800e63e <_putc_r+0x12>
 800e636:	6983      	ldr	r3, [r0, #24]
 800e638:	b90b      	cbnz	r3, 800e63e <_putc_r+0x12>
 800e63a:	f7fb fba5 	bl	8009d88 <__sinit>
 800e63e:	4b1c      	ldr	r3, [pc, #112]	; (800e6b0 <_putc_r+0x84>)
 800e640:	429c      	cmp	r4, r3
 800e642:	d124      	bne.n	800e68e <_putc_r+0x62>
 800e644:	6874      	ldr	r4, [r6, #4]
 800e646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e648:	07d8      	lsls	r0, r3, #31
 800e64a:	d405      	bmi.n	800e658 <_putc_r+0x2c>
 800e64c:	89a3      	ldrh	r3, [r4, #12]
 800e64e:	0599      	lsls	r1, r3, #22
 800e650:	d402      	bmi.n	800e658 <_putc_r+0x2c>
 800e652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e654:	f7fb fc6d 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800e658:	68a3      	ldr	r3, [r4, #8]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	60a3      	str	r3, [r4, #8]
 800e660:	da05      	bge.n	800e66e <_putc_r+0x42>
 800e662:	69a2      	ldr	r2, [r4, #24]
 800e664:	4293      	cmp	r3, r2
 800e666:	db1c      	blt.n	800e6a2 <_putc_r+0x76>
 800e668:	b2eb      	uxtb	r3, r5
 800e66a:	2b0a      	cmp	r3, #10
 800e66c:	d019      	beq.n	800e6a2 <_putc_r+0x76>
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	1c5a      	adds	r2, r3, #1
 800e672:	6022      	str	r2, [r4, #0]
 800e674:	701d      	strb	r5, [r3, #0]
 800e676:	b2ed      	uxtb	r5, r5
 800e678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e67a:	07da      	lsls	r2, r3, #31
 800e67c:	d405      	bmi.n	800e68a <_putc_r+0x5e>
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	059b      	lsls	r3, r3, #22
 800e682:	d402      	bmi.n	800e68a <_putc_r+0x5e>
 800e684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e686:	f7fb fc55 	bl	8009f34 <__retarget_lock_release_recursive>
 800e68a:	4628      	mov	r0, r5
 800e68c:	bd70      	pop	{r4, r5, r6, pc}
 800e68e:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <_putc_r+0x88>)
 800e690:	429c      	cmp	r4, r3
 800e692:	d101      	bne.n	800e698 <_putc_r+0x6c>
 800e694:	68b4      	ldr	r4, [r6, #8]
 800e696:	e7d6      	b.n	800e646 <_putc_r+0x1a>
 800e698:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <_putc_r+0x8c>)
 800e69a:	429c      	cmp	r4, r3
 800e69c:	bf08      	it	eq
 800e69e:	68f4      	ldreq	r4, [r6, #12]
 800e6a0:	e7d1      	b.n	800e646 <_putc_r+0x1a>
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	4622      	mov	r2, r4
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7fd fdd8 	bl	800c25c <__swbuf_r>
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	e7e3      	b.n	800e678 <_putc_r+0x4c>
 800e6b0:	0800f59c 	.word	0x0800f59c
 800e6b4:	0800f5bc 	.word	0x0800f5bc
 800e6b8:	0800f57c 	.word	0x0800f57c

0800e6bc <_read_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d07      	ldr	r5, [pc, #28]	; (800e6dc <_read_r+0x20>)
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	4608      	mov	r0, r1
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	602a      	str	r2, [r5, #0]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	f7f5 f8e7 	bl	800389e <_read>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	d102      	bne.n	800e6da <_read_r+0x1e>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	b103      	cbz	r3, 800e6da <_read_r+0x1e>
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	200008ec 	.word	0x200008ec

0800e6e0 <nan>:
 800e6e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e6e8 <nan+0x8>
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	00000000 	.word	0x00000000
 800e6ec:	7ff80000 	.word	0x7ff80000

0800e6f0 <strncmp>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	b17a      	cbz	r2, 800e714 <strncmp+0x24>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	3901      	subs	r1, #1
 800e6f8:	1884      	adds	r4, r0, r2
 800e6fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e6fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e702:	4290      	cmp	r0, r2
 800e704:	d101      	bne.n	800e70a <strncmp+0x1a>
 800e706:	42a3      	cmp	r3, r4
 800e708:	d101      	bne.n	800e70e <strncmp+0x1e>
 800e70a:	1a80      	subs	r0, r0, r2
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	2800      	cmp	r0, #0
 800e710:	d1f3      	bne.n	800e6fa <strncmp+0xa>
 800e712:	e7fa      	b.n	800e70a <strncmp+0x1a>
 800e714:	4610      	mov	r0, r2
 800e716:	e7f9      	b.n	800e70c <strncmp+0x1c>

0800e718 <__ascii_wctomb>:
 800e718:	b149      	cbz	r1, 800e72e <__ascii_wctomb+0x16>
 800e71a:	2aff      	cmp	r2, #255	; 0xff
 800e71c:	bf85      	ittet	hi
 800e71e:	238a      	movhi	r3, #138	; 0x8a
 800e720:	6003      	strhi	r3, [r0, #0]
 800e722:	700a      	strbls	r2, [r1, #0]
 800e724:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e728:	bf98      	it	ls
 800e72a:	2001      	movls	r0, #1
 800e72c:	4770      	bx	lr
 800e72e:	4608      	mov	r0, r1
 800e730:	4770      	bx	lr
	...

0800e734 <_fstat_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4d07      	ldr	r5, [pc, #28]	; (800e754 <_fstat_r+0x20>)
 800e738:	2300      	movs	r3, #0
 800e73a:	4604      	mov	r4, r0
 800e73c:	4608      	mov	r0, r1
 800e73e:	4611      	mov	r1, r2
 800e740:	602b      	str	r3, [r5, #0]
 800e742:	f7f5 f8d5 	bl	80038f0 <_fstat>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d102      	bne.n	800e750 <_fstat_r+0x1c>
 800e74a:	682b      	ldr	r3, [r5, #0]
 800e74c:	b103      	cbz	r3, 800e750 <_fstat_r+0x1c>
 800e74e:	6023      	str	r3, [r4, #0]
 800e750:	bd38      	pop	{r3, r4, r5, pc}
 800e752:	bf00      	nop
 800e754:	200008ec 	.word	0x200008ec

0800e758 <_isatty_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4d06      	ldr	r5, [pc, #24]	; (800e774 <_isatty_r+0x1c>)
 800e75c:	2300      	movs	r3, #0
 800e75e:	4604      	mov	r4, r0
 800e760:	4608      	mov	r0, r1
 800e762:	602b      	str	r3, [r5, #0]
 800e764:	f7f5 f8d4 	bl	8003910 <_isatty>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_isatty_r+0x1a>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_isatty_r+0x1a>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	200008ec 	.word	0x200008ec

0800e778 <_malloc_usable_size_r>:
 800e778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e77c:	1f18      	subs	r0, r3, #4
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bfbc      	itt	lt
 800e782:	580b      	ldrlt	r3, [r1, r0]
 800e784:	18c0      	addlt	r0, r0, r3
 800e786:	4770      	bx	lr

0800e788 <_init>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	bf00      	nop
 800e78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78e:	bc08      	pop	{r3}
 800e790:	469e      	mov	lr, r3
 800e792:	4770      	bx	lr

0800e794 <_fini>:
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	bf00      	nop
 800e798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e79a:	bc08      	pop	{r3}
 800e79c:	469e      	mov	lr, r3
 800e79e:	4770      	bx	lr
