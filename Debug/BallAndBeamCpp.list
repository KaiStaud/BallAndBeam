
BallAndBeamCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000131c  0800ed70  0800ed70  0001ed70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801008c  0801008c  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801008c  0801008c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010094  08010094  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010094  08010094  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801009c  0801009c  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080100a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000200  080102a0  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  080102a0  00030928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b17  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049c9  00000000  00000000  00064d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00069710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  0006b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfa8  00000000  00000000  0006ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee37  00000000  00000000  0009aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011918d  00000000  00000000  000b986f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d29fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea8  00000000  00000000  001d2a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ed58 	.word	0x0800ed58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800ed58 	.word	0x0800ed58

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2uiz>:
 8000c0c:	004a      	lsls	r2, r1, #1
 8000c0e:	d211      	bcs.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d211      	bcs.n	8000c3a <__aeabi_d2uiz+0x2e>
 8000c16:	d50d      	bpl.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d40e      	bmi.n	8000c40 <__aeabi_d2uiz+0x34>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_d2uiz+0x3a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 b9aa 	b.w	8001058 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f83c 	bl	8000d88 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	460d      	mov	r5, r1
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_dcmplt>
 8000d2a:	b928      	cbnz	r0, 8000d38 <__aeabi_d2lz+0x1c>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d34:	f000 b80a 	b.w	8000d4c <__aeabi_d2ulz>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3e:	f000 f805 	bl	8000d4c <__aeabi_d2ulz>
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop

08000d4c <__aeabi_d2ulz>:
 8000d4c:	b5d0      	push	{r4, r6, r7, lr}
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__aeabi_d2ulz+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc81 	bl	800065c <__aeabi_dmul>
 8000d5a:	f7ff ff57 	bl	8000c0c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <__aeabi_d2ulz+0x38>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc78 	bl	800065c <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff faba 	bl	80002ec <__aeabi_dsub>
 8000d78:	f7ff ff48 	bl	8000c0c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <__udivmoddi4>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	9d08      	ldr	r5, [sp, #32]
 8000d8e:	4604      	mov	r4, r0
 8000d90:	468e      	mov	lr, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14d      	bne.n	8000e32 <__udivmoddi4+0xaa>
 8000d96:	428a      	cmp	r2, r1
 8000d98:	4694      	mov	ip, r2
 8000d9a:	d969      	bls.n	8000e70 <__udivmoddi4+0xe8>
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b152      	cbz	r2, 8000db8 <__udivmoddi4+0x30>
 8000da2:	fa01 f302 	lsl.w	r3, r1, r2
 8000da6:	f1c2 0120 	rsb	r1, r2, #32
 8000daa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db2:	ea41 0e03 	orr.w	lr, r1, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	0c21      	lsrs	r1, r4, #16
 8000dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000dc2:	fa1f f78c 	uxth.w	r7, ip
 8000dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dce:	fb06 f107 	mul.w	r1, r6, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x64>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dde:	f080 811f 	bcs.w	8001020 <__udivmoddi4+0x298>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 811c 	bls.w	8001020 <__udivmoddi4+0x298>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb00 f707 	mul.w	r7, r0, r7
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x92>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0c:	f080 810a 	bcs.w	8001024 <__udivmoddi4+0x29c>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f240 8107 	bls.w	8001024 <__udivmoddi4+0x29c>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1e:	1be4      	subs	r4, r4, r7
 8000e20:	2600      	movs	r6, #0
 8000e22:	b11d      	cbz	r5, 8000e2c <__udivmoddi4+0xa4>
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c5 4300 	strd	r4, r3, [r5]
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0xc2>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80ef 	beq.w	800101a <__udivmoddi4+0x292>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x160>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xd4>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80f9 	bhi.w	800104e <__udivmoddi4+0x2c6>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	469e      	mov	lr, r3
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e0      	beq.n	8000e2c <__udivmoddi4+0xa4>
 8000e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6e:	e7dd      	b.n	8000e2c <__udivmoddi4+0xa4>
 8000e70:	b902      	cbnz	r2, 8000e74 <__udivmoddi4+0xec>
 8000e72:	deff      	udf	#255	; 0xff
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 8092 	bne.w	8000fa2 <__udivmoddi4+0x21a>
 8000e7e:	eba1 010c 	sub.w	r1, r1, ip
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f fe8c 	uxth.w	lr, ip
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	0c20      	lsrs	r0, r4, #16
 8000e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e92:	fb07 1113 	mls	r1, r7, r3, r1
 8000e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9a:	fb0e f003 	mul.w	r0, lr, r3
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x12c>
 8000ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x12a>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f200 80cb 	bhi.w	8001048 <__udivmoddi4+0x2c0>
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	1a09      	subs	r1, r1, r0
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x156>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x154>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f200 80bb 	bhi.w	8001052 <__udivmoddi4+0x2ca>
 8000edc:	4608      	mov	r0, r1
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee6:	e79c      	b.n	8000e22 <__udivmoddi4+0x9a>
 8000ee8:	f1c6 0720 	rsb	r7, r6, #32
 8000eec:	40b3      	lsls	r3, r6
 8000eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	431c      	orrs	r4, r3
 8000f00:	40f9      	lsrs	r1, r7
 8000f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f06:	fa00 f306 	lsl.w	r3, r0, r6
 8000f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0e:	0c20      	lsrs	r0, r4, #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fb09 1118 	mls	r1, r9, r8, r1
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f20:	4288      	cmp	r0, r1
 8000f22:	fa02 f206 	lsl.w	r2, r2, r6
 8000f26:	d90b      	bls.n	8000f40 <__udivmoddi4+0x1b8>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f30:	f080 8088 	bcs.w	8001044 <__udivmoddi4+0x2bc>
 8000f34:	4288      	cmp	r0, r1
 8000f36:	f240 8085 	bls.w	8001044 <__udivmoddi4+0x2bc>
 8000f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f48:	fb09 1110 	mls	r1, r9, r0, r1
 8000f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f54:	458e      	cmp	lr, r1
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x1e2>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f60:	d26c      	bcs.n	800103c <__udivmoddi4+0x2b4>
 8000f62:	458e      	cmp	lr, r1
 8000f64:	d96a      	bls.n	800103c <__udivmoddi4+0x2b4>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4461      	add	r1, ip
 8000f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f72:	eba1 010e 	sub.w	r1, r1, lr
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	46a6      	mov	lr, r4
 8000f7c:	d356      	bcc.n	800102c <__udivmoddi4+0x2a4>
 8000f7e:	d053      	beq.n	8001028 <__udivmoddi4+0x2a0>
 8000f80:	b15d      	cbz	r5, 8000f9a <__udivmoddi4+0x212>
 8000f82:	ebb3 0208 	subs.w	r2, r3, r8
 8000f86:	eb61 010e 	sbc.w	r1, r1, lr
 8000f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f92:	40f1      	lsrs	r1, r6
 8000f94:	431f      	orrs	r7, r3
 8000f96:	e9c5 7100 	strd	r7, r1, [r5]
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	40d8      	lsrs	r0, r3
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fca:	fb00 f60e 	mul.w	r6, r0, lr
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x260>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fde:	d22f      	bcs.n	8001040 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d92d      	bls.n	8001040 <__udivmoddi4+0x2b8>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	b289      	uxth	r1, r1
 8000fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x28a>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001008:	d216      	bcs.n	8001038 <__udivmoddi4+0x2b0>
 800100a:	428b      	cmp	r3, r1
 800100c:	d914      	bls.n	8001038 <__udivmoddi4+0x2b0>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001018:	e738      	b.n	8000e8c <__udivmoddi4+0x104>
 800101a:	462e      	mov	r6, r5
 800101c:	4628      	mov	r0, r5
 800101e:	e705      	b.n	8000e2c <__udivmoddi4+0xa4>
 8001020:	4606      	mov	r6, r0
 8001022:	e6e3      	b.n	8000dec <__udivmoddi4+0x64>
 8001024:	4618      	mov	r0, r3
 8001026:	e6f8      	b.n	8000e1a <__udivmoddi4+0x92>
 8001028:	454b      	cmp	r3, r9
 800102a:	d2a9      	bcs.n	8000f80 <__udivmoddi4+0x1f8>
 800102c:	ebb9 0802 	subs.w	r8, r9, r2
 8001030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001034:	3801      	subs	r0, #1
 8001036:	e7a3      	b.n	8000f80 <__udivmoddi4+0x1f8>
 8001038:	4646      	mov	r6, r8
 800103a:	e7ea      	b.n	8001012 <__udivmoddi4+0x28a>
 800103c:	4620      	mov	r0, r4
 800103e:	e794      	b.n	8000f6a <__udivmoddi4+0x1e2>
 8001040:	4640      	mov	r0, r8
 8001042:	e7d1      	b.n	8000fe8 <__udivmoddi4+0x260>
 8001044:	46d0      	mov	r8, sl
 8001046:	e77b      	b.n	8000f40 <__udivmoddi4+0x1b8>
 8001048:	3b02      	subs	r3, #2
 800104a:	4461      	add	r1, ip
 800104c:	e732      	b.n	8000eb4 <__udivmoddi4+0x12c>
 800104e:	4630      	mov	r0, r6
 8001050:	e709      	b.n	8000e66 <__udivmoddi4+0xde>
 8001052:	4464      	add	r4, ip
 8001054:	3802      	subs	r0, #2
 8001056:	e742      	b.n	8000ede <__udivmoddi4+0x156>

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_ZN10controllib11generic_pidC1Eddddd>:
#include "generic_pid.h"
#include <stdint.h>

namespace controllib{

       generic_pid::generic_pid(double _kp, double _ki, double _kd, double _bias,double _T):kp(_kp),ki(_ki),kd(_kd),bias(_bias),T(_T){
 800105c:	b480      	push	{r7}
 800105e:	b08d      	sub	sp, #52	; 0x34
 8001060:	af00      	add	r7, sp, #0
 8001062:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001064:	ed87 0b08 	vstr	d0, [r7, #32]
 8001068:	ed87 1b06 	vstr	d1, [r7, #24]
 800106c:	ed87 2b04 	vstr	d2, [r7, #16]
 8001070:	ed87 3b02 	vstr	d3, [r7, #8]
 8001074:	ed87 4b00 	vstr	d4, [r7]
 8001078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800107a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800107e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001088:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800108c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001092:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800109c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80010a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
            
        }
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	4618      	mov	r0, r3
 80010ae:	3734      	adds	r7, #52	; 0x34
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN10controllib11generic_pid6set_kiEd>:
        void generic_pid::set_kp(double _kp){
            kp=_kp;
        }
        void generic_pid::set_ki(double _ki){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0b00 	vstr	d0, [r7]
            ki=_ki;
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
        }
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZN10controllib11generic_pid6set_kdEd>:
        void generic_pid::set_kd(double _kd){
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	ed87 0b00 	vstr	d0, [r7]
            kd=_kd;
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        }
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZN10controllib11generic_pid8set_biasEd>:
        void generic_pid::set_bias(double _bias){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	ed87 0b00 	vstr	d0, [r7]
            bias=_bias;
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800110e:	e9c1 2308 	strd	r2, r3, [r1, #32]
        }
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_ZN10controllib11generic_pid15update_setpointEd>:
        void generic_pid::update_setpoint(double _setpoint){
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	ed87 0b00 	vstr	d0, [r7]
            setpoint=_setpoint;
 800112a:	68f9      	ldr	r1, [r7, #12]
 800112c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001130:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        }
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN10controllib11generic_pid16calculate_outputEd>:
        double generic_pid::calculate_output(double _input){
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	ed87 0b00 	vstr	d0, [r7]
            auto e = setpoint - _input;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001156:	f7ff f8c9 	bl	80002ec <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            auto output = kp * e + ki * e * T + (kd * e) / T;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800116c:	f7ff fa76 	bl	800065c <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4614      	mov	r4, r2
 8001176:	461d      	mov	r5, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800117e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001182:	f7ff fa6b 	bl	800065c <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001194:	f7ff fa62 	bl	800065c <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff f8a6 	bl	80002f0 <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	461d      	mov	r5, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80011b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011b6:	f7ff fa51 	bl	800065c <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011c8:	f7ff fb72 	bl	80008b0 <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f88c 	bl	80002f0 <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
            return output;
 80011e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011e4:	ec43 2b17 	vmov	d7, r2, r3
        }
 80011e8:	eeb0 0a47 	vmov.f32	s0, s14
 80011ec:	eef0 0a67 	vmov.f32	s1, s15
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bdb0      	pop	{r4, r5, r7, pc}

080011f6 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8001200:	ed97 0a01 	vldr	s0, [r7, #4]
 8001204:	f008 fe48 	bl	8009e98 <asinf>
 8001208:	eef0 7a40 	vmov.f32	s15, s0
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>:
ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w, int addr) {
	_wire = w;
	i2cAddress = addr;
}

ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w) {
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
	_wire = w;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	601a      	str	r2, [r3, #0]
	i2cAddress = 210; //0x68;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	22d2      	movs	r2, #210	; 0xd2
 800122a:	605a      	str	r2, [r3, #4]
}
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_ZN11ICM20948_WE4initEv>:

/************ Basic Settings ************/

bool ICM20948_WE::init() {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	currentBank = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	721a      	strb	r2, [r3, #8]
	if (!reset_ICM20948()) {
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb93 	bl	8001974 <_ZN11ICM20948_WE14reset_ICM20948Ev>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <_ZN11ICM20948_WE4initEv+0x28>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e03a      	b.n	80012d8 <_ZN11ICM20948_WE4initEv+0x9e>
	}

	accOffsetVal.x = 0.0;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
	accCorrFactor.x = 1.0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = 1.0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = 1.0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
	accRangeFactor = 1.0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gyrOffsetVal.x = 0.0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
	gyrOffsetVal.y = 0.0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	63da      	str	r2, [r3, #60]	; 0x3c
	gyrOffsetVal.z = 0.0;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
	gyrRangeFactor = 1.0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	fifoType = ICM20948_FIFO_ACC;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2210      	movs	r2, #16
 80012be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	sleep(false);
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9e5 	bl	8001694 <_ZN11ICM20948_WE5sleepEb>
	writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR 
 80012ca:	2301      	movs	r3, #1
 80012cc:	2209      	movs	r2, #9
 80012ce:	2102      	movs	r1, #2
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 faa8 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>

	return true;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN11ICM20948_WE9enableAccEb>:

uint8_t ICM20948_WE::whoAmI() {
	return readRegister8(0, ICM20948_WHO_AM_I);
}

void ICM20948_WE::enableAcc(bool enAcc) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_2);
 80012ec:	2207      	movs	r2, #7
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 faee 	bl	80018d2 <_ZN11ICM20948_WE13readRegister8Ehh>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (enAcc) {
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <_ZN11ICM20948_WE9enableAccEb+0x3a>
		regVal &= ~ICM20948_ACC_EN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800130c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001310:	b2da      	uxtb	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001318:	e008      	b.n	800132c <_ZN11ICM20948_WE9enableAccEb+0x4c>
	} else {
		regVal |= ICM20948_ACC_EN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001320:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, 0x00); //regVal);
 800132c:	2300      	movs	r3, #0
 800132e:	2207      	movs	r2, #7
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa77 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>:

void ICM20948_WE::setAccRange(ICM20948_accRange accRange) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 800134c:	2214      	movs	r2, #20
 800134e:	2102      	movs	r1, #2
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fabe 	bl	80018d2 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001366:	f023 0306 	bic.w	r3, r3, #6
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (accRange << 1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001378:	b25a      	sxtb	r2, r3
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25b      	sxtb	r3, r3
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001392:	2214      	movs	r2, #20
 8001394:	2102      	movs	r1, #2
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fa45 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
	accRangeFactor = 1 << accRange;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2201      	movs	r2, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setAccDLPF(ICM20948_dlpf dlpf) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 80013c0:	2214      	movs	r2, #20
 80013c2:	2102      	movs	r1, #2
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa84 	bl	80018d2 <_ZN11ICM20948_WE13readRegister8Ehh>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d111      	bne.n	80013fe <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013f2:	2214      	movs	r2, #20
 80013f4:	2102      	movs	r1, #2
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fa15 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 80013fc:	e026      	b.n	800144c <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001416:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800141a:	b2da      	uxtb	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001428:	b25a      	sxtb	r2, r3
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b25b      	sxtb	r3, r3
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001442:	2214      	movs	r2, #20
 8001444:	2102      	movs	r1, #2
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f9ed 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>:

void ICM20948_WE::setAccSampleRateDivider(uint16_t accSplRateDiv) {
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
	writeRegister16(2, ICM20948_ACCEL_SMPLRT_DIV_1, accSplRateDiv);
 800145e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001462:	2210      	movs	r2, #16
 8001464:	2102      	movs	r1, #2
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fa04 	bl	8001874 <_ZN11ICM20948_WE15writeRegister16Ehhs>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN11ICM20948_WE10readSensorEv>:
	}
}

/************* x,y,z results *************/

void ICM20948_WE::readSensor() {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	readAllData(buffer);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3309      	adds	r3, #9
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa50 	bl	8001928 <_ZN11ICM20948_WE11readAllDataEPh>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN11ICM20948_WE15getAccRawValuesEv>:

xyzFloat ICM20948_WE::getAccRawValues() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal;
	accRawVal.x = (int16_t) (((buffer[0]) << 8) | buffer[1]) * 1.0;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	7a5b      	ldrb	r3, [r3, #9]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	7a9b      	ldrb	r3, [r3, #10]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f86c 	bl	8000588 <__aeabi_i2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fbc8 	bl	8000c4c <__aeabi_d2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
	accRawVal.y = (int16_t) (((buffer[2]) << 8) | (int16_t) buffer[3]) * 1.0;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	7adb      	ldrb	r3, [r3, #11]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	7b1b      	ldrb	r3, [r3, #12]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_i2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fbb4 	bl	8000c4c <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	61fb      	str	r3, [r7, #28]
	accRawVal.z = (int16_t) (((buffer[4]) << 8) | buffer[5]) * 1.0;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	7b5b      	ldrb	r3, [r3, #13]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	7b9b      	ldrb	r3, [r3, #14]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fba0 	bl	8000c4c <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	623b      	str	r3, [r7, #32]
	return accRawVal;
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	f107 0218 	add.w	r2, r7, #24
 8001518:	ca07      	ldmia	r2, {r0, r1, r2}
 800151a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800151e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	ee06 1a90 	vmov	s13, r1
 8001528:	ee07 2a10 	vmov	s14, r2
 800152c:	ee07 3a90 	vmov	s15, r3
}
 8001530:	eeb0 0a66 	vmov.f32	s0, s13
 8001534:	eef0 0a47 	vmov.f32	s1, s14
 8001538:	eeb0 1a67 	vmov.f32	s2, s15
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>:

xyzFloat ICM20948_WE::getCorrectedAccRawValues() {
 8001542:	b580      	push	{r7, lr}
 8001544:	b08c      	sub	sp, #48	; 0x30
 8001546:	af00      	add	r7, sp, #0
 8001548:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal = getAccRawValues();
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ffa0 	bl	8001490 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8001550:	eef0 6a40 	vmov.f32	s13, s0
 8001554:	eeb0 7a60 	vmov.f32	s14, s1
 8001558:	eef0 7a41 	vmov.f32	s15, s2
 800155c:	edc7 6a06 	vstr	s13, [r7, #24]
 8001560:	ed87 7a07 	vstr	s14, [r7, #28]
 8001564:	edc7 7a08 	vstr	s15, [r7, #32]
	accRawVal = correctAccRawValues(accRawVal);
 8001568:	edd7 6a06 	vldr	s13, [r7, #24]
 800156c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001570:	edd7 7a08 	vldr	s15, [r7, #32]
 8001574:	eeb0 0a66 	vmov.f32	s0, s13
 8001578:	eef0 0a47 	vmov.f32	s1, s14
 800157c:	eeb0 1a67 	vmov.f32	s2, s15
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f000 f8b9 	bl	80016f8 <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>
 8001586:	eef0 6a40 	vmov.f32	s13, s0
 800158a:	eeb0 7a60 	vmov.f32	s14, s1
 800158e:	eef0 7a41 	vmov.f32	s15, s2
 8001592:	edc7 6a06 	vstr	s13, [r7, #24]
 8001596:	ed87 7a07 	vstr	s14, [r7, #28]
 800159a:	edc7 7a08 	vstr	s15, [r7, #32]

	return accRawVal;
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	f107 0218 	add.w	r2, r7, #24
 80015a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	ee06 1a90 	vmov	s13, r1
 80015b6:	ee07 2a10 	vmov	s14, r2
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a66 	vmov.f32	s0, s13
 80015c2:	eef0 0a47 	vmov.f32	s1, s14
 80015c6:	eeb0 1a67 	vmov.f32	s2, s15
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZN11ICM20948_WE10getGValuesEv>:

xyzFloat ICM20948_WE::getGValues() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6178      	str	r0, [r7, #20]
	xyzFloat gVal, accRawVal;
	accRawVal = getCorrectedAccRawValues();
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f7ff ffb2 	bl	8001542 <_ZN11ICM20948_WE24getCorrectedAccRawValuesEv>
 80015de:	eef0 6a40 	vmov.f32	s13, s0
 80015e2:	eeb0 7a60 	vmov.f32	s14, s1
 80015e6:	eef0 7a41 	vmov.f32	s15, s2
 80015ea:	edc7 6a07 	vstr	s13, [r7, #28]
 80015ee:	ed87 7a08 	vstr	s14, [r7, #32]
 80015f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	gVal.x = accRawVal.x * accRangeFactor / 16384.0;
 80015f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001690 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001614:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	gVal.y = accRawVal.y * accRangeFactor / 16384.0;
 8001618:	ed97 7a08 	vldr	s14, [r7, #32]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001690 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001636:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	gVal.z = accRawVal.z * accRangeFactor / 16384.0;
 800163a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001650:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001690 <_ZN11ICM20948_WE10getGValuesEv+0xc0>
 8001654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001658:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	return gVal;
 800165c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001660:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001664:	ca07      	ldmia	r2, {r0, r1, r2}
 8001666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800166a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800166c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800166e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001670:	ee06 1a90 	vmov	s13, r1
 8001674:	ee07 2a10 	vmov	s14, r2
 8001678:	ee07 3a90 	vmov	s15, r3
}
 800167c:	eeb0 0a66 	vmov.f32	s0, s13
 8001680:	eef0 0a47 	vmov.f32	s1, s14
 8001684:	eeb0 1a67 	vmov.f32	s2, s15
 8001688:	3740      	adds	r7, #64	; 0x40
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	46800000 	.word	0x46800000

08001694 <_ZN11ICM20948_WE5sleepEb>:

void ICM20948_WE::setAccAverageInCycleMode(ICM20948_accAvgLowPower avg) {
	writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
}

void ICM20948_WE::sleep(bool sleep) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 80016a0:	2206      	movs	r2, #6
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f914 	bl	80018d2 <_ZN11ICM20948_WE13readRegister8Ehh>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (sleep) {
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <_ZN11ICM20948_WE5sleepEb+0x3a>
		regVal |= ICM20948_SLEEP;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80016cc:	e008      	b.n	80016e0 <_ZN11ICM20948_WE5sleepEb+0x4c>
	} else {
		regVal &= ~ICM20948_SLEEP;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016e6:	2206      	movs	r2, #6
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f89b 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN11ICM20948_WE19correctAccRawValuesE8xyzFloat>:
	regVal |= 0x01;
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
	HAL_Delay(10);
}

xyzFloat ICM20948_WE::correctAccRawValues(xyzFloat accRawVal) {
 80016f8:	b480      	push	{r7}
 80016fa:	b08d      	sub	sp, #52	; 0x34
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	61f8      	str	r0, [r7, #28]
 8001700:	eef0 6a40 	vmov.f32	s13, s0
 8001704:	eeb0 7a60 	vmov.f32	s14, s1
 8001708:	eef0 7a41 	vmov.f32	s15, s2
 800170c:	edc7 6a04 	vstr	s13, [r7, #16]
 8001710:	ed87 7a05 	vstr	s14, [r7, #20]
 8001714:	edc7 7a06 	vstr	s15, [r7, #24]
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 8001718:	ed97 7a04 	vldr	s14, [r7, #16]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	ed93 6a08 	vldr	s12, [r3, #32]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001730:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001734:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.x;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.x = (accRawVal.x - (accOffsetVal.x / accRangeFactor))
 8001742:	edc7 7a04 	vstr	s15, [r7, #16]
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 8001746:	ed97 7a05 	vldr	s14, [r7, #20]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001762:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.y;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800176c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.y = (accRawVal.y - (accOffsetVal.y / accRangeFactor))
 8001770:	edc7 7a05 	vstr	s15, [r7, #20]
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 8001774:	ed97 7a06 	vldr	s14, [r7, #24]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800178c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001790:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ accCorrFactor.z;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	accRawVal.z = (accRawVal.z - (accOffsetVal.z / accRangeFactor))
 800179e:	edc7 7a06 	vstr	s15, [r7, #24]

	return accRawVal;
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	f107 0210 	add.w	r2, r7, #16
 80017aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	ee06 1a90 	vmov	s13, r1
 80017ba:	ee07 2a10 	vmov	s14, r2
 80017be:	ee07 3a90 	vmov	s15, r3
}
 80017c2:	eeb0 0a66 	vmov.f32	s0, s13
 80017c6:	eef0 0a47 	vmov.f32	s1, s14
 80017ca:	eeb0 1a67 	vmov.f32	s2, s15
 80017ce:	3734      	adds	r7, #52	; 0x34
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZN11ICM20948_WE10switchBankEh>:
	gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);

	return gyrRawVal;
}

void ICM20948_WE::switchBank(uint8_t newBank) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
	if (newBank != currentBank) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7a1b      	ldrb	r3, [r3, #8]
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d017      	beq.n	800181e <_ZN11ICM20948_WE10switchBankEh+0x46>
		currentBank = newBank;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	721a      	strb	r2, [r3, #8]

		std::uint8_t pData[2] = { ICM20948_REG_BANK_SEL, currentBank << 4 };
 80017f4:	2300      	movs	r3, #0
 80017f6:	81bb      	strh	r3, [r7, #12]
 80017f8:	237f      	movs	r3, #127	; 0x7f
 80017fa:	733b      	strb	r3, [r7, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	b2db      	uxtb	r3, r3
 8001804:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b299      	uxth	r1, r3
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	230a      	movs	r3, #10
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2302      	movs	r3, #2
 800181a:	f003 f98b 	bl	8004b34 <HAL_I2C_Master_Transmit>
	}
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>:

uint8_t ICM20948_WE::writeRegister8(uint8_t bank, uint8_t reg, uint8_t val) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af02      	add	r7, sp, #8
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	4608      	mov	r0, r1
 8001830:	4611      	mov	r1, r2
 8001832:	461a      	mov	r2, r3
 8001834:	4603      	mov	r3, r0
 8001836:	70fb      	strb	r3, [r7, #3]
 8001838:	460b      	mov	r3, r1
 800183a:	70bb      	strb	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
	switchBank(bank);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffc7 	bl	80017d8 <_ZN11ICM20948_WE10switchBankEh>
	std::uint8_t pData[2] = { reg, val };
 800184a:	78bb      	ldrb	r3, [r7, #2]
 800184c:	733b      	strb	r3, [r7, #12]
 800184e:	787b      	ldrb	r3, [r7, #1]
 8001850:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b299      	uxth	r1, r3
 800185c:	f107 020c 	add.w	r2, r7, #12
 8001860:	230a      	movs	r3, #10
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2302      	movs	r3, #2
 8001866:	f003 f965 	bl	8004b34 <HAL_I2C_Master_Transmit>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN11ICM20948_WE15writeRegister16Ehhs>:

uint8_t ICM20948_WE::writeRegister16(uint8_t bank, uint8_t reg, int16_t val) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4603      	mov	r3, r0
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	460b      	mov	r3, r1
 8001888:	70bb      	strb	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	803b      	strh	r3, [r7, #0]
	switchBank(bank);
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa0 	bl	80017d8 <_ZN11ICM20948_WE10switchBankEh>
	int8_t MSByte = (int8_t) ((val >> 8) & 0xFF);
 8001898:	883b      	ldrh	r3, [r7, #0]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	73fb      	strb	r3, [r7, #15]
	uint8_t LSByte = val & 0xFF;
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	73bb      	strb	r3, [r7, #14]
	std::uint8_t pData[3] = { reg, MSByte, LSByte };
 80018a4:	78bb      	ldrb	r3, [r7, #2]
 80018a6:	723b      	strb	r3, [r7, #8]
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	727b      	strb	r3, [r7, #9]
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 3, 10);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	f107 0208 	add.w	r2, r7, #8
 80018be:	230a      	movs	r3, #10
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2303      	movs	r3, #3
 80018c4:	f003 f936 	bl	8004b34 <HAL_I2C_Master_Transmit>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_ZN11ICM20948_WE13readRegister8Ehh>:

uint8_t ICM20948_WE::readRegister8(uint8_t bank, uint8_t reg) {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af02      	add	r7, sp, #8
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
 80018de:	4613      	mov	r3, r2
 80018e0:	70bb      	strb	r3, [r7, #2]
	switchBank(bank);
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff76 	bl	80017d8 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t regValue = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &reg, 2, 10);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b299      	uxth	r1, r3
 80018fa:	1cba      	adds	r2, r7, #2
 80018fc:	230a      	movs	r3, #10
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	f003 f917 	bl	8004b34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_wire, i2cAddress, &regValue, 1, 10);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	b299      	uxth	r1, r3
 8001910:	f107 020f 	add.w	r2, r7, #15
 8001914:	230a      	movs	r3, #10
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	f003 f9ff 	bl	8004d1c <HAL_I2C_Master_Receive>
	return regValue;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_ZN11ICM20948_WE11readAllDataEPh>:
	MSByte = reg16Val[1];
	MSByte = reg16Val[0];
	return (MSByte << 8) + LSByte;
}

void ICM20948_WE::readAllData(uint8_t *data) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af02      	add	r7, sp, #8
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	switchBank(0);
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff4f 	bl	80017d8 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t x_acc_h = 0x2D;
 800193a:	232d      	movs	r3, #45	; 0x2d
 800193c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &x_acc_h, 1, 10);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b299      	uxth	r1, r3
 8001948:	f107 020f 	add.w	r2, r7, #15
 800194c:	230a      	movs	r3, #10
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	f003 f8ef 	bl	8004b34 <HAL_I2C_Master_Transmit>
//    HAL_I2C_Master_Transmit(_wire, i2cAddress, ICM20948_ACCEL_OUT, 1, 10);
	HAL_I2C_Master_Receive(_wire, i2cAddress, data, 20, 10);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	b299      	uxth	r1, r3
 8001960:	230a      	movs	r3, #10
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2314      	movs	r3, #20
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	f003 f9d8 	bl	8004d1c <HAL_I2C_Master_Receive>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN11ICM20948_WE14reset_ICM20948Ev>:
	regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
	enableMagDataRead(AK09916_HXL, 0x08);
	return regValue;
}

uint8_t ICM20948_WE::reset_ICM20948() {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t ack = writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	2206      	movs	r2, #6
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff4f 	bl	8001826 <_ZN11ICM20948_WE14writeRegister8Ehhh>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);  // wait for registers to reset
 800198c:	200a      	movs	r0, #10
 800198e:	f002 fa81 	bl	8003e94 <HAL_Delay>
	return (ack == 0);
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f008 fa18 	bl	8009dea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4904      	ldr	r1, [pc, #16]	; (80019d4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80019c6:	f000 fd08 	bl	80023da <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80019ca:	4603      	mov	r3, r0
					__idx, __base); }
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800ed70 	.word	0x0800ed70
 80019d8:	0800c829 	.word	0x0800c829

080019dc <_Z13set_dutycycleiPPc>:
static void MX_I2C3_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

uint8_t set_dutycycle(int argc, char *argv[]){
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b08d      	sub	sp, #52	; 0x34
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	uint64_t pulse_width = std::stoi(argv[1]);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3304      	adds	r3, #4
 80019ea:	681e      	ldr	r6, [r3, #0]
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 f9a3 	bl	8009d3c <_ZNSaIcEC1Ev>
 80019f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4631      	mov	r1, r6
 8001a00:	4618      	mov	r0, r3
 8001a02:	f008 fa19 	bl	8009e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	220a      	movs	r2, #10
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffca 	bl	80019a8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001a14:	4603      	mov	r3, r0
 8001a16:	17da      	asrs	r2, r3, #31
 8001a18:	461c      	mov	r4, r3
 8001a1a:	4615      	mov	r5, r2
 8001a1c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4618      	mov	r0, r3
 8001a26:	f008 f9da 	bl	8009dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f008 f985 	bl	8009d3e <_ZNSaIcED1Ev>
	if(pulse_width <= 1000)
 8001a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a38:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001a3c:	428a      	cmp	r2, r1
 8001a3e:	f173 0300 	sbcs.w	r3, r3, #0
 8001a42:	d205      	bcs.n	8001a50 <_Z13set_dutycycleiPPc+0x74>
	{
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse_width);
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <_Z13set_dutycycleiPPc+0x80>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
			return EXIT_SUCCESS;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <_Z13set_dutycycleiPPc+0x76>
	}else{
		return EXIT_FAILURE;
 8001a50:	2301      	movs	r3, #1
	}
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3734      	adds	r7, #52	; 0x34
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200002cc 	.word	0x200002cc

08001a60 <_Z15set_pid1_paramsiPPc>:

uint8_t set_pid1_params(int argc, char *argv[]){
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b08f      	sub	sp, #60	; 0x3c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	char option = argv[1][0];
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	double param = std::stoi(argv[2]);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3308      	adds	r3, #8
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 f95b 	bl	8009d3c <_ZNSaIcEC1Ev>
 8001a86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	4621      	mov	r1, r4
 8001a90:	4618      	mov	r0, r3
 8001a92:	f008 f9d1 	bl	8009e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff82 	bl	80019a8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_i2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 f990 	bl	8009dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f008 f93b 	bl	8009d3e <_ZNSaIcED1Ev>

	switch(option)
 8001ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001acc:	3b62      	subs	r3, #98	; 0x62
 8001ace:	2b16      	cmp	r3, #22
 8001ad0:	d84e      	bhi.n	8001b70 <_Z15set_pid1_paramsiPPc+0x110>
 8001ad2:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <_Z15set_pid1_paramsiPPc+0x78>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b59 	.word	0x08001b59
 8001adc:	08001b71 	.word	0x08001b71
 8001ae0:	08001b4d 	.word	0x08001b4d
 8001ae4:	08001b71 	.word	0x08001b71
 8001ae8:	08001b71 	.word	0x08001b71
 8001aec:	08001b71 	.word	0x08001b71
 8001af0:	08001b71 	.word	0x08001b71
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001b71 	.word	0x08001b71
 8001afc:	08001b71 	.word	0x08001b71
 8001b00:	08001b71 	.word	0x08001b71
 8001b04:	08001b71 	.word	0x08001b71
 8001b08:	08001b71 	.word	0x08001b71
 8001b0c:	08001b71 	.word	0x08001b71
 8001b10:	08001b35 	.word	0x08001b35
 8001b14:	08001b71 	.word	0x08001b71
 8001b18:	08001b71 	.word	0x08001b71
 8001b1c:	08001b71 	.word	0x08001b71
 8001b20:	08001b71 	.word	0x08001b71
 8001b24:	08001b71 	.word	0x08001b71
 8001b28:	08001b71 	.word	0x08001b71
 8001b2c:	08001b71 	.word	0x08001b71
 8001b30:	08001b65 	.word	0x08001b65
	{
	case 'p':tilt_angle_controller.set_kd(param);break;
 8001b34:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <_Z15set_pid1_paramsiPPc+0x120>)
 8001b3a:	f7ff face 	bl	80010da <_ZN10controllib11generic_pid6set_kdEd>
 8001b3e:	e019      	b.n	8001b74 <_Z15set_pid1_paramsiPPc+0x114>
	case 'i':tilt_angle_controller.set_ki(param);break;
 8001b40:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <_Z15set_pid1_paramsiPPc+0x120>)
 8001b46:	f7ff fab7 	bl	80010b8 <_ZN10controllib11generic_pid6set_kiEd>
 8001b4a:	e013      	b.n	8001b74 <_Z15set_pid1_paramsiPPc+0x114>
	case 'd':tilt_angle_controller.set_kd(param);break;
 8001b4c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <_Z15set_pid1_paramsiPPc+0x120>)
 8001b52:	f7ff fac2 	bl	80010da <_ZN10controllib11generic_pid6set_kdEd>
 8001b56:	e00d      	b.n	8001b74 <_Z15set_pid1_paramsiPPc+0x114>
	case 'b':tilt_angle_controller.set_bias(param);break;
 8001b58:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <_Z15set_pid1_paramsiPPc+0x120>)
 8001b5e:	f7ff facd 	bl	80010fc <_ZN10controllib11generic_pid8set_biasEd>
 8001b62:	e007      	b.n	8001b74 <_Z15set_pid1_paramsiPPc+0x114>
	case 'x':tilt_angle_controller.update_setpoint(param);break;
 8001b64:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <_Z15set_pid1_paramsiPPc+0x120>)
 8001b6a:	f7ff fad8 	bl	800111e <_ZN10controllib11generic_pid15update_setpointEd>
 8001b6e:	e001      	b.n	8001b74 <_Z15set_pid1_paramsiPPc+0x114>
	default: return EXIT_FAILURE;break;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <_Z15set_pid1_paramsiPPc+0x116>
	}
		return EXIT_FAILURE;
 8001b74:	2301      	movs	r3, #1
	}
 8001b76:	4618      	mov	r0, r3
 8001b78:	373c      	adds	r7, #60	; 0x3c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200003a8 	.word	0x200003a8

08001b84 <_Z12tilt_requestiPPc>:


uint8_t tilt_request(int argc, char *argv[]){
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
// IO Access needs to be done via direct Register Access! NO HAL!
//	for(int i=0;i<10;i++){
//	GPIOA->ODR^=1<<5;  // blink the led//	  HAL_Delay(500);
//	HAL_Delay(100);
//}
	int t = std::stoi(argv[2]);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3308      	adds	r3, #8
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f008 f8cf 	bl	8009d3c <_ZNSaIcEC1Ev>
 8001b9e:	f107 0220 	add.w	r2, r7, #32
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f008 f945 	bl	8009e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	220a      	movs	r2, #10
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fef6 	bl	80019a8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 f90b 	bl	8009dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f008 f8b6 	bl	8009d3e <_ZNSaIcED1Ev>
	if(strcmp(argv[1],"down") == 0){
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	491f      	ldr	r1, [pc, #124]	; (8001c58 <_Z12tilt_requestiPPc+0xd4>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb70 	bl	80002c0 <strcmp>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <_Z12tilt_requestiPPc+0x7a>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot CC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bec:	481b      	ldr	r0, [pc, #108]	; (8001c5c <_Z12tilt_requestiPPc+0xd8>)
 8001bee:	f002 fed7 	bl	80049a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	481a      	ldr	r0, [pc, #104]	; (8001c60 <_Z12tilt_requestiPPc+0xdc>)
 8001bf8:	f002 fed2 	bl	80049a0 <HAL_GPIO_WritePin>
 8001bfc:	e017      	b.n	8001c2e <_Z12tilt_requestiPPc+0xaa>
	}
	else if(strcmp(argv[1],"up") == 0){
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4917      	ldr	r1, [pc, #92]	; (8001c64 <_Z12tilt_requestiPPc+0xe0>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb5a 	bl	80002c0 <strcmp>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <_Z12tilt_requestiPPc+0xa6>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot AC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <_Z12tilt_requestiPPc+0xd8>)
 8001c1a:	f002 fec1 	bl	80049a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2104      	movs	r1, #4
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <_Z12tilt_requestiPPc+0xdc>)
 8001c24:	f002 febc 	bl	80049a0 <HAL_GPIO_WritePin>
 8001c28:	e001      	b.n	8001c2e <_Z12tilt_requestiPPc+0xaa>
	}else{
		return EXIT_FAILURE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <_Z12tilt_requestiPPc+0xca>
	}

	// Wont work, bad hal stuff!
  //HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
  HAL_Delay(t);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 f92f 	bl	8003e94 <HAL_Delay>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <_Z12tilt_requestiPPc+0xd8>)
 8001c3e:	f002 feaf 	bl	80049a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2104      	movs	r1, #4
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <_Z12tilt_requestiPPc+0xdc>)
 8001c48:	f002 feaa 	bl	80049a0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
  return EXIT_SUCCESS;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	372c      	adds	r7, #44	; 0x2c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0800ed78 	.word	0x0800ed78
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	48000c00 	.word	0x48000c00
 8001c64:	0800ed80 	.word	0x0800ed80

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b0a4      	sub	sp, #144	; 0x90
 8001c6c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6e:	f002 f8a1 	bl	8003db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c72:	f000 f8ed 	bl	8001e50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c76:	f000 facd 	bl	8002214 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001c7a:	f000 f93f 	bl	8001efc <_ZL14MX_FDCAN1_Initv>
  MX_I2C3_Init();
 8001c7e:	f000 f989 	bl	8001f94 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001c82:	f000 fa67 	bl	8002154 <_ZL19MX_USART2_UART_Initv>
  MX_TIM5_Init();
 8001c86:	f000 f9d3 	bl	8002030 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	485e      	ldr	r0, [pc, #376]	; (8001e08 <main+0x1a0>)
 8001c8e:	f004 fd39 	bl	8006704 <HAL_TIM_PWM_Start>
  CLI_INIT(&huart2);
 8001c92:	485e      	ldr	r0, [pc, #376]	; (8001e0c <main+0x1a4>)
 8001c94:	f000 ff1e 	bl	8002ad4 <cli_init>
   CLI_ADD_CMD("tilt", "tilt [up] / [down] [ms-time=100]", tilt_request);
 8001c98:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <main+0x1a8>)
 8001c9a:	495e      	ldr	r1, [pc, #376]	; (8001e14 <main+0x1ac>)
 8001c9c:	485e      	ldr	r0, [pc, #376]	; (8001e18 <main+0x1b0>)
 8001c9e:	f001 fc5f 	bl	8003560 <cli_add_command>
   CLI_ADD_CMD("set_pwm", "lambda[0...1000]", set_dutycycle);
 8001ca2:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <main+0x1b4>)
 8001ca4:	495e      	ldr	r1, [pc, #376]	; (8001e20 <main+0x1b8>)
 8001ca6:	485f      	ldr	r0, [pc, #380]	; (8001e24 <main+0x1bc>)
 8001ca8:	f001 fc5a 	bl	8003560 <cli_add_command>
   CLI_ADD_CMD("l1_param", "inner PID-Controller params:[p,i,d,b,x]",set_pid1_params);
 8001cac:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <main+0x1c0>)
 8001cae:	495f      	ldr	r1, [pc, #380]	; (8001e2c <main+0x1c4>)
 8001cb0:	485f      	ldr	r0, [pc, #380]	; (8001e30 <main+0x1c8>)
 8001cb2:	f001 fc55 	bl	8003560 <cli_add_command>
   CLI_RUN();
 8001cb6:	f001 fa6f 	bl	8003198 <cli_run>
   ICM20948_WE myIMU = ICM20948_WE(&hi2c3);
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	495d      	ldr	r1, [pc, #372]	; (8001e34 <main+0x1cc>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff faa8 	bl	8001216 <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>


  	if(!myIMU.init()){
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fab5 	bl	800123a <_ZN11ICM20948_WE4initEv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <main+0x7c>
  	  printf("ICM20948 does not respond\r\n");
 8001cdc:	4856      	ldr	r0, [pc, #344]	; (8001e38 <main+0x1d0>)
 8001cde:	f009 fdbb 	bl	800b858 <puts>
 8001ce2:	e002      	b.n	8001cea <main+0x82>
  }
  else{
    printf("ICM20948 is connected\r\n");
 8001ce4:	4855      	ldr	r0, [pc, #340]	; (8001e3c <main+0x1d4>)
 8001ce6:	f009 fdb7 	bl	800b858 <puts>
  }


  	printf("Position your ICM20948 flat and don't move it - calibrating...\r\n");
 8001cea:	4855      	ldr	r0, [pc, #340]	; (8001e40 <main+0x1d8>)
 8001cec:	f009 fdb4 	bl	800b858 <puts>
  HAL_Delay(1000);
 8001cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf4:	f002 f8ce 	bl	8003e94 <HAL_Delay>
  myIMU.enableAcc(true);
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff faee 	bl	80012e0 <_ZN11ICM20948_WE9enableAccEb>

  myIMU.setAccRange(ICM20948_ACC_RANGE_2G);
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fb18 	bl	8001340 <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
  myIMU.setAccSampleRateDivider(10);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	210a      	movs	r1, #10
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fb9b 	bl	8001452 <_ZN11ICM20948_WE23setAccSampleRateDividerEt>
  myIMU.setAccDLPF(ICM20948_DLPF_6);
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	2106      	movs	r1, #6
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fb46 	bl	80013b4 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
//  myIMU.setAccOffsets(-16330.0, 16450.0, -16600.0, 16180.0, -16640.0, 16560.0);
//  myIMU.autoOffsets();

  printf("Done!\r\n");
 8001d28:	4846      	ldr	r0, [pc, #280]	; (8001e44 <main+0x1dc>)
 8001d2a:	f009 fd95 	bl	800b858 <puts>
  HAL_Delay(1000);
 8001d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d32:	f002 f8af 	bl	8003e94 <HAL_Delay>

  // Aktivierte Achsen lesen:
  uint8_t active_axes;
  uint8_t disable_acc_reg = 0x7;
 8001d36:	2307      	movs	r3, #7
 8001d38:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(&hi2c3, 210, &disable_acc_reg, 1, 10);
 8001d3a:	1dba      	adds	r2, r7, #6
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	21d2      	movs	r1, #210	; 0xd2
 8001d44:	483b      	ldr	r0, [pc, #236]	; (8001e34 <main+0x1cc>)
 8001d46:	f002 fef5 	bl	8004b34 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c3, 210, &active_axes, 1, 10);
 8001d4a:	1dfa      	adds	r2, r7, #7
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	21d2      	movs	r1, #210	; 0xd2
 8001d54:	4837      	ldr	r0, [pc, #220]	; (8001e34 <main+0x1cc>)
 8001d56:	f002 ffe1 	bl	8004d1c <HAL_I2C_Master_Receive>
  printf("Active axes: 0x%x\r\n",active_axes);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	483a      	ldr	r0, [pc, #232]	; (8001e48 <main+0x1e0>)
 8001d60:	f009 fcde 	bl	800b720 <iprintf>
  /* USER CODE END 2 */
  // Alle sensoren testen:
Init::sensor_checkup(myIMU);
 8001d64:	466d      	mov	r5, sp
 8001d66:	f107 0418 	add.w	r4, r7, #24
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	f001 ff52 	bl	8003c2c <_ZN4Init14sensor_checkupE11ICM20948_WE>
Init::sensor_checkup(myIMU);
 8001d88:	466d      	mov	r5, sp
 8001d8a:	f107 0418 	add.w	r4, r7, #24
 8001d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da8:	f001 ff40 	bl	8003c2c <_ZN4Init14sensor_checkupE11ICM20948_WE>
tilt_angle_controller.update_setpoint(0);
 8001dac:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001e00 <main+0x198>
 8001db0:	4826      	ldr	r0, [pc, #152]	; (8001e4c <main+0x1e4>)
 8001db2:	f7ff f9b4 	bl	800111e <_ZN10controllib11generic_pid15update_setpointEd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while(1)
	  {
  	  CLI_RUN();
 8001db6:	f001 f9ef 	bl	8003198 <cli_run>
  	  double y = tilt_angle_controller.calculate_output(Init::read_tilt_angle(myIMU));
 8001dba:	466d      	mov	r5, sp
 8001dbc:	f107 0418 	add.w	r4, r7, #24
 8001dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dda:	f001 fed1 	bl	8003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8001dde:	eeb0 7a40 	vmov.f32	s14, s0
 8001de2:	eef0 7a60 	vmov.f32	s15, s1
 8001de6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dea:	eef0 0a67 	vmov.f32	s1, s15
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <main+0x1e4>)
 8001df0:	f7ff f9a6 	bl	8001140 <_ZN10controllib11generic_pid16calculate_outputEd>
 8001df4:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001df8:	e7dd      	b.n	8001db6 <main+0x14e>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
	...
 8001e08:	200002cc 	.word	0x200002cc
 8001e0c:	20000318 	.word	0x20000318
 8001e10:	08001b85 	.word	0x08001b85
 8001e14:	0800ed84 	.word	0x0800ed84
 8001e18:	0800eda8 	.word	0x0800eda8
 8001e1c:	080019dd 	.word	0x080019dd
 8001e20:	0800edb0 	.word	0x0800edb0
 8001e24:	0800edc4 	.word	0x0800edc4
 8001e28:	08001a61 	.word	0x08001a61
 8001e2c:	0800edcc 	.word	0x0800edcc
 8001e30:	0800edf4 	.word	0x0800edf4
 8001e34:	20000280 	.word	0x20000280
 8001e38:	0800ee00 	.word	0x0800ee00
 8001e3c:	0800ee1c 	.word	0x0800ee1c
 8001e40:	0800ee34 	.word	0x0800ee34
 8001e44:	0800ee74 	.word	0x0800ee74
 8001e48:	0800ee7c 	.word	0x0800ee7c
 8001e4c:	200003a8 	.word	0x200003a8

08001e50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	2238      	movs	r2, #56	; 0x38
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f008 fba2 	bl	800a5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f003 fb58 	bl	8005528 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e86:	2302      	movs	r3, #2
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e92:	2355      	movs	r3, #85	; 0x55
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea2:	f107 0318 	add.w	r3, r7, #24
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fbf2 	bl	8005690 <HAL_RCC_OscConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001ebc:	f000 fa4e 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fef1 	bl	8005cc0 <HAL_RCC_ClockConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001eee:	f000 fa35 	bl	800235c <Error_Handler>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3750      	adds	r7, #80	; 0x50
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001f04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001f6e:	f002 f9cf 	bl	8004310 <HAL_FDCAN_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001f82:	f000 f9eb 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000021c 	.word	0x2000021c
 8001f90:	40006400 	.word	0x40006400

08001f94 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <_ZL12MX_I2C3_Initv+0x94>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <_ZL12MX_I2C3_Initv+0x98>)
 8001fa2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fce:	4815      	ldr	r0, [pc, #84]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fd0:	f002 fd21 	bl	8004a16 <HAL_I2C_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001fe4:	f000 f9ba 	bl	800235c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fe8:	2100      	movs	r1, #0
 8001fea:	480e      	ldr	r0, [pc, #56]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8001fec:	f003 fa04 	bl	80053f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002000:	f000 f9ac 	bl	800235c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002004:	2100      	movs	r1, #0
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <_ZL12MX_I2C3_Initv+0x90>)
 8002008:	f003 fa41 	bl	800548e <HAL_I2CEx_ConfigDigitalFilter>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 800201c:	f000 f99e 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000280 	.word	0x20000280
 8002028:	40007800 	.word	0x40007800
 800202c:	30a0a7fb 	.word	0x30a0a7fb

08002030 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	615a      	str	r2, [r3, #20]
 8002060:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002062:	4b3a      	ldr	r3, [pc, #232]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 8002064:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <_ZL12MX_TIM5_Initv+0x120>)
 8002066:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 800206a:	2201      	movs	r2, #1
 800206c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 8002076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002088:	4830      	ldr	r0, [pc, #192]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 800208a:	f004 fa83 	bl	8006594 <HAL_TIM_Base_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800209e:	f000 f95d 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4827      	ldr	r0, [pc, #156]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 80020b0:	f004 fd4e 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 80020c4:	f000 f94a 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020c8:	4820      	ldr	r0, [pc, #128]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 80020ca:	f004 faba 	bl	8006642 <HAL_TIM_PWM_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 80020de:	f000 f93d 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4816      	ldr	r0, [pc, #88]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 80020f2:	f005 fad7 	bl	80076a4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002106:	f000 f929 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800210e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	2204      	movs	r2, #4
 8002120:	4619      	mov	r1, r3
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 8002124:	f004 fc00 	bl	8006928 <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <_ZL12MX_TIM5_Initv+0x10c>
  {
    Error_Handler();
 8002138:	f000 f910 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <_ZL12MX_TIM5_Initv+0x11c>)
 800213e:	f000 fac3 	bl	80026c8 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3738      	adds	r7, #56	; 0x38
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200002cc 	.word	0x200002cc
 8002150:	40000c00 	.word	0x40000c00

08002154 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800215c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 800219e:	f005 fb17 	bl	80077d0 <HAL_UART_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80021b2:	f000 f8d3 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b6:	2100      	movs	r1, #0
 80021b8:	4814      	ldr	r0, [pc, #80]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021ba:	f007 fcf4 	bl	8009ba6 <HAL_UARTEx_SetTxFifoThreshold>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80021ce:	f000 f8c5 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d2:	2100      	movs	r1, #0
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021d6:	f007 fd24 	bl	8009c22 <HAL_UARTEx_SetRxFifoThreshold>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80021ea:	f000 f8b7 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021f0:	f007 fca0 	bl	8009b34 <HAL_UARTEx_DisableFifoMode>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8002204:	f000 f8aa 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000318 	.word	0x20000318
 8002210:	40004400 	.word	0x40004400

08002214 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a42      	ldr	r2, [pc, #264]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a36      	ldr	r2, [pc, #216]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a30      	ldr	r2, [pc, #192]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <_ZL12MX_GPIO_Initv+0x13c>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2120      	movs	r1, #32
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022aa:	f002 fb79 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b4:	4827      	ldr	r0, [pc, #156]	; (8002354 <_ZL12MX_GPIO_Initv+0x140>)
 80022b6:	f002 fb73 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2104      	movs	r1, #4
 80022be:	4826      	ldr	r0, [pc, #152]	; (8002358 <_ZL12MX_GPIO_Initv+0x144>)
 80022c0:	f002 fb6e 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	481e      	ldr	r0, [pc, #120]	; (8002354 <_ZL12MX_GPIO_Initv+0x140>)
 80022dc:	f002 f9de 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022e0:	2320      	movs	r3, #32
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f002 f9cf 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 80022fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	2301      	movs	r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	480f      	ldr	r0, [pc, #60]	; (8002354 <_ZL12MX_GPIO_Initv+0x140>)
 8002318:	f002 f9c0 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800231c:	2304      	movs	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4809      	ldr	r0, [pc, #36]	; (8002358 <_ZL12MX_GPIO_Initv+0x144>)
 8002334:	f002 f9b2 	bl	800469c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2028      	movs	r0, #40	; 0x28
 800233e:	f001 fee0 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002342:	2028      	movs	r0, #40	; 0x28
 8002344:	f001 fef7 	bl	8004136 <HAL_NVIC_EnableIRQ>

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	48000800 	.word	0x48000800
 8002358:	48000c00 	.word	0x48000c00

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>

08002366 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	f007 fec9 	bl	800a104 <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f007 fec3 	bl	800a104 <__errno>
 800237e:	4603      	mov	r3, r0
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	f007 feb5 	bl	800a104 <__errno>
 800239a:	4603      	mov	r3, r0
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80023ac:	f007 feaa 	bl	800a104 <__errno>
 80023b0:	4602      	mov	r2, r0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 80023cc:	2300      	movs	r3, #0
	  }
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 80023da:	b590      	push	{r4, r7, lr}
 80023dc:	b08b      	sub	sp, #44	; 0x2c
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ffba 	bl	8002366 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80023f2:	f107 0118 	add.w	r1, r7, #24
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d102      	bne.n	800240e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8002408:	68b8      	ldr	r0, [r7, #8]
 800240a:	f007 fc9f 	bl	8009d4c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800240e:	f007 fe79 	bl	800a104 <__errno>
 8002412:	4603      	mov	r3, r0
 8002414:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002416:	2b22      	cmp	r3, #34	; 0x22
 8002418:	d006      	beq.n	8002428 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800241a:	4621      	mov	r1, r4
 800241c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800241e:	f7ff ffd0 	bl	80023c2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 800242c:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002432:	68b8      	ldr	r0, [r7, #8]
 8002434:	f007 fc90 	bl	8009d58 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	623b      	str	r3, [r7, #32]

      if (__idx)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]

      return __ret;
 800244e:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff9a 	bl	800238e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800245a:	4623      	mov	r3, r4
    }
 800245c:	4618      	mov	r0, r3
 800245e:	372c      	adds	r7, #44	; 0x2c
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}
 8002464:	0000      	movs	r0, r0
	...

08002468 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d111      	bne.n	800249c <_Z41__static_initialization_and_destruction_0ii+0x34>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247e:	4293      	cmp	r3, r2
 8002480:	d10c      	bne.n	800249c <_Z41__static_initialization_and_destruction_0ii+0x34>
controllib::generic_pid tilt_angle_controller(1,0,0,0,10); // Kp = 1 ,Ts= 10ms
 8002482:	ed9f 4b09 	vldr	d4, [pc, #36]	; 80024a8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002486:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 80024b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800248a:	ed9f 2b09 	vldr	d2, [pc, #36]	; 80024b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800248e:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80024b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8002492:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80024b8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002498:	f7fe fde0 	bl	800105c <_ZN10controllib11generic_pidC1Eddddd>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f3af 8000 	nop.w
 80024a8:	00000000 	.word	0x00000000
 80024ac:	40240000 	.word	0x40240000
	...
 80024bc:	3ff00000 	.word	0x3ff00000
 80024c0:	200003a8 	.word	0x200003a8

080024c4 <_GLOBAL__sub_I_hfdcan1>:
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff ffcb 	bl	8002468 <_Z41__static_initialization_and_destruction_0ii>
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_MspInit+0x44>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_MspInit+0x44>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6613      	str	r3, [r2, #96]	; 0x60
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_MspInit+0x44>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_MspInit+0x44>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_MspInit+0x44>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_MspInit+0x44>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800250a:	f003 f8b1 	bl	8005670 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b09e      	sub	sp, #120	; 0x78
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	2254      	movs	r2, #84	; 0x54
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f008 f833 	bl	800a5a8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_FDCAN_MspInit+0xac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d138      	bne.n	80025be <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002550:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fdcb 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002568:	f7ff fef8 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 8002572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002576:	6593      	str	r3, [r2, #88]	; 0x58
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_FDCAN_MspInit+0xb0>)
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800259c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025ae:	2309      	movs	r3, #9
 80025b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_FDCAN_MspInit+0xb4>)
 80025ba:	f002 f86f 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3778      	adds	r7, #120	; 0x78
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40006400 	.word	0x40006400
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000400 	.word	0x48000400

080025d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b09e      	sub	sp, #120	; 0x78
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	2254      	movs	r2, #84	; 0x54
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f007 ffd7 	bl	800a5a8 <memset>
  if(hi2c->Instance==I2C3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_I2C_MspInit+0xa8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d137      	bne.n	8002674 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002608:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fd70 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800261e:	f7ff fe9d 	bl	800235c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_I2C_MspInit+0xac>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_I2C_MspInit+0xac>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_I2C_MspInit+0xac>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800263a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800264c:	2308      	movs	r3, #8
 800264e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002650:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002654:	4619      	mov	r1, r3
 8002656:	480b      	ldr	r0, [pc, #44]	; (8002684 <HAL_I2C_MspInit+0xb0>)
 8002658:	f002 f820 	bl	800469c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_I2C_MspInit+0xac>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_I2C_MspInit+0xac>)
 8002662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_I2C_MspInit+0xac>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3778      	adds	r7, #120	; 0x78
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40007800 	.word	0x40007800
 8002680:	40021000 	.word	0x40021000
 8002684:	48000800 	.word	0x48000800

08002688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_TIM_Base_MspInit+0x38>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10b      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_TIM_Base_MspInit+0x3c>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_TIM_Base_MspInit+0x3c>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_TIM_Base_MspInit+0x3c>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_TIM_MspPostInit+0x64>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d11c      	bne.n	8002724 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_TIM_MspPostInit+0x68>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_TIM_MspPostInit+0x68>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_TIM_MspPostInit+0x68>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002714:	2301      	movs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4619      	mov	r1, r3
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_TIM_MspPostInit+0x6c>)
 8002720:	f001 ffbc 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40000c00 	.word	0x40000c00
 8002730:	40021000 	.word	0x40021000
 8002734:	48000800 	.word	0x48000800

08002738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b09e      	sub	sp, #120	; 0x78
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	2254      	movs	r2, #84	; 0x54
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f007 ff25 	bl	800a5a8 <memset>
  if(huart->Instance==USART2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <HAL_UART_MspInit+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d13e      	bne.n	80027e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002768:	2302      	movs	r3, #2
 800276a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fcbf 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002780:	f7ff fdec 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	6593      	str	r3, [r2, #88]	; 0x58
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_UART_MspInit+0xbc>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b4:	230c      	movs	r3, #12
 80027b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c4:	2307      	movs	r3, #7
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d2:	f001 ff63 	bl	800469c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2026      	movs	r0, #38	; 0x26
 80027dc:	f001 fc91 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027e0:	2026      	movs	r0, #38	; 0x26
 80027e2:	f001 fca8 	bl	8004136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3778      	adds	r7, #120	; 0x78
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40021000 	.word	0x40021000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f001 fb08 	bl	8003e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <USART2_IRQHandler+0x10>)
 8002852:	f005 f9a1 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000318 	.word	0x20000318

08002860 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002868:	f002 f8b2 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <_write>:
 * 	These functions need to be redefined over the [_weak] versions defined by
 * 	GCC (or in syscalls.c by cubeMX) to make the stdio library functional.
 *
 ******************************************************************************/

int _write(int file, char *data, int len){
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	if(file != STDOUT_FILENO && file != STDERR_FILENO){
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00a      	beq.n	8002898 <_write+0x28>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d007      	beq.n	8002898 <_write+0x28>
		errno = EBADF;
 8002888:	f007 fc3c 	bl	800a104 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	2209      	movs	r2, #9
 8002890:	601a      	str	r2, [r3, #0]
		return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002896:	e041      	b.n	800291c <_write+0xac>
	}

	if(cli_password_ok == false){
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <_write+0xb4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <_write+0x3a>
		return len;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	e038      	b.n	800291c <_write+0xac>
	}

	HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]

	if (!(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) ) {
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <_write+0xb8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d119      	bne.n	80028ee <_write+0x7e>
		cli_tx_isr_flag = true;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <_write+0xbc>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
		/* Disable interrupts to prevent UART from throwing an RX interrupt while the peripheral is locked as
		 * this would prevent the RX interrupt from restarting HAL_UART_Receive_IT  */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028c0:	2025      	movs	r0, #37	; 0x25
 80028c2:	f001 fc46 	bl	8004152 <HAL_NVIC_DisableIRQ>

		/* Transmits with interrupts. This must be done this way so that we can re-activate USART interrupts
		 * before the transfer terminates so that we can continue reading from the terminal*/
		status = HAL_UART_Transmit_IT(huart_shell, (uint8_t *)data, len);
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <_write+0xc0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	b292      	uxth	r2, r2
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 f863 	bl	800799c <HAL_UART_Transmit_IT>
 80028d6:	4603      	mov	r3, r0
 80028d8:	75fb      	strb	r3, [r7, #23]

		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028da:	2025      	movs	r0, #37	; 0x25
 80028dc:	f001 fc2b 	bl	8004136 <HAL_NVIC_EnableIRQ>

		/* Wait for the transfer to terminate*/
		while(cli_tx_isr_flag == true){
 80028e0:	bf00      	nop
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <_write+0xbc>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1fa      	bne.n	80028e2 <_write+0x72>
 80028ec:	e010      	b.n	8002910 <_write+0xa0>
			/* flag will be set to false in HAL_UART_TxCpltCallback*/
		}
	}else{
		/* We are called from an interrupt, using Transmit_IT would not work */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028ee:	2025      	movs	r0, #37	; 0x25
 80028f0:	f001 fc2f 	bl	8004152 <HAL_NVIC_DisableIRQ>
		status = HAL_UART_Transmit(huart_shell, (uint8_t *)data, len, 1000);
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <_write+0xc0>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	f004 ffb5 	bl	8007870 <HAL_UART_Transmit>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800290a:	2025      	movs	r0, #37	; 0x25
 800290c:	f001 fc13 	bl	8004136 <HAL_NVIC_EnableIRQ>
	}



	if(status == HAL_OK){
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <_write+0xaa>
		return len;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	e000      	b.n	800291c <_write+0xac>
	}else{
		return 0;
 800291a:	2300      	movs	r3, #0
	}
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200008b3 	.word	0x200008b3
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	200008b4 	.word	0x200008b4
 8002930:	2000040c 	.word	0x2000040c

08002934 <cli_history_add>:
  * @brief          add a command to the history
  * @param  buff:   command
  * @retval         null
  */
static void cli_history_add(char* buff)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    uint16_t len;
    uint8_t index = history.latest;
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <cli_history_add+0xe4>)
 800293e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002942:	73fb      	strb	r3, [r7, #15]

    if (NULL == buff) return;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d060      	beq.n	8002a0c <cli_history_add+0xd8>

    len = strlen((const char *)buff);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fd fcc2 	bl	80002d4 <strlen>
 8002950:	4603      	mov	r3, r0
 8002952:	81bb      	strh	r3, [r7, #12]
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 8002954:	89bb      	ldrh	r3, [r7, #12]
 8002956:	2b4f      	cmp	r3, #79	; 0x4f
 8002958:	d85a      	bhi.n	8002a10 <cli_history_add+0xdc>

    /* find the latest one */
    if (0 != index) {
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <cli_history_add+0x34>
        index--;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3b01      	subs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e001      	b.n	800296c <cli_history_add+0x38>
    } else {
        index = HISTORY_MAX - 1;
 8002968:	2309      	movs	r3, #9
 800296a:	73fb      	strb	r3, [r7, #15]
    }

    if (0 != memcmp(history.cmd[index], buff, len)) {
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <cli_history_add+0xe4>)
 8002978:	4413      	add	r3, r2
 800297a:	89ba      	ldrh	r2, [r7, #12]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	f007 fdda 	bl	800a538 <memcmp>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03b      	beq.n	8002a02 <cli_history_add+0xce>
        /* if the new one is different with the latest one, the save */
        memset((void *)history.cmd[history.latest], 0x00, MAX_LINE_LEN);
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <cli_history_add+0xe4>)
 800298c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002990:	461a      	mov	r2, r3
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <cli_history_add+0xe4>)
 800299c:	4413      	add	r3, r2
 800299e:	2250      	movs	r2, #80	; 0x50
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f007 fe00 	bl	800a5a8 <memset>
        memcpy((void *)history.cmd[history.latest], (const void *)buff, len);
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <cli_history_add+0xe4>)
 80029aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80029ae:	461a      	mov	r2, r3
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <cli_history_add+0xe4>)
 80029ba:	4413      	add	r3, r2
 80029bc:	89ba      	ldrh	r2, [r7, #12]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f007 fdc9 	bl	800a558 <memcpy>
        if (history.count < HISTORY_MAX) {
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <cli_history_add+0xe4>)
 80029c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d807      	bhi.n	80029e0 <cli_history_add+0xac>
            history.count++;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <cli_history_add+0xe4>)
 80029d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80029d6:	3301      	adds	r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <cli_history_add+0xe4>)
 80029dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
        }

        history.latest++;
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <cli_history_add+0xe4>)
 80029e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80029e6:	3301      	adds	r3, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <cli_history_add+0xe4>)
 80029ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        if (history.latest >= HISTORY_MAX) {
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <cli_history_add+0xe4>)
 80029f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	d903      	bls.n	8002a02 <cli_history_add+0xce>
            history.latest = 0;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <cli_history_add+0xe4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        }
    }

    history.show = 0;
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <cli_history_add+0xe4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002a0a:	e002      	b.n	8002a12 <cli_history_add+0xde>
    if (NULL == buff) return;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <cli_history_add+0xde>
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 8002a10:	bf00      	nop
}
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000590 	.word	0x20000590

08002a1c <cli_history_show>:
  * @param  mode:       TRUE for look up, FALSE for look down
  * @param  p_history:  target history command
  * @retval             TRUE for no history found, FALSE for success
  */
static uint8_t cli_history_show(uint8_t mode, char** p_history)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
    uint8_t err = true;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	737b      	strb	r3, [r7, #13]
    uint8_t num;
    uint8_t index;

    if (0 == history.count) return err;
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <cli_history_show+0xb4>)
 8002a2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <cli_history_show+0x1e>
 8002a36:	7b7b      	ldrb	r3, [r7, #13]
 8002a38:	e044      	b.n	8002ac4 <cli_history_show+0xa8>

    if (true == mode) {
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d110      	bne.n	8002a62 <cli_history_show+0x46>
        /* look up */
        if (history.show < history.count) {
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <cli_history_show+0xb4>)
 8002a42:	f893 2322 	ldrb.w	r2, [r3, #802]	; 0x322
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <cli_history_show+0xb4>)
 8002a48:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d215      	bcs.n	8002a7c <cli_history_show+0x60>
            history.show++;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <cli_history_show+0xb4>)
 8002a52:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <cli_history_show+0xb4>)
 8002a5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002a60:	e00c      	b.n	8002a7c <cli_history_show+0x60>
        }
    } else {
        /* look down */
        if (1 < history.show) {
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <cli_history_show+0xb4>)
 8002a64:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d907      	bls.n	8002a7c <cli_history_show+0x60>
            history.show--;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <cli_history_show+0xb4>)
 8002a6e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <cli_history_show+0xb4>)
 8002a78:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
        }
    }

    num = history.show;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <cli_history_show+0xb4>)
 8002a7e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002a82:	73fb      	strb	r3, [r7, #15]
    index = history.latest;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <cli_history_show+0xb4>)
 8002a86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002a8a:	73bb      	strb	r3, [r7, #14]
    while (num) {
 8002a8c:	e00b      	b.n	8002aa6 <cli_history_show+0x8a>
        if (0 != index) {
 8002a8e:	7bbb      	ldrb	r3, [r7, #14]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <cli_history_show+0x80>
            index--;
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	73bb      	strb	r3, [r7, #14]
 8002a9a:	e001      	b.n	8002aa0 <cli_history_show+0x84>
        } else {
            index = HISTORY_MAX - 1;
 8002a9c:	2309      	movs	r3, #9
 8002a9e:	73bb      	strb	r3, [r7, #14]
        }
        num--;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
    while (num) {
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <cli_history_show+0x72>
    }

    err = false;
 8002aac:	2300      	movs	r3, #0
 8002aae:	737b      	strb	r3, [r7, #13]
    *p_history = history.cmd[index];
 8002ab0:	7bba      	ldrb	r2, [r7, #14]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <cli_history_show+0xb4>)
 8002abc:	441a      	add	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	601a      	str	r2, [r3, #0]

    return err;
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	20000590 	.word	0x20000590

08002ad4 <cli_init>:

void cli_init(UART_HandleTypeDef *handle_uart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	huart_shell = handle_uart;
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <cli_init+0xc4>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
	shell_queue_init(&cli_rx_buff);
 8002ae2:	482e      	ldr	r0, [pc, #184]	; (8002b9c <cli_init+0xc8>)
 8002ae4:	f000 fee6 	bl	80038b4 <shell_queue_init>
    memset((uint8_t *)&history, 0, sizeof(history));
 8002ae8:	f240 3223 	movw	r2, #803	; 0x323
 8002aec:	2100      	movs	r1, #0
 8002aee:	482c      	ldr	r0, [pc, #176]	; (8002ba0 <cli_init+0xcc>)
 8002af0:	f007 fd5a 	bl	800a5a8 <memset>

    HAL_UART_MspInit(huart_shell);
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <cli_init+0xc4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe1d 	bl	8002738 <HAL_UART_MspInit>
    HAL_UART_Receive_IT(huart_shell, &cBuffer, 1);
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <cli_init+0xc4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4927      	ldr	r1, [pc, #156]	; (8002ba4 <cli_init+0xd0>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fff0 	bl	8007aec <HAL_UART_Receive_IT>

    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e015      	b.n	8002b3e <cli_init+0x6a>
    	CLI_commands[j].pCmd = "";
 8002b12:	4925      	ldr	r1, [pc, #148]	; (8002ba8 <cli_init+0xd4>)
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <cli_init+0xd8>)
 8002b22:	601a      	str	r2, [r3, #0]
    	CLI_commands[j].pFun = NULL;
 8002b24:	4920      	ldr	r1, [pc, #128]	; (8002ba8 <cli_init+0xd4>)
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3308      	adds	r3, #8
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b1f      	cmp	r3, #31
 8002b42:	d9e6      	bls.n	8002b12 <cli_init+0x3e>
    }

#ifndef CLI_PASSWORD
    cli_password_ok = true;
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <cli_init+0xdc>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    greet();
 8002b4a:	f000 fb31 	bl	80031b0 <greet>
#endif

    CLI_ADD_CMD("help", cli_help_help, cli_help);
 8002b4e:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <cli_init+0xe0>)
 8002b50:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <cli_init+0xe4>)
 8002b52:	481a      	ldr	r0, [pc, #104]	; (8002bbc <cli_init+0xe8>)
 8002b54:	f000 fd04 	bl	8003560 <cli_add_command>
    CLI_ADD_CMD("cls", cli_clear_help, cli_clear);
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <cli_init+0xec>)
 8002b5a:	491a      	ldr	r1, [pc, #104]	; (8002bc4 <cli_init+0xf0>)
 8002b5c:	481a      	ldr	r0, [pc, #104]	; (8002bc8 <cli_init+0xf4>)
 8002b5e:	f000 fcff 	bl	8003560 <cli_add_command>
    CLI_ADD_CMD("reset", cli_reset_help, cli_reset);
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <cli_init+0xf8>)
 8002b64:	491a      	ldr	r1, [pc, #104]	; (8002bd0 <cli_init+0xfc>)
 8002b66:	481b      	ldr	r0, [pc, #108]	; (8002bd4 <cli_init+0x100>)
 8002b68:	f000 fcfa 	bl	8003560 <cli_add_command>
    CLI_ADD_CMD("log", cli_log_help, cli_log);
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <cli_init+0x104>)
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <cli_init+0x108>)
 8002b70:	481b      	ldr	r0, [pc, #108]	; (8002be0 <cli_init+0x10c>)
 8002b72:	f000 fcf5 	bl	8003560 <cli_add_command>

    if(CLI_LAST_LOG_CATEGORY > 32){
    	ERR("Too many log categories defined. The max number of log categories that can be user defined is 31.\n");
    }

    LOG(CLI_LOG_SHELL, "Command line successfully initialized.\n");
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <cli_init+0x110>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <cli_init+0xba>
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <cli_init+0x114>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4818      	ldr	r0, [pc, #96]	; (8002bec <cli_init+0x118>)
 8002b8a:	f008 fdc9 	bl	800b720 <iprintf>

}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000040c 	.word	0x2000040c
 8002b9c:	200003e4 	.word	0x200003e4
 8002ba0:	20000590 	.word	0x20000590
 8002ba4:	200003e0 	.word	0x200003e0
 8002ba8:	20000410 	.word	0x20000410
 8002bac:	0800eecc 	.word	0x0800eecc
 8002bb0:	200008b3 	.word	0x200008b3
 8002bb4:	08003361 	.word	0x08003361
 8002bb8:	0800fa00 	.word	0x0800fa00
 8002bbc:	0800eed0 	.word	0x0800eed0
 8002bc0:	080034b5 	.word	0x080034b5
 8002bc4:	0800fa10 	.word	0x0800fa10
 8002bc8:	0800eed8 	.word	0x0800eed8
 8002bcc:	08003511 	.word	0x08003511
 8002bd0:	0800fa24 	.word	0x0800fa24
 8002bd4:	0800eedc 	.word	0x0800eedc
 8002bd8:	08003635 	.word	0x08003635
 8002bdc:	0800fa30 	.word	0x0800fa30
 8002be0:	0800eee4 	.word	0x0800eee4
 8002be4:	2000001c 	.word	0x2000001c
 8002be8:	20000000 	.word	0x20000000
 8002bec:	0800eee8 	.word	0x0800eee8

08002bf0 <HAL_UART_RxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done receiving a char
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	shell_queue_in(&cli_rx_buff, &cBuffer);
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <HAL_UART_RxCpltCallback+0x24>)
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <HAL_UART_RxCpltCallback+0x28>)
 8002bfc:	f000 fe9a 	bl	8003934 <shell_queue_in>
	HAL_UART_Receive_IT(huart, &cBuffer, 1);
 8002c00:	2201      	movs	r2, #1
 8002c02:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_UART_RxCpltCallback+0x24>)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f004 ff71 	bl	8007aec <HAL_UART_Receive_IT>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200003e0 	.word	0x200003e0
 8002c18:	200003e4 	.word	0x200003e4

08002c1c <HAL_UART_TxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done transmitting data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	cli_tx_isr_flag = false;
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_UART_TxCpltCallback+0x1c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200008b4 	.word	0x200008b4

08002c3c <cli_rx_handle>:
  * @brief  handle commands from the terminal
  * @param  commands
  * @retval null
  */
static void cli_rx_handle(shell_queue_s *rx_buff)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b091      	sub	sp, #68	; 0x44
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    static HANDLE_TYPE_S Handle = {.buff = {0},.len = 0};
    uint8_t i = Handle.len;
 8002c44:	4bb9      	ldr	r3, [pc, #740]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cmd_match = false;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t exec_req = false;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*  ---------------------------------------
        Step1: save chars from the terminal
        ---------------------------------------
     */
    bool newChar = true;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    while(newChar) {
 8002c60:	e15e      	b.n	8002f20 <cli_rx_handle+0x2e4>
        if(Handle.len < MAX_LINE_LEN) {  /* check the buffer */
 8002c62:	4bb2      	ldr	r3, [pc, #712]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c68:	2b4f      	cmp	r3, #79	; 0x4f
 8002c6a:	f200 8173 	bhi.w	8002f54 <cli_rx_handle+0x318>
        	newChar = shell_queue_out(rx_buff, Handle.buff+Handle.len);
 8002c6e:	4baf      	ldr	r3, [pc, #700]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c74:	461a      	mov	r2, r3
 8002c76:	4bad      	ldr	r3, [pc, #692]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fe7a 	bl	8003976 <shell_queue_out>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

            /* new char coming from the terminal, copy it to Handle.buff */
            if(newChar) {
 8002c90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d069      	beq.n	8002d6c <cli_rx_handle+0x130>
                /* KEY_BACKSPACE -->get DELETE key from keyboard */
                if (Handle.buff[Handle.len] == KEY_BACKSPACE || Handle.buff[Handle.len] == KEY_DEL) {
 8002c98:	4ba4      	ldr	r3, [pc, #656]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4ba2      	ldr	r3, [pc, #648]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002ca2:	5c9b      	ldrb	r3, [r3, r2]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d007      	beq.n	8002cb8 <cli_rx_handle+0x7c>
 8002ca8:	4ba0      	ldr	r3, [pc, #640]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b9e      	ldr	r3, [pc, #632]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb6:	d11c      	bne.n	8002cf2 <cli_rx_handle+0xb6>
                    /* buffer not empty */
                    if (Handle.len > 0) {
 8002cb8:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 812e 	beq.w	8002f20 <cli_rx_handle+0x2e4>
                        /* delete a char in terminal */
                        TERMINAL_MOVE_LEFT(1);
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	489a      	ldr	r0, [pc, #616]	; (8002f30 <cli_rx_handle+0x2f4>)
 8002cc8:	f008 fd2a 	bl	800b720 <iprintf>
                        TERMINAL_CLEAR_END();
 8002ccc:	4899      	ldr	r0, [pc, #612]	; (8002f34 <cli_rx_handle+0x2f8>)
 8002cce:	f008 fd27 	bl	800b720 <iprintf>
                        Handle.buff[Handle.len] = '\0';
 8002cd2:	4b96      	ldr	r3, [pc, #600]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b94      	ldr	r3, [pc, #592]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]
                        Handle.len--;
 8002ce0:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b90      	ldr	r3, [pc, #576]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    if (Handle.len > 0) {
 8002cf0:	e116      	b.n	8002f20 <cli_rx_handle+0x2e4>
                    }

                } else if(Handle.buff[Handle.len] == KEY_ENTER){
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b8c      	ldr	r3, [pc, #560]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	2b0d      	cmp	r3, #13
 8002d00:	d10b      	bne.n	8002d1a <cli_rx_handle+0xde>
                	exec_req = true;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                	Handle.len++;
 8002d08:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d18:	e102      	b.n	8002f20 <cli_rx_handle+0x2e4>
                }else if(strstr((const char *)Handle.buff, KEY_DELETE) != NULL){
 8002d1a:	4987      	ldr	r1, [pc, #540]	; (8002f38 <cli_rx_handle+0x2fc>)
 8002d1c:	4883      	ldr	r0, [pc, #524]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d1e:	f008 fe62 	bl	800b9e6 <strstr>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d018      	beq.n	8002d5a <cli_rx_handle+0x11e>
                	strcpy((char *)&Handle.buff[Handle.len-3], (char *)&Handle.buff[Handle.len+1]);
 8002d28:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2e:	3b03      	subs	r3, #3
 8002d30:	4a7e      	ldr	r2, [pc, #504]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d32:	441a      	add	r2, r3
 8002d34:	4b7d      	ldr	r3, [pc, #500]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	497b      	ldr	r1, [pc, #492]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d3e:	440b      	add	r3, r1
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f008 fe47 	bl	800b9d6 <strcpy>
                	Handle.len -= 3;
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d4e:	3b03      	subs	r3, #3
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d58:	e0e2      	b.n	8002f20 <cli_rx_handle+0x2e4>
            	}else{
                    Handle.len++;
 8002d5a:	4b74      	ldr	r3, [pc, #464]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b71      	ldr	r3, [pc, #452]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d6a:	e0d9      	b.n	8002f20 <cli_rx_handle+0x2e4>
                }

            } else if(cli_password_ok){
 8002d6c:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <cli_rx_handle+0x300>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80d5 	beq.w	8002f20 <cli_rx_handle+0x2e4>
                /* all chars copied to Handle.buff */
                uint8_t key = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                uint8_t err = 0xff;
 8002d7c:	23ff      	movs	r3, #255	; 0xff
 8002d7e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                char *p_hist_cmd = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28

                if (Handle.len >= 3) {
 8002d86:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f240 80a7 	bls.w	8002ee0 <cli_rx_handle+0x2a4>
                    if (strstr((const char *)Handle.buff, KEY_UP) != NULL) {
 8002d92:	496b      	ldr	r1, [pc, #428]	; (8002f40 <cli_rx_handle+0x304>)
 8002d94:	4865      	ldr	r0, [pc, #404]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002d96:	f008 fe26 	bl	800b9e6 <strstr>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <cli_rx_handle+0x19e>
                        key = 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002da6:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d907      	bls.n	8002dc0 <cli_rx_handle+0x184>
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db6:	3b03      	subs	r3, #3
 8002db8:	4619      	mov	r1, r3
 8002dba:	485d      	ldr	r0, [pc, #372]	; (8002f30 <cli_rx_handle+0x2f4>)
 8002dbc:	f008 fcb0 	bl	800b720 <iprintf>
                        TERMINAL_CLEAR_END();
 8002dc0:	485c      	ldr	r0, [pc, #368]	; (8002f34 <cli_rx_handle+0x2f8>)
 8002dc2:	f008 fcad 	bl	800b720 <iprintf>
                        err = cli_history_show(true, &p_hist_cmd);
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff fe25 	bl	8002a1c <cli_history_show>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002dd8:	e038      	b.n	8002e4c <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_DOWN) != NULL) {
 8002dda:	495a      	ldr	r1, [pc, #360]	; (8002f44 <cli_rx_handle+0x308>)
 8002ddc:	4853      	ldr	r0, [pc, #332]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002dde:	f008 fe02 	bl	800b9e6 <strstr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01c      	beq.n	8002e22 <cli_rx_handle+0x1e6>
                        key = 2;
 8002de8:	2302      	movs	r3, #2
 8002dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d907      	bls.n	8002e08 <cli_rx_handle+0x1cc>
 8002df8:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dfe:	3b03      	subs	r3, #3
 8002e00:	4619      	mov	r1, r3
 8002e02:	484b      	ldr	r0, [pc, #300]	; (8002f30 <cli_rx_handle+0x2f4>)
 8002e04:	f008 fc8c 	bl	800b720 <iprintf>
                        TERMINAL_CLEAR_END();
 8002e08:	484a      	ldr	r0, [pc, #296]	; (8002f34 <cli_rx_handle+0x2f8>)
 8002e0a:	f008 fc89 	bl	800b720 <iprintf>
                        err = cli_history_show(false, &p_hist_cmd);
 8002e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e12:	4619      	mov	r1, r3
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7ff fe01 	bl	8002a1c <cli_history_show>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002e20:	e014      	b.n	8002e4c <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_RIGHT) != NULL) {
 8002e22:	4949      	ldr	r1, [pc, #292]	; (8002f48 <cli_rx_handle+0x30c>)
 8002e24:	4841      	ldr	r0, [pc, #260]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e26:	f008 fdde 	bl	800b9e6 <strstr>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <cli_rx_handle+0x1fc>
                        key = 3;
 8002e30:	2303      	movs	r3, #3
 8002e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002e36:	e009      	b.n	8002e4c <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_LEFT) != NULL) {
 8002e38:	4944      	ldr	r1, [pc, #272]	; (8002f4c <cli_rx_handle+0x310>)
 8002e3a:	483c      	ldr	r0, [pc, #240]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e3c:	f008 fdd3 	bl	800b9e6 <strstr>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <cli_rx_handle+0x210>
                        key = 4;
 8002e46:	2304      	movs	r3, #4
 8002e48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }

                    if (key != 0) {
 8002e4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d045      	beq.n	8002ee0 <cli_rx_handle+0x2a4>
                        if (!err) {
 8002e54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d124      	bne.n	8002ea6 <cli_rx_handle+0x26a>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002e5c:	2251      	movs	r2, #81	; 0x51
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4832      	ldr	r0, [pc, #200]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e62:	f007 fba1 	bl	800a5a8 <memset>
                            memcpy(Handle.buff, p_hist_cmd, strlen(p_hist_cmd));
 8002e66:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fa32 	bl	80002d4 <strlen>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4621      	mov	r1, r4
 8002e76:	482d      	ldr	r0, [pc, #180]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e78:	f007 fb6e 	bl	800a558 <memcpy>
                            Handle.len = strlen(p_hist_cmd);
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fa28 	bl	80002d4 <strlen>
 8002e84:	4603      	mov	r3, r0
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            Handle.buff[Handle.len] = '\0';
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]
                            printf("%s", Handle.buff);  /* display history command */
 8002e9c:	4923      	ldr	r1, [pc, #140]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002e9e:	482c      	ldr	r0, [pc, #176]	; (8002f50 <cli_rx_handle+0x314>)
 8002ea0:	f008 fc3e 	bl	800b720 <iprintf>
 8002ea4:	e01c      	b.n	8002ee0 <cli_rx_handle+0x2a4>
                        } else if (err && (0 != key)) {
 8002ea6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <cli_rx_handle+0x2a4>
 8002eae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <cli_rx_handle+0x2a4>
                            /* no history found */
                            TERMINAL_MOVE_LEFT(Handle.len-3);
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d907      	bls.n	8002ed0 <cli_rx_handle+0x294>
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	3b03      	subs	r3, #3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4819      	ldr	r0, [pc, #100]	; (8002f30 <cli_rx_handle+0x2f4>)
 8002ecc:	f008 fc28 	bl	800b720 <iprintf>
                            TERMINAL_CLEAR_END();
 8002ed0:	4818      	ldr	r0, [pc, #96]	; (8002f34 <cli_rx_handle+0x2f8>)
 8002ed2:	f008 fc25 	bl	800b720 <iprintf>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002ed6:	2251      	movs	r2, #81	; 0x51
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4814      	ldr	r0, [pc, #80]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002edc:	f007 fb64 	bl	800a5a8 <memset>
                        }
                    }
                }

                if ((key == 0) && (Handle.len > i)) {
 8002ee0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d137      	bne.n	8002f58 <cli_rx_handle+0x31c>
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d230      	bcs.n	8002f58 <cli_rx_handle+0x31c>
                    /* display char in terminal */
                    for (; i < Handle.len; i++) {
 8002ef6:	e00b      	b.n	8002f10 <cli_rx_handle+0x2d4>
                    	printf("%c", Handle.buff[i]);
 8002ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f008 fc25 	bl	800b750 <putchar>
                    for (; i < Handle.len; i++) {
 8002f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <cli_rx_handle+0x2f0>)
 8002f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f16:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3ec      	bcc.n	8002ef8 <cli_rx_handle+0x2bc>

                    }
                }
                break;
 8002f1e:	e01b      	b.n	8002f58 <cli_rx_handle+0x31c>
    while(newChar) {
 8002f20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f47f ae9c 	bne.w	8002c62 <cli_rx_handle+0x26>
 8002f2a:	e016      	b.n	8002f5a <cli_rx_handle+0x31e>
 8002f2c:	200008b8 	.word	0x200008b8
 8002f30:	0800ef24 	.word	0x0800ef24
 8002f34:	0800ef2c 	.word	0x0800ef2c
 8002f38:	0800ef30 	.word	0x0800ef30
 8002f3c:	200008b3 	.word	0x200008b3
 8002f40:	0800ef38 	.word	0x0800ef38
 8002f44:	0800ef3c 	.word	0x0800ef3c
 8002f48:	0800ef40 	.word	0x0800ef40
 8002f4c:	0800ef44 	.word	0x0800ef44
 8002f50:	0800ef48 	.word	0x0800ef48
            }

        } else {
            /* buffer full */
            break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <cli_rx_handle+0x31e>
                break;
 8002f58:	bf00      	nop

    /*  ---------------------------------------
        Step2: handle the commands
        ---------------------------------------
     */
    if(exec_req && !cli_password_ok){
 8002f5a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <cli_rx_handle+0x340>
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <cli_rx_handle+0x510>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <cli_rx_handle+0x340>
    		cli_password_ok = true;
    		greet();
    	}
    	Handle.len = 0;
#else
    	cli_password_ok = true;
 8002f70:	4b76      	ldr	r3, [pc, #472]	; (800314c <cli_rx_handle+0x510>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
    	greet();
 8002f76:	f000 f91b 	bl	80031b0 <greet>
 8002f7a:	e0d2      	b.n	8003122 <cli_rx_handle+0x4e6>
#endif
    }else if(exec_req && (Handle.len == 1)) {
 8002f7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <cli_rx_handle+0x362>
 8002f84:	4b72      	ldr	r3, [pc, #456]	; (8003150 <cli_rx_handle+0x514>)
 8002f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <cli_rx_handle+0x362>
        /* KEY_ENTER -->ENTER key from terminal */
    	PRINT_CLI_NAME();
 8002f8e:	4871      	ldr	r0, [pc, #452]	; (8003154 <cli_rx_handle+0x518>)
 8002f90:	f008 fbc6 	bl	800b720 <iprintf>
        Handle.len = 0;
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <cli_rx_handle+0x514>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f9c:	e0c1      	b.n	8003122 <cli_rx_handle+0x4e6>
    } else if(exec_req && Handle.len > 1) {  /* check for the length of command */
 8002f9e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80bd 	beq.w	8003122 <cli_rx_handle+0x4e6>
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <cli_rx_handle+0x514>)
 8002faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f240 80b7 	bls.w	8003122 <cli_rx_handle+0x4e6>
		NL1();
 8002fb4:	200a      	movs	r0, #10
 8002fb6:	f008 fbcb 	bl	800b750 <putchar>
		Handle.buff[Handle.len - 1] = '\0';
 8002fba:	4b65      	ldr	r3, [pc, #404]	; (8003150 <cli_rx_handle+0x514>)
 8002fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	4a63      	ldr	r2, [pc, #396]	; (8003150 <cli_rx_handle+0x514>)
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	54d1      	strb	r1, [r2, r3]
		cli_history_add((char *)Handle.buff);
 8002fc8:	4861      	ldr	r0, [pc, #388]	; (8003150 <cli_rx_handle+0x514>)
 8002fca:	f7ff fcb3 	bl	8002934 <cli_history_add>
		char *command = strtok((char *)Handle.buff, " \t");
 8002fce:	4962      	ldr	r1, [pc, #392]	; (8003158 <cli_rx_handle+0x51c>)
 8002fd0:	485f      	ldr	r0, [pc, #380]	; (8003150 <cli_rx_handle+0x514>)
 8002fd2:	f009 fb49 	bl	800c668 <strtok>
 8002fd6:	6338      	str	r0, [r7, #48]	; 0x30

		/* looking for a match */
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fde:	e089      	b.n	80030f4 <cli_rx_handle+0x4b8>
			if(0 == strcmp(command, CLI_commands[i].pCmd)) {
 8002fe0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002fe4:	495d      	ldr	r1, [pc, #372]	; (800315c <cli_rx_handle+0x520>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff6:	f7fd f963 	bl	80002c0 <strcmp>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d174      	bne.n	80030ea <cli_rx_handle+0x4ae>
				cmd_match = true;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				//Split arguments string to argc/argv
				uint8_t argc = 1;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				char 	*argv[MAX_ARGC];
				argv[0] = command;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	60bb      	str	r3, [r7, #8]

				char *token = strtok(NULL, " \t");
 8003010:	4951      	ldr	r1, [pc, #324]	; (8003158 <cli_rx_handle+0x51c>)
 8003012:	2000      	movs	r0, #0
 8003014:	f009 fb28 	bl	800c668 <strtok>
 8003018:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 800301a:	e01d      	b.n	8003058 <cli_rx_handle+0x41c>
					if(argc >= MAX_ARGC){
 800301c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003020:	2b07      	cmp	r3, #7
 8003022:	d907      	bls.n	8003034 <cli_rx_handle+0x3f8>
						printf(CLI_FONT_RED "Maximum number of arguments is %d. Ignoring the rest of the arguments."CLI_FONT_DEFAULT, MAX_ARGC-1);NL1();
 8003024:	2107      	movs	r1, #7
 8003026:	484e      	ldr	r0, [pc, #312]	; (8003160 <cli_rx_handle+0x524>)
 8003028:	f008 fb7a 	bl	800b720 <iprintf>
 800302c:	200a      	movs	r0, #10
 800302e:	f008 fb8f 	bl	800b750 <putchar>
						break;
 8003032:	e014      	b.n	800305e <cli_rx_handle+0x422>
					}
					argv[argc] = token;
 8003034:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	3340      	adds	r3, #64	; 0x40
 800303c:	443b      	add	r3, r7
 800303e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003040:	f843 2c38 	str.w	r2, [r3, #-56]
					argc++;
 8003044:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003048:	3301      	adds	r3, #1
 800304a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					token = strtok(NULL, " \t");
 800304e:	4942      	ldr	r1, [pc, #264]	; (8003158 <cli_rx_handle+0x51c>)
 8003050:	2000      	movs	r0, #0
 8003052:	f009 fb09 	bl	800c668 <strtok>
 8003056:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1de      	bne.n	800301c <cli_rx_handle+0x3e0>
				}

				if(CLI_commands[i].pFun != NULL) {
 800305e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003062:	493e      	ldr	r1, [pc, #248]	; (800315c <cli_rx_handle+0x520>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3308      	adds	r3, #8
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d032      	beq.n	80030dc <cli_rx_handle+0x4a0>
					/* call the func. */
					TERMINAL_HIDE_CURSOR();
 8003076:	483b      	ldr	r0, [pc, #236]	; (8003164 <cli_rx_handle+0x528>)
 8003078:	f008 fb52 	bl	800b720 <iprintf>
					uint8_t result = CLI_commands[i].pFun(argc, argv);
 800307c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003080:	4936      	ldr	r1, [pc, #216]	; (800315c <cli_rx_handle+0x520>)
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3308      	adds	r3, #8
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003094:	f107 0108 	add.w	r1, r7, #8
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
 800309c:	4603      	mov	r3, r0
 800309e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if(result == EXIT_SUCCESS){
 80030a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <cli_rx_handle+0x484>
						printf(CLI_FONT_GREEN "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 80030aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ae:	461a      	mov	r2, r3
 80030b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b2:	482d      	ldr	r0, [pc, #180]	; (8003168 <cli_rx_handle+0x52c>)
 80030b4:	f008 fb34 	bl	800b720 <iprintf>
 80030b8:	200a      	movs	r0, #10
 80030ba:	f008 fb49 	bl	800b750 <putchar>
 80030be:	e009      	b.n	80030d4 <cli_rx_handle+0x498>
					}else{
						printf(CLI_FONT_RED "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 80030c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030c4:	461a      	mov	r2, r3
 80030c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c8:	4828      	ldr	r0, [pc, #160]	; (800316c <cli_rx_handle+0x530>)
 80030ca:	f008 fb29 	bl	800b720 <iprintf>
 80030ce:	200a      	movs	r0, #10
 80030d0:	f008 fb3e 	bl	800b750 <putchar>
					}
					TERMINAL_SHOW_CURSOR();
 80030d4:	4826      	ldr	r0, [pc, #152]	; (8003170 <cli_rx_handle+0x534>)
 80030d6:	f008 fb23 	bl	800b720 <iprintf>
					break;
 80030da:	e010      	b.n	80030fe <cli_rx_handle+0x4c2>
				} else {
					/* func. is void */
					printf(CLI_FONT_RED "Command %s exists but no function is associated to it.", command);NL1();
 80030dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030de:	4825      	ldr	r0, [pc, #148]	; (8003174 <cli_rx_handle+0x538>)
 80030e0:	f008 fb1e 	bl	800b720 <iprintf>
 80030e4:	200a      	movs	r0, #10
 80030e6:	f008 fb33 	bl	800b750 <putchar>
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 80030ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030ee:	3301      	adds	r3, #1
 80030f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80030f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030f8:	2b1f      	cmp	r3, #31
 80030fa:	f67f af71 	bls.w	8002fe0 <cli_rx_handle+0x3a4>
				}
			}
		}

		if(!cmd_match) {
 80030fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <cli_rx_handle+0x4d8>
			/* no matching command */
			printf("\r\nCommand \"%s\" unknown, try: help", Handle.buff);NL1();
 8003106:	4912      	ldr	r1, [pc, #72]	; (8003150 <cli_rx_handle+0x514>)
 8003108:	481b      	ldr	r0, [pc, #108]	; (8003178 <cli_rx_handle+0x53c>)
 800310a:	f008 fb09 	bl	800b720 <iprintf>
 800310e:	200a      	movs	r0, #10
 8003110:	f008 fb1e 	bl	800b750 <putchar>
		}

		Handle.len = 0;
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <cli_rx_handle+0x514>)
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		PRINT_CLI_NAME();
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <cli_rx_handle+0x518>)
 800311e:	f008 faff 	bl	800b720 <iprintf>

    }


    if(Handle.len >= MAX_LINE_LEN) {
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <cli_rx_handle+0x514>)
 8003124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003128:	2b4f      	cmp	r3, #79	; 0x4f
 800312a:	d90a      	bls.n	8003142 <cli_rx_handle+0x506>
        /* full, so restart the count */
    	printf(CLI_FONT_RED "\r\nMax command length is %d.\r\n" CLI_FONT_DEFAULT, MAX_LINE_LEN-1);
 800312c:	214f      	movs	r1, #79	; 0x4f
 800312e:	4813      	ldr	r0, [pc, #76]	; (800317c <cli_rx_handle+0x540>)
 8003130:	f008 faf6 	bl	800b720 <iprintf>
    	PRINT_CLI_NAME();
 8003134:	4807      	ldr	r0, [pc, #28]	; (8003154 <cli_rx_handle+0x518>)
 8003136:	f008 faf3 	bl	800b720 <iprintf>
        Handle.len = 0;
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <cli_rx_handle+0x514>)
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
}
 8003142:	bf00      	nop
 8003144:	3744      	adds	r7, #68	; 0x44
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	200008b3 	.word	0x200008b3
 8003150:	200008b8 	.word	0x200008b8
 8003154:	0800ef4c 	.word	0x0800ef4c
 8003158:	0800ef58 	.word	0x0800ef58
 800315c:	20000410 	.word	0x20000410
 8003160:	0800ef5c 	.word	0x0800ef5c
 8003164:	0800efb4 	.word	0x0800efb4
 8003168:	0800efbc 	.word	0x0800efbc
 800316c:	0800efdc 	.word	0x0800efdc
 8003170:	0800effc 	.word	0x0800effc
 8003174:	0800f004 	.word	0x0800f004
 8003178:	0800f044 	.word	0x0800f044
 800317c:	0800f068 	.word	0x0800f068

08003180 <cli_tx_handle>:
  * @brief  tx handle, flushes stdout buffer
  * @param  null
  * @retval null
  */
static void cli_tx_handle(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
    fflush(stdout);
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <cli_tx_handle+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f007 f882 	bl	800a294 <fflush>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000002c 	.word	0x2000002c

08003198 <cli_run>:

void cli_run(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
    cli_rx_handle(&cli_rx_buff);
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <cli_run+0x14>)
 800319e:	f7ff fd4d 	bl	8002c3c <cli_rx_handle>
    cli_tx_handle();
 80031a2:	f7ff ffed 	bl	8003180 <cli_tx_handle>
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200003e4 	.word	0x200003e4

080031b0 <greet>:

void greet(void){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
    NL1();
 80031b4:	200a      	movs	r0, #10
 80031b6:	f008 facb 	bl	800b750 <putchar>
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 80031ba:	484d      	ldr	r0, [pc, #308]	; (80032f0 <greet+0x140>)
 80031bc:	f008 fab0 	bl	800b720 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 80031c0:	484c      	ldr	r0, [pc, #304]	; (80032f4 <greet+0x144>)
 80031c2:	f008 faad 	bl	800b720 <iprintf>
    TERMINAL_RESET_CURSOR();
 80031c6:	484c      	ldr	r0, [pc, #304]	; (80032f8 <greet+0x148>)
 80031c8:	f008 faaa 	bl	800b720 <iprintf>
    TERMINAL_FONT_BLUE();
 80031cc:	484b      	ldr	r0, [pc, #300]	; (80032fc <greet+0x14c>)
 80031ce:	f008 faa7 	bl	800b720 <iprintf>
    printf("                             ///////////////////////////////////////////    ");NL1();
 80031d2:	484b      	ldr	r0, [pc, #300]	; (8003300 <greet+0x150>)
 80031d4:	f008 faa4 	bl	800b720 <iprintf>
 80031d8:	200a      	movs	r0, #10
 80031da:	f008 fab9 	bl	800b750 <putchar>
    printf("                             /////*   .////////////////////////     *///    ");NL1();
 80031de:	4849      	ldr	r0, [pc, #292]	; (8003304 <greet+0x154>)
 80031e0:	f008 fa9e 	bl	800b720 <iprintf>
 80031e4:	200a      	movs	r0, #10
 80031e6:	f008 fab3 	bl	800b750 <putchar>
    printf("            %%%%%%         %%%%%%  ///   ////  //   //////////  //   ////   //    ");NL1();
 80031ea:	4847      	ldr	r0, [pc, #284]	; (8003308 <greet+0x158>)
 80031ec:	f008 fa98 	bl	800b720 <iprintf>
 80031f0:	200a      	movs	r0, #10
 80031f2:	f008 faad 	bl	800b750 <putchar>
    printf("            %%%%%%        %%%%%%   ///  //////////   ////////  ///  //////////    ");NL1();
 80031f6:	4845      	ldr	r0, [pc, #276]	; (800330c <greet+0x15c>)
 80031f8:	f008 fa92 	bl	800b720 <iprintf>
 80031fc:	200a      	movs	r0, #10
 80031fe:	f008 faa7 	bl	800b750 <putchar>
    printf("           %%%%%%        %%%%%%%%   ((((   (((((((((   ((((((  (((((   .(((((((    ");NL1();
 8003202:	4843      	ldr	r0, [pc, #268]	; (8003310 <greet+0x160>)
 8003204:	f008 fa8c 	bl	800b720 <iprintf>
 8003208:	200a      	movs	r0, #10
 800320a:	f008 faa1 	bl	800b750 <putchar>
    printf("          %%%%%%        %%%%%%%%    (((((((    (((((((  ((((  (((((((((    ((((    ");NL1();
 800320e:	4841      	ldr	r0, [pc, #260]	; (8003314 <greet+0x164>)
 8003210:	f008 fa86 	bl	800b720 <iprintf>
 8003214:	200a      	movs	r0, #10
 8003216:	f008 fa9b 	bl	800b750 <putchar>
    printf("          %%%%%%      %%%%  %%%%    ((((((((((   ((((((  ((  ((((((((((((((  ((    ");NL1();
 800321a:	483f      	ldr	r0, [pc, #252]	; (8003318 <greet+0x168>)
 800321c:	f008 fa80 	bl	800b720 <iprintf>
 8003220:	200a      	movs	r0, #10
 8003222:	f008 fa95 	bl	800b750 <putchar>
    printf("         %%%%%%%%    %%%%%%   %%%%%%%%  (((*((((((  .(((((((    ((((((( ((((((   ((    ");NL1();
 8003226:	483d      	ldr	r0, [pc, #244]	; (800331c <greet+0x16c>)
 8003228:	f008 fa7a 	bl	800b720 <iprintf>
 800322c:	200a      	movs	r0, #10
 800322e:	f008 fa8f 	bl	800b750 <putchar>
    printf("         %%%%*%%%%%%%%%%%%           (((        (((((((((   ((((((((        ((((    ");NL1();
 8003232:	483b      	ldr	r0, [pc, #236]	; (8003320 <greet+0x170>)
 8003234:	f008 fa74 	bl	800b720 <iprintf>
 8003238:	200a      	movs	r0, #10
 800323a:	f008 fa89 	bl	800b750 <putchar>
    printf("        %%%%   %%%%.             ###################   ##################### (((");NL1();
 800323e:	4839      	ldr	r0, [pc, #228]	; (8003324 <greet+0x174>)
 8003240:	f008 fa6e 	bl	800b720 <iprintf>
 8003244:	200a      	movs	r0, #10
 8003246:	f008 fa83 	bl	800b750 <putchar>
    printf("       %%%%%%          (((      ##################   ##################((((((( ");NL1();
 800324a:	4837      	ldr	r0, [pc, #220]	; (8003328 <greet+0x178>)
 800324c:	f008 fa68 	bl	800b720 <iprintf>
 8003250:	200a      	movs	r0, #10
 8003252:	f008 fa7d 	bl	800b750 <putchar>
    printf("       %%%%               (((( #################   ##############(((((((##    ");NL1();
 8003256:	4835      	ldr	r0, [pc, #212]	; (800332c <greet+0x17c>)
 8003258:	f008 fa62 	bl	800b720 <iprintf>
 800325c:	200a      	movs	r0, #10
 800325e:	f008 fa77 	bl	800b750 <putchar>
    printf("      %%%%%%                   (((((((((##################((((((((((#######    ");NL1();
 8003262:	4833      	ldr	r0, [pc, #204]	; (8003330 <greet+0x180>)
 8003264:	f008 fa5c 	bl	800b720 <iprintf>
 8003268:	200a      	movs	r0, #10
 800326a:	f008 fa71 	bl	800b750 <putchar>
    printf("     %%%%%%                     ########(((((((((((((((((((################    ");NL1();
 800326e:	4831      	ldr	r0, [pc, #196]	; (8003334 <greet+0x184>)
 8003270:	f008 fa56 	bl	800b720 <iprintf>
 8003274:	200a      	movs	r0, #10
 8003276:	f008 fa6b 	bl	800b750 <putchar>
    printf("     %%%%%%                     ##%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%    ");NL1();
 800327a:	482f      	ldr	r0, [pc, #188]	; (8003338 <greet+0x188>)
 800327c:	f008 fa50 	bl	800b720 <iprintf>
 8003280:	200a      	movs	r0, #10
 8003282:	f008 fa65 	bl	800b750 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003286:	482d      	ldr	r0, [pc, #180]	; (800333c <greet+0x18c>)
 8003288:	f008 fa4a 	bl	800b720 <iprintf>
 800328c:	200a      	movs	r0, #10
 800328e:	f008 fa5f 	bl	800b750 <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003292:	482a      	ldr	r0, [pc, #168]	; (800333c <greet+0x18c>)
 8003294:	f008 fa44 	bl	800b720 <iprintf>
 8003298:	200a      	movs	r0, #10
 800329a:	f008 fa59 	bl	800b750 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800329e:	4828      	ldr	r0, [pc, #160]	; (8003340 <greet+0x190>)
 80032a0:	f008 fa3e 	bl	800b720 <iprintf>
 80032a4:	200a      	movs	r0, #10
 80032a6:	f008 fa53 	bl	800b750 <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 80032aa:	4825      	ldr	r0, [pc, #148]	; (8003340 <greet+0x190>)
 80032ac:	f008 fa38 	bl	800b720 <iprintf>
 80032b0:	200a      	movs	r0, #10
 80032b2:	f008 fa4d 	bl	800b750 <putchar>
    printf("µShell v0.1 - by Morgan Diepart (mdiepart@uliege.be)");NL1();
 80032b6:	4823      	ldr	r0, [pc, #140]	; (8003344 <greet+0x194>)
 80032b8:	f008 fa32 	bl	800b720 <iprintf>
 80032bc:	200a      	movs	r0, #10
 80032be:	f008 fa47 	bl	800b750 <putchar>
    printf("Original work from https://github.com/ShareCat/STM32CommandLine");NL1();
 80032c2:	4821      	ldr	r0, [pc, #132]	; (8003348 <greet+0x198>)
 80032c4:	f008 fa2c 	bl	800b720 <iprintf>
 80032c8:	200a      	movs	r0, #10
 80032ca:	f008 fa41 	bl	800b750 <putchar>
    printf("-------------------------------");
 80032ce:	481f      	ldr	r0, [pc, #124]	; (800334c <greet+0x19c>)
 80032d0:	f008 fa26 	bl	800b720 <iprintf>
    NL2();
 80032d4:	481e      	ldr	r0, [pc, #120]	; (8003350 <greet+0x1a0>)
 80032d6:	f008 fabf 	bl	800b858 <puts>
    TERMINAL_FONT_DEFAULT();
 80032da:	481e      	ldr	r0, [pc, #120]	; (8003354 <greet+0x1a4>)
 80032dc:	f008 fa20 	bl	800b720 <iprintf>
    PRINT_CLI_NAME();
 80032e0:	481d      	ldr	r0, [pc, #116]	; (8003358 <greet+0x1a8>)
 80032e2:	f008 fa1d 	bl	800b720 <iprintf>
    TERMINAL_SHOW_CURSOR();
 80032e6:	481d      	ldr	r0, [pc, #116]	; (800335c <greet+0x1ac>)
 80032e8:	f008 fa1a 	bl	800b720 <iprintf>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800f094 	.word	0x0800f094
 80032f4:	0800f09c 	.word	0x0800f09c
 80032f8:	0800f0a4 	.word	0x0800f0a4
 80032fc:	0800f0a8 	.word	0x0800f0a8
 8003300:	0800f0b0 	.word	0x0800f0b0
 8003304:	0800f100 	.word	0x0800f100
 8003308:	0800f150 	.word	0x0800f150
 800330c:	0800f1a4 	.word	0x0800f1a4
 8003310:	0800f1f8 	.word	0x0800f1f8
 8003314:	0800f24c 	.word	0x0800f24c
 8003318:	0800f2a0 	.word	0x0800f2a0
 800331c:	0800f2f4 	.word	0x0800f2f4
 8003320:	0800f34c 	.word	0x0800f34c
 8003324:	0800f3a4 	.word	0x0800f3a4
 8003328:	0800f3f8 	.word	0x0800f3f8
 800332c:	0800f448 	.word	0x0800f448
 8003330:	0800f498 	.word	0x0800f498
 8003334:	0800f4e8 	.word	0x0800f4e8
 8003338:	0800f538 	.word	0x0800f538
 800333c:	0800f5a0 	.word	0x0800f5a0
 8003340:	0800f61c 	.word	0x0800f61c
 8003344:	0800f694 	.word	0x0800f694
 8003348:	0800f6cc 	.word	0x0800f6cc
 800334c:	0800f70c 	.word	0x0800f70c
 8003350:	0800f72c 	.word	0x0800f72c
 8003354:	0800f730 	.word	0x0800f730
 8003358:	0800ef4c 	.word	0x0800ef4c
 800335c:	0800effc 	.word	0x0800effc

08003360 <cli_help>:
  * @brief  printf the help info.
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_help(int argc, char *argv[])
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	if(argc == 1){
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d13e      	bne.n	80033ee <cli_help+0x8e>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e036      	b.n	80033e4 <cli_help+0x84>
	    	if(strcmp(CLI_commands[i].pCmd, "") != 0){
 8003376:	494a      	ldr	r1, [pc, #296]	; (80034a0 <cli_help+0x140>)
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d028      	beq.n	80033de <cli_help+0x7e>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 800338c:	4944      	ldr	r1, [pc, #272]	; (80034a0 <cli_help+0x140>)
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	4841      	ldr	r0, [pc, #260]	; (80034a4 <cli_help+0x144>)
 80033a0:	f008 f9be 	bl	800b720 <iprintf>
 80033a4:	200a      	movs	r0, #10
 80033a6:	f008 f9d3 	bl	800b750 <putchar>
		        if (CLI_commands[i].pHelp) {
 80033aa:	493d      	ldr	r1, [pc, #244]	; (80034a0 <cli_help+0x140>)
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <cli_help+0x7e>
		            printf(CLI_commands[i].pHelp);NL2();
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <cli_help+0x140>)
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3304      	adds	r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f008 f9a4 	bl	800b720 <iprintf>
 80033d8:	4833      	ldr	r0, [pc, #204]	; (80034a8 <cli_help+0x148>)
 80033da:	f008 fa3d 	bl	800b858 <puts>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b1f      	cmp	r3, #31
 80033e8:	d9c5      	bls.n	8003376 <cli_help+0x16>
		        }
	    	}
	    }
	    return EXIT_SUCCESS;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e053      	b.n	8003496 <cli_help+0x136>
	}else if(argc == 2){
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d146      	bne.n	8003482 <cli_help+0x122>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	e034      	b.n	8003464 <cli_help+0x104>
	    	if(strcmp(CLI_commands[i].pCmd, argv[1]) == 0){
 80033fa:	4929      	ldr	r1, [pc, #164]	; (80034a0 <cli_help+0x140>)
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	3304      	adds	r3, #4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7fc ff54 	bl	80002c0 <strcmp>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11f      	bne.n	800345e <cli_help+0xfe>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 800341e:	4920      	ldr	r1, [pc, #128]	; (80034a0 <cli_help+0x140>)
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4619      	mov	r1, r3
 8003430:	481c      	ldr	r0, [pc, #112]	; (80034a4 <cli_help+0x144>)
 8003432:	f008 f975 	bl	800b720 <iprintf>
 8003436:	200a      	movs	r0, #10
 8003438:	f008 f98a 	bl	800b750 <putchar>
	    		printf(CLI_commands[i].pHelp);NL1();
 800343c:	4918      	ldr	r1, [pc, #96]	; (80034a0 <cli_help+0x140>)
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f008 f966 	bl	800b720 <iprintf>
 8003454:	200a      	movs	r0, #10
 8003456:	f008 f97b 	bl	800b750 <putchar>
	    		return EXIT_SUCCESS;
 800345a:	2300      	movs	r3, #0
 800345c:	e01b      	b.n	8003496 <cli_help+0x136>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3301      	adds	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b1f      	cmp	r3, #31
 8003468:	d9c7      	bls.n	80033fa <cli_help+0x9a>
	    	}
	    }
	    printf("No help found for command %s.", argv[1]);NL1();
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3304      	adds	r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	480e      	ldr	r0, [pc, #56]	; (80034ac <cli_help+0x14c>)
 8003474:	f008 f954 	bl	800b720 <iprintf>
 8003478:	200a      	movs	r0, #10
 800347a:	f008 f969 	bl	800b750 <putchar>
	    return EXIT_FAILURE;
 800347e:	2301      	movs	r3, #1
 8003480:	e009      	b.n	8003496 <cli_help+0x136>
	}else{
		printf("Command \"%s\" takes at most 1 argument.", argv[0]);NL1();
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <cli_help+0x150>)
 800348a:	f008 f949 	bl	800b720 <iprintf>
 800348e:	200a      	movs	r0, #10
 8003490:	f008 f95e 	bl	800b750 <putchar>
		return EXIT_FAILURE;
 8003494:	2301      	movs	r3, #1
	}
    return EXIT_FAILURE;
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000410 	.word	0x20000410
 80034a4:	0800f738 	.word	0x0800f738
 80034a8:	0800f72c 	.word	0x0800f72c
 80034ac:	0800f740 	.word	0x0800f740
 80034b0:	0800f760 	.word	0x0800f760

080034b4 <cli_clear>:
  * @brief  clear the screen
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_clear(int argc, char *argv[])
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	if(argc != 1){
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d00a      	beq.n	80034da <cli_clear+0x26>
		printf("command \"%s\" does not take any argument.", argv[0]);NL1();
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	480c      	ldr	r0, [pc, #48]	; (80034fc <cli_clear+0x48>)
 80034cc:	f008 f928 	bl	800b720 <iprintf>
 80034d0:	200a      	movs	r0, #10
 80034d2:	f008 f93d 	bl	800b750 <putchar>
		return EXIT_FAILURE;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00c      	b.n	80034f4 <cli_clear+0x40>
	}
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 80034da:	4809      	ldr	r0, [pc, #36]	; (8003500 <cli_clear+0x4c>)
 80034dc:	f008 f920 	bl	800b720 <iprintf>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <cli_clear+0x50>)
 80034e2:	f008 f91d 	bl	800b720 <iprintf>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <cli_clear+0x54>)
 80034e8:	f008 f91a 	bl	800b720 <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 80034ec:	4807      	ldr	r0, [pc, #28]	; (800350c <cli_clear+0x58>)
 80034ee:	f008 f917 	bl	800b720 <iprintf>

    return EXIT_SUCCESS;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	0800f788 	.word	0x0800f788
 8003500:	0800f094 	.word	0x0800f094
 8003504:	0800f730 	.word	0x0800f730
 8003508:	0800f0a4 	.word	0x0800f0a4
 800350c:	0800f09c 	.word	0x0800f09c

08003510 <cli_reset>:
  * @brief  MCU reboot
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_reset(int argc, char *argv[])
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
	if(argc > 1){
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b01      	cmp	r3, #1
 800351e:	dd0a      	ble.n	8003536 <cli_reset+0x26>
		printf("Command \"%s\" takes no argument.", argv[0]);NL1();
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	480c      	ldr	r0, [pc, #48]	; (8003558 <cli_reset+0x48>)
 8003528:	f008 f8fa 	bl	800b720 <iprintf>
 800352c:	200a      	movs	r0, #10
 800352e:	f008 f90f 	bl	800b750 <putchar>
		return EXIT_FAILURE;
 8003532:	2301      	movs	r3, #1
 8003534:	e00b      	b.n	800354e <cli_reset+0x3e>
	}

	NL1();printf("[END]: System Rebooting");NL1();
 8003536:	200a      	movs	r0, #10
 8003538:	f008 f90a 	bl	800b750 <putchar>
 800353c:	4807      	ldr	r0, [pc, #28]	; (800355c <cli_reset+0x4c>)
 800353e:	f008 f8ef 	bl	800b720 <iprintf>
 8003542:	200a      	movs	r0, #10
 8003544:	f008 f904 	bl	800b750 <putchar>
	HAL_NVIC_SystemReset();
 8003548:	f000 fe11 	bl	800416e <HAL_NVIC_SystemReset>
	return EXIT_SUCCESS;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800f7b4 	.word	0x0800f7b4
 800355c:	0800f7d4 	.word	0x0800f7d4

08003560 <cli_add_command>:

void cli_add_command(const char *command, const char *help, uint8_t (*exec)(int argc, char *argv[])){
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
	for(; i < MAX_COMMAND_NB; i++){
 8003570:	e02b      	b.n	80035ca <cli_add_command+0x6a>
		if(strcmp(CLI_commands[i].pCmd, "") == 0){
 8003572:	4929      	ldr	r1, [pc, #164]	; (8003618 <cli_add_command+0xb8>)
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11d      	bne.n	80035c4 <cli_add_command+0x64>
			CLI_commands[i].pCmd = command;
 8003588:	4923      	ldr	r1, [pc, #140]	; (8003618 <cli_add_command+0xb8>)
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pFun = exec;
 800359a:	491f      	ldr	r1, [pc, #124]	; (8003618 <cli_add_command+0xb8>)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3308      	adds	r3, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pHelp = help;
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <cli_add_command+0xb8>)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3304      	adds	r3, #4
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	601a      	str	r2, [r3, #0]
			break;
 80035c2:	e005      	b.n	80035d0 <cli_add_command+0x70>
	for(; i < MAX_COMMAND_NB; i++){
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3301      	adds	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b1f      	cmp	r3, #31
 80035ce:	d9d0      	bls.n	8003572 <cli_add_command+0x12>
		}
	}
	if(i == MAX_COMMAND_NB){
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d10f      	bne.n	80035f6 <cli_add_command+0x96>
		ERR("Cannot add command %s, max number of commands "
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <cli_add_command+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68d8      	ldr	r0, [r3, #12]
 80035dc:	2320      	movs	r3, #32
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f240 237d 	movw	r3, #637	; 0x27d
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <cli_add_command+0xc0>)
 80035ea:	490e      	ldr	r1, [pc, #56]	; (8003624 <cli_add_command+0xc4>)
 80035ec:	f006 ff3a 	bl	800a464 <fiprintf>
				"reached. The maximum number of command is set to %d.\n" CLI_FONT_DEFAULT,
				command, MAX_COMMAND_NB); NL1();
 80035f0:	200a      	movs	r0, #10
 80035f2:	f008 f8ad 	bl	800b750 <putchar>
	}
	LOG(CLI_LOG_SHELL, "Command %s added to shell.\n", command);
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <cli_add_command+0xc8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <cli_add_command+0xb0>
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <cli_add_command+0xcc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4619      	mov	r1, r3
 800360a:	4809      	ldr	r0, [pc, #36]	; (8003630 <cli_add_command+0xd0>)
 800360c:	f008 f888 	bl	800b720 <iprintf>
}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000410 	.word	0x20000410
 800361c:	2000002c 	.word	0x2000002c
 8003620:	0800f7ec 	.word	0x0800f7ec
 8003624:	0800f80c 	.word	0x0800f80c
 8003628:	2000001c 	.word	0x2000001c
 800362c:	20000000 	.word	0x20000000
 8003630:	0800f894 	.word	0x0800f894

08003634 <cli_log>:

uint8_t cli_log(int argc, char *argv[]){
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
	if(argc < 2){
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	dc09      	bgt.n	8003658 <cli_log+0x24>
		printf("Command %s takes at least one argument. Use \"help %s\" for usage.\n", argv[0], argv[0]);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4859      	ldr	r0, [pc, #356]	; (80037b4 <cli_log+0x180>)
 8003650:	f008 f866 	bl	800b720 <iprintf>
		return EXIT_FAILURE;
 8003654:	2301      	movs	r3, #1
 8003656:	e0a8      	b.n	80037aa <cli_log+0x176>
	}

	if(strcmp(argv[1], "on") == 0){
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	3304      	adds	r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4956      	ldr	r1, [pc, #344]	; (80037b8 <cli_log+0x184>)
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fe2d 	bl	80002c0 <strcmp>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d131      	bne.n	80036d0 <cli_log+0x9c>
		if(argc < 3){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	dc07      	bgt.n	8003682 <cli_log+0x4e>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4619      	mov	r1, r3
 8003678:	4850      	ldr	r0, [pc, #320]	; (80037bc <cli_log+0x188>)
 800367a:	f008 f851 	bl	800b720 <iprintf>
			return EXIT_FAILURE;
 800367e:	2301      	movs	r3, #1
 8003680:	e093      	b.n	80037aa <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <cli_log+0x18c>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc fe18 	bl	80002c0 <strcmp>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <cli_log+0x74>
			cli_log_stat = 0xFFFFFFFF;
 8003696:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <cli_log+0x190>)
 8003698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800369c:	601a      	str	r2, [r3, #0]
			printf("All logs enabled.\n");
 800369e:	484a      	ldr	r0, [pc, #296]	; (80037c8 <cli_log+0x194>)
 80036a0:	f008 f8da 	bl	800b858 <puts>
			return EXIT_SUCCESS;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e080      	b.n	80037aa <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 80036a8:	2302      	movs	r3, #2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e00a      	b.n	80036c4 <cli_log+0x90>
				cli_enable_log_entry(argv[i]);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f8c9 	bl	8003850 <cli_enable_log_entry>
			for(int i = 2; i < argc; i++){
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3301      	adds	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dbf0      	blt.n	80036ae <cli_log+0x7a>
			}
			return EXIT_SUCCESS;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e06c      	b.n	80037aa <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "off") == 0){
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	3304      	adds	r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	493d      	ldr	r1, [pc, #244]	; (80037cc <cli_log+0x198>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc fdf1 	bl	80002c0 <strcmp>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d133      	bne.n	800374c <cli_log+0x118>
		printf("Turning off all logs\n");
 80036e4:	483a      	ldr	r0, [pc, #232]	; (80037d0 <cli_log+0x19c>)
 80036e6:	f008 f8b7 	bl	800b858 <puts>
		if(argc < 3){
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	dc07      	bgt.n	8003700 <cli_log+0xcc>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	4831      	ldr	r0, [pc, #196]	; (80037bc <cli_log+0x188>)
 80036f8:	f008 f812 	bl	800b720 <iprintf>
			return EXIT_FAILURE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e054      	b.n	80037aa <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	492e      	ldr	r1, [pc, #184]	; (80037c0 <cli_log+0x18c>)
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fdd9 	bl	80002c0 <strcmp>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <cli_log+0xf0>
			cli_log_stat = 0;
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <cli_log+0x190>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
			printf("All logs disabled.\n");
 800371a:	482e      	ldr	r0, [pc, #184]	; (80037d4 <cli_log+0x1a0>)
 800371c:	f008 f89c 	bl	800b858 <puts>
			return EXIT_SUCCESS;
 8003720:	2300      	movs	r3, #0
 8003722:	e042      	b.n	80037aa <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 8003724:	2302      	movs	r3, #2
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e00a      	b.n	8003740 <cli_log+0x10c>
				cli_disable_log_entry(argv[i]);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4413      	add	r3, r2
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f859 	bl	80037ec <cli_disable_log_entry>
			for(int i = 2; i < argc; i++){
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3301      	adds	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	dbf0      	blt.n	800372a <cli_log+0xf6>
			}
			return EXIT_SUCCESS;
 8003748:	2300      	movs	r3, #0
 800374a:	e02e      	b.n	80037aa <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "show") == 0){
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4921      	ldr	r1, [pc, #132]	; (80037d8 <cli_log+0x1a4>)
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fdb3 	bl	80002c0 <strcmp>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d123      	bne.n	80037a8 <cli_log+0x174>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e01b      	b.n	800379e <cli_log+0x16a>
			printf("%16s:\t", cli_logs_names[i]);
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <cli_log+0x1a8>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	4619      	mov	r1, r3
 8003770:	481b      	ldr	r0, [pc, #108]	; (80037e0 <cli_log+0x1ac>)
 8003772:	f007 ffd5 	bl	800b720 <iprintf>
			if(cli_log_stat&(1<<i)){
 8003776:	2201      	movs	r2, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	461a      	mov	r2, r3
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <cli_log+0x190>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <cli_log+0x15e>
				printf(CLI_FONT_GREEN"Enabled"CLI_FONT_DEFAULT"\n");
 800378a:	4816      	ldr	r0, [pc, #88]	; (80037e4 <cli_log+0x1b0>)
 800378c:	f008 f864 	bl	800b858 <puts>
 8003790:	e002      	b.n	8003798 <cli_log+0x164>
			}else{
				printf(CLI_FONT_RED"Disabled"CLI_FONT_DEFAULT"\n");
 8003792:	4815      	ldr	r0, [pc, #84]	; (80037e8 <cli_log+0x1b4>)
 8003794:	f008 f860 	bl	800b858 <puts>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3301      	adds	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	d9e0      	bls.n	8003766 <cli_log+0x132>
			}
		}
		return EXIT_SUCCESS;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <cli_log+0x176>
	}

	return EXIT_FAILURE;
 80037a8:	2301      	movs	r3, #1
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	0800f8c4 	.word	0x0800f8c4
 80037b8:	0800f908 	.word	0x0800f908
 80037bc:	0800f90c 	.word	0x0800f90c
 80037c0:	0800f938 	.word	0x0800f938
 80037c4:	2000001c 	.word	0x2000001c
 80037c8:	0800f93c 	.word	0x0800f93c
 80037cc:	0800f950 	.word	0x0800f950
 80037d0:	0800f954 	.word	0x0800f954
 80037d4:	0800f96c 	.word	0x0800f96c
 80037d8:	0800f980 	.word	0x0800f980
 80037dc:	20000000 	.word	0x20000000
 80037e0:	0800f988 	.word	0x0800f988
 80037e4:	0800f990 	.word	0x0800f990
 80037e8:	0800f9a8 	.word	0x0800f9a8

080037ec <cli_disable_log_entry>:

void cli_disable_log_entry(char *str){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e01c      	b.n	8003834 <cli_disable_log_entry+0x48>
		if(strcmp(str, cli_logs_names[i]) == 0){
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <cli_disable_log_entry+0x58>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fc fd5b 	bl	80002c0 <strcmp>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <cli_disable_log_entry+0x42>
			printf("LOG disabled for category %s.\n", str);
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	480d      	ldr	r0, [pc, #52]	; (8003848 <cli_disable_log_entry+0x5c>)
 8003814:	f007 ff84 	bl	800b720 <iprintf>
			cli_log_stat &= ~(1<<i);
 8003818:	2201      	movs	r2, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <cli_disable_log_entry+0x60>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4013      	ands	r3, r2
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <cli_disable_log_entry+0x60>)
 800382c:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d9df      	bls.n	80037fa <cli_disable_log_entry+0xe>
		}
	}
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000000 	.word	0x20000000
 8003848:	0800f9c0 	.word	0x0800f9c0
 800384c:	2000001c 	.word	0x2000001c

08003850 <cli_enable_log_entry>:

void cli_enable_log_entry(char *str){
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e01b      	b.n	8003896 <cli_enable_log_entry+0x46>
		if(strcmp(str, cli_logs_names[i]) == 0){
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <cli_enable_log_entry+0x58>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fc fd29 	bl	80002c0 <strcmp>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10d      	bne.n	8003890 <cli_enable_log_entry+0x40>
			printf("LOG enabled for category %s.\n", str);
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	480d      	ldr	r0, [pc, #52]	; (80038ac <cli_enable_log_entry+0x5c>)
 8003878:	f007 ff52 	bl	800b720 <iprintf>
			cli_log_stat |= (1<<i);
 800387c:	2201      	movs	r2, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	461a      	mov	r2, r3
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <cli_enable_log_entry+0x60>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <cli_enable_log_entry+0x60>)
 800388e:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3301      	adds	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d9e0      	bls.n	800385e <cli_enable_log_entry+0xe>
		}
	}
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000
 80038ac:	0800f9e0 	.word	0x0800f9e0
 80038b0:	2000001c 	.word	0x2000001c

080038b4 <shell_queue_init>:
 * @brief  shell_queue_init inits the contents of the queue to zeros
 * @param  queue
 * @retval True
 */
uint8_t shell_queue_init(shell_queue_s *queue)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = 0;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]

    memset(queue->PBase, 0, SHELL_QUEUE_LENGTH);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3308      	adds	r3, #8
 80038ce:	2220      	movs	r2, #32
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f006 fe68 	bl	800a5a8 <memset>

    return true;
 80038d8:	2301      	movs	r3, #1
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <shell_queue_full>:
 * @brief  shell_queue_full checks if the queue is full
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_full(shell_queue_s *queue)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    if((((queue->Rear) + 1) % SHELL_QUEUE_LENGTH) == queue->Front) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d101      	bne.n	8003900 <shell_queue_full+0x1e>
        return true;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <shell_queue_full+0x20>
    } else {
        return false;
 8003900:	2300      	movs	r3, #0
    }
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <shell_queue_empty>:
 * @brief  shell_queue_empty checks if the queue is empty
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_empty(shell_queue_s *queue)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
    if(queue->Front == queue->Rear) {
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	d101      	bne.n	8003926 <shell_queue_empty+0x18>
        return true;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <shell_queue_empty+0x1a>
    } else {
        return false;
 8003926:	2300      	movs	r3, #0
    }
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <shell_queue_in>:
 * @brief  shell_queue_in inserts a byte in the queue
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_in(shell_queue_s *queue, uint8_t *PData)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]

    if(shell_queue_full(queue)) {
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffcf 	bl	80038e2 <shell_queue_full>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <shell_queue_in+0x1a>
        return false;
 800394a:	2300      	movs	r3, #0
 800394c:	e00f      	b.n	800396e <shell_queue_in+0x3a>
    }

    queue->PBase[queue->Rear] = *PData;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	7811      	ldrb	r1, [r2, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	460a      	mov	r2, r1
 800395c:	721a      	strb	r2, [r3, #8]
    queue->Rear = ((queue->Rear) + 1) % SHELL_QUEUE_LENGTH;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	3301      	adds	r3, #1
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	605a      	str	r2, [r3, #4]

    return true;
 800396c:	2301      	movs	r3, #1
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <shell_queue_out>:
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */

uint8_t shell_queue_out(shell_queue_s *queue, uint8_t *PData)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
    if(shell_queue_empty(queue)) {
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ffc4 	bl	800390e <shell_queue_empty>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <shell_queue_out+0x1a>
        return false;
 800398c:	2300      	movs	r3, #0
 800398e:	e00e      	b.n	80039ae <shell_queue_out+0x38>
    }

    *PData = queue->PBase[queue->Front];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	7a1a      	ldrb	r2, [r3, #8]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	701a      	strb	r2, [r3, #0]
    queue->Front = ((queue->Front) + 1) % SHELL_QUEUE_LENGTH;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]

    return true;
 80039ac:	2301      	movs	r3, #1
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
	return 1;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <_kill>:

int _kill(int pid, int sig)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039d0:	f006 fb98 	bl	800a104 <__errno>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2216      	movs	r2, #22
 80039d8:	601a      	str	r2, [r3, #0]
	return -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_exit>:

void _exit (int status)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ffe7 	bl	80039c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039f8:	e7fe      	b.n	80039f8 <_exit+0x12>

080039fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e00a      	b.n	8003a22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a0c:	f3af 8000 	nop.w
 8003a10:	4601      	mov	r1, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	60ba      	str	r2, [r7, #8]
 8003a18:	b2ca      	uxtb	r2, r1
 8003a1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	dbf0      	blt.n	8003a0c <_read+0x12>
	}

return len;
 8003a2a:	687b      	ldr	r3, [r7, #4]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	return -1;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a5c:	605a      	str	r2, [r3, #4]
	return 0;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_isatty>:

int _isatty(int file)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	return 1;
 8003a74:	2301      	movs	r3, #1
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
	return 0;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <_sbrk+0x5c>)
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <_sbrk+0x60>)
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <_sbrk+0x64>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <_sbrk+0x64>)
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <_sbrk+0x68>)
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <_sbrk+0x64>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d207      	bcs.n	8003adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003acc:	f006 fb1a 	bl	800a104 <__errno>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ada:	e009      	b.n	8003af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <_sbrk+0x64>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <_sbrk+0x64>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <_sbrk+0x64>)
 8003aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20020000 	.word	0x20020000
 8003afc:	00000400 	.word	0x00000400
 8003b00:	2000090c 	.word	0x2000090c
 8003b04:	20000928 	.word	0x20000928

08003b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <SystemInit+0x20>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <SystemInit+0x20>)
 8003b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b2c:	480d      	ldr	r0, [pc, #52]	; (8003b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b32:	490e      	ldr	r1, [pc, #56]	; (8003b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b34:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <LoopForever+0xe>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b38:	e002      	b.n	8003b40 <LoopCopyDataInit>

08003b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b3e:	3304      	adds	r3, #4

08003b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b44:	d3f9      	bcc.n	8003b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b48:	4c0b      	ldr	r4, [pc, #44]	; (8003b78 <LoopForever+0x16>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b4c:	e001      	b.n	8003b52 <LoopFillZerobss>

08003b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b50:	3204      	adds	r2, #4

08003b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b54:	d3fb      	bcc.n	8003b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b56:	f7ff ffd7 	bl	8003b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b5a:	f006 fcb5 	bl	800a4c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b5e:	f7fe f883 	bl	8001c68 <main>

08003b62 <LoopForever>:

LoopForever:
    b LoopForever
 8003b62:	e7fe      	b.n	8003b62 <LoopForever>
  ldr   r0, =_estack
 8003b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b6c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003b70:	080100a0 	.word	0x080100a0
  ldr r2, =_sbss
 8003b74:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003b78:	20000928 	.word	0x20000928

08003b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b7c:	e7fe      	b.n	8003b7c <ADC1_2_IRQHandler>
	...

08003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>:
#include "stm32g4xx_hal_gpio.h"
#include "math.h"
namespace Init{

double read_tilt_angle(ICM20948_WE myIMU)
{
 8003b80:	b084      	sub	sp, #16
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	f107 0c20 	add.w	ip, r7, #32
 8003b8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  myIMU.readSensor();
 8003b90:	f107 0020 	add.w	r0, r7, #32
 8003b94:	f7fd fc6e 	bl	8001474 <_ZN11ICM20948_WE10readSensorEv>
	  myIMU.getAccRawValues();
 8003b98:	f107 0020 	add.w	r0, r7, #32
 8003b9c:	f7fd fc78 	bl	8001490 <_ZN11ICM20948_WE15getAccRawValuesEv>
 8003ba0:	eef0 6a40 	vmov.f32	s13, s0
 8003ba4:	eeb0 7a60 	vmov.f32	s14, s1
 8003ba8:	eef0 7a41 	vmov.f32	s15, s2
 8003bac:	edc7 6a03 	vstr	s13, [r7, #12]
 8003bb0:	ed87 7a04 	vstr	s14, [r7, #16]
 8003bb4:	edc7 7a05 	vstr	s15, [r7, #20]
	  auto val = myIMU.getGValues();
 8003bb8:	f107 0020 	add.w	r0, r7, #32
 8003bbc:	f7fd fd08 	bl	80015d0 <_ZN11ICM20948_WE10getGValuesEv>
 8003bc0:	eef0 6a40 	vmov.f32	s13, s0
 8003bc4:	eeb0 7a60 	vmov.f32	s14, s1
 8003bc8:	eef0 7a41 	vmov.f32	s15, s2
 8003bcc:	edc7 6a00 	vstr	s13, [r7]
 8003bd0:	ed87 7a01 	vstr	s14, [r7, #4]
 8003bd4:	edc7 7a02 	vstr	s15, [r7, #8]
	  return asin(val.z/1)*180/3.14159265;
 8003bd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003be0:	f7fd fb09 	bl	80011f6 <_ZSt4asinf>
 8003be4:	eef0 7a40 	vmov.f32	s15, s0
 8003be8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003c28 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xa8>
 8003bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf0:	ee17 0a90 	vmov	r0, s15
 8003bf4:	f7fc fcda 	bl	80005ac <__aeabi_f2d>
 8003bf8:	a309      	add	r3, pc, #36	; (adr r3, 8003c20 <_ZN4Init15read_tilt_angleE11ICM20948_WE+0xa0>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc fe57 	bl	80008b0 <__aeabi_ddiv>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c0e:	eef0 0a67 	vmov.f32	s1, s15
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1a:	b004      	add	sp, #16
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	53c8d4f1 	.word	0x53c8d4f1
 8003c24:	400921fb 	.word	0x400921fb
 8003c28:	43340000 	.word	0x43340000

08003c2c <_ZN4Init14sensor_checkupE11ICM20948_WE>:

LightBarrierCheck sensor_checkup(ICM20948_WE myIMU)
{
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	b5b0      	push	{r4, r5, r7, lr}
 8003c30:	b092      	sub	sp, #72	; 0x48
 8003c32:	af0e      	add	r7, sp, #56	; 0x38
 8003c34:	f107 0420 	add.w	r4, r7, #32
 8003c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LightBarrierCheck ret;
	  // Alle sensoren testen:
	  // Distanz-Sensor:
	  double tilt_angle = read_tilt_angle(myIMU);
 8003c3c:	466d      	mov	r5, sp
 8003c3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c56:	f107 0320 	add.w	r3, r7, #32
 8003c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c5c:	f7ff ff90 	bl	8003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8003c60:	ed87 0b00 	vstr	d0, [r7]
	  if(read_tilt_angle(myIMU) > 0)
 8003c64:	466d      	mov	r5, sp
 8003c66:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c7e:	f107 0320 	add.w	r3, r7, #32
 8003c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c84:	f7ff ff7c 	bl	8003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8003c88:	ec51 0b10 	vmov	r0, r1, d0
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	461c      	mov	r4, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f7fc ff70 	bl	8000b7c <__aeabi_dcmpgt>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x7a>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	b2e3      	uxtb	r3, r4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d033      	beq.n	8003d14 <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe8>
	  {
	  //	// Sensor senken, bis untere Kalibrierposition -30° erreicht ist
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cb2:	483c      	ldr	r0, [pc, #240]	; (8003da4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8003cb4:	f000 fe74 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2104      	movs	r1, #4
 8003cbc:	483a      	ldr	r0, [pc, #232]	; (8003da8 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 8003cbe:	f000 fe6f 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 8003cc2:	200a      	movs	r0, #10
 8003cc4:	f000 f8e6 	bl	8003e94 <HAL_Delay>
	  	  ret = LightBarrierCheck::RightLBTriggered;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
	  	while(read_tilt_angle(myIMU) > -23);
 8003ccc:	466d      	mov	r5, sp
 8003cce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce6:	f107 0320 	add.w	r3, r7, #32
 8003cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cec:	f7ff ff48 	bl	8003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8003cf0:	ec51 0b10 	vmov	r0, r1, d0
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <_ZN4Init14sensor_checkupE11ICM20948_WE+0x180>)
 8003cfe:	f7fc ff3d 	bl	8000b7c <__aeabi_dcmpgt>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <_ZN4Init14sensor_checkupE11ICM20948_WE+0xe0>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	b2e3      	uxtb	r3, r4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d034      	beq.n	8003d7c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 8003d12:	e7db      	b.n	8003ccc <_ZN4Init14sensor_checkupE11ICM20948_WE+0xa0>
	  }
	  else
	  {
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8003d14:	2201      	movs	r2, #1
 8003d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d1a:	4822      	ldr	r0, [pc, #136]	; (8003da4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8003d1c:	f000 fe40 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8003d20:	2200      	movs	r2, #0
 8003d22:	2104      	movs	r1, #4
 8003d24:	4820      	ldr	r0, [pc, #128]	; (8003da8 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 8003d26:	f000 fe3b 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  HAL_Delay(10);
 8003d2a:	200a      	movs	r0, #10
 8003d2c:	f000 f8b2 	bl	8003e94 <HAL_Delay>

	  	  ret = LightBarrierCheck::LeftLBTriggered;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
	  //	// Sensor heben, bis obere Kalibrierposition erreicht ist:
	  	while(read_tilt_angle(myIMU) < 25);
 8003d34:	466d      	mov	r5, sp
 8003d36:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4e:	f107 0320 	add.w	r3, r7, #32
 8003d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d54:	f7ff ff14 	bl	8003b80 <_ZN4Init15read_tilt_angleE11ICM20948_WE>
 8003d58:	ec51 0b10 	vmov	r0, r1, d0
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	461c      	mov	r4, r3
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x184>)
 8003d66:	f7fc feeb 	bl	8000b40 <__aeabi_dcmplt>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x148>
 8003d70:	2300      	movs	r3, #0
 8003d72:	461c      	mov	r4, r3
 8003d74:	b2e3      	uxtb	r3, r4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d000      	beq.n	8003d7c <_ZN4Init14sensor_checkupE11ICM20948_WE+0x150>
 8003d7a:	e7db      	b.n	8003d34 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x108>
	  }
	  	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d82:	4808      	ldr	r0, [pc, #32]	; (8003da4 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x178>)
 8003d84:	f000 fe0c 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	4806      	ldr	r0, [pc, #24]	; (8003da8 <_ZN4Init14sensor_checkupE11ICM20948_WE+0x17c>)
 8003d8e:	f000 fe07 	bl	80049a0 <HAL_GPIO_WritePin>
	  	  return ret;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003d9e:	b004      	add	sp, #16
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	48000800 	.word	0x48000800
 8003da8:	48000c00 	.word	0x48000c00
 8003dac:	c0370000 	.word	0xc0370000
 8003db0:	40390000 	.word	0x40390000

08003db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	f000 f994 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f000 f80d 	bl	8003de4 <HAL_InitTick>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	e001      	b.n	8003dda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dd6:	f7fe fb7d 	bl	80024d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dda:	79fb      	ldrb	r3, [r7, #7]

}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_InitTick+0x68>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d022      	beq.n	8003e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_InitTick+0x6c>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_InitTick+0x68>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f9b2 	bl	8004176 <HAL_SYSTICK_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	d809      	bhi.n	8003e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e26:	f000 f96c 	bl	8004102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_InitTick+0x70>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e007      	b.n	8003e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e004      	b.n	8003e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	e001      	b.n	8003e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000028 	.word	0x20000028
 8003e50:	20000020 	.word	0x20000020
 8003e54:	20000024 	.word	0x20000024

08003e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_IncTick+0x1c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_IncTick+0x20>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	4a03      	ldr	r2, [pc, #12]	; (8003e74 <HAL_IncTick+0x1c>)
 8003e68:	6013      	str	r3, [r2, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	20000910 	.word	0x20000910
 8003e78:	20000028 	.word	0x20000028

08003e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_GetTick+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000910 	.word	0x20000910

08003e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e9c:	f7ff ffee 	bl	8003e7c <HAL_GetTick>
 8003ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eac:	d004      	beq.n	8003eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_Delay+0x40>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eb8:	bf00      	nop
 8003eba:	f7ff ffdf 	bl	8003e7c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d8f7      	bhi.n	8003eba <HAL_Delay+0x26>
  {
  }
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000028 	.word	0x20000028

08003ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <__NVIC_GetPriorityGrouping+0x18>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	f003 0307 	and.w	r3, r3, #7
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db0b      	blt.n	8003f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <__NVIC_EnableIRQ+0x38>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	db12      	blt.n	8003fb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	490a      	ldr	r1, [pc, #40]	; (8003fbc <__NVIC_DisableIRQ+0x44>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2001      	movs	r0, #1
 8003f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9e:	3320      	adds	r3, #32
 8003fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa4:	f3bf 8f4f 	dsb	sy
}
 8003fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003faa:	f3bf 8f6f 	isb	sy
}
 8003fae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	; (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
         );
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004080:	f3bf 8f4f 	dsb	sy
}
 8004084:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <__NVIC_SystemReset+0x24>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800408e:	4904      	ldr	r1, [pc, #16]	; (80040a0 <__NVIC_SystemReset+0x24>)
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <__NVIC_SystemReset+0x28>)
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004096:	f3bf 8f4f 	dsb	sy
}
 800409a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <__NVIC_SystemReset+0x20>
 80040a0:	e000ed00 	.word	0xe000ed00
 80040a4:	05fa0004 	.word	0x05fa0004

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040cc:	f7ff ff78 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff feef 	bl	8003ed8 <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004110:	f7ff ff06 	bl	8003f20 <__NVIC_GetPriorityGrouping>
 8004114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff ff7a 	bl	8004014 <NVIC_EncodePriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff49 	bl	8003fc0 <__NVIC_SetPriority>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fef9 	bl	8003f3c <__NVIC_EnableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff09 	bl	8003f78 <__NVIC_DisableIRQ>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004172:	f7ff ff83 	bl	800407c <__NVIC_SystemReset>

08004176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff92 	bl	80040a8 <SysTick_Config>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d005      	beq.n	80041b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e037      	b.n	8004222 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 020e 	bic.w	r2, r2, #14
 80041c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f003 021f 	and.w	r2, r3, #31
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004220:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d00d      	beq.n	8004274 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2204      	movs	r2, #4
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e047      	b.n	8004304 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
    }
  }
  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e147      	b.n	80045b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fe f8f0 	bl	800251c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800434c:	f7ff fd96 	bl	8003e7c <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004352:	e012      	b.n	800437a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004354:	f7ff fd92 	bl	8003e7c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b0a      	cmp	r3, #10
 8004360:	d90b      	bls.n	800437a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e11b      	b.n	80045b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d0e5      	beq.n	8004354 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004398:	f7ff fd70 	bl	8003e7c <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800439e:	e012      	b.n	80043c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043a0:	f7ff fd6c 	bl	8003e7c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b0a      	cmp	r3, #10
 80043ac:	d90b      	bls.n	80043c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0f5      	b.n	80045b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0e5      	beq.n	80043a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0202 	orr.w	r2, r2, #2
 80043e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a74      	ldr	r2, [pc, #464]	; (80045bc <HAL_FDCAN_Init+0x2ac>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d103      	bne.n	80043f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80043ee:	4a74      	ldr	r2, [pc, #464]	; (80045c0 <HAL_FDCAN_Init+0x2b0>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7c1b      	ldrb	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	619a      	str	r2, [r3, #24]
 800440e:	e007      	b.n	8004420 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800441e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7c5b      	ldrb	r3, [r3, #17]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d108      	bne.n	800443a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004436:	619a      	str	r2, [r3, #24]
 8004438:	e007      	b.n	800444a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004448:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7c9b      	ldrb	r3, [r3, #18]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d108      	bne.n	8004464 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004460:	619a      	str	r2, [r3, #24]
 8004462:	e007      	b.n	8004474 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004472:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004498:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0210 	bic.w	r2, r2, #16
 80044a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d108      	bne.n	80044c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0204 	orr.w	r2, r2, #4
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	e02c      	b.n	800451e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d028      	beq.n	800451e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d01c      	beq.n	800450e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0210 	orr.w	r2, r2, #16
 80044f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d110      	bne.n	800451e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0220 	orr.w	r2, r2, #32
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	e007      	b.n	800451e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0220 	orr.w	r2, r2, #32
 800451c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	3b01      	subs	r3, #1
 8004524:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	3b01      	subs	r3, #1
 800452c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800452e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004536:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	3b01      	subs	r3, #1
 8004540:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004546:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004548:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004552:	d115      	bne.n	8004580 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	3b01      	subs	r3, #1
 8004560:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004562:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	3b01      	subs	r3, #1
 800456a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800456c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	3b01      	subs	r3, #1
 8004576:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800457c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800457e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f814 	bl	80045c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40006400 	.word	0x40006400
 80045c0:	40006500 	.word	0x40006500

080045c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80045ce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d103      	bne.n	80045e2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80045e0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80045f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	041a      	lsls	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004628:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	061a      	lsls	r2, r3, #24
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e005      	b.n	8004676 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3304      	adds	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d3f3      	bcc.n	800466a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	4000a400 	.word	0x4000a400
 8004694:	40006800 	.word	0x40006800
 8004698:	40006c00 	.word	0x40006c00

0800469c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046aa:	e15a      	b.n	8004962 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	4013      	ands	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 814c 	beq.w	800495c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d005      	beq.n	80046dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d130      	bne.n	800473e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004712:	2201      	movs	r2, #1
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0201 	and.w	r2, r3, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d017      	beq.n	800477a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d123      	bne.n	80047ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	08da      	lsrs	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3208      	adds	r2, #8
 800478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	220f      	movs	r2, #15
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	08da      	lsrs	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3208      	adds	r2, #8
 80047c8:	6939      	ldr	r1, [r7, #16]
 80047ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a6 	beq.w	800495c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004810:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <HAL_GPIO_Init+0x2e4>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	4a5a      	ldr	r2, [pc, #360]	; (8004980 <HAL_GPIO_Init+0x2e4>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6613      	str	r3, [r2, #96]	; 0x60
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_GPIO_Init+0x2e4>)
 800481e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004828:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_GPIO_Init+0x2e8>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3302      	adds	r3, #2
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	220f      	movs	r2, #15
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004852:	d01f      	beq.n	8004894 <HAL_GPIO_Init+0x1f8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a4c      	ldr	r2, [pc, #304]	; (8004988 <HAL_GPIO_Init+0x2ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d019      	beq.n	8004890 <HAL_GPIO_Init+0x1f4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a4b      	ldr	r2, [pc, #300]	; (800498c <HAL_GPIO_Init+0x2f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_GPIO_Init+0x1f0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_GPIO_Init+0x2f4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00d      	beq.n	8004888 <HAL_GPIO_Init+0x1ec>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a49      	ldr	r2, [pc, #292]	; (8004994 <HAL_GPIO_Init+0x2f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <HAL_GPIO_Init+0x1e8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a48      	ldr	r2, [pc, #288]	; (8004998 <HAL_GPIO_Init+0x2fc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_GPIO_Init+0x1e4>
 800487c:	2305      	movs	r3, #5
 800487e:	e00a      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 8004880:	2306      	movs	r3, #6
 8004882:	e008      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 8004884:	2304      	movs	r3, #4
 8004886:	e006      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 8004888:	2303      	movs	r3, #3
 800488a:	e004      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 800488c:	2302      	movs	r3, #2
 800488e:	e002      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_GPIO_Init+0x1fa>
 8004894:	2300      	movs	r3, #0
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	f002 0203 	and.w	r2, r2, #3
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	4093      	lsls	r3, r2
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048a6:	4937      	ldr	r1, [pc, #220]	; (8004984 <HAL_GPIO_Init+0x2e8>)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b4:	4b39      	ldr	r3, [pc, #228]	; (800499c <HAL_GPIO_Init+0x300>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048d8:	4a30      	ldr	r2, [pc, #192]	; (800499c <HAL_GPIO_Init+0x300>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_GPIO_Init+0x300>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <HAL_GPIO_Init+0x300>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_GPIO_Init+0x300>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43db      	mvns	r3, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <HAL_GPIO_Init+0x300>)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_GPIO_Init+0x300>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43db      	mvns	r3, r3
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_GPIO_Init+0x300>)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3301      	adds	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	f47f ae9d 	bne.w	80046ac <HAL_GPIO_Init+0x10>
  }
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40021000 	.word	0x40021000
 8004984:	40010000 	.word	0x40010000
 8004988:	48000400 	.word	0x48000400
 800498c:	48000800 	.word	0x48000800
 8004990:	48000c00 	.word	0x48000c00
 8004994:	48001000 	.word	0x48001000
 8004998:	48001400 	.word	0x48001400
 800499c:	40010400 	.word	0x40010400

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e6:	4a05      	ldr	r2, [pc, #20]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f806 	bl	8004a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010400 	.word	0x40010400

08004a00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e081      	b.n	8004b2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fd fdc9 	bl	80025d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2224      	movs	r2, #36	; 0x24
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	e006      	b.n	8004a9e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d104      	bne.n	8004ab0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69d9      	ldr	r1, [r3, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	f040 80da 	bne.w	8004d0a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_I2C_Master_Transmit+0x30>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e0d3      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b6c:	f7ff f986 	bl	8003e7c <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2319      	movs	r3, #25
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f9e6 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0be      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2210      	movs	r2, #16
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	893a      	ldrh	r2, [r7, #8]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	d90e      	bls.n	8004bde <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	8979      	ldrh	r1, [r7, #10]
 8004bce:	4b51      	ldr	r3, [pc, #324]	; (8004d14 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fbdc 	bl	8005394 <I2C_TransferConfig>
 8004bdc:	e06c      	b.n	8004cb8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	4b48      	ldr	r3, [pc, #288]	; (8004d14 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fbcb 	bl	8005394 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bfe:	e05b      	b.n	8004cb8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	6a39      	ldr	r1, [r7, #32]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f9e3 	bl	8004fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e07b      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d034      	beq.n	8004cb8 <HAL_I2C_Master_Transmit+0x184>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d130      	bne.n	8004cb8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f975 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e04d      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2bff      	cmp	r3, #255	; 0xff
 8004c78:	d90e      	bls.n	8004c98 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb7f 	bl	8005394 <I2C_TransferConfig>
 8004c96:	e00f      	b.n	8004cb8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fb6e 	bl	8005394 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d19e      	bne.n	8004c00 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f9c2 	bl	8005050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e01a      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cea:	400b      	ands	r3, r1
 8004cec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	80002000 	.word	0x80002000
 8004d18:	fe00e800 	.word	0xfe00e800

08004d1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	460b      	mov	r3, r1
 8004d2a:	817b      	strh	r3, [r7, #10]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	f040 80db 	bne.w	8004ef4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_I2C_Master_Receive+0x30>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0d4      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d54:	f7ff f892 	bl	8003e7c <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2319      	movs	r3, #25
 8004d60:	2201      	movs	r2, #1
 8004d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8f2 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0bf      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2222      	movs	r2, #34	; 0x22
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2210      	movs	r2, #16
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	893a      	ldrh	r2, [r7, #8]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2bff      	cmp	r3, #255	; 0xff
 8004da6:	d90e      	bls.n	8004dc6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22ff      	movs	r2, #255	; 0xff
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	8979      	ldrh	r1, [r7, #10]
 8004db6:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <HAL_I2C_Master_Receive+0x1e4>)
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fae8 	bl	8005394 <I2C_TransferConfig>
 8004dc4:	e06d      	b.n	8004ea2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	8979      	ldrh	r1, [r7, #10]
 8004dd8:	4b49      	ldr	r3, [pc, #292]	; (8004f00 <HAL_I2C_Master_Receive+0x1e4>)
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fad7 	bl	8005394 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004de6:	e05c      	b.n	8004ea2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f96b 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e07c      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d034      	beq.n	8004ea2 <HAL_I2C_Master_Receive+0x186>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d130      	bne.n	8004ea2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f880 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e04d      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2bff      	cmp	r3, #255	; 0xff
 8004e62:	d90e      	bls.n	8004e82 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	8979      	ldrh	r1, [r7, #10]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa8a 	bl	8005394 <I2C_TransferConfig>
 8004e80:	e00f      	b.n	8004ea2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	8979      	ldrh	r1, [r7, #10]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa79 	bl	8005394 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d19d      	bne.n	8004de8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	6a39      	ldr	r1, [r7, #32]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8cd 	bl	8005050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01a      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_I2C_Master_Receive+0x1e8>)
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
  }
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	80002400 	.word	0x80002400
 8004f04:	fe00e800 	.word	0xfe00e800

08004f08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d103      	bne.n	8004f26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d007      	beq.n	8004f44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	619a      	str	r2, [r3, #24]
  }
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f60:	e022      	b.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f68:	d01e      	beq.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6a:	f7fe ff87 	bl	8003e7c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d113      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e00f      	b.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d0cd      	beq.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fdc:	e02c      	b.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8ea 	bl	80051bc <I2C_IsErrorOccurred>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02a      	b.n	8005048 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d01e      	beq.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fe ff3f 	bl	8003e7c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d113      	bne.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e007      	b.n	8005048 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d1cb      	bne.n	8004fde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800505c:	e028      	b.n	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8aa 	bl	80051bc <I2C_IsErrorOccurred>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e026      	b.n	80050c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fe ff03 	bl	8003e7c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d113      	bne.n	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e007      	b.n	80050c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d1cf      	bne.n	800505e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d4:	e064      	b.n	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f86e 	bl	80051bc <I2C_IsErrorOccurred>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e062      	b.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d138      	bne.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b04      	cmp	r3, #4
 8005104:	d105      	bne.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e04e      	b.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	d107      	bne.n	8005130 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2210      	movs	r2, #16
 8005126:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2204      	movs	r2, #4
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
 800512e:	e002      	b.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2220      	movs	r2, #32
 800513c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800514a:	400b      	ands	r3, r1
 800514c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fe fe87 	bl	8003e7c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e007      	b.n	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d193      	bne.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	fe00e800 	.word	0xfe00e800

080051bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d075      	beq.n	80052d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2210      	movs	r2, #16
 80051ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f0:	e056      	b.n	80052a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d052      	beq.n	80052a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fe fe3f 	bl	8003e7c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <I2C_IsErrorOccurred+0x54>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d147      	bne.n	80052a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005222:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005232:	d12e      	bne.n	8005292 <I2C_IsErrorOccurred+0xd6>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523a:	d02a      	beq.n	8005292 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	2b20      	cmp	r3, #32
 8005240:	d027      	beq.n	8005292 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005250:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005252:	f7fe fe13 	bl	8003e7c <HAL_GetTick>
 8005256:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005258:	e01b      	b.n	8005292 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800525a:	f7fe fe0f 	bl	8003e7c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b19      	cmp	r3, #25
 8005266:	d914      	bls.n	8005292 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b20      	cmp	r3, #32
 800529e:	d1dc      	bne.n	800525a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d003      	beq.n	80052b6 <I2C_IsErrorOccurred+0xfa>
 80052ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d09d      	beq.n	80051f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2220      	movs	r2, #32
 80052c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f043 0304 	orr.w	r3, r3, #4
 80052cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00b      	beq.n	8005320 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	f043 0308 	orr.w	r3, r3, #8
 800530e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01c      	beq.n	8005384 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff fddc 	bl	8004f08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <I2C_IsErrorOccurred+0x1d4>)
 800535c:	400b      	ands	r3, r1
 800535e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005388:	4618      	mov	r0, r3
 800538a:	3728      	adds	r7, #40	; 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	4613      	mov	r3, r2
 80053a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ac:	7a7b      	ldrb	r3, [r7, #9]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	4313      	orrs	r3, r2
 80053be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	0d5b      	lsrs	r3, r3, #21
 80053ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <I2C_TransferConfig+0x60>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	43db      	mvns	r3, r3
 80053d8:	ea02 0103 	and.w	r1, r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	03ff63ff 	.word	0x03ff63ff

080053f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	d138      	bne.n	8005480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005418:	2302      	movs	r3, #2
 800541a:	e032      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800544a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d139      	bne.n	8005518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e033      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	; 0x24
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d141      	bne.n	80055ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005536:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800553e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005542:	d131      	bne.n	80055a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005544:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554a:	4a46      	ldr	r2, [pc, #280]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005554:	4b43      	ldr	r3, [pc, #268]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800555c:	4a41      	ldr	r2, [pc, #260]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005564:	4b40      	ldr	r3, [pc, #256]	; (8005668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2232      	movs	r2, #50	; 0x32
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	4a3f      	ldr	r2, [pc, #252]	; (800566c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005570:	fba2 2303 	umull	r2, r3, r2, r3
 8005574:	0c9b      	lsrs	r3, r3, #18
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800557a:	e002      	b.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005582:	4b38      	ldr	r3, [pc, #224]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558e:	d102      	bne.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f2      	bne.n	800557c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005596:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d158      	bne.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e057      	b.n	8005658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a8:	4b2e      	ldr	r3, [pc, #184]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ae:	4a2d      	ldr	r2, [pc, #180]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055b8:	e04d      	b.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c0:	d141      	bne.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055c2:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d131      	bne.n	8005634 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d6:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055e0:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055e8:	4a1e      	ldr	r2, [pc, #120]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055f0:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2232      	movs	r2, #50	; 0x32
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	0c9b      	lsrs	r3, r3, #18
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005606:	e002      	b.n	800560e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	d102      	bne.n	8005622 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f2      	bne.n	8005608 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d112      	bne.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e011      	b.n	8005658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005644:	e007      	b.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800564e:	4a05      	ldr	r2, [pc, #20]	; (8005664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005654:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40007000 	.word	0x40007000
 8005668:	20000020 	.word	0x20000020
 800566c:	431bde83 	.word	0x431bde83

08005670 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800567a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800567e:	6093      	str	r3, [r2, #8]
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40007000 	.word	0x40007000

08005690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e306      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d075      	beq.n	800579a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ae:	4b97      	ldr	r3, [pc, #604]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
 80056b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b8:	4b94      	ldr	r3, [pc, #592]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d102      	bne.n	80056ce <HAL_RCC_OscConfig+0x3e>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_OscConfig+0x44>
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10b      	bne.n	80056ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	4b8d      	ldr	r3, [pc, #564]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d05b      	beq.n	8005798 <HAL_RCC_OscConfig+0x108>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d157      	bne.n	8005798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e2e1      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d106      	bne.n	8005704 <HAL_RCC_OscConfig+0x74>
 80056f6:	4b85      	ldr	r3, [pc, #532]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a84      	ldr	r2, [pc, #528]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e01d      	b.n	8005740 <HAL_RCC_OscConfig+0xb0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0x98>
 800570e:	4b7f      	ldr	r3, [pc, #508]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a7e      	ldr	r2, [pc, #504]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b7c      	ldr	r3, [pc, #496]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7b      	ldr	r2, [pc, #492]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e00b      	b.n	8005740 <HAL_RCC_OscConfig+0xb0>
 8005728:	4b78      	ldr	r3, [pc, #480]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a77      	ldr	r2, [pc, #476]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800572e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b75      	ldr	r3, [pc, #468]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a74      	ldr	r2, [pc, #464]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800573a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fe fb98 	bl	8003e7c <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005750:	f7fe fb94 	bl	8003e7c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b64      	cmp	r3, #100	; 0x64
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e2a6      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCC_OscConfig+0xc0>
 800576e:	e014      	b.n	800579a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fe fb84 	bl	8003e7c <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005778:	f7fe fb80 	bl	8003e7c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e292      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800578a:	4b60      	ldr	r3, [pc, #384]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0xe8>
 8005796:	e000      	b.n	800579a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d075      	beq.n	8005892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a6:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b0:	4b56      	ldr	r3, [pc, #344]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	d102      	bne.n	80057c6 <HAL_RCC_OscConfig+0x136>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d002      	beq.n	80057cc <HAL_RCC_OscConfig+0x13c>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d11f      	bne.n	800580c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057cc:	4b4f      	ldr	r3, [pc, #316]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_OscConfig+0x154>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e265      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e4:	4b49      	ldr	r3, [pc, #292]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	4946      	ldr	r1, [pc, #280]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057f8:	4b45      	ldr	r3, [pc, #276]	; (8005910 <HAL_RCC_OscConfig+0x280>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe faf1 	bl	8003de4 <HAL_InitTick>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d043      	beq.n	8005890 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e251      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d023      	beq.n	800585c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a3c      	ldr	r2, [pc, #240]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800581a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fe fb2c 	bl	8003e7c <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005828:	f7fe fb28 	bl	8003e7c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e23a      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583a:	4b34      	ldr	r3, [pc, #208]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	492d      	ldr	r1, [pc, #180]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
 800585a:	e01a      	b.n	8005892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fe fb08 	bl	8003e7c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005870:	f7fe fb04 	bl	8003e7c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e216      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1e0>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d041      	beq.n	8005922 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ac:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fe fae1 	bl	8003e7c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058be:	f7fe fadd 	bl	8003e7c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e1ef      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058d0:	4b0e      	ldr	r3, [pc, #56]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <HAL_RCC_OscConfig+0x22e>
 80058de:	e020      	b.n	8005922 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <HAL_RCC_OscConfig+0x27c>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fe fac4 	bl	8003e7c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058f6:	e00d      	b.n	8005914 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f8:	f7fe fac0 	bl	8003e7c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d906      	bls.n	8005914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1d2      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005914:	4b8c      	ldr	r3, [pc, #560]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ea      	bne.n	80058f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a6 	beq.w	8005a7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005934:	4b84      	ldr	r3, [pc, #528]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_OscConfig+0x2b4>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x2b6>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00d      	beq.n	8005966 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	4b7f      	ldr	r3, [pc, #508]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	4a7e      	ldr	r2, [pc, #504]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6593      	str	r3, [r2, #88]	; 0x58
 8005956:	4b7c      	ldr	r3, [pc, #496]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005966:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <HAL_RCC_OscConfig+0x4bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005972:	4b76      	ldr	r3, [pc, #472]	; (8005b4c <HAL_RCC_OscConfig+0x4bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a75      	ldr	r2, [pc, #468]	; (8005b4c <HAL_RCC_OscConfig+0x4bc>)
 8005978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597e:	f7fe fa7d 	bl	8003e7c <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005986:	f7fe fa79 	bl	8003e7c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e18b      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005998:	4b6c      	ldr	r3, [pc, #432]	; (8005b4c <HAL_RCC_OscConfig+0x4bc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <HAL_RCC_OscConfig+0x32e>
 80059ac:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059bc:	e024      	b.n	8005a08 <HAL_RCC_OscConfig+0x378>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d110      	bne.n	80059e8 <HAL_RCC_OscConfig+0x358>
 80059c6:	4b60      	ldr	r3, [pc, #384]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	4a5e      	ldr	r2, [pc, #376]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059ce:	f043 0304 	orr.w	r3, r3, #4
 80059d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d6:	4b5c      	ldr	r3, [pc, #368]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	4a5a      	ldr	r2, [pc, #360]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e6:	e00f      	b.n	8005a08 <HAL_RCC_OscConfig+0x378>
 80059e8:	4b57      	ldr	r3, [pc, #348]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	4a56      	ldr	r2, [pc, #344]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059f8:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	4a52      	ldr	r2, [pc, #328]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d016      	beq.n	8005a3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fe fa34 	bl	8003e7c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fe fa30 	bl	8003e7c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e140      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2e:	4b46      	ldr	r3, [pc, #280]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0ed      	beq.n	8005a18 <HAL_RCC_OscConfig+0x388>
 8005a3c:	e015      	b.n	8005a6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fe fa1d 	bl	8003e7c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fe fa19 	bl	8003e7c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e129      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a5c:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1ed      	bne.n	8005a46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a6a:	7ffb      	ldrb	r3, [r7, #31]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a70:	4b35      	ldr	r3, [pc, #212]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	4a34      	ldr	r2, [pc, #208]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a90:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a96:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fe f9ec 	bl	8003e7c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa8:	f7fe f9e8 	bl	8003e7c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e0fa      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x418>
 8005ac8:	e01b      	b.n	8005b02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aca:	4b1f      	ldr	r3, [pc, #124]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ada:	f7fe f9cf 	bl	8003e7c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae2:	f7fe f9cb 	bl	8003e7c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0dd      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ef      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80d1 	beq.w	8005cae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	f000 808b 	beq.w	8005c30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d15e      	bne.n	8005be0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fe f9a5 	bl	8003e7c <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b34:	e00c      	b.n	8005b50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fe f9a1 	bl	8003e7c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d905      	bls.n	8005b50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e0b3      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b50:	4b59      	ldr	r3, [pc, #356]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ec      	bne.n	8005b36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5c:	4b56      	ldr	r3, [pc, #344]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	4b56      	ldr	r3, [pc, #344]	; (8005cbc <HAL_RCC_OscConfig+0x62c>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6a11      	ldr	r1, [r2, #32]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	4311      	orrs	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b76:	0212      	lsls	r2, r2, #8
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b7e:	0852      	lsrs	r2, r2, #1
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0552      	lsls	r2, r2, #21
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b8a:	0852      	lsrs	r2, r2, #1
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	0652      	lsls	r2, r2, #25
 8005b90:	4311      	orrs	r1, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b96:	06d2      	lsls	r2, r2, #27
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	4947      	ldr	r1, [pc, #284]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba0:	4b45      	ldr	r3, [pc, #276]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a44      	ldr	r2, [pc, #272]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bac:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fe f960 	bl	8003e7c <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fe f95c 	bl	8003e7c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e06e      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd2:	4b39      	ldr	r3, [pc, #228]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x530>
 8005bde:	e066      	b.n	8005cae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be0:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a34      	ldr	r2, [pc, #208]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005bec:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005bf8:	4b2f      	ldr	r3, [pc, #188]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a2e      	ldr	r2, [pc, #184]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005bfe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fe f938 	bl	8003e7c <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fe f934 	bl	8003e7c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e046      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c22:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x580>
 8005c2e:	e03e      	b.n	8005cae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e039      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <HAL_RCC_OscConfig+0x628>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f003 0203 	and.w	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d12c      	bne.n	8005caa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d123      	bne.n	8005caa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11b      	bne.n	8005caa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d113      	bne.n	8005caa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d109      	bne.n	8005caa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d001      	beq.n	8005cae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	019f800c 	.word	0x019f800c

08005cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e11e      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b91      	ldr	r3, [pc, #580]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d910      	bls.n	8005d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b8e      	ldr	r3, [pc, #568]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 020f 	bic.w	r2, r3, #15
 8005cee:	498c      	ldr	r1, [pc, #560]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b8a      	ldr	r3, [pc, #552]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e106      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d073      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d129      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1c:	4b81      	ldr	r3, [pc, #516]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0f4      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d2c:	f000 f99e 	bl	800606c <RCC_GetSysClockFreqFromPLLSource>
 8005d30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4a7c      	ldr	r2, [pc, #496]	; (8005f28 <HAL_RCC_ClockConfig+0x268>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d93f      	bls.n	8005dba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d033      	beq.n	8005dba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d12f      	bne.n	8005dba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d5a:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d62:	4a70      	ldr	r2, [pc, #448]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e024      	b.n	8005dba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d107      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d78:	4b6a      	ldr	r3, [pc, #424]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0c6      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d88:	4b66      	ldr	r3, [pc, #408]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0be      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d98:	f000 f8ce 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4a61      	ldr	r2, [pc, #388]	; (8005f28 <HAL_RCC_ClockConfig+0x268>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d909      	bls.n	8005dba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005da6:	4b5f      	ldr	r3, [pc, #380]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	4a5d      	ldr	r2, [pc, #372]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b5a      	ldr	r3, [pc, #360]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4957      	ldr	r1, [pc, #348]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fe f856 	bl	8003e7c <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fe f852 	bl	8003e7c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e095      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b4e      	ldr	r3, [pc, #312]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d023      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e14:	4b43      	ldr	r3, [pc, #268]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4a42      	ldr	r2, [pc, #264]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e2c:	4b3d      	ldr	r3, [pc, #244]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e34:	4a3b      	ldr	r2, [pc, #236]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3c:	4b39      	ldr	r3, [pc, #228]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4936      	ldr	r1, [pc, #216]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d105      	bne.n	8005e62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e62:	4b2f      	ldr	r3, [pc, #188]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d21d      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f023 020f 	bic.w	r2, r3, #15
 8005e78:	4929      	ldr	r1, [pc, #164]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e80:	f7fd fffc 	bl	8003e7c <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fd fff8 	bl	8003e7c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e03b      	b.n	8005f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_RCC_ClockConfig+0x260>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d1ed      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4917      	ldr	r1, [pc, #92]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	490f      	ldr	r1, [pc, #60]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005eea:	f000 f825 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	490c      	ldr	r1, [pc, #48]	; (8005f2c <HAL_RCC_ClockConfig+0x26c>)
 8005efc:	5ccb      	ldrb	r3, [r1, r3]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <HAL_RCC_ClockConfig+0x270>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_RCC_ClockConfig+0x274>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd ff68 	bl	8003de4 <HAL_InitTick>
 8005f14:	4603      	mov	r3, r0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40022000 	.word	0x40022000
 8005f24:	40021000 	.word	0x40021000
 8005f28:	04c4b400 	.word	0x04c4b400
 8005f2c:	0800fb0c 	.word	0x0800fb0c
 8005f30:	20000020 	.word	0x20000020
 8005f34:	20000024 	.word	0x20000024

08005f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d102      	bne.n	8005f50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e047      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 030c 	and.w	r3, r3, #12
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f5c:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e03e      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f62:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d136      	bne.n	8005fdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	3301      	adds	r3, #1
 8005f84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d10c      	bne.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f96:	68d2      	ldr	r2, [r2, #12]
 8005f98:	0a12      	lsrs	r2, r2, #8
 8005f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	617b      	str	r3, [r7, #20]
      break;
 8005fa4:	e00c      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa6:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	0a12      	lsrs	r2, r2, #8
 8005fb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
      break;
 8005fbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0e5b      	lsrs	r3, r3, #25
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	e001      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fe0:	693b      	ldr	r3, [r7, #16]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	016e3600 	.word	0x016e3600

08005ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006000:	4b03      	ldr	r3, [pc, #12]	; (8006010 <HAL_RCC_GetHCLKFreq+0x14>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000020 	.word	0x20000020

08006014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006018:	f7ff fff0 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800601c:	4602      	mov	r2, r0
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4904      	ldr	r1, [pc, #16]	; (800603c <HAL_RCC_GetPCLK1Freq+0x28>)
 800602a:	5ccb      	ldrb	r3, [r1, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40021000 	.word	0x40021000
 800603c:	0800fb1c 	.word	0x0800fb1c

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006044:	f7ff ffda 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0adb      	lsrs	r3, r3, #11
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4904      	ldr	r1, [pc, #16]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40021000 	.word	0x40021000
 8006068:	0800fb1c 	.word	0x0800fb1c

0800606c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006072:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d10c      	bne.n	80060aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006090:	4a17      	ldr	r2, [pc, #92]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800609a:	68d2      	ldr	r2, [r2, #12]
 800609c:	0a12      	lsrs	r2, r2, #8
 800609e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	617b      	str	r3, [r7, #20]
    break;
 80060a8:	e00c      	b.n	80060c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060b4:	68d2      	ldr	r2, [r2, #12]
 80060b6:	0a12      	lsrs	r2, r2, #8
 80060b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060bc:	fb02 f303 	mul.w	r3, r2, r3
 80060c0:	617b      	str	r3, [r7, #20]
    break;
 80060c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0e5b      	lsrs	r3, r3, #25
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	3301      	adds	r3, #1
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060de:	687b      	ldr	r3, [r7, #4]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40021000 	.word	0x40021000
 80060f0:	016e3600 	.word	0x016e3600
 80060f4:	00f42400 	.word	0x00f42400

080060f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006100:	2300      	movs	r3, #0
 8006102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006104:	2300      	movs	r3, #0
 8006106:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8098 	beq.w	8006246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611a:	4b43      	ldr	r3, [pc, #268]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006126:	4b40      	ldr	r3, [pc, #256]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006130:	6593      	str	r3, [r2, #88]	; 0x58
 8006132:	4b3d      	ldr	r3, [pc, #244]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800613e:	2301      	movs	r3, #1
 8006140:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006142:	4b3a      	ldr	r3, [pc, #232]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a39      	ldr	r2, [pc, #228]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800614e:	f7fd fe95 	bl	8003e7c <HAL_GetTick>
 8006152:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006154:	e009      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fd fe91 	bl	8003e7c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d902      	bls.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	74fb      	strb	r3, [r7, #19]
        break;
 8006168:	e005      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616a:	4b30      	ldr	r3, [pc, #192]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0ef      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006176:	7cfb      	ldrb	r3, [r7, #19]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d159      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01e      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	429a      	cmp	r2, r3
 8006196:	d019      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006198:	4b23      	ldr	r3, [pc, #140]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ba:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fd fe51 	bl	8003e7c <HAL_GetTick>
 80061da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061dc:	e00b      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fd fe4d 	bl	8003e7c <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d902      	bls.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	74fb      	strb	r3, [r7, #19]
            break;
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ec      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	4903      	ldr	r1, [pc, #12]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006220:	e008      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	74bb      	strb	r3, [r7, #18]
 8006226:	e005      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006228:	40021000 	.word	0x40021000
 800622c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006234:	7c7b      	ldrb	r3, [r7, #17]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d105      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623a:	4ba7      	ldr	r3, [pc, #668]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623e:	4aa6      	ldr	r2, [pc, #664]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006244:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006252:	4ba1      	ldr	r3, [pc, #644]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f023 0203 	bic.w	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	499d      	ldr	r1, [pc, #628]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006274:	4b98      	ldr	r3, [pc, #608]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f023 020c 	bic.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	4995      	ldr	r1, [pc, #596]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006296:	4b90      	ldr	r3, [pc, #576]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	498c      	ldr	r1, [pc, #560]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b8:	4b87      	ldr	r3, [pc, #540]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	4984      	ldr	r1, [pc, #528]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062da:	4b7f      	ldr	r3, [pc, #508]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	497b      	ldr	r1, [pc, #492]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062fc:	4b76      	ldr	r3, [pc, #472]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	4973      	ldr	r1, [pc, #460]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800631e:	4b6e      	ldr	r3, [pc, #440]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	496a      	ldr	r1, [pc, #424]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006340:	4b65      	ldr	r3, [pc, #404]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	4962      	ldr	r1, [pc, #392]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006362:	4b5d      	ldr	r3, [pc, #372]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	4959      	ldr	r1, [pc, #356]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006384:	4b54      	ldr	r3, [pc, #336]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638a:	f023 0203 	bic.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	4951      	ldr	r1, [pc, #324]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a6:	4b4c      	ldr	r3, [pc, #304]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4948      	ldr	r1, [pc, #288]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d015      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063c8:	4b43      	ldr	r3, [pc, #268]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4940      	ldr	r1, [pc, #256]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e6:	d105      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e8:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a3a      	ldr	r2, [pc, #232]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006400:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	4932      	ldr	r1, [pc, #200]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641e:	d105      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006420:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d015      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	4924      	ldr	r1, [pc, #144]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006456:	d105      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006458:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006462:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d015      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	4916      	ldr	r1, [pc, #88]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800648e:	d105      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d019      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4908      	ldr	r1, [pc, #32]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c6:	d109      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c8:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	4a02      	ldr	r2, [pc, #8]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d2:	60d3      	str	r3, [r2, #12]
 80064d4:	e002      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80064d6:	bf00      	nop
 80064d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e8:	4b29      	ldr	r3, [pc, #164]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	4926      	ldr	r1, [pc, #152]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d105      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006508:	4b21      	ldr	r3, [pc, #132]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006512:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d015      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006520:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	4918      	ldr	r1, [pc, #96]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653e:	d105      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006540:	4b13      	ldr	r3, [pc, #76]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006558:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800655a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	490a      	ldr	r1, [pc, #40]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006576:	d105      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a04      	ldr	r2, [pc, #16]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006582:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006584:	7cbb      	ldrb	r3, [r7, #18]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000

08006594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e049      	b.n	800663a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fc f864 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f000 fbd2 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e049      	b.n	80066e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f841 	bl	80066f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f000 fb7b 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <HAL_TIM_PWM_Start+0x24>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e03c      	b.n	80067a2 <HAL_TIM_PWM_Start+0x9e>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b04      	cmp	r3, #4
 800672c:	d109      	bne.n	8006742 <HAL_TIM_PWM_Start+0x3e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b01      	cmp	r3, #1
 8006738:	bf14      	ite	ne
 800673a:	2301      	movne	r3, #1
 800673c:	2300      	moveq	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	e02f      	b.n	80067a2 <HAL_TIM_PWM_Start+0x9e>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b08      	cmp	r3, #8
 8006746:	d109      	bne.n	800675c <HAL_TIM_PWM_Start+0x58>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e022      	b.n	80067a2 <HAL_TIM_PWM_Start+0x9e>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d109      	bne.n	8006776 <HAL_TIM_PWM_Start+0x72>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b01      	cmp	r3, #1
 800676c:	bf14      	ite	ne
 800676e:	2301      	movne	r3, #1
 8006770:	2300      	moveq	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	e015      	b.n	80067a2 <HAL_TIM_PWM_Start+0x9e>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b10      	cmp	r3, #16
 800677a:	d109      	bne.n	8006790 <HAL_TIM_PWM_Start+0x8c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e008      	b.n	80067a2 <HAL_TIM_PWM_Start+0x9e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e0a6      	b.n	80068f8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Start+0xb6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	e023      	b.n	8006802 <HAL_TIM_PWM_Start+0xfe>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d104      	bne.n	80067ca <HAL_TIM_PWM_Start+0xc6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c8:	e01b      	b.n	8006802 <HAL_TIM_PWM_Start+0xfe>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d104      	bne.n	80067da <HAL_TIM_PWM_Start+0xd6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d8:	e013      	b.n	8006802 <HAL_TIM_PWM_Start+0xfe>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start+0xe6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e8:	e00b      	b.n	8006802 <HAL_TIM_PWM_Start+0xfe>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_PWM_Start+0xf6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	e003      	b.n	8006802 <HAL_TIM_PWM_Start+0xfe>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2201      	movs	r2, #1
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 ff24 	bl	8007658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a3a      	ldr	r2, [pc, #232]	; (8006900 <HAL_TIM_PWM_Start+0x1fc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d018      	beq.n	800684c <HAL_TIM_PWM_Start+0x148>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a39      	ldr	r2, [pc, #228]	; (8006904 <HAL_TIM_PWM_Start+0x200>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <HAL_TIM_PWM_Start+0x148>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a37      	ldr	r2, [pc, #220]	; (8006908 <HAL_TIM_PWM_Start+0x204>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00e      	beq.n	800684c <HAL_TIM_PWM_Start+0x148>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a36      	ldr	r2, [pc, #216]	; (800690c <HAL_TIM_PWM_Start+0x208>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d009      	beq.n	800684c <HAL_TIM_PWM_Start+0x148>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a34      	ldr	r2, [pc, #208]	; (8006910 <HAL_TIM_PWM_Start+0x20c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_TIM_PWM_Start+0x148>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a33      	ldr	r2, [pc, #204]	; (8006914 <HAL_TIM_PWM_Start+0x210>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <HAL_TIM_PWM_Start+0x14c>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <HAL_TIM_PWM_Start+0x14e>
 8006850:	2300      	movs	r3, #0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a25      	ldr	r2, [pc, #148]	; (8006900 <HAL_TIM_PWM_Start+0x1fc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006878:	d01d      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a26      	ldr	r2, [pc, #152]	; (8006918 <HAL_TIM_PWM_Start+0x214>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_TIM_PWM_Start+0x218>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_TIM_PWM_Start+0x21c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <HAL_TIM_PWM_Start+0x200>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <HAL_TIM_PWM_Start+0x204>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x1b2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a18      	ldr	r2, [pc, #96]	; (8006914 <HAL_TIM_PWM_Start+0x210>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d115      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_TIM_PWM_Start+0x220>)
 80068be:	4013      	ands	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d015      	beq.n	80068f4 <HAL_TIM_PWM_Start+0x1f0>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ce:	d011      	beq.n	80068f4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e0:	e008      	b.n	80068f4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e000      	b.n	80068f6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800
 8006914:	40015000 	.word	0x40015000
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	00010007 	.word	0x00010007

08006928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006942:	2302      	movs	r3, #2
 8006944:	e0ff      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b14      	cmp	r3, #20
 8006952:	f200 80f0 	bhi.w	8006b36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	080069b1 	.word	0x080069b1
 8006960:	08006b37 	.word	0x08006b37
 8006964:	08006b37 	.word	0x08006b37
 8006968:	08006b37 	.word	0x08006b37
 800696c:	080069f1 	.word	0x080069f1
 8006970:	08006b37 	.word	0x08006b37
 8006974:	08006b37 	.word	0x08006b37
 8006978:	08006b37 	.word	0x08006b37
 800697c:	08006a33 	.word	0x08006a33
 8006980:	08006b37 	.word	0x08006b37
 8006984:	08006b37 	.word	0x08006b37
 8006988:	08006b37 	.word	0x08006b37
 800698c:	08006a73 	.word	0x08006a73
 8006990:	08006b37 	.word	0x08006b37
 8006994:	08006b37 	.word	0x08006b37
 8006998:	08006b37 	.word	0x08006b37
 800699c:	08006ab5 	.word	0x08006ab5
 80069a0:	08006b37 	.word	0x08006b37
 80069a4:	08006b37 	.word	0x08006b37
 80069a8:	08006b37 	.word	0x08006b37
 80069ac:	08006af5 	.word	0x08006af5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fa88 	bl	8006ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0208 	orr.w	r2, r2, #8
 80069ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6999      	ldr	r1, [r3, #24]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	619a      	str	r2, [r3, #24]
      break;
 80069ee:	e0a5      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fb02 	bl	8007000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	021a      	lsls	r2, r3, #8
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]
      break;
 8006a30:	e084      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fb75 	bl	8007128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0204 	bic.w	r2, r2, #4
 8006a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69d9      	ldr	r1, [r3, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	61da      	str	r2, [r3, #28]
      break;
 8006a70:	e064      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fbe7 	bl	800724c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	61da      	str	r2, [r3, #28]
      break;
 8006ab2:	e043      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fc5a 	bl	8007374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0208 	orr.w	r2, r2, #8
 8006ace:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0204 	bic.w	r2, r2, #4
 8006ade:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006af2:	e023      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fca4 	bl	8007448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b34:	e002      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop

08006b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIM_ConfigClockSource+0x1c>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e0f6      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x20a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6f      	ldr	r2, [pc, #444]	; (8006d64 <HAL_TIM_ConfigClockSource+0x214>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	f000 80c1 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bac:	4a6d      	ldr	r2, [pc, #436]	; (8006d64 <HAL_TIM_ConfigClockSource+0x214>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	f200 80c6 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bb4:	4a6c      	ldr	r2, [pc, #432]	; (8006d68 <HAL_TIM_ConfigClockSource+0x218>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	f000 80b9 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bbc:	4a6a      	ldr	r2, [pc, #424]	; (8006d68 <HAL_TIM_ConfigClockSource+0x218>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	f200 80be 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bc4:	4a69      	ldr	r2, [pc, #420]	; (8006d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	f000 80b1 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bcc:	4a67      	ldr	r2, [pc, #412]	; (8006d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f200 80b6 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bd4:	4a66      	ldr	r2, [pc, #408]	; (8006d70 <HAL_TIM_ConfigClockSource+0x220>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	f000 80a9 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bdc:	4a64      	ldr	r2, [pc, #400]	; (8006d70 <HAL_TIM_ConfigClockSource+0x220>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	f200 80ae 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006be4:	4a63      	ldr	r2, [pc, #396]	; (8006d74 <HAL_TIM_ConfigClockSource+0x224>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f000 80a1 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bec:	4a61      	ldr	r2, [pc, #388]	; (8006d74 <HAL_TIM_ConfigClockSource+0x224>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	f200 80a6 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bf4:	4a60      	ldr	r2, [pc, #384]	; (8006d78 <HAL_TIM_ConfigClockSource+0x228>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	f000 8099 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006bfc:	4a5e      	ldr	r2, [pc, #376]	; (8006d78 <HAL_TIM_ConfigClockSource+0x228>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	f200 809e 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c08:	f000 8091 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c10:	f200 8096 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c18:	f000 8089 	beq.w	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c20:	f200 808e 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c28:	d03e      	beq.n	8006ca8 <HAL_TIM_ConfigClockSource+0x158>
 8006c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2e:	f200 8087 	bhi.w	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c36:	f000 8086 	beq.w	8006d46 <HAL_TIM_ConfigClockSource+0x1f6>
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3e:	d87f      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c40:	2b70      	cmp	r3, #112	; 0x70
 8006c42:	d01a      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x12a>
 8006c44:	2b70      	cmp	r3, #112	; 0x70
 8006c46:	d87b      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c48:	2b60      	cmp	r3, #96	; 0x60
 8006c4a:	d050      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x19e>
 8006c4c:	2b60      	cmp	r3, #96	; 0x60
 8006c4e:	d877      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c50:	2b50      	cmp	r3, #80	; 0x50
 8006c52:	d03c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x17e>
 8006c54:	2b50      	cmp	r3, #80	; 0x50
 8006c56:	d873      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d058      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x1be>
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d86f      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c60:	2b30      	cmp	r3, #48	; 0x30
 8006c62:	d064      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d86b      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d060      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d867      	bhi.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05c      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c74:	2b10      	cmp	r3, #16
 8006c76:	d05a      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x1de>
 8006c78:	e062      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6899      	ldr	r1, [r3, #8]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f000 fcc5 	bl	8007618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	609a      	str	r2, [r3, #8]
      break;
 8006ca6:	e04f      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6899      	ldr	r1, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f000 fcae 	bl	8007618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cca:	609a      	str	r2, [r3, #8]
      break;
 8006ccc:	e03c      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f000 fc20 	bl	8007520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2150      	movs	r1, #80	; 0x50
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fc79 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006cec:	e02c      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f000 fc3f 	bl	800757e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2160      	movs	r1, #96	; 0x60
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fc69 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006d0c:	e01c      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6859      	ldr	r1, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f000 fc00 	bl	8007520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2140      	movs	r1, #64	; 0x40
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fc59 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006d2c:	e00c      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f000 fc50 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006d3e:	e003      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e000      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	00100070 	.word	0x00100070
 8006d68:	00100060 	.word	0x00100060
 8006d6c:	00100050 	.word	0x00100050
 8006d70:	00100040 	.word	0x00100040
 8006d74:	00100030 	.word	0x00100030
 8006d78:	00100020 	.word	0x00100020

08006d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a46      	ldr	r2, [pc, #280]	; (8006ea8 <TIM_Base_SetConfig+0x12c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d017      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d013      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a43      	ldr	r2, [pc, #268]	; (8006eac <TIM_Base_SetConfig+0x130>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00f      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a42      	ldr	r2, [pc, #264]	; (8006eb0 <TIM_Base_SetConfig+0x134>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00b      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a41      	ldr	r2, [pc, #260]	; (8006eb4 <TIM_Base_SetConfig+0x138>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a40      	ldr	r2, [pc, #256]	; (8006eb8 <TIM_Base_SetConfig+0x13c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_Base_SetConfig+0x48>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a3f      	ldr	r2, [pc, #252]	; (8006ebc <TIM_Base_SetConfig+0x140>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d108      	bne.n	8006dd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	; (8006ea8 <TIM_Base_SetConfig+0x12c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d023      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de4:	d01f      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a30      	ldr	r2, [pc, #192]	; (8006eac <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01b      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2f      	ldr	r2, [pc, #188]	; (8006eb0 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d017      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2e      	ldr	r2, [pc, #184]	; (8006eb4 <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2d      	ldr	r2, [pc, #180]	; (8006ec0 <TIM_Base_SetConfig+0x144>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <TIM_Base_SetConfig+0x148>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <TIM_Base_SetConfig+0x14c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_Base_SetConfig+0xaa>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a26      	ldr	r2, [pc, #152]	; (8006ebc <TIM_Base_SetConfig+0x140>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a12      	ldr	r2, [pc, #72]	; (8006ea8 <TIM_Base_SetConfig+0x12c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d013      	beq.n	8006e8c <TIM_Base_SetConfig+0x110>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <TIM_Base_SetConfig+0x13c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00f      	beq.n	8006e8c <TIM_Base_SetConfig+0x110>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a14      	ldr	r2, [pc, #80]	; (8006ec0 <TIM_Base_SetConfig+0x144>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <TIM_Base_SetConfig+0x110>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <TIM_Base_SetConfig+0x148>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d007      	beq.n	8006e8c <TIM_Base_SetConfig+0x110>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <TIM_Base_SetConfig+0x14c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_Base_SetConfig+0x110>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a0d      	ldr	r2, [pc, #52]	; (8006ebc <TIM_Base_SetConfig+0x140>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d103      	bne.n	8006e94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	615a      	str	r2, [r3, #20]
}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40015000 	.word	0x40015000
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 0302 	bic.w	r3, r3, #2
 8006f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a30      	ldr	r2, [pc, #192]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <TIM_OC1_SetConfig+0x88>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2f      	ldr	r2, [pc, #188]	; (8006fec <TIM_OC1_SetConfig+0x120>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00f      	beq.n	8006f54 <TIM_OC1_SetConfig+0x88>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <TIM_OC1_SetConfig+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <TIM_OC1_SetConfig+0x88>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2d      	ldr	r2, [pc, #180]	; (8006ff4 <TIM_OC1_SetConfig+0x128>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <TIM_OC1_SetConfig+0x88>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <TIM_OC1_SetConfig+0x12c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC1_SetConfig+0x88>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <TIM_OC1_SetConfig+0x130>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10c      	bne.n	8006f6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0308 	bic.w	r3, r3, #8
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <TIM_OC1_SetConfig+0xd2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <TIM_OC1_SetConfig+0x120>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <TIM_OC1_SetConfig+0xd2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <TIM_OC1_SetConfig+0x124>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <TIM_OC1_SetConfig+0xd2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <TIM_OC1_SetConfig+0x128>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <TIM_OC1_SetConfig+0xd2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <TIM_OC1_SetConfig+0x12c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_OC1_SetConfig+0xd2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <TIM_OC1_SetConfig+0x130>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d111      	bne.n	8006fc2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	621a      	str	r2, [r3, #32]
}
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800
 8006ffc:	40015000 	.word	0x40015000

08007000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0210 	bic.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f023 0320 	bic.w	r3, r3, #32
 800704e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <TIM_OC2_SetConfig+0x110>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_OC2_SetConfig+0x74>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <TIM_OC2_SetConfig+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC2_SetConfig+0x74>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <TIM_OC2_SetConfig+0x118>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10d      	bne.n	8007090 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <TIM_OC2_SetConfig+0x110>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <TIM_OC2_SetConfig+0xc0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <TIM_OC2_SetConfig+0x114>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00f      	beq.n	80070c0 <TIM_OC2_SetConfig+0xc0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1e      	ldr	r2, [pc, #120]	; (800711c <TIM_OC2_SetConfig+0x11c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <TIM_OC2_SetConfig+0xc0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a1d      	ldr	r2, [pc, #116]	; (8007120 <TIM_OC2_SetConfig+0x120>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_OC2_SetConfig+0xc0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <TIM_OC2_SetConfig+0x124>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_OC2_SetConfig+0xc0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <TIM_OC2_SetConfig+0x118>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d113      	bne.n	80070e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40015000 	.word	0x40015000
 800711c:	40014000 	.word	0x40014000
 8007120:	40014400 	.word	0x40014400
 8007124:	40014800 	.word	0x40014800

08007128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <TIM_OC3_SetConfig+0x10c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC3_SetConfig+0x72>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2a      	ldr	r2, [pc, #168]	; (8007238 <TIM_OC3_SetConfig+0x110>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC3_SetConfig+0x72>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a29      	ldr	r2, [pc, #164]	; (800723c <TIM_OC3_SetConfig+0x114>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d10d      	bne.n	80071b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <TIM_OC3_SetConfig+0x10c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <TIM_OC3_SetConfig+0xbe>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <TIM_OC3_SetConfig+0x110>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00f      	beq.n	80071e6 <TIM_OC3_SetConfig+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <TIM_OC3_SetConfig+0x118>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00b      	beq.n	80071e6 <TIM_OC3_SetConfig+0xbe>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <TIM_OC3_SetConfig+0x11c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d007      	beq.n	80071e6 <TIM_OC3_SetConfig+0xbe>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1b      	ldr	r2, [pc, #108]	; (8007248 <TIM_OC3_SetConfig+0x120>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d003      	beq.n	80071e6 <TIM_OC3_SetConfig+0xbe>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a16      	ldr	r2, [pc, #88]	; (800723c <TIM_OC3_SetConfig+0x114>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d113      	bne.n	800720e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40013400 	.word	0x40013400
 800723c:	40015000 	.word	0x40015000
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800

0800724c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800729a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a2c      	ldr	r2, [pc, #176]	; (800735c <TIM_OC4_SetConfig+0x110>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_OC4_SetConfig+0x74>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <TIM_OC4_SetConfig+0x114>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC4_SetConfig+0x74>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <TIM_OC4_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10d      	bne.n	80072dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	031b      	lsls	r3, r3, #12
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1f      	ldr	r2, [pc, #124]	; (800735c <TIM_OC4_SetConfig+0x110>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <TIM_OC4_SetConfig+0xc0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <TIM_OC4_SetConfig+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <TIM_OC4_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <TIM_OC4_SetConfig+0x11c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <TIM_OC4_SetConfig+0xc0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <TIM_OC4_SetConfig+0x120>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_OC4_SetConfig+0xc0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <TIM_OC4_SetConfig+0x124>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC4_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC4_SetConfig+0x118>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d113      	bne.n	8007334 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007312:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800731a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	019b      	lsls	r3, r3, #6
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	40015000 	.word	0x40015000
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a19      	ldr	r2, [pc, #100]	; (8007430 <TIM_OC5_SetConfig+0xbc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <TIM_OC5_SetConfig+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a18      	ldr	r2, [pc, #96]	; (8007434 <TIM_OC5_SetConfig+0xc0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00f      	beq.n	80073f6 <TIM_OC5_SetConfig+0x82>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a17      	ldr	r2, [pc, #92]	; (8007438 <TIM_OC5_SetConfig+0xc4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <TIM_OC5_SetConfig+0x82>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a16      	ldr	r2, [pc, #88]	; (800743c <TIM_OC5_SetConfig+0xc8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d007      	beq.n	80073f6 <TIM_OC5_SetConfig+0x82>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <TIM_OC5_SetConfig+0xcc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_OC5_SetConfig+0x82>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <TIM_OC5_SetConfig+0xd0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d109      	bne.n	800740a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40012c00 	.word	0x40012c00
 8007434:	40013400 	.word	0x40013400
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800
 8007444:	40015000 	.word	0x40015000

08007448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800748e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	051b      	lsls	r3, r3, #20
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a1a      	ldr	r2, [pc, #104]	; (8007508 <TIM_OC6_SetConfig+0xc0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d013      	beq.n	80074cc <TIM_OC6_SetConfig+0x84>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a19      	ldr	r2, [pc, #100]	; (800750c <TIM_OC6_SetConfig+0xc4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00f      	beq.n	80074cc <TIM_OC6_SetConfig+0x84>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <TIM_OC6_SetConfig+0xc8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_OC6_SetConfig+0x84>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a17      	ldr	r2, [pc, #92]	; (8007514 <TIM_OC6_SetConfig+0xcc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_OC6_SetConfig+0x84>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_OC6_SetConfig+0xd0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC6_SetConfig+0x84>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <TIM_OC6_SetConfig+0xd4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d109      	bne.n	80074e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40012c00 	.word	0x40012c00
 800750c:	40013400 	.word	0x40013400
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800
 800751c:	40015000 	.word	0x40015000

08007520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 030a 	bic.w	r3, r3, #10
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757e:	b480      	push	{r7}
 8007580:	b087      	sub	sp, #28
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0210 	bic.w	r2, r3, #16
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	f043 0307 	orr.w	r3, r3, #7
 8007604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	021a      	lsls	r2, r3, #8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	431a      	orrs	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	609a      	str	r2, [r3, #8]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	2201      	movs	r2, #1
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a1a      	ldr	r2, [r3, #32]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	43db      	mvns	r3, r3
 800767a:	401a      	ands	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	fa01 f303 	lsl.w	r3, r1, r3
 8007690:	431a      	orrs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e074      	b.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a34      	ldr	r2, [pc, #208]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a33      	ldr	r2, [pc, #204]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a31      	ldr	r2, [pc, #196]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d108      	bne.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007700:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d022      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d01d      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d018      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a11      	ldr	r2, [pc, #68]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d10c      	bne.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4313      	orrs	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40013400 	.word	0x40013400
 80077bc:	40015000 	.word	0x40015000
 80077c0:	40000400 	.word	0x40000400
 80077c4:	40000800 	.word	0x40000800
 80077c8:	40000c00 	.word	0x40000c00
 80077cc:	40014000 	.word	0x40014000

080077d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e042      	b.n	8007868 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7fa ff9f 	bl	8002738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2224      	movs	r2, #36	; 0x24
 80077fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fcee 	bl	80081f4 <UART_SetConfig>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e022      	b.n	8007868 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 ffde 	bl	80087ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800783e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800784e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0201 	orr.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f865 	bl	8008930 <UART_CheckIdleState>
 8007866:	4603      	mov	r3, r0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007886:	2b20      	cmp	r3, #32
 8007888:	f040 8083 	bne.w	8007992 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Transmit+0x28>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e07b      	b.n	8007994 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Transmit+0x3a>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e074      	b.n	8007994 <HAL_UART_Transmit+0x124>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2221      	movs	r2, #33	; 0x21
 80078be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078c2:	f7fc fadb 	bl	8003e7c <HAL_GetTick>
 80078c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d108      	bne.n	80078f4 <HAL_UART_Transmit+0x84>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e003      	b.n	80078fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007904:	e02c      	b.n	8007960 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f001 f858 	bl	80089c6 <UART_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e039      	b.n	8007994 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10b      	bne.n	800793e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007934:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	3302      	adds	r3, #2
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	e007      	b.n	800794e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1cc      	bne.n	8007906 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f001 f825 	bl	80089c6 <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e006      	b.n	8007994 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e000      	b.n	8007994 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800799c:	b480      	push	{r7}
 800799e:	b091      	sub	sp, #68	; 0x44
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	f040 808c 	bne.w	8007ace <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_UART_Transmit_IT+0x26>
 80079bc:	88fb      	ldrh	r3, [r7, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e084      	b.n	8007ad0 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Transmit_IT+0x38>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e07d      	b.n	8007ad0 <HAL_UART_Transmit_IT+0x134>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2221      	movs	r2, #33	; 0x21
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a10:	d12e      	bne.n	8007a70 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1a:	d107      	bne.n	8007a2c <HAL_UART_Transmit_IT+0x90>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a2d      	ldr	r2, [pc, #180]	; (8007adc <HAL_UART_Transmit_IT+0x140>)
 8007a28:	675a      	str	r2, [r3, #116]	; 0x74
 8007a2a:	e002      	b.n	8007a32 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <HAL_UART_Transmit_IT+0x144>)
 8007a30:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e5      	bne.n	8007a3a <HAL_UART_Transmit_IT+0x9e>
 8007a6e:	e02c      	b.n	8007aca <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d107      	bne.n	8007a8a <HAL_UART_Transmit_IT+0xee>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_UART_Transmit_IT+0x148>)
 8007a86:	675a      	str	r2, [r3, #116]	; 0x74
 8007a88:	e002      	b.n	8007a90 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <HAL_UART_Transmit_IT+0x14c>)
 8007a8e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	69f9      	ldr	r1, [r7, #28]
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3744      	adds	r7, #68	; 0x44
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	080090ff 	.word	0x080090ff
 8007ae0:	0800901f 	.word	0x0800901f
 8007ae4:	08008f5d 	.word	0x08008f5d
 8007ae8:	08008ea5 	.word	0x08008ea5

08007aec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	; 0x28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	4613      	mov	r3, r2
 8007af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d142      	bne.n	8007b8a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_UART_Receive_IT+0x24>
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e03b      	b.n	8007b8c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Receive_IT+0x36>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e034      	b.n	8007b8c <HAL_UART_Receive_IT+0xa0>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <HAL_UART_Receive_IT+0xa8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d01f      	beq.n	8007b7a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d018      	beq.n	8007b7a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	623b      	str	r3, [r7, #32]
 8007b68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	69f9      	ldr	r1, [r7, #28]
 8007b6c:	6a3a      	ldr	r2, [r7, #32]
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e6      	bne.n	8007b48 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 ffe9 	bl	8008b58 <UART_Start_Receive_IT>
 8007b86:	4603      	mov	r3, r0
 8007b88:	e000      	b.n	8007b8c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3728      	adds	r7, #40	; 0x28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40008000 	.word	0x40008000

08007b98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b0ba      	sub	sp, #232	; 0xe8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11b      	bne.n	8007c0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d015      	beq.n	8007c0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d105      	bne.n	8007bf8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 82d6 	beq.w	80081ae <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
      }
      return;
 8007c0a:	e2d0      	b.n	80081ae <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 811f 	beq.w	8007e54 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c1a:	4b8b      	ldr	r3, [pc, #556]	; (8007e48 <HAL_UART_IRQHandler+0x2b0>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c26:	4b89      	ldr	r3, [pc, #548]	; (8007e4c <HAL_UART_IRQHandler+0x2b4>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8112 	beq.w	8007e54 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d011      	beq.n	8007c60 <HAL_UART_IRQHandler+0xc8>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c56:	f043 0201 	orr.w	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d011      	beq.n	8007c90 <HAL_UART_IRQHandler+0xf8>
 8007c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c86:	f043 0204 	orr.w	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d011      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x128>
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2204      	movs	r2, #4
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb6:	f043 0202 	orr.w	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007cd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007cdc:	4b5a      	ldr	r3, [pc, #360]	; (8007e48 <HAL_UART_IRQHandler+0x2b0>)
 8007cde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2208      	movs	r2, #8
 8007cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf2:	f043 0208 	orr.w	r2, r3, #8
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d012      	beq.n	8007d2e <HAL_UART_IRQHandler+0x196>
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d24:	f043 0220 	orr.w	r2, r3, #32
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 823c 	beq.w	80081b2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d013      	beq.n	8007d6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d105      	bne.n	8007d5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d005      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d04f      	beq.n	8007e32 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 f80a 	bl	8008dac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d141      	bne.n	8007e2a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1d9      	bne.n	8007da6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d013      	beq.n	8007e22 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <HAL_UART_IRQHandler+0x2b8>)
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc fa1a 	bl	8004240 <HAL_DMA_Abort_IT>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d017      	beq.n	8007e42 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e20:	e00f      	b.n	8007e42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f9d0 	bl	80081c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e28:	e00b      	b.n	8007e42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9cc 	bl	80081c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e30:	e007      	b.n	8007e42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9c8 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007e40:	e1b7      	b.n	80081b2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e42:	bf00      	nop
    return;
 8007e44:	e1b5      	b.n	80081b2 <HAL_UART_IRQHandler+0x61a>
 8007e46:	bf00      	nop
 8007e48:	10000001 	.word	0x10000001
 8007e4c:	04000120 	.word	0x04000120
 8007e50:	08008e79 	.word	0x08008e79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	f040 814a 	bne.w	80080f2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8143 	beq.w	80080f2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 813c 	beq.w	80080f2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2210      	movs	r2, #16
 8007e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	f040 80b5 	bne.w	8007ffc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8187 	beq.w	80081b6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	f080 817f 	bcs.w	80081b6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 8086 	bne.w	8007fe0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1da      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f30:	f023 0301 	bic.w	r3, r3, #1
 8007f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e1      	bne.n	8007f1e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e3      	bne.n	8007f5a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb0:	f023 0310 	bic.w	r3, r3, #16
 8007fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e4      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc f8d7 	bl	800418e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f8f1 	bl	80081dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ffa:	e0dc      	b.n	80081b6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008008:	b29b      	uxth	r3, r3
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80ce 	beq.w	80081ba <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800801e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80c9 	beq.w	80081ba <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800803c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800804a:	647b      	str	r3, [r7, #68]	; 0x44
 800804c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e4      	bne.n	8008028 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	623b      	str	r3, [r7, #32]
   return(result);
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3308      	adds	r3, #8
 8008082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008086:	633a      	str	r2, [r7, #48]	; 0x30
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800808c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e1      	bne.n	800805e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0310 	bic.w	r3, r3, #16
 80080c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080d0:	61fb      	str	r3, [r7, #28]
 80080d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	69b9      	ldr	r1, [r7, #24]
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	617b      	str	r3, [r7, #20]
   return(result);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e4      	bne.n	80080ae <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f876 	bl	80081dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080f0:	e063      	b.n	80081ba <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <HAL_UART_IRQHandler+0x584>
 80080fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fcef 	bl	8009af8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800811a:	e051      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800811c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008124:	2b00      	cmp	r3, #0
 8008126:	d014      	beq.n	8008152 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008144:	2b00      	cmp	r3, #0
 8008146:	d03a      	beq.n	80081be <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
    }
    return;
 8008150:	e035      	b.n	80081be <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <HAL_UART_IRQHandler+0x5da>
 800815e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f83c 	bl	80091e8 <UART_EndTransmit_IT>
    return;
 8008170:	e026      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <HAL_UART_IRQHandler+0x5fa>
 800817e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008182:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fcc8 	bl	8009b20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008190:	e016      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d010      	beq.n	80081c0 <HAL_UART_IRQHandler+0x628>
 800819e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da0c      	bge.n	80081c0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 fcb0 	bl	8009b0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081ac:	e008      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
      return;
 80081ae:	bf00      	nop
 80081b0:	e006      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
    return;
 80081b2:	bf00      	nop
 80081b4:	e004      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
      return;
 80081b6:	bf00      	nop
 80081b8:	e002      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
      return;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <HAL_UART_IRQHandler+0x628>
    return;
 80081be:	bf00      	nop
  }
}
 80081c0:	37e8      	adds	r7, #232	; 0xe8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop

080081c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081f8:	b08c      	sub	sp, #48	; 0x30
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	431a      	orrs	r2, r3
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	431a      	orrs	r2, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	4313      	orrs	r3, r2
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4baa      	ldr	r3, [pc, #680]	; (80084cc <UART_SetConfig+0x2d8>)
 8008224:	4013      	ands	r3, r2
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800822c:	430b      	orrs	r3, r1
 800822e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a9f      	ldr	r2, [pc, #636]	; (80084d0 <UART_SetConfig+0x2dc>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825c:	4313      	orrs	r3, r2
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800826a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008274:	430b      	orrs	r3, r1
 8008276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	f023 010f 	bic.w	r1, r3, #15
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a90      	ldr	r2, [pc, #576]	; (80084d4 <UART_SetConfig+0x2e0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d125      	bne.n	80082e4 <UART_SetConfig+0xf0>
 8008298:	4b8f      	ldr	r3, [pc, #572]	; (80084d8 <UART_SetConfig+0x2e4>)
 800829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d81a      	bhi.n	80082dc <UART_SetConfig+0xe8>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <UART_SetConfig+0xb8>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082cd 	.word	0x080082cd
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c2:	e116      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80082c4:	2302      	movs	r3, #2
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e112      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80082cc:	2304      	movs	r3, #4
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d2:	e10e      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80082d4:	2308      	movs	r3, #8
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082da:	e10a      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80082dc:	2310      	movs	r3, #16
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e106      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a7c      	ldr	r2, [pc, #496]	; (80084dc <UART_SetConfig+0x2e8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d138      	bne.n	8008360 <UART_SetConfig+0x16c>
 80082ee:	4b7a      	ldr	r3, [pc, #488]	; (80084d8 <UART_SetConfig+0x2e4>)
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f4:	f003 030c 	and.w	r3, r3, #12
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	d82d      	bhi.n	8008358 <UART_SetConfig+0x164>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <UART_SetConfig+0x110>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008339 	.word	0x08008339
 8008308:	08008359 	.word	0x08008359
 800830c:	08008359 	.word	0x08008359
 8008310:	08008359 	.word	0x08008359
 8008314:	08008349 	.word	0x08008349
 8008318:	08008359 	.word	0x08008359
 800831c:	08008359 	.word	0x08008359
 8008320:	08008359 	.word	0x08008359
 8008324:	08008341 	.word	0x08008341
 8008328:	08008359 	.word	0x08008359
 800832c:	08008359 	.word	0x08008359
 8008330:	08008359 	.word	0x08008359
 8008334:	08008351 	.word	0x08008351
 8008338:	2300      	movs	r3, #0
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e0d8      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008340:	2302      	movs	r3, #2
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e0d4      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e0d0      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e0cc      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e0c8      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a5e      	ldr	r2, [pc, #376]	; (80084e0 <UART_SetConfig+0x2ec>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d125      	bne.n	80083b6 <UART_SetConfig+0x1c2>
 800836a:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <UART_SetConfig+0x2e4>)
 800836c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008370:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008374:	2b30      	cmp	r3, #48	; 0x30
 8008376:	d016      	beq.n	80083a6 <UART_SetConfig+0x1b2>
 8008378:	2b30      	cmp	r3, #48	; 0x30
 800837a:	d818      	bhi.n	80083ae <UART_SetConfig+0x1ba>
 800837c:	2b20      	cmp	r3, #32
 800837e:	d00a      	beq.n	8008396 <UART_SetConfig+0x1a2>
 8008380:	2b20      	cmp	r3, #32
 8008382:	d814      	bhi.n	80083ae <UART_SetConfig+0x1ba>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <UART_SetConfig+0x19a>
 8008388:	2b10      	cmp	r3, #16
 800838a:	d008      	beq.n	800839e <UART_SetConfig+0x1aa>
 800838c:	e00f      	b.n	80083ae <UART_SetConfig+0x1ba>
 800838e:	2300      	movs	r3, #0
 8008390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008394:	e0ad      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008396:	2302      	movs	r3, #2
 8008398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839c:	e0a9      	b.n	80084f2 <UART_SetConfig+0x2fe>
 800839e:	2304      	movs	r3, #4
 80083a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a4:	e0a5      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083a6:	2308      	movs	r3, #8
 80083a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ac:	e0a1      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083ae:	2310      	movs	r3, #16
 80083b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b4:	e09d      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4a      	ldr	r2, [pc, #296]	; (80084e4 <UART_SetConfig+0x2f0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d125      	bne.n	800840c <UART_SetConfig+0x218>
 80083c0:	4b45      	ldr	r3, [pc, #276]	; (80084d8 <UART_SetConfig+0x2e4>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083ca:	2bc0      	cmp	r3, #192	; 0xc0
 80083cc:	d016      	beq.n	80083fc <UART_SetConfig+0x208>
 80083ce:	2bc0      	cmp	r3, #192	; 0xc0
 80083d0:	d818      	bhi.n	8008404 <UART_SetConfig+0x210>
 80083d2:	2b80      	cmp	r3, #128	; 0x80
 80083d4:	d00a      	beq.n	80083ec <UART_SetConfig+0x1f8>
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d814      	bhi.n	8008404 <UART_SetConfig+0x210>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <UART_SetConfig+0x1f0>
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d008      	beq.n	80083f4 <UART_SetConfig+0x200>
 80083e2:	e00f      	b.n	8008404 <UART_SetConfig+0x210>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ea:	e082      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e07e      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083f4:	2304      	movs	r3, #4
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e07a      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80083fc:	2308      	movs	r3, #8
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e076      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008404:	2310      	movs	r3, #16
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e072      	b.n	80084f2 <UART_SetConfig+0x2fe>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a35      	ldr	r2, [pc, #212]	; (80084e8 <UART_SetConfig+0x2f4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d12a      	bne.n	800846c <UART_SetConfig+0x278>
 8008416:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <UART_SetConfig+0x2e4>)
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008424:	d01a      	beq.n	800845c <UART_SetConfig+0x268>
 8008426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800842a:	d81b      	bhi.n	8008464 <UART_SetConfig+0x270>
 800842c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008430:	d00c      	beq.n	800844c <UART_SetConfig+0x258>
 8008432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008436:	d815      	bhi.n	8008464 <UART_SetConfig+0x270>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <UART_SetConfig+0x250>
 800843c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008440:	d008      	beq.n	8008454 <UART_SetConfig+0x260>
 8008442:	e00f      	b.n	8008464 <UART_SetConfig+0x270>
 8008444:	2300      	movs	r3, #0
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844a:	e052      	b.n	80084f2 <UART_SetConfig+0x2fe>
 800844c:	2302      	movs	r3, #2
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e04e      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008454:	2304      	movs	r3, #4
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845a:	e04a      	b.n	80084f2 <UART_SetConfig+0x2fe>
 800845c:	2308      	movs	r3, #8
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e046      	b.n	80084f2 <UART_SetConfig+0x2fe>
 8008464:	2310      	movs	r3, #16
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e042      	b.n	80084f2 <UART_SetConfig+0x2fe>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <UART_SetConfig+0x2dc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d13a      	bne.n	80084ec <UART_SetConfig+0x2f8>
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <UART_SetConfig+0x2e4>)
 8008478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008484:	d01a      	beq.n	80084bc <UART_SetConfig+0x2c8>
 8008486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848a:	d81b      	bhi.n	80084c4 <UART_SetConfig+0x2d0>
 800848c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008490:	d00c      	beq.n	80084ac <UART_SetConfig+0x2b8>
 8008492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008496:	d815      	bhi.n	80084c4 <UART_SetConfig+0x2d0>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <UART_SetConfig+0x2b0>
 800849c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a0:	d008      	beq.n	80084b4 <UART_SetConfig+0x2c0>
 80084a2:	e00f      	b.n	80084c4 <UART_SetConfig+0x2d0>
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084aa:	e022      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e01e      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80084b4:	2304      	movs	r3, #4
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e01a      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e016      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80084c4:	2310      	movs	r3, #16
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e012      	b.n	80084f2 <UART_SetConfig+0x2fe>
 80084cc:	cfff69f3 	.word	0xcfff69f3
 80084d0:	40008000 	.word	0x40008000
 80084d4:	40013800 	.word	0x40013800
 80084d8:	40021000 	.word	0x40021000
 80084dc:	40004400 	.word	0x40004400
 80084e0:	40004800 	.word	0x40004800
 80084e4:	40004c00 	.word	0x40004c00
 80084e8:	40005000 	.word	0x40005000
 80084ec:	2310      	movs	r3, #16
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4aae      	ldr	r2, [pc, #696]	; (80087b0 <UART_SetConfig+0x5bc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	f040 8097 	bne.w	800862c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008502:	2b08      	cmp	r3, #8
 8008504:	d823      	bhi.n	800854e <UART_SetConfig+0x35a>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <UART_SetConfig+0x318>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	08008531 	.word	0x08008531
 8008510:	0800854f 	.word	0x0800854f
 8008514:	08008539 	.word	0x08008539
 8008518:	0800854f 	.word	0x0800854f
 800851c:	0800853f 	.word	0x0800853f
 8008520:	0800854f 	.word	0x0800854f
 8008524:	0800854f 	.word	0x0800854f
 8008528:	0800854f 	.word	0x0800854f
 800852c:	08008547 	.word	0x08008547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008530:	f7fd fd70 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 8008534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008536:	e010      	b.n	800855a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008538:	4b9e      	ldr	r3, [pc, #632]	; (80087b4 <UART_SetConfig+0x5c0>)
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800853c:	e00d      	b.n	800855a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800853e:	f7fd fcfb 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8008542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008544:	e009      	b.n	800855a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800854c:	e005      	b.n	800855a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8130 	beq.w	80087c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	4a94      	ldr	r2, [pc, #592]	; (80087b8 <UART_SetConfig+0x5c4>)
 8008568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800856c:	461a      	mov	r2, r3
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	fbb3 f3f2 	udiv	r3, r3, r2
 8008574:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4413      	add	r3, r2
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	429a      	cmp	r2, r3
 8008584:	d305      	bcc.n	8008592 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	429a      	cmp	r2, r3
 8008590:	d903      	bls.n	800859a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008598:	e113      	b.n	80087c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	2200      	movs	r2, #0
 800859e:	60bb      	str	r3, [r7, #8]
 80085a0:	60fa      	str	r2, [r7, #12]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	4a84      	ldr	r2, [pc, #528]	; (80087b8 <UART_SetConfig+0x5c4>)
 80085a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2200      	movs	r2, #0
 80085b0:	603b      	str	r3, [r7, #0]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085bc:	f7f8 fb96 	bl	8000cec <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4610      	mov	r0, r2
 80085c6:	4619      	mov	r1, r3
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	020b      	lsls	r3, r1, #8
 80085d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085d6:	0202      	lsls	r2, r0, #8
 80085d8:	6979      	ldr	r1, [r7, #20]
 80085da:	6849      	ldr	r1, [r1, #4]
 80085dc:	0849      	lsrs	r1, r1, #1
 80085de:	2000      	movs	r0, #0
 80085e0:	460c      	mov	r4, r1
 80085e2:	4605      	mov	r5, r0
 80085e4:	eb12 0804 	adds.w	r8, r2, r4
 80085e8:	eb43 0905 	adc.w	r9, r3, r5
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	469a      	mov	sl, r3
 80085f4:	4693      	mov	fp, r2
 80085f6:	4652      	mov	r2, sl
 80085f8:	465b      	mov	r3, fp
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	f7f8 fb75 	bl	8000cec <__aeabi_uldivmod>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4613      	mov	r3, r2
 8008608:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008610:	d308      	bcc.n	8008624 <UART_SetConfig+0x430>
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008618:	d204      	bcs.n	8008624 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6a3a      	ldr	r2, [r7, #32]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	e0ce      	b.n	80087c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800862a:	e0ca      	b.n	80087c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008634:	d166      	bne.n	8008704 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008636:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800863a:	2b08      	cmp	r3, #8
 800863c:	d827      	bhi.n	800868e <UART_SetConfig+0x49a>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <UART_SetConfig+0x450>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008669 	.word	0x08008669
 8008648:	08008671 	.word	0x08008671
 800864c:	08008679 	.word	0x08008679
 8008650:	0800868f 	.word	0x0800868f
 8008654:	0800867f 	.word	0x0800867f
 8008658:	0800868f 	.word	0x0800868f
 800865c:	0800868f 	.word	0x0800868f
 8008660:	0800868f 	.word	0x0800868f
 8008664:	08008687 	.word	0x08008687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008668:	f7fd fcd4 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 800866c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800866e:	e014      	b.n	800869a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008670:	f7fd fce6 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 8008674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008676:	e010      	b.n	800869a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008678:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <UART_SetConfig+0x5c0>)
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800867c:	e00d      	b.n	800869a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800867e:	f7fd fc5b 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8008682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008684:	e009      	b.n	800869a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800868c:	e005      	b.n	800869a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8090 	beq.w	80087c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	4a44      	ldr	r2, [pc, #272]	; (80087b8 <UART_SetConfig+0x5c4>)
 80086a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b4:	005a      	lsls	r2, r3, #1
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	441a      	add	r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d916      	bls.n	80086fc <UART_SetConfig+0x508>
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d4:	d212      	bcs.n	80086fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	f023 030f 	bic.w	r3, r3, #15
 80086de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	8bfb      	ldrh	r3, [r7, #30]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	8bfa      	ldrh	r2, [r7, #30]
 80086f8:	60da      	str	r2, [r3, #12]
 80086fa:	e062      	b.n	80087c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008702:	e05e      	b.n	80087c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008708:	2b08      	cmp	r3, #8
 800870a:	d828      	bhi.n	800875e <UART_SetConfig+0x56a>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0x520>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008739 	.word	0x08008739
 8008718:	08008741 	.word	0x08008741
 800871c:	08008749 	.word	0x08008749
 8008720:	0800875f 	.word	0x0800875f
 8008724:	0800874f 	.word	0x0800874f
 8008728:	0800875f 	.word	0x0800875f
 800872c:	0800875f 	.word	0x0800875f
 8008730:	0800875f 	.word	0x0800875f
 8008734:	08008757 	.word	0x08008757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008738:	f7fd fc6c 	bl	8006014 <HAL_RCC_GetPCLK1Freq>
 800873c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800873e:	e014      	b.n	800876a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008740:	f7fd fc7e 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008746:	e010      	b.n	800876a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008748:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <UART_SetConfig+0x5c0>)
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800874c:	e00d      	b.n	800876a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800874e:	f7fd fbf3 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8008752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008754:	e009      	b.n	800876a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800875c:	e005      	b.n	800876a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008768:	bf00      	nop
    }

    if (pclk != 0U)
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	d028      	beq.n	80087c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <UART_SetConfig+0x5c4>)
 8008776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800877a:	461a      	mov	r2, r3
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	085b      	lsrs	r3, r3, #1
 8008788:	441a      	add	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d910      	bls.n	80087bc <UART_SetConfig+0x5c8>
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d20c      	bcs.n	80087bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	e009      	b.n	80087c2 <UART_SetConfig+0x5ce>
 80087ae:	bf00      	nop
 80087b0:	40008000 	.word	0x40008000
 80087b4:	00f42400 	.word	0x00f42400
 80087b8:	0800fb24 	.word	0x0800fb24
      }
      else
      {
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2200      	movs	r2, #0
 80087dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3730      	adds	r7, #48	; 0x30
 80087e6:	46bd      	mov	sp, r7
 80087e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	f003 0310 	and.w	r3, r3, #16
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00a      	beq.n	800889e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01a      	beq.n	8008902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ea:	d10a      	bne.n	8008902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	605a      	str	r2, [r3, #4]
  }
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af02      	add	r7, sp, #8
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008940:	f7fb fa9c 	bl	8003e7c <HAL_GetTick>
 8008944:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0308 	and.w	r3, r3, #8
 8008950:	2b08      	cmp	r3, #8
 8008952:	d10e      	bne.n	8008972 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f82f 	bl	80089c6 <UART_WaitOnFlagUntilTimeout>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e025      	b.n	80089be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b04      	cmp	r3, #4
 800897e:	d10e      	bne.n	800899e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f819 	bl	80089c6 <UART_WaitOnFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e00f      	b.n	80089be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b09c      	sub	sp, #112	; 0x70
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	4613      	mov	r3, r2
 80089d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d6:	e0a9      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089de:	f000 80a5 	beq.w	8008b2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e2:	f7fb fa4b 	bl	8003e7c <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80089f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d140      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e6      	bne.n	80089f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	f023 0301 	bic.w	r3, r3, #1
 8008a40:	663b      	str	r3, [r7, #96]	; 0x60
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e069      	b.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d051      	beq.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a96:	d149      	bne.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008af4:	623a      	str	r2, [r7, #32]
 8008af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	69f9      	ldr	r1, [r7, #28]
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e5      	bne.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e010      	b.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69da      	ldr	r2, [r3, #28]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4013      	ands	r3, r2
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2301      	moveq	r3, #1
 8008b3e:	2300      	movne	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	f43f af46 	beq.w	80089d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3770      	adds	r7, #112	; 0x70
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b0a3      	sub	sp, #140	; 0x8c
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	88fa      	ldrh	r2, [r7, #6]
 8008b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8a:	d10e      	bne.n	8008baa <UART_Start_Receive_IT+0x52>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d105      	bne.n	8008ba0 <UART_Start_Receive_IT+0x48>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b9e:	e02d      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	22ff      	movs	r2, #255	; 0xff
 8008ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ba8:	e028      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10d      	bne.n	8008bce <UART_Start_Receive_IT+0x76>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <UART_Start_Receive_IT+0x6c>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	22ff      	movs	r2, #255	; 0xff
 8008bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bc2:	e01b      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	227f      	movs	r2, #127	; 0x7f
 8008bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bcc:	e016      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd6:	d10d      	bne.n	8008bf4 <UART_Start_Receive_IT+0x9c>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <UART_Start_Receive_IT+0x92>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	227f      	movs	r2, #127	; 0x7f
 8008be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008be8:	e008      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	223f      	movs	r2, #63	; 0x3f
 8008bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bf2:	e003      	b.n	8008bfc <UART_Start_Receive_IT+0xa4>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2222      	movs	r2, #34	; 0x22
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c30:	673a      	str	r2, [r7, #112]	; 0x70
 8008c32:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e3      	bne.n	8008c0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c4c:	d153      	bne.n	8008cf6 <UART_Start_Receive_IT+0x19e>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d34d      	bcc.n	8008cf6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c62:	d107      	bne.n	8008c74 <UART_Start_Receive_IT+0x11c>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4a4b      	ldr	r2, [pc, #300]	; (8008d9c <UART_Start_Receive_IT+0x244>)
 8008c70:	671a      	str	r2, [r3, #112]	; 0x70
 8008c72:	e002      	b.n	8008c7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4a4a      	ldr	r2, [pc, #296]	; (8008da0 <UART_Start_Receive_IT+0x248>)
 8008c78:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01a      	beq.n	8008cc0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ce0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ce2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_Start_Receive_IT+0x168>
 8008cf4:	e04a      	b.n	8008d8c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfe:	d107      	bne.n	8008d10 <UART_Start_Receive_IT+0x1b8>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <UART_Start_Receive_IT+0x24c>)
 8008d0c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d0e:	e002      	b.n	8008d16 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a25      	ldr	r2, [pc, #148]	; (8008da8 <UART_Start_Receive_IT+0x250>)
 8008d14:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d019      	beq.n	8008d5a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d3a:	677b      	str	r3, [r7, #116]	; 0x74
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
 8008d46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e6      	bne.n	8008d26 <UART_Start_Receive_IT+0x1ce>
 8008d58:	e018      	b.n	8008d8c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	613b      	str	r3, [r7, #16]
   return(result);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f043 0320 	orr.w	r3, r3, #32
 8008d6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	69f9      	ldr	r1, [r7, #28]
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e6      	bne.n	8008d5a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	378c      	adds	r7, #140	; 0x8c
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	080097f9 	.word	0x080097f9
 8008da0:	08009501 	.word	0x08009501
 8008da4:	0800939f 	.word	0x0800939f
 8008da8:	0800923f 	.word	0x0800923f

08008dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b095      	sub	sp, #84	; 0x54
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e6      	bne.n	8008db4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3308      	adds	r3, #8
 8008dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e3      	bne.n	8008de6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d118      	bne.n	8008e58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 0310 	bic.w	r3, r3, #16
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	61bb      	str	r3, [r7, #24]
 8008e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6979      	ldr	r1, [r7, #20]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	613b      	str	r3, [r7, #16]
   return(result);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008e6c:	bf00      	nop
 8008e6e:	3754      	adds	r7, #84	; 0x54
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff f996 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b08f      	sub	sp, #60	; 0x3c
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb2:	2b21      	cmp	r3, #33	; 0x21
 8008eb4:	d14c      	bne.n	8008f50 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d132      	bne.n	8008f28 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e6      	bne.n	8008ec2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6979      	ldr	r1, [r7, #20]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e6      	bne.n	8008ef4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008f26:	e013      	b.n	8008f50 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2c:	781a      	ldrb	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008f50:	bf00      	nop
 8008f52:	373c      	adds	r7, #60	; 0x3c
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b091      	sub	sp, #68	; 0x44
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f6a:	2b21      	cmp	r3, #33	; 0x21
 8008f6c:	d151      	bne.n	8009012 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d132      	bne.n	8008fe0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	623b      	str	r3, [r7, #32]
   return(result);
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	633b      	str	r3, [r7, #48]	; 0x30
 8008f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e6      	bne.n	8008f7a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	69b9      	ldr	r1, [r7, #24]
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e6      	bne.n	8008fac <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008fde:	e018      	b.n	8009012 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ff4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009012:	bf00      	nop
 8009014:	3744      	adds	r7, #68	; 0x44
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800901e:	b480      	push	{r7}
 8009020:	b091      	sub	sp, #68	; 0x44
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800902c:	2b21      	cmp	r3, #33	; 0x21
 800902e:	d160      	bne.n	80090f2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009036:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009038:	e057      	b.n	80090ea <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009040:	b29b      	uxth	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d133      	bne.n	80090ae <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	623b      	str	r3, [r7, #32]
   return(result);
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009066:	633a      	str	r2, [r7, #48]	; 0x30
 8009068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e5      	bne.n	8009046 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	60fb      	str	r3, [r7, #12]
   return(result);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908e:	637b      	str	r3, [r7, #52]	; 0x34
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	69b9      	ldr	r1, [r7, #24]
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	617b      	str	r3, [r7, #20]
   return(result);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e6      	bne.n	800907a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80090ac:	e021      	b.n	80090f2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d013      	beq.n	80090e4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80090e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80090e6:	3b01      	subs	r3, #1
 80090e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80090ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1a4      	bne.n	800903a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80090f0:	e7ff      	b.n	80090f2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80090f2:	bf00      	nop
 80090f4:	3744      	adds	r7, #68	; 0x44
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090fe:	b480      	push	{r7}
 8009100:	b091      	sub	sp, #68	; 0x44
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910c:	2b21      	cmp	r3, #33	; 0x21
 800910e:	d165      	bne.n	80091dc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009116:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009118:	e05c      	b.n	80091d4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d133      	bne.n	800918e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3308      	adds	r3, #8
 800912c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	61fb      	str	r3, [r7, #28]
   return(result);
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e5      	bne.n	8009126 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	60bb      	str	r3, [r7, #8]
   return(result);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916e:	633b      	str	r3, [r7, #48]	; 0x30
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6979      	ldr	r1, [r7, #20]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	613b      	str	r3, [r7, #16]
   return(result);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e6      	bne.n	800915a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800918c:	e026      	b.n	80091dc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009198:	2b00      	cmp	r3, #0
 800919a:	d018      	beq.n	80091ce <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091b0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b6:	1c9a      	adds	r2, r3, #2
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80091ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091d0:	3b01      	subs	r3, #1
 80091d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80091d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d19f      	bne.n	800911a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80091da:	e7ff      	b.n	80091dc <UART_TxISR_16BIT_FIFOEN+0xde>
 80091dc:	bf00      	nop
 80091de:	3744      	adds	r7, #68	; 0x44
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	613b      	str	r3, [r7, #16]
   return(result);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7f9 fcf3 	bl	8002c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009236:	bf00      	nop
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b096      	sub	sp, #88	; 0x58
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800924c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009256:	2b22      	cmp	r3, #34	; 0x22
 8009258:	f040 8095 	bne.w	8009386 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009266:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800926a:	b2d9      	uxtb	r1, r3
 800926c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009270:	b2da      	uxtb	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	400a      	ands	r2, r1
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800928c:	b29b      	uxth	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	b29a      	uxth	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d178      	bne.n	8009396 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b8:	653b      	str	r3, [r7, #80]	; 0x50
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44
 80092c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e6      	bne.n	80092a4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	623b      	str	r3, [r7, #32]
   return(result);
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092f6:	633a      	str	r2, [r7, #48]	; 0x30
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e5      	bne.n	80092d6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d12e      	bne.n	800937e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	60fb      	str	r3, [r7, #12]
   return(result);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0310 	bic.w	r3, r3, #16
 800933a:	64bb      	str	r3, [r7, #72]	; 0x48
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	617b      	str	r3, [r7, #20]
   return(result);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e6      	bne.n	8009326 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b10      	cmp	r3, #16
 8009364:	d103      	bne.n	800936e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2210      	movs	r2, #16
 800936c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe ff30 	bl	80081dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800937c:	e00b      	b.n	8009396 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7f9 fc36 	bl	8002bf0 <HAL_UART_RxCpltCallback>
}
 8009384:	e007      	b.n	8009396 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 0208 	orr.w	r2, r2, #8
 8009394:	619a      	str	r2, [r3, #24]
}
 8009396:	bf00      	nop
 8009398:	3758      	adds	r7, #88	; 0x58
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b096      	sub	sp, #88	; 0x58
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	2b22      	cmp	r3, #34	; 0x22
 80093b8:	f040 8095 	bne.w	80094e6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80093cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80093d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093d4:	4013      	ands	r3, r2
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e0:	1c9a      	adds	r2, r3, #2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d178      	bne.n	80094f6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009422:	643b      	str	r3, [r7, #64]	; 0x40
 8009424:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e6      	bne.n	8009404 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	61fb      	str	r3, [r7, #28]
   return(result);
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	64bb      	str	r3, [r7, #72]	; 0x48
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800945c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e5      	bne.n	8009436 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947c:	2b01      	cmp	r3, #1
 800947e:	d12e      	bne.n	80094de <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	60bb      	str	r3, [r7, #8]
   return(result);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f023 0310 	bic.w	r3, r3, #16
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6979      	ldr	r1, [r7, #20]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	613b      	str	r3, [r7, #16]
   return(result);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e6      	bne.n	8009486 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 0310 	and.w	r3, r3, #16
 80094c2:	2b10      	cmp	r3, #16
 80094c4:	d103      	bne.n	80094ce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2210      	movs	r2, #16
 80094cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fe fe80 	bl	80081dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094dc:	e00b      	b.n	80094f6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7f9 fb86 	bl	8002bf0 <HAL_UART_RxCpltCallback>
}
 80094e4:	e007      	b.n	80094f6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0208 	orr.w	r2, r2, #8
 80094f4:	619a      	str	r2, [r3, #24]
}
 80094f6:	bf00      	nop
 80094f8:	3758      	adds	r7, #88	; 0x58
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b0a6      	sub	sp, #152	; 0x98
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800950e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009536:	2b22      	cmp	r3, #34	; 0x22
 8009538:	f040 814f 	bne.w	80097da <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009542:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009546:	e0f6      	b.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009552:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009556:	b2d9      	uxtb	r1, r3
 8009558:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	400a      	ands	r2, r1
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800958e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d053      	beq.n	8009642 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800959a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d011      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80095a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c0:	f043 0201 	orr.w	r2, r3, #1
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d011      	beq.n	80095fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80095d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00b      	beq.n	80095fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2202      	movs	r2, #2
 80095e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f0:	f043 0204 	orr.w	r2, r3, #4
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d011      	beq.n	800962a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00b      	beq.n	800962a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2204      	movs	r2, #4
 8009618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009620:	f043 0202 	orr.w	r2, r3, #2
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fe fdc7 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d173      	bne.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800965c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800965e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009670:	66bb      	str	r3, [r7, #104]	; 0x68
 8009672:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009674:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009678:	e841 2300 	strex	r3, r2, [r1]
 800967c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800967e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096a8:	657a      	str	r2, [r7, #84]	; 0x54
 80096aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d12e      	bne.n	8009730 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	f023 0310 	bic.w	r3, r3, #16
 80096ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f6:	643b      	str	r3, [r7, #64]	; 0x40
 80096f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e6      	bne.n	80096d8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f003 0310 	and.w	r3, r3, #16
 8009714:	2b10      	cmp	r3, #16
 8009716:	d103      	bne.n	8009720 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2210      	movs	r2, #16
 800971e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7fe fd57 	bl	80081dc <HAL_UARTEx_RxEventCallback>
 800972e:	e002      	b.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7f9 fa5d 	bl	8002bf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009736:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800973e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	f47f aefe 	bne.w	8009548 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009752:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009756:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800975a:	2b00      	cmp	r3, #0
 800975c:	d045      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009764:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009768:	429a      	cmp	r2, r3
 800976a:	d23e      	bcs.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3308      	adds	r3, #8
 8009772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	61fb      	str	r3, [r7, #28]
   return(result);
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009782:	673b      	str	r3, [r7, #112]	; 0x70
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800978c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800978e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009794:	e841 2300 	strex	r3, r2, [r1]
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e5      	bne.n	800976c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a14      	ldr	r2, [pc, #80]	; (80097f4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80097a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f043 0320 	orr.w	r3, r3, #32
 80097ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6979      	ldr	r1, [r7, #20]
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	613b      	str	r3, [r7, #16]
   return(result);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e6      	bne.n	80097a6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d8:	e007      	b.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0208 	orr.w	r2, r2, #8
 80097e8:	619a      	str	r2, [r3, #24]
}
 80097ea:	bf00      	nop
 80097ec:	3798      	adds	r7, #152	; 0x98
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	0800923f 	.word	0x0800923f

080097f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b0a8      	sub	sp, #160	; 0xa0
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009806:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982e:	2b22      	cmp	r3, #34	; 0x22
 8009830:	f040 8153 	bne.w	8009ada <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800983a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800983e:	e0fa      	b.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009852:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009856:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800985a:	4013      	ands	r3, r2
 800985c:	b29a      	uxth	r2, r3
 800985e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009862:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009868:	1c9a      	adds	r2, r3, #2
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	b29a      	uxth	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800988a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b00      	cmp	r3, #0
 8009894:	d053      	beq.n	800993e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d011      	beq.n	80098c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80098a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2201      	movs	r2, #1
 80098b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098bc:	f043 0201 	orr.w	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d011      	beq.n	80098f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2202      	movs	r2, #2
 80098e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ec:	f043 0204 	orr.w	r2, r3, #4
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d011      	beq.n	8009926 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2204      	movs	r2, #4
 8009914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800991c:	f043 0202 	orr.w	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d006      	beq.n	800993e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7fe fc49 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009944:	b29b      	uxth	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d175      	bne.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800995a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800995e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800996c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800996e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009972:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800997a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e4      	bne.n	800994a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3308      	adds	r3, #8
 80099a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80099aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e1      	bne.n	8009980 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d12e      	bne.n	8009a30 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e8:	f023 0310 	bic.w	r3, r3, #16
 80099ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099f6:	647b      	str	r3, [r7, #68]	; 0x44
 80099f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e6      	bne.n	80099d8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d103      	bne.n	8009a20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fe fbd7 	bl	80081dc <HAL_UARTEx_RxEventCallback>
 8009a2e:	e002      	b.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7f9 f8dd 	bl	8002bf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f47f aefa 	bne.w	8009840 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a52:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d045      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a64:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d23e      	bcs.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3308      	adds	r3, #8
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a82:	677b      	str	r3, [r7, #116]	; 0x74
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a8c:	633a      	str	r2, [r7, #48]	; 0x30
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e5      	bne.n	8009a6c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a14      	ldr	r2, [pc, #80]	; (8009af4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009aa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f043 0320 	orr.w	r3, r3, #32
 8009aba:	673b      	str	r3, [r7, #112]	; 0x70
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e6      	bne.n	8009aa6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad8:	e007      	b.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699a      	ldr	r2, [r3, #24]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0208 	orr.w	r2, r2, #8
 8009ae8:	619a      	str	r2, [r3, #24]
}
 8009aea:	bf00      	nop
 8009aec:	37a0      	adds	r7, #160	; 0xa0
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	0800939f 	.word	0x0800939f

08009af8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_UARTEx_DisableFifoMode+0x16>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e027      	b.n	8009b9a <HAL_UARTEx_DisableFifoMode+0x66>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2224      	movs	r2, #36	; 0x24
 8009b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e02d      	b.n	8009c1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2224      	movs	r2, #36	; 0x24
 8009bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0201 	bic.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f850 	bl	8009ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d101      	bne.n	8009c3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c36:	2302      	movs	r3, #2
 8009c38:	e02d      	b.n	8009c96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2224      	movs	r2, #36	; 0x24
 8009c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f812 	bl	8009ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d108      	bne.n	8009cc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc0:	e031      	b.n	8009d26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	0e5b      	lsrs	r3, r3, #25
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	0f5b      	lsrs	r3, r3, #29
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	7b3a      	ldrb	r2, [r7, #12]
 8009cee:	4911      	ldr	r1, [pc, #68]	; (8009d34 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf0:	5c8a      	ldrb	r2, [r1, r2]
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cf6:	7b3a      	ldrb	r2, [r7, #12]
 8009cf8:	490f      	ldr	r1, [pc, #60]	; (8009d38 <UARTEx_SetNbDataToProcess+0x98>)
 8009cfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	7b7a      	ldrb	r2, [r7, #13]
 8009d0c:	4909      	ldr	r1, [pc, #36]	; (8009d34 <UARTEx_SetNbDataToProcess+0x94>)
 8009d0e:	5c8a      	ldrb	r2, [r1, r2]
 8009d10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d14:	7b7a      	ldrb	r2, [r7, #13]
 8009d16:	4908      	ldr	r1, [pc, #32]	; (8009d38 <UARTEx_SetNbDataToProcess+0x98>)
 8009d18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	0800fb3c 	.word	0x0800fb3c
 8009d38:	0800fb44 	.word	0x0800fb44

08009d3c <_ZNSaIcEC1Ev>:
 8009d3c:	4770      	bx	lr

08009d3e <_ZNSaIcED1Ev>:
 8009d3e:	4770      	bx	lr

08009d40 <_ZSt17__throw_bad_allocv>:
 8009d40:	b508      	push	{r3, lr}
 8009d42:	f000 f9d7 	bl	800a0f4 <abort>

08009d46 <_ZSt19__throw_logic_errorPKc>:
 8009d46:	b508      	push	{r3, lr}
 8009d48:	f000 f9d4 	bl	800a0f4 <abort>

08009d4c <_ZSt24__throw_invalid_argumentPKc>:
 8009d4c:	b508      	push	{r3, lr}
 8009d4e:	f000 f9d1 	bl	800a0f4 <abort>

08009d52 <_ZSt20__throw_length_errorPKc>:
 8009d52:	b508      	push	{r3, lr}
 8009d54:	f000 f9ce 	bl	800a0f4 <abort>

08009d58 <_ZSt20__throw_out_of_rangePKc>:
 8009d58:	b508      	push	{r3, lr}
 8009d5a:	f000 f9cb 	bl	800a0f4 <abort>

08009d5e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009d5e:	b10a      	cbz	r2, 8009d64 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009d60:	f000 bbfa 	b.w	800a558 <memcpy>
 8009d64:	4770      	bx	lr
	...

08009d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009d68:	b508      	push	{r3, lr}
 8009d6a:	680b      	ldr	r3, [r1, #0]
 8009d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d70:	d302      	bcc.n	8009d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009d72:	480d      	ldr	r0, [pc, #52]	; (8009da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009d74:	f7ff ffed 	bl	8009d52 <_ZSt20__throw_length_errorPKc>
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d90b      	bls.n	8009d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009d7c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009d80:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009d84:	d206      	bcs.n	8009d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009d86:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d8a:	bf2a      	itet	cs
 8009d8c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009d90:	6008      	strcc	r0, [r1, #0]
 8009d92:	600b      	strcs	r3, [r1, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	3001      	adds	r0, #1
 8009d98:	d501      	bpl.n	8009d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009d9a:	f7ff ffd1 	bl	8009d40 <_ZSt17__throw_bad_allocv>
 8009d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009da2:	f000 b860 	b.w	8009e66 <_Znwj>
 8009da6:	bf00      	nop
 8009da8:	0800fb4c 	.word	0x0800fb4c

08009dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009dac:	f850 3b08 	ldr.w	r3, [r0], #8
 8009db0:	4283      	cmp	r3, r0
 8009db2:	d002      	beq.n	8009dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 b854 	b.w	8009e62 <_ZdlPv>
 8009dba:	4770      	bx	lr

08009dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009dbc:	2a01      	cmp	r2, #1
 8009dbe:	b410      	push	{r4}
 8009dc0:	d104      	bne.n	8009dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8009dc2:	780a      	ldrb	r2, [r1, #0]
 8009dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dc8:	7002      	strb	r2, [r0, #0]
 8009dca:	4770      	bx	lr
 8009dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd0:	f7ff bfc5 	b.w	8009d5e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009dd4:	b508      	push	{r3, lr}
 8009dd6:	1a52      	subs	r2, r2, r1
 8009dd8:	f7ff fff0 	bl	8009dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ddc:	bd08      	pop	{r3, pc}

08009dde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009dde:	b510      	push	{r4, lr}
 8009de0:	4604      	mov	r4, r0
 8009de2:	f7ff ffe3 	bl	8009dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009de6:	4620      	mov	r0, r4
 8009de8:	bd10      	pop	{r4, pc}

08009dea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	4770      	bx	lr
	...

08009df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df2:	4604      	mov	r4, r0
 8009df4:	4616      	mov	r6, r2
 8009df6:	460d      	mov	r5, r1
 8009df8:	b919      	cbnz	r1, 8009e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009dfa:	b112      	cbz	r2, 8009e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009dfc:	480d      	ldr	r0, [pc, #52]	; (8009e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009dfe:	f7ff ffa2 	bl	8009d46 <_ZSt19__throw_logic_errorPKc>
 8009e02:	1b73      	subs	r3, r6, r5
 8009e04:	2b0f      	cmp	r3, #15
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	d907      	bls.n	8009e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	a901      	add	r1, sp, #4
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff ffaa 	bl	8009d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	6020      	str	r0, [r4, #0]
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	6820      	ldr	r0, [r4, #0]
 8009e20:	f7ff ffd8 	bl	8009dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009e24:	9b01      	ldr	r3, [sp, #4]
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	6063      	str	r3, [r4, #4]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	54d1      	strb	r1, [r2, r3]
 8009e2e:	b002      	add	sp, #8
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
 8009e32:	bf00      	nop
 8009e34:	0800fb64 	.word	0x0800fb64

08009e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	f100 0308 	add.w	r3, r0, #8
 8009e3e:	4604      	mov	r4, r0
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	460d      	mov	r5, r1
 8009e44:	b159      	cbz	r1, 8009e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009e46:	4608      	mov	r0, r1
 8009e48:	f7f6 fa44 	bl	80002d4 <strlen>
 8009e4c:	182a      	adds	r2, r5, r0
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7ff ffcb 	bl	8009df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	2201      	movs	r2, #1
 8009e60:	e7f5      	b.n	8009e4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08009e62 <_ZdlPv>:
 8009e62:	f000 bb61 	b.w	800a528 <free>

08009e66 <_Znwj>:
 8009e66:	2801      	cmp	r0, #1
 8009e68:	bf38      	it	cc
 8009e6a:	2001      	movcc	r0, #1
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fb51 	bl	800a518 <malloc>
 8009e76:	b930      	cbnz	r0, 8009e86 <_Znwj+0x20>
 8009e78:	f000 f806 	bl	8009e88 <_ZSt15get_new_handlerv>
 8009e7c:	b908      	cbnz	r0, 8009e82 <_Znwj+0x1c>
 8009e7e:	f000 f939 	bl	800a0f4 <abort>
 8009e82:	4780      	blx	r0
 8009e84:	e7f4      	b.n	8009e70 <_Znwj+0xa>
 8009e86:	bd10      	pop	{r4, pc}

08009e88 <_ZSt15get_new_handlerv>:
 8009e88:	4b02      	ldr	r3, [pc, #8]	; (8009e94 <_ZSt15get_new_handlerv+0xc>)
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	f3bf 8f5b 	dmb	ish
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000914 	.word	0x20000914

08009e98 <asinf>:
 8009e98:	b508      	push	{r3, lr}
 8009e9a:	ed2d 8b02 	vpush	{d8}
 8009e9e:	eeb0 8a40 	vmov.f32	s16, s0
 8009ea2:	f000 f825 	bl	8009ef0 <__ieee754_asinf>
 8009ea6:	eeb4 8a48 	vcmp.f32	s16, s16
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	eef0 8a40 	vmov.f32	s17, s0
 8009eb2:	d615      	bvs.n	8009ee0 <asinf+0x48>
 8009eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8009eb8:	f000 f90e 	bl	800a0d8 <fabsf>
 8009ebc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ec0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec8:	dd0a      	ble.n	8009ee0 <asinf+0x48>
 8009eca:	f000 f91b 	bl	800a104 <__errno>
 8009ece:	ecbd 8b02 	vpop	{d8}
 8009ed2:	2321      	movs	r3, #33	; 0x21
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009eda:	4804      	ldr	r0, [pc, #16]	; (8009eec <asinf+0x54>)
 8009edc:	f000 b904 	b.w	800a0e8 <nanf>
 8009ee0:	eeb0 0a68 	vmov.f32	s0, s17
 8009ee4:	ecbd 8b02 	vpop	{d8}
 8009ee8:	bd08      	pop	{r3, pc}
 8009eea:	bf00      	nop
 8009eec:	0800fd3f 	.word	0x0800fd3f

08009ef0 <__ieee754_asinf>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	ee10 5a10 	vmov	r5, s0
 8009ef6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009efa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009efe:	ed2d 8b04 	vpush	{d8-d9}
 8009f02:	d10c      	bne.n	8009f1e <__ieee754_asinf+0x2e>
 8009f04:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a07c <__ieee754_asinf+0x18c>
 8009f08:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a080 <__ieee754_asinf+0x190>
 8009f0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009f10:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f14:	eeb0 0a67 	vmov.f32	s0, s15
 8009f18:	ecbd 8b04 	vpop	{d8-d9}
 8009f1c:	bd38      	pop	{r3, r4, r5, pc}
 8009f1e:	dd04      	ble.n	8009f2a <__ieee754_asinf+0x3a>
 8009f20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009f24:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009f28:	e7f6      	b.n	8009f18 <__ieee754_asinf+0x28>
 8009f2a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009f2e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009f32:	da0b      	bge.n	8009f4c <__ieee754_asinf+0x5c>
 8009f34:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8009f38:	da52      	bge.n	8009fe0 <__ieee754_asinf+0xf0>
 8009f3a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a084 <__ieee754_asinf+0x194>
 8009f3e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009f42:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4a:	dce5      	bgt.n	8009f18 <__ieee754_asinf+0x28>
 8009f4c:	f000 f8c4 	bl	800a0d8 <fabsf>
 8009f50:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8009f54:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8009f58:	ee20 8a08 	vmul.f32	s16, s0, s16
 8009f5c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a088 <__ieee754_asinf+0x198>
 8009f60:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a08c <__ieee754_asinf+0x19c>
 8009f64:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a090 <__ieee754_asinf+0x1a0>
 8009f68:	eea8 7a27 	vfma.f32	s14, s16, s15
 8009f6c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a094 <__ieee754_asinf+0x1a4>
 8009f70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009f74:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a098 <__ieee754_asinf+0x1a8>
 8009f78:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009f7c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a09c <__ieee754_asinf+0x1ac>
 8009f80:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009f84:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a0a0 <__ieee754_asinf+0x1b0>
 8009f88:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009f8c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a0a4 <__ieee754_asinf+0x1b4>
 8009f90:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009f94:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a0a8 <__ieee754_asinf+0x1b8>
 8009f98:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009f9c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a0ac <__ieee754_asinf+0x1bc>
 8009fa0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa8:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009fac:	f000 f886 	bl	800a0bc <__ieee754_sqrtf>
 8009fb0:	4b3f      	ldr	r3, [pc, #252]	; (800a0b0 <__ieee754_asinf+0x1c0>)
 8009fb2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8009fb6:	429c      	cmp	r4, r3
 8009fb8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009fbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009fc0:	dd3d      	ble.n	800a03e <__ieee754_asinf+0x14e>
 8009fc2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8009fc6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a0b4 <__ieee754_asinf+0x1c4>
 8009fca:	eee0 7a26 	vfma.f32	s15, s0, s13
 8009fce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a080 <__ieee754_asinf+0x190>
 8009fd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	bfd8      	it	le
 8009fda:	eeb1 0a40 	vnegle.f32	s0, s0
 8009fde:	e79b      	b.n	8009f18 <__ieee754_asinf+0x28>
 8009fe0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009fe4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a088 <__ieee754_asinf+0x198>
 8009fe8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a08c <__ieee754_asinf+0x19c>
 8009fec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a0a0 <__ieee754_asinf+0x1b0>
 8009ff0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009ff4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a094 <__ieee754_asinf+0x1a4>
 8009ff8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ffc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a098 <__ieee754_asinf+0x1a8>
 800a000:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a004:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a09c <__ieee754_asinf+0x1ac>
 800a008:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a00c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a090 <__ieee754_asinf+0x1a0>
 800a010:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a014:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a0a4 <__ieee754_asinf+0x1b4>
 800a018:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a01c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a0a8 <__ieee754_asinf+0x1b8>
 800a020:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a024:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a0ac <__ieee754_asinf+0x1bc>
 800a028:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a02c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a030:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a034:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a038:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a03c:	e76c      	b.n	8009f18 <__ieee754_asinf+0x28>
 800a03e:	ee10 3a10 	vmov	r3, s0
 800a042:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a046:	f023 030f 	bic.w	r3, r3, #15
 800a04a:	ee07 3a10 	vmov	s14, r3
 800a04e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a052:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a056:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a05a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a05e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a07c <__ieee754_asinf+0x18c>
 800a062:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a066:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a06a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a0b8 <__ieee754_asinf+0x1c8>
 800a06e:	eeb0 6a40 	vmov.f32	s12, s0
 800a072:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a076:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a07a:	e7aa      	b.n	8009fd2 <__ieee754_asinf+0xe2>
 800a07c:	b33bbd2e 	.word	0xb33bbd2e
 800a080:	3fc90fdb 	.word	0x3fc90fdb
 800a084:	7149f2ca 	.word	0x7149f2ca
 800a088:	3811ef08 	.word	0x3811ef08
 800a08c:	3a4f7f04 	.word	0x3a4f7f04
 800a090:	3e2aaaab 	.word	0x3e2aaaab
 800a094:	bd241146 	.word	0xbd241146
 800a098:	3e4e0aa8 	.word	0x3e4e0aa8
 800a09c:	bea6b090 	.word	0xbea6b090
 800a0a0:	3d9dc62e 	.word	0x3d9dc62e
 800a0a4:	bf303361 	.word	0xbf303361
 800a0a8:	4001572d 	.word	0x4001572d
 800a0ac:	c019d139 	.word	0xc019d139
 800a0b0:	3f799999 	.word	0x3f799999
 800a0b4:	333bbd2e 	.word	0x333bbd2e
 800a0b8:	3f490fdb 	.word	0x3f490fdb

0800a0bc <__ieee754_sqrtf>:
 800a0bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a0c0:	4770      	bx	lr
 800a0c2:	0000      	movs	r0, r0
 800a0c4:	0000      	movs	r0, r0
	...

0800a0c8 <nan>:
 800a0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0d0 <nan+0x8>
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	7ff80000 	.word	0x7ff80000

0800a0d8 <fabsf>:
 800a0d8:	ee10 3a10 	vmov	r3, s0
 800a0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0e0:	ee00 3a10 	vmov	s0, r3
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <nanf>:
 800a0e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0f0 <nanf+0x8>
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	7fc00000 	.word	0x7fc00000

0800a0f4 <abort>:
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	2006      	movs	r0, #6
 800a0f8:	f001 fbee 	bl	800b8d8 <raise>
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f7f9 fc72 	bl	80039e6 <_exit>
	...

0800a104 <__errno>:
 800a104:	4b01      	ldr	r3, [pc, #4]	; (800a10c <__errno+0x8>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	2000002c 	.word	0x2000002c

0800a110 <__sflush_r>:
 800a110:	898a      	ldrh	r2, [r1, #12]
 800a112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a116:	4605      	mov	r5, r0
 800a118:	0710      	lsls	r0, r2, #28
 800a11a:	460c      	mov	r4, r1
 800a11c:	d458      	bmi.n	800a1d0 <__sflush_r+0xc0>
 800a11e:	684b      	ldr	r3, [r1, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	dc05      	bgt.n	800a130 <__sflush_r+0x20>
 800a124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	dc02      	bgt.n	800a130 <__sflush_r+0x20>
 800a12a:	2000      	movs	r0, #0
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a132:	2e00      	cmp	r6, #0
 800a134:	d0f9      	beq.n	800a12a <__sflush_r+0x1a>
 800a136:	2300      	movs	r3, #0
 800a138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a13c:	682f      	ldr	r7, [r5, #0]
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	d032      	beq.n	800a1a8 <__sflush_r+0x98>
 800a142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	075a      	lsls	r2, r3, #29
 800a148:	d505      	bpl.n	800a156 <__sflush_r+0x46>
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	1ac0      	subs	r0, r0, r3
 800a14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a150:	b10b      	cbz	r3, 800a156 <__sflush_r+0x46>
 800a152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a154:	1ac0      	subs	r0, r0, r3
 800a156:	2300      	movs	r3, #0
 800a158:	4602      	mov	r2, r0
 800a15a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a15c:	6a21      	ldr	r1, [r4, #32]
 800a15e:	4628      	mov	r0, r5
 800a160:	47b0      	blx	r6
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	d106      	bne.n	800a176 <__sflush_r+0x66>
 800a168:	6829      	ldr	r1, [r5, #0]
 800a16a:	291d      	cmp	r1, #29
 800a16c:	d82c      	bhi.n	800a1c8 <__sflush_r+0xb8>
 800a16e:	4a2a      	ldr	r2, [pc, #168]	; (800a218 <__sflush_r+0x108>)
 800a170:	40ca      	lsrs	r2, r1
 800a172:	07d6      	lsls	r6, r2, #31
 800a174:	d528      	bpl.n	800a1c8 <__sflush_r+0xb8>
 800a176:	2200      	movs	r2, #0
 800a178:	6062      	str	r2, [r4, #4]
 800a17a:	04d9      	lsls	r1, r3, #19
 800a17c:	6922      	ldr	r2, [r4, #16]
 800a17e:	6022      	str	r2, [r4, #0]
 800a180:	d504      	bpl.n	800a18c <__sflush_r+0x7c>
 800a182:	1c42      	adds	r2, r0, #1
 800a184:	d101      	bne.n	800a18a <__sflush_r+0x7a>
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	b903      	cbnz	r3, 800a18c <__sflush_r+0x7c>
 800a18a:	6560      	str	r0, [r4, #84]	; 0x54
 800a18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a18e:	602f      	str	r7, [r5, #0]
 800a190:	2900      	cmp	r1, #0
 800a192:	d0ca      	beq.n	800a12a <__sflush_r+0x1a>
 800a194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a198:	4299      	cmp	r1, r3
 800a19a:	d002      	beq.n	800a1a2 <__sflush_r+0x92>
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fa0b 	bl	800a5b8 <_free_r>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a1a6:	e7c1      	b.n	800a12c <__sflush_r+0x1c>
 800a1a8:	6a21      	ldr	r1, [r4, #32]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	47b0      	blx	r6
 800a1b0:	1c41      	adds	r1, r0, #1
 800a1b2:	d1c7      	bne.n	800a144 <__sflush_r+0x34>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0c4      	beq.n	800a144 <__sflush_r+0x34>
 800a1ba:	2b1d      	cmp	r3, #29
 800a1bc:	d001      	beq.n	800a1c2 <__sflush_r+0xb2>
 800a1be:	2b16      	cmp	r3, #22
 800a1c0:	d101      	bne.n	800a1c6 <__sflush_r+0xb6>
 800a1c2:	602f      	str	r7, [r5, #0]
 800a1c4:	e7b1      	b.n	800a12a <__sflush_r+0x1a>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	e7ad      	b.n	800a12c <__sflush_r+0x1c>
 800a1d0:	690f      	ldr	r7, [r1, #16]
 800a1d2:	2f00      	cmp	r7, #0
 800a1d4:	d0a9      	beq.n	800a12a <__sflush_r+0x1a>
 800a1d6:	0793      	lsls	r3, r2, #30
 800a1d8:	680e      	ldr	r6, [r1, #0]
 800a1da:	bf08      	it	eq
 800a1dc:	694b      	ldreq	r3, [r1, #20]
 800a1de:	600f      	str	r7, [r1, #0]
 800a1e0:	bf18      	it	ne
 800a1e2:	2300      	movne	r3, #0
 800a1e4:	eba6 0807 	sub.w	r8, r6, r7
 800a1e8:	608b      	str	r3, [r1, #8]
 800a1ea:	f1b8 0f00 	cmp.w	r8, #0
 800a1ee:	dd9c      	ble.n	800a12a <__sflush_r+0x1a>
 800a1f0:	6a21      	ldr	r1, [r4, #32]
 800a1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1f4:	4643      	mov	r3, r8
 800a1f6:	463a      	mov	r2, r7
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b0      	blx	r6
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	dc06      	bgt.n	800a20e <__sflush_r+0xfe>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a20c:	e78e      	b.n	800a12c <__sflush_r+0x1c>
 800a20e:	4407      	add	r7, r0
 800a210:	eba8 0800 	sub.w	r8, r8, r0
 800a214:	e7e9      	b.n	800a1ea <__sflush_r+0xda>
 800a216:	bf00      	nop
 800a218:	20400001 	.word	0x20400001

0800a21c <_fflush_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	690b      	ldr	r3, [r1, #16]
 800a220:	4605      	mov	r5, r0
 800a222:	460c      	mov	r4, r1
 800a224:	b913      	cbnz	r3, 800a22c <_fflush_r+0x10>
 800a226:	2500      	movs	r5, #0
 800a228:	4628      	mov	r0, r5
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	b118      	cbz	r0, 800a236 <_fflush_r+0x1a>
 800a22e:	6983      	ldr	r3, [r0, #24]
 800a230:	b90b      	cbnz	r3, 800a236 <_fflush_r+0x1a>
 800a232:	f000 f899 	bl	800a368 <__sinit>
 800a236:	4b14      	ldr	r3, [pc, #80]	; (800a288 <_fflush_r+0x6c>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	d11b      	bne.n	800a274 <_fflush_r+0x58>
 800a23c:	686c      	ldr	r4, [r5, #4]
 800a23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0ef      	beq.n	800a226 <_fflush_r+0xa>
 800a246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a248:	07d0      	lsls	r0, r2, #31
 800a24a:	d404      	bmi.n	800a256 <_fflush_r+0x3a>
 800a24c:	0599      	lsls	r1, r3, #22
 800a24e:	d402      	bmi.n	800a256 <_fflush_r+0x3a>
 800a250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a252:	f000 f95e 	bl	800a512 <__retarget_lock_acquire_recursive>
 800a256:	4628      	mov	r0, r5
 800a258:	4621      	mov	r1, r4
 800a25a:	f7ff ff59 	bl	800a110 <__sflush_r>
 800a25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a260:	07da      	lsls	r2, r3, #31
 800a262:	4605      	mov	r5, r0
 800a264:	d4e0      	bmi.n	800a228 <_fflush_r+0xc>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	059b      	lsls	r3, r3, #22
 800a26a:	d4dd      	bmi.n	800a228 <_fflush_r+0xc>
 800a26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26e:	f000 f951 	bl	800a514 <__retarget_lock_release_recursive>
 800a272:	e7d9      	b.n	800a228 <_fflush_r+0xc>
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <_fflush_r+0x70>)
 800a276:	429c      	cmp	r4, r3
 800a278:	d101      	bne.n	800a27e <_fflush_r+0x62>
 800a27a:	68ac      	ldr	r4, [r5, #8]
 800a27c:	e7df      	b.n	800a23e <_fflush_r+0x22>
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <_fflush_r+0x74>)
 800a280:	429c      	cmp	r4, r3
 800a282:	bf08      	it	eq
 800a284:	68ec      	ldreq	r4, [r5, #12]
 800a286:	e7da      	b.n	800a23e <_fflush_r+0x22>
 800a288:	0800fbb0 	.word	0x0800fbb0
 800a28c:	0800fbd0 	.word	0x0800fbd0
 800a290:	0800fb90 	.word	0x0800fb90

0800a294 <fflush>:
 800a294:	4601      	mov	r1, r0
 800a296:	b920      	cbnz	r0, 800a2a2 <fflush+0xe>
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <fflush+0x18>)
 800a29a:	4905      	ldr	r1, [pc, #20]	; (800a2b0 <fflush+0x1c>)
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	f000 b8f3 	b.w	800a488 <_fwalk_reent>
 800a2a2:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <fflush+0x20>)
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	f7ff bfb9 	b.w	800a21c <_fflush_r>
 800a2aa:	bf00      	nop
 800a2ac:	0800fbf0 	.word	0x0800fbf0
 800a2b0:	0800a21d 	.word	0x0800a21d
 800a2b4:	2000002c 	.word	0x2000002c

0800a2b8 <std>:
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e9c0 3300 	strd	r3, r3, [r0]
 800a2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2c6:	6083      	str	r3, [r0, #8]
 800a2c8:	8181      	strh	r1, [r0, #12]
 800a2ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a2cc:	81c2      	strh	r2, [r0, #14]
 800a2ce:	6183      	str	r3, [r0, #24]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	305c      	adds	r0, #92	; 0x5c
 800a2d6:	f000 f967 	bl	800a5a8 <memset>
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <std+0x38>)
 800a2dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <std+0x3c>)
 800a2e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <std+0x40>)
 800a2e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <std+0x44>)
 800a2e8:	6224      	str	r4, [r4, #32]
 800a2ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0800b951 	.word	0x0800b951
 800a2f4:	0800b973 	.word	0x0800b973
 800a2f8:	0800b9ab 	.word	0x0800b9ab
 800a2fc:	0800b9cf 	.word	0x0800b9cf

0800a300 <_cleanup_r>:
 800a300:	4901      	ldr	r1, [pc, #4]	; (800a308 <_cleanup_r+0x8>)
 800a302:	f000 b8c1 	b.w	800a488 <_fwalk_reent>
 800a306:	bf00      	nop
 800a308:	0800a21d 	.word	0x0800a21d

0800a30c <__sfmoreglue>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	2268      	movs	r2, #104	; 0x68
 800a310:	1e4d      	subs	r5, r1, #1
 800a312:	4355      	muls	r5, r2
 800a314:	460e      	mov	r6, r1
 800a316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a31a:	f000 f9b9 	bl	800a690 <_malloc_r>
 800a31e:	4604      	mov	r4, r0
 800a320:	b140      	cbz	r0, 800a334 <__sfmoreglue+0x28>
 800a322:	2100      	movs	r1, #0
 800a324:	e9c0 1600 	strd	r1, r6, [r0]
 800a328:	300c      	adds	r0, #12
 800a32a:	60a0      	str	r0, [r4, #8]
 800a32c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a330:	f000 f93a 	bl	800a5a8 <memset>
 800a334:	4620      	mov	r0, r4
 800a336:	bd70      	pop	{r4, r5, r6, pc}

0800a338 <__sfp_lock_acquire>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__sfp_lock_acquire+0x8>)
 800a33a:	f000 b8ea 	b.w	800a512 <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	20000919 	.word	0x20000919

0800a344 <__sfp_lock_release>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__sfp_lock_release+0x8>)
 800a346:	f000 b8e5 	b.w	800a514 <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	20000919 	.word	0x20000919

0800a350 <__sinit_lock_acquire>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__sinit_lock_acquire+0x8>)
 800a352:	f000 b8de 	b.w	800a512 <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	2000091a 	.word	0x2000091a

0800a35c <__sinit_lock_release>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__sinit_lock_release+0x8>)
 800a35e:	f000 b8d9 	b.w	800a514 <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	2000091a 	.word	0x2000091a

0800a368 <__sinit>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	f7ff fff0 	bl	800a350 <__sinit_lock_acquire>
 800a370:	69a3      	ldr	r3, [r4, #24]
 800a372:	b11b      	cbz	r3, 800a37c <__sinit+0x14>
 800a374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a378:	f7ff bff0 	b.w	800a35c <__sinit_lock_release>
 800a37c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a380:	6523      	str	r3, [r4, #80]	; 0x50
 800a382:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <__sinit+0x68>)
 800a384:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <__sinit+0x6c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	62a2      	str	r2, [r4, #40]	; 0x28
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	bf04      	itt	eq
 800a38e:	2301      	moveq	r3, #1
 800a390:	61a3      	streq	r3, [r4, #24]
 800a392:	4620      	mov	r0, r4
 800a394:	f000 f820 	bl	800a3d8 <__sfp>
 800a398:	6060      	str	r0, [r4, #4]
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f81c 	bl	800a3d8 <__sfp>
 800a3a0:	60a0      	str	r0, [r4, #8]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 f818 	bl	800a3d8 <__sfp>
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	60e0      	str	r0, [r4, #12]
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	6860      	ldr	r0, [r4, #4]
 800a3b0:	f7ff ff82 	bl	800a2b8 <std>
 800a3b4:	68a0      	ldr	r0, [r4, #8]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	2109      	movs	r1, #9
 800a3ba:	f7ff ff7d 	bl	800a2b8 <std>
 800a3be:	68e0      	ldr	r0, [r4, #12]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	2112      	movs	r1, #18
 800a3c4:	f7ff ff78 	bl	800a2b8 <std>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	61a3      	str	r3, [r4, #24]
 800a3cc:	e7d2      	b.n	800a374 <__sinit+0xc>
 800a3ce:	bf00      	nop
 800a3d0:	0800fbf0 	.word	0x0800fbf0
 800a3d4:	0800a301 	.word	0x0800a301

0800a3d8 <__sfp>:
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3da:	4607      	mov	r7, r0
 800a3dc:	f7ff ffac 	bl	800a338 <__sfp_lock_acquire>
 800a3e0:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <__sfp+0x84>)
 800a3e2:	681e      	ldr	r6, [r3, #0]
 800a3e4:	69b3      	ldr	r3, [r6, #24]
 800a3e6:	b913      	cbnz	r3, 800a3ee <__sfp+0x16>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff ffbd 	bl	800a368 <__sinit>
 800a3ee:	3648      	adds	r6, #72	; 0x48
 800a3f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	d503      	bpl.n	800a400 <__sfp+0x28>
 800a3f8:	6833      	ldr	r3, [r6, #0]
 800a3fa:	b30b      	cbz	r3, 800a440 <__sfp+0x68>
 800a3fc:	6836      	ldr	r6, [r6, #0]
 800a3fe:	e7f7      	b.n	800a3f0 <__sfp+0x18>
 800a400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a404:	b9d5      	cbnz	r5, 800a43c <__sfp+0x64>
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <__sfp+0x88>)
 800a408:	60e3      	str	r3, [r4, #12]
 800a40a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a40e:	6665      	str	r5, [r4, #100]	; 0x64
 800a410:	f000 f87e 	bl	800a510 <__retarget_lock_init_recursive>
 800a414:	f7ff ff96 	bl	800a344 <__sfp_lock_release>
 800a418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a41c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a420:	6025      	str	r5, [r4, #0]
 800a422:	61a5      	str	r5, [r4, #24]
 800a424:	2208      	movs	r2, #8
 800a426:	4629      	mov	r1, r5
 800a428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a42c:	f000 f8bc 	bl	800a5a8 <memset>
 800a430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a438:	4620      	mov	r0, r4
 800a43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43c:	3468      	adds	r4, #104	; 0x68
 800a43e:	e7d9      	b.n	800a3f4 <__sfp+0x1c>
 800a440:	2104      	movs	r1, #4
 800a442:	4638      	mov	r0, r7
 800a444:	f7ff ff62 	bl	800a30c <__sfmoreglue>
 800a448:	4604      	mov	r4, r0
 800a44a:	6030      	str	r0, [r6, #0]
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1d5      	bne.n	800a3fc <__sfp+0x24>
 800a450:	f7ff ff78 	bl	800a344 <__sfp_lock_release>
 800a454:	230c      	movs	r3, #12
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	e7ee      	b.n	800a438 <__sfp+0x60>
 800a45a:	bf00      	nop
 800a45c:	0800fbf0 	.word	0x0800fbf0
 800a460:	ffff0001 	.word	0xffff0001

0800a464 <fiprintf>:
 800a464:	b40e      	push	{r1, r2, r3}
 800a466:	b503      	push	{r0, r1, lr}
 800a468:	4601      	mov	r1, r0
 800a46a:	ab03      	add	r3, sp, #12
 800a46c:	4805      	ldr	r0, [pc, #20]	; (800a484 <fiprintf+0x20>)
 800a46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a472:	6800      	ldr	r0, [r0, #0]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	f000 f9a9 	bl	800a7cc <_vfiprintf_r>
 800a47a:	b002      	add	sp, #8
 800a47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a480:	b003      	add	sp, #12
 800a482:	4770      	bx	lr
 800a484:	2000002c 	.word	0x2000002c

0800a488 <_fwalk_reent>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	4606      	mov	r6, r0
 800a48e:	4688      	mov	r8, r1
 800a490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a494:	2700      	movs	r7, #0
 800a496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a49a:	f1b9 0901 	subs.w	r9, r9, #1
 800a49e:	d505      	bpl.n	800a4ac <_fwalk_reent+0x24>
 800a4a0:	6824      	ldr	r4, [r4, #0]
 800a4a2:	2c00      	cmp	r4, #0
 800a4a4:	d1f7      	bne.n	800a496 <_fwalk_reent+0xe>
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d907      	bls.n	800a4c2 <_fwalk_reent+0x3a>
 800a4b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	d003      	beq.n	800a4c2 <_fwalk_reent+0x3a>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	47c0      	blx	r8
 800a4c0:	4307      	orrs	r7, r0
 800a4c2:	3568      	adds	r5, #104	; 0x68
 800a4c4:	e7e9      	b.n	800a49a <_fwalk_reent+0x12>
	...

0800a4c8 <__libc_init_array>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	4d0d      	ldr	r5, [pc, #52]	; (800a500 <__libc_init_array+0x38>)
 800a4cc:	4c0d      	ldr	r4, [pc, #52]	; (800a504 <__libc_init_array+0x3c>)
 800a4ce:	1b64      	subs	r4, r4, r5
 800a4d0:	10a4      	asrs	r4, r4, #2
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	42a6      	cmp	r6, r4
 800a4d6:	d109      	bne.n	800a4ec <__libc_init_array+0x24>
 800a4d8:	4d0b      	ldr	r5, [pc, #44]	; (800a508 <__libc_init_array+0x40>)
 800a4da:	4c0c      	ldr	r4, [pc, #48]	; (800a50c <__libc_init_array+0x44>)
 800a4dc:	f004 fc3c 	bl	800ed58 <_init>
 800a4e0:	1b64      	subs	r4, r4, r5
 800a4e2:	10a4      	asrs	r4, r4, #2
 800a4e4:	2600      	movs	r6, #0
 800a4e6:	42a6      	cmp	r6, r4
 800a4e8:	d105      	bne.n	800a4f6 <__libc_init_array+0x2e>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f0:	4798      	blx	r3
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	e7ee      	b.n	800a4d4 <__libc_init_array+0xc>
 800a4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4fa:	4798      	blx	r3
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	e7f2      	b.n	800a4e6 <__libc_init_array+0x1e>
 800a500:	08010094 	.word	0x08010094
 800a504:	08010094 	.word	0x08010094
 800a508:	08010094 	.word	0x08010094
 800a50c:	0801009c 	.word	0x0801009c

0800a510 <__retarget_lock_init_recursive>:
 800a510:	4770      	bx	lr

0800a512 <__retarget_lock_acquire_recursive>:
 800a512:	4770      	bx	lr

0800a514 <__retarget_lock_release_recursive>:
 800a514:	4770      	bx	lr
	...

0800a518 <malloc>:
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <malloc+0xc>)
 800a51a:	4601      	mov	r1, r0
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f000 b8b7 	b.w	800a690 <_malloc_r>
 800a522:	bf00      	nop
 800a524:	2000002c 	.word	0x2000002c

0800a528 <free>:
 800a528:	4b02      	ldr	r3, [pc, #8]	; (800a534 <free+0xc>)
 800a52a:	4601      	mov	r1, r0
 800a52c:	6818      	ldr	r0, [r3, #0]
 800a52e:	f000 b843 	b.w	800a5b8 <_free_r>
 800a532:	bf00      	nop
 800a534:	2000002c 	.word	0x2000002c

0800a538 <memcmp>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	3901      	subs	r1, #1
 800a53c:	4402      	add	r2, r0
 800a53e:	4290      	cmp	r0, r2
 800a540:	d101      	bne.n	800a546 <memcmp+0xe>
 800a542:	2000      	movs	r0, #0
 800a544:	e005      	b.n	800a552 <memcmp+0x1a>
 800a546:	7803      	ldrb	r3, [r0, #0]
 800a548:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	d001      	beq.n	800a554 <memcmp+0x1c>
 800a550:	1b18      	subs	r0, r3, r4
 800a552:	bd10      	pop	{r4, pc}
 800a554:	3001      	adds	r0, #1
 800a556:	e7f2      	b.n	800a53e <memcmp+0x6>

0800a558 <memcpy>:
 800a558:	440a      	add	r2, r1
 800a55a:	4291      	cmp	r1, r2
 800a55c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a560:	d100      	bne.n	800a564 <memcpy+0xc>
 800a562:	4770      	bx	lr
 800a564:	b510      	push	{r4, lr}
 800a566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56e:	4291      	cmp	r1, r2
 800a570:	d1f9      	bne.n	800a566 <memcpy+0xe>
 800a572:	bd10      	pop	{r4, pc}

0800a574 <memmove>:
 800a574:	4288      	cmp	r0, r1
 800a576:	b510      	push	{r4, lr}
 800a578:	eb01 0402 	add.w	r4, r1, r2
 800a57c:	d902      	bls.n	800a584 <memmove+0x10>
 800a57e:	4284      	cmp	r4, r0
 800a580:	4623      	mov	r3, r4
 800a582:	d807      	bhi.n	800a594 <memmove+0x20>
 800a584:	1e43      	subs	r3, r0, #1
 800a586:	42a1      	cmp	r1, r4
 800a588:	d008      	beq.n	800a59c <memmove+0x28>
 800a58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a592:	e7f8      	b.n	800a586 <memmove+0x12>
 800a594:	4402      	add	r2, r0
 800a596:	4601      	mov	r1, r0
 800a598:	428a      	cmp	r2, r1
 800a59a:	d100      	bne.n	800a59e <memmove+0x2a>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a6:	e7f7      	b.n	800a598 <memmove+0x24>

0800a5a8 <memset>:
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d100      	bne.n	800a5b2 <memset+0xa>
 800a5b0:	4770      	bx	lr
 800a5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b6:	e7f9      	b.n	800a5ac <memset+0x4>

0800a5b8 <_free_r>:
 800a5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	d044      	beq.n	800a648 <_free_r+0x90>
 800a5be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5c2:	9001      	str	r0, [sp, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ca:	bfb8      	it	lt
 800a5cc:	18e4      	addlt	r4, r4, r3
 800a5ce:	f003 fcaf 	bl	800df30 <__malloc_lock>
 800a5d2:	4a1e      	ldr	r2, [pc, #120]	; (800a64c <_free_r+0x94>)
 800a5d4:	9801      	ldr	r0, [sp, #4]
 800a5d6:	6813      	ldr	r3, [r2, #0]
 800a5d8:	b933      	cbnz	r3, 800a5e8 <_free_r+0x30>
 800a5da:	6063      	str	r3, [r4, #4]
 800a5dc:	6014      	str	r4, [r2, #0]
 800a5de:	b003      	add	sp, #12
 800a5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e4:	f003 bcaa 	b.w	800df3c <__malloc_unlock>
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	d908      	bls.n	800a5fe <_free_r+0x46>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	1961      	adds	r1, r4, r5
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	bf01      	itttt	eq
 800a5f4:	6819      	ldreq	r1, [r3, #0]
 800a5f6:	685b      	ldreq	r3, [r3, #4]
 800a5f8:	1949      	addeq	r1, r1, r5
 800a5fa:	6021      	streq	r1, [r4, #0]
 800a5fc:	e7ed      	b.n	800a5da <_free_r+0x22>
 800a5fe:	461a      	mov	r2, r3
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	b10b      	cbz	r3, 800a608 <_free_r+0x50>
 800a604:	42a3      	cmp	r3, r4
 800a606:	d9fa      	bls.n	800a5fe <_free_r+0x46>
 800a608:	6811      	ldr	r1, [r2, #0]
 800a60a:	1855      	adds	r5, r2, r1
 800a60c:	42a5      	cmp	r5, r4
 800a60e:	d10b      	bne.n	800a628 <_free_r+0x70>
 800a610:	6824      	ldr	r4, [r4, #0]
 800a612:	4421      	add	r1, r4
 800a614:	1854      	adds	r4, r2, r1
 800a616:	42a3      	cmp	r3, r4
 800a618:	6011      	str	r1, [r2, #0]
 800a61a:	d1e0      	bne.n	800a5de <_free_r+0x26>
 800a61c:	681c      	ldr	r4, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	6053      	str	r3, [r2, #4]
 800a622:	4421      	add	r1, r4
 800a624:	6011      	str	r1, [r2, #0]
 800a626:	e7da      	b.n	800a5de <_free_r+0x26>
 800a628:	d902      	bls.n	800a630 <_free_r+0x78>
 800a62a:	230c      	movs	r3, #12
 800a62c:	6003      	str	r3, [r0, #0]
 800a62e:	e7d6      	b.n	800a5de <_free_r+0x26>
 800a630:	6825      	ldr	r5, [r4, #0]
 800a632:	1961      	adds	r1, r4, r5
 800a634:	428b      	cmp	r3, r1
 800a636:	bf04      	itt	eq
 800a638:	6819      	ldreq	r1, [r3, #0]
 800a63a:	685b      	ldreq	r3, [r3, #4]
 800a63c:	6063      	str	r3, [r4, #4]
 800a63e:	bf04      	itt	eq
 800a640:	1949      	addeq	r1, r1, r5
 800a642:	6021      	streq	r1, [r4, #0]
 800a644:	6054      	str	r4, [r2, #4]
 800a646:	e7ca      	b.n	800a5de <_free_r+0x26>
 800a648:	b003      	add	sp, #12
 800a64a:	bd30      	pop	{r4, r5, pc}
 800a64c:	2000091c 	.word	0x2000091c

0800a650 <sbrk_aligned>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	4e0e      	ldr	r6, [pc, #56]	; (800a68c <sbrk_aligned+0x3c>)
 800a654:	460c      	mov	r4, r1
 800a656:	6831      	ldr	r1, [r6, #0]
 800a658:	4605      	mov	r5, r0
 800a65a:	b911      	cbnz	r1, 800a662 <sbrk_aligned+0x12>
 800a65c:	f001 f904 	bl	800b868 <_sbrk_r>
 800a660:	6030      	str	r0, [r6, #0]
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f001 f8ff 	bl	800b868 <_sbrk_r>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d00a      	beq.n	800a684 <sbrk_aligned+0x34>
 800a66e:	1cc4      	adds	r4, r0, #3
 800a670:	f024 0403 	bic.w	r4, r4, #3
 800a674:	42a0      	cmp	r0, r4
 800a676:	d007      	beq.n	800a688 <sbrk_aligned+0x38>
 800a678:	1a21      	subs	r1, r4, r0
 800a67a:	4628      	mov	r0, r5
 800a67c:	f001 f8f4 	bl	800b868 <_sbrk_r>
 800a680:	3001      	adds	r0, #1
 800a682:	d101      	bne.n	800a688 <sbrk_aligned+0x38>
 800a684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a688:	4620      	mov	r0, r4
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	20000920 	.word	0x20000920

0800a690 <_malloc_r>:
 800a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	1ccd      	adds	r5, r1, #3
 800a696:	f025 0503 	bic.w	r5, r5, #3
 800a69a:	3508      	adds	r5, #8
 800a69c:	2d0c      	cmp	r5, #12
 800a69e:	bf38      	it	cc
 800a6a0:	250c      	movcc	r5, #12
 800a6a2:	2d00      	cmp	r5, #0
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	db01      	blt.n	800a6ac <_malloc_r+0x1c>
 800a6a8:	42a9      	cmp	r1, r5
 800a6aa:	d905      	bls.n	800a6b8 <_malloc_r+0x28>
 800a6ac:	230c      	movs	r3, #12
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	4e2e      	ldr	r6, [pc, #184]	; (800a774 <_malloc_r+0xe4>)
 800a6ba:	f003 fc39 	bl	800df30 <__malloc_lock>
 800a6be:	6833      	ldr	r3, [r6, #0]
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	bb34      	cbnz	r4, 800a712 <_malloc_r+0x82>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f7ff ffc2 	bl	800a650 <sbrk_aligned>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	d14d      	bne.n	800a76e <_malloc_r+0xde>
 800a6d2:	6834      	ldr	r4, [r6, #0]
 800a6d4:	4626      	mov	r6, r4
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d140      	bne.n	800a75c <_malloc_r+0xcc>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4638      	mov	r0, r7
 800a6e0:	eb04 0803 	add.w	r8, r4, r3
 800a6e4:	f001 f8c0 	bl	800b868 <_sbrk_r>
 800a6e8:	4580      	cmp	r8, r0
 800a6ea:	d13a      	bne.n	800a762 <_malloc_r+0xd2>
 800a6ec:	6821      	ldr	r1, [r4, #0]
 800a6ee:	3503      	adds	r5, #3
 800a6f0:	1a6d      	subs	r5, r5, r1
 800a6f2:	f025 0503 	bic.w	r5, r5, #3
 800a6f6:	3508      	adds	r5, #8
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	bf38      	it	cc
 800a6fc:	250c      	movcc	r5, #12
 800a6fe:	4629      	mov	r1, r5
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff ffa5 	bl	800a650 <sbrk_aligned>
 800a706:	3001      	adds	r0, #1
 800a708:	d02b      	beq.n	800a762 <_malloc_r+0xd2>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	442b      	add	r3, r5
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	e00e      	b.n	800a730 <_malloc_r+0xa0>
 800a712:	6822      	ldr	r2, [r4, #0]
 800a714:	1b52      	subs	r2, r2, r5
 800a716:	d41e      	bmi.n	800a756 <_malloc_r+0xc6>
 800a718:	2a0b      	cmp	r2, #11
 800a71a:	d916      	bls.n	800a74a <_malloc_r+0xba>
 800a71c:	1961      	adds	r1, r4, r5
 800a71e:	42a3      	cmp	r3, r4
 800a720:	6025      	str	r5, [r4, #0]
 800a722:	bf18      	it	ne
 800a724:	6059      	strne	r1, [r3, #4]
 800a726:	6863      	ldr	r3, [r4, #4]
 800a728:	bf08      	it	eq
 800a72a:	6031      	streq	r1, [r6, #0]
 800a72c:	5162      	str	r2, [r4, r5]
 800a72e:	604b      	str	r3, [r1, #4]
 800a730:	4638      	mov	r0, r7
 800a732:	f104 060b 	add.w	r6, r4, #11
 800a736:	f003 fc01 	bl	800df3c <__malloc_unlock>
 800a73a:	f026 0607 	bic.w	r6, r6, #7
 800a73e:	1d23      	adds	r3, r4, #4
 800a740:	1af2      	subs	r2, r6, r3
 800a742:	d0b6      	beq.n	800a6b2 <_malloc_r+0x22>
 800a744:	1b9b      	subs	r3, r3, r6
 800a746:	50a3      	str	r3, [r4, r2]
 800a748:	e7b3      	b.n	800a6b2 <_malloc_r+0x22>
 800a74a:	6862      	ldr	r2, [r4, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	bf0c      	ite	eq
 800a750:	6032      	streq	r2, [r6, #0]
 800a752:	605a      	strne	r2, [r3, #4]
 800a754:	e7ec      	b.n	800a730 <_malloc_r+0xa0>
 800a756:	4623      	mov	r3, r4
 800a758:	6864      	ldr	r4, [r4, #4]
 800a75a:	e7b2      	b.n	800a6c2 <_malloc_r+0x32>
 800a75c:	4634      	mov	r4, r6
 800a75e:	6876      	ldr	r6, [r6, #4]
 800a760:	e7b9      	b.n	800a6d6 <_malloc_r+0x46>
 800a762:	230c      	movs	r3, #12
 800a764:	603b      	str	r3, [r7, #0]
 800a766:	4638      	mov	r0, r7
 800a768:	f003 fbe8 	bl	800df3c <__malloc_unlock>
 800a76c:	e7a1      	b.n	800a6b2 <_malloc_r+0x22>
 800a76e:	6025      	str	r5, [r4, #0]
 800a770:	e7de      	b.n	800a730 <_malloc_r+0xa0>
 800a772:	bf00      	nop
 800a774:	2000091c 	.word	0x2000091c

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f002 b853 	b.w	800c83c <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6983      	ldr	r3, [r0, #24]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7ff fdc2 	bl	800a368 <__sinit>
 800a7e4:	4b89      	ldr	r3, [pc, #548]	; (800aa0c <_vfiprintf_r+0x240>)
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	d11b      	bne.n	800a822 <_vfiprintf_r+0x56>
 800a7ea:	6875      	ldr	r5, [r6, #4]
 800a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ee:	07d9      	lsls	r1, r3, #31
 800a7f0:	d405      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	059a      	lsls	r2, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_vfiprintf_r+0x32>
 800a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fa:	f7ff fe8a 	bl	800a512 <__retarget_lock_acquire_recursive>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d501      	bpl.n	800a808 <_vfiprintf_r+0x3c>
 800a804:	692b      	ldr	r3, [r5, #16]
 800a806:	b9eb      	cbnz	r3, 800a844 <_vfiprintf_r+0x78>
 800a808:	4629      	mov	r1, r5
 800a80a:	4630      	mov	r0, r6
 800a80c:	f002 f87a 	bl	800c904 <__swsetup_r>
 800a810:	b1c0      	cbz	r0, 800a844 <_vfiprintf_r+0x78>
 800a812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a814:	07dc      	lsls	r4, r3, #31
 800a816:	d50e      	bpl.n	800a836 <_vfiprintf_r+0x6a>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a81c:	b01d      	add	sp, #116	; 0x74
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4b7b      	ldr	r3, [pc, #492]	; (800aa10 <_vfiprintf_r+0x244>)
 800a824:	429d      	cmp	r5, r3
 800a826:	d101      	bne.n	800a82c <_vfiprintf_r+0x60>
 800a828:	68b5      	ldr	r5, [r6, #8]
 800a82a:	e7df      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a82c:	4b79      	ldr	r3, [pc, #484]	; (800aa14 <_vfiprintf_r+0x248>)
 800a82e:	429d      	cmp	r5, r3
 800a830:	bf08      	it	eq
 800a832:	68f5      	ldreq	r5, [r6, #12]
 800a834:	e7da      	b.n	800a7ec <_vfiprintf_r+0x20>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	0598      	lsls	r0, r3, #22
 800a83a:	d4ed      	bmi.n	800a818 <_vfiprintf_r+0x4c>
 800a83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83e:	f7ff fe69 	bl	800a514 <__retarget_lock_release_recursive>
 800a842:	e7e9      	b.n	800a818 <_vfiprintf_r+0x4c>
 800a844:	2300      	movs	r3, #0
 800a846:	9309      	str	r3, [sp, #36]	; 0x24
 800a848:	2320      	movs	r3, #32
 800a84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a852:	2330      	movs	r3, #48	; 0x30
 800a854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa18 <_vfiprintf_r+0x24c>
 800a858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a85c:	f04f 0901 	mov.w	r9, #1
 800a860:	4623      	mov	r3, r4
 800a862:	469a      	mov	sl, r3
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	b10a      	cbz	r2, 800a86e <_vfiprintf_r+0xa2>
 800a86a:	2a25      	cmp	r2, #37	; 0x25
 800a86c:	d1f9      	bne.n	800a862 <_vfiprintf_r+0x96>
 800a86e:	ebba 0b04 	subs.w	fp, sl, r4
 800a872:	d00b      	beq.n	800a88c <_vfiprintf_r+0xc0>
 800a874:	465b      	mov	r3, fp
 800a876:	4622      	mov	r2, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ff93 	bl	800a7a6 <__sfputs_r>
 800a880:	3001      	adds	r0, #1
 800a882:	f000 80aa 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a888:	445a      	add	r2, fp
 800a88a:	9209      	str	r2, [sp, #36]	; 0x24
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a2 	beq.w	800a9da <_vfiprintf_r+0x20e>
 800a896:	2300      	movs	r3, #0
 800a898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a0:	f10a 0a01 	add.w	sl, sl, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ae:	4654      	mov	r4, sl
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	4858      	ldr	r0, [pc, #352]	; (800aa18 <_vfiprintf_r+0x24c>)
 800a8b8:	f7f5 fcb2 	bl	8000220 <memchr>
 800a8bc:	9a04      	ldr	r2, [sp, #16]
 800a8be:	b9d8      	cbnz	r0, 800a8f8 <_vfiprintf_r+0x12c>
 800a8c0:	06d1      	lsls	r1, r2, #27
 800a8c2:	bf44      	itt	mi
 800a8c4:	2320      	movmi	r3, #32
 800a8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ca:	0713      	lsls	r3, r2, #28
 800a8cc:	bf44      	itt	mi
 800a8ce:	232b      	movmi	r3, #43	; 0x2b
 800a8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8da:	d015      	beq.n	800a908 <_vfiprintf_r+0x13c>
 800a8dc:	9a07      	ldr	r2, [sp, #28]
 800a8de:	4654      	mov	r4, sl
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ec:	3b30      	subs	r3, #48	; 0x30
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d94e      	bls.n	800a990 <_vfiprintf_r+0x1c4>
 800a8f2:	b1b0      	cbz	r0, 800a922 <_vfiprintf_r+0x156>
 800a8f4:	9207      	str	r2, [sp, #28]
 800a8f6:	e014      	b.n	800a922 <_vfiprintf_r+0x156>
 800a8f8:	eba0 0308 	sub.w	r3, r0, r8
 800a8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a900:	4313      	orrs	r3, r2
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	46a2      	mov	sl, r4
 800a906:	e7d2      	b.n	800a8ae <_vfiprintf_r+0xe2>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9103      	str	r1, [sp, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	bfbb      	ittet	lt
 800a914:	425b      	neglt	r3, r3
 800a916:	f042 0202 	orrlt.w	r2, r2, #2
 800a91a:	9307      	strge	r3, [sp, #28]
 800a91c:	9307      	strlt	r3, [sp, #28]
 800a91e:	bfb8      	it	lt
 800a920:	9204      	strlt	r2, [sp, #16]
 800a922:	7823      	ldrb	r3, [r4, #0]
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10c      	bne.n	800a942 <_vfiprintf_r+0x176>
 800a928:	7863      	ldrb	r3, [r4, #1]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d135      	bne.n	800a99a <_vfiprintf_r+0x1ce>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9203      	str	r2, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfb8      	it	lt
 800a93a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa28 <_vfiprintf_r+0x25c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fc68 	bl	8000220 <memchr>
 800a950:	b140      	cbz	r0, 800a964 <_vfiprintf_r+0x198>
 800a952:	2340      	movs	r3, #64	; 0x40
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	fa03 f000 	lsl.w	r0, r3, r0
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4303      	orrs	r3, r0
 800a960:	3401      	adds	r4, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	482c      	ldr	r0, [pc, #176]	; (800aa1c <_vfiprintf_r+0x250>)
 800a96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96e:	2206      	movs	r2, #6
 800a970:	f7f5 fc56 	bl	8000220 <memchr>
 800a974:	2800      	cmp	r0, #0
 800a976:	d03f      	beq.n	800a9f8 <_vfiprintf_r+0x22c>
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <_vfiprintf_r+0x254>)
 800a97a:	bb1b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x1f8>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	3307      	adds	r3, #7
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	443b      	add	r3, r7
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	e767      	b.n	800a860 <_vfiprintf_r+0x94>
 800a990:	fb0c 3202 	mla	r2, ip, r2, r3
 800a994:	460c      	mov	r4, r1
 800a996:	2001      	movs	r0, #1
 800a998:	e7a5      	b.n	800a8e6 <_vfiprintf_r+0x11a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ac:	3a30      	subs	r2, #48	; 0x30
 800a9ae:	2a09      	cmp	r2, #9
 800a9b0:	d903      	bls.n	800a9ba <_vfiprintf_r+0x1ee>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c5      	beq.n	800a942 <_vfiprintf_r+0x176>
 800a9b6:	9105      	str	r1, [sp, #20]
 800a9b8:	e7c3      	b.n	800a942 <_vfiprintf_r+0x176>
 800a9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9be:	4604      	mov	r4, r0
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f0      	b.n	800a9a6 <_vfiprintf_r+0x1da>
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <_vfiprintf_r+0x258>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f000 f8cc 	bl	800ab6c <_printf_float>
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	1c78      	adds	r0, r7, #1
 800a9d8:	d1d6      	bne.n	800a988 <_vfiprintf_r+0x1bc>
 800a9da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9dc:	07d9      	lsls	r1, r3, #31
 800a9de:	d405      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	059a      	lsls	r2, r3, #22
 800a9e4:	d402      	bmi.n	800a9ec <_vfiprintf_r+0x220>
 800a9e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e8:	f7ff fd94 	bl	800a514 <__retarget_lock_release_recursive>
 800a9ec:	89ab      	ldrh	r3, [r5, #12]
 800a9ee:	065b      	lsls	r3, r3, #25
 800a9f0:	f53f af12 	bmi.w	800a818 <_vfiprintf_r+0x4c>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	e711      	b.n	800a81c <_vfiprintf_r+0x50>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <_vfiprintf_r+0x258>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 fb56 	bl	800b0b4 <_printf_i>
 800aa08:	e7e4      	b.n	800a9d4 <_vfiprintf_r+0x208>
 800aa0a:	bf00      	nop
 800aa0c:	0800fbb0 	.word	0x0800fbb0
 800aa10:	0800fbd0 	.word	0x0800fbd0
 800aa14:	0800fb90 	.word	0x0800fb90
 800aa18:	0800fbf4 	.word	0x0800fbf4
 800aa1c:	0800fbfe 	.word	0x0800fbfe
 800aa20:	0800ab6d 	.word	0x0800ab6d
 800aa24:	0800a7a7 	.word	0x0800a7a7
 800aa28:	0800fbfa 	.word	0x0800fbfa

0800aa2c <__cvt>:
 800aa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	ec55 4b10 	vmov	r4, r5, d0
 800aa34:	2d00      	cmp	r5, #0
 800aa36:	460e      	mov	r6, r1
 800aa38:	4619      	mov	r1, r3
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	bfbb      	ittet	lt
 800aa3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa42:	461d      	movlt	r5, r3
 800aa44:	2300      	movge	r3, #0
 800aa46:	232d      	movlt	r3, #45	; 0x2d
 800aa48:	700b      	strb	r3, [r1, #0]
 800aa4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa50:	4691      	mov	r9, r2
 800aa52:	f023 0820 	bic.w	r8, r3, #32
 800aa56:	bfbc      	itt	lt
 800aa58:	4622      	movlt	r2, r4
 800aa5a:	4614      	movlt	r4, r2
 800aa5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa60:	d005      	beq.n	800aa6e <__cvt+0x42>
 800aa62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa66:	d100      	bne.n	800aa6a <__cvt+0x3e>
 800aa68:	3601      	adds	r6, #1
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	e000      	b.n	800aa70 <__cvt+0x44>
 800aa6e:	2103      	movs	r1, #3
 800aa70:	ab03      	add	r3, sp, #12
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	ab02      	add	r3, sp, #8
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	ec45 4b10 	vmov	d0, r4, r5
 800aa7c:	4653      	mov	r3, sl
 800aa7e:	4632      	mov	r2, r6
 800aa80:	f002 f86a 	bl	800cb58 <_dtoa_r>
 800aa84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa88:	4607      	mov	r7, r0
 800aa8a:	d102      	bne.n	800aa92 <__cvt+0x66>
 800aa8c:	f019 0f01 	tst.w	r9, #1
 800aa90:	d022      	beq.n	800aad8 <__cvt+0xac>
 800aa92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa96:	eb07 0906 	add.w	r9, r7, r6
 800aa9a:	d110      	bne.n	800aabe <__cvt+0x92>
 800aa9c:	783b      	ldrb	r3, [r7, #0]
 800aa9e:	2b30      	cmp	r3, #48	; 0x30
 800aaa0:	d10a      	bne.n	800aab8 <__cvt+0x8c>
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7f6 f83f 	bl	8000b2c <__aeabi_dcmpeq>
 800aaae:	b918      	cbnz	r0, 800aab8 <__cvt+0x8c>
 800aab0:	f1c6 0601 	rsb	r6, r6, #1
 800aab4:	f8ca 6000 	str.w	r6, [sl]
 800aab8:	f8da 3000 	ldr.w	r3, [sl]
 800aabc:	4499      	add	r9, r3
 800aabe:	2200      	movs	r2, #0
 800aac0:	2300      	movs	r3, #0
 800aac2:	4620      	mov	r0, r4
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7f6 f831 	bl	8000b2c <__aeabi_dcmpeq>
 800aaca:	b108      	cbz	r0, 800aad0 <__cvt+0xa4>
 800aacc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aad0:	2230      	movs	r2, #48	; 0x30
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	454b      	cmp	r3, r9
 800aad6:	d307      	bcc.n	800aae8 <__cvt+0xbc>
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aadc:	1bdb      	subs	r3, r3, r7
 800aade:	4638      	mov	r0, r7
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	b004      	add	sp, #16
 800aae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae8:	1c59      	adds	r1, r3, #1
 800aaea:	9103      	str	r1, [sp, #12]
 800aaec:	701a      	strb	r2, [r3, #0]
 800aaee:	e7f0      	b.n	800aad2 <__cvt+0xa6>

0800aaf0 <__exponent>:
 800aaf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	bfb8      	it	lt
 800aaf8:	4249      	neglt	r1, r1
 800aafa:	f803 2b02 	strb.w	r2, [r3], #2
 800aafe:	bfb4      	ite	lt
 800ab00:	222d      	movlt	r2, #45	; 0x2d
 800ab02:	222b      	movge	r2, #43	; 0x2b
 800ab04:	2909      	cmp	r1, #9
 800ab06:	7042      	strb	r2, [r0, #1]
 800ab08:	dd2a      	ble.n	800ab60 <__exponent+0x70>
 800ab0a:	f10d 0407 	add.w	r4, sp, #7
 800ab0e:	46a4      	mov	ip, r4
 800ab10:	270a      	movs	r7, #10
 800ab12:	46a6      	mov	lr, r4
 800ab14:	460a      	mov	r2, r1
 800ab16:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab1a:	fb07 1516 	mls	r5, r7, r6, r1
 800ab1e:	3530      	adds	r5, #48	; 0x30
 800ab20:	2a63      	cmp	r2, #99	; 0x63
 800ab22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ab26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	dcf1      	bgt.n	800ab12 <__exponent+0x22>
 800ab2e:	3130      	adds	r1, #48	; 0x30
 800ab30:	f1ae 0502 	sub.w	r5, lr, #2
 800ab34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab38:	1c44      	adds	r4, r0, #1
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4561      	cmp	r1, ip
 800ab3e:	d30a      	bcc.n	800ab56 <__exponent+0x66>
 800ab40:	f10d 0209 	add.w	r2, sp, #9
 800ab44:	eba2 020e 	sub.w	r2, r2, lr
 800ab48:	4565      	cmp	r5, ip
 800ab4a:	bf88      	it	hi
 800ab4c:	2200      	movhi	r2, #0
 800ab4e:	4413      	add	r3, r2
 800ab50:	1a18      	subs	r0, r3, r0
 800ab52:	b003      	add	sp, #12
 800ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab5e:	e7ed      	b.n	800ab3c <__exponent+0x4c>
 800ab60:	2330      	movs	r3, #48	; 0x30
 800ab62:	3130      	adds	r1, #48	; 0x30
 800ab64:	7083      	strb	r3, [r0, #2]
 800ab66:	70c1      	strb	r1, [r0, #3]
 800ab68:	1d03      	adds	r3, r0, #4
 800ab6a:	e7f1      	b.n	800ab50 <__exponent+0x60>

0800ab6c <_printf_float>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	ed2d 8b02 	vpush	{d8}
 800ab74:	b08d      	sub	sp, #52	; 0x34
 800ab76:	460c      	mov	r4, r1
 800ab78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab7c:	4616      	mov	r6, r2
 800ab7e:	461f      	mov	r7, r3
 800ab80:	4605      	mov	r5, r0
 800ab82:	f003 f947 	bl	800de14 <_localeconv_r>
 800ab86:	f8d0 a000 	ldr.w	sl, [r0]
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f7f5 fba2 	bl	80002d4 <strlen>
 800ab90:	2300      	movs	r3, #0
 800ab92:	930a      	str	r3, [sp, #40]	; 0x28
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	9305      	str	r3, [sp, #20]
 800ab98:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aba0:	3307      	adds	r3, #7
 800aba2:	f023 0307 	bic.w	r3, r3, #7
 800aba6:	f103 0208 	add.w	r2, r3, #8
 800abaa:	f8c8 2000 	str.w	r2, [r8]
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800abba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	f8cd 8018 	str.w	r8, [sp, #24]
 800abc4:	ee08 0a10 	vmov	s16, r0
 800abc8:	4b9f      	ldr	r3, [pc, #636]	; (800ae48 <_printf_float+0x2dc>)
 800abca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abd2:	f7f5 ffdd 	bl	8000b90 <__aeabi_dcmpun>
 800abd6:	bb88      	cbnz	r0, 800ac3c <_printf_float+0xd0>
 800abd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abdc:	4b9a      	ldr	r3, [pc, #616]	; (800ae48 <_printf_float+0x2dc>)
 800abde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abe2:	f7f5 ffb7 	bl	8000b54 <__aeabi_dcmple>
 800abe6:	bb48      	cbnz	r0, 800ac3c <_printf_float+0xd0>
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 ffa6 	bl	8000b40 <__aeabi_dcmplt>
 800abf4:	b110      	cbz	r0, 800abfc <_printf_float+0x90>
 800abf6:	232d      	movs	r3, #45	; 0x2d
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfc:	4b93      	ldr	r3, [pc, #588]	; (800ae4c <_printf_float+0x2e0>)
 800abfe:	4894      	ldr	r0, [pc, #592]	; (800ae50 <_printf_float+0x2e4>)
 800ac00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac04:	bf94      	ite	ls
 800ac06:	4698      	movls	r8, r3
 800ac08:	4680      	movhi	r8, r0
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	6123      	str	r3, [r4, #16]
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	f023 0204 	bic.w	r2, r3, #4
 800ac14:	6022      	str	r2, [r4, #0]
 800ac16:	f04f 0900 	mov.w	r9, #0
 800ac1a:	9700      	str	r7, [sp, #0]
 800ac1c:	4633      	mov	r3, r6
 800ac1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac20:	4621      	mov	r1, r4
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 f9d8 	bl	800afd8 <_printf_common>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	f040 8090 	bne.w	800ad4e <_printf_float+0x1e2>
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac32:	b00d      	add	sp, #52	; 0x34
 800ac34:	ecbd 8b02 	vpop	{d8}
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 ffa4 	bl	8000b90 <__aeabi_dcmpun>
 800ac48:	b140      	cbz	r0, 800ac5c <_printf_float+0xf0>
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfbc      	itt	lt
 800ac50:	232d      	movlt	r3, #45	; 0x2d
 800ac52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac56:	487f      	ldr	r0, [pc, #508]	; (800ae54 <_printf_float+0x2e8>)
 800ac58:	4b7f      	ldr	r3, [pc, #508]	; (800ae58 <_printf_float+0x2ec>)
 800ac5a:	e7d1      	b.n	800ac00 <_printf_float+0x94>
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac62:	9206      	str	r2, [sp, #24]
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	d13f      	bne.n	800ace8 <_printf_float+0x17c>
 800ac68:	2306      	movs	r3, #6
 800ac6a:	6063      	str	r3, [r4, #4]
 800ac6c:	9b05      	ldr	r3, [sp, #20]
 800ac6e:	6861      	ldr	r1, [r4, #4]
 800ac70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac74:	2300      	movs	r3, #0
 800ac76:	9303      	str	r3, [sp, #12]
 800ac78:	ab0a      	add	r3, sp, #40	; 0x28
 800ac7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac7e:	ab09      	add	r3, sp, #36	; 0x24
 800ac80:	ec49 8b10 	vmov	d0, r8, r9
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	6022      	str	r2, [r4, #0]
 800ac88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f7ff fecd 	bl	800aa2c <__cvt>
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac96:	2b47      	cmp	r3, #71	; 0x47
 800ac98:	4680      	mov	r8, r0
 800ac9a:	d108      	bne.n	800acae <_printf_float+0x142>
 800ac9c:	1cc8      	adds	r0, r1, #3
 800ac9e:	db02      	blt.n	800aca6 <_printf_float+0x13a>
 800aca0:	6863      	ldr	r3, [r4, #4]
 800aca2:	4299      	cmp	r1, r3
 800aca4:	dd41      	ble.n	800ad2a <_printf_float+0x1be>
 800aca6:	f1ab 0b02 	sub.w	fp, fp, #2
 800acaa:	fa5f fb8b 	uxtb.w	fp, fp
 800acae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acb2:	d820      	bhi.n	800acf6 <_printf_float+0x18a>
 800acb4:	3901      	subs	r1, #1
 800acb6:	465a      	mov	r2, fp
 800acb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acbc:	9109      	str	r1, [sp, #36]	; 0x24
 800acbe:	f7ff ff17 	bl	800aaf0 <__exponent>
 800acc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acc4:	1813      	adds	r3, r2, r0
 800acc6:	2a01      	cmp	r2, #1
 800acc8:	4681      	mov	r9, r0
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	dc02      	bgt.n	800acd4 <_printf_float+0x168>
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	07d2      	lsls	r2, r2, #31
 800acd2:	d501      	bpl.n	800acd8 <_printf_float+0x16c>
 800acd4:	3301      	adds	r3, #1
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d09c      	beq.n	800ac1a <_printf_float+0xae>
 800ace0:	232d      	movs	r3, #45	; 0x2d
 800ace2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ace6:	e798      	b.n	800ac1a <_printf_float+0xae>
 800ace8:	9a06      	ldr	r2, [sp, #24]
 800acea:	2a47      	cmp	r2, #71	; 0x47
 800acec:	d1be      	bne.n	800ac6c <_printf_float+0x100>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1bc      	bne.n	800ac6c <_printf_float+0x100>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e7b9      	b.n	800ac6a <_printf_float+0xfe>
 800acf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800acfa:	d118      	bne.n	800ad2e <_printf_float+0x1c2>
 800acfc:	2900      	cmp	r1, #0
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	dd0b      	ble.n	800ad1a <_printf_float+0x1ae>
 800ad02:	6121      	str	r1, [r4, #16]
 800ad04:	b913      	cbnz	r3, 800ad0c <_printf_float+0x1a0>
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	07d0      	lsls	r0, r2, #31
 800ad0a:	d502      	bpl.n	800ad12 <_printf_float+0x1a6>
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	440b      	add	r3, r1
 800ad10:	6123      	str	r3, [r4, #16]
 800ad12:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad14:	f04f 0900 	mov.w	r9, #0
 800ad18:	e7de      	b.n	800acd8 <_printf_float+0x16c>
 800ad1a:	b913      	cbnz	r3, 800ad22 <_printf_float+0x1b6>
 800ad1c:	6822      	ldr	r2, [r4, #0]
 800ad1e:	07d2      	lsls	r2, r2, #31
 800ad20:	d501      	bpl.n	800ad26 <_printf_float+0x1ba>
 800ad22:	3302      	adds	r3, #2
 800ad24:	e7f4      	b.n	800ad10 <_printf_float+0x1a4>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e7f2      	b.n	800ad10 <_printf_float+0x1a4>
 800ad2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad30:	4299      	cmp	r1, r3
 800ad32:	db05      	blt.n	800ad40 <_printf_float+0x1d4>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	6121      	str	r1, [r4, #16]
 800ad38:	07d8      	lsls	r0, r3, #31
 800ad3a:	d5ea      	bpl.n	800ad12 <_printf_float+0x1a6>
 800ad3c:	1c4b      	adds	r3, r1, #1
 800ad3e:	e7e7      	b.n	800ad10 <_printf_float+0x1a4>
 800ad40:	2900      	cmp	r1, #0
 800ad42:	bfd4      	ite	le
 800ad44:	f1c1 0202 	rsble	r2, r1, #2
 800ad48:	2201      	movgt	r2, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	e7e0      	b.n	800ad10 <_printf_float+0x1a4>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	055a      	lsls	r2, r3, #21
 800ad52:	d407      	bmi.n	800ad64 <_printf_float+0x1f8>
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	4642      	mov	r2, r8
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d12c      	bne.n	800adbc <_printf_float+0x250>
 800ad62:	e764      	b.n	800ac2e <_printf_float+0xc2>
 800ad64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad68:	f240 80e0 	bls.w	800af2c <_printf_float+0x3c0>
 800ad6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad70:	2200      	movs	r2, #0
 800ad72:	2300      	movs	r3, #0
 800ad74:	f7f5 feda 	bl	8000b2c <__aeabi_dcmpeq>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d034      	beq.n	800ade6 <_printf_float+0x27a>
 800ad7c:	4a37      	ldr	r2, [pc, #220]	; (800ae5c <_printf_float+0x2f0>)
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	f43f af51 	beq.w	800ac2e <_printf_float+0xc2>
 800ad8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad90:	429a      	cmp	r2, r3
 800ad92:	db02      	blt.n	800ad9a <_printf_float+0x22e>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	07d8      	lsls	r0, r3, #31
 800ad98:	d510      	bpl.n	800adbc <_printf_float+0x250>
 800ad9a:	ee18 3a10 	vmov	r3, s16
 800ad9e:	4652      	mov	r2, sl
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	f43f af41 	beq.w	800ac2e <_printf_float+0xc2>
 800adac:	f04f 0800 	mov.w	r8, #0
 800adb0:	f104 091a 	add.w	r9, r4, #26
 800adb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb6:	3b01      	subs	r3, #1
 800adb8:	4543      	cmp	r3, r8
 800adba:	dc09      	bgt.n	800add0 <_printf_float+0x264>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	079b      	lsls	r3, r3, #30
 800adc0:	f100 8105 	bmi.w	800afce <_printf_float+0x462>
 800adc4:	68e0      	ldr	r0, [r4, #12]
 800adc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc8:	4298      	cmp	r0, r3
 800adca:	bfb8      	it	lt
 800adcc:	4618      	movlt	r0, r3
 800adce:	e730      	b.n	800ac32 <_printf_float+0xc6>
 800add0:	2301      	movs	r3, #1
 800add2:	464a      	mov	r2, r9
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af27 	beq.w	800ac2e <_printf_float+0xc2>
 800ade0:	f108 0801 	add.w	r8, r8, #1
 800ade4:	e7e6      	b.n	800adb4 <_printf_float+0x248>
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dc39      	bgt.n	800ae60 <_printf_float+0x2f4>
 800adec:	4a1b      	ldr	r2, [pc, #108]	; (800ae5c <_printf_float+0x2f0>)
 800adee:	2301      	movs	r3, #1
 800adf0:	4631      	mov	r1, r6
 800adf2:	4628      	mov	r0, r5
 800adf4:	47b8      	blx	r7
 800adf6:	3001      	adds	r0, #1
 800adf8:	f43f af19 	beq.w	800ac2e <_printf_float+0xc2>
 800adfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae00:	4313      	orrs	r3, r2
 800ae02:	d102      	bne.n	800ae0a <_printf_float+0x29e>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	07d9      	lsls	r1, r3, #31
 800ae08:	d5d8      	bpl.n	800adbc <_printf_float+0x250>
 800ae0a:	ee18 3a10 	vmov	r3, s16
 800ae0e:	4652      	mov	r2, sl
 800ae10:	4631      	mov	r1, r6
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b8      	blx	r7
 800ae16:	3001      	adds	r0, #1
 800ae18:	f43f af09 	beq.w	800ac2e <_printf_float+0xc2>
 800ae1c:	f04f 0900 	mov.w	r9, #0
 800ae20:	f104 0a1a 	add.w	sl, r4, #26
 800ae24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae26:	425b      	negs	r3, r3
 800ae28:	454b      	cmp	r3, r9
 800ae2a:	dc01      	bgt.n	800ae30 <_printf_float+0x2c4>
 800ae2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2e:	e792      	b.n	800ad56 <_printf_float+0x1ea>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4652      	mov	r2, sl
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f aef7 	beq.w	800ac2e <_printf_float+0xc2>
 800ae40:	f109 0901 	add.w	r9, r9, #1
 800ae44:	e7ee      	b.n	800ae24 <_printf_float+0x2b8>
 800ae46:	bf00      	nop
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	0800fc05 	.word	0x0800fc05
 800ae50:	0800fc09 	.word	0x0800fc09
 800ae54:	0800fc11 	.word	0x0800fc11
 800ae58:	0800fc0d 	.word	0x0800fc0d
 800ae5c:	0800fc15 	.word	0x0800fc15
 800ae60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae64:	429a      	cmp	r2, r3
 800ae66:	bfa8      	it	ge
 800ae68:	461a      	movge	r2, r3
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	4691      	mov	r9, r2
 800ae6e:	dc37      	bgt.n	800aee0 <_printf_float+0x374>
 800ae70:	f04f 0b00 	mov.w	fp, #0
 800ae74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae78:	f104 021a 	add.w	r2, r4, #26
 800ae7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae7e:	9305      	str	r3, [sp, #20]
 800ae80:	eba3 0309 	sub.w	r3, r3, r9
 800ae84:	455b      	cmp	r3, fp
 800ae86:	dc33      	bgt.n	800aef0 <_printf_float+0x384>
 800ae88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	db3b      	blt.n	800af08 <_printf_float+0x39c>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	07da      	lsls	r2, r3, #31
 800ae94:	d438      	bmi.n	800af08 <_printf_float+0x39c>
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	9a05      	ldr	r2, [sp, #20]
 800ae9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae9c:	1a9a      	subs	r2, r3, r2
 800ae9e:	eba3 0901 	sub.w	r9, r3, r1
 800aea2:	4591      	cmp	r9, r2
 800aea4:	bfa8      	it	ge
 800aea6:	4691      	movge	r9, r2
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	dc35      	bgt.n	800af1a <_printf_float+0x3ae>
 800aeae:	f04f 0800 	mov.w	r8, #0
 800aeb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeb6:	f104 0a1a 	add.w	sl, r4, #26
 800aeba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	eba3 0309 	sub.w	r3, r3, r9
 800aec4:	4543      	cmp	r3, r8
 800aec6:	f77f af79 	ble.w	800adbc <_printf_float+0x250>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4652      	mov	r2, sl
 800aece:	4631      	mov	r1, r6
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b8      	blx	r7
 800aed4:	3001      	adds	r0, #1
 800aed6:	f43f aeaa 	beq.w	800ac2e <_printf_float+0xc2>
 800aeda:	f108 0801 	add.w	r8, r8, #1
 800aede:	e7ec      	b.n	800aeba <_printf_float+0x34e>
 800aee0:	4613      	mov	r3, r2
 800aee2:	4631      	mov	r1, r6
 800aee4:	4642      	mov	r2, r8
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	d1c0      	bne.n	800ae70 <_printf_float+0x304>
 800aeee:	e69e      	b.n	800ac2e <_printf_float+0xc2>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f ae97 	beq.w	800ac2e <_printf_float+0xc2>
 800af00:	9a05      	ldr	r2, [sp, #20]
 800af02:	f10b 0b01 	add.w	fp, fp, #1
 800af06:	e7b9      	b.n	800ae7c <_printf_float+0x310>
 800af08:	ee18 3a10 	vmov	r3, s16
 800af0c:	4652      	mov	r2, sl
 800af0e:	4631      	mov	r1, r6
 800af10:	4628      	mov	r0, r5
 800af12:	47b8      	blx	r7
 800af14:	3001      	adds	r0, #1
 800af16:	d1be      	bne.n	800ae96 <_printf_float+0x32a>
 800af18:	e689      	b.n	800ac2e <_printf_float+0xc2>
 800af1a:	9a05      	ldr	r2, [sp, #20]
 800af1c:	464b      	mov	r3, r9
 800af1e:	4442      	add	r2, r8
 800af20:	4631      	mov	r1, r6
 800af22:	4628      	mov	r0, r5
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	d1c1      	bne.n	800aeae <_printf_float+0x342>
 800af2a:	e680      	b.n	800ac2e <_printf_float+0xc2>
 800af2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2e:	2a01      	cmp	r2, #1
 800af30:	dc01      	bgt.n	800af36 <_printf_float+0x3ca>
 800af32:	07db      	lsls	r3, r3, #31
 800af34:	d538      	bpl.n	800afa8 <_printf_float+0x43c>
 800af36:	2301      	movs	r3, #1
 800af38:	4642      	mov	r2, r8
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	f43f ae74 	beq.w	800ac2e <_printf_float+0xc2>
 800af46:	ee18 3a10 	vmov	r3, s16
 800af4a:	4652      	mov	r2, sl
 800af4c:	4631      	mov	r1, r6
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	f43f ae6b 	beq.w	800ac2e <_printf_float+0xc2>
 800af58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	f7f5 fde4 	bl	8000b2c <__aeabi_dcmpeq>
 800af64:	b9d8      	cbnz	r0, 800af9e <_printf_float+0x432>
 800af66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af68:	f108 0201 	add.w	r2, r8, #1
 800af6c:	3b01      	subs	r3, #1
 800af6e:	4631      	mov	r1, r6
 800af70:	4628      	mov	r0, r5
 800af72:	47b8      	blx	r7
 800af74:	3001      	adds	r0, #1
 800af76:	d10e      	bne.n	800af96 <_printf_float+0x42a>
 800af78:	e659      	b.n	800ac2e <_printf_float+0xc2>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4652      	mov	r2, sl
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f ae52 	beq.w	800ac2e <_printf_float+0xc2>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af90:	3b01      	subs	r3, #1
 800af92:	4543      	cmp	r3, r8
 800af94:	dcf1      	bgt.n	800af7a <_printf_float+0x40e>
 800af96:	464b      	mov	r3, r9
 800af98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af9c:	e6dc      	b.n	800ad58 <_printf_float+0x1ec>
 800af9e:	f04f 0800 	mov.w	r8, #0
 800afa2:	f104 0a1a 	add.w	sl, r4, #26
 800afa6:	e7f2      	b.n	800af8e <_printf_float+0x422>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4642      	mov	r2, r8
 800afac:	e7df      	b.n	800af6e <_printf_float+0x402>
 800afae:	2301      	movs	r3, #1
 800afb0:	464a      	mov	r2, r9
 800afb2:	4631      	mov	r1, r6
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b8      	blx	r7
 800afb8:	3001      	adds	r0, #1
 800afba:	f43f ae38 	beq.w	800ac2e <_printf_float+0xc2>
 800afbe:	f108 0801 	add.w	r8, r8, #1
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afc6:	1a5b      	subs	r3, r3, r1
 800afc8:	4543      	cmp	r3, r8
 800afca:	dcf0      	bgt.n	800afae <_printf_float+0x442>
 800afcc:	e6fa      	b.n	800adc4 <_printf_float+0x258>
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	f104 0919 	add.w	r9, r4, #25
 800afd6:	e7f4      	b.n	800afc2 <_printf_float+0x456>

0800afd8 <_printf_common>:
 800afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afdc:	4616      	mov	r6, r2
 800afde:	4699      	mov	r9, r3
 800afe0:	688a      	ldr	r2, [r1, #8]
 800afe2:	690b      	ldr	r3, [r1, #16]
 800afe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afe8:	4293      	cmp	r3, r2
 800afea:	bfb8      	it	lt
 800afec:	4613      	movlt	r3, r2
 800afee:	6033      	str	r3, [r6, #0]
 800aff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aff4:	4607      	mov	r7, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	b10a      	cbz	r2, 800affe <_printf_common+0x26>
 800affa:	3301      	adds	r3, #1
 800affc:	6033      	str	r3, [r6, #0]
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	0699      	lsls	r1, r3, #26
 800b002:	bf42      	ittt	mi
 800b004:	6833      	ldrmi	r3, [r6, #0]
 800b006:	3302      	addmi	r3, #2
 800b008:	6033      	strmi	r3, [r6, #0]
 800b00a:	6825      	ldr	r5, [r4, #0]
 800b00c:	f015 0506 	ands.w	r5, r5, #6
 800b010:	d106      	bne.n	800b020 <_printf_common+0x48>
 800b012:	f104 0a19 	add.w	sl, r4, #25
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	6832      	ldr	r2, [r6, #0]
 800b01a:	1a9b      	subs	r3, r3, r2
 800b01c:	42ab      	cmp	r3, r5
 800b01e:	dc26      	bgt.n	800b06e <_printf_common+0x96>
 800b020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b024:	1e13      	subs	r3, r2, #0
 800b026:	6822      	ldr	r2, [r4, #0]
 800b028:	bf18      	it	ne
 800b02a:	2301      	movne	r3, #1
 800b02c:	0692      	lsls	r2, r2, #26
 800b02e:	d42b      	bmi.n	800b088 <_printf_common+0xb0>
 800b030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b034:	4649      	mov	r1, r9
 800b036:	4638      	mov	r0, r7
 800b038:	47c0      	blx	r8
 800b03a:	3001      	adds	r0, #1
 800b03c:	d01e      	beq.n	800b07c <_printf_common+0xa4>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	68e5      	ldr	r5, [r4, #12]
 800b042:	6832      	ldr	r2, [r6, #0]
 800b044:	f003 0306 	and.w	r3, r3, #6
 800b048:	2b04      	cmp	r3, #4
 800b04a:	bf08      	it	eq
 800b04c:	1aad      	subeq	r5, r5, r2
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	6922      	ldr	r2, [r4, #16]
 800b052:	bf0c      	ite	eq
 800b054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b058:	2500      	movne	r5, #0
 800b05a:	4293      	cmp	r3, r2
 800b05c:	bfc4      	itt	gt
 800b05e:	1a9b      	subgt	r3, r3, r2
 800b060:	18ed      	addgt	r5, r5, r3
 800b062:	2600      	movs	r6, #0
 800b064:	341a      	adds	r4, #26
 800b066:	42b5      	cmp	r5, r6
 800b068:	d11a      	bne.n	800b0a0 <_printf_common+0xc8>
 800b06a:	2000      	movs	r0, #0
 800b06c:	e008      	b.n	800b080 <_printf_common+0xa8>
 800b06e:	2301      	movs	r3, #1
 800b070:	4652      	mov	r2, sl
 800b072:	4649      	mov	r1, r9
 800b074:	4638      	mov	r0, r7
 800b076:	47c0      	blx	r8
 800b078:	3001      	adds	r0, #1
 800b07a:	d103      	bne.n	800b084 <_printf_common+0xac>
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b084:	3501      	adds	r5, #1
 800b086:	e7c6      	b.n	800b016 <_printf_common+0x3e>
 800b088:	18e1      	adds	r1, r4, r3
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	2030      	movs	r0, #48	; 0x30
 800b08e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b092:	4422      	add	r2, r4
 800b094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b09c:	3302      	adds	r3, #2
 800b09e:	e7c7      	b.n	800b030 <_printf_common+0x58>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	47c0      	blx	r8
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	d0e6      	beq.n	800b07c <_printf_common+0xa4>
 800b0ae:	3601      	adds	r6, #1
 800b0b0:	e7d9      	b.n	800b066 <_printf_common+0x8e>
	...

0800b0b4 <_printf_i>:
 800b0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	7e0f      	ldrb	r7, [r1, #24]
 800b0ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0bc:	2f78      	cmp	r7, #120	; 0x78
 800b0be:	4691      	mov	r9, r2
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	469a      	mov	sl, r3
 800b0c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0ca:	d807      	bhi.n	800b0dc <_printf_i+0x28>
 800b0cc:	2f62      	cmp	r7, #98	; 0x62
 800b0ce:	d80a      	bhi.n	800b0e6 <_printf_i+0x32>
 800b0d0:	2f00      	cmp	r7, #0
 800b0d2:	f000 80d8 	beq.w	800b286 <_printf_i+0x1d2>
 800b0d6:	2f58      	cmp	r7, #88	; 0x58
 800b0d8:	f000 80a3 	beq.w	800b222 <_printf_i+0x16e>
 800b0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0e4:	e03a      	b.n	800b15c <_printf_i+0xa8>
 800b0e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0ea:	2b15      	cmp	r3, #21
 800b0ec:	d8f6      	bhi.n	800b0dc <_printf_i+0x28>
 800b0ee:	a101      	add	r1, pc, #4	; (adr r1, 800b0f4 <_printf_i+0x40>)
 800b0f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0f4:	0800b14d 	.word	0x0800b14d
 800b0f8:	0800b161 	.word	0x0800b161
 800b0fc:	0800b0dd 	.word	0x0800b0dd
 800b100:	0800b0dd 	.word	0x0800b0dd
 800b104:	0800b0dd 	.word	0x0800b0dd
 800b108:	0800b0dd 	.word	0x0800b0dd
 800b10c:	0800b161 	.word	0x0800b161
 800b110:	0800b0dd 	.word	0x0800b0dd
 800b114:	0800b0dd 	.word	0x0800b0dd
 800b118:	0800b0dd 	.word	0x0800b0dd
 800b11c:	0800b0dd 	.word	0x0800b0dd
 800b120:	0800b26d 	.word	0x0800b26d
 800b124:	0800b191 	.word	0x0800b191
 800b128:	0800b24f 	.word	0x0800b24f
 800b12c:	0800b0dd 	.word	0x0800b0dd
 800b130:	0800b0dd 	.word	0x0800b0dd
 800b134:	0800b28f 	.word	0x0800b28f
 800b138:	0800b0dd 	.word	0x0800b0dd
 800b13c:	0800b191 	.word	0x0800b191
 800b140:	0800b0dd 	.word	0x0800b0dd
 800b144:	0800b0dd 	.word	0x0800b0dd
 800b148:	0800b257 	.word	0x0800b257
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	1d1a      	adds	r2, r3, #4
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	602a      	str	r2, [r5, #0]
 800b154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b15c:	2301      	movs	r3, #1
 800b15e:	e0a3      	b.n	800b2a8 <_printf_i+0x1f4>
 800b160:	6820      	ldr	r0, [r4, #0]
 800b162:	6829      	ldr	r1, [r5, #0]
 800b164:	0606      	lsls	r6, r0, #24
 800b166:	f101 0304 	add.w	r3, r1, #4
 800b16a:	d50a      	bpl.n	800b182 <_printf_i+0xce>
 800b16c:	680e      	ldr	r6, [r1, #0]
 800b16e:	602b      	str	r3, [r5, #0]
 800b170:	2e00      	cmp	r6, #0
 800b172:	da03      	bge.n	800b17c <_printf_i+0xc8>
 800b174:	232d      	movs	r3, #45	; 0x2d
 800b176:	4276      	negs	r6, r6
 800b178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b17c:	485e      	ldr	r0, [pc, #376]	; (800b2f8 <_printf_i+0x244>)
 800b17e:	230a      	movs	r3, #10
 800b180:	e019      	b.n	800b1b6 <_printf_i+0x102>
 800b182:	680e      	ldr	r6, [r1, #0]
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b18a:	bf18      	it	ne
 800b18c:	b236      	sxthne	r6, r6
 800b18e:	e7ef      	b.n	800b170 <_printf_i+0xbc>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	6820      	ldr	r0, [r4, #0]
 800b194:	1d19      	adds	r1, r3, #4
 800b196:	6029      	str	r1, [r5, #0]
 800b198:	0601      	lsls	r1, r0, #24
 800b19a:	d501      	bpl.n	800b1a0 <_printf_i+0xec>
 800b19c:	681e      	ldr	r6, [r3, #0]
 800b19e:	e002      	b.n	800b1a6 <_printf_i+0xf2>
 800b1a0:	0646      	lsls	r6, r0, #25
 800b1a2:	d5fb      	bpl.n	800b19c <_printf_i+0xe8>
 800b1a4:	881e      	ldrh	r6, [r3, #0]
 800b1a6:	4854      	ldr	r0, [pc, #336]	; (800b2f8 <_printf_i+0x244>)
 800b1a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b1aa:	bf0c      	ite	eq
 800b1ac:	2308      	moveq	r3, #8
 800b1ae:	230a      	movne	r3, #10
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1b6:	6865      	ldr	r5, [r4, #4]
 800b1b8:	60a5      	str	r5, [r4, #8]
 800b1ba:	2d00      	cmp	r5, #0
 800b1bc:	bfa2      	ittt	ge
 800b1be:	6821      	ldrge	r1, [r4, #0]
 800b1c0:	f021 0104 	bicge.w	r1, r1, #4
 800b1c4:	6021      	strge	r1, [r4, #0]
 800b1c6:	b90e      	cbnz	r6, 800b1cc <_printf_i+0x118>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	d04d      	beq.n	800b268 <_printf_i+0x1b4>
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1d2:	fb03 6711 	mls	r7, r3, r1, r6
 800b1d6:	5dc7      	ldrb	r7, [r0, r7]
 800b1d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1dc:	4637      	mov	r7, r6
 800b1de:	42bb      	cmp	r3, r7
 800b1e0:	460e      	mov	r6, r1
 800b1e2:	d9f4      	bls.n	800b1ce <_printf_i+0x11a>
 800b1e4:	2b08      	cmp	r3, #8
 800b1e6:	d10b      	bne.n	800b200 <_printf_i+0x14c>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	07de      	lsls	r6, r3, #31
 800b1ec:	d508      	bpl.n	800b200 <_printf_i+0x14c>
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	6861      	ldr	r1, [r4, #4]
 800b1f2:	4299      	cmp	r1, r3
 800b1f4:	bfde      	ittt	le
 800b1f6:	2330      	movle	r3, #48	; 0x30
 800b1f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b200:	1b52      	subs	r2, r2, r5
 800b202:	6122      	str	r2, [r4, #16]
 800b204:	f8cd a000 	str.w	sl, [sp]
 800b208:	464b      	mov	r3, r9
 800b20a:	aa03      	add	r2, sp, #12
 800b20c:	4621      	mov	r1, r4
 800b20e:	4640      	mov	r0, r8
 800b210:	f7ff fee2 	bl	800afd8 <_printf_common>
 800b214:	3001      	adds	r0, #1
 800b216:	d14c      	bne.n	800b2b2 <_printf_i+0x1fe>
 800b218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b21c:	b004      	add	sp, #16
 800b21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b222:	4835      	ldr	r0, [pc, #212]	; (800b2f8 <_printf_i+0x244>)
 800b224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b228:	6829      	ldr	r1, [r5, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b230:	6029      	str	r1, [r5, #0]
 800b232:	061d      	lsls	r5, r3, #24
 800b234:	d514      	bpl.n	800b260 <_printf_i+0x1ac>
 800b236:	07df      	lsls	r7, r3, #31
 800b238:	bf44      	itt	mi
 800b23a:	f043 0320 	orrmi.w	r3, r3, #32
 800b23e:	6023      	strmi	r3, [r4, #0]
 800b240:	b91e      	cbnz	r6, 800b24a <_printf_i+0x196>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	f023 0320 	bic.w	r3, r3, #32
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	2310      	movs	r3, #16
 800b24c:	e7b0      	b.n	800b1b0 <_printf_i+0xfc>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	f043 0320 	orr.w	r3, r3, #32
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	2378      	movs	r3, #120	; 0x78
 800b258:	4828      	ldr	r0, [pc, #160]	; (800b2fc <_printf_i+0x248>)
 800b25a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b25e:	e7e3      	b.n	800b228 <_printf_i+0x174>
 800b260:	0659      	lsls	r1, r3, #25
 800b262:	bf48      	it	mi
 800b264:	b2b6      	uxthmi	r6, r6
 800b266:	e7e6      	b.n	800b236 <_printf_i+0x182>
 800b268:	4615      	mov	r5, r2
 800b26a:	e7bb      	b.n	800b1e4 <_printf_i+0x130>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	6826      	ldr	r6, [r4, #0]
 800b270:	6961      	ldr	r1, [r4, #20]
 800b272:	1d18      	adds	r0, r3, #4
 800b274:	6028      	str	r0, [r5, #0]
 800b276:	0635      	lsls	r5, r6, #24
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	d501      	bpl.n	800b280 <_printf_i+0x1cc>
 800b27c:	6019      	str	r1, [r3, #0]
 800b27e:	e002      	b.n	800b286 <_printf_i+0x1d2>
 800b280:	0670      	lsls	r0, r6, #25
 800b282:	d5fb      	bpl.n	800b27c <_printf_i+0x1c8>
 800b284:	8019      	strh	r1, [r3, #0]
 800b286:	2300      	movs	r3, #0
 800b288:	6123      	str	r3, [r4, #16]
 800b28a:	4615      	mov	r5, r2
 800b28c:	e7ba      	b.n	800b204 <_printf_i+0x150>
 800b28e:	682b      	ldr	r3, [r5, #0]
 800b290:	1d1a      	adds	r2, r3, #4
 800b292:	602a      	str	r2, [r5, #0]
 800b294:	681d      	ldr	r5, [r3, #0]
 800b296:	6862      	ldr	r2, [r4, #4]
 800b298:	2100      	movs	r1, #0
 800b29a:	4628      	mov	r0, r5
 800b29c:	f7f4 ffc0 	bl	8000220 <memchr>
 800b2a0:	b108      	cbz	r0, 800b2a6 <_printf_i+0x1f2>
 800b2a2:	1b40      	subs	r0, r0, r5
 800b2a4:	6060      	str	r0, [r4, #4]
 800b2a6:	6863      	ldr	r3, [r4, #4]
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b0:	e7a8      	b.n	800b204 <_printf_i+0x150>
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	462a      	mov	r2, r5
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	47d0      	blx	sl
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d0ab      	beq.n	800b218 <_printf_i+0x164>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	079b      	lsls	r3, r3, #30
 800b2c4:	d413      	bmi.n	800b2ee <_printf_i+0x23a>
 800b2c6:	68e0      	ldr	r0, [r4, #12]
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	4298      	cmp	r0, r3
 800b2cc:	bfb8      	it	lt
 800b2ce:	4618      	movlt	r0, r3
 800b2d0:	e7a4      	b.n	800b21c <_printf_i+0x168>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	4640      	mov	r0, r8
 800b2da:	47d0      	blx	sl
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d09b      	beq.n	800b218 <_printf_i+0x164>
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	68e3      	ldr	r3, [r4, #12]
 800b2e4:	9903      	ldr	r1, [sp, #12]
 800b2e6:	1a5b      	subs	r3, r3, r1
 800b2e8:	42ab      	cmp	r3, r5
 800b2ea:	dcf2      	bgt.n	800b2d2 <_printf_i+0x21e>
 800b2ec:	e7eb      	b.n	800b2c6 <_printf_i+0x212>
 800b2ee:	2500      	movs	r5, #0
 800b2f0:	f104 0619 	add.w	r6, r4, #25
 800b2f4:	e7f5      	b.n	800b2e2 <_printf_i+0x22e>
 800b2f6:	bf00      	nop
 800b2f8:	0800fc17 	.word	0x0800fc17
 800b2fc:	0800fc28 	.word	0x0800fc28

0800b300 <_scanf_float>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	b087      	sub	sp, #28
 800b306:	4617      	mov	r7, r2
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	688b      	ldr	r3, [r1, #8]
 800b30c:	1e5a      	subs	r2, r3, #1
 800b30e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b312:	bf83      	ittte	hi
 800b314:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b318:	195b      	addhi	r3, r3, r5
 800b31a:	9302      	strhi	r3, [sp, #8]
 800b31c:	2300      	movls	r3, #0
 800b31e:	bf86      	itte	hi
 800b320:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b324:	608b      	strhi	r3, [r1, #8]
 800b326:	9302      	strls	r3, [sp, #8]
 800b328:	680b      	ldr	r3, [r1, #0]
 800b32a:	468b      	mov	fp, r1
 800b32c:	2500      	movs	r5, #0
 800b32e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b332:	f84b 3b1c 	str.w	r3, [fp], #28
 800b336:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b33a:	4680      	mov	r8, r0
 800b33c:	460c      	mov	r4, r1
 800b33e:	465e      	mov	r6, fp
 800b340:	46aa      	mov	sl, r5
 800b342:	46a9      	mov	r9, r5
 800b344:	9501      	str	r5, [sp, #4]
 800b346:	68a2      	ldr	r2, [r4, #8]
 800b348:	b152      	cbz	r2, 800b360 <_scanf_float+0x60>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b4e      	cmp	r3, #78	; 0x4e
 800b350:	d864      	bhi.n	800b41c <_scanf_float+0x11c>
 800b352:	2b40      	cmp	r3, #64	; 0x40
 800b354:	d83c      	bhi.n	800b3d0 <_scanf_float+0xd0>
 800b356:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b35a:	b2c8      	uxtb	r0, r1
 800b35c:	280e      	cmp	r0, #14
 800b35e:	d93a      	bls.n	800b3d6 <_scanf_float+0xd6>
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	d003      	beq.n	800b36e <_scanf_float+0x6e>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b372:	f1ba 0f01 	cmp.w	sl, #1
 800b376:	f200 8113 	bhi.w	800b5a0 <_scanf_float+0x2a0>
 800b37a:	455e      	cmp	r6, fp
 800b37c:	f200 8105 	bhi.w	800b58a <_scanf_float+0x28a>
 800b380:	2501      	movs	r5, #1
 800b382:	4628      	mov	r0, r5
 800b384:	b007      	add	sp, #28
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b38e:	2a0d      	cmp	r2, #13
 800b390:	d8e6      	bhi.n	800b360 <_scanf_float+0x60>
 800b392:	a101      	add	r1, pc, #4	; (adr r1, 800b398 <_scanf_float+0x98>)
 800b394:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b398:	0800b4d7 	.word	0x0800b4d7
 800b39c:	0800b361 	.word	0x0800b361
 800b3a0:	0800b361 	.word	0x0800b361
 800b3a4:	0800b361 	.word	0x0800b361
 800b3a8:	0800b537 	.word	0x0800b537
 800b3ac:	0800b50f 	.word	0x0800b50f
 800b3b0:	0800b361 	.word	0x0800b361
 800b3b4:	0800b361 	.word	0x0800b361
 800b3b8:	0800b4e5 	.word	0x0800b4e5
 800b3bc:	0800b361 	.word	0x0800b361
 800b3c0:	0800b361 	.word	0x0800b361
 800b3c4:	0800b361 	.word	0x0800b361
 800b3c8:	0800b361 	.word	0x0800b361
 800b3cc:	0800b49d 	.word	0x0800b49d
 800b3d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b3d4:	e7db      	b.n	800b38e <_scanf_float+0x8e>
 800b3d6:	290e      	cmp	r1, #14
 800b3d8:	d8c2      	bhi.n	800b360 <_scanf_float+0x60>
 800b3da:	a001      	add	r0, pc, #4	; (adr r0, 800b3e0 <_scanf_float+0xe0>)
 800b3dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b3e0:	0800b48f 	.word	0x0800b48f
 800b3e4:	0800b361 	.word	0x0800b361
 800b3e8:	0800b48f 	.word	0x0800b48f
 800b3ec:	0800b523 	.word	0x0800b523
 800b3f0:	0800b361 	.word	0x0800b361
 800b3f4:	0800b43d 	.word	0x0800b43d
 800b3f8:	0800b479 	.word	0x0800b479
 800b3fc:	0800b479 	.word	0x0800b479
 800b400:	0800b479 	.word	0x0800b479
 800b404:	0800b479 	.word	0x0800b479
 800b408:	0800b479 	.word	0x0800b479
 800b40c:	0800b479 	.word	0x0800b479
 800b410:	0800b479 	.word	0x0800b479
 800b414:	0800b479 	.word	0x0800b479
 800b418:	0800b479 	.word	0x0800b479
 800b41c:	2b6e      	cmp	r3, #110	; 0x6e
 800b41e:	d809      	bhi.n	800b434 <_scanf_float+0x134>
 800b420:	2b60      	cmp	r3, #96	; 0x60
 800b422:	d8b2      	bhi.n	800b38a <_scanf_float+0x8a>
 800b424:	2b54      	cmp	r3, #84	; 0x54
 800b426:	d077      	beq.n	800b518 <_scanf_float+0x218>
 800b428:	2b59      	cmp	r3, #89	; 0x59
 800b42a:	d199      	bne.n	800b360 <_scanf_float+0x60>
 800b42c:	2d07      	cmp	r5, #7
 800b42e:	d197      	bne.n	800b360 <_scanf_float+0x60>
 800b430:	2508      	movs	r5, #8
 800b432:	e029      	b.n	800b488 <_scanf_float+0x188>
 800b434:	2b74      	cmp	r3, #116	; 0x74
 800b436:	d06f      	beq.n	800b518 <_scanf_float+0x218>
 800b438:	2b79      	cmp	r3, #121	; 0x79
 800b43a:	e7f6      	b.n	800b42a <_scanf_float+0x12a>
 800b43c:	6821      	ldr	r1, [r4, #0]
 800b43e:	05c8      	lsls	r0, r1, #23
 800b440:	d51a      	bpl.n	800b478 <_scanf_float+0x178>
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b448:	6021      	str	r1, [r4, #0]
 800b44a:	f109 0901 	add.w	r9, r9, #1
 800b44e:	b11b      	cbz	r3, 800b458 <_scanf_float+0x158>
 800b450:	3b01      	subs	r3, #1
 800b452:	3201      	adds	r2, #1
 800b454:	9302      	str	r3, [sp, #8]
 800b456:	60a2      	str	r2, [r4, #8]
 800b458:	68a3      	ldr	r3, [r4, #8]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	60a3      	str	r3, [r4, #8]
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	3301      	adds	r3, #1
 800b462:	6123      	str	r3, [r4, #16]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3b01      	subs	r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	607b      	str	r3, [r7, #4]
 800b46c:	f340 8084 	ble.w	800b578 <_scanf_float+0x278>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	3301      	adds	r3, #1
 800b474:	603b      	str	r3, [r7, #0]
 800b476:	e766      	b.n	800b346 <_scanf_float+0x46>
 800b478:	eb1a 0f05 	cmn.w	sl, r5
 800b47c:	f47f af70 	bne.w	800b360 <_scanf_float+0x60>
 800b480:	6822      	ldr	r2, [r4, #0]
 800b482:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	f806 3b01 	strb.w	r3, [r6], #1
 800b48c:	e7e4      	b.n	800b458 <_scanf_float+0x158>
 800b48e:	6822      	ldr	r2, [r4, #0]
 800b490:	0610      	lsls	r0, r2, #24
 800b492:	f57f af65 	bpl.w	800b360 <_scanf_float+0x60>
 800b496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b49a:	e7f4      	b.n	800b486 <_scanf_float+0x186>
 800b49c:	f1ba 0f00 	cmp.w	sl, #0
 800b4a0:	d10e      	bne.n	800b4c0 <_scanf_float+0x1c0>
 800b4a2:	f1b9 0f00 	cmp.w	r9, #0
 800b4a6:	d10e      	bne.n	800b4c6 <_scanf_float+0x1c6>
 800b4a8:	6822      	ldr	r2, [r4, #0]
 800b4aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b4ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b4b2:	d108      	bne.n	800b4c6 <_scanf_float+0x1c6>
 800b4b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b4b8:	6022      	str	r2, [r4, #0]
 800b4ba:	f04f 0a01 	mov.w	sl, #1
 800b4be:	e7e3      	b.n	800b488 <_scanf_float+0x188>
 800b4c0:	f1ba 0f02 	cmp.w	sl, #2
 800b4c4:	d055      	beq.n	800b572 <_scanf_float+0x272>
 800b4c6:	2d01      	cmp	r5, #1
 800b4c8:	d002      	beq.n	800b4d0 <_scanf_float+0x1d0>
 800b4ca:	2d04      	cmp	r5, #4
 800b4cc:	f47f af48 	bne.w	800b360 <_scanf_float+0x60>
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	b2ed      	uxtb	r5, r5
 800b4d4:	e7d8      	b.n	800b488 <_scanf_float+0x188>
 800b4d6:	f1ba 0f01 	cmp.w	sl, #1
 800b4da:	f47f af41 	bne.w	800b360 <_scanf_float+0x60>
 800b4de:	f04f 0a02 	mov.w	sl, #2
 800b4e2:	e7d1      	b.n	800b488 <_scanf_float+0x188>
 800b4e4:	b97d      	cbnz	r5, 800b506 <_scanf_float+0x206>
 800b4e6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ea:	f47f af3c 	bne.w	800b366 <_scanf_float+0x66>
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b4f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b4f8:	f47f af39 	bne.w	800b36e <_scanf_float+0x6e>
 800b4fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b500:	6022      	str	r2, [r4, #0]
 800b502:	2501      	movs	r5, #1
 800b504:	e7c0      	b.n	800b488 <_scanf_float+0x188>
 800b506:	2d03      	cmp	r5, #3
 800b508:	d0e2      	beq.n	800b4d0 <_scanf_float+0x1d0>
 800b50a:	2d05      	cmp	r5, #5
 800b50c:	e7de      	b.n	800b4cc <_scanf_float+0x1cc>
 800b50e:	2d02      	cmp	r5, #2
 800b510:	f47f af26 	bne.w	800b360 <_scanf_float+0x60>
 800b514:	2503      	movs	r5, #3
 800b516:	e7b7      	b.n	800b488 <_scanf_float+0x188>
 800b518:	2d06      	cmp	r5, #6
 800b51a:	f47f af21 	bne.w	800b360 <_scanf_float+0x60>
 800b51e:	2507      	movs	r5, #7
 800b520:	e7b2      	b.n	800b488 <_scanf_float+0x188>
 800b522:	6822      	ldr	r2, [r4, #0]
 800b524:	0591      	lsls	r1, r2, #22
 800b526:	f57f af1b 	bpl.w	800b360 <_scanf_float+0x60>
 800b52a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b52e:	6022      	str	r2, [r4, #0]
 800b530:	f8cd 9004 	str.w	r9, [sp, #4]
 800b534:	e7a8      	b.n	800b488 <_scanf_float+0x188>
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b53c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b540:	d006      	beq.n	800b550 <_scanf_float+0x250>
 800b542:	0550      	lsls	r0, r2, #21
 800b544:	f57f af0c 	bpl.w	800b360 <_scanf_float+0x60>
 800b548:	f1b9 0f00 	cmp.w	r9, #0
 800b54c:	f43f af0f 	beq.w	800b36e <_scanf_float+0x6e>
 800b550:	0591      	lsls	r1, r2, #22
 800b552:	bf58      	it	pl
 800b554:	9901      	ldrpl	r1, [sp, #4]
 800b556:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b55a:	bf58      	it	pl
 800b55c:	eba9 0101 	subpl.w	r1, r9, r1
 800b560:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b564:	bf58      	it	pl
 800b566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b56a:	6022      	str	r2, [r4, #0]
 800b56c:	f04f 0900 	mov.w	r9, #0
 800b570:	e78a      	b.n	800b488 <_scanf_float+0x188>
 800b572:	f04f 0a03 	mov.w	sl, #3
 800b576:	e787      	b.n	800b488 <_scanf_float+0x188>
 800b578:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b57c:	4639      	mov	r1, r7
 800b57e:	4640      	mov	r0, r8
 800b580:	4798      	blx	r3
 800b582:	2800      	cmp	r0, #0
 800b584:	f43f aedf 	beq.w	800b346 <_scanf_float+0x46>
 800b588:	e6ea      	b.n	800b360 <_scanf_float+0x60>
 800b58a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b58e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b592:	463a      	mov	r2, r7
 800b594:	4640      	mov	r0, r8
 800b596:	4798      	blx	r3
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	e6ec      	b.n	800b37a <_scanf_float+0x7a>
 800b5a0:	1e6b      	subs	r3, r5, #1
 800b5a2:	2b06      	cmp	r3, #6
 800b5a4:	d825      	bhi.n	800b5f2 <_scanf_float+0x2f2>
 800b5a6:	2d02      	cmp	r5, #2
 800b5a8:	d836      	bhi.n	800b618 <_scanf_float+0x318>
 800b5aa:	455e      	cmp	r6, fp
 800b5ac:	f67f aee8 	bls.w	800b380 <_scanf_float+0x80>
 800b5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5b8:	463a      	mov	r2, r7
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4798      	blx	r3
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	e7f1      	b.n	800b5aa <_scanf_float+0x2aa>
 800b5c6:	9802      	ldr	r0, [sp, #8]
 800b5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b5d0:	9002      	str	r0, [sp, #8]
 800b5d2:	463a      	mov	r2, r7
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4798      	blx	r3
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b5e2:	fa5f fa8a 	uxtb.w	sl, sl
 800b5e6:	f1ba 0f02 	cmp.w	sl, #2
 800b5ea:	d1ec      	bne.n	800b5c6 <_scanf_float+0x2c6>
 800b5ec:	3d03      	subs	r5, #3
 800b5ee:	b2ed      	uxtb	r5, r5
 800b5f0:	1b76      	subs	r6, r6, r5
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	05da      	lsls	r2, r3, #23
 800b5f6:	d52f      	bpl.n	800b658 <_scanf_float+0x358>
 800b5f8:	055b      	lsls	r3, r3, #21
 800b5fa:	d510      	bpl.n	800b61e <_scanf_float+0x31e>
 800b5fc:	455e      	cmp	r6, fp
 800b5fe:	f67f aebf 	bls.w	800b380 <_scanf_float+0x80>
 800b602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b60a:	463a      	mov	r2, r7
 800b60c:	4640      	mov	r0, r8
 800b60e:	4798      	blx	r3
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	3b01      	subs	r3, #1
 800b614:	6123      	str	r3, [r4, #16]
 800b616:	e7f1      	b.n	800b5fc <_scanf_float+0x2fc>
 800b618:	46aa      	mov	sl, r5
 800b61a:	9602      	str	r6, [sp, #8]
 800b61c:	e7df      	b.n	800b5de <_scanf_float+0x2de>
 800b61e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b622:	6923      	ldr	r3, [r4, #16]
 800b624:	2965      	cmp	r1, #101	; 0x65
 800b626:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b62a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b62e:	6123      	str	r3, [r4, #16]
 800b630:	d00c      	beq.n	800b64c <_scanf_float+0x34c>
 800b632:	2945      	cmp	r1, #69	; 0x45
 800b634:	d00a      	beq.n	800b64c <_scanf_float+0x34c>
 800b636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b63a:	463a      	mov	r2, r7
 800b63c:	4640      	mov	r0, r8
 800b63e:	4798      	blx	r3
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b646:	3b01      	subs	r3, #1
 800b648:	1eb5      	subs	r5, r6, #2
 800b64a:	6123      	str	r3, [r4, #16]
 800b64c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b650:	463a      	mov	r2, r7
 800b652:	4640      	mov	r0, r8
 800b654:	4798      	blx	r3
 800b656:	462e      	mov	r6, r5
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	f015 0510 	ands.w	r5, r5, #16
 800b65e:	d159      	bne.n	800b714 <_scanf_float+0x414>
 800b660:	7035      	strb	r5, [r6, #0]
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b66c:	d11b      	bne.n	800b6a6 <_scanf_float+0x3a6>
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	454b      	cmp	r3, r9
 800b672:	eba3 0209 	sub.w	r2, r3, r9
 800b676:	d123      	bne.n	800b6c0 <_scanf_float+0x3c0>
 800b678:	2200      	movs	r2, #0
 800b67a:	4659      	mov	r1, fp
 800b67c:	4640      	mov	r0, r8
 800b67e:	f000 ffed 	bl	800c65c <_strtod_r>
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	f012 0f02 	tst.w	r2, #2
 800b68a:	ec57 6b10 	vmov	r6, r7, d0
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	d021      	beq.n	800b6d6 <_scanf_float+0x3d6>
 800b692:	9903      	ldr	r1, [sp, #12]
 800b694:	1d1a      	adds	r2, r3, #4
 800b696:	600a      	str	r2, [r1, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	e9c3 6700 	strd	r6, r7, [r3]
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60e3      	str	r3, [r4, #12]
 800b6a4:	e66d      	b.n	800b382 <_scanf_float+0x82>
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0e5      	beq.n	800b678 <_scanf_float+0x378>
 800b6ac:	9905      	ldr	r1, [sp, #20]
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	3101      	adds	r1, #1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	f001 f8b5 	bl	800c824 <_strtol_r>
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	9e05      	ldr	r6, [sp, #20]
 800b6be:	1ac2      	subs	r2, r0, r3
 800b6c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b6c4:	429e      	cmp	r6, r3
 800b6c6:	bf28      	it	cs
 800b6c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b6cc:	4912      	ldr	r1, [pc, #72]	; (800b718 <_scanf_float+0x418>)
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 f91e 	bl	800b910 <siprintf>
 800b6d4:	e7d0      	b.n	800b678 <_scanf_float+0x378>
 800b6d6:	9903      	ldr	r1, [sp, #12]
 800b6d8:	f012 0f04 	tst.w	r2, #4
 800b6dc:	f103 0204 	add.w	r2, r3, #4
 800b6e0:	600a      	str	r2, [r1, #0]
 800b6e2:	d1d9      	bne.n	800b698 <_scanf_float+0x398>
 800b6e4:	f8d3 8000 	ldr.w	r8, [r3]
 800b6e8:	ee10 2a10 	vmov	r2, s0
 800b6ec:	ee10 0a10 	vmov	r0, s0
 800b6f0:	463b      	mov	r3, r7
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 fa4c 	bl	8000b90 <__aeabi_dcmpun>
 800b6f8:	b128      	cbz	r0, 800b706 <_scanf_float+0x406>
 800b6fa:	4808      	ldr	r0, [pc, #32]	; (800b71c <_scanf_float+0x41c>)
 800b6fc:	f7fe fcf4 	bl	800a0e8 <nanf>
 800b700:	ed88 0a00 	vstr	s0, [r8]
 800b704:	e7cb      	b.n	800b69e <_scanf_float+0x39e>
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f5 fa9f 	bl	8000c4c <__aeabi_d2f>
 800b70e:	f8c8 0000 	str.w	r0, [r8]
 800b712:	e7c4      	b.n	800b69e <_scanf_float+0x39e>
 800b714:	2500      	movs	r5, #0
 800b716:	e634      	b.n	800b382 <_scanf_float+0x82>
 800b718:	0800fc39 	.word	0x0800fc39
 800b71c:	0800fd3f 	.word	0x0800fd3f

0800b720 <iprintf>:
 800b720:	b40f      	push	{r0, r1, r2, r3}
 800b722:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <iprintf+0x2c>)
 800b724:	b513      	push	{r0, r1, r4, lr}
 800b726:	681c      	ldr	r4, [r3, #0]
 800b728:	b124      	cbz	r4, 800b734 <iprintf+0x14>
 800b72a:	69a3      	ldr	r3, [r4, #24]
 800b72c:	b913      	cbnz	r3, 800b734 <iprintf+0x14>
 800b72e:	4620      	mov	r0, r4
 800b730:	f7fe fe1a 	bl	800a368 <__sinit>
 800b734:	ab05      	add	r3, sp, #20
 800b736:	9a04      	ldr	r2, [sp, #16]
 800b738:	68a1      	ldr	r1, [r4, #8]
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7ff f845 	bl	800a7cc <_vfiprintf_r>
 800b742:	b002      	add	sp, #8
 800b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b748:	b004      	add	sp, #16
 800b74a:	4770      	bx	lr
 800b74c:	2000002c 	.word	0x2000002c

0800b750 <putchar>:
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <putchar+0x28>)
 800b752:	b513      	push	{r0, r1, r4, lr}
 800b754:	681c      	ldr	r4, [r3, #0]
 800b756:	4601      	mov	r1, r0
 800b758:	b134      	cbz	r4, 800b768 <putchar+0x18>
 800b75a:	69a3      	ldr	r3, [r4, #24]
 800b75c:	b923      	cbnz	r3, 800b768 <putchar+0x18>
 800b75e:	9001      	str	r0, [sp, #4]
 800b760:	4620      	mov	r0, r4
 800b762:	f7fe fe01 	bl	800a368 <__sinit>
 800b766:	9901      	ldr	r1, [sp, #4]
 800b768:	68a2      	ldr	r2, [r4, #8]
 800b76a:	4620      	mov	r0, r4
 800b76c:	b002      	add	sp, #8
 800b76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b772:	f003 ba4b 	b.w	800ec0c <_putc_r>
 800b776:	bf00      	nop
 800b778:	2000002c 	.word	0x2000002c

0800b77c <_puts_r>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	460e      	mov	r6, r1
 800b780:	4605      	mov	r5, r0
 800b782:	b118      	cbz	r0, 800b78c <_puts_r+0x10>
 800b784:	6983      	ldr	r3, [r0, #24]
 800b786:	b90b      	cbnz	r3, 800b78c <_puts_r+0x10>
 800b788:	f7fe fdee 	bl	800a368 <__sinit>
 800b78c:	69ab      	ldr	r3, [r5, #24]
 800b78e:	68ac      	ldr	r4, [r5, #8]
 800b790:	b913      	cbnz	r3, 800b798 <_puts_r+0x1c>
 800b792:	4628      	mov	r0, r5
 800b794:	f7fe fde8 	bl	800a368 <__sinit>
 800b798:	4b2c      	ldr	r3, [pc, #176]	; (800b84c <_puts_r+0xd0>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d120      	bne.n	800b7e0 <_puts_r+0x64>
 800b79e:	686c      	ldr	r4, [r5, #4]
 800b7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a2:	07db      	lsls	r3, r3, #31
 800b7a4:	d405      	bmi.n	800b7b2 <_puts_r+0x36>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	0598      	lsls	r0, r3, #22
 800b7aa:	d402      	bmi.n	800b7b2 <_puts_r+0x36>
 800b7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ae:	f7fe feb0 	bl	800a512 <__retarget_lock_acquire_recursive>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	0719      	lsls	r1, r3, #28
 800b7b6:	d51d      	bpl.n	800b7f4 <_puts_r+0x78>
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	b1db      	cbz	r3, 800b7f4 <_puts_r+0x78>
 800b7bc:	3e01      	subs	r6, #1
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	bb39      	cbnz	r1, 800b81a <_puts_r+0x9e>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	da38      	bge.n	800b840 <_puts_r+0xc4>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	210a      	movs	r1, #10
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f001 f832 	bl	800c83c <__swbuf_r>
 800b7d8:	3001      	adds	r0, #1
 800b7da:	d011      	beq.n	800b800 <_puts_r+0x84>
 800b7dc:	250a      	movs	r5, #10
 800b7de:	e011      	b.n	800b804 <_puts_r+0x88>
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <_puts_r+0xd4>)
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d101      	bne.n	800b7ea <_puts_r+0x6e>
 800b7e6:	68ac      	ldr	r4, [r5, #8]
 800b7e8:	e7da      	b.n	800b7a0 <_puts_r+0x24>
 800b7ea:	4b1a      	ldr	r3, [pc, #104]	; (800b854 <_puts_r+0xd8>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	bf08      	it	eq
 800b7f0:	68ec      	ldreq	r4, [r5, #12]
 800b7f2:	e7d5      	b.n	800b7a0 <_puts_r+0x24>
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f001 f884 	bl	800c904 <__swsetup_r>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d0dd      	beq.n	800b7bc <_puts_r+0x40>
 800b800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b806:	07da      	lsls	r2, r3, #31
 800b808:	d405      	bmi.n	800b816 <_puts_r+0x9a>
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	059b      	lsls	r3, r3, #22
 800b80e:	d402      	bmi.n	800b816 <_puts_r+0x9a>
 800b810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b812:	f7fe fe7f 	bl	800a514 <__retarget_lock_release_recursive>
 800b816:	4628      	mov	r0, r5
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	da04      	bge.n	800b828 <_puts_r+0xac>
 800b81e:	69a2      	ldr	r2, [r4, #24]
 800b820:	429a      	cmp	r2, r3
 800b822:	dc06      	bgt.n	800b832 <_puts_r+0xb6>
 800b824:	290a      	cmp	r1, #10
 800b826:	d004      	beq.n	800b832 <_puts_r+0xb6>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	6022      	str	r2, [r4, #0]
 800b82e:	7019      	strb	r1, [r3, #0]
 800b830:	e7c5      	b.n	800b7be <_puts_r+0x42>
 800b832:	4622      	mov	r2, r4
 800b834:	4628      	mov	r0, r5
 800b836:	f001 f801 	bl	800c83c <__swbuf_r>
 800b83a:	3001      	adds	r0, #1
 800b83c:	d1bf      	bne.n	800b7be <_puts_r+0x42>
 800b83e:	e7df      	b.n	800b800 <_puts_r+0x84>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	250a      	movs	r5, #10
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	6022      	str	r2, [r4, #0]
 800b848:	701d      	strb	r5, [r3, #0]
 800b84a:	e7db      	b.n	800b804 <_puts_r+0x88>
 800b84c:	0800fbb0 	.word	0x0800fbb0
 800b850:	0800fbd0 	.word	0x0800fbd0
 800b854:	0800fb90 	.word	0x0800fb90

0800b858 <puts>:
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <puts+0xc>)
 800b85a:	4601      	mov	r1, r0
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f7ff bf8d 	b.w	800b77c <_puts_r>
 800b862:	bf00      	nop
 800b864:	2000002c 	.word	0x2000002c

0800b868 <_sbrk_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d06      	ldr	r5, [pc, #24]	; (800b884 <_sbrk_r+0x1c>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	f7f8 f912 	bl	8003a9c <_sbrk>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_sbrk_r+0x1a>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_sbrk_r+0x1a>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	20000924 	.word	0x20000924

0800b888 <_raise_r>:
 800b888:	291f      	cmp	r1, #31
 800b88a:	b538      	push	{r3, r4, r5, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	d904      	bls.n	800b89c <_raise_r+0x14>
 800b892:	2316      	movs	r3, #22
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b89e:	b112      	cbz	r2, 800b8a6 <_raise_r+0x1e>
 800b8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8a4:	b94b      	cbnz	r3, 800b8ba <_raise_r+0x32>
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f830 	bl	800b90c <_getpid_r>
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8b6:	f000 b817 	b.w	800b8e8 <_kill_r>
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d00a      	beq.n	800b8d4 <_raise_r+0x4c>
 800b8be:	1c59      	adds	r1, r3, #1
 800b8c0:	d103      	bne.n	800b8ca <_raise_r+0x42>
 800b8c2:	2316      	movs	r3, #22
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	e7e7      	b.n	800b89a <_raise_r+0x12>
 800b8ca:	2400      	movs	r4, #0
 800b8cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	4798      	blx	r3
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e7e0      	b.n	800b89a <_raise_r+0x12>

0800b8d8 <raise>:
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <raise+0xc>)
 800b8da:	4601      	mov	r1, r0
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	f7ff bfd3 	b.w	800b888 <_raise_r>
 800b8e2:	bf00      	nop
 800b8e4:	2000002c 	.word	0x2000002c

0800b8e8 <_kill_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	; (800b908 <_kill_r+0x20>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	f7f8 f866 	bl	80039c6 <_kill>
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	d102      	bne.n	800b904 <_kill_r+0x1c>
 800b8fe:	682b      	ldr	r3, [r5, #0]
 800b900:	b103      	cbz	r3, 800b904 <_kill_r+0x1c>
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	20000924 	.word	0x20000924

0800b90c <_getpid_r>:
 800b90c:	f7f8 b853 	b.w	80039b6 <_getpid>

0800b910 <siprintf>:
 800b910:	b40e      	push	{r1, r2, r3}
 800b912:	b500      	push	{lr}
 800b914:	b09c      	sub	sp, #112	; 0x70
 800b916:	ab1d      	add	r3, sp, #116	; 0x74
 800b918:	9002      	str	r0, [sp, #8]
 800b91a:	9006      	str	r0, [sp, #24]
 800b91c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b920:	4809      	ldr	r0, [pc, #36]	; (800b948 <siprintf+0x38>)
 800b922:	9107      	str	r1, [sp, #28]
 800b924:	9104      	str	r1, [sp, #16]
 800b926:	4909      	ldr	r1, [pc, #36]	; (800b94c <siprintf+0x3c>)
 800b928:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92c:	9105      	str	r1, [sp, #20]
 800b92e:	6800      	ldr	r0, [r0, #0]
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	a902      	add	r1, sp, #8
 800b934:	f003 f86a 	bl	800ea0c <_svfiprintf_r>
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	2200      	movs	r2, #0
 800b93c:	701a      	strb	r2, [r3, #0]
 800b93e:	b01c      	add	sp, #112	; 0x70
 800b940:	f85d eb04 	ldr.w	lr, [sp], #4
 800b944:	b003      	add	sp, #12
 800b946:	4770      	bx	lr
 800b948:	2000002c 	.word	0x2000002c
 800b94c:	ffff0208 	.word	0xffff0208

0800b950 <__sread>:
 800b950:	b510      	push	{r4, lr}
 800b952:	460c      	mov	r4, r1
 800b954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b958:	f003 f9a0 	bl	800ec9c <_read_r>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	bfab      	itete	ge
 800b960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b962:	89a3      	ldrhlt	r3, [r4, #12]
 800b964:	181b      	addge	r3, r3, r0
 800b966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b96a:	bfac      	ite	ge
 800b96c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b96e:	81a3      	strhlt	r3, [r4, #12]
 800b970:	bd10      	pop	{r4, pc}

0800b972 <__swrite>:
 800b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b976:	461f      	mov	r7, r3
 800b978:	898b      	ldrh	r3, [r1, #12]
 800b97a:	05db      	lsls	r3, r3, #23
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	4616      	mov	r6, r2
 800b982:	d505      	bpl.n	800b990 <__swrite+0x1e>
 800b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b988:	2302      	movs	r3, #2
 800b98a:	2200      	movs	r2, #0
 800b98c:	f002 fa46 	bl	800de1c <_lseek_r>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	4632      	mov	r2, r6
 800b99e:	463b      	mov	r3, r7
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a6:	f000 bf9b 	b.w	800c8e0 <_write_r>

0800b9aa <__sseek>:
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b2:	f002 fa33 	bl	800de1c <_lseek_r>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	bf15      	itete	ne
 800b9bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9c6:	81a3      	strheq	r3, [r4, #12]
 800b9c8:	bf18      	it	ne
 800b9ca:	81a3      	strhne	r3, [r4, #12]
 800b9cc:	bd10      	pop	{r4, pc}

0800b9ce <__sclose>:
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f001 b823 	b.w	800ca1c <_close_r>

0800b9d6 <strcpy>:
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9dc:	f803 2b01 	strb.w	r2, [r3], #1
 800b9e0:	2a00      	cmp	r2, #0
 800b9e2:	d1f9      	bne.n	800b9d8 <strcpy+0x2>
 800b9e4:	4770      	bx	lr

0800b9e6 <strstr>:
 800b9e6:	780a      	ldrb	r2, [r1, #0]
 800b9e8:	b570      	push	{r4, r5, r6, lr}
 800b9ea:	b96a      	cbnz	r2, 800ba08 <strstr+0x22>
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d109      	bne.n	800ba06 <strstr+0x20>
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0f6      	beq.n	800b9ec <strstr+0x6>
 800b9fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba02:	429e      	cmp	r6, r3
 800ba04:	d0f7      	beq.n	800b9f6 <strstr+0x10>
 800ba06:	3001      	adds	r0, #1
 800ba08:	7803      	ldrb	r3, [r0, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1ef      	bne.n	800b9ee <strstr+0x8>
 800ba0e:	4618      	mov	r0, r3
 800ba10:	e7ec      	b.n	800b9ec <strstr+0x6>

0800ba12 <sulp>:
 800ba12:	b570      	push	{r4, r5, r6, lr}
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	ec45 4b10 	vmov	d0, r4, r5
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	f002 fe05 	bl	800e62c <__ulp>
 800ba22:	ec51 0b10 	vmov	r0, r1, d0
 800ba26:	b17e      	cbz	r6, 800ba48 <sulp+0x36>
 800ba28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dd09      	ble.n	800ba48 <sulp+0x36>
 800ba34:	051b      	lsls	r3, r3, #20
 800ba36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba3a:	2400      	movs	r4, #0
 800ba3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fe0a 	bl	800065c <__aeabi_dmul>
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	0000      	movs	r0, r0
 800ba4c:	0000      	movs	r0, r0
	...

0800ba50 <_strtod_l>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	ed2d 8b02 	vpush	{d8}
 800ba58:	b09d      	sub	sp, #116	; 0x74
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9318      	str	r3, [sp, #96]	; 0x60
 800ba60:	4ba2      	ldr	r3, [pc, #648]	; (800bcec <_strtod_l+0x29c>)
 800ba62:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	9305      	str	r3, [sp, #20]
 800ba68:	4604      	mov	r4, r0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	4688      	mov	r8, r1
 800ba6e:	f7f4 fc31 	bl	80002d4 <strlen>
 800ba72:	f04f 0a00 	mov.w	sl, #0
 800ba76:	4605      	mov	r5, r0
 800ba78:	f04f 0b00 	mov.w	fp, #0
 800ba7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba82:	781a      	ldrb	r2, [r3, #0]
 800ba84:	2a2b      	cmp	r2, #43	; 0x2b
 800ba86:	d04e      	beq.n	800bb26 <_strtod_l+0xd6>
 800ba88:	d83b      	bhi.n	800bb02 <_strtod_l+0xb2>
 800ba8a:	2a0d      	cmp	r2, #13
 800ba8c:	d834      	bhi.n	800baf8 <_strtod_l+0xa8>
 800ba8e:	2a08      	cmp	r2, #8
 800ba90:	d834      	bhi.n	800bafc <_strtod_l+0xac>
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	d03e      	beq.n	800bb14 <_strtod_l+0xc4>
 800ba96:	2300      	movs	r3, #0
 800ba98:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ba9c:	7833      	ldrb	r3, [r6, #0]
 800ba9e:	2b30      	cmp	r3, #48	; 0x30
 800baa0:	f040 80b0 	bne.w	800bc04 <_strtod_l+0x1b4>
 800baa4:	7873      	ldrb	r3, [r6, #1]
 800baa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800baaa:	2b58      	cmp	r3, #88	; 0x58
 800baac:	d168      	bne.n	800bb80 <_strtod_l+0x130>
 800baae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	ab18      	add	r3, sp, #96	; 0x60
 800bab4:	9702      	str	r7, [sp, #8]
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	4a8d      	ldr	r2, [pc, #564]	; (800bcf0 <_strtod_l+0x2a0>)
 800baba:	ab19      	add	r3, sp, #100	; 0x64
 800babc:	a917      	add	r1, sp, #92	; 0x5c
 800babe:	4620      	mov	r0, r4
 800bac0:	f001 fea0 	bl	800d804 <__gethex>
 800bac4:	f010 0707 	ands.w	r7, r0, #7
 800bac8:	4605      	mov	r5, r0
 800baca:	d005      	beq.n	800bad8 <_strtod_l+0x88>
 800bacc:	2f06      	cmp	r7, #6
 800bace:	d12c      	bne.n	800bb2a <_strtod_l+0xda>
 800bad0:	3601      	adds	r6, #1
 800bad2:	2300      	movs	r3, #0
 800bad4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bad6:	930a      	str	r3, [sp, #40]	; 0x28
 800bad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 8590 	bne.w	800c600 <_strtod_l+0xbb0>
 800bae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae2:	b1eb      	cbz	r3, 800bb20 <_strtod_l+0xd0>
 800bae4:	4652      	mov	r2, sl
 800bae6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800baea:	ec43 2b10 	vmov	d0, r2, r3
 800baee:	b01d      	add	sp, #116	; 0x74
 800baf0:	ecbd 8b02 	vpop	{d8}
 800baf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf8:	2a20      	cmp	r2, #32
 800bafa:	d1cc      	bne.n	800ba96 <_strtod_l+0x46>
 800bafc:	3301      	adds	r3, #1
 800bafe:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb00:	e7be      	b.n	800ba80 <_strtod_l+0x30>
 800bb02:	2a2d      	cmp	r2, #45	; 0x2d
 800bb04:	d1c7      	bne.n	800ba96 <_strtod_l+0x46>
 800bb06:	2201      	movs	r2, #1
 800bb08:	920a      	str	r2, [sp, #40]	; 0x28
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb0e:	785b      	ldrb	r3, [r3, #1]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1c2      	bne.n	800ba9a <_strtod_l+0x4a>
 800bb14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f040 856e 	bne.w	800c5fc <_strtod_l+0xbac>
 800bb20:	4652      	mov	r2, sl
 800bb22:	465b      	mov	r3, fp
 800bb24:	e7e1      	b.n	800baea <_strtod_l+0x9a>
 800bb26:	2200      	movs	r2, #0
 800bb28:	e7ee      	b.n	800bb08 <_strtod_l+0xb8>
 800bb2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb2c:	b13a      	cbz	r2, 800bb3e <_strtod_l+0xee>
 800bb2e:	2135      	movs	r1, #53	; 0x35
 800bb30:	a81a      	add	r0, sp, #104	; 0x68
 800bb32:	f002 fe86 	bl	800e842 <__copybits>
 800bb36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f002 fa45 	bl	800dfc8 <_Bfree>
 800bb3e:	3f01      	subs	r7, #1
 800bb40:	2f04      	cmp	r7, #4
 800bb42:	d806      	bhi.n	800bb52 <_strtod_l+0x102>
 800bb44:	e8df f007 	tbb	[pc, r7]
 800bb48:	1714030a 	.word	0x1714030a
 800bb4c:	0a          	.byte	0x0a
 800bb4d:	00          	.byte	0x00
 800bb4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bb52:	0728      	lsls	r0, r5, #28
 800bb54:	d5c0      	bpl.n	800bad8 <_strtod_l+0x88>
 800bb56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb5a:	e7bd      	b.n	800bad8 <_strtod_l+0x88>
 800bb5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bb60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb6e:	e7f0      	b.n	800bb52 <_strtod_l+0x102>
 800bb70:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bcf4 <_strtod_l+0x2a4>
 800bb74:	e7ed      	b.n	800bb52 <_strtod_l+0x102>
 800bb76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb7e:	e7e8      	b.n	800bb52 <_strtod_l+0x102>
 800bb80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb86:	785b      	ldrb	r3, [r3, #1]
 800bb88:	2b30      	cmp	r3, #48	; 0x30
 800bb8a:	d0f9      	beq.n	800bb80 <_strtod_l+0x130>
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0a3      	beq.n	800bad8 <_strtod_l+0x88>
 800bb90:	2301      	movs	r3, #1
 800bb92:	f04f 0900 	mov.w	r9, #0
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb9a:	9308      	str	r3, [sp, #32]
 800bb9c:	f8cd 901c 	str.w	r9, [sp, #28]
 800bba0:	464f      	mov	r7, r9
 800bba2:	220a      	movs	r2, #10
 800bba4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bba6:	7806      	ldrb	r6, [r0, #0]
 800bba8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bbac:	b2d9      	uxtb	r1, r3
 800bbae:	2909      	cmp	r1, #9
 800bbb0:	d92a      	bls.n	800bc08 <_strtod_l+0x1b8>
 800bbb2:	9905      	ldr	r1, [sp, #20]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	f003 f883 	bl	800ecc0 <strncmp>
 800bbba:	b398      	cbz	r0, 800bc24 <_strtod_l+0x1d4>
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463d      	mov	r5, r7
 800bbc2:	9005      	str	r0, [sp, #20]
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2a65      	cmp	r2, #101	; 0x65
 800bbc8:	d001      	beq.n	800bbce <_strtod_l+0x17e>
 800bbca:	2a45      	cmp	r2, #69	; 0x45
 800bbcc:	d118      	bne.n	800bc00 <_strtod_l+0x1b0>
 800bbce:	b91d      	cbnz	r5, 800bbd8 <_strtod_l+0x188>
 800bbd0:	9a04      	ldr	r2, [sp, #16]
 800bbd2:	4302      	orrs	r2, r0
 800bbd4:	d09e      	beq.n	800bb14 <_strtod_l+0xc4>
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bbdc:	f108 0201 	add.w	r2, r8, #1
 800bbe0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbe2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bbe6:	2a2b      	cmp	r2, #43	; 0x2b
 800bbe8:	d075      	beq.n	800bcd6 <_strtod_l+0x286>
 800bbea:	2a2d      	cmp	r2, #45	; 0x2d
 800bbec:	d07b      	beq.n	800bce6 <_strtod_l+0x296>
 800bbee:	f04f 0c00 	mov.w	ip, #0
 800bbf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbf6:	2909      	cmp	r1, #9
 800bbf8:	f240 8082 	bls.w	800bd00 <_strtod_l+0x2b0>
 800bbfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bc00:	2600      	movs	r6, #0
 800bc02:	e09d      	b.n	800bd40 <_strtod_l+0x2f0>
 800bc04:	2300      	movs	r3, #0
 800bc06:	e7c4      	b.n	800bb92 <_strtod_l+0x142>
 800bc08:	2f08      	cmp	r7, #8
 800bc0a:	bfd8      	it	le
 800bc0c:	9907      	ldrle	r1, [sp, #28]
 800bc0e:	f100 0001 	add.w	r0, r0, #1
 800bc12:	bfda      	itte	le
 800bc14:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc18:	9307      	strle	r3, [sp, #28]
 800bc1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bc1e:	3701      	adds	r7, #1
 800bc20:	9017      	str	r0, [sp, #92]	; 0x5c
 800bc22:	e7bf      	b.n	800bba4 <_strtod_l+0x154>
 800bc24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc26:	195a      	adds	r2, r3, r5
 800bc28:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc2a:	5d5a      	ldrb	r2, [r3, r5]
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	d037      	beq.n	800bca0 <_strtod_l+0x250>
 800bc30:	9005      	str	r0, [sp, #20]
 800bc32:	463d      	mov	r5, r7
 800bc34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc38:	2b09      	cmp	r3, #9
 800bc3a:	d912      	bls.n	800bc62 <_strtod_l+0x212>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7c2      	b.n	800bbc6 <_strtod_l+0x176>
 800bc40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc46:	785a      	ldrb	r2, [r3, #1]
 800bc48:	3001      	adds	r0, #1
 800bc4a:	2a30      	cmp	r2, #48	; 0x30
 800bc4c:	d0f8      	beq.n	800bc40 <_strtod_l+0x1f0>
 800bc4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc52:	2b08      	cmp	r3, #8
 800bc54:	f200 84d9 	bhi.w	800c60a <_strtod_l+0xbba>
 800bc58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc5a:	9005      	str	r0, [sp, #20]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	9308      	str	r3, [sp, #32]
 800bc60:	4605      	mov	r5, r0
 800bc62:	3a30      	subs	r2, #48	; 0x30
 800bc64:	f100 0301 	add.w	r3, r0, #1
 800bc68:	d014      	beq.n	800bc94 <_strtod_l+0x244>
 800bc6a:	9905      	ldr	r1, [sp, #20]
 800bc6c:	4419      	add	r1, r3
 800bc6e:	9105      	str	r1, [sp, #20]
 800bc70:	462b      	mov	r3, r5
 800bc72:	eb00 0e05 	add.w	lr, r0, r5
 800bc76:	210a      	movs	r1, #10
 800bc78:	4573      	cmp	r3, lr
 800bc7a:	d113      	bne.n	800bca4 <_strtod_l+0x254>
 800bc7c:	182b      	adds	r3, r5, r0
 800bc7e:	2b08      	cmp	r3, #8
 800bc80:	f105 0501 	add.w	r5, r5, #1
 800bc84:	4405      	add	r5, r0
 800bc86:	dc1c      	bgt.n	800bcc2 <_strtod_l+0x272>
 800bc88:	9907      	ldr	r1, [sp, #28]
 800bc8a:	230a      	movs	r3, #10
 800bc8c:	fb03 2301 	mla	r3, r3, r1, r2
 800bc90:	9307      	str	r3, [sp, #28]
 800bc92:	2300      	movs	r3, #0
 800bc94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc96:	1c51      	adds	r1, r2, #1
 800bc98:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc9a:	7852      	ldrb	r2, [r2, #1]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	e7c9      	b.n	800bc34 <_strtod_l+0x1e4>
 800bca0:	4638      	mov	r0, r7
 800bca2:	e7d2      	b.n	800bc4a <_strtod_l+0x1fa>
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	dc04      	bgt.n	800bcb2 <_strtod_l+0x262>
 800bca8:	9e07      	ldr	r6, [sp, #28]
 800bcaa:	434e      	muls	r6, r1
 800bcac:	9607      	str	r6, [sp, #28]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	e7e2      	b.n	800bc78 <_strtod_l+0x228>
 800bcb2:	f103 0c01 	add.w	ip, r3, #1
 800bcb6:	f1bc 0f10 	cmp.w	ip, #16
 800bcba:	bfd8      	it	le
 800bcbc:	fb01 f909 	mulle.w	r9, r1, r9
 800bcc0:	e7f5      	b.n	800bcae <_strtod_l+0x25e>
 800bcc2:	2d10      	cmp	r5, #16
 800bcc4:	bfdc      	itt	le
 800bcc6:	230a      	movle	r3, #10
 800bcc8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bccc:	e7e1      	b.n	800bc92 <_strtod_l+0x242>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	9305      	str	r3, [sp, #20]
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e77c      	b.n	800bbd0 <_strtod_l+0x180>
 800bcd6:	f04f 0c00 	mov.w	ip, #0
 800bcda:	f108 0202 	add.w	r2, r8, #2
 800bcde:	9217      	str	r2, [sp, #92]	; 0x5c
 800bce0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bce4:	e785      	b.n	800bbf2 <_strtod_l+0x1a2>
 800bce6:	f04f 0c01 	mov.w	ip, #1
 800bcea:	e7f6      	b.n	800bcda <_strtod_l+0x28a>
 800bcec:	0800ff20 	.word	0x0800ff20
 800bcf0:	0800fc40 	.word	0x0800fc40
 800bcf4:	7ff00000 	.word	0x7ff00000
 800bcf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcfa:	1c51      	adds	r1, r2, #1
 800bcfc:	9117      	str	r1, [sp, #92]	; 0x5c
 800bcfe:	7852      	ldrb	r2, [r2, #1]
 800bd00:	2a30      	cmp	r2, #48	; 0x30
 800bd02:	d0f9      	beq.n	800bcf8 <_strtod_l+0x2a8>
 800bd04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bd08:	2908      	cmp	r1, #8
 800bd0a:	f63f af79 	bhi.w	800bc00 <_strtod_l+0x1b0>
 800bd0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd14:	9206      	str	r2, [sp, #24]
 800bd16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd18:	1c51      	adds	r1, r2, #1
 800bd1a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd1c:	7852      	ldrb	r2, [r2, #1]
 800bd1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bd22:	2e09      	cmp	r6, #9
 800bd24:	d937      	bls.n	800bd96 <_strtod_l+0x346>
 800bd26:	9e06      	ldr	r6, [sp, #24]
 800bd28:	1b89      	subs	r1, r1, r6
 800bd2a:	2908      	cmp	r1, #8
 800bd2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bd30:	dc02      	bgt.n	800bd38 <_strtod_l+0x2e8>
 800bd32:	4576      	cmp	r6, lr
 800bd34:	bfa8      	it	ge
 800bd36:	4676      	movge	r6, lr
 800bd38:	f1bc 0f00 	cmp.w	ip, #0
 800bd3c:	d000      	beq.n	800bd40 <_strtod_l+0x2f0>
 800bd3e:	4276      	negs	r6, r6
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	d14d      	bne.n	800bde0 <_strtod_l+0x390>
 800bd44:	9904      	ldr	r1, [sp, #16]
 800bd46:	4301      	orrs	r1, r0
 800bd48:	f47f aec6 	bne.w	800bad8 <_strtod_l+0x88>
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f47f aee1 	bne.w	800bb14 <_strtod_l+0xc4>
 800bd52:	2a69      	cmp	r2, #105	; 0x69
 800bd54:	d027      	beq.n	800bda6 <_strtod_l+0x356>
 800bd56:	dc24      	bgt.n	800bda2 <_strtod_l+0x352>
 800bd58:	2a49      	cmp	r2, #73	; 0x49
 800bd5a:	d024      	beq.n	800bda6 <_strtod_l+0x356>
 800bd5c:	2a4e      	cmp	r2, #78	; 0x4e
 800bd5e:	f47f aed9 	bne.w	800bb14 <_strtod_l+0xc4>
 800bd62:	499f      	ldr	r1, [pc, #636]	; (800bfe0 <_strtod_l+0x590>)
 800bd64:	a817      	add	r0, sp, #92	; 0x5c
 800bd66:	f001 ffa5 	bl	800dcb4 <__match>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f43f aed2 	beq.w	800bb14 <_strtod_l+0xc4>
 800bd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b28      	cmp	r3, #40	; 0x28
 800bd76:	d12d      	bne.n	800bdd4 <_strtod_l+0x384>
 800bd78:	499a      	ldr	r1, [pc, #616]	; (800bfe4 <_strtod_l+0x594>)
 800bd7a:	aa1a      	add	r2, sp, #104	; 0x68
 800bd7c:	a817      	add	r0, sp, #92	; 0x5c
 800bd7e:	f001 ffad 	bl	800dcdc <__hexnan>
 800bd82:	2805      	cmp	r0, #5
 800bd84:	d126      	bne.n	800bdd4 <_strtod_l+0x384>
 800bd86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bd8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bd90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd94:	e6a0      	b.n	800bad8 <_strtod_l+0x88>
 800bd96:	210a      	movs	r1, #10
 800bd98:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bd9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bda0:	e7b9      	b.n	800bd16 <_strtod_l+0x2c6>
 800bda2:	2a6e      	cmp	r2, #110	; 0x6e
 800bda4:	e7db      	b.n	800bd5e <_strtod_l+0x30e>
 800bda6:	4990      	ldr	r1, [pc, #576]	; (800bfe8 <_strtod_l+0x598>)
 800bda8:	a817      	add	r0, sp, #92	; 0x5c
 800bdaa:	f001 ff83 	bl	800dcb4 <__match>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f aeb0 	beq.w	800bb14 <_strtod_l+0xc4>
 800bdb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdb6:	498d      	ldr	r1, [pc, #564]	; (800bfec <_strtod_l+0x59c>)
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	a817      	add	r0, sp, #92	; 0x5c
 800bdbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdbe:	f001 ff79 	bl	800dcb4 <__match>
 800bdc2:	b910      	cbnz	r0, 800bdca <_strtod_l+0x37a>
 800bdc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bffc <_strtod_l+0x5ac>
 800bdce:	f04f 0a00 	mov.w	sl, #0
 800bdd2:	e681      	b.n	800bad8 <_strtod_l+0x88>
 800bdd4:	4886      	ldr	r0, [pc, #536]	; (800bff0 <_strtod_l+0x5a0>)
 800bdd6:	f7fe f977 	bl	800a0c8 <nan>
 800bdda:	ec5b ab10 	vmov	sl, fp, d0
 800bdde:	e67b      	b.n	800bad8 <_strtod_l+0x88>
 800bde0:	9b05      	ldr	r3, [sp, #20]
 800bde2:	9807      	ldr	r0, [sp, #28]
 800bde4:	1af3      	subs	r3, r6, r3
 800bde6:	2f00      	cmp	r7, #0
 800bde8:	bf08      	it	eq
 800bdea:	462f      	moveq	r7, r5
 800bdec:	2d10      	cmp	r5, #16
 800bdee:	9306      	str	r3, [sp, #24]
 800bdf0:	46a8      	mov	r8, r5
 800bdf2:	bfa8      	it	ge
 800bdf4:	f04f 0810 	movge.w	r8, #16
 800bdf8:	f7f4 fbb6 	bl	8000568 <__aeabi_ui2d>
 800bdfc:	2d09      	cmp	r5, #9
 800bdfe:	4682      	mov	sl, r0
 800be00:	468b      	mov	fp, r1
 800be02:	dd13      	ble.n	800be2c <_strtod_l+0x3dc>
 800be04:	4b7b      	ldr	r3, [pc, #492]	; (800bff4 <_strtod_l+0x5a4>)
 800be06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be0e:	f7f4 fc25 	bl	800065c <__aeabi_dmul>
 800be12:	4682      	mov	sl, r0
 800be14:	4648      	mov	r0, r9
 800be16:	468b      	mov	fp, r1
 800be18:	f7f4 fba6 	bl	8000568 <__aeabi_ui2d>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	f7f4 fa64 	bl	80002f0 <__adddf3>
 800be28:	4682      	mov	sl, r0
 800be2a:	468b      	mov	fp, r1
 800be2c:	2d0f      	cmp	r5, #15
 800be2e:	dc38      	bgt.n	800bea2 <_strtod_l+0x452>
 800be30:	9b06      	ldr	r3, [sp, #24]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f43f ae50 	beq.w	800bad8 <_strtod_l+0x88>
 800be38:	dd24      	ble.n	800be84 <_strtod_l+0x434>
 800be3a:	2b16      	cmp	r3, #22
 800be3c:	dc0b      	bgt.n	800be56 <_strtod_l+0x406>
 800be3e:	496d      	ldr	r1, [pc, #436]	; (800bff4 <_strtod_l+0x5a4>)
 800be40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be48:	4652      	mov	r2, sl
 800be4a:	465b      	mov	r3, fp
 800be4c:	f7f4 fc06 	bl	800065c <__aeabi_dmul>
 800be50:	4682      	mov	sl, r0
 800be52:	468b      	mov	fp, r1
 800be54:	e640      	b.n	800bad8 <_strtod_l+0x88>
 800be56:	9a06      	ldr	r2, [sp, #24]
 800be58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800be5c:	4293      	cmp	r3, r2
 800be5e:	db20      	blt.n	800bea2 <_strtod_l+0x452>
 800be60:	4c64      	ldr	r4, [pc, #400]	; (800bff4 <_strtod_l+0x5a4>)
 800be62:	f1c5 050f 	rsb	r5, r5, #15
 800be66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800be6a:	4652      	mov	r2, sl
 800be6c:	465b      	mov	r3, fp
 800be6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be72:	f7f4 fbf3 	bl	800065c <__aeabi_dmul>
 800be76:	9b06      	ldr	r3, [sp, #24]
 800be78:	1b5d      	subs	r5, r3, r5
 800be7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be82:	e7e3      	b.n	800be4c <_strtod_l+0x3fc>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	3316      	adds	r3, #22
 800be88:	db0b      	blt.n	800bea2 <_strtod_l+0x452>
 800be8a:	9b05      	ldr	r3, [sp, #20]
 800be8c:	1b9e      	subs	r6, r3, r6
 800be8e:	4b59      	ldr	r3, [pc, #356]	; (800bff4 <_strtod_l+0x5a4>)
 800be90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800be94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be98:	4650      	mov	r0, sl
 800be9a:	4659      	mov	r1, fp
 800be9c:	f7f4 fd08 	bl	80008b0 <__aeabi_ddiv>
 800bea0:	e7d6      	b.n	800be50 <_strtod_l+0x400>
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	eba5 0808 	sub.w	r8, r5, r8
 800bea8:	4498      	add	r8, r3
 800beaa:	f1b8 0f00 	cmp.w	r8, #0
 800beae:	dd74      	ble.n	800bf9a <_strtod_l+0x54a>
 800beb0:	f018 030f 	ands.w	r3, r8, #15
 800beb4:	d00a      	beq.n	800becc <_strtod_l+0x47c>
 800beb6:	494f      	ldr	r1, [pc, #316]	; (800bff4 <_strtod_l+0x5a4>)
 800beb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bebc:	4652      	mov	r2, sl
 800bebe:	465b      	mov	r3, fp
 800bec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bec4:	f7f4 fbca 	bl	800065c <__aeabi_dmul>
 800bec8:	4682      	mov	sl, r0
 800beca:	468b      	mov	fp, r1
 800becc:	f038 080f 	bics.w	r8, r8, #15
 800bed0:	d04f      	beq.n	800bf72 <_strtod_l+0x522>
 800bed2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bed6:	dd22      	ble.n	800bf1e <_strtod_l+0x4ce>
 800bed8:	2500      	movs	r5, #0
 800beda:	462e      	mov	r6, r5
 800bedc:	9507      	str	r5, [sp, #28]
 800bede:	9505      	str	r5, [sp, #20]
 800bee0:	2322      	movs	r3, #34	; 0x22
 800bee2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bffc <_strtod_l+0x5ac>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	f04f 0a00 	mov.w	sl, #0
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f43f adf2 	beq.w	800bad8 <_strtod_l+0x88>
 800bef4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bef6:	4620      	mov	r0, r4
 800bef8:	f002 f866 	bl	800dfc8 <_Bfree>
 800befc:	9905      	ldr	r1, [sp, #20]
 800befe:	4620      	mov	r0, r4
 800bf00:	f002 f862 	bl	800dfc8 <_Bfree>
 800bf04:	4631      	mov	r1, r6
 800bf06:	4620      	mov	r0, r4
 800bf08:	f002 f85e 	bl	800dfc8 <_Bfree>
 800bf0c:	9907      	ldr	r1, [sp, #28]
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f002 f85a 	bl	800dfc8 <_Bfree>
 800bf14:	4629      	mov	r1, r5
 800bf16:	4620      	mov	r0, r4
 800bf18:	f002 f856 	bl	800dfc8 <_Bfree>
 800bf1c:	e5dc      	b.n	800bad8 <_strtod_l+0x88>
 800bf1e:	4b36      	ldr	r3, [pc, #216]	; (800bff8 <_strtod_l+0x5a8>)
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	2300      	movs	r3, #0
 800bf24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf28:	4650      	mov	r0, sl
 800bf2a:	4659      	mov	r1, fp
 800bf2c:	4699      	mov	r9, r3
 800bf2e:	f1b8 0f01 	cmp.w	r8, #1
 800bf32:	dc21      	bgt.n	800bf78 <_strtod_l+0x528>
 800bf34:	b10b      	cbz	r3, 800bf3a <_strtod_l+0x4ea>
 800bf36:	4682      	mov	sl, r0
 800bf38:	468b      	mov	fp, r1
 800bf3a:	4b2f      	ldr	r3, [pc, #188]	; (800bff8 <_strtod_l+0x5a8>)
 800bf3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bf44:	4652      	mov	r2, sl
 800bf46:	465b      	mov	r3, fp
 800bf48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bf4c:	f7f4 fb86 	bl	800065c <__aeabi_dmul>
 800bf50:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <_strtod_l+0x5ac>)
 800bf52:	460a      	mov	r2, r1
 800bf54:	400b      	ands	r3, r1
 800bf56:	492a      	ldr	r1, [pc, #168]	; (800c000 <_strtod_l+0x5b0>)
 800bf58:	428b      	cmp	r3, r1
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	d8bc      	bhi.n	800bed8 <_strtod_l+0x488>
 800bf5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf62:	428b      	cmp	r3, r1
 800bf64:	bf86      	itte	hi
 800bf66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c004 <_strtod_l+0x5b4>
 800bf6a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800bf6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf72:	2300      	movs	r3, #0
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	e084      	b.n	800c082 <_strtod_l+0x632>
 800bf78:	f018 0f01 	tst.w	r8, #1
 800bf7c:	d005      	beq.n	800bf8a <_strtod_l+0x53a>
 800bf7e:	9b04      	ldr	r3, [sp, #16]
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 fb6a 	bl	800065c <__aeabi_dmul>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	9a04      	ldr	r2, [sp, #16]
 800bf8c:	3208      	adds	r2, #8
 800bf8e:	f109 0901 	add.w	r9, r9, #1
 800bf92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf96:	9204      	str	r2, [sp, #16]
 800bf98:	e7c9      	b.n	800bf2e <_strtod_l+0x4de>
 800bf9a:	d0ea      	beq.n	800bf72 <_strtod_l+0x522>
 800bf9c:	f1c8 0800 	rsb	r8, r8, #0
 800bfa0:	f018 020f 	ands.w	r2, r8, #15
 800bfa4:	d00a      	beq.n	800bfbc <_strtod_l+0x56c>
 800bfa6:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <_strtod_l+0x5a4>)
 800bfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfac:	4650      	mov	r0, sl
 800bfae:	4659      	mov	r1, fp
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 fc7c 	bl	80008b0 <__aeabi_ddiv>
 800bfb8:	4682      	mov	sl, r0
 800bfba:	468b      	mov	fp, r1
 800bfbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bfc0:	d0d7      	beq.n	800bf72 <_strtod_l+0x522>
 800bfc2:	f1b8 0f1f 	cmp.w	r8, #31
 800bfc6:	dd1f      	ble.n	800c008 <_strtod_l+0x5b8>
 800bfc8:	2500      	movs	r5, #0
 800bfca:	462e      	mov	r6, r5
 800bfcc:	9507      	str	r5, [sp, #28]
 800bfce:	9505      	str	r5, [sp, #20]
 800bfd0:	2322      	movs	r3, #34	; 0x22
 800bfd2:	f04f 0a00 	mov.w	sl, #0
 800bfd6:	f04f 0b00 	mov.w	fp, #0
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	e786      	b.n	800beec <_strtod_l+0x49c>
 800bfde:	bf00      	nop
 800bfe0:	0800fc12 	.word	0x0800fc12
 800bfe4:	0800fc54 	.word	0x0800fc54
 800bfe8:	0800fc0a 	.word	0x0800fc0a
 800bfec:	0800fe44 	.word	0x0800fe44
 800bff0:	0800fd3f 	.word	0x0800fd3f
 800bff4:	0800ffb8 	.word	0x0800ffb8
 800bff8:	0800ff90 	.word	0x0800ff90
 800bffc:	7ff00000 	.word	0x7ff00000
 800c000:	7ca00000 	.word	0x7ca00000
 800c004:	7fefffff 	.word	0x7fefffff
 800c008:	f018 0310 	ands.w	r3, r8, #16
 800c00c:	bf18      	it	ne
 800c00e:	236a      	movne	r3, #106	; 0x6a
 800c010:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c3c0 <_strtod_l+0x970>
 800c014:	9304      	str	r3, [sp, #16]
 800c016:	4650      	mov	r0, sl
 800c018:	4659      	mov	r1, fp
 800c01a:	2300      	movs	r3, #0
 800c01c:	f018 0f01 	tst.w	r8, #1
 800c020:	d004      	beq.n	800c02c <_strtod_l+0x5dc>
 800c022:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c026:	f7f4 fb19 	bl	800065c <__aeabi_dmul>
 800c02a:	2301      	movs	r3, #1
 800c02c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c030:	f109 0908 	add.w	r9, r9, #8
 800c034:	d1f2      	bne.n	800c01c <_strtod_l+0x5cc>
 800c036:	b10b      	cbz	r3, 800c03c <_strtod_l+0x5ec>
 800c038:	4682      	mov	sl, r0
 800c03a:	468b      	mov	fp, r1
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	b1c3      	cbz	r3, 800c072 <_strtod_l+0x622>
 800c040:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c044:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c048:	2b00      	cmp	r3, #0
 800c04a:	4659      	mov	r1, fp
 800c04c:	dd11      	ble.n	800c072 <_strtod_l+0x622>
 800c04e:	2b1f      	cmp	r3, #31
 800c050:	f340 8124 	ble.w	800c29c <_strtod_l+0x84c>
 800c054:	2b34      	cmp	r3, #52	; 0x34
 800c056:	bfde      	ittt	le
 800c058:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c05c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c060:	fa03 f202 	lslle.w	r2, r3, r2
 800c064:	f04f 0a00 	mov.w	sl, #0
 800c068:	bfcc      	ite	gt
 800c06a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c06e:	ea02 0b01 	andle.w	fp, r2, r1
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	4650      	mov	r0, sl
 800c078:	4659      	mov	r1, fp
 800c07a:	f7f4 fd57 	bl	8000b2c <__aeabi_dcmpeq>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d1a2      	bne.n	800bfc8 <_strtod_l+0x578>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	9908      	ldr	r1, [sp, #32]
 800c088:	462b      	mov	r3, r5
 800c08a:	463a      	mov	r2, r7
 800c08c:	4620      	mov	r0, r4
 800c08e:	f002 f803 	bl	800e098 <__s2b>
 800c092:	9007      	str	r0, [sp, #28]
 800c094:	2800      	cmp	r0, #0
 800c096:	f43f af1f 	beq.w	800bed8 <_strtod_l+0x488>
 800c09a:	9b05      	ldr	r3, [sp, #20]
 800c09c:	1b9e      	subs	r6, r3, r6
 800c09e:	9b06      	ldr	r3, [sp, #24]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bfb4      	ite	lt
 800c0a4:	4633      	movlt	r3, r6
 800c0a6:	2300      	movge	r3, #0
 800c0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2500      	movs	r5, #0
 800c0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c0b4:	462e      	mov	r6, r5
 800c0b6:	9b07      	ldr	r3, [sp, #28]
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	6859      	ldr	r1, [r3, #4]
 800c0bc:	f001 ff44 	bl	800df48 <_Balloc>
 800c0c0:	9005      	str	r0, [sp, #20]
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f43f af0c 	beq.w	800bee0 <_strtod_l+0x490>
 800c0c8:	9b07      	ldr	r3, [sp, #28]
 800c0ca:	691a      	ldr	r2, [r3, #16]
 800c0cc:	3202      	adds	r2, #2
 800c0ce:	f103 010c 	add.w	r1, r3, #12
 800c0d2:	0092      	lsls	r2, r2, #2
 800c0d4:	300c      	adds	r0, #12
 800c0d6:	f7fe fa3f 	bl	800a558 <memcpy>
 800c0da:	ec4b ab10 	vmov	d0, sl, fp
 800c0de:	aa1a      	add	r2, sp, #104	; 0x68
 800c0e0:	a919      	add	r1, sp, #100	; 0x64
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f002 fb1e 	bl	800e724 <__d2b>
 800c0e8:	ec4b ab18 	vmov	d8, sl, fp
 800c0ec:	9018      	str	r0, [sp, #96]	; 0x60
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aef6 	beq.w	800bee0 <_strtod_l+0x490>
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f002 f868 	bl	800e1cc <__i2b>
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f aeee 	beq.w	800bee0 <_strtod_l+0x490>
 800c104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c106:	9904      	ldr	r1, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	bfab      	itete	ge
 800c10c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c10e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c110:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c112:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c116:	bfac      	ite	ge
 800c118:	eb03 0902 	addge.w	r9, r3, r2
 800c11c:	1ad7      	sublt	r7, r2, r3
 800c11e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c120:	eba3 0801 	sub.w	r8, r3, r1
 800c124:	4490      	add	r8, r2
 800c126:	4ba1      	ldr	r3, [pc, #644]	; (800c3ac <_strtod_l+0x95c>)
 800c128:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c12c:	4598      	cmp	r8, r3
 800c12e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c132:	f280 80c7 	bge.w	800c2c4 <_strtod_l+0x874>
 800c136:	eba3 0308 	sub.w	r3, r3, r8
 800c13a:	2b1f      	cmp	r3, #31
 800c13c:	eba2 0203 	sub.w	r2, r2, r3
 800c140:	f04f 0101 	mov.w	r1, #1
 800c144:	f300 80b1 	bgt.w	800c2aa <_strtod_l+0x85a>
 800c148:	fa01 f303 	lsl.w	r3, r1, r3
 800c14c:	930d      	str	r3, [sp, #52]	; 0x34
 800c14e:	2300      	movs	r3, #0
 800c150:	9308      	str	r3, [sp, #32]
 800c152:	eb09 0802 	add.w	r8, r9, r2
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	45c1      	cmp	r9, r8
 800c15a:	4417      	add	r7, r2
 800c15c:	441f      	add	r7, r3
 800c15e:	464b      	mov	r3, r9
 800c160:	bfa8      	it	ge
 800c162:	4643      	movge	r3, r8
 800c164:	42bb      	cmp	r3, r7
 800c166:	bfa8      	it	ge
 800c168:	463b      	movge	r3, r7
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	bfc2      	ittt	gt
 800c16e:	eba8 0803 	subgt.w	r8, r8, r3
 800c172:	1aff      	subgt	r7, r7, r3
 800c174:	eba9 0903 	subgt.w	r9, r9, r3
 800c178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dd17      	ble.n	800c1ae <_strtod_l+0x75e>
 800c17e:	4631      	mov	r1, r6
 800c180:	461a      	mov	r2, r3
 800c182:	4620      	mov	r0, r4
 800c184:	f002 f8e2 	bl	800e34c <__pow5mult>
 800c188:	4606      	mov	r6, r0
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f43f aea8 	beq.w	800bee0 <_strtod_l+0x490>
 800c190:	4601      	mov	r1, r0
 800c192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c194:	4620      	mov	r0, r4
 800c196:	f002 f82f 	bl	800e1f8 <__multiply>
 800c19a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f43f ae9f 	beq.w	800bee0 <_strtod_l+0x490>
 800c1a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f001 ff0f 	bl	800dfc8 <_Bfree>
 800c1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ac:	9318      	str	r3, [sp, #96]	; 0x60
 800c1ae:	f1b8 0f00 	cmp.w	r8, #0
 800c1b2:	f300 808c 	bgt.w	800c2ce <_strtod_l+0x87e>
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dd08      	ble.n	800c1ce <_strtod_l+0x77e>
 800c1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1be:	9905      	ldr	r1, [sp, #20]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f002 f8c3 	bl	800e34c <__pow5mult>
 800c1c6:	9005      	str	r0, [sp, #20]
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	f43f ae89 	beq.w	800bee0 <_strtod_l+0x490>
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	dd08      	ble.n	800c1e4 <_strtod_l+0x794>
 800c1d2:	9905      	ldr	r1, [sp, #20]
 800c1d4:	463a      	mov	r2, r7
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f002 f912 	bl	800e400 <__lshift>
 800c1dc:	9005      	str	r0, [sp, #20]
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	f43f ae7e 	beq.w	800bee0 <_strtod_l+0x490>
 800c1e4:	f1b9 0f00 	cmp.w	r9, #0
 800c1e8:	dd08      	ble.n	800c1fc <_strtod_l+0x7ac>
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	464a      	mov	r2, r9
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f002 f906 	bl	800e400 <__lshift>
 800c1f4:	4606      	mov	r6, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f43f ae72 	beq.w	800bee0 <_strtod_l+0x490>
 800c1fc:	9a05      	ldr	r2, [sp, #20]
 800c1fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c200:	4620      	mov	r0, r4
 800c202:	f002 f989 	bl	800e518 <__mdiff>
 800c206:	4605      	mov	r5, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	f43f ae69 	beq.w	800bee0 <_strtod_l+0x490>
 800c20e:	68c3      	ldr	r3, [r0, #12]
 800c210:	930b      	str	r3, [sp, #44]	; 0x2c
 800c212:	2300      	movs	r3, #0
 800c214:	60c3      	str	r3, [r0, #12]
 800c216:	4631      	mov	r1, r6
 800c218:	f002 f962 	bl	800e4e0 <__mcmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	da60      	bge.n	800c2e2 <_strtod_l+0x892>
 800c220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c222:	ea53 030a 	orrs.w	r3, r3, sl
 800c226:	f040 8082 	bne.w	800c32e <_strtod_l+0x8de>
 800c22a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d17d      	bne.n	800c32e <_strtod_l+0x8de>
 800c232:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c236:	0d1b      	lsrs	r3, r3, #20
 800c238:	051b      	lsls	r3, r3, #20
 800c23a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c23e:	d976      	bls.n	800c32e <_strtod_l+0x8de>
 800c240:	696b      	ldr	r3, [r5, #20]
 800c242:	b913      	cbnz	r3, 800c24a <_strtod_l+0x7fa>
 800c244:	692b      	ldr	r3, [r5, #16]
 800c246:	2b01      	cmp	r3, #1
 800c248:	dd71      	ble.n	800c32e <_strtod_l+0x8de>
 800c24a:	4629      	mov	r1, r5
 800c24c:	2201      	movs	r2, #1
 800c24e:	4620      	mov	r0, r4
 800c250:	f002 f8d6 	bl	800e400 <__lshift>
 800c254:	4631      	mov	r1, r6
 800c256:	4605      	mov	r5, r0
 800c258:	f002 f942 	bl	800e4e0 <__mcmp>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	dd66      	ble.n	800c32e <_strtod_l+0x8de>
 800c260:	9904      	ldr	r1, [sp, #16]
 800c262:	4a53      	ldr	r2, [pc, #332]	; (800c3b0 <_strtod_l+0x960>)
 800c264:	465b      	mov	r3, fp
 800c266:	2900      	cmp	r1, #0
 800c268:	f000 8081 	beq.w	800c36e <_strtod_l+0x91e>
 800c26c:	ea02 010b 	and.w	r1, r2, fp
 800c270:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c274:	dc7b      	bgt.n	800c36e <_strtod_l+0x91e>
 800c276:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c27a:	f77f aea9 	ble.w	800bfd0 <_strtod_l+0x580>
 800c27e:	4b4d      	ldr	r3, [pc, #308]	; (800c3b4 <_strtod_l+0x964>)
 800c280:	4650      	mov	r0, sl
 800c282:	4659      	mov	r1, fp
 800c284:	2200      	movs	r2, #0
 800c286:	f7f4 f9e9 	bl	800065c <__aeabi_dmul>
 800c28a:	460b      	mov	r3, r1
 800c28c:	4303      	orrs	r3, r0
 800c28e:	bf08      	it	eq
 800c290:	2322      	moveq	r3, #34	; 0x22
 800c292:	4682      	mov	sl, r0
 800c294:	468b      	mov	fp, r1
 800c296:	bf08      	it	eq
 800c298:	6023      	streq	r3, [r4, #0]
 800c29a:	e62b      	b.n	800bef4 <_strtod_l+0x4a4>
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a4:	ea03 0a0a 	and.w	sl, r3, sl
 800c2a8:	e6e3      	b.n	800c072 <_strtod_l+0x622>
 800c2aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c2ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c2b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c2b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c2ba:	fa01 f308 	lsl.w	r3, r1, r8
 800c2be:	9308      	str	r3, [sp, #32]
 800c2c0:	910d      	str	r1, [sp, #52]	; 0x34
 800c2c2:	e746      	b.n	800c152 <_strtod_l+0x702>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9308      	str	r3, [sp, #32]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c2cc:	e741      	b.n	800c152 <_strtod_l+0x702>
 800c2ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f002 f894 	bl	800e400 <__lshift>
 800c2d8:	9018      	str	r0, [sp, #96]	; 0x60
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	f47f af6b 	bne.w	800c1b6 <_strtod_l+0x766>
 800c2e0:	e5fe      	b.n	800bee0 <_strtod_l+0x490>
 800c2e2:	465f      	mov	r7, fp
 800c2e4:	d16e      	bne.n	800c3c4 <_strtod_l+0x974>
 800c2e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2ec:	b342      	cbz	r2, 800c340 <_strtod_l+0x8f0>
 800c2ee:	4a32      	ldr	r2, [pc, #200]	; (800c3b8 <_strtod_l+0x968>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d128      	bne.n	800c346 <_strtod_l+0x8f6>
 800c2f4:	9b04      	ldr	r3, [sp, #16]
 800c2f6:	4651      	mov	r1, sl
 800c2f8:	b1eb      	cbz	r3, 800c336 <_strtod_l+0x8e6>
 800c2fa:	4b2d      	ldr	r3, [pc, #180]	; (800c3b0 <_strtod_l+0x960>)
 800c2fc:	403b      	ands	r3, r7
 800c2fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c306:	d819      	bhi.n	800c33c <_strtod_l+0x8ec>
 800c308:	0d1b      	lsrs	r3, r3, #20
 800c30a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c30e:	fa02 f303 	lsl.w	r3, r2, r3
 800c312:	4299      	cmp	r1, r3
 800c314:	d117      	bne.n	800c346 <_strtod_l+0x8f6>
 800c316:	4b29      	ldr	r3, [pc, #164]	; (800c3bc <_strtod_l+0x96c>)
 800c318:	429f      	cmp	r7, r3
 800c31a:	d102      	bne.n	800c322 <_strtod_l+0x8d2>
 800c31c:	3101      	adds	r1, #1
 800c31e:	f43f addf 	beq.w	800bee0 <_strtod_l+0x490>
 800c322:	4b23      	ldr	r3, [pc, #140]	; (800c3b0 <_strtod_l+0x960>)
 800c324:	403b      	ands	r3, r7
 800c326:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c32a:	f04f 0a00 	mov.w	sl, #0
 800c32e:	9b04      	ldr	r3, [sp, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1a4      	bne.n	800c27e <_strtod_l+0x82e>
 800c334:	e5de      	b.n	800bef4 <_strtod_l+0x4a4>
 800c336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c33a:	e7ea      	b.n	800c312 <_strtod_l+0x8c2>
 800c33c:	4613      	mov	r3, r2
 800c33e:	e7e8      	b.n	800c312 <_strtod_l+0x8c2>
 800c340:	ea53 030a 	orrs.w	r3, r3, sl
 800c344:	d08c      	beq.n	800c260 <_strtod_l+0x810>
 800c346:	9b08      	ldr	r3, [sp, #32]
 800c348:	b1db      	cbz	r3, 800c382 <_strtod_l+0x932>
 800c34a:	423b      	tst	r3, r7
 800c34c:	d0ef      	beq.n	800c32e <_strtod_l+0x8de>
 800c34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c350:	9a04      	ldr	r2, [sp, #16]
 800c352:	4650      	mov	r0, sl
 800c354:	4659      	mov	r1, fp
 800c356:	b1c3      	cbz	r3, 800c38a <_strtod_l+0x93a>
 800c358:	f7ff fb5b 	bl	800ba12 <sulp>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	ec51 0b18 	vmov	r0, r1, d8
 800c364:	f7f3 ffc4 	bl	80002f0 <__adddf3>
 800c368:	4682      	mov	sl, r0
 800c36a:	468b      	mov	fp, r1
 800c36c:	e7df      	b.n	800c32e <_strtod_l+0x8de>
 800c36e:	4013      	ands	r3, r2
 800c370:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c374:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c378:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c37c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c380:	e7d5      	b.n	800c32e <_strtod_l+0x8de>
 800c382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c384:	ea13 0f0a 	tst.w	r3, sl
 800c388:	e7e0      	b.n	800c34c <_strtod_l+0x8fc>
 800c38a:	f7ff fb42 	bl	800ba12 <sulp>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	ec51 0b18 	vmov	r0, r1, d8
 800c396:	f7f3 ffa9 	bl	80002ec <__aeabi_dsub>
 800c39a:	2200      	movs	r2, #0
 800c39c:	2300      	movs	r3, #0
 800c39e:	4682      	mov	sl, r0
 800c3a0:	468b      	mov	fp, r1
 800c3a2:	f7f4 fbc3 	bl	8000b2c <__aeabi_dcmpeq>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d0c1      	beq.n	800c32e <_strtod_l+0x8de>
 800c3aa:	e611      	b.n	800bfd0 <_strtod_l+0x580>
 800c3ac:	fffffc02 	.word	0xfffffc02
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	39500000 	.word	0x39500000
 800c3b8:	000fffff 	.word	0x000fffff
 800c3bc:	7fefffff 	.word	0x7fefffff
 800c3c0:	0800fc68 	.word	0x0800fc68
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f002 fa08 	bl	800e7dc <__ratio>
 800c3cc:	ec59 8b10 	vmov	r8, r9, d0
 800c3d0:	ee10 0a10 	vmov	r0, s0
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3da:	4649      	mov	r1, r9
 800c3dc:	f7f4 fbba 	bl	8000b54 <__aeabi_dcmple>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d07a      	beq.n	800c4da <_strtod_l+0xa8a>
 800c3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d04a      	beq.n	800c480 <_strtod_l+0xa30>
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <_strtod_l+0xbf0>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c640 <_strtod_l+0xbf0>
 800c3f6:	f04f 0800 	mov.w	r8, #0
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <_strtod_l+0xbf4>)
 800c3fc:	403b      	ands	r3, r7
 800c3fe:	930d      	str	r3, [sp, #52]	; 0x34
 800c400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c402:	4b91      	ldr	r3, [pc, #580]	; (800c648 <_strtod_l+0xbf8>)
 800c404:	429a      	cmp	r2, r3
 800c406:	f040 80b0 	bne.w	800c56a <_strtod_l+0xb1a>
 800c40a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c40e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c412:	ec4b ab10 	vmov	d0, sl, fp
 800c416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c41a:	f002 f907 	bl	800e62c <__ulp>
 800c41e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c422:	ec53 2b10 	vmov	r2, r3, d0
 800c426:	f7f4 f919 	bl	800065c <__aeabi_dmul>
 800c42a:	4652      	mov	r2, sl
 800c42c:	465b      	mov	r3, fp
 800c42e:	f7f3 ff5f 	bl	80002f0 <__adddf3>
 800c432:	460b      	mov	r3, r1
 800c434:	4983      	ldr	r1, [pc, #524]	; (800c644 <_strtod_l+0xbf4>)
 800c436:	4a85      	ldr	r2, [pc, #532]	; (800c64c <_strtod_l+0xbfc>)
 800c438:	4019      	ands	r1, r3
 800c43a:	4291      	cmp	r1, r2
 800c43c:	4682      	mov	sl, r0
 800c43e:	d960      	bls.n	800c502 <_strtod_l+0xab2>
 800c440:	ee18 3a90 	vmov	r3, s17
 800c444:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c448:	4293      	cmp	r3, r2
 800c44a:	d104      	bne.n	800c456 <_strtod_l+0xa06>
 800c44c:	ee18 3a10 	vmov	r3, s16
 800c450:	3301      	adds	r3, #1
 800c452:	f43f ad45 	beq.w	800bee0 <_strtod_l+0x490>
 800c456:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c658 <_strtod_l+0xc08>
 800c45a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c45e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c460:	4620      	mov	r0, r4
 800c462:	f001 fdb1 	bl	800dfc8 <_Bfree>
 800c466:	9905      	ldr	r1, [sp, #20]
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 fdad 	bl	800dfc8 <_Bfree>
 800c46e:	4631      	mov	r1, r6
 800c470:	4620      	mov	r0, r4
 800c472:	f001 fda9 	bl	800dfc8 <_Bfree>
 800c476:	4629      	mov	r1, r5
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fda5 	bl	800dfc8 <_Bfree>
 800c47e:	e61a      	b.n	800c0b6 <_strtod_l+0x666>
 800c480:	f1ba 0f00 	cmp.w	sl, #0
 800c484:	d11b      	bne.n	800c4be <_strtod_l+0xa6e>
 800c486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c48a:	b9f3      	cbnz	r3, 800c4ca <_strtod_l+0xa7a>
 800c48c:	4b6c      	ldr	r3, [pc, #432]	; (800c640 <_strtod_l+0xbf0>)
 800c48e:	2200      	movs	r2, #0
 800c490:	4640      	mov	r0, r8
 800c492:	4649      	mov	r1, r9
 800c494:	f7f4 fb54 	bl	8000b40 <__aeabi_dcmplt>
 800c498:	b9d0      	cbnz	r0, 800c4d0 <_strtod_l+0xa80>
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	4b6c      	ldr	r3, [pc, #432]	; (800c650 <_strtod_l+0xc00>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f7f4 f8db 	bl	800065c <__aeabi_dmul>
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	4689      	mov	r9, r1
 800c4aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c4ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c4b2:	9315      	str	r3, [sp, #84]	; 0x54
 800c4b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c4b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4bc:	e79d      	b.n	800c3fa <_strtod_l+0x9aa>
 800c4be:	f1ba 0f01 	cmp.w	sl, #1
 800c4c2:	d102      	bne.n	800c4ca <_strtod_l+0xa7a>
 800c4c4:	2f00      	cmp	r7, #0
 800c4c6:	f43f ad83 	beq.w	800bfd0 <_strtod_l+0x580>
 800c4ca:	4b62      	ldr	r3, [pc, #392]	; (800c654 <_strtod_l+0xc04>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	e78e      	b.n	800c3ee <_strtod_l+0x99e>
 800c4d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c650 <_strtod_l+0xc00>
 800c4d4:	f04f 0800 	mov.w	r8, #0
 800c4d8:	e7e7      	b.n	800c4aa <_strtod_l+0xa5a>
 800c4da:	4b5d      	ldr	r3, [pc, #372]	; (800c650 <_strtod_l+0xc00>)
 800c4dc:	4640      	mov	r0, r8
 800c4de:	4649      	mov	r1, r9
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f7f4 f8bb 	bl	800065c <__aeabi_dmul>
 800c4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	4689      	mov	r9, r1
 800c4ec:	b933      	cbnz	r3, 800c4fc <_strtod_l+0xaac>
 800c4ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4f2:	900e      	str	r0, [sp, #56]	; 0x38
 800c4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c4fa:	e7dd      	b.n	800c4b8 <_strtod_l+0xa68>
 800c4fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c500:	e7f9      	b.n	800c4f6 <_strtod_l+0xaa6>
 800c502:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1a8      	bne.n	800c45e <_strtod_l+0xa0e>
 800c50c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c512:	0d1b      	lsrs	r3, r3, #20
 800c514:	051b      	lsls	r3, r3, #20
 800c516:	429a      	cmp	r2, r3
 800c518:	d1a1      	bne.n	800c45e <_strtod_l+0xa0e>
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f4 fbfd 	bl	8000d1c <__aeabi_d2lz>
 800c522:	f7f4 f86d 	bl	8000600 <__aeabi_l2d>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4640      	mov	r0, r8
 800c52c:	4649      	mov	r1, r9
 800c52e:	f7f3 fedd 	bl	80002ec <__aeabi_dsub>
 800c532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c538:	ea43 030a 	orr.w	r3, r3, sl
 800c53c:	4313      	orrs	r3, r2
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	d055      	beq.n	800c5f0 <_strtod_l+0xba0>
 800c544:	a336      	add	r3, pc, #216	; (adr r3, 800c620 <_strtod_l+0xbd0>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	f7f4 faf9 	bl	8000b40 <__aeabi_dcmplt>
 800c54e:	2800      	cmp	r0, #0
 800c550:	f47f acd0 	bne.w	800bef4 <_strtod_l+0x4a4>
 800c554:	a334      	add	r3, pc, #208	; (adr r3, 800c628 <_strtod_l+0xbd8>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	4640      	mov	r0, r8
 800c55c:	4649      	mov	r1, r9
 800c55e:	f7f4 fb0d 	bl	8000b7c <__aeabi_dcmpgt>
 800c562:	2800      	cmp	r0, #0
 800c564:	f43f af7b 	beq.w	800c45e <_strtod_l+0xa0e>
 800c568:	e4c4      	b.n	800bef4 <_strtod_l+0x4a4>
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	b333      	cbz	r3, 800c5bc <_strtod_l+0xb6c>
 800c56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c570:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c574:	d822      	bhi.n	800c5bc <_strtod_l+0xb6c>
 800c576:	a32e      	add	r3, pc, #184	; (adr r3, 800c630 <_strtod_l+0xbe0>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	4640      	mov	r0, r8
 800c57e:	4649      	mov	r1, r9
 800c580:	f7f4 fae8 	bl	8000b54 <__aeabi_dcmple>
 800c584:	b1a0      	cbz	r0, 800c5b0 <_strtod_l+0xb60>
 800c586:	4649      	mov	r1, r9
 800c588:	4640      	mov	r0, r8
 800c58a:	f7f4 fb3f 	bl	8000c0c <__aeabi_d2uiz>
 800c58e:	2801      	cmp	r0, #1
 800c590:	bf38      	it	cc
 800c592:	2001      	movcc	r0, #1
 800c594:	f7f3 ffe8 	bl	8000568 <__aeabi_ui2d>
 800c598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59a:	4680      	mov	r8, r0
 800c59c:	4689      	mov	r9, r1
 800c59e:	bb23      	cbnz	r3, 800c5ea <_strtod_l+0xb9a>
 800c5a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a4:	9010      	str	r0, [sp, #64]	; 0x40
 800c5a6:	9311      	str	r3, [sp, #68]	; 0x44
 800c5a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c5ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5b8:	1a9b      	subs	r3, r3, r2
 800c5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c5bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c5c4:	eef0 0a68 	vmov.f32	s1, s17
 800c5c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5cc:	f002 f82e 	bl	800e62c <__ulp>
 800c5d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5d4:	ec53 2b10 	vmov	r2, r3, d0
 800c5d8:	f7f4 f840 	bl	800065c <__aeabi_dmul>
 800c5dc:	ec53 2b18 	vmov	r2, r3, d8
 800c5e0:	f7f3 fe86 	bl	80002f0 <__adddf3>
 800c5e4:	4682      	mov	sl, r0
 800c5e6:	468b      	mov	fp, r1
 800c5e8:	e78d      	b.n	800c506 <_strtod_l+0xab6>
 800c5ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c5ee:	e7db      	b.n	800c5a8 <_strtod_l+0xb58>
 800c5f0:	a311      	add	r3, pc, #68	; (adr r3, 800c638 <_strtod_l+0xbe8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f4 faa3 	bl	8000b40 <__aeabi_dcmplt>
 800c5fa:	e7b2      	b.n	800c562 <_strtod_l+0xb12>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	f7ff ba6b 	b.w	800bae0 <_strtod_l+0x90>
 800c60a:	2a65      	cmp	r2, #101	; 0x65
 800c60c:	f43f ab5f 	beq.w	800bcce <_strtod_l+0x27e>
 800c610:	2a45      	cmp	r2, #69	; 0x45
 800c612:	f43f ab5c 	beq.w	800bcce <_strtod_l+0x27e>
 800c616:	2301      	movs	r3, #1
 800c618:	f7ff bb94 	b.w	800bd44 <_strtod_l+0x2f4>
 800c61c:	f3af 8000 	nop.w
 800c620:	94a03595 	.word	0x94a03595
 800c624:	3fdfffff 	.word	0x3fdfffff
 800c628:	35afe535 	.word	0x35afe535
 800c62c:	3fe00000 	.word	0x3fe00000
 800c630:	ffc00000 	.word	0xffc00000
 800c634:	41dfffff 	.word	0x41dfffff
 800c638:	94a03595 	.word	0x94a03595
 800c63c:	3fcfffff 	.word	0x3fcfffff
 800c640:	3ff00000 	.word	0x3ff00000
 800c644:	7ff00000 	.word	0x7ff00000
 800c648:	7fe00000 	.word	0x7fe00000
 800c64c:	7c9fffff 	.word	0x7c9fffff
 800c650:	3fe00000 	.word	0x3fe00000
 800c654:	bff00000 	.word	0xbff00000
 800c658:	7fefffff 	.word	0x7fefffff

0800c65c <_strtod_r>:
 800c65c:	4b01      	ldr	r3, [pc, #4]	; (800c664 <_strtod_r+0x8>)
 800c65e:	f7ff b9f7 	b.w	800ba50 <_strtod_l>
 800c662:	bf00      	nop
 800c664:	20000094 	.word	0x20000094

0800c668 <strtok>:
 800c668:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <strtok+0x5c>)
 800c66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c66c:	681e      	ldr	r6, [r3, #0]
 800c66e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c670:	4605      	mov	r5, r0
 800c672:	b9fc      	cbnz	r4, 800c6b4 <strtok+0x4c>
 800c674:	2050      	movs	r0, #80	; 0x50
 800c676:	9101      	str	r1, [sp, #4]
 800c678:	f7fd ff4e 	bl	800a518 <malloc>
 800c67c:	9901      	ldr	r1, [sp, #4]
 800c67e:	65b0      	str	r0, [r6, #88]	; 0x58
 800c680:	4602      	mov	r2, r0
 800c682:	b920      	cbnz	r0, 800c68e <strtok+0x26>
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <strtok+0x60>)
 800c686:	4811      	ldr	r0, [pc, #68]	; (800c6cc <strtok+0x64>)
 800c688:	2157      	movs	r1, #87	; 0x57
 800c68a:	f000 f9a9 	bl	800c9e0 <__assert_func>
 800c68e:	e9c0 4400 	strd	r4, r4, [r0]
 800c692:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c696:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c69a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c69e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c6a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c6a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c6aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c6ae:	6184      	str	r4, [r0, #24]
 800c6b0:	7704      	strb	r4, [r0, #28]
 800c6b2:	6244      	str	r4, [r0, #36]	; 0x24
 800c6b4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	b002      	add	sp, #8
 800c6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6c0:	f000 b806 	b.w	800c6d0 <__strtok_r>
 800c6c4:	2000002c 	.word	0x2000002c
 800c6c8:	0800fc90 	.word	0x0800fc90
 800c6cc:	0800fca7 	.word	0x0800fca7

0800c6d0 <__strtok_r>:
 800c6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d2:	b908      	cbnz	r0, 800c6d8 <__strtok_r+0x8>
 800c6d4:	6810      	ldr	r0, [r2, #0]
 800c6d6:	b188      	cbz	r0, 800c6fc <__strtok_r+0x2c>
 800c6d8:	4604      	mov	r4, r0
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6e6:	b91e      	cbnz	r6, 800c6f0 <__strtok_r+0x20>
 800c6e8:	b965      	cbnz	r5, 800c704 <__strtok_r+0x34>
 800c6ea:	6015      	str	r5, [r2, #0]
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	e005      	b.n	800c6fc <__strtok_r+0x2c>
 800c6f0:	42b5      	cmp	r5, r6
 800c6f2:	d1f6      	bne.n	800c6e2 <__strtok_r+0x12>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1f0      	bne.n	800c6da <__strtok_r+0xa>
 800c6f8:	6014      	str	r4, [r2, #0]
 800c6fa:	7003      	strb	r3, [r0, #0]
 800c6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fe:	461c      	mov	r4, r3
 800c700:	e00c      	b.n	800c71c <__strtok_r+0x4c>
 800c702:	b915      	cbnz	r5, 800c70a <__strtok_r+0x3a>
 800c704:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c708:	460e      	mov	r6, r1
 800c70a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c70e:	42ab      	cmp	r3, r5
 800c710:	d1f7      	bne.n	800c702 <__strtok_r+0x32>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0f3      	beq.n	800c6fe <__strtok_r+0x2e>
 800c716:	2300      	movs	r3, #0
 800c718:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c71c:	6014      	str	r4, [r2, #0]
 800c71e:	e7ed      	b.n	800c6fc <__strtok_r+0x2c>

0800c720 <_strtol_l.constprop.0>:
 800c720:	2b01      	cmp	r3, #1
 800c722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c726:	d001      	beq.n	800c72c <_strtol_l.constprop.0+0xc>
 800c728:	2b24      	cmp	r3, #36	; 0x24
 800c72a:	d906      	bls.n	800c73a <_strtol_l.constprop.0+0x1a>
 800c72c:	f7fd fcea 	bl	800a104 <__errno>
 800c730:	2316      	movs	r3, #22
 800c732:	6003      	str	r3, [r0, #0]
 800c734:	2000      	movs	r0, #0
 800c736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c820 <_strtol_l.constprop.0+0x100>
 800c73e:	460d      	mov	r5, r1
 800c740:	462e      	mov	r6, r5
 800c742:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c746:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c74a:	f017 0708 	ands.w	r7, r7, #8
 800c74e:	d1f7      	bne.n	800c740 <_strtol_l.constprop.0+0x20>
 800c750:	2c2d      	cmp	r4, #45	; 0x2d
 800c752:	d132      	bne.n	800c7ba <_strtol_l.constprop.0+0x9a>
 800c754:	782c      	ldrb	r4, [r5, #0]
 800c756:	2701      	movs	r7, #1
 800c758:	1cb5      	adds	r5, r6, #2
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05b      	beq.n	800c816 <_strtol_l.constprop.0+0xf6>
 800c75e:	2b10      	cmp	r3, #16
 800c760:	d109      	bne.n	800c776 <_strtol_l.constprop.0+0x56>
 800c762:	2c30      	cmp	r4, #48	; 0x30
 800c764:	d107      	bne.n	800c776 <_strtol_l.constprop.0+0x56>
 800c766:	782c      	ldrb	r4, [r5, #0]
 800c768:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c76c:	2c58      	cmp	r4, #88	; 0x58
 800c76e:	d14d      	bne.n	800c80c <_strtol_l.constprop.0+0xec>
 800c770:	786c      	ldrb	r4, [r5, #1]
 800c772:	2310      	movs	r3, #16
 800c774:	3502      	adds	r5, #2
 800c776:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c77a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c77e:	f04f 0c00 	mov.w	ip, #0
 800c782:	fbb8 f9f3 	udiv	r9, r8, r3
 800c786:	4666      	mov	r6, ip
 800c788:	fb03 8a19 	mls	sl, r3, r9, r8
 800c78c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c790:	f1be 0f09 	cmp.w	lr, #9
 800c794:	d816      	bhi.n	800c7c4 <_strtol_l.constprop.0+0xa4>
 800c796:	4674      	mov	r4, lr
 800c798:	42a3      	cmp	r3, r4
 800c79a:	dd24      	ble.n	800c7e6 <_strtol_l.constprop.0+0xc6>
 800c79c:	f1bc 0f00 	cmp.w	ip, #0
 800c7a0:	db1e      	blt.n	800c7e0 <_strtol_l.constprop.0+0xc0>
 800c7a2:	45b1      	cmp	r9, r6
 800c7a4:	d31c      	bcc.n	800c7e0 <_strtol_l.constprop.0+0xc0>
 800c7a6:	d101      	bne.n	800c7ac <_strtol_l.constprop.0+0x8c>
 800c7a8:	45a2      	cmp	sl, r4
 800c7aa:	db19      	blt.n	800c7e0 <_strtol_l.constprop.0+0xc0>
 800c7ac:	fb06 4603 	mla	r6, r6, r3, r4
 800c7b0:	f04f 0c01 	mov.w	ip, #1
 800c7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7b8:	e7e8      	b.n	800c78c <_strtol_l.constprop.0+0x6c>
 800c7ba:	2c2b      	cmp	r4, #43	; 0x2b
 800c7bc:	bf04      	itt	eq
 800c7be:	782c      	ldrbeq	r4, [r5, #0]
 800c7c0:	1cb5      	addeq	r5, r6, #2
 800c7c2:	e7ca      	b.n	800c75a <_strtol_l.constprop.0+0x3a>
 800c7c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c7c8:	f1be 0f19 	cmp.w	lr, #25
 800c7cc:	d801      	bhi.n	800c7d2 <_strtol_l.constprop.0+0xb2>
 800c7ce:	3c37      	subs	r4, #55	; 0x37
 800c7d0:	e7e2      	b.n	800c798 <_strtol_l.constprop.0+0x78>
 800c7d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c7d6:	f1be 0f19 	cmp.w	lr, #25
 800c7da:	d804      	bhi.n	800c7e6 <_strtol_l.constprop.0+0xc6>
 800c7dc:	3c57      	subs	r4, #87	; 0x57
 800c7de:	e7db      	b.n	800c798 <_strtol_l.constprop.0+0x78>
 800c7e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c7e4:	e7e6      	b.n	800c7b4 <_strtol_l.constprop.0+0x94>
 800c7e6:	f1bc 0f00 	cmp.w	ip, #0
 800c7ea:	da05      	bge.n	800c7f8 <_strtol_l.constprop.0+0xd8>
 800c7ec:	2322      	movs	r3, #34	; 0x22
 800c7ee:	6003      	str	r3, [r0, #0]
 800c7f0:	4646      	mov	r6, r8
 800c7f2:	b942      	cbnz	r2, 800c806 <_strtol_l.constprop.0+0xe6>
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	e79e      	b.n	800c736 <_strtol_l.constprop.0+0x16>
 800c7f8:	b107      	cbz	r7, 800c7fc <_strtol_l.constprop.0+0xdc>
 800c7fa:	4276      	negs	r6, r6
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	d0f9      	beq.n	800c7f4 <_strtol_l.constprop.0+0xd4>
 800c800:	f1bc 0f00 	cmp.w	ip, #0
 800c804:	d000      	beq.n	800c808 <_strtol_l.constprop.0+0xe8>
 800c806:	1e69      	subs	r1, r5, #1
 800c808:	6011      	str	r1, [r2, #0]
 800c80a:	e7f3      	b.n	800c7f4 <_strtol_l.constprop.0+0xd4>
 800c80c:	2430      	movs	r4, #48	; 0x30
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1b1      	bne.n	800c776 <_strtol_l.constprop.0+0x56>
 800c812:	2308      	movs	r3, #8
 800c814:	e7af      	b.n	800c776 <_strtol_l.constprop.0+0x56>
 800c816:	2c30      	cmp	r4, #48	; 0x30
 800c818:	d0a5      	beq.n	800c766 <_strtol_l.constprop.0+0x46>
 800c81a:	230a      	movs	r3, #10
 800c81c:	e7ab      	b.n	800c776 <_strtol_l.constprop.0+0x56>
 800c81e:	bf00      	nop
 800c820:	0800fd41 	.word	0x0800fd41

0800c824 <_strtol_r>:
 800c824:	f7ff bf7c 	b.w	800c720 <_strtol_l.constprop.0>

0800c828 <strtol>:
 800c828:	4613      	mov	r3, r2
 800c82a:	460a      	mov	r2, r1
 800c82c:	4601      	mov	r1, r0
 800c82e:	4802      	ldr	r0, [pc, #8]	; (800c838 <strtol+0x10>)
 800c830:	6800      	ldr	r0, [r0, #0]
 800c832:	f7ff bf75 	b.w	800c720 <_strtol_l.constprop.0>
 800c836:	bf00      	nop
 800c838:	2000002c 	.word	0x2000002c

0800c83c <__swbuf_r>:
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83e:	460e      	mov	r6, r1
 800c840:	4614      	mov	r4, r2
 800c842:	4605      	mov	r5, r0
 800c844:	b118      	cbz	r0, 800c84e <__swbuf_r+0x12>
 800c846:	6983      	ldr	r3, [r0, #24]
 800c848:	b90b      	cbnz	r3, 800c84e <__swbuf_r+0x12>
 800c84a:	f7fd fd8d 	bl	800a368 <__sinit>
 800c84e:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <__swbuf_r+0x98>)
 800c850:	429c      	cmp	r4, r3
 800c852:	d12b      	bne.n	800c8ac <__swbuf_r+0x70>
 800c854:	686c      	ldr	r4, [r5, #4]
 800c856:	69a3      	ldr	r3, [r4, #24]
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	071a      	lsls	r2, r3, #28
 800c85e:	d52f      	bpl.n	800c8c0 <__swbuf_r+0x84>
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	b36b      	cbz	r3, 800c8c0 <__swbuf_r+0x84>
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	6820      	ldr	r0, [r4, #0]
 800c868:	1ac0      	subs	r0, r0, r3
 800c86a:	6963      	ldr	r3, [r4, #20]
 800c86c:	b2f6      	uxtb	r6, r6
 800c86e:	4283      	cmp	r3, r0
 800c870:	4637      	mov	r7, r6
 800c872:	dc04      	bgt.n	800c87e <__swbuf_r+0x42>
 800c874:	4621      	mov	r1, r4
 800c876:	4628      	mov	r0, r5
 800c878:	f7fd fcd0 	bl	800a21c <_fflush_r>
 800c87c:	bb30      	cbnz	r0, 800c8cc <__swbuf_r+0x90>
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	3b01      	subs	r3, #1
 800c882:	60a3      	str	r3, [r4, #8]
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	6022      	str	r2, [r4, #0]
 800c88a:	701e      	strb	r6, [r3, #0]
 800c88c:	6963      	ldr	r3, [r4, #20]
 800c88e:	3001      	adds	r0, #1
 800c890:	4283      	cmp	r3, r0
 800c892:	d004      	beq.n	800c89e <__swbuf_r+0x62>
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	07db      	lsls	r3, r3, #31
 800c898:	d506      	bpl.n	800c8a8 <__swbuf_r+0x6c>
 800c89a:	2e0a      	cmp	r6, #10
 800c89c:	d104      	bne.n	800c8a8 <__swbuf_r+0x6c>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f7fd fcbb 	bl	800a21c <_fflush_r>
 800c8a6:	b988      	cbnz	r0, 800c8cc <__swbuf_r+0x90>
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <__swbuf_r+0x9c>)
 800c8ae:	429c      	cmp	r4, r3
 800c8b0:	d101      	bne.n	800c8b6 <__swbuf_r+0x7a>
 800c8b2:	68ac      	ldr	r4, [r5, #8]
 800c8b4:	e7cf      	b.n	800c856 <__swbuf_r+0x1a>
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <__swbuf_r+0xa0>)
 800c8b8:	429c      	cmp	r4, r3
 800c8ba:	bf08      	it	eq
 800c8bc:	68ec      	ldreq	r4, [r5, #12]
 800c8be:	e7ca      	b.n	800c856 <__swbuf_r+0x1a>
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f000 f81e 	bl	800c904 <__swsetup_r>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d0cb      	beq.n	800c864 <__swbuf_r+0x28>
 800c8cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c8d0:	e7ea      	b.n	800c8a8 <__swbuf_r+0x6c>
 800c8d2:	bf00      	nop
 800c8d4:	0800fbb0 	.word	0x0800fbb0
 800c8d8:	0800fbd0 	.word	0x0800fbd0
 800c8dc:	0800fb90 	.word	0x0800fb90

0800c8e0 <_write_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d07      	ldr	r5, [pc, #28]	; (800c900 <_write_r+0x20>)
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	602a      	str	r2, [r5, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f7f5 ffbe 	bl	8002870 <_write>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_write_r+0x1e>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_write_r+0x1e>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20000924 	.word	0x20000924

0800c904 <__swsetup_r>:
 800c904:	4b32      	ldr	r3, [pc, #200]	; (800c9d0 <__swsetup_r+0xcc>)
 800c906:	b570      	push	{r4, r5, r6, lr}
 800c908:	681d      	ldr	r5, [r3, #0]
 800c90a:	4606      	mov	r6, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	b125      	cbz	r5, 800c91a <__swsetup_r+0x16>
 800c910:	69ab      	ldr	r3, [r5, #24]
 800c912:	b913      	cbnz	r3, 800c91a <__swsetup_r+0x16>
 800c914:	4628      	mov	r0, r5
 800c916:	f7fd fd27 	bl	800a368 <__sinit>
 800c91a:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <__swsetup_r+0xd0>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	d10f      	bne.n	800c940 <__swsetup_r+0x3c>
 800c920:	686c      	ldr	r4, [r5, #4]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c928:	0719      	lsls	r1, r3, #28
 800c92a:	d42c      	bmi.n	800c986 <__swsetup_r+0x82>
 800c92c:	06dd      	lsls	r5, r3, #27
 800c92e:	d411      	bmi.n	800c954 <__swsetup_r+0x50>
 800c930:	2309      	movs	r3, #9
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c93e:	e03e      	b.n	800c9be <__swsetup_r+0xba>
 800c940:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <__swsetup_r+0xd4>)
 800c942:	429c      	cmp	r4, r3
 800c944:	d101      	bne.n	800c94a <__swsetup_r+0x46>
 800c946:	68ac      	ldr	r4, [r5, #8]
 800c948:	e7eb      	b.n	800c922 <__swsetup_r+0x1e>
 800c94a:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <__swsetup_r+0xd8>)
 800c94c:	429c      	cmp	r4, r3
 800c94e:	bf08      	it	eq
 800c950:	68ec      	ldreq	r4, [r5, #12]
 800c952:	e7e6      	b.n	800c922 <__swsetup_r+0x1e>
 800c954:	0758      	lsls	r0, r3, #29
 800c956:	d512      	bpl.n	800c97e <__swsetup_r+0x7a>
 800c958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c95a:	b141      	cbz	r1, 800c96e <__swsetup_r+0x6a>
 800c95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c960:	4299      	cmp	r1, r3
 800c962:	d002      	beq.n	800c96a <__swsetup_r+0x66>
 800c964:	4630      	mov	r0, r6
 800c966:	f7fd fe27 	bl	800a5b8 <_free_r>
 800c96a:	2300      	movs	r3, #0
 800c96c:	6363      	str	r3, [r4, #52]	; 0x34
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	2300      	movs	r3, #0
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	6923      	ldr	r3, [r4, #16]
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	f043 0308 	orr.w	r3, r3, #8
 800c984:	81a3      	strh	r3, [r4, #12]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	b94b      	cbnz	r3, 800c99e <__swsetup_r+0x9a>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c994:	d003      	beq.n	800c99e <__swsetup_r+0x9a>
 800c996:	4621      	mov	r1, r4
 800c998:	4630      	mov	r0, r6
 800c99a:	f001 fa77 	bl	800de8c <__smakebuf_r>
 800c99e:	89a0      	ldrh	r0, [r4, #12]
 800c9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a4:	f010 0301 	ands.w	r3, r0, #1
 800c9a8:	d00a      	beq.n	800c9c0 <__swsetup_r+0xbc>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	6963      	ldr	r3, [r4, #20]
 800c9b0:	425b      	negs	r3, r3
 800c9b2:	61a3      	str	r3, [r4, #24]
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b943      	cbnz	r3, 800c9ca <__swsetup_r+0xc6>
 800c9b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9bc:	d1ba      	bne.n	800c934 <__swsetup_r+0x30>
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	0781      	lsls	r1, r0, #30
 800c9c2:	bf58      	it	pl
 800c9c4:	6963      	ldrpl	r3, [r4, #20]
 800c9c6:	60a3      	str	r3, [r4, #8]
 800c9c8:	e7f4      	b.n	800c9b4 <__swsetup_r+0xb0>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e7f7      	b.n	800c9be <__swsetup_r+0xba>
 800c9ce:	bf00      	nop
 800c9d0:	2000002c 	.word	0x2000002c
 800c9d4:	0800fbb0 	.word	0x0800fbb0
 800c9d8:	0800fbd0 	.word	0x0800fbd0
 800c9dc:	0800fb90 	.word	0x0800fb90

0800c9e0 <__assert_func>:
 800c9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9e2:	4614      	mov	r4, r2
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <__assert_func+0x2c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	68d8      	ldr	r0, [r3, #12]
 800c9ee:	b14c      	cbz	r4, 800ca04 <__assert_func+0x24>
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <__assert_func+0x30>)
 800c9f2:	9100      	str	r1, [sp, #0]
 800c9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9f8:	4906      	ldr	r1, [pc, #24]	; (800ca14 <__assert_func+0x34>)
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	f7fd fd32 	bl	800a464 <fiprintf>
 800ca00:	f7fd fb78 	bl	800a0f4 <abort>
 800ca04:	4b04      	ldr	r3, [pc, #16]	; (800ca18 <__assert_func+0x38>)
 800ca06:	461c      	mov	r4, r3
 800ca08:	e7f3      	b.n	800c9f2 <__assert_func+0x12>
 800ca0a:	bf00      	nop
 800ca0c:	2000002c 	.word	0x2000002c
 800ca10:	0800fd04 	.word	0x0800fd04
 800ca14:	0800fd11 	.word	0x0800fd11
 800ca18:	0800fd3f 	.word	0x0800fd3f

0800ca1c <_close_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d06      	ldr	r5, [pc, #24]	; (800ca38 <_close_r+0x1c>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f7 f804 	bl	8003a34 <_close>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_close_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_close_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20000924 	.word	0x20000924

0800ca3c <quorem>:
 800ca3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	6903      	ldr	r3, [r0, #16]
 800ca42:	690c      	ldr	r4, [r1, #16]
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	4607      	mov	r7, r0
 800ca48:	f2c0 8081 	blt.w	800cb4e <quorem+0x112>
 800ca4c:	3c01      	subs	r4, #1
 800ca4e:	f101 0814 	add.w	r8, r1, #20
 800ca52:	f100 0514 	add.w	r5, r0, #20
 800ca56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca64:	3301      	adds	r3, #1
 800ca66:	429a      	cmp	r2, r3
 800ca68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca74:	d331      	bcc.n	800cada <quorem+0x9e>
 800ca76:	f04f 0e00 	mov.w	lr, #0
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	46ac      	mov	ip, r5
 800ca7e:	46f2      	mov	sl, lr
 800ca80:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca84:	b293      	uxth	r3, r2
 800ca86:	fb06 e303 	mla	r3, r6, r3, lr
 800ca8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	ebaa 0303 	sub.w	r3, sl, r3
 800ca94:	f8dc a000 	ldr.w	sl, [ip]
 800ca98:	0c12      	lsrs	r2, r2, #16
 800ca9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ca9e:	fb06 e202 	mla	r2, r6, r2, lr
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	9b00      	ldr	r3, [sp, #0]
 800caa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800caaa:	b292      	uxth	r2, r2
 800caac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cab4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cab8:	4581      	cmp	r9, r0
 800caba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cabe:	f84c 3b04 	str.w	r3, [ip], #4
 800cac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cac6:	d2db      	bcs.n	800ca80 <quorem+0x44>
 800cac8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cacc:	b92b      	cbnz	r3, 800cada <quorem+0x9e>
 800cace:	9b01      	ldr	r3, [sp, #4]
 800cad0:	3b04      	subs	r3, #4
 800cad2:	429d      	cmp	r5, r3
 800cad4:	461a      	mov	r2, r3
 800cad6:	d32e      	bcc.n	800cb36 <quorem+0xfa>
 800cad8:	613c      	str	r4, [r7, #16]
 800cada:	4638      	mov	r0, r7
 800cadc:	f001 fd00 	bl	800e4e0 <__mcmp>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	db24      	blt.n	800cb2e <quorem+0xf2>
 800cae4:	3601      	adds	r6, #1
 800cae6:	4628      	mov	r0, r5
 800cae8:	f04f 0c00 	mov.w	ip, #0
 800caec:	f858 2b04 	ldr.w	r2, [r8], #4
 800caf0:	f8d0 e000 	ldr.w	lr, [r0]
 800caf4:	b293      	uxth	r3, r2
 800caf6:	ebac 0303 	sub.w	r3, ip, r3
 800cafa:	0c12      	lsrs	r2, r2, #16
 800cafc:	fa13 f38e 	uxtah	r3, r3, lr
 800cb00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb0e:	45c1      	cmp	r9, r8
 800cb10:	f840 3b04 	str.w	r3, [r0], #4
 800cb14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb18:	d2e8      	bcs.n	800caec <quorem+0xb0>
 800cb1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb22:	b922      	cbnz	r2, 800cb2e <quorem+0xf2>
 800cb24:	3b04      	subs	r3, #4
 800cb26:	429d      	cmp	r5, r3
 800cb28:	461a      	mov	r2, r3
 800cb2a:	d30a      	bcc.n	800cb42 <quorem+0x106>
 800cb2c:	613c      	str	r4, [r7, #16]
 800cb2e:	4630      	mov	r0, r6
 800cb30:	b003      	add	sp, #12
 800cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb36:	6812      	ldr	r2, [r2, #0]
 800cb38:	3b04      	subs	r3, #4
 800cb3a:	2a00      	cmp	r2, #0
 800cb3c:	d1cc      	bne.n	800cad8 <quorem+0x9c>
 800cb3e:	3c01      	subs	r4, #1
 800cb40:	e7c7      	b.n	800cad2 <quorem+0x96>
 800cb42:	6812      	ldr	r2, [r2, #0]
 800cb44:	3b04      	subs	r3, #4
 800cb46:	2a00      	cmp	r2, #0
 800cb48:	d1f0      	bne.n	800cb2c <quorem+0xf0>
 800cb4a:	3c01      	subs	r4, #1
 800cb4c:	e7eb      	b.n	800cb26 <quorem+0xea>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e7ee      	b.n	800cb30 <quorem+0xf4>
 800cb52:	0000      	movs	r0, r0
 800cb54:	0000      	movs	r0, r0
	...

0800cb58 <_dtoa_r>:
 800cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	ed2d 8b04 	vpush	{d8-d9}
 800cb60:	ec57 6b10 	vmov	r6, r7, d0
 800cb64:	b093      	sub	sp, #76	; 0x4c
 800cb66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb6c:	9106      	str	r1, [sp, #24]
 800cb6e:	ee10 aa10 	vmov	sl, s0
 800cb72:	4604      	mov	r4, r0
 800cb74:	9209      	str	r2, [sp, #36]	; 0x24
 800cb76:	930c      	str	r3, [sp, #48]	; 0x30
 800cb78:	46bb      	mov	fp, r7
 800cb7a:	b975      	cbnz	r5, 800cb9a <_dtoa_r+0x42>
 800cb7c:	2010      	movs	r0, #16
 800cb7e:	f7fd fccb 	bl	800a518 <malloc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	6260      	str	r0, [r4, #36]	; 0x24
 800cb86:	b920      	cbnz	r0, 800cb92 <_dtoa_r+0x3a>
 800cb88:	4ba7      	ldr	r3, [pc, #668]	; (800ce28 <_dtoa_r+0x2d0>)
 800cb8a:	21ea      	movs	r1, #234	; 0xea
 800cb8c:	48a7      	ldr	r0, [pc, #668]	; (800ce2c <_dtoa_r+0x2d4>)
 800cb8e:	f7ff ff27 	bl	800c9e0 <__assert_func>
 800cb92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb96:	6005      	str	r5, [r0, #0]
 800cb98:	60c5      	str	r5, [r0, #12]
 800cb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb9c:	6819      	ldr	r1, [r3, #0]
 800cb9e:	b151      	cbz	r1, 800cbb6 <_dtoa_r+0x5e>
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	604a      	str	r2, [r1, #4]
 800cba4:	2301      	movs	r3, #1
 800cba6:	4093      	lsls	r3, r2
 800cba8:	608b      	str	r3, [r1, #8]
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f001 fa0c 	bl	800dfc8 <_Bfree>
 800cbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	1e3b      	subs	r3, r7, #0
 800cbb8:	bfaa      	itet	ge
 800cbba:	2300      	movge	r3, #0
 800cbbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cbc0:	f8c8 3000 	strge.w	r3, [r8]
 800cbc4:	4b9a      	ldr	r3, [pc, #616]	; (800ce30 <_dtoa_r+0x2d8>)
 800cbc6:	bfbc      	itt	lt
 800cbc8:	2201      	movlt	r2, #1
 800cbca:	f8c8 2000 	strlt.w	r2, [r8]
 800cbce:	ea33 030b 	bics.w	r3, r3, fp
 800cbd2:	d11b      	bne.n	800cc0c <_dtoa_r+0xb4>
 800cbd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbd6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbe0:	4333      	orrs	r3, r6
 800cbe2:	f000 8592 	beq.w	800d70a <_dtoa_r+0xbb2>
 800cbe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbe8:	b963      	cbnz	r3, 800cc04 <_dtoa_r+0xac>
 800cbea:	4b92      	ldr	r3, [pc, #584]	; (800ce34 <_dtoa_r+0x2dc>)
 800cbec:	e022      	b.n	800cc34 <_dtoa_r+0xdc>
 800cbee:	4b92      	ldr	r3, [pc, #584]	; (800ce38 <_dtoa_r+0x2e0>)
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	9801      	ldr	r0, [sp, #4]
 800cbfa:	b013      	add	sp, #76	; 0x4c
 800cbfc:	ecbd 8b04 	vpop	{d8-d9}
 800cc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	4b8b      	ldr	r3, [pc, #556]	; (800ce34 <_dtoa_r+0x2dc>)
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	3303      	adds	r3, #3
 800cc0a:	e7f3      	b.n	800cbf4 <_dtoa_r+0x9c>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	4650      	mov	r0, sl
 800cc12:	4659      	mov	r1, fp
 800cc14:	f7f3 ff8a 	bl	8000b2c <__aeabi_dcmpeq>
 800cc18:	ec4b ab19 	vmov	d9, sl, fp
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	b158      	cbz	r0, 800cc38 <_dtoa_r+0xe0>
 800cc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc22:	2301      	movs	r3, #1
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 856b 	beq.w	800d704 <_dtoa_r+0xbac>
 800cc2e:	4883      	ldr	r0, [pc, #524]	; (800ce3c <_dtoa_r+0x2e4>)
 800cc30:	6018      	str	r0, [r3, #0]
 800cc32:	1e43      	subs	r3, r0, #1
 800cc34:	9301      	str	r3, [sp, #4]
 800cc36:	e7df      	b.n	800cbf8 <_dtoa_r+0xa0>
 800cc38:	ec4b ab10 	vmov	d0, sl, fp
 800cc3c:	aa10      	add	r2, sp, #64	; 0x40
 800cc3e:	a911      	add	r1, sp, #68	; 0x44
 800cc40:	4620      	mov	r0, r4
 800cc42:	f001 fd6f 	bl	800e724 <__d2b>
 800cc46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc4a:	ee08 0a10 	vmov	s16, r0
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	f000 8084 	beq.w	800cd5c <_dtoa_r+0x204>
 800cc54:	ee19 3a90 	vmov	r3, s19
 800cc58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc60:	4656      	mov	r6, sl
 800cc62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc6e:	4b74      	ldr	r3, [pc, #464]	; (800ce40 <_dtoa_r+0x2e8>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 fb39 	bl	80002ec <__aeabi_dsub>
 800cc7a:	a365      	add	r3, pc, #404	; (adr r3, 800ce10 <_dtoa_r+0x2b8>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7f3 fcec 	bl	800065c <__aeabi_dmul>
 800cc84:	a364      	add	r3, pc, #400	; (adr r3, 800ce18 <_dtoa_r+0x2c0>)
 800cc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8a:	f7f3 fb31 	bl	80002f0 <__adddf3>
 800cc8e:	4606      	mov	r6, r0
 800cc90:	4628      	mov	r0, r5
 800cc92:	460f      	mov	r7, r1
 800cc94:	f7f3 fc78 	bl	8000588 <__aeabi_i2d>
 800cc98:	a361      	add	r3, pc, #388	; (adr r3, 800ce20 <_dtoa_r+0x2c8>)
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	f7f3 fcdd 	bl	800065c <__aeabi_dmul>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 fb21 	bl	80002f0 <__adddf3>
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	f7f3 ff83 	bl	8000bbc <__aeabi_d2iz>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	9000      	str	r0, [sp, #0]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 ff3e 	bl	8000b40 <__aeabi_dcmplt>
 800ccc4:	b150      	cbz	r0, 800ccdc <_dtoa_r+0x184>
 800ccc6:	9800      	ldr	r0, [sp, #0]
 800ccc8:	f7f3 fc5e 	bl	8000588 <__aeabi_i2d>
 800cccc:	4632      	mov	r2, r6
 800ccce:	463b      	mov	r3, r7
 800ccd0:	f7f3 ff2c 	bl	8000b2c <__aeabi_dcmpeq>
 800ccd4:	b910      	cbnz	r0, 800ccdc <_dtoa_r+0x184>
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	9b00      	ldr	r3, [sp, #0]
 800ccde:	2b16      	cmp	r3, #22
 800cce0:	d85a      	bhi.n	800cd98 <_dtoa_r+0x240>
 800cce2:	9a00      	ldr	r2, [sp, #0]
 800cce4:	4b57      	ldr	r3, [pc, #348]	; (800ce44 <_dtoa_r+0x2ec>)
 800cce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	ec51 0b19 	vmov	r0, r1, d9
 800ccf2:	f7f3 ff25 	bl	8000b40 <__aeabi_dcmplt>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d050      	beq.n	800cd9c <_dtoa_r+0x244>
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	2300      	movs	r3, #0
 800cd02:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd06:	1b5d      	subs	r5, r3, r5
 800cd08:	1e6b      	subs	r3, r5, #1
 800cd0a:	9305      	str	r3, [sp, #20]
 800cd0c:	bf45      	ittet	mi
 800cd0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd12:	9304      	strmi	r3, [sp, #16]
 800cd14:	2300      	movpl	r3, #0
 800cd16:	2300      	movmi	r3, #0
 800cd18:	bf4c      	ite	mi
 800cd1a:	9305      	strmi	r3, [sp, #20]
 800cd1c:	9304      	strpl	r3, [sp, #16]
 800cd1e:	9b00      	ldr	r3, [sp, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	db3d      	blt.n	800cda0 <_dtoa_r+0x248>
 800cd24:	9b05      	ldr	r3, [sp, #20]
 800cd26:	9a00      	ldr	r2, [sp, #0]
 800cd28:	920a      	str	r2, [sp, #40]	; 0x28
 800cd2a:	4413      	add	r3, r2
 800cd2c:	9305      	str	r3, [sp, #20]
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9307      	str	r3, [sp, #28]
 800cd32:	9b06      	ldr	r3, [sp, #24]
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	f200 8089 	bhi.w	800ce4c <_dtoa_r+0x2f4>
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	bfc4      	itt	gt
 800cd3e:	3b04      	subgt	r3, #4
 800cd40:	9306      	strgt	r3, [sp, #24]
 800cd42:	9b06      	ldr	r3, [sp, #24]
 800cd44:	f1a3 0302 	sub.w	r3, r3, #2
 800cd48:	bfcc      	ite	gt
 800cd4a:	2500      	movgt	r5, #0
 800cd4c:	2501      	movle	r5, #1
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	f200 8087 	bhi.w	800ce62 <_dtoa_r+0x30a>
 800cd54:	e8df f003 	tbb	[pc, r3]
 800cd58:	59383a2d 	.word	0x59383a2d
 800cd5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd60:	441d      	add	r5, r3
 800cd62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd66:	2b20      	cmp	r3, #32
 800cd68:	bfc1      	itttt	gt
 800cd6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd72:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd7a:	bfda      	itte	le
 800cd7c:	f1c3 0320 	rsble	r3, r3, #32
 800cd80:	fa06 f003 	lslle.w	r0, r6, r3
 800cd84:	4318      	orrgt	r0, r3
 800cd86:	f7f3 fbef 	bl	8000568 <__aeabi_ui2d>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd92:	3d01      	subs	r5, #1
 800cd94:	930e      	str	r3, [sp, #56]	; 0x38
 800cd96:	e76a      	b.n	800cc6e <_dtoa_r+0x116>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e7b2      	b.n	800cd02 <_dtoa_r+0x1aa>
 800cd9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd9e:	e7b1      	b.n	800cd04 <_dtoa_r+0x1ac>
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	9a00      	ldr	r2, [sp, #0]
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	4253      	negs	r3, r2
 800cdaa:	9307      	str	r3, [sp, #28]
 800cdac:	2300      	movs	r3, #0
 800cdae:	930a      	str	r3, [sp, #40]	; 0x28
 800cdb0:	e7bf      	b.n	800cd32 <_dtoa_r+0x1da>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	9308      	str	r3, [sp, #32]
 800cdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dc55      	bgt.n	800ce68 <_dtoa_r+0x310>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	9209      	str	r2, [sp, #36]	; 0x24
 800cdc6:	e00c      	b.n	800cde2 <_dtoa_r+0x28a>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e7f3      	b.n	800cdb4 <_dtoa_r+0x25c>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd0:	9308      	str	r3, [sp, #32]
 800cdd2:	9b00      	ldr	r3, [sp, #0]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	9302      	str	r3, [sp, #8]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	bfb8      	it	lt
 800cde0:	2301      	movlt	r3, #1
 800cde2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cde4:	2200      	movs	r2, #0
 800cde6:	6042      	str	r2, [r0, #4]
 800cde8:	2204      	movs	r2, #4
 800cdea:	f102 0614 	add.w	r6, r2, #20
 800cdee:	429e      	cmp	r6, r3
 800cdf0:	6841      	ldr	r1, [r0, #4]
 800cdf2:	d93d      	bls.n	800ce70 <_dtoa_r+0x318>
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f001 f8a7 	bl	800df48 <_Balloc>
 800cdfa:	9001      	str	r0, [sp, #4]
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d13b      	bne.n	800ce78 <_dtoa_r+0x320>
 800ce00:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <_dtoa_r+0x2f0>)
 800ce02:	4602      	mov	r2, r0
 800ce04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce08:	e6c0      	b.n	800cb8c <_dtoa_r+0x34>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e7df      	b.n	800cdce <_dtoa_r+0x276>
 800ce0e:	bf00      	nop
 800ce10:	636f4361 	.word	0x636f4361
 800ce14:	3fd287a7 	.word	0x3fd287a7
 800ce18:	8b60c8b3 	.word	0x8b60c8b3
 800ce1c:	3fc68a28 	.word	0x3fc68a28
 800ce20:	509f79fb 	.word	0x509f79fb
 800ce24:	3fd34413 	.word	0x3fd34413
 800ce28:	0800fc90 	.word	0x0800fc90
 800ce2c:	0800fe4e 	.word	0x0800fe4e
 800ce30:	7ff00000 	.word	0x7ff00000
 800ce34:	0800fe4a 	.word	0x0800fe4a
 800ce38:	0800fe41 	.word	0x0800fe41
 800ce3c:	0800fc16 	.word	0x0800fc16
 800ce40:	3ff80000 	.word	0x3ff80000
 800ce44:	0800ffb8 	.word	0x0800ffb8
 800ce48:	0800fea9 	.word	0x0800fea9
 800ce4c:	2501      	movs	r5, #1
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9306      	str	r3, [sp, #24]
 800ce52:	9508      	str	r5, [sp, #32]
 800ce54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2312      	movs	r3, #18
 800ce60:	e7b0      	b.n	800cdc4 <_dtoa_r+0x26c>
 800ce62:	2301      	movs	r3, #1
 800ce64:	9308      	str	r3, [sp, #32]
 800ce66:	e7f5      	b.n	800ce54 <_dtoa_r+0x2fc>
 800ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce6e:	e7b8      	b.n	800cde2 <_dtoa_r+0x28a>
 800ce70:	3101      	adds	r1, #1
 800ce72:	6041      	str	r1, [r0, #4]
 800ce74:	0052      	lsls	r2, r2, #1
 800ce76:	e7b8      	b.n	800cdea <_dtoa_r+0x292>
 800ce78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce7a:	9a01      	ldr	r2, [sp, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	2b0e      	cmp	r3, #14
 800ce82:	f200 809d 	bhi.w	800cfc0 <_dtoa_r+0x468>
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	f000 809a 	beq.w	800cfc0 <_dtoa_r+0x468>
 800ce8c:	9b00      	ldr	r3, [sp, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	dd32      	ble.n	800cef8 <_dtoa_r+0x3a0>
 800ce92:	4ab7      	ldr	r2, [pc, #732]	; (800d170 <_dtoa_r+0x618>)
 800ce94:	f003 030f 	and.w	r3, r3, #15
 800ce98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cea0:	9b00      	ldr	r3, [sp, #0]
 800cea2:	05d8      	lsls	r0, r3, #23
 800cea4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cea8:	d516      	bpl.n	800ced8 <_dtoa_r+0x380>
 800ceaa:	4bb2      	ldr	r3, [pc, #712]	; (800d174 <_dtoa_r+0x61c>)
 800ceac:	ec51 0b19 	vmov	r0, r1, d9
 800ceb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ceb4:	f7f3 fcfc 	bl	80008b0 <__aeabi_ddiv>
 800ceb8:	f007 070f 	and.w	r7, r7, #15
 800cebc:	4682      	mov	sl, r0
 800cebe:	468b      	mov	fp, r1
 800cec0:	2503      	movs	r5, #3
 800cec2:	4eac      	ldr	r6, [pc, #688]	; (800d174 <_dtoa_r+0x61c>)
 800cec4:	b957      	cbnz	r7, 800cedc <_dtoa_r+0x384>
 800cec6:	4642      	mov	r2, r8
 800cec8:	464b      	mov	r3, r9
 800ceca:	4650      	mov	r0, sl
 800cecc:	4659      	mov	r1, fp
 800cece:	f7f3 fcef 	bl	80008b0 <__aeabi_ddiv>
 800ced2:	4682      	mov	sl, r0
 800ced4:	468b      	mov	fp, r1
 800ced6:	e028      	b.n	800cf2a <_dtoa_r+0x3d2>
 800ced8:	2502      	movs	r5, #2
 800ceda:	e7f2      	b.n	800cec2 <_dtoa_r+0x36a>
 800cedc:	07f9      	lsls	r1, r7, #31
 800cede:	d508      	bpl.n	800cef2 <_dtoa_r+0x39a>
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cee8:	f7f3 fbb8 	bl	800065c <__aeabi_dmul>
 800ceec:	3501      	adds	r5, #1
 800ceee:	4680      	mov	r8, r0
 800cef0:	4689      	mov	r9, r1
 800cef2:	107f      	asrs	r7, r7, #1
 800cef4:	3608      	adds	r6, #8
 800cef6:	e7e5      	b.n	800cec4 <_dtoa_r+0x36c>
 800cef8:	f000 809b 	beq.w	800d032 <_dtoa_r+0x4da>
 800cefc:	9b00      	ldr	r3, [sp, #0]
 800cefe:	4f9d      	ldr	r7, [pc, #628]	; (800d174 <_dtoa_r+0x61c>)
 800cf00:	425e      	negs	r6, r3
 800cf02:	4b9b      	ldr	r3, [pc, #620]	; (800d170 <_dtoa_r+0x618>)
 800cf04:	f006 020f 	and.w	r2, r6, #15
 800cf08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	ec51 0b19 	vmov	r0, r1, d9
 800cf14:	f7f3 fba2 	bl	800065c <__aeabi_dmul>
 800cf18:	1136      	asrs	r6, r6, #4
 800cf1a:	4682      	mov	sl, r0
 800cf1c:	468b      	mov	fp, r1
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2502      	movs	r5, #2
 800cf22:	2e00      	cmp	r6, #0
 800cf24:	d17a      	bne.n	800d01c <_dtoa_r+0x4c4>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1d3      	bne.n	800ced2 <_dtoa_r+0x37a>
 800cf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 8082 	beq.w	800d036 <_dtoa_r+0x4de>
 800cf32:	4b91      	ldr	r3, [pc, #580]	; (800d178 <_dtoa_r+0x620>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	4650      	mov	r0, sl
 800cf38:	4659      	mov	r1, fp
 800cf3a:	f7f3 fe01 	bl	8000b40 <__aeabi_dcmplt>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d079      	beq.n	800d036 <_dtoa_r+0x4de>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d076      	beq.n	800d036 <_dtoa_r+0x4de>
 800cf48:	9b02      	ldr	r3, [sp, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dd36      	ble.n	800cfbc <_dtoa_r+0x464>
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	4650      	mov	r0, sl
 800cf52:	4659      	mov	r1, fp
 800cf54:	1e5f      	subs	r7, r3, #1
 800cf56:	2200      	movs	r2, #0
 800cf58:	4b88      	ldr	r3, [pc, #544]	; (800d17c <_dtoa_r+0x624>)
 800cf5a:	f7f3 fb7f 	bl	800065c <__aeabi_dmul>
 800cf5e:	9e02      	ldr	r6, [sp, #8]
 800cf60:	4682      	mov	sl, r0
 800cf62:	468b      	mov	fp, r1
 800cf64:	3501      	adds	r5, #1
 800cf66:	4628      	mov	r0, r5
 800cf68:	f7f3 fb0e 	bl	8000588 <__aeabi_i2d>
 800cf6c:	4652      	mov	r2, sl
 800cf6e:	465b      	mov	r3, fp
 800cf70:	f7f3 fb74 	bl	800065c <__aeabi_dmul>
 800cf74:	4b82      	ldr	r3, [pc, #520]	; (800d180 <_dtoa_r+0x628>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	f7f3 f9ba 	bl	80002f0 <__adddf3>
 800cf7c:	46d0      	mov	r8, sl
 800cf7e:	46d9      	mov	r9, fp
 800cf80:	4682      	mov	sl, r0
 800cf82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	d158      	bne.n	800d03c <_dtoa_r+0x4e4>
 800cf8a:	4b7e      	ldr	r3, [pc, #504]	; (800d184 <_dtoa_r+0x62c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 f9ab 	bl	80002ec <__aeabi_dsub>
 800cf96:	4652      	mov	r2, sl
 800cf98:	465b      	mov	r3, fp
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	4689      	mov	r9, r1
 800cf9e:	f7f3 fded 	bl	8000b7c <__aeabi_dcmpgt>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f040 8295 	bne.w	800d4d2 <_dtoa_r+0x97a>
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fdc5 	bl	8000b40 <__aeabi_dcmplt>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f040 8289 	bne.w	800d4ce <_dtoa_r+0x976>
 800cfbc:	ec5b ab19 	vmov	sl, fp, d9
 800cfc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f2c0 8148 	blt.w	800d258 <_dtoa_r+0x700>
 800cfc8:	9a00      	ldr	r2, [sp, #0]
 800cfca:	2a0e      	cmp	r2, #14
 800cfcc:	f300 8144 	bgt.w	800d258 <_dtoa_r+0x700>
 800cfd0:	4b67      	ldr	r3, [pc, #412]	; (800d170 <_dtoa_r+0x618>)
 800cfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f280 80d5 	bge.w	800d18c <_dtoa_r+0x634>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f300 80d1 	bgt.w	800d18c <_dtoa_r+0x634>
 800cfea:	f040 826f 	bne.w	800d4cc <_dtoa_r+0x974>
 800cfee:	4b65      	ldr	r3, [pc, #404]	; (800d184 <_dtoa_r+0x62c>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	4640      	mov	r0, r8
 800cff4:	4649      	mov	r1, r9
 800cff6:	f7f3 fb31 	bl	800065c <__aeabi_dmul>
 800cffa:	4652      	mov	r2, sl
 800cffc:	465b      	mov	r3, fp
 800cffe:	f7f3 fdb3 	bl	8000b68 <__aeabi_dcmpge>
 800d002:	9e03      	ldr	r6, [sp, #12]
 800d004:	4637      	mov	r7, r6
 800d006:	2800      	cmp	r0, #0
 800d008:	f040 8245 	bne.w	800d496 <_dtoa_r+0x93e>
 800d00c:	9d01      	ldr	r5, [sp, #4]
 800d00e:	2331      	movs	r3, #49	; 0x31
 800d010:	f805 3b01 	strb.w	r3, [r5], #1
 800d014:	9b00      	ldr	r3, [sp, #0]
 800d016:	3301      	adds	r3, #1
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	e240      	b.n	800d49e <_dtoa_r+0x946>
 800d01c:	07f2      	lsls	r2, r6, #31
 800d01e:	d505      	bpl.n	800d02c <_dtoa_r+0x4d4>
 800d020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d024:	f7f3 fb1a 	bl	800065c <__aeabi_dmul>
 800d028:	3501      	adds	r5, #1
 800d02a:	2301      	movs	r3, #1
 800d02c:	1076      	asrs	r6, r6, #1
 800d02e:	3708      	adds	r7, #8
 800d030:	e777      	b.n	800cf22 <_dtoa_r+0x3ca>
 800d032:	2502      	movs	r5, #2
 800d034:	e779      	b.n	800cf2a <_dtoa_r+0x3d2>
 800d036:	9f00      	ldr	r7, [sp, #0]
 800d038:	9e03      	ldr	r6, [sp, #12]
 800d03a:	e794      	b.n	800cf66 <_dtoa_r+0x40e>
 800d03c:	9901      	ldr	r1, [sp, #4]
 800d03e:	4b4c      	ldr	r3, [pc, #304]	; (800d170 <_dtoa_r+0x618>)
 800d040:	4431      	add	r1, r6
 800d042:	910d      	str	r1, [sp, #52]	; 0x34
 800d044:	9908      	ldr	r1, [sp, #32]
 800d046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d04a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d04e:	2900      	cmp	r1, #0
 800d050:	d043      	beq.n	800d0da <_dtoa_r+0x582>
 800d052:	494d      	ldr	r1, [pc, #308]	; (800d188 <_dtoa_r+0x630>)
 800d054:	2000      	movs	r0, #0
 800d056:	f7f3 fc2b 	bl	80008b0 <__aeabi_ddiv>
 800d05a:	4652      	mov	r2, sl
 800d05c:	465b      	mov	r3, fp
 800d05e:	f7f3 f945 	bl	80002ec <__aeabi_dsub>
 800d062:	9d01      	ldr	r5, [sp, #4]
 800d064:	4682      	mov	sl, r0
 800d066:	468b      	mov	fp, r1
 800d068:	4649      	mov	r1, r9
 800d06a:	4640      	mov	r0, r8
 800d06c:	f7f3 fda6 	bl	8000bbc <__aeabi_d2iz>
 800d070:	4606      	mov	r6, r0
 800d072:	f7f3 fa89 	bl	8000588 <__aeabi_i2d>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	4640      	mov	r0, r8
 800d07c:	4649      	mov	r1, r9
 800d07e:	f7f3 f935 	bl	80002ec <__aeabi_dsub>
 800d082:	3630      	adds	r6, #48	; 0x30
 800d084:	f805 6b01 	strb.w	r6, [r5], #1
 800d088:	4652      	mov	r2, sl
 800d08a:	465b      	mov	r3, fp
 800d08c:	4680      	mov	r8, r0
 800d08e:	4689      	mov	r9, r1
 800d090:	f7f3 fd56 	bl	8000b40 <__aeabi_dcmplt>
 800d094:	2800      	cmp	r0, #0
 800d096:	d163      	bne.n	800d160 <_dtoa_r+0x608>
 800d098:	4642      	mov	r2, r8
 800d09a:	464b      	mov	r3, r9
 800d09c:	4936      	ldr	r1, [pc, #216]	; (800d178 <_dtoa_r+0x620>)
 800d09e:	2000      	movs	r0, #0
 800d0a0:	f7f3 f924 	bl	80002ec <__aeabi_dsub>
 800d0a4:	4652      	mov	r2, sl
 800d0a6:	465b      	mov	r3, fp
 800d0a8:	f7f3 fd4a 	bl	8000b40 <__aeabi_dcmplt>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	f040 80b5 	bne.w	800d21c <_dtoa_r+0x6c4>
 800d0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0b4:	429d      	cmp	r5, r3
 800d0b6:	d081      	beq.n	800cfbc <_dtoa_r+0x464>
 800d0b8:	4b30      	ldr	r3, [pc, #192]	; (800d17c <_dtoa_r+0x624>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	4650      	mov	r0, sl
 800d0be:	4659      	mov	r1, fp
 800d0c0:	f7f3 facc 	bl	800065c <__aeabi_dmul>
 800d0c4:	4b2d      	ldr	r3, [pc, #180]	; (800d17c <_dtoa_r+0x624>)
 800d0c6:	4682      	mov	sl, r0
 800d0c8:	468b      	mov	fp, r1
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	4649      	mov	r1, r9
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f7f3 fac4 	bl	800065c <__aeabi_dmul>
 800d0d4:	4680      	mov	r8, r0
 800d0d6:	4689      	mov	r9, r1
 800d0d8:	e7c6      	b.n	800d068 <_dtoa_r+0x510>
 800d0da:	4650      	mov	r0, sl
 800d0dc:	4659      	mov	r1, fp
 800d0de:	f7f3 fabd 	bl	800065c <__aeabi_dmul>
 800d0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e4:	9d01      	ldr	r5, [sp, #4]
 800d0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0e8:	4682      	mov	sl, r0
 800d0ea:	468b      	mov	fp, r1
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	f7f3 fd64 	bl	8000bbc <__aeabi_d2iz>
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	f7f3 fa47 	bl	8000588 <__aeabi_i2d>
 800d0fa:	3630      	adds	r6, #48	; 0x30
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	f7f3 f8f2 	bl	80002ec <__aeabi_dsub>
 800d108:	f805 6b01 	strb.w	r6, [r5], #1
 800d10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d10e:	429d      	cmp	r5, r3
 800d110:	4680      	mov	r8, r0
 800d112:	4689      	mov	r9, r1
 800d114:	f04f 0200 	mov.w	r2, #0
 800d118:	d124      	bne.n	800d164 <_dtoa_r+0x60c>
 800d11a:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <_dtoa_r+0x630>)
 800d11c:	4650      	mov	r0, sl
 800d11e:	4659      	mov	r1, fp
 800d120:	f7f3 f8e6 	bl	80002f0 <__adddf3>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4640      	mov	r0, r8
 800d12a:	4649      	mov	r1, r9
 800d12c:	f7f3 fd26 	bl	8000b7c <__aeabi_dcmpgt>
 800d130:	2800      	cmp	r0, #0
 800d132:	d173      	bne.n	800d21c <_dtoa_r+0x6c4>
 800d134:	4652      	mov	r2, sl
 800d136:	465b      	mov	r3, fp
 800d138:	4913      	ldr	r1, [pc, #76]	; (800d188 <_dtoa_r+0x630>)
 800d13a:	2000      	movs	r0, #0
 800d13c:	f7f3 f8d6 	bl	80002ec <__aeabi_dsub>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	4640      	mov	r0, r8
 800d146:	4649      	mov	r1, r9
 800d148:	f7f3 fcfa 	bl	8000b40 <__aeabi_dcmplt>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	f43f af35 	beq.w	800cfbc <_dtoa_r+0x464>
 800d152:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d154:	1e6b      	subs	r3, r5, #1
 800d156:	930f      	str	r3, [sp, #60]	; 0x3c
 800d158:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d15c:	2b30      	cmp	r3, #48	; 0x30
 800d15e:	d0f8      	beq.n	800d152 <_dtoa_r+0x5fa>
 800d160:	9700      	str	r7, [sp, #0]
 800d162:	e049      	b.n	800d1f8 <_dtoa_r+0x6a0>
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <_dtoa_r+0x624>)
 800d166:	f7f3 fa79 	bl	800065c <__aeabi_dmul>
 800d16a:	4680      	mov	r8, r0
 800d16c:	4689      	mov	r9, r1
 800d16e:	e7bd      	b.n	800d0ec <_dtoa_r+0x594>
 800d170:	0800ffb8 	.word	0x0800ffb8
 800d174:	0800ff90 	.word	0x0800ff90
 800d178:	3ff00000 	.word	0x3ff00000
 800d17c:	40240000 	.word	0x40240000
 800d180:	401c0000 	.word	0x401c0000
 800d184:	40140000 	.word	0x40140000
 800d188:	3fe00000 	.word	0x3fe00000
 800d18c:	9d01      	ldr	r5, [sp, #4]
 800d18e:	4656      	mov	r6, sl
 800d190:	465f      	mov	r7, fp
 800d192:	4642      	mov	r2, r8
 800d194:	464b      	mov	r3, r9
 800d196:	4630      	mov	r0, r6
 800d198:	4639      	mov	r1, r7
 800d19a:	f7f3 fb89 	bl	80008b0 <__aeabi_ddiv>
 800d19e:	f7f3 fd0d 	bl	8000bbc <__aeabi_d2iz>
 800d1a2:	4682      	mov	sl, r0
 800d1a4:	f7f3 f9f0 	bl	8000588 <__aeabi_i2d>
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	464b      	mov	r3, r9
 800d1ac:	f7f3 fa56 	bl	800065c <__aeabi_dmul>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d1bc:	f7f3 f896 	bl	80002ec <__aeabi_dsub>
 800d1c0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1c4:	9e01      	ldr	r6, [sp, #4]
 800d1c6:	9f03      	ldr	r7, [sp, #12]
 800d1c8:	1bae      	subs	r6, r5, r6
 800d1ca:	42b7      	cmp	r7, r6
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	d135      	bne.n	800d23e <_dtoa_r+0x6e6>
 800d1d2:	f7f3 f88d 	bl	80002f0 <__adddf3>
 800d1d6:	4642      	mov	r2, r8
 800d1d8:	464b      	mov	r3, r9
 800d1da:	4606      	mov	r6, r0
 800d1dc:	460f      	mov	r7, r1
 800d1de:	f7f3 fccd 	bl	8000b7c <__aeabi_dcmpgt>
 800d1e2:	b9d0      	cbnz	r0, 800d21a <_dtoa_r+0x6c2>
 800d1e4:	4642      	mov	r2, r8
 800d1e6:	464b      	mov	r3, r9
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 fc9e 	bl	8000b2c <__aeabi_dcmpeq>
 800d1f0:	b110      	cbz	r0, 800d1f8 <_dtoa_r+0x6a0>
 800d1f2:	f01a 0f01 	tst.w	sl, #1
 800d1f6:	d110      	bne.n	800d21a <_dtoa_r+0x6c2>
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	ee18 1a10 	vmov	r1, s16
 800d1fe:	f000 fee3 	bl	800dfc8 <_Bfree>
 800d202:	2300      	movs	r3, #0
 800d204:	9800      	ldr	r0, [sp, #0]
 800d206:	702b      	strb	r3, [r5, #0]
 800d208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d20a:	3001      	adds	r0, #1
 800d20c:	6018      	str	r0, [r3, #0]
 800d20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d210:	2b00      	cmp	r3, #0
 800d212:	f43f acf1 	beq.w	800cbf8 <_dtoa_r+0xa0>
 800d216:	601d      	str	r5, [r3, #0]
 800d218:	e4ee      	b.n	800cbf8 <_dtoa_r+0xa0>
 800d21a:	9f00      	ldr	r7, [sp, #0]
 800d21c:	462b      	mov	r3, r5
 800d21e:	461d      	mov	r5, r3
 800d220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d224:	2a39      	cmp	r2, #57	; 0x39
 800d226:	d106      	bne.n	800d236 <_dtoa_r+0x6de>
 800d228:	9a01      	ldr	r2, [sp, #4]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d1f7      	bne.n	800d21e <_dtoa_r+0x6c6>
 800d22e:	9901      	ldr	r1, [sp, #4]
 800d230:	2230      	movs	r2, #48	; 0x30
 800d232:	3701      	adds	r7, #1
 800d234:	700a      	strb	r2, [r1, #0]
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	3201      	adds	r2, #1
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	e790      	b.n	800d160 <_dtoa_r+0x608>
 800d23e:	4ba6      	ldr	r3, [pc, #664]	; (800d4d8 <_dtoa_r+0x980>)
 800d240:	2200      	movs	r2, #0
 800d242:	f7f3 fa0b 	bl	800065c <__aeabi_dmul>
 800d246:	2200      	movs	r2, #0
 800d248:	2300      	movs	r3, #0
 800d24a:	4606      	mov	r6, r0
 800d24c:	460f      	mov	r7, r1
 800d24e:	f7f3 fc6d 	bl	8000b2c <__aeabi_dcmpeq>
 800d252:	2800      	cmp	r0, #0
 800d254:	d09d      	beq.n	800d192 <_dtoa_r+0x63a>
 800d256:	e7cf      	b.n	800d1f8 <_dtoa_r+0x6a0>
 800d258:	9a08      	ldr	r2, [sp, #32]
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	f000 80d7 	beq.w	800d40e <_dtoa_r+0x8b6>
 800d260:	9a06      	ldr	r2, [sp, #24]
 800d262:	2a01      	cmp	r2, #1
 800d264:	f300 80ba 	bgt.w	800d3dc <_dtoa_r+0x884>
 800d268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	f000 80b2 	beq.w	800d3d4 <_dtoa_r+0x87c>
 800d270:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d274:	9e07      	ldr	r6, [sp, #28]
 800d276:	9d04      	ldr	r5, [sp, #16]
 800d278:	9a04      	ldr	r2, [sp, #16]
 800d27a:	441a      	add	r2, r3
 800d27c:	9204      	str	r2, [sp, #16]
 800d27e:	9a05      	ldr	r2, [sp, #20]
 800d280:	2101      	movs	r1, #1
 800d282:	441a      	add	r2, r3
 800d284:	4620      	mov	r0, r4
 800d286:	9205      	str	r2, [sp, #20]
 800d288:	f000 ffa0 	bl	800e1cc <__i2b>
 800d28c:	4607      	mov	r7, r0
 800d28e:	2d00      	cmp	r5, #0
 800d290:	dd0c      	ble.n	800d2ac <_dtoa_r+0x754>
 800d292:	9b05      	ldr	r3, [sp, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	dd09      	ble.n	800d2ac <_dtoa_r+0x754>
 800d298:	42ab      	cmp	r3, r5
 800d29a:	9a04      	ldr	r2, [sp, #16]
 800d29c:	bfa8      	it	ge
 800d29e:	462b      	movge	r3, r5
 800d2a0:	1ad2      	subs	r2, r2, r3
 800d2a2:	9204      	str	r2, [sp, #16]
 800d2a4:	9a05      	ldr	r2, [sp, #20]
 800d2a6:	1aed      	subs	r5, r5, r3
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	9b07      	ldr	r3, [sp, #28]
 800d2ae:	b31b      	cbz	r3, 800d2f8 <_dtoa_r+0x7a0>
 800d2b0:	9b08      	ldr	r3, [sp, #32]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 80af 	beq.w	800d416 <_dtoa_r+0x8be>
 800d2b8:	2e00      	cmp	r6, #0
 800d2ba:	dd13      	ble.n	800d2e4 <_dtoa_r+0x78c>
 800d2bc:	4639      	mov	r1, r7
 800d2be:	4632      	mov	r2, r6
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f001 f843 	bl	800e34c <__pow5mult>
 800d2c6:	ee18 2a10 	vmov	r2, s16
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 ff92 	bl	800e1f8 <__multiply>
 800d2d4:	ee18 1a10 	vmov	r1, s16
 800d2d8:	4680      	mov	r8, r0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fe74 	bl	800dfc8 <_Bfree>
 800d2e0:	ee08 8a10 	vmov	s16, r8
 800d2e4:	9b07      	ldr	r3, [sp, #28]
 800d2e6:	1b9a      	subs	r2, r3, r6
 800d2e8:	d006      	beq.n	800d2f8 <_dtoa_r+0x7a0>
 800d2ea:	ee18 1a10 	vmov	r1, s16
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 f82c 	bl	800e34c <__pow5mult>
 800d2f4:	ee08 0a10 	vmov	s16, r0
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 ff66 	bl	800e1cc <__i2b>
 800d300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d302:	2b00      	cmp	r3, #0
 800d304:	4606      	mov	r6, r0
 800d306:	f340 8088 	ble.w	800d41a <_dtoa_r+0x8c2>
 800d30a:	461a      	mov	r2, r3
 800d30c:	4601      	mov	r1, r0
 800d30e:	4620      	mov	r0, r4
 800d310:	f001 f81c 	bl	800e34c <__pow5mult>
 800d314:	9b06      	ldr	r3, [sp, #24]
 800d316:	2b01      	cmp	r3, #1
 800d318:	4606      	mov	r6, r0
 800d31a:	f340 8081 	ble.w	800d420 <_dtoa_r+0x8c8>
 800d31e:	f04f 0800 	mov.w	r8, #0
 800d322:	6933      	ldr	r3, [r6, #16]
 800d324:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d328:	6918      	ldr	r0, [r3, #16]
 800d32a:	f000 feff 	bl	800e12c <__hi0bits>
 800d32e:	f1c0 0020 	rsb	r0, r0, #32
 800d332:	9b05      	ldr	r3, [sp, #20]
 800d334:	4418      	add	r0, r3
 800d336:	f010 001f 	ands.w	r0, r0, #31
 800d33a:	f000 8092 	beq.w	800d462 <_dtoa_r+0x90a>
 800d33e:	f1c0 0320 	rsb	r3, r0, #32
 800d342:	2b04      	cmp	r3, #4
 800d344:	f340 808a 	ble.w	800d45c <_dtoa_r+0x904>
 800d348:	f1c0 001c 	rsb	r0, r0, #28
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	4403      	add	r3, r0
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9b05      	ldr	r3, [sp, #20]
 800d354:	4403      	add	r3, r0
 800d356:	4405      	add	r5, r0
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dd07      	ble.n	800d370 <_dtoa_r+0x818>
 800d360:	ee18 1a10 	vmov	r1, s16
 800d364:	461a      	mov	r2, r3
 800d366:	4620      	mov	r0, r4
 800d368:	f001 f84a 	bl	800e400 <__lshift>
 800d36c:	ee08 0a10 	vmov	s16, r0
 800d370:	9b05      	ldr	r3, [sp, #20]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd05      	ble.n	800d382 <_dtoa_r+0x82a>
 800d376:	4631      	mov	r1, r6
 800d378:	461a      	mov	r2, r3
 800d37a:	4620      	mov	r0, r4
 800d37c:	f001 f840 	bl	800e400 <__lshift>
 800d380:	4606      	mov	r6, r0
 800d382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d384:	2b00      	cmp	r3, #0
 800d386:	d06e      	beq.n	800d466 <_dtoa_r+0x90e>
 800d388:	ee18 0a10 	vmov	r0, s16
 800d38c:	4631      	mov	r1, r6
 800d38e:	f001 f8a7 	bl	800e4e0 <__mcmp>
 800d392:	2800      	cmp	r0, #0
 800d394:	da67      	bge.n	800d466 <_dtoa_r+0x90e>
 800d396:	9b00      	ldr	r3, [sp, #0]
 800d398:	3b01      	subs	r3, #1
 800d39a:	ee18 1a10 	vmov	r1, s16
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	220a      	movs	r2, #10
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 fe31 	bl	800e00c <__multadd>
 800d3aa:	9b08      	ldr	r3, [sp, #32]
 800d3ac:	ee08 0a10 	vmov	s16, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 81b1 	beq.w	800d718 <_dtoa_r+0xbc0>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f000 fe25 	bl	800e00c <__multadd>
 800d3c2:	9b02      	ldr	r3, [sp, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	4607      	mov	r7, r0
 800d3c8:	f300 808e 	bgt.w	800d4e8 <_dtoa_r+0x990>
 800d3cc:	9b06      	ldr	r3, [sp, #24]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	dc51      	bgt.n	800d476 <_dtoa_r+0x91e>
 800d3d2:	e089      	b.n	800d4e8 <_dtoa_r+0x990>
 800d3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3da:	e74b      	b.n	800d274 <_dtoa_r+0x71c>
 800d3dc:	9b03      	ldr	r3, [sp, #12]
 800d3de:	1e5e      	subs	r6, r3, #1
 800d3e0:	9b07      	ldr	r3, [sp, #28]
 800d3e2:	42b3      	cmp	r3, r6
 800d3e4:	bfbf      	itttt	lt
 800d3e6:	9b07      	ldrlt	r3, [sp, #28]
 800d3e8:	9607      	strlt	r6, [sp, #28]
 800d3ea:	1af2      	sublt	r2, r6, r3
 800d3ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3ee:	bfb6      	itet	lt
 800d3f0:	189b      	addlt	r3, r3, r2
 800d3f2:	1b9e      	subge	r6, r3, r6
 800d3f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d3f6:	9b03      	ldr	r3, [sp, #12]
 800d3f8:	bfb8      	it	lt
 800d3fa:	2600      	movlt	r6, #0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	bfb7      	itett	lt
 800d400:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d404:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d408:	1a9d      	sublt	r5, r3, r2
 800d40a:	2300      	movlt	r3, #0
 800d40c:	e734      	b.n	800d278 <_dtoa_r+0x720>
 800d40e:	9e07      	ldr	r6, [sp, #28]
 800d410:	9d04      	ldr	r5, [sp, #16]
 800d412:	9f08      	ldr	r7, [sp, #32]
 800d414:	e73b      	b.n	800d28e <_dtoa_r+0x736>
 800d416:	9a07      	ldr	r2, [sp, #28]
 800d418:	e767      	b.n	800d2ea <_dtoa_r+0x792>
 800d41a:	9b06      	ldr	r3, [sp, #24]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	dc18      	bgt.n	800d452 <_dtoa_r+0x8fa>
 800d420:	f1ba 0f00 	cmp.w	sl, #0
 800d424:	d115      	bne.n	800d452 <_dtoa_r+0x8fa>
 800d426:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d42a:	b993      	cbnz	r3, 800d452 <_dtoa_r+0x8fa>
 800d42c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d430:	0d1b      	lsrs	r3, r3, #20
 800d432:	051b      	lsls	r3, r3, #20
 800d434:	b183      	cbz	r3, 800d458 <_dtoa_r+0x900>
 800d436:	9b04      	ldr	r3, [sp, #16]
 800d438:	3301      	adds	r3, #1
 800d43a:	9304      	str	r3, [sp, #16]
 800d43c:	9b05      	ldr	r3, [sp, #20]
 800d43e:	3301      	adds	r3, #1
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	f04f 0801 	mov.w	r8, #1
 800d446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f47f af6a 	bne.w	800d322 <_dtoa_r+0x7ca>
 800d44e:	2001      	movs	r0, #1
 800d450:	e76f      	b.n	800d332 <_dtoa_r+0x7da>
 800d452:	f04f 0800 	mov.w	r8, #0
 800d456:	e7f6      	b.n	800d446 <_dtoa_r+0x8ee>
 800d458:	4698      	mov	r8, r3
 800d45a:	e7f4      	b.n	800d446 <_dtoa_r+0x8ee>
 800d45c:	f43f af7d 	beq.w	800d35a <_dtoa_r+0x802>
 800d460:	4618      	mov	r0, r3
 800d462:	301c      	adds	r0, #28
 800d464:	e772      	b.n	800d34c <_dtoa_r+0x7f4>
 800d466:	9b03      	ldr	r3, [sp, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	dc37      	bgt.n	800d4dc <_dtoa_r+0x984>
 800d46c:	9b06      	ldr	r3, [sp, #24]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	dd34      	ble.n	800d4dc <_dtoa_r+0x984>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	9302      	str	r3, [sp, #8]
 800d476:	9b02      	ldr	r3, [sp, #8]
 800d478:	b96b      	cbnz	r3, 800d496 <_dtoa_r+0x93e>
 800d47a:	4631      	mov	r1, r6
 800d47c:	2205      	movs	r2, #5
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 fdc4 	bl	800e00c <__multadd>
 800d484:	4601      	mov	r1, r0
 800d486:	4606      	mov	r6, r0
 800d488:	ee18 0a10 	vmov	r0, s16
 800d48c:	f001 f828 	bl	800e4e0 <__mcmp>
 800d490:	2800      	cmp	r0, #0
 800d492:	f73f adbb 	bgt.w	800d00c <_dtoa_r+0x4b4>
 800d496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d498:	9d01      	ldr	r5, [sp, #4]
 800d49a:	43db      	mvns	r3, r3
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	f04f 0800 	mov.w	r8, #0
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f000 fd8f 	bl	800dfc8 <_Bfree>
 800d4aa:	2f00      	cmp	r7, #0
 800d4ac:	f43f aea4 	beq.w	800d1f8 <_dtoa_r+0x6a0>
 800d4b0:	f1b8 0f00 	cmp.w	r8, #0
 800d4b4:	d005      	beq.n	800d4c2 <_dtoa_r+0x96a>
 800d4b6:	45b8      	cmp	r8, r7
 800d4b8:	d003      	beq.n	800d4c2 <_dtoa_r+0x96a>
 800d4ba:	4641      	mov	r1, r8
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fd83 	bl	800dfc8 <_Bfree>
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fd7f 	bl	800dfc8 <_Bfree>
 800d4ca:	e695      	b.n	800d1f8 <_dtoa_r+0x6a0>
 800d4cc:	2600      	movs	r6, #0
 800d4ce:	4637      	mov	r7, r6
 800d4d0:	e7e1      	b.n	800d496 <_dtoa_r+0x93e>
 800d4d2:	9700      	str	r7, [sp, #0]
 800d4d4:	4637      	mov	r7, r6
 800d4d6:	e599      	b.n	800d00c <_dtoa_r+0x4b4>
 800d4d8:	40240000 	.word	0x40240000
 800d4dc:	9b08      	ldr	r3, [sp, #32]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 80ca 	beq.w	800d678 <_dtoa_r+0xb20>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	9302      	str	r3, [sp, #8]
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	dd05      	ble.n	800d4f8 <_dtoa_r+0x9a0>
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	462a      	mov	r2, r5
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 ff85 	bl	800e400 <__lshift>
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	f1b8 0f00 	cmp.w	r8, #0
 800d4fc:	d05b      	beq.n	800d5b6 <_dtoa_r+0xa5e>
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fd21 	bl	800df48 <_Balloc>
 800d506:	4605      	mov	r5, r0
 800d508:	b928      	cbnz	r0, 800d516 <_dtoa_r+0x9be>
 800d50a:	4b87      	ldr	r3, [pc, #540]	; (800d728 <_dtoa_r+0xbd0>)
 800d50c:	4602      	mov	r2, r0
 800d50e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d512:	f7ff bb3b 	b.w	800cb8c <_dtoa_r+0x34>
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	3202      	adds	r2, #2
 800d51a:	0092      	lsls	r2, r2, #2
 800d51c:	f107 010c 	add.w	r1, r7, #12
 800d520:	300c      	adds	r0, #12
 800d522:	f7fd f819 	bl	800a558 <memcpy>
 800d526:	2201      	movs	r2, #1
 800d528:	4629      	mov	r1, r5
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 ff68 	bl	800e400 <__lshift>
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	f103 0901 	add.w	r9, r3, #1
 800d536:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d53a:	4413      	add	r3, r2
 800d53c:	9305      	str	r3, [sp, #20]
 800d53e:	f00a 0301 	and.w	r3, sl, #1
 800d542:	46b8      	mov	r8, r7
 800d544:	9304      	str	r3, [sp, #16]
 800d546:	4607      	mov	r7, r0
 800d548:	4631      	mov	r1, r6
 800d54a:	ee18 0a10 	vmov	r0, s16
 800d54e:	f7ff fa75 	bl	800ca3c <quorem>
 800d552:	4641      	mov	r1, r8
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d55a:	ee18 0a10 	vmov	r0, s16
 800d55e:	f000 ffbf 	bl	800e4e0 <__mcmp>
 800d562:	463a      	mov	r2, r7
 800d564:	9003      	str	r0, [sp, #12]
 800d566:	4631      	mov	r1, r6
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 ffd5 	bl	800e518 <__mdiff>
 800d56e:	68c2      	ldr	r2, [r0, #12]
 800d570:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d574:	4605      	mov	r5, r0
 800d576:	bb02      	cbnz	r2, 800d5ba <_dtoa_r+0xa62>
 800d578:	4601      	mov	r1, r0
 800d57a:	ee18 0a10 	vmov	r0, s16
 800d57e:	f000 ffaf 	bl	800e4e0 <__mcmp>
 800d582:	4602      	mov	r2, r0
 800d584:	4629      	mov	r1, r5
 800d586:	4620      	mov	r0, r4
 800d588:	9207      	str	r2, [sp, #28]
 800d58a:	f000 fd1d 	bl	800dfc8 <_Bfree>
 800d58e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d592:	ea43 0102 	orr.w	r1, r3, r2
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	430b      	orrs	r3, r1
 800d59a:	464d      	mov	r5, r9
 800d59c:	d10f      	bne.n	800d5be <_dtoa_r+0xa66>
 800d59e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5a2:	d02a      	beq.n	800d5fa <_dtoa_r+0xaa2>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	dd02      	ble.n	800d5b0 <_dtoa_r+0xa58>
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d5b0:	f88b a000 	strb.w	sl, [fp]
 800d5b4:	e775      	b.n	800d4a2 <_dtoa_r+0x94a>
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	e7ba      	b.n	800d530 <_dtoa_r+0x9d8>
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	e7e2      	b.n	800d584 <_dtoa_r+0xa2c>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	db04      	blt.n	800d5ce <_dtoa_r+0xa76>
 800d5c4:	9906      	ldr	r1, [sp, #24]
 800d5c6:	430b      	orrs	r3, r1
 800d5c8:	9904      	ldr	r1, [sp, #16]
 800d5ca:	430b      	orrs	r3, r1
 800d5cc:	d122      	bne.n	800d614 <_dtoa_r+0xabc>
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	ddee      	ble.n	800d5b0 <_dtoa_r+0xa58>
 800d5d2:	ee18 1a10 	vmov	r1, s16
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 ff11 	bl	800e400 <__lshift>
 800d5de:	4631      	mov	r1, r6
 800d5e0:	ee08 0a10 	vmov	s16, r0
 800d5e4:	f000 ff7c 	bl	800e4e0 <__mcmp>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	dc03      	bgt.n	800d5f4 <_dtoa_r+0xa9c>
 800d5ec:	d1e0      	bne.n	800d5b0 <_dtoa_r+0xa58>
 800d5ee:	f01a 0f01 	tst.w	sl, #1
 800d5f2:	d0dd      	beq.n	800d5b0 <_dtoa_r+0xa58>
 800d5f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5f8:	d1d7      	bne.n	800d5aa <_dtoa_r+0xa52>
 800d5fa:	2339      	movs	r3, #57	; 0x39
 800d5fc:	f88b 3000 	strb.w	r3, [fp]
 800d600:	462b      	mov	r3, r5
 800d602:	461d      	mov	r5, r3
 800d604:	3b01      	subs	r3, #1
 800d606:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d60a:	2a39      	cmp	r2, #57	; 0x39
 800d60c:	d071      	beq.n	800d6f2 <_dtoa_r+0xb9a>
 800d60e:	3201      	adds	r2, #1
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	e746      	b.n	800d4a2 <_dtoa_r+0x94a>
 800d614:	2a00      	cmp	r2, #0
 800d616:	dd07      	ble.n	800d628 <_dtoa_r+0xad0>
 800d618:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d61c:	d0ed      	beq.n	800d5fa <_dtoa_r+0xaa2>
 800d61e:	f10a 0301 	add.w	r3, sl, #1
 800d622:	f88b 3000 	strb.w	r3, [fp]
 800d626:	e73c      	b.n	800d4a2 <_dtoa_r+0x94a>
 800d628:	9b05      	ldr	r3, [sp, #20]
 800d62a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d62e:	4599      	cmp	r9, r3
 800d630:	d047      	beq.n	800d6c2 <_dtoa_r+0xb6a>
 800d632:	ee18 1a10 	vmov	r1, s16
 800d636:	2300      	movs	r3, #0
 800d638:	220a      	movs	r2, #10
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 fce6 	bl	800e00c <__multadd>
 800d640:	45b8      	cmp	r8, r7
 800d642:	ee08 0a10 	vmov	s16, r0
 800d646:	f04f 0300 	mov.w	r3, #0
 800d64a:	f04f 020a 	mov.w	r2, #10
 800d64e:	4641      	mov	r1, r8
 800d650:	4620      	mov	r0, r4
 800d652:	d106      	bne.n	800d662 <_dtoa_r+0xb0a>
 800d654:	f000 fcda 	bl	800e00c <__multadd>
 800d658:	4680      	mov	r8, r0
 800d65a:	4607      	mov	r7, r0
 800d65c:	f109 0901 	add.w	r9, r9, #1
 800d660:	e772      	b.n	800d548 <_dtoa_r+0x9f0>
 800d662:	f000 fcd3 	bl	800e00c <__multadd>
 800d666:	4639      	mov	r1, r7
 800d668:	4680      	mov	r8, r0
 800d66a:	2300      	movs	r3, #0
 800d66c:	220a      	movs	r2, #10
 800d66e:	4620      	mov	r0, r4
 800d670:	f000 fccc 	bl	800e00c <__multadd>
 800d674:	4607      	mov	r7, r0
 800d676:	e7f1      	b.n	800d65c <_dtoa_r+0xb04>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	9302      	str	r3, [sp, #8]
 800d67c:	9d01      	ldr	r5, [sp, #4]
 800d67e:	ee18 0a10 	vmov	r0, s16
 800d682:	4631      	mov	r1, r6
 800d684:	f7ff f9da 	bl	800ca3c <quorem>
 800d688:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d68c:	9b01      	ldr	r3, [sp, #4]
 800d68e:	f805 ab01 	strb.w	sl, [r5], #1
 800d692:	1aea      	subs	r2, r5, r3
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	4293      	cmp	r3, r2
 800d698:	dd09      	ble.n	800d6ae <_dtoa_r+0xb56>
 800d69a:	ee18 1a10 	vmov	r1, s16
 800d69e:	2300      	movs	r3, #0
 800d6a0:	220a      	movs	r2, #10
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f000 fcb2 	bl	800e00c <__multadd>
 800d6a8:	ee08 0a10 	vmov	s16, r0
 800d6ac:	e7e7      	b.n	800d67e <_dtoa_r+0xb26>
 800d6ae:	9b02      	ldr	r3, [sp, #8]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	bfc8      	it	gt
 800d6b4:	461d      	movgt	r5, r3
 800d6b6:	9b01      	ldr	r3, [sp, #4]
 800d6b8:	bfd8      	it	le
 800d6ba:	2501      	movle	r5, #1
 800d6bc:	441d      	add	r5, r3
 800d6be:	f04f 0800 	mov.w	r8, #0
 800d6c2:	ee18 1a10 	vmov	r1, s16
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fe99 	bl	800e400 <__lshift>
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	ee08 0a10 	vmov	s16, r0
 800d6d4:	f000 ff04 	bl	800e4e0 <__mcmp>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	dc91      	bgt.n	800d600 <_dtoa_r+0xaa8>
 800d6dc:	d102      	bne.n	800d6e4 <_dtoa_r+0xb8c>
 800d6de:	f01a 0f01 	tst.w	sl, #1
 800d6e2:	d18d      	bne.n	800d600 <_dtoa_r+0xaa8>
 800d6e4:	462b      	mov	r3, r5
 800d6e6:	461d      	mov	r5, r3
 800d6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ec:	2a30      	cmp	r2, #48	; 0x30
 800d6ee:	d0fa      	beq.n	800d6e6 <_dtoa_r+0xb8e>
 800d6f0:	e6d7      	b.n	800d4a2 <_dtoa_r+0x94a>
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d184      	bne.n	800d602 <_dtoa_r+0xaaa>
 800d6f8:	9b00      	ldr	r3, [sp, #0]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	2331      	movs	r3, #49	; 0x31
 800d700:	7013      	strb	r3, [r2, #0]
 800d702:	e6ce      	b.n	800d4a2 <_dtoa_r+0x94a>
 800d704:	4b09      	ldr	r3, [pc, #36]	; (800d72c <_dtoa_r+0xbd4>)
 800d706:	f7ff ba95 	b.w	800cc34 <_dtoa_r+0xdc>
 800d70a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f47f aa6e 	bne.w	800cbee <_dtoa_r+0x96>
 800d712:	4b07      	ldr	r3, [pc, #28]	; (800d730 <_dtoa_r+0xbd8>)
 800d714:	f7ff ba8e 	b.w	800cc34 <_dtoa_r+0xdc>
 800d718:	9b02      	ldr	r3, [sp, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	dcae      	bgt.n	800d67c <_dtoa_r+0xb24>
 800d71e:	9b06      	ldr	r3, [sp, #24]
 800d720:	2b02      	cmp	r3, #2
 800d722:	f73f aea8 	bgt.w	800d476 <_dtoa_r+0x91e>
 800d726:	e7a9      	b.n	800d67c <_dtoa_r+0xb24>
 800d728:	0800fea9 	.word	0x0800fea9
 800d72c:	0800fc15 	.word	0x0800fc15
 800d730:	0800fe41 	.word	0x0800fe41

0800d734 <rshift>:
 800d734:	6903      	ldr	r3, [r0, #16]
 800d736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d73a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d73e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d742:	f100 0414 	add.w	r4, r0, #20
 800d746:	dd45      	ble.n	800d7d4 <rshift+0xa0>
 800d748:	f011 011f 	ands.w	r1, r1, #31
 800d74c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d750:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d754:	d10c      	bne.n	800d770 <rshift+0x3c>
 800d756:	f100 0710 	add.w	r7, r0, #16
 800d75a:	4629      	mov	r1, r5
 800d75c:	42b1      	cmp	r1, r6
 800d75e:	d334      	bcc.n	800d7ca <rshift+0x96>
 800d760:	1a9b      	subs	r3, r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	1eea      	subs	r2, r5, #3
 800d766:	4296      	cmp	r6, r2
 800d768:	bf38      	it	cc
 800d76a:	2300      	movcc	r3, #0
 800d76c:	4423      	add	r3, r4
 800d76e:	e015      	b.n	800d79c <rshift+0x68>
 800d770:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d774:	f1c1 0820 	rsb	r8, r1, #32
 800d778:	40cf      	lsrs	r7, r1
 800d77a:	f105 0e04 	add.w	lr, r5, #4
 800d77e:	46a1      	mov	r9, r4
 800d780:	4576      	cmp	r6, lr
 800d782:	46f4      	mov	ip, lr
 800d784:	d815      	bhi.n	800d7b2 <rshift+0x7e>
 800d786:	1a9a      	subs	r2, r3, r2
 800d788:	0092      	lsls	r2, r2, #2
 800d78a:	3a04      	subs	r2, #4
 800d78c:	3501      	adds	r5, #1
 800d78e:	42ae      	cmp	r6, r5
 800d790:	bf38      	it	cc
 800d792:	2200      	movcc	r2, #0
 800d794:	18a3      	adds	r3, r4, r2
 800d796:	50a7      	str	r7, [r4, r2]
 800d798:	b107      	cbz	r7, 800d79c <rshift+0x68>
 800d79a:	3304      	adds	r3, #4
 800d79c:	1b1a      	subs	r2, r3, r4
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7a4:	bf08      	it	eq
 800d7a6:	2300      	moveq	r3, #0
 800d7a8:	6102      	str	r2, [r0, #16]
 800d7aa:	bf08      	it	eq
 800d7ac:	6143      	streq	r3, [r0, #20]
 800d7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7b2:	f8dc c000 	ldr.w	ip, [ip]
 800d7b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7ba:	ea4c 0707 	orr.w	r7, ip, r7
 800d7be:	f849 7b04 	str.w	r7, [r9], #4
 800d7c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7c6:	40cf      	lsrs	r7, r1
 800d7c8:	e7da      	b.n	800d780 <rshift+0x4c>
 800d7ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7d2:	e7c3      	b.n	800d75c <rshift+0x28>
 800d7d4:	4623      	mov	r3, r4
 800d7d6:	e7e1      	b.n	800d79c <rshift+0x68>

0800d7d8 <__hexdig_fun>:
 800d7d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d7dc:	2b09      	cmp	r3, #9
 800d7de:	d802      	bhi.n	800d7e6 <__hexdig_fun+0xe>
 800d7e0:	3820      	subs	r0, #32
 800d7e2:	b2c0      	uxtb	r0, r0
 800d7e4:	4770      	bx	lr
 800d7e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d7ea:	2b05      	cmp	r3, #5
 800d7ec:	d801      	bhi.n	800d7f2 <__hexdig_fun+0x1a>
 800d7ee:	3847      	subs	r0, #71	; 0x47
 800d7f0:	e7f7      	b.n	800d7e2 <__hexdig_fun+0xa>
 800d7f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d7f6:	2b05      	cmp	r3, #5
 800d7f8:	d801      	bhi.n	800d7fe <__hexdig_fun+0x26>
 800d7fa:	3827      	subs	r0, #39	; 0x27
 800d7fc:	e7f1      	b.n	800d7e2 <__hexdig_fun+0xa>
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr
	...

0800d804 <__gethex>:
 800d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	ed2d 8b02 	vpush	{d8}
 800d80c:	b089      	sub	sp, #36	; 0x24
 800d80e:	ee08 0a10 	vmov	s16, r0
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	4bb4      	ldr	r3, [pc, #720]	; (800dae8 <__gethex+0x2e4>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	4618      	mov	r0, r3
 800d81c:	468b      	mov	fp, r1
 800d81e:	4690      	mov	r8, r2
 800d820:	f7f2 fd58 	bl	80002d4 <strlen>
 800d824:	9b01      	ldr	r3, [sp, #4]
 800d826:	f8db 2000 	ldr.w	r2, [fp]
 800d82a:	4403      	add	r3, r0
 800d82c:	4682      	mov	sl, r0
 800d82e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d832:	9305      	str	r3, [sp, #20]
 800d834:	1c93      	adds	r3, r2, #2
 800d836:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d83a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d83e:	32fe      	adds	r2, #254	; 0xfe
 800d840:	18d1      	adds	r1, r2, r3
 800d842:	461f      	mov	r7, r3
 800d844:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d848:	9100      	str	r1, [sp, #0]
 800d84a:	2830      	cmp	r0, #48	; 0x30
 800d84c:	d0f8      	beq.n	800d840 <__gethex+0x3c>
 800d84e:	f7ff ffc3 	bl	800d7d8 <__hexdig_fun>
 800d852:	4604      	mov	r4, r0
 800d854:	2800      	cmp	r0, #0
 800d856:	d13a      	bne.n	800d8ce <__gethex+0xca>
 800d858:	9901      	ldr	r1, [sp, #4]
 800d85a:	4652      	mov	r2, sl
 800d85c:	4638      	mov	r0, r7
 800d85e:	f001 fa2f 	bl	800ecc0 <strncmp>
 800d862:	4605      	mov	r5, r0
 800d864:	2800      	cmp	r0, #0
 800d866:	d168      	bne.n	800d93a <__gethex+0x136>
 800d868:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d86c:	eb07 060a 	add.w	r6, r7, sl
 800d870:	f7ff ffb2 	bl	800d7d8 <__hexdig_fun>
 800d874:	2800      	cmp	r0, #0
 800d876:	d062      	beq.n	800d93e <__gethex+0x13a>
 800d878:	4633      	mov	r3, r6
 800d87a:	7818      	ldrb	r0, [r3, #0]
 800d87c:	2830      	cmp	r0, #48	; 0x30
 800d87e:	461f      	mov	r7, r3
 800d880:	f103 0301 	add.w	r3, r3, #1
 800d884:	d0f9      	beq.n	800d87a <__gethex+0x76>
 800d886:	f7ff ffa7 	bl	800d7d8 <__hexdig_fun>
 800d88a:	2301      	movs	r3, #1
 800d88c:	fab0 f480 	clz	r4, r0
 800d890:	0964      	lsrs	r4, r4, #5
 800d892:	4635      	mov	r5, r6
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	463a      	mov	r2, r7
 800d898:	4616      	mov	r6, r2
 800d89a:	3201      	adds	r2, #1
 800d89c:	7830      	ldrb	r0, [r6, #0]
 800d89e:	f7ff ff9b 	bl	800d7d8 <__hexdig_fun>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	d1f8      	bne.n	800d898 <__gethex+0x94>
 800d8a6:	9901      	ldr	r1, [sp, #4]
 800d8a8:	4652      	mov	r2, sl
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f001 fa08 	bl	800ecc0 <strncmp>
 800d8b0:	b980      	cbnz	r0, 800d8d4 <__gethex+0xd0>
 800d8b2:	b94d      	cbnz	r5, 800d8c8 <__gethex+0xc4>
 800d8b4:	eb06 050a 	add.w	r5, r6, sl
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	4616      	mov	r6, r2
 800d8bc:	3201      	adds	r2, #1
 800d8be:	7830      	ldrb	r0, [r6, #0]
 800d8c0:	f7ff ff8a 	bl	800d7d8 <__hexdig_fun>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d1f8      	bne.n	800d8ba <__gethex+0xb6>
 800d8c8:	1bad      	subs	r5, r5, r6
 800d8ca:	00ad      	lsls	r5, r5, #2
 800d8cc:	e004      	b.n	800d8d8 <__gethex+0xd4>
 800d8ce:	2400      	movs	r4, #0
 800d8d0:	4625      	mov	r5, r4
 800d8d2:	e7e0      	b.n	800d896 <__gethex+0x92>
 800d8d4:	2d00      	cmp	r5, #0
 800d8d6:	d1f7      	bne.n	800d8c8 <__gethex+0xc4>
 800d8d8:	7833      	ldrb	r3, [r6, #0]
 800d8da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d8de:	2b50      	cmp	r3, #80	; 0x50
 800d8e0:	d13b      	bne.n	800d95a <__gethex+0x156>
 800d8e2:	7873      	ldrb	r3, [r6, #1]
 800d8e4:	2b2b      	cmp	r3, #43	; 0x2b
 800d8e6:	d02c      	beq.n	800d942 <__gethex+0x13e>
 800d8e8:	2b2d      	cmp	r3, #45	; 0x2d
 800d8ea:	d02e      	beq.n	800d94a <__gethex+0x146>
 800d8ec:	1c71      	adds	r1, r6, #1
 800d8ee:	f04f 0900 	mov.w	r9, #0
 800d8f2:	7808      	ldrb	r0, [r1, #0]
 800d8f4:	f7ff ff70 	bl	800d7d8 <__hexdig_fun>
 800d8f8:	1e43      	subs	r3, r0, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b18      	cmp	r3, #24
 800d8fe:	d82c      	bhi.n	800d95a <__gethex+0x156>
 800d900:	f1a0 0210 	sub.w	r2, r0, #16
 800d904:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d908:	f7ff ff66 	bl	800d7d8 <__hexdig_fun>
 800d90c:	1e43      	subs	r3, r0, #1
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b18      	cmp	r3, #24
 800d912:	d91d      	bls.n	800d950 <__gethex+0x14c>
 800d914:	f1b9 0f00 	cmp.w	r9, #0
 800d918:	d000      	beq.n	800d91c <__gethex+0x118>
 800d91a:	4252      	negs	r2, r2
 800d91c:	4415      	add	r5, r2
 800d91e:	f8cb 1000 	str.w	r1, [fp]
 800d922:	b1e4      	cbz	r4, 800d95e <__gethex+0x15a>
 800d924:	9b00      	ldr	r3, [sp, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	bf14      	ite	ne
 800d92a:	2700      	movne	r7, #0
 800d92c:	2706      	moveq	r7, #6
 800d92e:	4638      	mov	r0, r7
 800d930:	b009      	add	sp, #36	; 0x24
 800d932:	ecbd 8b02 	vpop	{d8}
 800d936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93a:	463e      	mov	r6, r7
 800d93c:	4625      	mov	r5, r4
 800d93e:	2401      	movs	r4, #1
 800d940:	e7ca      	b.n	800d8d8 <__gethex+0xd4>
 800d942:	f04f 0900 	mov.w	r9, #0
 800d946:	1cb1      	adds	r1, r6, #2
 800d948:	e7d3      	b.n	800d8f2 <__gethex+0xee>
 800d94a:	f04f 0901 	mov.w	r9, #1
 800d94e:	e7fa      	b.n	800d946 <__gethex+0x142>
 800d950:	230a      	movs	r3, #10
 800d952:	fb03 0202 	mla	r2, r3, r2, r0
 800d956:	3a10      	subs	r2, #16
 800d958:	e7d4      	b.n	800d904 <__gethex+0x100>
 800d95a:	4631      	mov	r1, r6
 800d95c:	e7df      	b.n	800d91e <__gethex+0x11a>
 800d95e:	1bf3      	subs	r3, r6, r7
 800d960:	3b01      	subs	r3, #1
 800d962:	4621      	mov	r1, r4
 800d964:	2b07      	cmp	r3, #7
 800d966:	dc0b      	bgt.n	800d980 <__gethex+0x17c>
 800d968:	ee18 0a10 	vmov	r0, s16
 800d96c:	f000 faec 	bl	800df48 <_Balloc>
 800d970:	4604      	mov	r4, r0
 800d972:	b940      	cbnz	r0, 800d986 <__gethex+0x182>
 800d974:	4b5d      	ldr	r3, [pc, #372]	; (800daec <__gethex+0x2e8>)
 800d976:	4602      	mov	r2, r0
 800d978:	21de      	movs	r1, #222	; 0xde
 800d97a:	485d      	ldr	r0, [pc, #372]	; (800daf0 <__gethex+0x2ec>)
 800d97c:	f7ff f830 	bl	800c9e0 <__assert_func>
 800d980:	3101      	adds	r1, #1
 800d982:	105b      	asrs	r3, r3, #1
 800d984:	e7ee      	b.n	800d964 <__gethex+0x160>
 800d986:	f100 0914 	add.w	r9, r0, #20
 800d98a:	f04f 0b00 	mov.w	fp, #0
 800d98e:	f1ca 0301 	rsb	r3, sl, #1
 800d992:	f8cd 9008 	str.w	r9, [sp, #8]
 800d996:	f8cd b000 	str.w	fp, [sp]
 800d99a:	9306      	str	r3, [sp, #24]
 800d99c:	42b7      	cmp	r7, r6
 800d99e:	d340      	bcc.n	800da22 <__gethex+0x21e>
 800d9a0:	9802      	ldr	r0, [sp, #8]
 800d9a2:	9b00      	ldr	r3, [sp, #0]
 800d9a4:	f840 3b04 	str.w	r3, [r0], #4
 800d9a8:	eba0 0009 	sub.w	r0, r0, r9
 800d9ac:	1080      	asrs	r0, r0, #2
 800d9ae:	0146      	lsls	r6, r0, #5
 800d9b0:	6120      	str	r0, [r4, #16]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fbba 	bl	800e12c <__hi0bits>
 800d9b8:	1a30      	subs	r0, r6, r0
 800d9ba:	f8d8 6000 	ldr.w	r6, [r8]
 800d9be:	42b0      	cmp	r0, r6
 800d9c0:	dd63      	ble.n	800da8a <__gethex+0x286>
 800d9c2:	1b87      	subs	r7, r0, r6
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 ff5e 	bl	800e888 <__any_on>
 800d9cc:	4682      	mov	sl, r0
 800d9ce:	b1a8      	cbz	r0, 800d9fc <__gethex+0x1f8>
 800d9d0:	1e7b      	subs	r3, r7, #1
 800d9d2:	1159      	asrs	r1, r3, #5
 800d9d4:	f003 021f 	and.w	r2, r3, #31
 800d9d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d9dc:	f04f 0a01 	mov.w	sl, #1
 800d9e0:	fa0a f202 	lsl.w	r2, sl, r2
 800d9e4:	420a      	tst	r2, r1
 800d9e6:	d009      	beq.n	800d9fc <__gethex+0x1f8>
 800d9e8:	4553      	cmp	r3, sl
 800d9ea:	dd05      	ble.n	800d9f8 <__gethex+0x1f4>
 800d9ec:	1eb9      	subs	r1, r7, #2
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 ff4a 	bl	800e888 <__any_on>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d145      	bne.n	800da84 <__gethex+0x280>
 800d9f8:	f04f 0a02 	mov.w	sl, #2
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7ff fe98 	bl	800d734 <rshift>
 800da04:	443d      	add	r5, r7
 800da06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da0a:	42ab      	cmp	r3, r5
 800da0c:	da4c      	bge.n	800daa8 <__gethex+0x2a4>
 800da0e:	ee18 0a10 	vmov	r0, s16
 800da12:	4621      	mov	r1, r4
 800da14:	f000 fad8 	bl	800dfc8 <_Bfree>
 800da18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da1a:	2300      	movs	r3, #0
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	27a3      	movs	r7, #163	; 0xa3
 800da20:	e785      	b.n	800d92e <__gethex+0x12a>
 800da22:	1e73      	subs	r3, r6, #1
 800da24:	9a05      	ldr	r2, [sp, #20]
 800da26:	9303      	str	r3, [sp, #12]
 800da28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d019      	beq.n	800da64 <__gethex+0x260>
 800da30:	f1bb 0f20 	cmp.w	fp, #32
 800da34:	d107      	bne.n	800da46 <__gethex+0x242>
 800da36:	9b02      	ldr	r3, [sp, #8]
 800da38:	9a00      	ldr	r2, [sp, #0]
 800da3a:	f843 2b04 	str.w	r2, [r3], #4
 800da3e:	9302      	str	r3, [sp, #8]
 800da40:	2300      	movs	r3, #0
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	469b      	mov	fp, r3
 800da46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da4a:	f7ff fec5 	bl	800d7d8 <__hexdig_fun>
 800da4e:	9b00      	ldr	r3, [sp, #0]
 800da50:	f000 000f 	and.w	r0, r0, #15
 800da54:	fa00 f00b 	lsl.w	r0, r0, fp
 800da58:	4303      	orrs	r3, r0
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	f10b 0b04 	add.w	fp, fp, #4
 800da60:	9b03      	ldr	r3, [sp, #12]
 800da62:	e00d      	b.n	800da80 <__gethex+0x27c>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	9a06      	ldr	r2, [sp, #24]
 800da68:	4413      	add	r3, r2
 800da6a:	42bb      	cmp	r3, r7
 800da6c:	d3e0      	bcc.n	800da30 <__gethex+0x22c>
 800da6e:	4618      	mov	r0, r3
 800da70:	9901      	ldr	r1, [sp, #4]
 800da72:	9307      	str	r3, [sp, #28]
 800da74:	4652      	mov	r2, sl
 800da76:	f001 f923 	bl	800ecc0 <strncmp>
 800da7a:	9b07      	ldr	r3, [sp, #28]
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d1d7      	bne.n	800da30 <__gethex+0x22c>
 800da80:	461e      	mov	r6, r3
 800da82:	e78b      	b.n	800d99c <__gethex+0x198>
 800da84:	f04f 0a03 	mov.w	sl, #3
 800da88:	e7b8      	b.n	800d9fc <__gethex+0x1f8>
 800da8a:	da0a      	bge.n	800daa2 <__gethex+0x29e>
 800da8c:	1a37      	subs	r7, r6, r0
 800da8e:	4621      	mov	r1, r4
 800da90:	ee18 0a10 	vmov	r0, s16
 800da94:	463a      	mov	r2, r7
 800da96:	f000 fcb3 	bl	800e400 <__lshift>
 800da9a:	1bed      	subs	r5, r5, r7
 800da9c:	4604      	mov	r4, r0
 800da9e:	f100 0914 	add.w	r9, r0, #20
 800daa2:	f04f 0a00 	mov.w	sl, #0
 800daa6:	e7ae      	b.n	800da06 <__gethex+0x202>
 800daa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800daac:	42a8      	cmp	r0, r5
 800daae:	dd72      	ble.n	800db96 <__gethex+0x392>
 800dab0:	1b45      	subs	r5, r0, r5
 800dab2:	42ae      	cmp	r6, r5
 800dab4:	dc36      	bgt.n	800db24 <__gethex+0x320>
 800dab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d02a      	beq.n	800db14 <__gethex+0x310>
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d02c      	beq.n	800db1c <__gethex+0x318>
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d11c      	bne.n	800db00 <__gethex+0x2fc>
 800dac6:	42ae      	cmp	r6, r5
 800dac8:	d11a      	bne.n	800db00 <__gethex+0x2fc>
 800daca:	2e01      	cmp	r6, #1
 800dacc:	d112      	bne.n	800daf4 <__gethex+0x2f0>
 800dace:	9a04      	ldr	r2, [sp, #16]
 800dad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	2301      	movs	r3, #1
 800dad8:	6123      	str	r3, [r4, #16]
 800dada:	f8c9 3000 	str.w	r3, [r9]
 800dade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dae0:	2762      	movs	r7, #98	; 0x62
 800dae2:	601c      	str	r4, [r3, #0]
 800dae4:	e723      	b.n	800d92e <__gethex+0x12a>
 800dae6:	bf00      	nop
 800dae8:	0800ff20 	.word	0x0800ff20
 800daec:	0800fea9 	.word	0x0800fea9
 800daf0:	0800feba 	.word	0x0800feba
 800daf4:	1e71      	subs	r1, r6, #1
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 fec6 	bl	800e888 <__any_on>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1e6      	bne.n	800dace <__gethex+0x2ca>
 800db00:	ee18 0a10 	vmov	r0, s16
 800db04:	4621      	mov	r1, r4
 800db06:	f000 fa5f 	bl	800dfc8 <_Bfree>
 800db0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db0c:	2300      	movs	r3, #0
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	2750      	movs	r7, #80	; 0x50
 800db12:	e70c      	b.n	800d92e <__gethex+0x12a>
 800db14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1f2      	bne.n	800db00 <__gethex+0x2fc>
 800db1a:	e7d8      	b.n	800dace <__gethex+0x2ca>
 800db1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1d5      	bne.n	800dace <__gethex+0x2ca>
 800db22:	e7ed      	b.n	800db00 <__gethex+0x2fc>
 800db24:	1e6f      	subs	r7, r5, #1
 800db26:	f1ba 0f00 	cmp.w	sl, #0
 800db2a:	d131      	bne.n	800db90 <__gethex+0x38c>
 800db2c:	b127      	cbz	r7, 800db38 <__gethex+0x334>
 800db2e:	4639      	mov	r1, r7
 800db30:	4620      	mov	r0, r4
 800db32:	f000 fea9 	bl	800e888 <__any_on>
 800db36:	4682      	mov	sl, r0
 800db38:	117b      	asrs	r3, r7, #5
 800db3a:	2101      	movs	r1, #1
 800db3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db40:	f007 071f 	and.w	r7, r7, #31
 800db44:	fa01 f707 	lsl.w	r7, r1, r7
 800db48:	421f      	tst	r7, r3
 800db4a:	4629      	mov	r1, r5
 800db4c:	4620      	mov	r0, r4
 800db4e:	bf18      	it	ne
 800db50:	f04a 0a02 	orrne.w	sl, sl, #2
 800db54:	1b76      	subs	r6, r6, r5
 800db56:	f7ff fded 	bl	800d734 <rshift>
 800db5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db5e:	2702      	movs	r7, #2
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d048      	beq.n	800dbf8 <__gethex+0x3f4>
 800db66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d015      	beq.n	800db9a <__gethex+0x396>
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d017      	beq.n	800dba2 <__gethex+0x39e>
 800db72:	2b01      	cmp	r3, #1
 800db74:	d109      	bne.n	800db8a <__gethex+0x386>
 800db76:	f01a 0f02 	tst.w	sl, #2
 800db7a:	d006      	beq.n	800db8a <__gethex+0x386>
 800db7c:	f8d9 0000 	ldr.w	r0, [r9]
 800db80:	ea4a 0a00 	orr.w	sl, sl, r0
 800db84:	f01a 0f01 	tst.w	sl, #1
 800db88:	d10e      	bne.n	800dba8 <__gethex+0x3a4>
 800db8a:	f047 0710 	orr.w	r7, r7, #16
 800db8e:	e033      	b.n	800dbf8 <__gethex+0x3f4>
 800db90:	f04f 0a01 	mov.w	sl, #1
 800db94:	e7d0      	b.n	800db38 <__gethex+0x334>
 800db96:	2701      	movs	r7, #1
 800db98:	e7e2      	b.n	800db60 <__gethex+0x35c>
 800db9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db9c:	f1c3 0301 	rsb	r3, r3, #1
 800dba0:	9315      	str	r3, [sp, #84]	; 0x54
 800dba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d0f0      	beq.n	800db8a <__gethex+0x386>
 800dba8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbac:	f104 0314 	add.w	r3, r4, #20
 800dbb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbb8:	f04f 0c00 	mov.w	ip, #0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dbc6:	d01c      	beq.n	800dc02 <__gethex+0x3fe>
 800dbc8:	3201      	adds	r2, #1
 800dbca:	6002      	str	r2, [r0, #0]
 800dbcc:	2f02      	cmp	r7, #2
 800dbce:	f104 0314 	add.w	r3, r4, #20
 800dbd2:	d13f      	bne.n	800dc54 <__gethex+0x450>
 800dbd4:	f8d8 2000 	ldr.w	r2, [r8]
 800dbd8:	3a01      	subs	r2, #1
 800dbda:	42b2      	cmp	r2, r6
 800dbdc:	d10a      	bne.n	800dbf4 <__gethex+0x3f0>
 800dbde:	1171      	asrs	r1, r6, #5
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbe6:	f006 061f 	and.w	r6, r6, #31
 800dbea:	fa02 f606 	lsl.w	r6, r2, r6
 800dbee:	421e      	tst	r6, r3
 800dbf0:	bf18      	it	ne
 800dbf2:	4617      	movne	r7, r2
 800dbf4:	f047 0720 	orr.w	r7, r7, #32
 800dbf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbfa:	601c      	str	r4, [r3, #0]
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	601d      	str	r5, [r3, #0]
 800dc00:	e695      	b.n	800d92e <__gethex+0x12a>
 800dc02:	4299      	cmp	r1, r3
 800dc04:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc08:	d8d8      	bhi.n	800dbbc <__gethex+0x3b8>
 800dc0a:	68a3      	ldr	r3, [r4, #8]
 800dc0c:	459b      	cmp	fp, r3
 800dc0e:	db19      	blt.n	800dc44 <__gethex+0x440>
 800dc10:	6861      	ldr	r1, [r4, #4]
 800dc12:	ee18 0a10 	vmov	r0, s16
 800dc16:	3101      	adds	r1, #1
 800dc18:	f000 f996 	bl	800df48 <_Balloc>
 800dc1c:	4681      	mov	r9, r0
 800dc1e:	b918      	cbnz	r0, 800dc28 <__gethex+0x424>
 800dc20:	4b1a      	ldr	r3, [pc, #104]	; (800dc8c <__gethex+0x488>)
 800dc22:	4602      	mov	r2, r0
 800dc24:	2184      	movs	r1, #132	; 0x84
 800dc26:	e6a8      	b.n	800d97a <__gethex+0x176>
 800dc28:	6922      	ldr	r2, [r4, #16]
 800dc2a:	3202      	adds	r2, #2
 800dc2c:	f104 010c 	add.w	r1, r4, #12
 800dc30:	0092      	lsls	r2, r2, #2
 800dc32:	300c      	adds	r0, #12
 800dc34:	f7fc fc90 	bl	800a558 <memcpy>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	ee18 0a10 	vmov	r0, s16
 800dc3e:	f000 f9c3 	bl	800dfc8 <_Bfree>
 800dc42:	464c      	mov	r4, r9
 800dc44:	6923      	ldr	r3, [r4, #16]
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc4c:	6122      	str	r2, [r4, #16]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	615a      	str	r2, [r3, #20]
 800dc52:	e7bb      	b.n	800dbcc <__gethex+0x3c8>
 800dc54:	6922      	ldr	r2, [r4, #16]
 800dc56:	455a      	cmp	r2, fp
 800dc58:	dd0b      	ble.n	800dc72 <__gethex+0x46e>
 800dc5a:	2101      	movs	r1, #1
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f7ff fd69 	bl	800d734 <rshift>
 800dc62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc66:	3501      	adds	r5, #1
 800dc68:	42ab      	cmp	r3, r5
 800dc6a:	f6ff aed0 	blt.w	800da0e <__gethex+0x20a>
 800dc6e:	2701      	movs	r7, #1
 800dc70:	e7c0      	b.n	800dbf4 <__gethex+0x3f0>
 800dc72:	f016 061f 	ands.w	r6, r6, #31
 800dc76:	d0fa      	beq.n	800dc6e <__gethex+0x46a>
 800dc78:	4453      	add	r3, sl
 800dc7a:	f1c6 0620 	rsb	r6, r6, #32
 800dc7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc82:	f000 fa53 	bl	800e12c <__hi0bits>
 800dc86:	42b0      	cmp	r0, r6
 800dc88:	dbe7      	blt.n	800dc5a <__gethex+0x456>
 800dc8a:	e7f0      	b.n	800dc6e <__gethex+0x46a>
 800dc8c:	0800fea9 	.word	0x0800fea9

0800dc90 <L_shift>:
 800dc90:	f1c2 0208 	rsb	r2, r2, #8
 800dc94:	0092      	lsls	r2, r2, #2
 800dc96:	b570      	push	{r4, r5, r6, lr}
 800dc98:	f1c2 0620 	rsb	r6, r2, #32
 800dc9c:	6843      	ldr	r3, [r0, #4]
 800dc9e:	6804      	ldr	r4, [r0, #0]
 800dca0:	fa03 f506 	lsl.w	r5, r3, r6
 800dca4:	432c      	orrs	r4, r5
 800dca6:	40d3      	lsrs	r3, r2
 800dca8:	6004      	str	r4, [r0, #0]
 800dcaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcae:	4288      	cmp	r0, r1
 800dcb0:	d3f4      	bcc.n	800dc9c <L_shift+0xc>
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}

0800dcb4 <__match>:
 800dcb4:	b530      	push	{r4, r5, lr}
 800dcb6:	6803      	ldr	r3, [r0, #0]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcbe:	b914      	cbnz	r4, 800dcc6 <__match+0x12>
 800dcc0:	6003      	str	r3, [r0, #0]
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	bd30      	pop	{r4, r5, pc}
 800dcc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcce:	2d19      	cmp	r5, #25
 800dcd0:	bf98      	it	ls
 800dcd2:	3220      	addls	r2, #32
 800dcd4:	42a2      	cmp	r2, r4
 800dcd6:	d0f0      	beq.n	800dcba <__match+0x6>
 800dcd8:	2000      	movs	r0, #0
 800dcda:	e7f3      	b.n	800dcc4 <__match+0x10>

0800dcdc <__hexnan>:
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	680b      	ldr	r3, [r1, #0]
 800dce2:	115e      	asrs	r6, r3, #5
 800dce4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dce8:	f013 031f 	ands.w	r3, r3, #31
 800dcec:	b087      	sub	sp, #28
 800dcee:	bf18      	it	ne
 800dcf0:	3604      	addne	r6, #4
 800dcf2:	2500      	movs	r5, #0
 800dcf4:	1f37      	subs	r7, r6, #4
 800dcf6:	4690      	mov	r8, r2
 800dcf8:	6802      	ldr	r2, [r0, #0]
 800dcfa:	9301      	str	r3, [sp, #4]
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd02:	46b9      	mov	r9, r7
 800dd04:	463c      	mov	r4, r7
 800dd06:	9502      	str	r5, [sp, #8]
 800dd08:	46ab      	mov	fp, r5
 800dd0a:	7851      	ldrb	r1, [r2, #1]
 800dd0c:	1c53      	adds	r3, r2, #1
 800dd0e:	9303      	str	r3, [sp, #12]
 800dd10:	b341      	cbz	r1, 800dd64 <__hexnan+0x88>
 800dd12:	4608      	mov	r0, r1
 800dd14:	9205      	str	r2, [sp, #20]
 800dd16:	9104      	str	r1, [sp, #16]
 800dd18:	f7ff fd5e 	bl	800d7d8 <__hexdig_fun>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d14f      	bne.n	800ddc0 <__hexnan+0xe4>
 800dd20:	9904      	ldr	r1, [sp, #16]
 800dd22:	9a05      	ldr	r2, [sp, #20]
 800dd24:	2920      	cmp	r1, #32
 800dd26:	d818      	bhi.n	800dd5a <__hexnan+0x7e>
 800dd28:	9b02      	ldr	r3, [sp, #8]
 800dd2a:	459b      	cmp	fp, r3
 800dd2c:	dd13      	ble.n	800dd56 <__hexnan+0x7a>
 800dd2e:	454c      	cmp	r4, r9
 800dd30:	d206      	bcs.n	800dd40 <__hexnan+0x64>
 800dd32:	2d07      	cmp	r5, #7
 800dd34:	dc04      	bgt.n	800dd40 <__hexnan+0x64>
 800dd36:	462a      	mov	r2, r5
 800dd38:	4649      	mov	r1, r9
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff ffa8 	bl	800dc90 <L_shift>
 800dd40:	4544      	cmp	r4, r8
 800dd42:	d950      	bls.n	800dde6 <__hexnan+0x10a>
 800dd44:	2300      	movs	r3, #0
 800dd46:	f1a4 0904 	sub.w	r9, r4, #4
 800dd4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd4e:	f8cd b008 	str.w	fp, [sp, #8]
 800dd52:	464c      	mov	r4, r9
 800dd54:	461d      	mov	r5, r3
 800dd56:	9a03      	ldr	r2, [sp, #12]
 800dd58:	e7d7      	b.n	800dd0a <__hexnan+0x2e>
 800dd5a:	2929      	cmp	r1, #41	; 0x29
 800dd5c:	d156      	bne.n	800de0c <__hexnan+0x130>
 800dd5e:	3202      	adds	r2, #2
 800dd60:	f8ca 2000 	str.w	r2, [sl]
 800dd64:	f1bb 0f00 	cmp.w	fp, #0
 800dd68:	d050      	beq.n	800de0c <__hexnan+0x130>
 800dd6a:	454c      	cmp	r4, r9
 800dd6c:	d206      	bcs.n	800dd7c <__hexnan+0xa0>
 800dd6e:	2d07      	cmp	r5, #7
 800dd70:	dc04      	bgt.n	800dd7c <__hexnan+0xa0>
 800dd72:	462a      	mov	r2, r5
 800dd74:	4649      	mov	r1, r9
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7ff ff8a 	bl	800dc90 <L_shift>
 800dd7c:	4544      	cmp	r4, r8
 800dd7e:	d934      	bls.n	800ddea <__hexnan+0x10e>
 800dd80:	f1a8 0204 	sub.w	r2, r8, #4
 800dd84:	4623      	mov	r3, r4
 800dd86:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd8e:	429f      	cmp	r7, r3
 800dd90:	d2f9      	bcs.n	800dd86 <__hexnan+0xaa>
 800dd92:	1b3b      	subs	r3, r7, r4
 800dd94:	f023 0303 	bic.w	r3, r3, #3
 800dd98:	3304      	adds	r3, #4
 800dd9a:	3401      	adds	r4, #1
 800dd9c:	3e03      	subs	r6, #3
 800dd9e:	42b4      	cmp	r4, r6
 800dda0:	bf88      	it	hi
 800dda2:	2304      	movhi	r3, #4
 800dda4:	4443      	add	r3, r8
 800dda6:	2200      	movs	r2, #0
 800dda8:	f843 2b04 	str.w	r2, [r3], #4
 800ddac:	429f      	cmp	r7, r3
 800ddae:	d2fb      	bcs.n	800dda8 <__hexnan+0xcc>
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	b91b      	cbnz	r3, 800ddbc <__hexnan+0xe0>
 800ddb4:	4547      	cmp	r7, r8
 800ddb6:	d127      	bne.n	800de08 <__hexnan+0x12c>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	603b      	str	r3, [r7, #0]
 800ddbc:	2005      	movs	r0, #5
 800ddbe:	e026      	b.n	800de0e <__hexnan+0x132>
 800ddc0:	3501      	adds	r5, #1
 800ddc2:	2d08      	cmp	r5, #8
 800ddc4:	f10b 0b01 	add.w	fp, fp, #1
 800ddc8:	dd06      	ble.n	800ddd8 <__hexnan+0xfc>
 800ddca:	4544      	cmp	r4, r8
 800ddcc:	d9c3      	bls.n	800dd56 <__hexnan+0x7a>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddd4:	2501      	movs	r5, #1
 800ddd6:	3c04      	subs	r4, #4
 800ddd8:	6822      	ldr	r2, [r4, #0]
 800ddda:	f000 000f 	and.w	r0, r0, #15
 800ddde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dde2:	6022      	str	r2, [r4, #0]
 800dde4:	e7b7      	b.n	800dd56 <__hexnan+0x7a>
 800dde6:	2508      	movs	r5, #8
 800dde8:	e7b5      	b.n	800dd56 <__hexnan+0x7a>
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d0df      	beq.n	800ddb0 <__hexnan+0xd4>
 800ddf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddf4:	f1c3 0320 	rsb	r3, r3, #32
 800ddf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de00:	401a      	ands	r2, r3
 800de02:	f846 2c04 	str.w	r2, [r6, #-4]
 800de06:	e7d3      	b.n	800ddb0 <__hexnan+0xd4>
 800de08:	3f04      	subs	r7, #4
 800de0a:	e7d1      	b.n	800ddb0 <__hexnan+0xd4>
 800de0c:	2004      	movs	r0, #4
 800de0e:	b007      	add	sp, #28
 800de10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de14 <_localeconv_r>:
 800de14:	4800      	ldr	r0, [pc, #0]	; (800de18 <_localeconv_r+0x4>)
 800de16:	4770      	bx	lr
 800de18:	20000184 	.word	0x20000184

0800de1c <_lseek_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d07      	ldr	r5, [pc, #28]	; (800de3c <_lseek_r+0x20>)
 800de20:	4604      	mov	r4, r0
 800de22:	4608      	mov	r0, r1
 800de24:	4611      	mov	r1, r2
 800de26:	2200      	movs	r2, #0
 800de28:	602a      	str	r2, [r5, #0]
 800de2a:	461a      	mov	r2, r3
 800de2c:	f7f5 fe29 	bl	8003a82 <_lseek>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_lseek_r+0x1e>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_lseek_r+0x1e>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	20000924 	.word	0x20000924

0800de40 <__swhatbuf_r>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	460e      	mov	r6, r1
 800de44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de48:	2900      	cmp	r1, #0
 800de4a:	b096      	sub	sp, #88	; 0x58
 800de4c:	4614      	mov	r4, r2
 800de4e:	461d      	mov	r5, r3
 800de50:	da08      	bge.n	800de64 <__swhatbuf_r+0x24>
 800de52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	602a      	str	r2, [r5, #0]
 800de5a:	061a      	lsls	r2, r3, #24
 800de5c:	d410      	bmi.n	800de80 <__swhatbuf_r+0x40>
 800de5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de62:	e00e      	b.n	800de82 <__swhatbuf_r+0x42>
 800de64:	466a      	mov	r2, sp
 800de66:	f000 ff4d 	bl	800ed04 <_fstat_r>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	dbf1      	blt.n	800de52 <__swhatbuf_r+0x12>
 800de6e:	9a01      	ldr	r2, [sp, #4]
 800de70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de78:	425a      	negs	r2, r3
 800de7a:	415a      	adcs	r2, r3
 800de7c:	602a      	str	r2, [r5, #0]
 800de7e:	e7ee      	b.n	800de5e <__swhatbuf_r+0x1e>
 800de80:	2340      	movs	r3, #64	; 0x40
 800de82:	2000      	movs	r0, #0
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	b016      	add	sp, #88	; 0x58
 800de88:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de8c <__smakebuf_r>:
 800de8c:	898b      	ldrh	r3, [r1, #12]
 800de8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de90:	079d      	lsls	r5, r3, #30
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	d507      	bpl.n	800dea8 <__smakebuf_r+0x1c>
 800de98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	6123      	str	r3, [r4, #16]
 800dea0:	2301      	movs	r3, #1
 800dea2:	6163      	str	r3, [r4, #20]
 800dea4:	b002      	add	sp, #8
 800dea6:	bd70      	pop	{r4, r5, r6, pc}
 800dea8:	ab01      	add	r3, sp, #4
 800deaa:	466a      	mov	r2, sp
 800deac:	f7ff ffc8 	bl	800de40 <__swhatbuf_r>
 800deb0:	9900      	ldr	r1, [sp, #0]
 800deb2:	4605      	mov	r5, r0
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7fc fbeb 	bl	800a690 <_malloc_r>
 800deba:	b948      	cbnz	r0, 800ded0 <__smakebuf_r+0x44>
 800debc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dec0:	059a      	lsls	r2, r3, #22
 800dec2:	d4ef      	bmi.n	800dea4 <__smakebuf_r+0x18>
 800dec4:	f023 0303 	bic.w	r3, r3, #3
 800dec8:	f043 0302 	orr.w	r3, r3, #2
 800decc:	81a3      	strh	r3, [r4, #12]
 800dece:	e7e3      	b.n	800de98 <__smakebuf_r+0xc>
 800ded0:	4b0d      	ldr	r3, [pc, #52]	; (800df08 <__smakebuf_r+0x7c>)
 800ded2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	6020      	str	r0, [r4, #0]
 800ded8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	9b00      	ldr	r3, [sp, #0]
 800dee0:	6163      	str	r3, [r4, #20]
 800dee2:	9b01      	ldr	r3, [sp, #4]
 800dee4:	6120      	str	r0, [r4, #16]
 800dee6:	b15b      	cbz	r3, 800df00 <__smakebuf_r+0x74>
 800dee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deec:	4630      	mov	r0, r6
 800deee:	f000 ff1b 	bl	800ed28 <_isatty_r>
 800def2:	b128      	cbz	r0, 800df00 <__smakebuf_r+0x74>
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	f023 0303 	bic.w	r3, r3, #3
 800defa:	f043 0301 	orr.w	r3, r3, #1
 800defe:	81a3      	strh	r3, [r4, #12]
 800df00:	89a0      	ldrh	r0, [r4, #12]
 800df02:	4305      	orrs	r5, r0
 800df04:	81a5      	strh	r5, [r4, #12]
 800df06:	e7cd      	b.n	800dea4 <__smakebuf_r+0x18>
 800df08:	0800a301 	.word	0x0800a301

0800df0c <__ascii_mbtowc>:
 800df0c:	b082      	sub	sp, #8
 800df0e:	b901      	cbnz	r1, 800df12 <__ascii_mbtowc+0x6>
 800df10:	a901      	add	r1, sp, #4
 800df12:	b142      	cbz	r2, 800df26 <__ascii_mbtowc+0x1a>
 800df14:	b14b      	cbz	r3, 800df2a <__ascii_mbtowc+0x1e>
 800df16:	7813      	ldrb	r3, [r2, #0]
 800df18:	600b      	str	r3, [r1, #0]
 800df1a:	7812      	ldrb	r2, [r2, #0]
 800df1c:	1e10      	subs	r0, r2, #0
 800df1e:	bf18      	it	ne
 800df20:	2001      	movne	r0, #1
 800df22:	b002      	add	sp, #8
 800df24:	4770      	bx	lr
 800df26:	4610      	mov	r0, r2
 800df28:	e7fb      	b.n	800df22 <__ascii_mbtowc+0x16>
 800df2a:	f06f 0001 	mvn.w	r0, #1
 800df2e:	e7f8      	b.n	800df22 <__ascii_mbtowc+0x16>

0800df30 <__malloc_lock>:
 800df30:	4801      	ldr	r0, [pc, #4]	; (800df38 <__malloc_lock+0x8>)
 800df32:	f7fc baee 	b.w	800a512 <__retarget_lock_acquire_recursive>
 800df36:	bf00      	nop
 800df38:	20000918 	.word	0x20000918

0800df3c <__malloc_unlock>:
 800df3c:	4801      	ldr	r0, [pc, #4]	; (800df44 <__malloc_unlock+0x8>)
 800df3e:	f7fc bae9 	b.w	800a514 <__retarget_lock_release_recursive>
 800df42:	bf00      	nop
 800df44:	20000918 	.word	0x20000918

0800df48 <_Balloc>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df4c:	4604      	mov	r4, r0
 800df4e:	460d      	mov	r5, r1
 800df50:	b976      	cbnz	r6, 800df70 <_Balloc+0x28>
 800df52:	2010      	movs	r0, #16
 800df54:	f7fc fae0 	bl	800a518 <malloc>
 800df58:	4602      	mov	r2, r0
 800df5a:	6260      	str	r0, [r4, #36]	; 0x24
 800df5c:	b920      	cbnz	r0, 800df68 <_Balloc+0x20>
 800df5e:	4b18      	ldr	r3, [pc, #96]	; (800dfc0 <_Balloc+0x78>)
 800df60:	4818      	ldr	r0, [pc, #96]	; (800dfc4 <_Balloc+0x7c>)
 800df62:	2166      	movs	r1, #102	; 0x66
 800df64:	f7fe fd3c 	bl	800c9e0 <__assert_func>
 800df68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df6c:	6006      	str	r6, [r0, #0]
 800df6e:	60c6      	str	r6, [r0, #12]
 800df70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df72:	68f3      	ldr	r3, [r6, #12]
 800df74:	b183      	cbz	r3, 800df98 <_Balloc+0x50>
 800df76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df7e:	b9b8      	cbnz	r0, 800dfb0 <_Balloc+0x68>
 800df80:	2101      	movs	r1, #1
 800df82:	fa01 f605 	lsl.w	r6, r1, r5
 800df86:	1d72      	adds	r2, r6, #5
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 fc9d 	bl	800e8ca <_calloc_r>
 800df90:	b160      	cbz	r0, 800dfac <_Balloc+0x64>
 800df92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df96:	e00e      	b.n	800dfb6 <_Balloc+0x6e>
 800df98:	2221      	movs	r2, #33	; 0x21
 800df9a:	2104      	movs	r1, #4
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fc94 	bl	800e8ca <_calloc_r>
 800dfa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfa4:	60f0      	str	r0, [r6, #12]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1e4      	bne.n	800df76 <_Balloc+0x2e>
 800dfac:	2000      	movs	r0, #0
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	6802      	ldr	r2, [r0, #0]
 800dfb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfbc:	e7f7      	b.n	800dfae <_Balloc+0x66>
 800dfbe:	bf00      	nop
 800dfc0:	0800fc90 	.word	0x0800fc90
 800dfc4:	0800ff34 	.word	0x0800ff34

0800dfc8 <_Bfree>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfcc:	4605      	mov	r5, r0
 800dfce:	460c      	mov	r4, r1
 800dfd0:	b976      	cbnz	r6, 800dff0 <_Bfree+0x28>
 800dfd2:	2010      	movs	r0, #16
 800dfd4:	f7fc faa0 	bl	800a518 <malloc>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	6268      	str	r0, [r5, #36]	; 0x24
 800dfdc:	b920      	cbnz	r0, 800dfe8 <_Bfree+0x20>
 800dfde:	4b09      	ldr	r3, [pc, #36]	; (800e004 <_Bfree+0x3c>)
 800dfe0:	4809      	ldr	r0, [pc, #36]	; (800e008 <_Bfree+0x40>)
 800dfe2:	218a      	movs	r1, #138	; 0x8a
 800dfe4:	f7fe fcfc 	bl	800c9e0 <__assert_func>
 800dfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfec:	6006      	str	r6, [r0, #0]
 800dfee:	60c6      	str	r6, [r0, #12]
 800dff0:	b13c      	cbz	r4, 800e002 <_Bfree+0x3a>
 800dff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dff4:	6862      	ldr	r2, [r4, #4]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dffc:	6021      	str	r1, [r4, #0]
 800dffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e002:	bd70      	pop	{r4, r5, r6, pc}
 800e004:	0800fc90 	.word	0x0800fc90
 800e008:	0800ff34 	.word	0x0800ff34

0800e00c <__multadd>:
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	690d      	ldr	r5, [r1, #16]
 800e012:	4607      	mov	r7, r0
 800e014:	460c      	mov	r4, r1
 800e016:	461e      	mov	r6, r3
 800e018:	f101 0c14 	add.w	ip, r1, #20
 800e01c:	2000      	movs	r0, #0
 800e01e:	f8dc 3000 	ldr.w	r3, [ip]
 800e022:	b299      	uxth	r1, r3
 800e024:	fb02 6101 	mla	r1, r2, r1, r6
 800e028:	0c1e      	lsrs	r6, r3, #16
 800e02a:	0c0b      	lsrs	r3, r1, #16
 800e02c:	fb02 3306 	mla	r3, r2, r6, r3
 800e030:	b289      	uxth	r1, r1
 800e032:	3001      	adds	r0, #1
 800e034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e038:	4285      	cmp	r5, r0
 800e03a:	f84c 1b04 	str.w	r1, [ip], #4
 800e03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e042:	dcec      	bgt.n	800e01e <__multadd+0x12>
 800e044:	b30e      	cbz	r6, 800e08a <__multadd+0x7e>
 800e046:	68a3      	ldr	r3, [r4, #8]
 800e048:	42ab      	cmp	r3, r5
 800e04a:	dc19      	bgt.n	800e080 <__multadd+0x74>
 800e04c:	6861      	ldr	r1, [r4, #4]
 800e04e:	4638      	mov	r0, r7
 800e050:	3101      	adds	r1, #1
 800e052:	f7ff ff79 	bl	800df48 <_Balloc>
 800e056:	4680      	mov	r8, r0
 800e058:	b928      	cbnz	r0, 800e066 <__multadd+0x5a>
 800e05a:	4602      	mov	r2, r0
 800e05c:	4b0c      	ldr	r3, [pc, #48]	; (800e090 <__multadd+0x84>)
 800e05e:	480d      	ldr	r0, [pc, #52]	; (800e094 <__multadd+0x88>)
 800e060:	21b5      	movs	r1, #181	; 0xb5
 800e062:	f7fe fcbd 	bl	800c9e0 <__assert_func>
 800e066:	6922      	ldr	r2, [r4, #16]
 800e068:	3202      	adds	r2, #2
 800e06a:	f104 010c 	add.w	r1, r4, #12
 800e06e:	0092      	lsls	r2, r2, #2
 800e070:	300c      	adds	r0, #12
 800e072:	f7fc fa71 	bl	800a558 <memcpy>
 800e076:	4621      	mov	r1, r4
 800e078:	4638      	mov	r0, r7
 800e07a:	f7ff ffa5 	bl	800dfc8 <_Bfree>
 800e07e:	4644      	mov	r4, r8
 800e080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e084:	3501      	adds	r5, #1
 800e086:	615e      	str	r6, [r3, #20]
 800e088:	6125      	str	r5, [r4, #16]
 800e08a:	4620      	mov	r0, r4
 800e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e090:	0800fea9 	.word	0x0800fea9
 800e094:	0800ff34 	.word	0x0800ff34

0800e098 <__s2b>:
 800e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e09c:	460c      	mov	r4, r1
 800e09e:	4615      	mov	r5, r2
 800e0a0:	461f      	mov	r7, r3
 800e0a2:	2209      	movs	r2, #9
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	db09      	blt.n	800e0c8 <__s2b+0x30>
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff ff47 	bl	800df48 <_Balloc>
 800e0ba:	b940      	cbnz	r0, 800e0ce <__s2b+0x36>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	4b19      	ldr	r3, [pc, #100]	; (800e124 <__s2b+0x8c>)
 800e0c0:	4819      	ldr	r0, [pc, #100]	; (800e128 <__s2b+0x90>)
 800e0c2:	21ce      	movs	r1, #206	; 0xce
 800e0c4:	f7fe fc8c 	bl	800c9e0 <__assert_func>
 800e0c8:	0052      	lsls	r2, r2, #1
 800e0ca:	3101      	adds	r1, #1
 800e0cc:	e7f0      	b.n	800e0b0 <__s2b+0x18>
 800e0ce:	9b08      	ldr	r3, [sp, #32]
 800e0d0:	6143      	str	r3, [r0, #20]
 800e0d2:	2d09      	cmp	r5, #9
 800e0d4:	f04f 0301 	mov.w	r3, #1
 800e0d8:	6103      	str	r3, [r0, #16]
 800e0da:	dd16      	ble.n	800e10a <__s2b+0x72>
 800e0dc:	f104 0909 	add.w	r9, r4, #9
 800e0e0:	46c8      	mov	r8, r9
 800e0e2:	442c      	add	r4, r5
 800e0e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0e8:	4601      	mov	r1, r0
 800e0ea:	3b30      	subs	r3, #48	; 0x30
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff ff8c 	bl	800e00c <__multadd>
 800e0f4:	45a0      	cmp	r8, r4
 800e0f6:	d1f5      	bne.n	800e0e4 <__s2b+0x4c>
 800e0f8:	f1a5 0408 	sub.w	r4, r5, #8
 800e0fc:	444c      	add	r4, r9
 800e0fe:	1b2d      	subs	r5, r5, r4
 800e100:	1963      	adds	r3, r4, r5
 800e102:	42bb      	cmp	r3, r7
 800e104:	db04      	blt.n	800e110 <__s2b+0x78>
 800e106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10a:	340a      	adds	r4, #10
 800e10c:	2509      	movs	r5, #9
 800e10e:	e7f6      	b.n	800e0fe <__s2b+0x66>
 800e110:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e114:	4601      	mov	r1, r0
 800e116:	3b30      	subs	r3, #48	; 0x30
 800e118:	220a      	movs	r2, #10
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ff76 	bl	800e00c <__multadd>
 800e120:	e7ee      	b.n	800e100 <__s2b+0x68>
 800e122:	bf00      	nop
 800e124:	0800fea9 	.word	0x0800fea9
 800e128:	0800ff34 	.word	0x0800ff34

0800e12c <__hi0bits>:
 800e12c:	0c03      	lsrs	r3, r0, #16
 800e12e:	041b      	lsls	r3, r3, #16
 800e130:	b9d3      	cbnz	r3, 800e168 <__hi0bits+0x3c>
 800e132:	0400      	lsls	r0, r0, #16
 800e134:	2310      	movs	r3, #16
 800e136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e13a:	bf04      	itt	eq
 800e13c:	0200      	lsleq	r0, r0, #8
 800e13e:	3308      	addeq	r3, #8
 800e140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e144:	bf04      	itt	eq
 800e146:	0100      	lsleq	r0, r0, #4
 800e148:	3304      	addeq	r3, #4
 800e14a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e14e:	bf04      	itt	eq
 800e150:	0080      	lsleq	r0, r0, #2
 800e152:	3302      	addeq	r3, #2
 800e154:	2800      	cmp	r0, #0
 800e156:	db05      	blt.n	800e164 <__hi0bits+0x38>
 800e158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e15c:	f103 0301 	add.w	r3, r3, #1
 800e160:	bf08      	it	eq
 800e162:	2320      	moveq	r3, #32
 800e164:	4618      	mov	r0, r3
 800e166:	4770      	bx	lr
 800e168:	2300      	movs	r3, #0
 800e16a:	e7e4      	b.n	800e136 <__hi0bits+0xa>

0800e16c <__lo0bits>:
 800e16c:	6803      	ldr	r3, [r0, #0]
 800e16e:	f013 0207 	ands.w	r2, r3, #7
 800e172:	4601      	mov	r1, r0
 800e174:	d00b      	beq.n	800e18e <__lo0bits+0x22>
 800e176:	07da      	lsls	r2, r3, #31
 800e178:	d423      	bmi.n	800e1c2 <__lo0bits+0x56>
 800e17a:	0798      	lsls	r0, r3, #30
 800e17c:	bf49      	itett	mi
 800e17e:	085b      	lsrmi	r3, r3, #1
 800e180:	089b      	lsrpl	r3, r3, #2
 800e182:	2001      	movmi	r0, #1
 800e184:	600b      	strmi	r3, [r1, #0]
 800e186:	bf5c      	itt	pl
 800e188:	600b      	strpl	r3, [r1, #0]
 800e18a:	2002      	movpl	r0, #2
 800e18c:	4770      	bx	lr
 800e18e:	b298      	uxth	r0, r3
 800e190:	b9a8      	cbnz	r0, 800e1be <__lo0bits+0x52>
 800e192:	0c1b      	lsrs	r3, r3, #16
 800e194:	2010      	movs	r0, #16
 800e196:	b2da      	uxtb	r2, r3
 800e198:	b90a      	cbnz	r2, 800e19e <__lo0bits+0x32>
 800e19a:	3008      	adds	r0, #8
 800e19c:	0a1b      	lsrs	r3, r3, #8
 800e19e:	071a      	lsls	r2, r3, #28
 800e1a0:	bf04      	itt	eq
 800e1a2:	091b      	lsreq	r3, r3, #4
 800e1a4:	3004      	addeq	r0, #4
 800e1a6:	079a      	lsls	r2, r3, #30
 800e1a8:	bf04      	itt	eq
 800e1aa:	089b      	lsreq	r3, r3, #2
 800e1ac:	3002      	addeq	r0, #2
 800e1ae:	07da      	lsls	r2, r3, #31
 800e1b0:	d403      	bmi.n	800e1ba <__lo0bits+0x4e>
 800e1b2:	085b      	lsrs	r3, r3, #1
 800e1b4:	f100 0001 	add.w	r0, r0, #1
 800e1b8:	d005      	beq.n	800e1c6 <__lo0bits+0x5a>
 800e1ba:	600b      	str	r3, [r1, #0]
 800e1bc:	4770      	bx	lr
 800e1be:	4610      	mov	r0, r2
 800e1c0:	e7e9      	b.n	800e196 <__lo0bits+0x2a>
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	4770      	bx	lr
 800e1c6:	2020      	movs	r0, #32
 800e1c8:	4770      	bx	lr
	...

0800e1cc <__i2b>:
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	460c      	mov	r4, r1
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	f7ff feb9 	bl	800df48 <_Balloc>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	b928      	cbnz	r0, 800e1e6 <__i2b+0x1a>
 800e1da:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <__i2b+0x24>)
 800e1dc:	4805      	ldr	r0, [pc, #20]	; (800e1f4 <__i2b+0x28>)
 800e1de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1e2:	f7fe fbfd 	bl	800c9e0 <__assert_func>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	6144      	str	r4, [r0, #20]
 800e1ea:	6103      	str	r3, [r0, #16]
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800fea9 	.word	0x0800fea9
 800e1f4:	0800ff34 	.word	0x0800ff34

0800e1f8 <__multiply>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	4691      	mov	r9, r2
 800e1fe:	690a      	ldr	r2, [r1, #16]
 800e200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e204:	429a      	cmp	r2, r3
 800e206:	bfb8      	it	lt
 800e208:	460b      	movlt	r3, r1
 800e20a:	460c      	mov	r4, r1
 800e20c:	bfbc      	itt	lt
 800e20e:	464c      	movlt	r4, r9
 800e210:	4699      	movlt	r9, r3
 800e212:	6927      	ldr	r7, [r4, #16]
 800e214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e218:	68a3      	ldr	r3, [r4, #8]
 800e21a:	6861      	ldr	r1, [r4, #4]
 800e21c:	eb07 060a 	add.w	r6, r7, sl
 800e220:	42b3      	cmp	r3, r6
 800e222:	b085      	sub	sp, #20
 800e224:	bfb8      	it	lt
 800e226:	3101      	addlt	r1, #1
 800e228:	f7ff fe8e 	bl	800df48 <_Balloc>
 800e22c:	b930      	cbnz	r0, 800e23c <__multiply+0x44>
 800e22e:	4602      	mov	r2, r0
 800e230:	4b44      	ldr	r3, [pc, #272]	; (800e344 <__multiply+0x14c>)
 800e232:	4845      	ldr	r0, [pc, #276]	; (800e348 <__multiply+0x150>)
 800e234:	f240 115d 	movw	r1, #349	; 0x15d
 800e238:	f7fe fbd2 	bl	800c9e0 <__assert_func>
 800e23c:	f100 0514 	add.w	r5, r0, #20
 800e240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e244:	462b      	mov	r3, r5
 800e246:	2200      	movs	r2, #0
 800e248:	4543      	cmp	r3, r8
 800e24a:	d321      	bcc.n	800e290 <__multiply+0x98>
 800e24c:	f104 0314 	add.w	r3, r4, #20
 800e250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e254:	f109 0314 	add.w	r3, r9, #20
 800e258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e25c:	9202      	str	r2, [sp, #8]
 800e25e:	1b3a      	subs	r2, r7, r4
 800e260:	3a15      	subs	r2, #21
 800e262:	f022 0203 	bic.w	r2, r2, #3
 800e266:	3204      	adds	r2, #4
 800e268:	f104 0115 	add.w	r1, r4, #21
 800e26c:	428f      	cmp	r7, r1
 800e26e:	bf38      	it	cc
 800e270:	2204      	movcc	r2, #4
 800e272:	9201      	str	r2, [sp, #4]
 800e274:	9a02      	ldr	r2, [sp, #8]
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d80c      	bhi.n	800e296 <__multiply+0x9e>
 800e27c:	2e00      	cmp	r6, #0
 800e27e:	dd03      	ble.n	800e288 <__multiply+0x90>
 800e280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e284:	2b00      	cmp	r3, #0
 800e286:	d05a      	beq.n	800e33e <__multiply+0x146>
 800e288:	6106      	str	r6, [r0, #16]
 800e28a:	b005      	add	sp, #20
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e290:	f843 2b04 	str.w	r2, [r3], #4
 800e294:	e7d8      	b.n	800e248 <__multiply+0x50>
 800e296:	f8b3 a000 	ldrh.w	sl, [r3]
 800e29a:	f1ba 0f00 	cmp.w	sl, #0
 800e29e:	d024      	beq.n	800e2ea <__multiply+0xf2>
 800e2a0:	f104 0e14 	add.w	lr, r4, #20
 800e2a4:	46a9      	mov	r9, r5
 800e2a6:	f04f 0c00 	mov.w	ip, #0
 800e2aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800e2b2:	fa1f fb82 	uxth.w	fp, r2
 800e2b6:	b289      	uxth	r1, r1
 800e2b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e2bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800e2c4:	4461      	add	r1, ip
 800e2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2d2:	b289      	uxth	r1, r1
 800e2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2d8:	4577      	cmp	r7, lr
 800e2da:	f849 1b04 	str.w	r1, [r9], #4
 800e2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2e2:	d8e2      	bhi.n	800e2aa <__multiply+0xb2>
 800e2e4:	9a01      	ldr	r2, [sp, #4]
 800e2e6:	f845 c002 	str.w	ip, [r5, r2]
 800e2ea:	9a03      	ldr	r2, [sp, #12]
 800e2ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	f1b9 0f00 	cmp.w	r9, #0
 800e2f6:	d020      	beq.n	800e33a <__multiply+0x142>
 800e2f8:	6829      	ldr	r1, [r5, #0]
 800e2fa:	f104 0c14 	add.w	ip, r4, #20
 800e2fe:	46ae      	mov	lr, r5
 800e300:	f04f 0a00 	mov.w	sl, #0
 800e304:	f8bc b000 	ldrh.w	fp, [ip]
 800e308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e30c:	fb09 220b 	mla	r2, r9, fp, r2
 800e310:	4492      	add	sl, r2
 800e312:	b289      	uxth	r1, r1
 800e314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e318:	f84e 1b04 	str.w	r1, [lr], #4
 800e31c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e320:	f8be 1000 	ldrh.w	r1, [lr]
 800e324:	0c12      	lsrs	r2, r2, #16
 800e326:	fb09 1102 	mla	r1, r9, r2, r1
 800e32a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e32e:	4567      	cmp	r7, ip
 800e330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e334:	d8e6      	bhi.n	800e304 <__multiply+0x10c>
 800e336:	9a01      	ldr	r2, [sp, #4]
 800e338:	50a9      	str	r1, [r5, r2]
 800e33a:	3504      	adds	r5, #4
 800e33c:	e79a      	b.n	800e274 <__multiply+0x7c>
 800e33e:	3e01      	subs	r6, #1
 800e340:	e79c      	b.n	800e27c <__multiply+0x84>
 800e342:	bf00      	nop
 800e344:	0800fea9 	.word	0x0800fea9
 800e348:	0800ff34 	.word	0x0800ff34

0800e34c <__pow5mult>:
 800e34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e350:	4615      	mov	r5, r2
 800e352:	f012 0203 	ands.w	r2, r2, #3
 800e356:	4606      	mov	r6, r0
 800e358:	460f      	mov	r7, r1
 800e35a:	d007      	beq.n	800e36c <__pow5mult+0x20>
 800e35c:	4c25      	ldr	r4, [pc, #148]	; (800e3f4 <__pow5mult+0xa8>)
 800e35e:	3a01      	subs	r2, #1
 800e360:	2300      	movs	r3, #0
 800e362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e366:	f7ff fe51 	bl	800e00c <__multadd>
 800e36a:	4607      	mov	r7, r0
 800e36c:	10ad      	asrs	r5, r5, #2
 800e36e:	d03d      	beq.n	800e3ec <__pow5mult+0xa0>
 800e370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e372:	b97c      	cbnz	r4, 800e394 <__pow5mult+0x48>
 800e374:	2010      	movs	r0, #16
 800e376:	f7fc f8cf 	bl	800a518 <malloc>
 800e37a:	4602      	mov	r2, r0
 800e37c:	6270      	str	r0, [r6, #36]	; 0x24
 800e37e:	b928      	cbnz	r0, 800e38c <__pow5mult+0x40>
 800e380:	4b1d      	ldr	r3, [pc, #116]	; (800e3f8 <__pow5mult+0xac>)
 800e382:	481e      	ldr	r0, [pc, #120]	; (800e3fc <__pow5mult+0xb0>)
 800e384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e388:	f7fe fb2a 	bl	800c9e0 <__assert_func>
 800e38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e390:	6004      	str	r4, [r0, #0]
 800e392:	60c4      	str	r4, [r0, #12]
 800e394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e39c:	b94c      	cbnz	r4, 800e3b2 <__pow5mult+0x66>
 800e39e:	f240 2171 	movw	r1, #625	; 0x271
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f7ff ff12 	bl	800e1cc <__i2b>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	f04f 0900 	mov.w	r9, #0
 800e3b6:	07eb      	lsls	r3, r5, #31
 800e3b8:	d50a      	bpl.n	800e3d0 <__pow5mult+0x84>
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	4622      	mov	r2, r4
 800e3be:	4630      	mov	r0, r6
 800e3c0:	f7ff ff1a 	bl	800e1f8 <__multiply>
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7ff fdfd 	bl	800dfc8 <_Bfree>
 800e3ce:	4647      	mov	r7, r8
 800e3d0:	106d      	asrs	r5, r5, #1
 800e3d2:	d00b      	beq.n	800e3ec <__pow5mult+0xa0>
 800e3d4:	6820      	ldr	r0, [r4, #0]
 800e3d6:	b938      	cbnz	r0, 800e3e8 <__pow5mult+0x9c>
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f7ff ff0b 	bl	800e1f8 <__multiply>
 800e3e2:	6020      	str	r0, [r4, #0]
 800e3e4:	f8c0 9000 	str.w	r9, [r0]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	e7e4      	b.n	800e3b6 <__pow5mult+0x6a>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08010080 	.word	0x08010080
 800e3f8:	0800fc90 	.word	0x0800fc90
 800e3fc:	0800ff34 	.word	0x0800ff34

0800e400 <__lshift>:
 800e400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e404:	460c      	mov	r4, r1
 800e406:	6849      	ldr	r1, [r1, #4]
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e40e:	68a3      	ldr	r3, [r4, #8]
 800e410:	4607      	mov	r7, r0
 800e412:	4691      	mov	r9, r2
 800e414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e418:	f108 0601 	add.w	r6, r8, #1
 800e41c:	42b3      	cmp	r3, r6
 800e41e:	db0b      	blt.n	800e438 <__lshift+0x38>
 800e420:	4638      	mov	r0, r7
 800e422:	f7ff fd91 	bl	800df48 <_Balloc>
 800e426:	4605      	mov	r5, r0
 800e428:	b948      	cbnz	r0, 800e43e <__lshift+0x3e>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b2a      	ldr	r3, [pc, #168]	; (800e4d8 <__lshift+0xd8>)
 800e42e:	482b      	ldr	r0, [pc, #172]	; (800e4dc <__lshift+0xdc>)
 800e430:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e434:	f7fe fad4 	bl	800c9e0 <__assert_func>
 800e438:	3101      	adds	r1, #1
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	e7ee      	b.n	800e41c <__lshift+0x1c>
 800e43e:	2300      	movs	r3, #0
 800e440:	f100 0114 	add.w	r1, r0, #20
 800e444:	f100 0210 	add.w	r2, r0, #16
 800e448:	4618      	mov	r0, r3
 800e44a:	4553      	cmp	r3, sl
 800e44c:	db37      	blt.n	800e4be <__lshift+0xbe>
 800e44e:	6920      	ldr	r0, [r4, #16]
 800e450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e454:	f104 0314 	add.w	r3, r4, #20
 800e458:	f019 091f 	ands.w	r9, r9, #31
 800e45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e464:	d02f      	beq.n	800e4c6 <__lshift+0xc6>
 800e466:	f1c9 0e20 	rsb	lr, r9, #32
 800e46a:	468a      	mov	sl, r1
 800e46c:	f04f 0c00 	mov.w	ip, #0
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	fa02 f209 	lsl.w	r2, r2, r9
 800e476:	ea42 020c 	orr.w	r2, r2, ip
 800e47a:	f84a 2b04 	str.w	r2, [sl], #4
 800e47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e482:	4298      	cmp	r0, r3
 800e484:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e488:	d8f2      	bhi.n	800e470 <__lshift+0x70>
 800e48a:	1b03      	subs	r3, r0, r4
 800e48c:	3b15      	subs	r3, #21
 800e48e:	f023 0303 	bic.w	r3, r3, #3
 800e492:	3304      	adds	r3, #4
 800e494:	f104 0215 	add.w	r2, r4, #21
 800e498:	4290      	cmp	r0, r2
 800e49a:	bf38      	it	cc
 800e49c:	2304      	movcc	r3, #4
 800e49e:	f841 c003 	str.w	ip, [r1, r3]
 800e4a2:	f1bc 0f00 	cmp.w	ip, #0
 800e4a6:	d001      	beq.n	800e4ac <__lshift+0xac>
 800e4a8:	f108 0602 	add.w	r6, r8, #2
 800e4ac:	3e01      	subs	r6, #1
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	612e      	str	r6, [r5, #16]
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	f7ff fd88 	bl	800dfc8 <_Bfree>
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4be:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	e7c1      	b.n	800e44a <__lshift+0x4a>
 800e4c6:	3904      	subs	r1, #4
 800e4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4d0:	4298      	cmp	r0, r3
 800e4d2:	d8f9      	bhi.n	800e4c8 <__lshift+0xc8>
 800e4d4:	e7ea      	b.n	800e4ac <__lshift+0xac>
 800e4d6:	bf00      	nop
 800e4d8:	0800fea9 	.word	0x0800fea9
 800e4dc:	0800ff34 	.word	0x0800ff34

0800e4e0 <__mcmp>:
 800e4e0:	b530      	push	{r4, r5, lr}
 800e4e2:	6902      	ldr	r2, [r0, #16]
 800e4e4:	690c      	ldr	r4, [r1, #16]
 800e4e6:	1b12      	subs	r2, r2, r4
 800e4e8:	d10e      	bne.n	800e508 <__mcmp+0x28>
 800e4ea:	f100 0314 	add.w	r3, r0, #20
 800e4ee:	3114      	adds	r1, #20
 800e4f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e500:	42a5      	cmp	r5, r4
 800e502:	d003      	beq.n	800e50c <__mcmp+0x2c>
 800e504:	d305      	bcc.n	800e512 <__mcmp+0x32>
 800e506:	2201      	movs	r2, #1
 800e508:	4610      	mov	r0, r2
 800e50a:	bd30      	pop	{r4, r5, pc}
 800e50c:	4283      	cmp	r3, r0
 800e50e:	d3f3      	bcc.n	800e4f8 <__mcmp+0x18>
 800e510:	e7fa      	b.n	800e508 <__mcmp+0x28>
 800e512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e516:	e7f7      	b.n	800e508 <__mcmp+0x28>

0800e518 <__mdiff>:
 800e518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	460c      	mov	r4, r1
 800e51e:	4606      	mov	r6, r0
 800e520:	4611      	mov	r1, r2
 800e522:	4620      	mov	r0, r4
 800e524:	4690      	mov	r8, r2
 800e526:	f7ff ffdb 	bl	800e4e0 <__mcmp>
 800e52a:	1e05      	subs	r5, r0, #0
 800e52c:	d110      	bne.n	800e550 <__mdiff+0x38>
 800e52e:	4629      	mov	r1, r5
 800e530:	4630      	mov	r0, r6
 800e532:	f7ff fd09 	bl	800df48 <_Balloc>
 800e536:	b930      	cbnz	r0, 800e546 <__mdiff+0x2e>
 800e538:	4b3a      	ldr	r3, [pc, #232]	; (800e624 <__mdiff+0x10c>)
 800e53a:	4602      	mov	r2, r0
 800e53c:	f240 2132 	movw	r1, #562	; 0x232
 800e540:	4839      	ldr	r0, [pc, #228]	; (800e628 <__mdiff+0x110>)
 800e542:	f7fe fa4d 	bl	800c9e0 <__assert_func>
 800e546:	2301      	movs	r3, #1
 800e548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e54c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e550:	bfa4      	itt	ge
 800e552:	4643      	movge	r3, r8
 800e554:	46a0      	movge	r8, r4
 800e556:	4630      	mov	r0, r6
 800e558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e55c:	bfa6      	itte	ge
 800e55e:	461c      	movge	r4, r3
 800e560:	2500      	movge	r5, #0
 800e562:	2501      	movlt	r5, #1
 800e564:	f7ff fcf0 	bl	800df48 <_Balloc>
 800e568:	b920      	cbnz	r0, 800e574 <__mdiff+0x5c>
 800e56a:	4b2e      	ldr	r3, [pc, #184]	; (800e624 <__mdiff+0x10c>)
 800e56c:	4602      	mov	r2, r0
 800e56e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e572:	e7e5      	b.n	800e540 <__mdiff+0x28>
 800e574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e578:	6926      	ldr	r6, [r4, #16]
 800e57a:	60c5      	str	r5, [r0, #12]
 800e57c:	f104 0914 	add.w	r9, r4, #20
 800e580:	f108 0514 	add.w	r5, r8, #20
 800e584:	f100 0e14 	add.w	lr, r0, #20
 800e588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e58c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e590:	f108 0210 	add.w	r2, r8, #16
 800e594:	46f2      	mov	sl, lr
 800e596:	2100      	movs	r1, #0
 800e598:	f859 3b04 	ldr.w	r3, [r9], #4
 800e59c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e5a0:	fa1f f883 	uxth.w	r8, r3
 800e5a4:	fa11 f18b 	uxtah	r1, r1, fp
 800e5a8:	0c1b      	lsrs	r3, r3, #16
 800e5aa:	eba1 0808 	sub.w	r8, r1, r8
 800e5ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5b6:	fa1f f888 	uxth.w	r8, r8
 800e5ba:	1419      	asrs	r1, r3, #16
 800e5bc:	454e      	cmp	r6, r9
 800e5be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5c2:	f84a 3b04 	str.w	r3, [sl], #4
 800e5c6:	d8e7      	bhi.n	800e598 <__mdiff+0x80>
 800e5c8:	1b33      	subs	r3, r6, r4
 800e5ca:	3b15      	subs	r3, #21
 800e5cc:	f023 0303 	bic.w	r3, r3, #3
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	3415      	adds	r4, #21
 800e5d4:	42a6      	cmp	r6, r4
 800e5d6:	bf38      	it	cc
 800e5d8:	2304      	movcc	r3, #4
 800e5da:	441d      	add	r5, r3
 800e5dc:	4473      	add	r3, lr
 800e5de:	469e      	mov	lr, r3
 800e5e0:	462e      	mov	r6, r5
 800e5e2:	4566      	cmp	r6, ip
 800e5e4:	d30e      	bcc.n	800e604 <__mdiff+0xec>
 800e5e6:	f10c 0203 	add.w	r2, ip, #3
 800e5ea:	1b52      	subs	r2, r2, r5
 800e5ec:	f022 0203 	bic.w	r2, r2, #3
 800e5f0:	3d03      	subs	r5, #3
 800e5f2:	45ac      	cmp	ip, r5
 800e5f4:	bf38      	it	cc
 800e5f6:	2200      	movcc	r2, #0
 800e5f8:	441a      	add	r2, r3
 800e5fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5fe:	b17b      	cbz	r3, 800e620 <__mdiff+0x108>
 800e600:	6107      	str	r7, [r0, #16]
 800e602:	e7a3      	b.n	800e54c <__mdiff+0x34>
 800e604:	f856 8b04 	ldr.w	r8, [r6], #4
 800e608:	fa11 f288 	uxtah	r2, r1, r8
 800e60c:	1414      	asrs	r4, r2, #16
 800e60e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e612:	b292      	uxth	r2, r2
 800e614:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e618:	f84e 2b04 	str.w	r2, [lr], #4
 800e61c:	1421      	asrs	r1, r4, #16
 800e61e:	e7e0      	b.n	800e5e2 <__mdiff+0xca>
 800e620:	3f01      	subs	r7, #1
 800e622:	e7ea      	b.n	800e5fa <__mdiff+0xe2>
 800e624:	0800fea9 	.word	0x0800fea9
 800e628:	0800ff34 	.word	0x0800ff34

0800e62c <__ulp>:
 800e62c:	b082      	sub	sp, #8
 800e62e:	ed8d 0b00 	vstr	d0, [sp]
 800e632:	9b01      	ldr	r3, [sp, #4]
 800e634:	4912      	ldr	r1, [pc, #72]	; (800e680 <__ulp+0x54>)
 800e636:	4019      	ands	r1, r3
 800e638:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e63c:	2900      	cmp	r1, #0
 800e63e:	dd05      	ble.n	800e64c <__ulp+0x20>
 800e640:	2200      	movs	r2, #0
 800e642:	460b      	mov	r3, r1
 800e644:	ec43 2b10 	vmov	d0, r2, r3
 800e648:	b002      	add	sp, #8
 800e64a:	4770      	bx	lr
 800e64c:	4249      	negs	r1, r1
 800e64e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e652:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e656:	f04f 0200 	mov.w	r2, #0
 800e65a:	f04f 0300 	mov.w	r3, #0
 800e65e:	da04      	bge.n	800e66a <__ulp+0x3e>
 800e660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e664:	fa41 f300 	asr.w	r3, r1, r0
 800e668:	e7ec      	b.n	800e644 <__ulp+0x18>
 800e66a:	f1a0 0114 	sub.w	r1, r0, #20
 800e66e:	291e      	cmp	r1, #30
 800e670:	bfda      	itte	le
 800e672:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e676:	fa20 f101 	lsrle.w	r1, r0, r1
 800e67a:	2101      	movgt	r1, #1
 800e67c:	460a      	mov	r2, r1
 800e67e:	e7e1      	b.n	800e644 <__ulp+0x18>
 800e680:	7ff00000 	.word	0x7ff00000

0800e684 <__b2d>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	6905      	ldr	r5, [r0, #16]
 800e688:	f100 0714 	add.w	r7, r0, #20
 800e68c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e690:	1f2e      	subs	r6, r5, #4
 800e692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e696:	4620      	mov	r0, r4
 800e698:	f7ff fd48 	bl	800e12c <__hi0bits>
 800e69c:	f1c0 0320 	rsb	r3, r0, #32
 800e6a0:	280a      	cmp	r0, #10
 800e6a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e720 <__b2d+0x9c>
 800e6a6:	600b      	str	r3, [r1, #0]
 800e6a8:	dc14      	bgt.n	800e6d4 <__b2d+0x50>
 800e6aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800e6ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800e6b2:	42b7      	cmp	r7, r6
 800e6b4:	ea41 030c 	orr.w	r3, r1, ip
 800e6b8:	bf34      	ite	cc
 800e6ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6be:	2100      	movcs	r1, #0
 800e6c0:	3015      	adds	r0, #21
 800e6c2:	fa04 f000 	lsl.w	r0, r4, r0
 800e6c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6ca:	ea40 0201 	orr.w	r2, r0, r1
 800e6ce:	ec43 2b10 	vmov	d0, r2, r3
 800e6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6d4:	42b7      	cmp	r7, r6
 800e6d6:	bf3a      	itte	cc
 800e6d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6e0:	2100      	movcs	r1, #0
 800e6e2:	380b      	subs	r0, #11
 800e6e4:	d017      	beq.n	800e716 <__b2d+0x92>
 800e6e6:	f1c0 0c20 	rsb	ip, r0, #32
 800e6ea:	fa04 f500 	lsl.w	r5, r4, r0
 800e6ee:	42be      	cmp	r6, r7
 800e6f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800e6f4:	ea45 0504 	orr.w	r5, r5, r4
 800e6f8:	bf8c      	ite	hi
 800e6fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e6fe:	2400      	movls	r4, #0
 800e700:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e704:	fa01 f000 	lsl.w	r0, r1, r0
 800e708:	fa24 f40c 	lsr.w	r4, r4, ip
 800e70c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e710:	ea40 0204 	orr.w	r2, r0, r4
 800e714:	e7db      	b.n	800e6ce <__b2d+0x4a>
 800e716:	ea44 030c 	orr.w	r3, r4, ip
 800e71a:	460a      	mov	r2, r1
 800e71c:	e7d7      	b.n	800e6ce <__b2d+0x4a>
 800e71e:	bf00      	nop
 800e720:	3ff00000 	.word	0x3ff00000

0800e724 <__d2b>:
 800e724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e728:	4689      	mov	r9, r1
 800e72a:	2101      	movs	r1, #1
 800e72c:	ec57 6b10 	vmov	r6, r7, d0
 800e730:	4690      	mov	r8, r2
 800e732:	f7ff fc09 	bl	800df48 <_Balloc>
 800e736:	4604      	mov	r4, r0
 800e738:	b930      	cbnz	r0, 800e748 <__d2b+0x24>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4b25      	ldr	r3, [pc, #148]	; (800e7d4 <__d2b+0xb0>)
 800e73e:	4826      	ldr	r0, [pc, #152]	; (800e7d8 <__d2b+0xb4>)
 800e740:	f240 310a 	movw	r1, #778	; 0x30a
 800e744:	f7fe f94c 	bl	800c9e0 <__assert_func>
 800e748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e74c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e750:	bb35      	cbnz	r5, 800e7a0 <__d2b+0x7c>
 800e752:	2e00      	cmp	r6, #0
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	d028      	beq.n	800e7aa <__d2b+0x86>
 800e758:	4668      	mov	r0, sp
 800e75a:	9600      	str	r6, [sp, #0]
 800e75c:	f7ff fd06 	bl	800e16c <__lo0bits>
 800e760:	9900      	ldr	r1, [sp, #0]
 800e762:	b300      	cbz	r0, 800e7a6 <__d2b+0x82>
 800e764:	9a01      	ldr	r2, [sp, #4]
 800e766:	f1c0 0320 	rsb	r3, r0, #32
 800e76a:	fa02 f303 	lsl.w	r3, r2, r3
 800e76e:	430b      	orrs	r3, r1
 800e770:	40c2      	lsrs	r2, r0
 800e772:	6163      	str	r3, [r4, #20]
 800e774:	9201      	str	r2, [sp, #4]
 800e776:	9b01      	ldr	r3, [sp, #4]
 800e778:	61a3      	str	r3, [r4, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	bf14      	ite	ne
 800e77e:	2202      	movne	r2, #2
 800e780:	2201      	moveq	r2, #1
 800e782:	6122      	str	r2, [r4, #16]
 800e784:	b1d5      	cbz	r5, 800e7bc <__d2b+0x98>
 800e786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e78a:	4405      	add	r5, r0
 800e78c:	f8c9 5000 	str.w	r5, [r9]
 800e790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e794:	f8c8 0000 	str.w	r0, [r8]
 800e798:	4620      	mov	r0, r4
 800e79a:	b003      	add	sp, #12
 800e79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7a4:	e7d5      	b.n	800e752 <__d2b+0x2e>
 800e7a6:	6161      	str	r1, [r4, #20]
 800e7a8:	e7e5      	b.n	800e776 <__d2b+0x52>
 800e7aa:	a801      	add	r0, sp, #4
 800e7ac:	f7ff fcde 	bl	800e16c <__lo0bits>
 800e7b0:	9b01      	ldr	r3, [sp, #4]
 800e7b2:	6163      	str	r3, [r4, #20]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	6122      	str	r2, [r4, #16]
 800e7b8:	3020      	adds	r0, #32
 800e7ba:	e7e3      	b.n	800e784 <__d2b+0x60>
 800e7bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7c4:	f8c9 0000 	str.w	r0, [r9]
 800e7c8:	6918      	ldr	r0, [r3, #16]
 800e7ca:	f7ff fcaf 	bl	800e12c <__hi0bits>
 800e7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7d2:	e7df      	b.n	800e794 <__d2b+0x70>
 800e7d4:	0800fea9 	.word	0x0800fea9
 800e7d8:	0800ff34 	.word	0x0800ff34

0800e7dc <__ratio>:
 800e7dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	4688      	mov	r8, r1
 800e7e2:	4669      	mov	r1, sp
 800e7e4:	4681      	mov	r9, r0
 800e7e6:	f7ff ff4d 	bl	800e684 <__b2d>
 800e7ea:	a901      	add	r1, sp, #4
 800e7ec:	4640      	mov	r0, r8
 800e7ee:	ec55 4b10 	vmov	r4, r5, d0
 800e7f2:	f7ff ff47 	bl	800e684 <__b2d>
 800e7f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7fe:	eba3 0c02 	sub.w	ip, r3, r2
 800e802:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e806:	1a9b      	subs	r3, r3, r2
 800e808:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e80c:	ec51 0b10 	vmov	r0, r1, d0
 800e810:	2b00      	cmp	r3, #0
 800e812:	bfd6      	itet	le
 800e814:	460a      	movle	r2, r1
 800e816:	462a      	movgt	r2, r5
 800e818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e81c:	468b      	mov	fp, r1
 800e81e:	462f      	mov	r7, r5
 800e820:	bfd4      	ite	le
 800e822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e826:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e82a:	4620      	mov	r0, r4
 800e82c:	ee10 2a10 	vmov	r2, s0
 800e830:	465b      	mov	r3, fp
 800e832:	4639      	mov	r1, r7
 800e834:	f7f2 f83c 	bl	80008b0 <__aeabi_ddiv>
 800e838:	ec41 0b10 	vmov	d0, r0, r1
 800e83c:	b003      	add	sp, #12
 800e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e842 <__copybits>:
 800e842:	3901      	subs	r1, #1
 800e844:	b570      	push	{r4, r5, r6, lr}
 800e846:	1149      	asrs	r1, r1, #5
 800e848:	6914      	ldr	r4, [r2, #16]
 800e84a:	3101      	adds	r1, #1
 800e84c:	f102 0314 	add.w	r3, r2, #20
 800e850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e858:	1f05      	subs	r5, r0, #4
 800e85a:	42a3      	cmp	r3, r4
 800e85c:	d30c      	bcc.n	800e878 <__copybits+0x36>
 800e85e:	1aa3      	subs	r3, r4, r2
 800e860:	3b11      	subs	r3, #17
 800e862:	f023 0303 	bic.w	r3, r3, #3
 800e866:	3211      	adds	r2, #17
 800e868:	42a2      	cmp	r2, r4
 800e86a:	bf88      	it	hi
 800e86c:	2300      	movhi	r3, #0
 800e86e:	4418      	add	r0, r3
 800e870:	2300      	movs	r3, #0
 800e872:	4288      	cmp	r0, r1
 800e874:	d305      	bcc.n	800e882 <__copybits+0x40>
 800e876:	bd70      	pop	{r4, r5, r6, pc}
 800e878:	f853 6b04 	ldr.w	r6, [r3], #4
 800e87c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e880:	e7eb      	b.n	800e85a <__copybits+0x18>
 800e882:	f840 3b04 	str.w	r3, [r0], #4
 800e886:	e7f4      	b.n	800e872 <__copybits+0x30>

0800e888 <__any_on>:
 800e888:	f100 0214 	add.w	r2, r0, #20
 800e88c:	6900      	ldr	r0, [r0, #16]
 800e88e:	114b      	asrs	r3, r1, #5
 800e890:	4298      	cmp	r0, r3
 800e892:	b510      	push	{r4, lr}
 800e894:	db11      	blt.n	800e8ba <__any_on+0x32>
 800e896:	dd0a      	ble.n	800e8ae <__any_on+0x26>
 800e898:	f011 011f 	ands.w	r1, r1, #31
 800e89c:	d007      	beq.n	800e8ae <__any_on+0x26>
 800e89e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e8a2:	fa24 f001 	lsr.w	r0, r4, r1
 800e8a6:	fa00 f101 	lsl.w	r1, r0, r1
 800e8aa:	428c      	cmp	r4, r1
 800e8ac:	d10b      	bne.n	800e8c6 <__any_on+0x3e>
 800e8ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d803      	bhi.n	800e8be <__any_on+0x36>
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	e7f7      	b.n	800e8ae <__any_on+0x26>
 800e8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	d0f5      	beq.n	800e8b2 <__any_on+0x2a>
 800e8c6:	2001      	movs	r0, #1
 800e8c8:	e7f6      	b.n	800e8b8 <__any_on+0x30>

0800e8ca <_calloc_r>:
 800e8ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8cc:	fba1 2402 	umull	r2, r4, r1, r2
 800e8d0:	b94c      	cbnz	r4, 800e8e6 <_calloc_r+0x1c>
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	9201      	str	r2, [sp, #4]
 800e8d6:	f7fb fedb 	bl	800a690 <_malloc_r>
 800e8da:	9a01      	ldr	r2, [sp, #4]
 800e8dc:	4605      	mov	r5, r0
 800e8de:	b930      	cbnz	r0, 800e8ee <_calloc_r+0x24>
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	b003      	add	sp, #12
 800e8e4:	bd30      	pop	{r4, r5, pc}
 800e8e6:	220c      	movs	r2, #12
 800e8e8:	6002      	str	r2, [r0, #0]
 800e8ea:	2500      	movs	r5, #0
 800e8ec:	e7f8      	b.n	800e8e0 <_calloc_r+0x16>
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	f7fb fe5a 	bl	800a5a8 <memset>
 800e8f4:	e7f4      	b.n	800e8e0 <_calloc_r+0x16>

0800e8f6 <_realloc_r>:
 800e8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	460e      	mov	r6, r1
 800e900:	b921      	cbnz	r1, 800e90c <_realloc_r+0x16>
 800e902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e906:	4611      	mov	r1, r2
 800e908:	f7fb bec2 	b.w	800a690 <_malloc_r>
 800e90c:	b92a      	cbnz	r2, 800e91a <_realloc_r+0x24>
 800e90e:	f7fb fe53 	bl	800a5b8 <_free_r>
 800e912:	4625      	mov	r5, r4
 800e914:	4628      	mov	r0, r5
 800e916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91a:	f000 fa15 	bl	800ed48 <_malloc_usable_size_r>
 800e91e:	4284      	cmp	r4, r0
 800e920:	4607      	mov	r7, r0
 800e922:	d802      	bhi.n	800e92a <_realloc_r+0x34>
 800e924:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e928:	d812      	bhi.n	800e950 <_realloc_r+0x5a>
 800e92a:	4621      	mov	r1, r4
 800e92c:	4640      	mov	r0, r8
 800e92e:	f7fb feaf 	bl	800a690 <_malloc_r>
 800e932:	4605      	mov	r5, r0
 800e934:	2800      	cmp	r0, #0
 800e936:	d0ed      	beq.n	800e914 <_realloc_r+0x1e>
 800e938:	42bc      	cmp	r4, r7
 800e93a:	4622      	mov	r2, r4
 800e93c:	4631      	mov	r1, r6
 800e93e:	bf28      	it	cs
 800e940:	463a      	movcs	r2, r7
 800e942:	f7fb fe09 	bl	800a558 <memcpy>
 800e946:	4631      	mov	r1, r6
 800e948:	4640      	mov	r0, r8
 800e94a:	f7fb fe35 	bl	800a5b8 <_free_r>
 800e94e:	e7e1      	b.n	800e914 <_realloc_r+0x1e>
 800e950:	4635      	mov	r5, r6
 800e952:	e7df      	b.n	800e914 <_realloc_r+0x1e>

0800e954 <__ssputs_r>:
 800e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e958:	688e      	ldr	r6, [r1, #8]
 800e95a:	429e      	cmp	r6, r3
 800e95c:	4682      	mov	sl, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	4690      	mov	r8, r2
 800e962:	461f      	mov	r7, r3
 800e964:	d838      	bhi.n	800e9d8 <__ssputs_r+0x84>
 800e966:	898a      	ldrh	r2, [r1, #12]
 800e968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e96c:	d032      	beq.n	800e9d4 <__ssputs_r+0x80>
 800e96e:	6825      	ldr	r5, [r4, #0]
 800e970:	6909      	ldr	r1, [r1, #16]
 800e972:	eba5 0901 	sub.w	r9, r5, r1
 800e976:	6965      	ldr	r5, [r4, #20]
 800e978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e97c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e980:	3301      	adds	r3, #1
 800e982:	444b      	add	r3, r9
 800e984:	106d      	asrs	r5, r5, #1
 800e986:	429d      	cmp	r5, r3
 800e988:	bf38      	it	cc
 800e98a:	461d      	movcc	r5, r3
 800e98c:	0553      	lsls	r3, r2, #21
 800e98e:	d531      	bpl.n	800e9f4 <__ssputs_r+0xa0>
 800e990:	4629      	mov	r1, r5
 800e992:	f7fb fe7d 	bl	800a690 <_malloc_r>
 800e996:	4606      	mov	r6, r0
 800e998:	b950      	cbnz	r0, 800e9b0 <__ssputs_r+0x5c>
 800e99a:	230c      	movs	r3, #12
 800e99c:	f8ca 3000 	str.w	r3, [sl]
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b0:	6921      	ldr	r1, [r4, #16]
 800e9b2:	464a      	mov	r2, r9
 800e9b4:	f7fb fdd0 	bl	800a558 <memcpy>
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c2:	81a3      	strh	r3, [r4, #12]
 800e9c4:	6126      	str	r6, [r4, #16]
 800e9c6:	6165      	str	r5, [r4, #20]
 800e9c8:	444e      	add	r6, r9
 800e9ca:	eba5 0509 	sub.w	r5, r5, r9
 800e9ce:	6026      	str	r6, [r4, #0]
 800e9d0:	60a5      	str	r5, [r4, #8]
 800e9d2:	463e      	mov	r6, r7
 800e9d4:	42be      	cmp	r6, r7
 800e9d6:	d900      	bls.n	800e9da <__ssputs_r+0x86>
 800e9d8:	463e      	mov	r6, r7
 800e9da:	6820      	ldr	r0, [r4, #0]
 800e9dc:	4632      	mov	r2, r6
 800e9de:	4641      	mov	r1, r8
 800e9e0:	f7fb fdc8 	bl	800a574 <memmove>
 800e9e4:	68a3      	ldr	r3, [r4, #8]
 800e9e6:	1b9b      	subs	r3, r3, r6
 800e9e8:	60a3      	str	r3, [r4, #8]
 800e9ea:	6823      	ldr	r3, [r4, #0]
 800e9ec:	4433      	add	r3, r6
 800e9ee:	6023      	str	r3, [r4, #0]
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	e7db      	b.n	800e9ac <__ssputs_r+0x58>
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	f7ff ff7e 	bl	800e8f6 <_realloc_r>
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d1e1      	bne.n	800e9c4 <__ssputs_r+0x70>
 800ea00:	6921      	ldr	r1, [r4, #16]
 800ea02:	4650      	mov	r0, sl
 800ea04:	f7fb fdd8 	bl	800a5b8 <_free_r>
 800ea08:	e7c7      	b.n	800e99a <__ssputs_r+0x46>
	...

0800ea0c <_svfiprintf_r>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	4698      	mov	r8, r3
 800ea12:	898b      	ldrh	r3, [r1, #12]
 800ea14:	061b      	lsls	r3, r3, #24
 800ea16:	b09d      	sub	sp, #116	; 0x74
 800ea18:	4607      	mov	r7, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	4614      	mov	r4, r2
 800ea1e:	d50e      	bpl.n	800ea3e <_svfiprintf_r+0x32>
 800ea20:	690b      	ldr	r3, [r1, #16]
 800ea22:	b963      	cbnz	r3, 800ea3e <_svfiprintf_r+0x32>
 800ea24:	2140      	movs	r1, #64	; 0x40
 800ea26:	f7fb fe33 	bl	800a690 <_malloc_r>
 800ea2a:	6028      	str	r0, [r5, #0]
 800ea2c:	6128      	str	r0, [r5, #16]
 800ea2e:	b920      	cbnz	r0, 800ea3a <_svfiprintf_r+0x2e>
 800ea30:	230c      	movs	r3, #12
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea38:	e0d1      	b.n	800ebde <_svfiprintf_r+0x1d2>
 800ea3a:	2340      	movs	r3, #64	; 0x40
 800ea3c:	616b      	str	r3, [r5, #20]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9309      	str	r3, [sp, #36]	; 0x24
 800ea42:	2320      	movs	r3, #32
 800ea44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea4c:	2330      	movs	r3, #48	; 0x30
 800ea4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebf8 <_svfiprintf_r+0x1ec>
 800ea52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea56:	f04f 0901 	mov.w	r9, #1
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	469a      	mov	sl, r3
 800ea5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea62:	b10a      	cbz	r2, 800ea68 <_svfiprintf_r+0x5c>
 800ea64:	2a25      	cmp	r2, #37	; 0x25
 800ea66:	d1f9      	bne.n	800ea5c <_svfiprintf_r+0x50>
 800ea68:	ebba 0b04 	subs.w	fp, sl, r4
 800ea6c:	d00b      	beq.n	800ea86 <_svfiprintf_r+0x7a>
 800ea6e:	465b      	mov	r3, fp
 800ea70:	4622      	mov	r2, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	4638      	mov	r0, r7
 800ea76:	f7ff ff6d 	bl	800e954 <__ssputs_r>
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f000 80aa 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea82:	445a      	add	r2, fp
 800ea84:	9209      	str	r2, [sp, #36]	; 0x24
 800ea86:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80a2 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9a:	f10a 0a01 	add.w	sl, sl, #1
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	9307      	str	r3, [sp, #28]
 800eaa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa6:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa8:	4654      	mov	r4, sl
 800eaaa:	2205      	movs	r2, #5
 800eaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab0:	4851      	ldr	r0, [pc, #324]	; (800ebf8 <_svfiprintf_r+0x1ec>)
 800eab2:	f7f1 fbb5 	bl	8000220 <memchr>
 800eab6:	9a04      	ldr	r2, [sp, #16]
 800eab8:	b9d8      	cbnz	r0, 800eaf2 <_svfiprintf_r+0xe6>
 800eaba:	06d0      	lsls	r0, r2, #27
 800eabc:	bf44      	itt	mi
 800eabe:	2320      	movmi	r3, #32
 800eac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac4:	0711      	lsls	r1, r2, #28
 800eac6:	bf44      	itt	mi
 800eac8:	232b      	movmi	r3, #43	; 0x2b
 800eaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eace:	f89a 3000 	ldrb.w	r3, [sl]
 800ead2:	2b2a      	cmp	r3, #42	; 0x2a
 800ead4:	d015      	beq.n	800eb02 <_svfiprintf_r+0xf6>
 800ead6:	9a07      	ldr	r2, [sp, #28]
 800ead8:	4654      	mov	r4, sl
 800eada:	2000      	movs	r0, #0
 800eadc:	f04f 0c0a 	mov.w	ip, #10
 800eae0:	4621      	mov	r1, r4
 800eae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae6:	3b30      	subs	r3, #48	; 0x30
 800eae8:	2b09      	cmp	r3, #9
 800eaea:	d94e      	bls.n	800eb8a <_svfiprintf_r+0x17e>
 800eaec:	b1b0      	cbz	r0, 800eb1c <_svfiprintf_r+0x110>
 800eaee:	9207      	str	r2, [sp, #28]
 800eaf0:	e014      	b.n	800eb1c <_svfiprintf_r+0x110>
 800eaf2:	eba0 0308 	sub.w	r3, r0, r8
 800eaf6:	fa09 f303 	lsl.w	r3, r9, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	46a2      	mov	sl, r4
 800eb00:	e7d2      	b.n	800eaa8 <_svfiprintf_r+0x9c>
 800eb02:	9b03      	ldr	r3, [sp, #12]
 800eb04:	1d19      	adds	r1, r3, #4
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	9103      	str	r1, [sp, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bfbb      	ittet	lt
 800eb0e:	425b      	neglt	r3, r3
 800eb10:	f042 0202 	orrlt.w	r2, r2, #2
 800eb14:	9307      	strge	r3, [sp, #28]
 800eb16:	9307      	strlt	r3, [sp, #28]
 800eb18:	bfb8      	it	lt
 800eb1a:	9204      	strlt	r2, [sp, #16]
 800eb1c:	7823      	ldrb	r3, [r4, #0]
 800eb1e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb20:	d10c      	bne.n	800eb3c <_svfiprintf_r+0x130>
 800eb22:	7863      	ldrb	r3, [r4, #1]
 800eb24:	2b2a      	cmp	r3, #42	; 0x2a
 800eb26:	d135      	bne.n	800eb94 <_svfiprintf_r+0x188>
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	9203      	str	r2, [sp, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfb8      	it	lt
 800eb34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb38:	3402      	adds	r4, #2
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec08 <_svfiprintf_r+0x1fc>
 800eb40:	7821      	ldrb	r1, [r4, #0]
 800eb42:	2203      	movs	r2, #3
 800eb44:	4650      	mov	r0, sl
 800eb46:	f7f1 fb6b 	bl	8000220 <memchr>
 800eb4a:	b140      	cbz	r0, 800eb5e <_svfiprintf_r+0x152>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	eba0 000a 	sub.w	r0, r0, sl
 800eb52:	fa03 f000 	lsl.w	r0, r3, r0
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	4303      	orrs	r3, r0
 800eb5a:	3401      	adds	r4, #1
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb62:	4826      	ldr	r0, [pc, #152]	; (800ebfc <_svfiprintf_r+0x1f0>)
 800eb64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb68:	2206      	movs	r2, #6
 800eb6a:	f7f1 fb59 	bl	8000220 <memchr>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d038      	beq.n	800ebe4 <_svfiprintf_r+0x1d8>
 800eb72:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <_svfiprintf_r+0x1f4>)
 800eb74:	bb1b      	cbnz	r3, 800ebbe <_svfiprintf_r+0x1b2>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	3308      	adds	r3, #8
 800eb80:	9303      	str	r3, [sp, #12]
 800eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb84:	4433      	add	r3, r6
 800eb86:	9309      	str	r3, [sp, #36]	; 0x24
 800eb88:	e767      	b.n	800ea5a <_svfiprintf_r+0x4e>
 800eb8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb8e:	460c      	mov	r4, r1
 800eb90:	2001      	movs	r0, #1
 800eb92:	e7a5      	b.n	800eae0 <_svfiprintf_r+0xd4>
 800eb94:	2300      	movs	r3, #0
 800eb96:	3401      	adds	r4, #1
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	f04f 0c0a 	mov.w	ip, #10
 800eba0:	4620      	mov	r0, r4
 800eba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eba6:	3a30      	subs	r2, #48	; 0x30
 800eba8:	2a09      	cmp	r2, #9
 800ebaa:	d903      	bls.n	800ebb4 <_svfiprintf_r+0x1a8>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d0c5      	beq.n	800eb3c <_svfiprintf_r+0x130>
 800ebb0:	9105      	str	r1, [sp, #20]
 800ebb2:	e7c3      	b.n	800eb3c <_svfiprintf_r+0x130>
 800ebb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e7f0      	b.n	800eba0 <_svfiprintf_r+0x194>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7fb ffcf 	bl	800ab6c <_printf_float>
 800ebce:	1c42      	adds	r2, r0, #1
 800ebd0:	4606      	mov	r6, r0
 800ebd2:	d1d6      	bne.n	800eb82 <_svfiprintf_r+0x176>
 800ebd4:	89ab      	ldrh	r3, [r5, #12]
 800ebd6:	065b      	lsls	r3, r3, #25
 800ebd8:	f53f af2c 	bmi.w	800ea34 <_svfiprintf_r+0x28>
 800ebdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebde:	b01d      	add	sp, #116	; 0x74
 800ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	ab03      	add	r3, sp, #12
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebec:	a904      	add	r1, sp, #16
 800ebee:	4638      	mov	r0, r7
 800ebf0:	f7fc fa60 	bl	800b0b4 <_printf_i>
 800ebf4:	e7eb      	b.n	800ebce <_svfiprintf_r+0x1c2>
 800ebf6:	bf00      	nop
 800ebf8:	0800fbf4 	.word	0x0800fbf4
 800ebfc:	0800fbfe 	.word	0x0800fbfe
 800ec00:	0800ab6d 	.word	0x0800ab6d
 800ec04:	0800e955 	.word	0x0800e955
 800ec08:	0800fbfa 	.word	0x0800fbfa

0800ec0c <_putc_r>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	460d      	mov	r5, r1
 800ec10:	4614      	mov	r4, r2
 800ec12:	4606      	mov	r6, r0
 800ec14:	b118      	cbz	r0, 800ec1e <_putc_r+0x12>
 800ec16:	6983      	ldr	r3, [r0, #24]
 800ec18:	b90b      	cbnz	r3, 800ec1e <_putc_r+0x12>
 800ec1a:	f7fb fba5 	bl	800a368 <__sinit>
 800ec1e:	4b1c      	ldr	r3, [pc, #112]	; (800ec90 <_putc_r+0x84>)
 800ec20:	429c      	cmp	r4, r3
 800ec22:	d124      	bne.n	800ec6e <_putc_r+0x62>
 800ec24:	6874      	ldr	r4, [r6, #4]
 800ec26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec28:	07d8      	lsls	r0, r3, #31
 800ec2a:	d405      	bmi.n	800ec38 <_putc_r+0x2c>
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	0599      	lsls	r1, r3, #22
 800ec30:	d402      	bmi.n	800ec38 <_putc_r+0x2c>
 800ec32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec34:	f7fb fc6d 	bl	800a512 <__retarget_lock_acquire_recursive>
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	60a3      	str	r3, [r4, #8]
 800ec40:	da05      	bge.n	800ec4e <_putc_r+0x42>
 800ec42:	69a2      	ldr	r2, [r4, #24]
 800ec44:	4293      	cmp	r3, r2
 800ec46:	db1c      	blt.n	800ec82 <_putc_r+0x76>
 800ec48:	b2eb      	uxtb	r3, r5
 800ec4a:	2b0a      	cmp	r3, #10
 800ec4c:	d019      	beq.n	800ec82 <_putc_r+0x76>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	6022      	str	r2, [r4, #0]
 800ec54:	701d      	strb	r5, [r3, #0]
 800ec56:	b2ed      	uxtb	r5, r5
 800ec58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec5a:	07da      	lsls	r2, r3, #31
 800ec5c:	d405      	bmi.n	800ec6a <_putc_r+0x5e>
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	059b      	lsls	r3, r3, #22
 800ec62:	d402      	bmi.n	800ec6a <_putc_r+0x5e>
 800ec64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec66:	f7fb fc55 	bl	800a514 <__retarget_lock_release_recursive>
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	4b09      	ldr	r3, [pc, #36]	; (800ec94 <_putc_r+0x88>)
 800ec70:	429c      	cmp	r4, r3
 800ec72:	d101      	bne.n	800ec78 <_putc_r+0x6c>
 800ec74:	68b4      	ldr	r4, [r6, #8]
 800ec76:	e7d6      	b.n	800ec26 <_putc_r+0x1a>
 800ec78:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <_putc_r+0x8c>)
 800ec7a:	429c      	cmp	r4, r3
 800ec7c:	bf08      	it	eq
 800ec7e:	68f4      	ldreq	r4, [r6, #12]
 800ec80:	e7d1      	b.n	800ec26 <_putc_r+0x1a>
 800ec82:	4629      	mov	r1, r5
 800ec84:	4622      	mov	r2, r4
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7fd fdd8 	bl	800c83c <__swbuf_r>
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	e7e3      	b.n	800ec58 <_putc_r+0x4c>
 800ec90:	0800fbb0 	.word	0x0800fbb0
 800ec94:	0800fbd0 	.word	0x0800fbd0
 800ec98:	0800fb90 	.word	0x0800fb90

0800ec9c <_read_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d07      	ldr	r5, [pc, #28]	; (800ecbc <_read_r+0x20>)
 800eca0:	4604      	mov	r4, r0
 800eca2:	4608      	mov	r0, r1
 800eca4:	4611      	mov	r1, r2
 800eca6:	2200      	movs	r2, #0
 800eca8:	602a      	str	r2, [r5, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f7f4 fea5 	bl	80039fa <_read>
 800ecb0:	1c43      	adds	r3, r0, #1
 800ecb2:	d102      	bne.n	800ecba <_read_r+0x1e>
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	b103      	cbz	r3, 800ecba <_read_r+0x1e>
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	bd38      	pop	{r3, r4, r5, pc}
 800ecbc:	20000924 	.word	0x20000924

0800ecc0 <strncmp>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	b17a      	cbz	r2, 800ece4 <strncmp+0x24>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	3901      	subs	r1, #1
 800ecc8:	1884      	adds	r4, r0, r2
 800ecca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ecce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ecd2:	4290      	cmp	r0, r2
 800ecd4:	d101      	bne.n	800ecda <strncmp+0x1a>
 800ecd6:	42a3      	cmp	r3, r4
 800ecd8:	d101      	bne.n	800ecde <strncmp+0x1e>
 800ecda:	1a80      	subs	r0, r0, r2
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d1f3      	bne.n	800ecca <strncmp+0xa>
 800ece2:	e7fa      	b.n	800ecda <strncmp+0x1a>
 800ece4:	4610      	mov	r0, r2
 800ece6:	e7f9      	b.n	800ecdc <strncmp+0x1c>

0800ece8 <__ascii_wctomb>:
 800ece8:	b149      	cbz	r1, 800ecfe <__ascii_wctomb+0x16>
 800ecea:	2aff      	cmp	r2, #255	; 0xff
 800ecec:	bf85      	ittet	hi
 800ecee:	238a      	movhi	r3, #138	; 0x8a
 800ecf0:	6003      	strhi	r3, [r0, #0]
 800ecf2:	700a      	strbls	r2, [r1, #0]
 800ecf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ecf8:	bf98      	it	ls
 800ecfa:	2001      	movls	r0, #1
 800ecfc:	4770      	bx	lr
 800ecfe:	4608      	mov	r0, r1
 800ed00:	4770      	bx	lr
	...

0800ed04 <_fstat_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4d07      	ldr	r5, [pc, #28]	; (800ed24 <_fstat_r+0x20>)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	4611      	mov	r1, r2
 800ed10:	602b      	str	r3, [r5, #0]
 800ed12:	f7f4 fe9b 	bl	8003a4c <_fstat>
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	d102      	bne.n	800ed20 <_fstat_r+0x1c>
 800ed1a:	682b      	ldr	r3, [r5, #0]
 800ed1c:	b103      	cbz	r3, 800ed20 <_fstat_r+0x1c>
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	bd38      	pop	{r3, r4, r5, pc}
 800ed22:	bf00      	nop
 800ed24:	20000924 	.word	0x20000924

0800ed28 <_isatty_r>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	4d06      	ldr	r5, [pc, #24]	; (800ed44 <_isatty_r+0x1c>)
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	4604      	mov	r4, r0
 800ed30:	4608      	mov	r0, r1
 800ed32:	602b      	str	r3, [r5, #0]
 800ed34:	f7f4 fe9a 	bl	8003a6c <_isatty>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_isatty_r+0x1a>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_isatty_r+0x1a>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	20000924 	.word	0x20000924

0800ed48 <_malloc_usable_size_r>:
 800ed48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed4c:	1f18      	subs	r0, r3, #4
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bfbc      	itt	lt
 800ed52:	580b      	ldrlt	r3, [r1, r0]
 800ed54:	18c0      	addlt	r0, r0, r3
 800ed56:	4770      	bx	lr

0800ed58 <_init>:
 800ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5a:	bf00      	nop
 800ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5e:	bc08      	pop	{r3}
 800ed60:	469e      	mov	lr, r3
 800ed62:	4770      	bx	lr

0800ed64 <_fini>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	bf00      	nop
 800ed68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6a:	bc08      	pop	{r3}
 800ed6c:	469e      	mov	lr, r3
 800ed6e:	4770      	bx	lr
