
BallAndBeamCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d100  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  0800d2e0  0800d2e0  0001d2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e554  0800e554  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800e554  0800e554  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e55c  0800e55c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e560  0800e560  0001e560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800e564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000200  0800e764  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800e764  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292d5  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb4  00000000  00000000  00049505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0004d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0004e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b654  00000000  00000000  0004f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018182  00000000  00000000  0007af24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b1be  00000000  00000000  000930a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca0  00000000  00000000  0019e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d2c8 	.word	0x0800d2c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800d2c8 	.word	0x0800d2c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpun>:
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x10>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d10a      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x20>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_dcmpun+0x26>
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0001 	mov.w	r0, #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2uiz>:
 8000c0c:	004a      	lsls	r2, r1, #1
 8000c0e:	d211      	bcs.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d211      	bcs.n	8000c3a <__aeabi_d2uiz+0x2e>
 8000c16:	d50d      	bpl.n	8000c34 <__aeabi_d2uiz+0x28>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d40e      	bmi.n	8000c40 <__aeabi_d2uiz+0x34>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_d2uiz+0x3a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 b9aa 	b.w	8001058 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f83c 	bl	8000d88 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	460d      	mov	r5, r1
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_dcmplt>
 8000d2a:	b928      	cbnz	r0, 8000d38 <__aeabi_d2lz+0x1c>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d34:	f000 b80a 	b.w	8000d4c <__aeabi_d2ulz>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3e:	f000 f805 	bl	8000d4c <__aeabi_d2ulz>
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	bf00      	nop

08000d4c <__aeabi_d2ulz>:
 8000d4c:	b5d0      	push	{r4, r6, r7, lr}
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__aeabi_d2ulz+0x34>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc81 	bl	800065c <__aeabi_dmul>
 8000d5a:	f7ff ff57 	bl	8000c0c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <__aeabi_d2ulz+0x38>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc78 	bl	800065c <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff faba 	bl	80002ec <__aeabi_dsub>
 8000d78:	f7ff ff48 	bl	8000c0c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <__udivmoddi4>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	9d08      	ldr	r5, [sp, #32]
 8000d8e:	4604      	mov	r4, r0
 8000d90:	468e      	mov	lr, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d14d      	bne.n	8000e32 <__udivmoddi4+0xaa>
 8000d96:	428a      	cmp	r2, r1
 8000d98:	4694      	mov	ip, r2
 8000d9a:	d969      	bls.n	8000e70 <__udivmoddi4+0xe8>
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b152      	cbz	r2, 8000db8 <__udivmoddi4+0x30>
 8000da2:	fa01 f302 	lsl.w	r3, r1, r2
 8000da6:	f1c2 0120 	rsb	r1, r2, #32
 8000daa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db2:	ea41 0e03 	orr.w	lr, r1, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	0c21      	lsrs	r1, r4, #16
 8000dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000dc2:	fa1f f78c 	uxth.w	r7, ip
 8000dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dce:	fb06 f107 	mul.w	r1, r6, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x64>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dde:	f080 811f 	bcs.w	8001020 <__udivmoddi4+0x298>
 8000de2:	4299      	cmp	r1, r3
 8000de4:	f240 811c 	bls.w	8001020 <__udivmoddi4+0x298>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb00 f707 	mul.w	r7, r0, r7
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d90a      	bls.n	8000e1a <__udivmoddi4+0x92>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0c:	f080 810a 	bcs.w	8001024 <__udivmoddi4+0x29c>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f240 8107 	bls.w	8001024 <__udivmoddi4+0x29c>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1e:	1be4      	subs	r4, r4, r7
 8000e20:	2600      	movs	r6, #0
 8000e22:	b11d      	cbz	r5, 8000e2c <__udivmoddi4+0xa4>
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c5 4300 	strd	r4, r3, [r5]
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0xc2>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80ef 	beq.w	800101a <__udivmoddi4+0x292>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x160>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xd4>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80f9 	bhi.w	800104e <__udivmoddi4+0x2c6>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	469e      	mov	lr, r3
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e0      	beq.n	8000e2c <__udivmoddi4+0xa4>
 8000e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6e:	e7dd      	b.n	8000e2c <__udivmoddi4+0xa4>
 8000e70:	b902      	cbnz	r2, 8000e74 <__udivmoddi4+0xec>
 8000e72:	deff      	udf	#255	; 0xff
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f040 8092 	bne.w	8000fa2 <__udivmoddi4+0x21a>
 8000e7e:	eba1 010c 	sub.w	r1, r1, ip
 8000e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e86:	fa1f fe8c 	uxth.w	lr, ip
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	0c20      	lsrs	r0, r4, #16
 8000e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e92:	fb07 1113 	mls	r1, r7, r3, r1
 8000e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9a:	fb0e f003 	mul.w	r0, lr, r3
 8000e9e:	4288      	cmp	r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x12c>
 8000ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x12a>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f200 80cb 	bhi.w	8001048 <__udivmoddi4+0x2c0>
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	1a09      	subs	r1, r1, r0
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x156>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x154>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f200 80bb 	bhi.w	8001052 <__udivmoddi4+0x2ca>
 8000edc:	4608      	mov	r0, r1
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee6:	e79c      	b.n	8000e22 <__udivmoddi4+0x9a>
 8000ee8:	f1c6 0720 	rsb	r7, r6, #32
 8000eec:	40b3      	lsls	r3, r6
 8000eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	431c      	orrs	r4, r3
 8000f00:	40f9      	lsrs	r1, r7
 8000f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f06:	fa00 f306 	lsl.w	r3, r0, r6
 8000f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0e:	0c20      	lsrs	r0, r4, #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fb09 1118 	mls	r1, r9, r8, r1
 8000f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f20:	4288      	cmp	r0, r1
 8000f22:	fa02 f206 	lsl.w	r2, r2, r6
 8000f26:	d90b      	bls.n	8000f40 <__udivmoddi4+0x1b8>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f30:	f080 8088 	bcs.w	8001044 <__udivmoddi4+0x2bc>
 8000f34:	4288      	cmp	r0, r1
 8000f36:	f240 8085 	bls.w	8001044 <__udivmoddi4+0x2bc>
 8000f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f48:	fb09 1110 	mls	r1, r9, r0, r1
 8000f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f54:	458e      	cmp	lr, r1
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x1e2>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f60:	d26c      	bcs.n	800103c <__udivmoddi4+0x2b4>
 8000f62:	458e      	cmp	lr, r1
 8000f64:	d96a      	bls.n	800103c <__udivmoddi4+0x2b4>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4461      	add	r1, ip
 8000f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f72:	eba1 010e 	sub.w	r1, r1, lr
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	46a6      	mov	lr, r4
 8000f7c:	d356      	bcc.n	800102c <__udivmoddi4+0x2a4>
 8000f7e:	d053      	beq.n	8001028 <__udivmoddi4+0x2a0>
 8000f80:	b15d      	cbz	r5, 8000f9a <__udivmoddi4+0x212>
 8000f82:	ebb3 0208 	subs.w	r2, r3, r8
 8000f86:	eb61 010e 	sbc.w	r1, r1, lr
 8000f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f92:	40f1      	lsrs	r1, r6
 8000f94:	431f      	orrs	r7, r3
 8000f96:	e9c5 7100 	strd	r7, r1, [r5]
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	4631      	mov	r1, r6
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	40d8      	lsrs	r0, r3
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fca:	fb00 f60e 	mul.w	r6, r0, lr
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x260>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fde:	d22f      	bcs.n	8001040 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d92d      	bls.n	8001040 <__udivmoddi4+0x2b8>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	b289      	uxth	r1, r1
 8000fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x28a>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001008:	d216      	bcs.n	8001038 <__udivmoddi4+0x2b0>
 800100a:	428b      	cmp	r3, r1
 800100c:	d914      	bls.n	8001038 <__udivmoddi4+0x2b0>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001018:	e738      	b.n	8000e8c <__udivmoddi4+0x104>
 800101a:	462e      	mov	r6, r5
 800101c:	4628      	mov	r0, r5
 800101e:	e705      	b.n	8000e2c <__udivmoddi4+0xa4>
 8001020:	4606      	mov	r6, r0
 8001022:	e6e3      	b.n	8000dec <__udivmoddi4+0x64>
 8001024:	4618      	mov	r0, r3
 8001026:	e6f8      	b.n	8000e1a <__udivmoddi4+0x92>
 8001028:	454b      	cmp	r3, r9
 800102a:	d2a9      	bcs.n	8000f80 <__udivmoddi4+0x1f8>
 800102c:	ebb9 0802 	subs.w	r8, r9, r2
 8001030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001034:	3801      	subs	r0, #1
 8001036:	e7a3      	b.n	8000f80 <__udivmoddi4+0x1f8>
 8001038:	4646      	mov	r6, r8
 800103a:	e7ea      	b.n	8001012 <__udivmoddi4+0x28a>
 800103c:	4620      	mov	r0, r4
 800103e:	e794      	b.n	8000f6a <__udivmoddi4+0x1e2>
 8001040:	4640      	mov	r0, r8
 8001042:	e7d1      	b.n	8000fe8 <__udivmoddi4+0x260>
 8001044:	46d0      	mov	r8, sl
 8001046:	e77b      	b.n	8000f40 <__udivmoddi4+0x1b8>
 8001048:	3b02      	subs	r3, #2
 800104a:	4461      	add	r1, ip
 800104c:	e732      	b.n	8000eb4 <__udivmoddi4+0x12c>
 800104e:	4630      	mov	r0, r6
 8001050:	e709      	b.n	8000e66 <__udivmoddi4+0xde>
 8001052:	4464      	add	r4, ip
 8001054:	3802      	subs	r0, #2
 8001056:	e742      	b.n	8000ede <__udivmoddi4+0x156>

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_Z11analogWritehh>:

void digitalWrite(uint8_t pin, uint8_t state){
GPIOA -> ODR|=(state<<pin);
}

void analogWrite(uint8_t pin, uint8_t dutycycle){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
if(dutycycle ==100){
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d10c      	bne.n	800108c <_Z11analogWritehh+0x30>
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2104      	movs	r1, #4
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <_Z11analogWritehh+0x38>)
 8001078:	f003 fa4c 	bl	8004514 <HAL_GPIO_WritePin>
if(dutycycle ==0){
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <_Z11analogWritehh+0x30>
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);}
 8001082:	2200      	movs	r2, #0
 8001084:	2104      	movs	r1, #4
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <_Z11analogWritehh+0x38>)
 8001088:	f003 fa44 	bl	8004514 <HAL_GPIO_WritePin>
}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	48000c00 	.word	0x48000c00

08001098 <_Z6millisv>:

uint64_t millis(){
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800109c:	f002 fca8 	bl	80039f0 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2200      	movs	r2, #0
 80010a4:	461c      	mov	r4, r3
 80010a6:	4615      	mov	r5, r2
 80010a8:	4622      	mov	r2, r4
 80010aa:	462b      	mov	r3, r5
}
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	bdb0      	pop	{r4, r5, r7, pc}

080010b2 <_ZN5L298NC1Ehh>:
  pinMode(_pinIN1, OUTPUT);
  pinMode(_pinIN2, OUTPUT);
*/
}

L298N::L298N(uint8_t pinIN1, uint8_t pinIN2)
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
 80010be:	4613      	mov	r3, r2
 80010c0:	70bb      	strb	r3, [r7, #2]
{
  _pinEnable = -1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	22ff      	movs	r2, #255	; 0xff
 80010c6:	701a      	strb	r2, [r3, #0]
  _pinIN1 = pinIN1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	705a      	strb	r2, [r3, #1]
  _pinIN2 = pinIN2;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	78ba      	ldrb	r2, [r7, #2]
 80010d2:	709a      	strb	r2, [r3, #2]
  _pwmVal = 255; // It's always at the max speed due to jumper on module
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	70da      	strb	r2, [r3, #3]
  _isMoving = false;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	725a      	strb	r2, [r3, #9]
  _canMove = true;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	721a      	strb	r2, [r3, #8]
  _lastMs = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  _direction = STOP;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	729a      	strb	r2, [r3, #10]
/*
  pinMode(_pinIN1, OUTPUT);
  pinMode(_pinIN2, OUTPUT);
*/
}
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_ZN5L298N8setSpeedEt>:

void L298N::setSpeed(unsigned short pwmVal)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
  _pwmVal = pwmVal;
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	70da      	strb	r2, [r3, #3]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_ZN5L298N7forwardEv>:
{
  return _pwmVal;
}

void L298N::forward()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <_ZN5L298N7forwardEv+0x44>)
 8001130:	f003 f9f0 	bl	8004514 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <_ZN5L298N7forwardEv+0x44>)
 800113c:	f003 f9ea 	bl	8004514 <HAL_GPIO_WritePin>
analogWrite(_pinEnable, _pwmVal);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	78db      	ldrb	r3, [r3, #3]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f7ff ff86 	bl	800105c <_Z11analogWritehh>

/*
digitalWrite(_pinIN1, HIGH);
digitalWrite(_pinIN2, LOW);
*/
  _direction = FORWARD;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	729a      	strb	r2, [r3, #10]
  _isMoving = true;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	725a      	strb	r2, [r3, #9]
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	48000800 	.word	0x48000800

08001168 <_ZN5L298N8backwardEv>:

void L298N::backward()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
//  digitalWrite(_pinIN1, LOW);
//  digitalWrite(_pinIN2, HIGH);
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <_ZN5L298N8backwardEv+0x44>)
 8001178:	f003 f9cc 	bl	8004514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <_ZN5L298N8backwardEv+0x44>)
 8001184:	f003 f9c6 	bl	8004514 <HAL_GPIO_WritePin>
  analogWrite(_pinEnable, _pwmVal);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	78db      	ldrb	r3, [r3, #3]
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f7ff ff62 	bl	800105c <_Z11analogWritehh>

  _direction = BACKWARD;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	729a      	strb	r2, [r3, #10]
  _isMoving = true;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	725a      	strb	r2, [r3, #9]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48000800 	.word	0x48000800

080011b0 <_ZN5L298N6runForEmNS_9DirectionEPFvvE>:
}

//Timing and callback

void L298N::runFor(unsigned long delay, L298N::Direction direction, CallBackFunction callback)
{
 80011b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4613      	mov	r3, r2
 80011c0:	71fb      	strb	r3, [r7, #7]

  if ((_lastMs == 0) && _canMove)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11c      	bne.n	8001204 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x54>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	7a1b      	ldrb	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d018      	beq.n	8001204 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x54>
  {
    _lastMs = millis();
 80011d2:	f7ff ff61 	bl	8001098 <_Z6millisv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	605a      	str	r2, [r3, #4]

    switch (direction)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x3c>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d004      	beq.n	80011f4 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x44>
 80011ea:	e007      	b.n	80011fc <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x4c>
    {
    case FORWARD:
      this->forward();
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff ff97 	bl	8001120 <_ZN5L298N7forwardEv>
      break;
 80011f2:	e007      	b.n	8001204 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x54>
    case BACKWARD:
      this->backward();
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff ffb7 	bl	8001168 <_ZN5L298N8backwardEv>
      break;
 80011fa:	e003      	b.n	8001204 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x54>
    case STOP:
    default:
      this->stop();
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f843 	bl	8001288 <_ZN5L298N4stopEv>
      break;
 8001202:	bf00      	nop
    }
  }

  if (((millis() - _lastMs) > delay) && _canMove)
 8001204:	f7ff ff48 	bl	8001098 <_Z6millisv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	6849      	ldr	r1, [r1, #4]
 8001210:	2000      	movs	r0, #0
 8001212:	468a      	mov	sl, r1
 8001214:	4683      	mov	fp, r0
 8001216:	ebb2 040a 	subs.w	r4, r2, sl
 800121a:	eb63 050b 	sbc.w	r5, r3, fp
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2200      	movs	r2, #0
 8001222:	4698      	mov	r8, r3
 8001224:	4691      	mov	r9, r2
 8001226:	45a0      	cmp	r8, r4
 8001228:	eb79 0305 	sbcs.w	r3, r9, r5
 800122c:	d205      	bcs.n	800123a <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x8a>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	7a1b      	ldrb	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x8a>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0x8c>
 800123a:	2300      	movs	r3, #0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <_ZN5L298N6runForEmNS_9DirectionEPFvvE+0xa6>
  {
    this->stop();
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f821 	bl	8001288 <_ZN5L298N4stopEv>
    _lastMs = 0;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
    _canMove = false;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	721a      	strb	r2, [r3, #8]

    callback();
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	4798      	blx	r3
  }
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001260 <_ZN5L298N6runForEmNS_9DirectionE>:

void L298N::runFor(unsigned long delay, L298N::Direction direction)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	71fb      	strb	r3, [r7, #7]
  this->runFor(delay, direction, fakeCallback);
 800126e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <_ZN5L298N6runForEmNS_9DirectionE+0x24>)
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff ff9a 	bl	80011b0 <_ZN5L298N6runForEmNS_9DirectionEPFvvE>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080012cd 	.word	0x080012cd

08001288 <_ZN5L298N4stopEv>:
{
  this->runFor(delay, BACKWARD);
}

void L298N::stop()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <_ZN5L298N4stopEv+0x40>)
 8001298:	f003 f93c 	bl	8004514 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <_ZN5L298N4stopEv+0x40>)
 80012a4:	f003 f936 	bl	8004514 <HAL_GPIO_WritePin>

  analogWrite(_pinEnable, 0);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fed4 	bl	800105c <_Z11analogWritehh>

  _direction = STOP;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	729a      	strb	r2, [r3, #10]
  _isMoving = false;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	725a      	strb	r2, [r3, #9]
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	48000800 	.word	0x48000800

080012cc <_ZN5L298N12fakeCallbackEv>:
{
  return _direction;
}

void L298N::fakeCallback()
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80012e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e8:	eef0 7ae7 	vabs.f32	s15, s15
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>:
ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w, int addr) {
	_wire = w;
	i2cAddress = addr;
}

ICM20948_WE::ICM20948_WE(I2C_HandleTypeDef *w) {
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	_wire = w;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
	i2cAddress = 210; //0x68;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	22d2      	movs	r2, #210	; 0xd2
 800130e:	605a      	str	r2, [r3, #4]
}
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_ZN11ICM20948_WE4initEv>:

/************ Basic Settings ************/

bool ICM20948_WE::init() {
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	currentBank = 0;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	721a      	strb	r2, [r3, #8]
	if (!reset_ICM20948()) {
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fcd8 	bl	8001ce2 <_ZN11ICM20948_WE14reset_ICM20948Ev>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <_ZN11ICM20948_WE4initEv+0x28>
		return false;
 8001342:	2300      	movs	r3, #0
 8001344:	e03a      	b.n	80013bc <_ZN11ICM20948_WE4initEv+0x9e>
	}

	accOffsetVal.x = 0.0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
	accCorrFactor.x = 1.0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = 1.0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = 1.0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
	accRangeFactor = 1.0;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gyrOffsetVal.x = 0.0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
	gyrOffsetVal.y = 0.0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c
	gyrOffsetVal.z = 0.0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
	gyrRangeFactor = 1.0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	fifoType = ICM20948_FIFO_ACC;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2210      	movs	r2, #16
 80013a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	sleep(false);
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fb9a 	bl	8001ae2 <_ZN11ICM20948_WE5sleepEb>
	writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR 
 80013ae:	2301      	movs	r3, #1
 80013b0:	2209      	movs	r2, #9
 80013b2:	2102      	movs	r1, #2
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fbed 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>

	return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN11ICM20948_WE11autoOffsetsEv>:

void ICM20948_WE::autoOffsets() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	xyzFloat accRawVal, gyrRawVal;
	accOffsetVal.x = 0.0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
	accOffsetVal.y = 0.0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
	accOffsetVal.z = 0.0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28

	setGyrDLPF(ICM20948_DLPF_6); // lowest noise
 80013e4:	2106      	movs	r1, #6
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa6c 	bl	80018c4 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF>
	setGyrRange(ICM20948_GYRO_RANGE_250); // highest resolution
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa2e 	bl	8001850 <_ZN11ICM20948_WE11setGyrRangeE19ICM20948_GYRO_RANGE>
	setAccRange(ICM20948_ACC_RANGE_2G);
 80013f4:	2100      	movs	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f990 	bl	800171c <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
	setAccDLPF(ICM20948_DLPF_6);
 80013fc:	2106      	movs	r1, #6
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f9c6 	bl	8001790 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
	HAL_Delay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f002 faff 	bl	8003a08 <HAL_Delay>

	for (int i = 0; i < 50; i++) {
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	2b31      	cmp	r3, #49	; 0x31
 8001412:	dc36      	bgt.n	8001482 <_ZN11ICM20948_WE11autoOffsetsEv+0xbe>
		readSensor();
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 faa4 	bl	8001962 <_ZN11ICM20948_WE10readSensorEv>
		accRawVal = getAccRawValues();
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 faaf 	bl	800197e <_ZN11ICM20948_WE15getAccRawValuesEv>
 8001420:	eef0 6a40 	vmov.f32	s13, s0
 8001424:	eeb0 7a60 	vmov.f32	s14, s1
 8001428:	eef0 7a41 	vmov.f32	s15, s2
 800142c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001430:	ed87 7a06 	vstr	s14, [r7, #24]
 8001434:	edc7 7a07 	vstr	s15, [r7, #28]
		accOffsetVal.x += accRawVal.x;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	ed93 7a08 	vldr	s14, [r3, #32]
 800143e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a08 	vstr	s15, [r3, #32]
		accOffsetVal.y += accRawVal.y;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001452:	edd7 7a06 	vldr	s15, [r7, #24]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		accOffsetVal.z += accRawVal.z;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001466:	edd7 7a07 	vldr	s15, [r7, #28]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		HAL_Delay(10);
 8001474:	200a      	movs	r0, #10
 8001476:	f002 fac7 	bl	8003a08 <HAL_Delay>
	for (int i = 0; i < 50; i++) {
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
 8001480:	e7c5      	b.n	800140e <_ZN11ICM20948_WE11autoOffsetsEv+0x4a>
	}

	accOffsetVal.x /= 50;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed93 7a08 	vldr	s14, [r3, #32]
 8001488:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a08 	vstr	s15, [r3, #32]
	accOffsetVal.y /= 50;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800149c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 80014a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	accOffsetVal.z /= 50;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014b0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 80014b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	accOffsetVal.z -= 16384.0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014c4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001594 <_ZN11ICM20948_WE11autoOffsetsEv+0x1d0>
 80014c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	for (int i = 0; i < 50; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	2b31      	cmp	r3, #49	; 0x31
 80014da:	dc36      	bgt.n	800154a <_ZN11ICM20948_WE11autoOffsetsEv+0x186>
		readSensor();
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fa40 	bl	8001962 <_ZN11ICM20948_WE10readSensorEv>
		gyrRawVal = getGyrRawValues();
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 faa4 	bl	8001a30 <_ZN11ICM20948_WE15getGyrRawValuesEv>
 80014e8:	eef0 6a40 	vmov.f32	s13, s0
 80014ec:	eeb0 7a60 	vmov.f32	s14, s1
 80014f0:	eef0 7a41 	vmov.f32	s15, s2
 80014f4:	edc7 6a02 	vstr	s13, [r7, #8]
 80014f8:	ed87 7a03 	vstr	s14, [r7, #12]
 80014fc:	edc7 7a04 	vstr	s15, [r7, #16]
		gyrOffsetVal.x += gyrRawVal.x;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001506:	edd7 7a02 	vldr	s15, [r7, #8]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		gyrOffsetVal.y += gyrRawVal.y;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800151a:	edd7 7a03 	vldr	s15, [r7, #12]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		gyrOffsetVal.z += gyrRawVal.z;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800152e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		HAL_Delay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f002 fa63 	bl	8003a08 <HAL_Delay>
	for (int i = 0; i < 50; i++) {
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	3301      	adds	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	e7c5      	b.n	80014d6 <_ZN11ICM20948_WE11autoOffsetsEv+0x112>
	}

	gyrOffsetVal.x /= 50;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001550:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	gyrOffsetVal.y /= 50;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001564:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	gyrOffsetVal.z /= 50;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001578:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001590 <_ZN11ICM20948_WE11autoOffsetsEv+0x1cc>
 800157c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	42480000 	.word	0x42480000
 8001594:	46800000 	.word	0x46800000

08001598 <_ZN11ICM20948_WE13setAccOffsetsEffffff>:

void ICM20948_WE::setAccOffsets(float xMin, float xMax, float yMin, float yMax,
		float zMin, float zMax) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	61f8      	str	r0, [r7, #28]
 80015a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80015a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80015a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80015ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80015b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80015b4:	edc7 2a01 	vstr	s5, [r7, #4]
	accOffsetVal.x = (xMax + xMin) * 0.5;
 80015b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	edc3 7a08 	vstr	s15, [r3, #32]
	accOffsetVal.y = (yMax + yMin) * 0.5;
 80015d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	accOffsetVal.z = (zMax + zMin) * 0.5;
 80015ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	accCorrFactor.x = (xMax + abs(xMin)) / 32768.0;
 8001606:	ed97 0a06 	vldr	s0, [r7, #24]
 800160a:	f7ff fe66 	bl	80012da <_ZSt3absf>
 800160e:	eeb0 7a40 	vmov.f32	s14, s0
 8001612:	edd7 7a05 	vldr	s15, [r7, #20]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffc5 	bl	80005ac <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 8001628:	f7ff f942 	bl	80008b0 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fb0a 	bl	8000c4c <__aeabi_d2f>
 8001638:	4602      	mov	r2, r0
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
	accCorrFactor.y = (yMax + abs(yMin)) / 32768.0;
 800163e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001642:	f7ff fe4a 	bl	80012da <_ZSt3absf>
 8001646:	eeb0 7a40 	vmov.f32	s14, s0
 800164a:	edd7 7a03 	vldr	s15, [r7, #12]
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f7fe ffa9 	bl	80005ac <__aeabi_f2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 8001660:	f7ff f926 	bl	80008b0 <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff faee 	bl	8000c4c <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
	accCorrFactor.z = (zMax + abs(zMin)) / 32768.0;
 8001676:	ed97 0a02 	vldr	s0, [r7, #8]
 800167a:	f7ff fe2e 	bl	80012da <_ZSt3absf>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	edd7 7a01 	vldr	s15, [r7, #4]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff8d 	bl	80005ac <__aeabi_f2d>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_ZN11ICM20948_WE13setAccOffsetsEffffff+0x120>)
 8001698:	f7ff f90a 	bl	80008b0 <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fad2 	bl	8000c4c <__aeabi_d2f>
 80016a8:	4602      	mov	r2, r0
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40e00000 	.word	0x40e00000

080016bc <_ZN11ICM20948_WE9enableAccEb>:

uint8_t ICM20948_WE::whoAmI() {
	return readRegister8(0, ICM20948_WHO_AM_I);
}

void ICM20948_WE::enableAcc(bool enAcc) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_2);
 80016c8:	2207      	movs	r2, #7
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fab7 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (enAcc) {
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <_ZN11ICM20948_WE9enableAccEb+0x3a>
		regVal &= ~ICM20948_ACC_EN;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016e8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80016f4:	e008      	b.n	8001708 <_ZN11ICM20948_WE9enableAccEb+0x4c>
	} else {
		regVal |= ICM20948_ACC_EN;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016fc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, 0x00); //regVal);
 8001708:	2300      	movs	r3, #0
 800170a:	2207      	movs	r2, #7
 800170c:	2100      	movs	r1, #0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa40 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>:

void ICM20948_WE::setAccRange(ICM20948_accRange accRange) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 8001728:	2214      	movs	r2, #20
 800172a:	2102      	movs	r1, #2
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa87 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001742:	f023 0306 	bic.w	r3, r3, #6
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (accRange << 1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001754:	b25a      	sxtb	r2, r3
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	b25b      	sxtb	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800176e:	2214      	movs	r2, #20
 8001770:	2102      	movs	r1, #2
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fa0e 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
	accRangeFactor = 1 << accRange;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2201      	movs	r2, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setAccDLPF(ICM20948_dlpf dlpf) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_ACCEL_CONFIG);
 800179c:	2214      	movs	r2, #20
 800179e:	2102      	movs	r1, #2
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fa4d 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d111      	bne.n	80017da <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80017ce:	2214      	movs	r2, #20
 80017d0:	2102      	movs	r1, #2
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f9de 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 80017d8:	e026      	b.n	8001828 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80017f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001804:	b25a      	sxtb	r2, r3
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_ACCEL_CONFIG, regVal);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800181e:	2214      	movs	r2, #20
 8001820:	2102      	movs	r1, #2
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f9b6 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZN11ICM20948_WE23setAccSampleRateDividerEt>:

void ICM20948_WE::setAccSampleRateDivider(uint16_t accSplRateDiv) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
	writeRegister16(2, ICM20948_ACCEL_SMPLRT_DIV_1, accSplRateDiv);
 800183a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800183e:	2210      	movs	r2, #16
 8001840:	2102      	movs	r1, #2
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f9cd 	bl	8001be2 <_ZN11ICM20948_WE15writeRegister16Ehhs>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN11ICM20948_WE11setGyrRangeE19ICM20948_GYRO_RANGE>:
		regVal |= ICM20948_GYR_EN;
	}
	writeRegister8(0, ICM20948_PWR_MGMT_2, regVal);
}

void ICM20948_WE::setGyrRange(ICM20948_gyroRange gyroRange) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_GYRO_CONFIG_1);
 800185c:	2201      	movs	r2, #1
 800185e:	2102      	movs	r1, #2
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f9ed 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal &= ~(0x06);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001876:	f023 0306 	bic.w	r3, r3, #6
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regVal |= (gyroRange << 1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001888:	b25a      	sxtb	r2, r3
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	b25b      	sxtb	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80018a2:	2201      	movs	r2, #1
 80018a4:	2102      	movs	r1, #2
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f974 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
	gyrRangeFactor = (1 << gyroRange);
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2201      	movs	r2, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF>:

void ICM20948_WE::setGyrDLPF(ICM20948_dlpf dlpf) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(2, ICM20948_GYRO_CONFIG_1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2102      	movs	r1, #2
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f9b3 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (dlpf == ICM20948_DLPF_OFF) {
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d111      	bne.n	800190e <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF+0x4a>
		regVal &= 0xFE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001902:	2201      	movs	r2, #1
 8001904:	2102      	movs	r1, #2
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f944 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
		return;
 800190c:	e026      	b.n	800195c <_ZN11ICM20948_WE10setGyrDLPFE13ICM20948_DLPF+0x98>
	} else {
		regVal |= 0x01;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal &= 0xC7;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001926:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		regVal |= (dlpf << 3);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001938:	b25a      	sxtb	r2, r3
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	b25b      	sxtb	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b25b      	sxtb	r3, r3
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(2, ICM20948_GYRO_CONFIG_1, regVal);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001952:	2201      	movs	r2, #1
 8001954:	2102      	movs	r1, #2
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f91c 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_ZN11ICM20948_WE10readSensorEv>:
	}
}

/************* x,y,z results *************/

void ICM20948_WE::readSensor() {
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	readAllData(buffer);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3309      	adds	r3, #9
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f990 	bl	8001c96 <_ZN11ICM20948_WE11readAllDataEPh>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_ZN11ICM20948_WE15getAccRawValuesEv>:

xyzFloat ICM20948_WE::getAccRawValues() {
 800197e:	b580      	push	{r7, lr}
 8001980:	b08c      	sub	sp, #48	; 0x30
 8001982:	af00      	add	r7, sp, #0
 8001984:	6178      	str	r0, [r7, #20]
	xyzFloat accRawVal;
	accRawVal.x = (int16_t) (((buffer[0]) << 8) | buffer[1]) * 1.0;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	7a5b      	ldrb	r3, [r3, #9]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	7a9b      	ldrb	r3, [r3, #10]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21b      	sxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdf5 	bl	8000588 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f951 	bl	8000c4c <__aeabi_d2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
	accRawVal.y = (int16_t) (((buffer[2]) << 8) | (int16_t) buffer[3]) * 1.0;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	7adb      	ldrb	r3, [r3, #11]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	7b1b      	ldrb	r3, [r3, #12]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fde1 	bl	8000588 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f93d 	bl	8000c4c <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	61fb      	str	r3, [r7, #28]
	accRawVal.z = (int16_t) (((buffer[4]) << 8) | buffer[5]) * 1.0;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	7b5b      	ldrb	r3, [r3, #13]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	7b9b      	ldrb	r3, [r3, #14]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdcd 	bl	8000588 <__aeabi_i2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f929 	bl	8000c4c <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	623b      	str	r3, [r7, #32]
	return accRawVal;
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	f107 0218 	add.w	r2, r7, #24
 8001a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	ee06 1a90 	vmov	s13, r1
 8001a16:	ee07 2a10 	vmov	s14, r2
 8001a1a:	ee07 3a90 	vmov	s15, r3
}
 8001a1e:	eeb0 0a66 	vmov.f32	s0, s13
 8001a22:	eef0 0a47 	vmov.f32	s1, s14
 8001a26:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2a:	3730      	adds	r7, #48	; 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN11ICM20948_WE15getGyrRawValuesEv>:
	float tmp = (rawTemp * 1.0 - ICM20948_ROOM_TEMP_OFFSET)
			/ ICM20948_T_SENSITIVITY + 21.0;
	return tmp;
}

xyzFloat ICM20948_WE::getGyrRawValues() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6178      	str	r0, [r7, #20]
	xyzFloat gyrRawVal;

	gyrRawVal.x = (int16_t) (((buffer[6]) << 8) | buffer[7]) * 1.0;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	7bdb      	ldrb	r3, [r3, #15]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	7c1b      	ldrb	r3, [r3, #16]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd9c 	bl	8000588 <__aeabi_i2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f8f8 	bl	8000c4c <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	61bb      	str	r3, [r7, #24]
	gyrRawVal.y = (int16_t) (((buffer[8]) << 8) | buffer[9]) * 1.0;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	7c5b      	ldrb	r3, [r3, #17]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	7c9b      	ldrb	r3, [r3, #18]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd88 	bl	8000588 <__aeabi_i2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8e4 	bl	8000c4c <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	61fb      	str	r3, [r7, #28]
	gyrRawVal.z = (int16_t) (((buffer[10]) << 8) | buffer[11]) * 1.0;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	7cdb      	ldrb	r3, [r3, #19]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	7d1b      	ldrb	r3, [r3, #20]
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd74 	bl	8000588 <__aeabi_i2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f8d0 	bl	8000c4c <__aeabi_d2f>
 8001aac:	4603      	mov	r3, r0
 8001aae:	623b      	str	r3, [r7, #32]

	return gyrRawVal;
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	f107 0218 	add.w	r2, r7, #24
 8001ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	ee06 1a90 	vmov	s13, r1
 8001ac8:	ee07 2a10 	vmov	s14, r2
 8001acc:	ee07 3a90 	vmov	s15, r3
}
 8001ad0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ad4:	eef0 0a47 	vmov.f32	s1, s14
 8001ad8:	eeb0 1a67 	vmov.f32	s2, s15
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZN11ICM20948_WE5sleepEb>:

void ICM20948_WE::setAccAverageInCycleMode(ICM20948_accAvgLowPower avg) {
	writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
}

void ICM20948_WE::sleep(bool sleep) {
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
	regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 8001aee:	2206      	movs	r2, #6
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8a4 	bl	8001c40 <_ZN11ICM20948_WE13readRegister8Ehh>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	if (sleep) {
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <_ZN11ICM20948_WE5sleepEb+0x3a>
		regVal |= ICM20948_SLEEP;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b1a:	e008      	b.n	8001b2e <_ZN11ICM20948_WE5sleepEb+0x4c>
	} else {
		regVal &= ~ICM20948_SLEEP;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001b34:	2206      	movs	r2, #6
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f82b 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZN11ICM20948_WE10switchBankEh>:
	gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);

	return gyrRawVal;
}

void ICM20948_WE::switchBank(uint8_t newBank) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
	if (newBank != currentBank) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7a1b      	ldrb	r3, [r3, #8]
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d017      	beq.n	8001b8c <_ZN11ICM20948_WE10switchBankEh+0x46>
		currentBank = newBank;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	721a      	strb	r2, [r3, #8]

		std::uint8_t pData[2] = { ICM20948_REG_BANK_SEL, currentBank << 4 };
 8001b62:	2300      	movs	r3, #0
 8001b64:	81bb      	strh	r3, [r7, #12]
 8001b66:	237f      	movs	r3, #127	; 0x7f
 8001b68:	733b      	strb	r3, [r7, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7a1b      	ldrb	r3, [r3, #8]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	f107 020c 	add.w	r2, r7, #12
 8001b82:	230a      	movs	r3, #10
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2302      	movs	r3, #2
 8001b88:	f002 fd8e 	bl	80046a8 <HAL_I2C_Master_Transmit>
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>:

uint8_t ICM20948_WE::writeRegister8(uint8_t bank, uint8_t reg, uint8_t val) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70bb      	strb	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
	switchBank(bank);
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffc7 	bl	8001b46 <_ZN11ICM20948_WE10switchBankEh>
	std::uint8_t pData[2] = { reg, val };
 8001bb8:	78bb      	ldrb	r3, [r7, #2]
 8001bba:	733b      	strb	r3, [r7, #12]
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 2, 10);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	f107 020c 	add.w	r2, r7, #12
 8001bce:	230a      	movs	r3, #10
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f002 fd68 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_ZN11ICM20948_WE15writeRegister16Ehhs>:

uint8_t ICM20948_WE::writeRegister16(uint8_t bank, uint8_t reg, int16_t val) {
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	4608      	mov	r0, r1
 8001bec:	4611      	mov	r1, r2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70bb      	strb	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	803b      	strh	r3, [r7, #0]
	switchBank(bank);
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffa0 	bl	8001b46 <_ZN11ICM20948_WE10switchBankEh>
	int8_t MSByte = (int8_t) ((val >> 8) & 0xFF);
 8001c06:	883b      	ldrh	r3, [r7, #0]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t LSByte = val & 0xFF;
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	73bb      	strb	r3, [r7, #14]
	std::uint8_t pData[3] = { reg, MSByte, LSByte };
 8001c12:	78bb      	ldrb	r3, [r7, #2]
 8001c14:	723b      	strb	r3, [r7, #8]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	727b      	strb	r3, [r7, #9]
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Master_Transmit(_wire, i2cAddress, pData, 3, 10);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	b299      	uxth	r1, r3
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2303      	movs	r3, #3
 8001c32:	f002 fd39 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZN11ICM20948_WE13readRegister8Ehh>:

uint8_t ICM20948_WE::readRegister8(uint8_t bank, uint8_t reg) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	70bb      	strb	r3, [r7, #2]
	switchBank(bank);
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff76 	bl	8001b46 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t regValue = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &reg, 2, 10);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	b299      	uxth	r1, r3
 8001c68:	1cba      	adds	r2, r7, #2
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f002 fd1a 	bl	80046a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_wire, i2cAddress, &regValue, 1, 10);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f107 020f 	add.w	r2, r7, #15
 8001c82:	230a      	movs	r3, #10
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2301      	movs	r3, #1
 8001c88:	f002 fe02 	bl	8004890 <HAL_I2C_Master_Receive>
	return regValue;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZN11ICM20948_WE11readAllDataEPh>:
	MSByte = reg16Val[1];
	MSByte = reg16Val[0];
	return (MSByte << 8) + LSByte;
}

void ICM20948_WE::readAllData(uint8_t *data) {
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af02      	add	r7, sp, #8
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
	switchBank(0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff4f 	bl	8001b46 <_ZN11ICM20948_WE10switchBankEh>
	uint8_t x_acc_h = 0x2D;
 8001ca8:	232d      	movs	r3, #45	; 0x2d
 8001caa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_wire, i2cAddress, &x_acc_h, 1, 10);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	f107 020f 	add.w	r2, r7, #15
 8001cba:	230a      	movs	r3, #10
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f002 fcf2 	bl	80046a8 <HAL_I2C_Master_Transmit>
//    HAL_I2C_Master_Transmit(_wire, i2cAddress, ICM20948_ACCEL_OUT, 1, 10);
	HAL_I2C_Master_Receive(_wire, i2cAddress, data, 20, 10);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	230a      	movs	r3, #10
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2314      	movs	r3, #20
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	f002 fddb 	bl	8004890 <HAL_I2C_Master_Receive>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN11ICM20948_WE14reset_ICM20948Ev>:
	regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
	enableMagDataRead(AK09916_HXL, 0x08);
	return regValue;
}

uint8_t ICM20948_WE::reset_ICM20948() {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	uint8_t ack = writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	2206      	movs	r2, #6
 8001cee:	2100      	movs	r1, #0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff4f 	bl	8001b94 <_ZN11ICM20948_WE14writeRegister8Ehhh>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);  // wait for registers to reset
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f001 fe84 	bl	8003a08 <HAL_Delay>
	return (ack == 0);
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_Z12tilt_requestiPPc>:
static void MX_GPIO_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_I2C3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
uint8_t tilt_request(int argc, char *argv[]){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
//	for(int i=0;i<10;i++){
//	GPIOA->ODR^=1<<5;  // blink the led//	  HAL_Delay(500);
//	HAL_Delay(100);
//}

	if(strcmp(argv[1],"up") == 0){
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	491f      	ldr	r1, [pc, #124]	; (8001da4 <_Z12tilt_requestiPPc+0x90>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe faca 	bl	80002c0 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <_Z12tilt_requestiPPc+0x38>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot CC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d38:	481b      	ldr	r0, [pc, #108]	; (8001da8 <_Z12tilt_requestiPPc+0x94>)
 8001d3a:	f002 fbeb 	bl	8004514 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <_Z12tilt_requestiPPc+0x94>)
 8001d46:	f002 fbe5 	bl	8004514 <HAL_GPIO_WritePin>
 8001d4a:	e018      	b.n	8001d7e <_Z12tilt_requestiPPc+0x6a>
	}
	else if(strcmp(argv[1],"down") == 0){
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4916      	ldr	r1, [pc, #88]	; (8001dac <_Z12tilt_requestiPPc+0x98>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fab3 	bl	80002c0 <strcmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10c      	bne.n	8001d7a <_Z12tilt_requestiPPc+0x66>
//		HAL_UART_Transmit(&huart2, (uint8_t*)"Rot AC", sizeof(argv[1]), 10);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d66:	4810      	ldr	r0, [pc, #64]	; (8001da8 <_Z12tilt_requestiPPc+0x94>)
 8001d68:	f002 fbd4 	bl	8004514 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <_Z12tilt_requestiPPc+0x94>)
 8001d74:	f002 fbce 	bl	8004514 <HAL_GPIO_WritePin>
 8001d78:	e001      	b.n	8001d7e <_Z12tilt_requestiPPc+0x6a>
	}else{
		return EXIT_FAILURE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <_Z12tilt_requestiPPc+0x88>
	}

	// Wont work, bad hal stuff!
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2104      	movs	r1, #4
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <_Z12tilt_requestiPPc+0x9c>)
 8001d84:	f002 fbc6 	bl	8004514 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8c:	f001 fe3c 	bl	8003a08 <HAL_Delay>
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2104      	movs	r1, #4
 8001d94:	4806      	ldr	r0, [pc, #24]	; (8001db0 <_Z12tilt_requestiPPc+0x9c>)
 8001d96:	f002 fbbd 	bl	8004514 <HAL_GPIO_WritePin>
	  return EXIT_SUCCESS;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800d2e0 	.word	0x0800d2e0
 8001da8:	48000800 	.word	0x48000800
 8001dac:	0800d2e4 	.word	0x0800d2e4
 8001db0:	48000c00 	.word	0x48000c00

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b098      	sub	sp, #96	; 0x60
 8001db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f001 fdb4 	bl	8003926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f8bb 	bl	8001f38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f000 fa09 	bl	80021d8 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 8001dc6:	f000 f90d 	bl	8001fe4 <_ZL14MX_FDCAN1_Initv>
  MX_I2C3_Init();
 8001dca:	f000 f957 	bl	800207c <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001dce:	f000 f9a3 	bl	8002118 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  L298N mot(10,12); // Connected to PC10,PC12
 8001dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	210a      	movs	r1, #10
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f969 	bl	80010b2 <_ZN5L298NC1Ehh>
  mot.setSpeed(100);
 8001de0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de4:	2164      	movs	r1, #100	; 0x64
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f98a 	bl	8001100 <_ZN5L298N8setSpeedEt>
  //mot.forward();
  mot.backward();
 8001dec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f9b9 	bl	8001168 <_ZN5L298N8backwardEv>
  HAL_Delay(500);
 8001df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dfa:	f001 fe05 	bl	8003a08 <HAL_Delay>
  mot.runFor(500,L298N::Direction::FORWARD);
 8001dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fa29 	bl	8001260 <_ZN5L298N6runForEmNS_9DirectionE>
  //mot.stop();
  CLI_INIT(&huart2);
 8001e0e:	483a      	ldr	r0, [pc, #232]	; (8001ef8 <main+0x144>)
 8001e10:	f000 fd34 	bl	800287c <cli_init>
   CLI_ADD_CMD("tilt", "tilt [up] / [down]", tilt_request);
 8001e14:	4a39      	ldr	r2, [pc, #228]	; (8001efc <main+0x148>)
 8001e16:	493a      	ldr	r1, [pc, #232]	; (8001f00 <main+0x14c>)
 8001e18:	483a      	ldr	r0, [pc, #232]	; (8001f04 <main+0x150>)
 8001e1a:	f001 fa75 	bl	8003308 <cli_add_command>
   CLI_RUN();
 8001e1e:	f001 f88f 	bl	8002f40 <cli_run>
   ICM20948_WE myIMU = ICM20948_WE(&hi2c3);
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4938      	ldr	r1, [pc, #224]	; (8001f08 <main+0x154>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fa67 	bl	80012fa <_ZN11ICM20948_WEC1EP19__I2C_HandleTypeDef>


  	if(!myIMU.init()){
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fa75 	bl	800131e <_ZN11ICM20948_WE4initEv>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <main+0x94>
  	  printf("ICM20948 does not respond\r\n");
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <main+0x158>)
 8001e42:	f007 ffc7 	bl	8009dd4 <puts>
 8001e46:	e002      	b.n	8001e4e <main+0x9a>
  }
  else{
    printf("ICM20948 is connected\r\n");
 8001e48:	4831      	ldr	r0, [pc, #196]	; (8001f10 <main+0x15c>)
 8001e4a:	f007 ffc3 	bl	8009dd4 <puts>
  }


  	printf("Position your ICM20948 flat and don't move it - calibrating...\r\n");
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <main+0x160>)
 8001e50:	f007 ffc0 	bl	8009dd4 <puts>
  HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	f001 fdd6 	bl	8003a08 <HAL_Delay>
  myIMU.enableAcc(true);
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fc2b 	bl	80016bc <_ZN11ICM20948_WE9enableAccEb>

  myIMU.setAccRange(ICM20948_ACC_RANGE_2G);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fc56 	bl	800171c <_ZN11ICM20948_WE11setAccRangeE18ICM20948_ACC_RANGE>
  myIMU.setAccSampleRateDivider(10);
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	210a      	movs	r1, #10
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fcda 	bl	800182e <_ZN11ICM20948_WE23setAccSampleRateDividerEt>
  myIMU.setAccDLPF(ICM20948_DLPF_6);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2106      	movs	r1, #6
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc86 	bl	8001790 <_ZN11ICM20948_WE10setAccDLPFE13ICM20948_DLPF>
  myIMU.setAccOffsets(-16330.0, 16450.0, -16600.0, 16180.0, -16640.0, 16560.0);
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	eddf 2a24 	vldr	s5, [pc, #144]	; 8001f18 <main+0x164>
 8001e8a:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8001f1c <main+0x168>
 8001e8e:	eddf 1a24 	vldr	s3, [pc, #144]	; 8001f20 <main+0x16c>
 8001e92:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8001f24 <main+0x170>
 8001e96:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001f28 <main+0x174>
 8001e9a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001f2c <main+0x178>
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fb7a 	bl	8001598 <_ZN11ICM20948_WE13setAccOffsetsEffffff>
  myIMU.autoOffsets();
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fa8c 	bl	80013c4 <_ZN11ICM20948_WE11autoOffsetsEv>

  printf("Done!\r\n");
 8001eac:	4820      	ldr	r0, [pc, #128]	; (8001f30 <main+0x17c>)
 8001eae:	f007 ff91 	bl	8009dd4 <puts>
  HAL_Delay(1000);
 8001eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb6:	f001 fda7 	bl	8003a08 <HAL_Delay>

  // Aktivierte Achsen lesen:
  uint8_t active_axes;
  uint8_t disable_acc_reg = 0x7;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	70bb      	strb	r3, [r7, #2]
  HAL_I2C_Master_Transmit(&hi2c3, 210, &disable_acc_reg, 1, 10);
 8001ebe:	1cba      	adds	r2, r7, #2
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	21d2      	movs	r1, #210	; 0xd2
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <main+0x154>)
 8001eca:	f002 fbed 	bl	80046a8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c3, 210, &active_axes, 1, 10);
 8001ece:	1cfa      	adds	r2, r7, #3
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	21d2      	movs	r1, #210	; 0xd2
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <main+0x154>)
 8001eda:	f002 fcd9 	bl	8004890 <HAL_I2C_Master_Receive>
  printf("Active axes: 0x%x\r\n",active_axes);
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4814      	ldr	r0, [pc, #80]	; (8001f34 <main+0x180>)
 8001ee4:	f007 feda 	bl	8009c9c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_Delay(500);
 8001ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eec:	f001 fd8c 	bl	8003a08 <HAL_Delay>
	  CLI_RUN();
 8001ef0:	f001 f826 	bl	8002f40 <cli_run>
HAL_Delay(500);
 8001ef4:	e7f8      	b.n	8001ee8 <main+0x134>
 8001ef6:	bf00      	nop
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	08001d15 	.word	0x08001d15
 8001f00:	0800d2ec 	.word	0x0800d2ec
 8001f04:	0800d300 	.word	0x0800d300
 8001f08:	20000280 	.word	0x20000280
 8001f0c:	0800d308 	.word	0x0800d308
 8001f10:	0800d324 	.word	0x0800d324
 8001f14:	0800d33c 	.word	0x0800d33c
 8001f18:	46816000 	.word	0x46816000
 8001f1c:	c6820000 	.word	0xc6820000
 8001f20:	467cd000 	.word	0x467cd000
 8001f24:	c681b000 	.word	0xc681b000
 8001f28:	46808400 	.word	0x46808400
 8001f2c:	c67f2800 	.word	0xc67f2800
 8001f30:	0800d37c 	.word	0x0800d37c
 8001f34:	0800d384 	.word	0x0800d384

08001f38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	; 0x50
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	2238      	movs	r2, #56	; 0x38
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fdec 	bl	8008b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f003 f89e 	bl	800509c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f72:	2302      	movs	r3, #2
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001f7a:	2355      	movs	r3, #85	; 0x55
 8001f7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f938 	bl	8005204 <HAL_RCC_OscConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001fa4:	f000 f9bc 	bl	8002320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2303      	movs	r3, #3
 8001fae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fc37 	bl	8005834 <HAL_RCC_ClockConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001fd6:	f000 f9a3 	bl	8002320 <Error_Handler>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3750      	adds	r7, #80	; 0x50
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001fec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002002:	2200      	movs	r2, #0
 8002004:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 800200e:	2200      	movs	r2, #0
 8002010:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002014:	2201      	movs	r2, #1
 8002016:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 800201a:	2201      	movs	r2, #1
 800201c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002020:	2202      	movs	r2, #2
 8002022:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002026:	2202      	movs	r2, #2
 8002028:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 800202c:	2201      	movs	r2, #1
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002032:	2201      	movs	r2, #1
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002038:	2201      	movs	r2, #1
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 800203e:	2201      	movs	r2, #1
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002056:	f001 ff15 	bl	8003e84 <HAL_FDCAN_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800206a:	f000 f959 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000021c 	.word	0x2000021c
 8002078:	40006400 	.word	0x40006400

0800207c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 8002082:	4a23      	ldr	r2, [pc, #140]	; (8002110 <_ZL12MX_I2C3_Initv+0x94>)
 8002084:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 8002088:	4a22      	ldr	r2, [pc, #136]	; (8002114 <_ZL12MX_I2C3_Initv+0x98>)
 800208a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 8002094:	2201      	movs	r2, #1
 8002096:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020b8:	f002 fa67 	bl	800458a <HAL_I2C_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80020cc:	f000 f928 	bl	8002320 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480e      	ldr	r0, [pc, #56]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020d4:	f002 ff4a 	bl	8004f6c <HAL_I2CEx_ConfigAnalogFilter>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 80020e8:	f000 f91a 	bl	8002320 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80020ec:	2100      	movs	r1, #0
 80020ee:	4807      	ldr	r0, [pc, #28]	; (800210c <_ZL12MX_I2C3_Initv+0x90>)
 80020f0:	f002 ff87 	bl	8005002 <HAL_I2CEx_ConfigDigitalFilter>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8002104:	f000 f90c 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000280 	.word	0x20000280
 8002110:	40007800 	.word	0x40007800
 8002114:	30a0a7fb 	.word	0x30a0a7fb

08002118 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800211e:	4a2d      	ldr	r2, [pc, #180]	; (80021d4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002160:	481b      	ldr	r0, [pc, #108]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002162:	f003 ffd1 	bl	8006108 <HAL_UART_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8002176:	f000 f8d3 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217a:	2100      	movs	r1, #0
 800217c:	4814      	ldr	r0, [pc, #80]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800217e:	f006 f9ae 	bl	80084de <HAL_UARTEx_SetTxFifoThreshold>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8002192:	f000 f8c5 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002196:	2100      	movs	r1, #0
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800219a:	f006 f9de 	bl	800855a <HAL_UARTEx_SetRxFifoThreshold>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80021ae:	f000 f8b7 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80021b4:	f006 f95a 	bl	800846c <HAL_UARTEx_DisableFifoMode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80021c8:	f000 f8aa 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200002cc 	.word	0x200002cc
 80021d4:	40004400 	.word	0x40004400

080021d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a48      	ldr	r2, [pc, #288]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	4a42      	ldr	r2, [pc, #264]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a3c      	ldr	r2, [pc, #240]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a36      	ldr	r2, [pc, #216]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a30      	ldr	r2, [pc, #192]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <_ZL12MX_GPIO_Initv+0x13c>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2120      	movs	r1, #32
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f002 f951 	bl	8004514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002278:	4827      	ldr	r0, [pc, #156]	; (8002318 <_ZL12MX_GPIO_Initv+0x140>)
 800227a:	f002 f94b 	bl	8004514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2104      	movs	r1, #4
 8002282:	4826      	ldr	r0, [pc, #152]	; (800231c <_ZL12MX_GPIO_Initv+0x144>)
 8002284:	f002 f946 	bl	8004514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	481e      	ldr	r0, [pc, #120]	; (8002318 <_ZL12MX_GPIO_Initv+0x140>)
 80022a0:	f001 ffb6 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022a4:	2320      	movs	r3, #32
 80022a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f001 ffa7 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 80022c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	480f      	ldr	r0, [pc, #60]	; (8002318 <_ZL12MX_GPIO_Initv+0x140>)
 80022dc:	f001 ff98 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 80022e0:	2304      	movs	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <_ZL12MX_GPIO_Initv+0x144>)
 80022f8:	f001 ff8a 	bl	8004210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2028      	movs	r0, #40	; 0x28
 8002302:	f001 fcb8 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002306:	2028      	movs	r0, #40	; 0x28
 8002308:	f001 fccf 	bl	8003caa <HAL_NVIC_EnableIRQ>

}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	48000800 	.word	0x48000800
 800231c:	48000c00 	.word	0x48000c00

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002328:	e7fe      	b.n	8002328 <Error_Handler+0x8>
	...

0800232c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_MspInit+0x44>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_MspInit+0x44>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6613      	str	r3, [r2, #96]	; 0x60
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_MspInit+0x44>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_MspInit+0x44>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_MspInit+0x44>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_MspInit+0x44>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002362:	f002 ff3f 	bl	80051e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b09e      	sub	sp, #120	; 0x78
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	2254      	movs	r2, #84	; 0x54
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f006 fbc5 	bl	8008b24 <memset>
  if(hfdcan->Instance==FDCAN1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_FDCAN_MspInit+0xac>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d138      	bne.n	8002416 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80023aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 fc59 	bl	8005c6c <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80023c0:	f7ff ffae 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a16      	ldr	r2, [pc, #88]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_FDCAN_MspInit+0xb0>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002406:	2309      	movs	r3, #9
 8002408:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_FDCAN_MspInit+0xb4>)
 8002412:	f001 fefd 	bl	8004210 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3778      	adds	r7, #120	; 0x78
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40006400 	.word	0x40006400
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400

0800242c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b09e      	sub	sp, #120	; 0x78
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	2254      	movs	r2, #84	; 0x54
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 fb69 	bl	8008b24 <memset>
  if(hi2c->Instance==I2C3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_I2C_MspInit+0xa8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d137      	bne.n	80024cc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fbfe 	bl	8005c6c <HAL_RCCEx_PeriphCLKConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002476:	f7ff ff53 	bl	8002320 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002496:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002498:	2312      	movs	r3, #18
 800249a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80024a4:	2308      	movs	r3, #8
 80024a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ac:	4619      	mov	r1, r3
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <HAL_I2C_MspInit+0xb0>)
 80024b0:	f001 feae 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 80024ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_I2C_MspInit+0xac>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	3778      	adds	r7, #120	; 0x78
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40007800 	.word	0x40007800
 80024d8:	40021000 	.word	0x40021000
 80024dc:	48000800 	.word	0x48000800

080024e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09e      	sub	sp, #120	; 0x78
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2254      	movs	r2, #84	; 0x54
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f006 fb0f 	bl	8008b24 <memset>
  if(huart->Instance==USART2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_UART_MspInit+0xb8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d13e      	bne.n	800258e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002510:	2302      	movs	r3, #2
 8002512:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4618      	mov	r0, r3
 800251e:	f003 fba5 	bl	8005c6c <HAL_RCCEx_PeriphCLKConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002528:	f7ff fefa 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_UART_MspInit+0xbc>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0xbc>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_UART_MspInit+0xbc>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800255c:	230c      	movs	r3, #12
 800255e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256c:	2307      	movs	r3, #7
 800256e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002574:	4619      	mov	r1, r3
 8002576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257a:	f001 fe49 	bl	8004210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2026      	movs	r0, #38	; 0x26
 8002584:	f001 fb77 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002588:	2026      	movs	r0, #38	; 0x26
 800258a:	f001 fb8e 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3778      	adds	r7, #120	; 0x78
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004400 	.word	0x40004400
 800259c:	40021000 	.word	0x40021000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <NMI_Handler+0x4>

080025a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <MemManage_Handler+0x4>

080025b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <BusFault_Handler+0x4>

080025b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <UsageFault_Handler+0x4>

080025be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ec:	f001 f9ee 	bl	80039cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <USART2_IRQHandler+0x10>)
 80025fa:	f003 ff69 	bl	80064d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200002cc 	.word	0x200002cc

08002608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800260c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002610:	f001 ff98 	bl	8004544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <_write>:
 * 	These functions need to be redefined over the [_weak] versions defined by
 * 	GCC (or in syscalls.c by cubeMX) to make the stdio library functional.
 *
 ******************************************************************************/

int _write(int file, char *data, int len){
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	if(file != STDOUT_FILENO && file != STDERR_FILENO){
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d00a      	beq.n	8002640 <_write+0x28>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d007      	beq.n	8002640 <_write+0x28>
		errno = EBADF;
 8002630:	f006 f82e 	bl	8008690 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	2209      	movs	r2, #9
 8002638:	601a      	str	r2, [r3, #0]
		return -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263e:	e041      	b.n	80026c4 <_write+0xac>
	}

	if(cli_password_ok == false){
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <_write+0xb4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <_write+0x3a>
		return len;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e038      	b.n	80026c4 <_write+0xac>
	}

	HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

	if (!(SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) ) {
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <_write+0xb8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <_write+0x7e>
		cli_tx_isr_flag = true;
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <_write+0xbc>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		/* Disable interrupts to prevent UART from throwing an RX interrupt while the peripheral is locked as
		 * this would prevent the RX interrupt from restarting HAL_UART_Receive_IT  */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002668:	2025      	movs	r0, #37	; 0x25
 800266a:	f001 fb2c 	bl	8003cc6 <HAL_NVIC_DisableIRQ>

		/* Transmits with interrupts. This must be done this way so that we can re-activate USART interrupts
		 * before the transfer terminates so that we can continue reading from the terminal*/
		status = HAL_UART_Transmit_IT(huart_shell, (uint8_t *)data, len);
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <_write+0xc0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	b292      	uxth	r2, r2
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fe2b 	bl	80062d4 <HAL_UART_Transmit_IT>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]

		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002682:	2025      	movs	r0, #37	; 0x25
 8002684:	f001 fb11 	bl	8003caa <HAL_NVIC_EnableIRQ>

		/* Wait for the transfer to terminate*/
		while(cli_tx_isr_flag == true){
 8002688:	bf00      	nop
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <_write+0xbc>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1fa      	bne.n	800268a <_write+0x72>
 8002694:	e010      	b.n	80026b8 <_write+0xa0>
			/* flag will be set to false in HAL_UART_TxCpltCallback*/
		}
	}else{
		/* We are called from an interrupt, using Transmit_IT would not work */
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002696:	2025      	movs	r0, #37	; 0x25
 8002698:	f001 fb15 	bl	8003cc6 <HAL_NVIC_DisableIRQ>
		status = HAL_UART_Transmit(huart_shell, (uint8_t *)data, len, 1000);
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <_write+0xc0>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	f003 fd7d 	bl	80061a8 <HAL_UART_Transmit>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b2:	2025      	movs	r0, #37	; 0x25
 80026b4:	f001 faf9 	bl	8003caa <HAL_NVIC_EnableIRQ>
	}



	if(status == HAL_OK){
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <_write+0xaa>
		return len;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e000      	b.n	80026c4 <_write+0xac>
	}else{
		return 0;
 80026c2:	2300      	movs	r3, #0
	}
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000082f 	.word	0x2000082f
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	20000830 	.word	0x20000830
 80026d8:	20000388 	.word	0x20000388

080026dc <cli_history_add>:
  * @brief          add a command to the history
  * @param  buff:   command
  * @retval         null
  */
static void cli_history_add(char* buff)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    uint16_t len;
    uint8_t index = history.latest;
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <cli_history_add+0xe4>)
 80026e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80026ea:	73fb      	strb	r3, [r7, #15]

    if (NULL == buff) return;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d060      	beq.n	80027b4 <cli_history_add+0xd8>

    len = strlen((const char *)buff);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd fdee 	bl	80002d4 <strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	81bb      	strh	r3, [r7, #12]
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80026fc:	89bb      	ldrh	r3, [r7, #12]
 80026fe:	2b4f      	cmp	r3, #79	; 0x4f
 8002700:	d85a      	bhi.n	80027b8 <cli_history_add+0xdc>

    /* find the latest one */
    if (0 != index) {
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <cli_history_add+0x34>
        index--;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	3b01      	subs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e001      	b.n	8002714 <cli_history_add+0x38>
    } else {
        index = HISTORY_MAX - 1;
 8002710:	2309      	movs	r3, #9
 8002712:	73fb      	strb	r3, [r7, #15]
    }

    if (0 != memcmp(history.cmd[index], buff, len)) {
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <cli_history_add+0xe4>)
 8002720:	4413      	add	r3, r2
 8002722:	89ba      	ldrh	r2, [r7, #12]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f006 f9c4 	bl	8008ab4 <memcmp>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d03b      	beq.n	80027aa <cli_history_add+0xce>
        /* if the new one is different with the latest one, the save */
        memset((void *)history.cmd[history.latest], 0x00, MAX_LINE_LEN);
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <cli_history_add+0xe4>)
 8002734:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002738:	461a      	mov	r2, r3
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <cli_history_add+0xe4>)
 8002744:	4413      	add	r3, r2
 8002746:	2250      	movs	r2, #80	; 0x50
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f006 f9ea 	bl	8008b24 <memset>
        memcpy((void *)history.cmd[history.latest], (const void *)buff, len);
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <cli_history_add+0xe4>)
 8002752:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002756:	461a      	mov	r2, r3
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <cli_history_add+0xe4>)
 8002762:	4413      	add	r3, r2
 8002764:	89ba      	ldrh	r2, [r7, #12]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f006 f9b3 	bl	8008ad4 <memcpy>
        if (history.count < HISTORY_MAX) {
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <cli_history_add+0xe4>)
 8002770:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8002774:	2b09      	cmp	r3, #9
 8002776:	d807      	bhi.n	8002788 <cli_history_add+0xac>
            history.count++;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <cli_history_add+0xe4>)
 800277a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800277e:	3301      	adds	r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <cli_history_add+0xe4>)
 8002784:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
        }

        history.latest++;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <cli_history_add+0xe4>)
 800278a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800278e:	3301      	adds	r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <cli_history_add+0xe4>)
 8002794:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        if (history.latest >= HISTORY_MAX) {
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <cli_history_add+0xe4>)
 800279a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d903      	bls.n	80027aa <cli_history_add+0xce>
            history.latest = 0;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <cli_history_add+0xe4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
        }
    }

    history.show = 0;
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <cli_history_add+0xe4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80027b2:	e002      	b.n	80027ba <cli_history_add+0xde>
    if (NULL == buff) return;
 80027b4:	bf00      	nop
 80027b6:	e000      	b.n	80027ba <cli_history_add+0xde>
    if (len >= MAX_LINE_LEN) return;  /* command too long */
 80027b8:	bf00      	nop
}
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000050c 	.word	0x2000050c

080027c4 <cli_history_show>:
  * @param  mode:       TRUE for look up, FALSE for look down
  * @param  p_history:  target history command
  * @retval             TRUE for no history found, FALSE for success
  */
static uint8_t cli_history_show(uint8_t mode, char** p_history)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
    uint8_t err = true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	737b      	strb	r3, [r7, #13]
    uint8_t num;
    uint8_t index;

    if (0 == history.count) return err;
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <cli_history_show+0xb4>)
 80027d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <cli_history_show+0x1e>
 80027de:	7b7b      	ldrb	r3, [r7, #13]
 80027e0:	e044      	b.n	800286c <cli_history_show+0xa8>

    if (true == mode) {
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d110      	bne.n	800280a <cli_history_show+0x46>
        /* look up */
        if (history.show < history.count) {
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <cli_history_show+0xb4>)
 80027ea:	f893 2322 	ldrb.w	r2, [r3, #802]	; 0x322
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <cli_history_show+0xb4>)
 80027f0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d215      	bcs.n	8002824 <cli_history_show+0x60>
            history.show++;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <cli_history_show+0xb4>)
 80027fa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <cli_history_show+0xb4>)
 8002804:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8002808:	e00c      	b.n	8002824 <cli_history_show+0x60>
        }
    } else {
        /* look down */
        if (1 < history.show) {
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <cli_history_show+0xb4>)
 800280c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8002810:	2b01      	cmp	r3, #1
 8002812:	d907      	bls.n	8002824 <cli_history_show+0x60>
            history.show--;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <cli_history_show+0xb4>)
 8002816:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800281a:	3b01      	subs	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <cli_history_show+0xb4>)
 8002820:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
        }
    }

    num = history.show;
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <cli_history_show+0xb4>)
 8002826:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800282a:	73fb      	strb	r3, [r7, #15]
    index = history.latest;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <cli_history_show+0xb4>)
 800282e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8002832:	73bb      	strb	r3, [r7, #14]
    while (num) {
 8002834:	e00b      	b.n	800284e <cli_history_show+0x8a>
        if (0 != index) {
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <cli_history_show+0x80>
            index--;
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	3b01      	subs	r3, #1
 8002840:	73bb      	strb	r3, [r7, #14]
 8002842:	e001      	b.n	8002848 <cli_history_show+0x84>
        } else {
            index = HISTORY_MAX - 1;
 8002844:	2309      	movs	r3, #9
 8002846:	73bb      	strb	r3, [r7, #14]
        }
        num--;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	3b01      	subs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
    while (num) {
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <cli_history_show+0x72>
    }

    err = false;
 8002854:	2300      	movs	r3, #0
 8002856:	737b      	strb	r3, [r7, #13]
    *p_history = history.cmd[index];
 8002858:	7bba      	ldrb	r2, [r7, #14]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <cli_history_show+0xb4>)
 8002864:	441a      	add	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]

    return err;
 800286a:	7b7b      	ldrb	r3, [r7, #13]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	2000050c 	.word	0x2000050c

0800287c <cli_init>:

void cli_init(UART_HandleTypeDef *handle_uart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	huart_shell = handle_uart;
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <cli_init+0xc4>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
	shell_queue_init(&cli_rx_buff);
 800288a:	482e      	ldr	r0, [pc, #184]	; (8002944 <cli_init+0xc8>)
 800288c:	f000 fee6 	bl	800365c <shell_queue_init>
    memset((uint8_t *)&history, 0, sizeof(history));
 8002890:	f240 3223 	movw	r2, #803	; 0x323
 8002894:	2100      	movs	r1, #0
 8002896:	482c      	ldr	r0, [pc, #176]	; (8002948 <cli_init+0xcc>)
 8002898:	f006 f944 	bl	8008b24 <memset>

    HAL_UART_MspInit(huart_shell);
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <cli_init+0xc4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe1d 	bl	80024e0 <HAL_UART_MspInit>
    HAL_UART_Receive_IT(huart_shell, &cBuffer, 1);
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <cli_init+0xc4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4927      	ldr	r1, [pc, #156]	; (800294c <cli_init+0xd0>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fdb8 	bl	8006424 <HAL_UART_Receive_IT>

    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e015      	b.n	80028e6 <cli_init+0x6a>
    	CLI_commands[j].pCmd = "";
 80028ba:	4925      	ldr	r1, [pc, #148]	; (8002950 <cli_init+0xd4>)
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	4a22      	ldr	r2, [pc, #136]	; (8002954 <cli_init+0xd8>)
 80028ca:	601a      	str	r2, [r3, #0]
    	CLI_commands[j].pFun = NULL;
 80028cc:	4920      	ldr	r1, [pc, #128]	; (8002950 <cli_init+0xd4>)
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3308      	adds	r3, #8
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    for(size_t j = 0; j < MAX_COMMAND_NB; j++){
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b1f      	cmp	r3, #31
 80028ea:	d9e6      	bls.n	80028ba <cli_init+0x3e>
    }

#ifndef CLI_PASSWORD
    cli_password_ok = true;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <cli_init+0xdc>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
    greet();
 80028f2:	f000 fb31 	bl	8002f58 <greet>
#endif

    CLI_ADD_CMD("help", cli_help_help, cli_help);
 80028f6:	4a19      	ldr	r2, [pc, #100]	; (800295c <cli_init+0xe0>)
 80028f8:	4919      	ldr	r1, [pc, #100]	; (8002960 <cli_init+0xe4>)
 80028fa:	481a      	ldr	r0, [pc, #104]	; (8002964 <cli_init+0xe8>)
 80028fc:	f000 fd04 	bl	8003308 <cli_add_command>
    CLI_ADD_CMD("cls", cli_clear_help, cli_clear);
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <cli_init+0xec>)
 8002902:	491a      	ldr	r1, [pc, #104]	; (800296c <cli_init+0xf0>)
 8002904:	481a      	ldr	r0, [pc, #104]	; (8002970 <cli_init+0xf4>)
 8002906:	f000 fcff 	bl	8003308 <cli_add_command>
    CLI_ADD_CMD("reset", cli_reset_help, cli_reset);
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <cli_init+0xf8>)
 800290c:	491a      	ldr	r1, [pc, #104]	; (8002978 <cli_init+0xfc>)
 800290e:	481b      	ldr	r0, [pc, #108]	; (800297c <cli_init+0x100>)
 8002910:	f000 fcfa 	bl	8003308 <cli_add_command>
    CLI_ADD_CMD("log", cli_log_help, cli_log);
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <cli_init+0x104>)
 8002916:	491b      	ldr	r1, [pc, #108]	; (8002984 <cli_init+0x108>)
 8002918:	481b      	ldr	r0, [pc, #108]	; (8002988 <cli_init+0x10c>)
 800291a:	f000 fcf5 	bl	8003308 <cli_add_command>

    if(CLI_LAST_LOG_CATEGORY > 32){
    	ERR("Too many log categories defined. The max number of log categories that can be user defined is 31.\n");
    }

    LOG(CLI_LOG_SHELL, "Command line successfully initialized.\n");
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <cli_init+0x110>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <cli_init+0xba>
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <cli_init+0x114>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4818      	ldr	r0, [pc, #96]	; (8002994 <cli_init+0x118>)
 8002932:	f007 f9b3 	bl	8009c9c <iprintf>

}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000388 	.word	0x20000388
 8002944:	20000360 	.word	0x20000360
 8002948:	2000050c 	.word	0x2000050c
 800294c:	2000035c 	.word	0x2000035c
 8002950:	2000038c 	.word	0x2000038c
 8002954:	0800d3d4 	.word	0x0800d3d4
 8002958:	2000082f 	.word	0x2000082f
 800295c:	08003109 	.word	0x08003109
 8002960:	0800df08 	.word	0x0800df08
 8002964:	0800d3d8 	.word	0x0800d3d8
 8002968:	0800325d 	.word	0x0800325d
 800296c:	0800df18 	.word	0x0800df18
 8002970:	0800d3e0 	.word	0x0800d3e0
 8002974:	080032b9 	.word	0x080032b9
 8002978:	0800df2c 	.word	0x0800df2c
 800297c:	0800d3e4 	.word	0x0800d3e4
 8002980:	080033dd 	.word	0x080033dd
 8002984:	0800df38 	.word	0x0800df38
 8002988:	0800d3ec 	.word	0x0800d3ec
 800298c:	2000001c 	.word	0x2000001c
 8002990:	20000000 	.word	0x20000000
 8002994:	0800d3f0 	.word	0x0800d3f0

08002998 <HAL_UART_RxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done receiving a char
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	shell_queue_in(&cli_rx_buff, &cBuffer);
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <HAL_UART_RxCpltCallback+0x24>)
 80029a2:	4807      	ldr	r0, [pc, #28]	; (80029c0 <HAL_UART_RxCpltCallback+0x28>)
 80029a4:	f000 fe9a 	bl	80036dc <shell_queue_in>
	HAL_UART_Receive_IT(huart, &cBuffer, 1);
 80029a8:	2201      	movs	r2, #1
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_UART_RxCpltCallback+0x24>)
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f003 fd39 	bl	8006424 <HAL_UART_Receive_IT>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000035c 	.word	0x2000035c
 80029c0:	20000360 	.word	0x20000360

080029c4 <HAL_UART_TxCpltCallback>:

/*
 * Callback function for UART IRQ when it is done transmitting data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	cli_tx_isr_flag = false;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_UART_TxCpltCallback+0x1c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000830 	.word	0x20000830

080029e4 <cli_rx_handle>:
  * @brief  handle commands from the terminal
  * @param  commands
  * @retval null
  */
static void cli_rx_handle(shell_queue_s *rx_buff)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b091      	sub	sp, #68	; 0x44
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    static HANDLE_TYPE_S Handle = {.buff = {0},.len = 0};
    uint8_t i = Handle.len;
 80029ec:	4bb9      	ldr	r3, [pc, #740]	; (8002cd4 <cli_rx_handle+0x2f0>)
 80029ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cmd_match = false;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t exec_req = false;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*  ---------------------------------------
        Step1: save chars from the terminal
        ---------------------------------------
     */
    bool newChar = true;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    while(newChar) {
 8002a08:	e15e      	b.n	8002cc8 <cli_rx_handle+0x2e4>
        if(Handle.len < MAX_LINE_LEN) {  /* check the buffer */
 8002a0a:	4bb2      	ldr	r3, [pc, #712]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a10:	2b4f      	cmp	r3, #79	; 0x4f
 8002a12:	f200 8173 	bhi.w	8002cfc <cli_rx_handle+0x318>
        	newChar = shell_queue_out(rx_buff, Handle.buff+Handle.len);
 8002a16:	4baf      	ldr	r3, [pc, #700]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4bad      	ldr	r3, [pc, #692]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a20:	4413      	add	r3, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fe7a 	bl	800371e <shell_queue_out>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

            /* new char coming from the terminal, copy it to Handle.buff */
            if(newChar) {
 8002a38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d069      	beq.n	8002b14 <cli_rx_handle+0x130>
                /* KEY_BACKSPACE -->get DELETE key from keyboard */
                if (Handle.buff[Handle.len] == KEY_BACKSPACE || Handle.buff[Handle.len] == KEY_DEL) {
 8002a40:	4ba4      	ldr	r3, [pc, #656]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a46:	461a      	mov	r2, r3
 8002a48:	4ba2      	ldr	r3, [pc, #648]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d007      	beq.n	8002a60 <cli_rx_handle+0x7c>
 8002a50:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a5e:	d11c      	bne.n	8002a9a <cli_rx_handle+0xb6>
                    /* buffer not empty */
                    if (Handle.len > 0) {
 8002a60:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 812e 	beq.w	8002cc8 <cli_rx_handle+0x2e4>
                        /* delete a char in terminal */
                        TERMINAL_MOVE_LEFT(1);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	489a      	ldr	r0, [pc, #616]	; (8002cd8 <cli_rx_handle+0x2f4>)
 8002a70:	f007 f914 	bl	8009c9c <iprintf>
                        TERMINAL_CLEAR_END();
 8002a74:	4899      	ldr	r0, [pc, #612]	; (8002cdc <cli_rx_handle+0x2f8>)
 8002a76:	f007 f911 	bl	8009c9c <iprintf>
                        Handle.buff[Handle.len] = '\0';
 8002a7a:	4b96      	ldr	r3, [pc, #600]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b94      	ldr	r3, [pc, #592]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]
                        Handle.len--;
 8002a88:	4b92      	ldr	r3, [pc, #584]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    if (Handle.len > 0) {
 8002a98:	e116      	b.n	8002cc8 <cli_rx_handle+0x2e4>
                    }

                } else if(Handle.buff[Handle.len] == KEY_ENTER){
 8002a9a:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002aa4:	5c9b      	ldrb	r3, [r3, r2]
 8002aa6:	2b0d      	cmp	r3, #13
 8002aa8:	d10b      	bne.n	8002ac2 <cli_rx_handle+0xde>
                	exec_req = true;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                	Handle.len++;
 8002ab0:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ac0:	e102      	b.n	8002cc8 <cli_rx_handle+0x2e4>
                }else if(strstr((const char *)Handle.buff, KEY_DELETE) != NULL){
 8002ac2:	4987      	ldr	r1, [pc, #540]	; (8002ce0 <cli_rx_handle+0x2fc>)
 8002ac4:	4883      	ldr	r0, [pc, #524]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ac6:	f007 fa4c 	bl	8009f62 <strstr>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d018      	beq.n	8002b02 <cli_rx_handle+0x11e>
                	strcpy((char *)&Handle.buff[Handle.len-3], (char *)&Handle.buff[Handle.len+1]);
 8002ad0:	4b80      	ldr	r3, [pc, #512]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad6:	3b03      	subs	r3, #3
 8002ad8:	4a7e      	ldr	r2, [pc, #504]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ada:	441a      	add	r2, r3
 8002adc:	4b7d      	ldr	r3, [pc, #500]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	497b      	ldr	r1, [pc, #492]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ae6:	440b      	add	r3, r1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f007 fa31 	bl	8009f52 <strcpy>
                	Handle.len -= 3;
 8002af0:	4b78      	ldr	r3, [pc, #480]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af6:	3b03      	subs	r3, #3
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b00:	e0e2      	b.n	8002cc8 <cli_rx_handle+0x2e4>
            	}else{
                    Handle.len++;
 8002b02:	4b74      	ldr	r3, [pc, #464]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b12:	e0d9      	b.n	8002cc8 <cli_rx_handle+0x2e4>
                }

            } else if(cli_password_ok){
 8002b14:	4b73      	ldr	r3, [pc, #460]	; (8002ce4 <cli_rx_handle+0x300>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80d5 	beq.w	8002cc8 <cli_rx_handle+0x2e4>
                /* all chars copied to Handle.buff */
                uint8_t key = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                uint8_t err = 0xff;
 8002b24:	23ff      	movs	r3, #255	; 0xff
 8002b26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                char *p_hist_cmd = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28

                if (Handle.len >= 3) {
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f240 80a7 	bls.w	8002c88 <cli_rx_handle+0x2a4>
                    if (strstr((const char *)Handle.buff, KEY_UP) != NULL) {
 8002b3a:	496b      	ldr	r1, [pc, #428]	; (8002ce8 <cli_rx_handle+0x304>)
 8002b3c:	4865      	ldr	r0, [pc, #404]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b3e:	f007 fa10 	bl	8009f62 <strstr>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01c      	beq.n	8002b82 <cli_rx_handle+0x19e>
                        key = 1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d907      	bls.n	8002b68 <cli_rx_handle+0x184>
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5e:	3b03      	subs	r3, #3
 8002b60:	4619      	mov	r1, r3
 8002b62:	485d      	ldr	r0, [pc, #372]	; (8002cd8 <cli_rx_handle+0x2f4>)
 8002b64:	f007 f89a 	bl	8009c9c <iprintf>
                        TERMINAL_CLEAR_END();
 8002b68:	485c      	ldr	r0, [pc, #368]	; (8002cdc <cli_rx_handle+0x2f8>)
 8002b6a:	f007 f897 	bl	8009c9c <iprintf>
                        err = cli_history_show(true, &p_hist_cmd);
 8002b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b72:	4619      	mov	r1, r3
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff fe25 	bl	80027c4 <cli_history_show>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002b80:	e038      	b.n	8002bf4 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_DOWN) != NULL) {
 8002b82:	495a      	ldr	r1, [pc, #360]	; (8002cec <cli_rx_handle+0x308>)
 8002b84:	4853      	ldr	r0, [pc, #332]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b86:	f007 f9ec 	bl	8009f62 <strstr>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01c      	beq.n	8002bca <cli_rx_handle+0x1e6>
                        key = 2;
 8002b90:	2302      	movs	r3, #2
 8002b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                        TERMINAL_MOVE_LEFT(Handle.len-3);
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d907      	bls.n	8002bb0 <cli_rx_handle+0x1cc>
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ba6:	3b03      	subs	r3, #3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	484b      	ldr	r0, [pc, #300]	; (8002cd8 <cli_rx_handle+0x2f4>)
 8002bac:	f007 f876 	bl	8009c9c <iprintf>
                        TERMINAL_CLEAR_END();
 8002bb0:	484a      	ldr	r0, [pc, #296]	; (8002cdc <cli_rx_handle+0x2f8>)
 8002bb2:	f007 f873 	bl	8009c9c <iprintf>
                        err = cli_history_show(false, &p_hist_cmd);
 8002bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff fe01 	bl	80027c4 <cli_history_show>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002bc8:	e014      	b.n	8002bf4 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_RIGHT) != NULL) {
 8002bca:	4949      	ldr	r1, [pc, #292]	; (8002cf0 <cli_rx_handle+0x30c>)
 8002bcc:	4841      	ldr	r0, [pc, #260]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002bce:	f007 f9c8 	bl	8009f62 <strstr>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <cli_rx_handle+0x1fc>
                        key = 3;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002bde:	e009      	b.n	8002bf4 <cli_rx_handle+0x210>
                    } else if (strstr((const char *)Handle.buff, KEY_LEFT) != NULL) {
 8002be0:	4944      	ldr	r1, [pc, #272]	; (8002cf4 <cli_rx_handle+0x310>)
 8002be2:	483c      	ldr	r0, [pc, #240]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002be4:	f007 f9bd 	bl	8009f62 <strstr>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <cli_rx_handle+0x210>
                        key = 4;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }

                    if (key != 0) {
 8002bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d045      	beq.n	8002c88 <cli_rx_handle+0x2a4>
                        if (!err) {
 8002bfc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d124      	bne.n	8002c4e <cli_rx_handle+0x26a>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002c04:	2251      	movs	r2, #81	; 0x51
 8002c06:	2100      	movs	r1, #0
 8002c08:	4832      	ldr	r0, [pc, #200]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c0a:	f005 ff8b 	bl	8008b24 <memset>
                            memcpy(Handle.buff, p_hist_cmd, strlen(p_hist_cmd));
 8002c0e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fb5e 	bl	80002d4 <strlen>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	482d      	ldr	r0, [pc, #180]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c20:	f005 ff58 	bl	8008ad4 <memcpy>
                            Handle.len = strlen(p_hist_cmd);
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fb54 	bl	80002d4 <strlen>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                            Handle.buff[Handle.len] = '\0';
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c40:	2100      	movs	r1, #0
 8002c42:	5499      	strb	r1, [r3, r2]
                            printf("%s", Handle.buff);  /* display history command */
 8002c44:	4923      	ldr	r1, [pc, #140]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c46:	482c      	ldr	r0, [pc, #176]	; (8002cf8 <cli_rx_handle+0x314>)
 8002c48:	f007 f828 	bl	8009c9c <iprintf>
 8002c4c:	e01c      	b.n	8002c88 <cli_rx_handle+0x2a4>
                        } else if (err && (0 != key)) {
 8002c4e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <cli_rx_handle+0x2a4>
 8002c56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d014      	beq.n	8002c88 <cli_rx_handle+0x2a4>
                            /* no history found */
                            TERMINAL_MOVE_LEFT(Handle.len-3);
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d907      	bls.n	8002c78 <cli_rx_handle+0x294>
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6e:	3b03      	subs	r3, #3
 8002c70:	4619      	mov	r1, r3
 8002c72:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <cli_rx_handle+0x2f4>)
 8002c74:	f007 f812 	bl	8009c9c <iprintf>
                            TERMINAL_CLEAR_END();
 8002c78:	4818      	ldr	r0, [pc, #96]	; (8002cdc <cli_rx_handle+0x2f8>)
 8002c7a:	f007 f80f 	bl	8009c9c <iprintf>
                            memset(&Handle, 0x00, sizeof(Handle));
 8002c7e:	2251      	movs	r2, #81	; 0x51
 8002c80:	2100      	movs	r1, #0
 8002c82:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c84:	f005 ff4e 	bl	8008b24 <memset>
                        }
                    }
                }

                if ((key == 0) && (Handle.len > i)) {
 8002c88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d137      	bne.n	8002d00 <cli_rx_handle+0x31c>
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c96:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d230      	bcs.n	8002d00 <cli_rx_handle+0x31c>
                    /* display char in terminal */
                    for (; i < Handle.len; i++) {
 8002c9e:	e00b      	b.n	8002cb8 <cli_rx_handle+0x2d4>
                    	printf("%c", Handle.buff[i]);
 8002ca0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f007 f80f 	bl	8009ccc <putchar>
                    for (; i < Handle.len; i++) {
 8002cae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <cli_rx_handle+0x2f0>)
 8002cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cbe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3ec      	bcc.n	8002ca0 <cli_rx_handle+0x2bc>

                    }
                }
                break;
 8002cc6:	e01b      	b.n	8002d00 <cli_rx_handle+0x31c>
    while(newChar) {
 8002cc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f ae9c 	bne.w	8002a0a <cli_rx_handle+0x26>
 8002cd2:	e016      	b.n	8002d02 <cli_rx_handle+0x31e>
 8002cd4:	20000834 	.word	0x20000834
 8002cd8:	0800d42c 	.word	0x0800d42c
 8002cdc:	0800d434 	.word	0x0800d434
 8002ce0:	0800d438 	.word	0x0800d438
 8002ce4:	2000082f 	.word	0x2000082f
 8002ce8:	0800d440 	.word	0x0800d440
 8002cec:	0800d444 	.word	0x0800d444
 8002cf0:	0800d448 	.word	0x0800d448
 8002cf4:	0800d44c 	.word	0x0800d44c
 8002cf8:	0800d450 	.word	0x0800d450
            }

        } else {
            /* buffer full */
            break;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <cli_rx_handle+0x31e>
                break;
 8002d00:	bf00      	nop

    /*  ---------------------------------------
        Step2: handle the commands
        ---------------------------------------
     */
    if(exec_req && !cli_password_ok){
 8002d02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <cli_rx_handle+0x340>
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <cli_rx_handle+0x510>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	f083 0301 	eor.w	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <cli_rx_handle+0x340>
    		cli_password_ok = true;
    		greet();
    	}
    	Handle.len = 0;
#else
    	cli_password_ok = true;
 8002d18:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <cli_rx_handle+0x510>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
    	greet();
 8002d1e:	f000 f91b 	bl	8002f58 <greet>
 8002d22:	e0d2      	b.n	8002eca <cli_rx_handle+0x4e6>
#endif
    }else if(exec_req && (Handle.len == 1)) {
 8002d24:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <cli_rx_handle+0x362>
 8002d2c:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <cli_rx_handle+0x362>
        /* KEY_ENTER -->ENTER key from terminal */
    	PRINT_CLI_NAME();
 8002d36:	4871      	ldr	r0, [pc, #452]	; (8002efc <cli_rx_handle+0x518>)
 8002d38:	f006 ffb0 	bl	8009c9c <iprintf>
        Handle.len = 0;
 8002d3c:	4b6e      	ldr	r3, [pc, #440]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d44:	e0c1      	b.n	8002eca <cli_rx_handle+0x4e6>
    } else if(exec_req && Handle.len > 1) {  /* check for the length of command */
 8002d46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80bd 	beq.w	8002eca <cli_rx_handle+0x4e6>
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f240 80b7 	bls.w	8002eca <cli_rx_handle+0x4e6>
		NL1();
 8002d5c:	200a      	movs	r0, #10
 8002d5e:	f006 ffb5 	bl	8009ccc <putchar>
		Handle.buff[Handle.len - 1] = '\0';
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a63      	ldr	r2, [pc, #396]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	54d1      	strb	r1, [r2, r3]
		cli_history_add((char *)Handle.buff);
 8002d70:	4861      	ldr	r0, [pc, #388]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d72:	f7ff fcb3 	bl	80026dc <cli_history_add>
		char *command = strtok((char *)Handle.buff, " \t");
 8002d76:	4962      	ldr	r1, [pc, #392]	; (8002f00 <cli_rx_handle+0x51c>)
 8002d78:	485f      	ldr	r0, [pc, #380]	; (8002ef8 <cli_rx_handle+0x514>)
 8002d7a:	f007 ff31 	bl	800abe0 <strtok>
 8002d7e:	6338      	str	r0, [r7, #48]	; 0x30

		/* looking for a match */
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002d86:	e089      	b.n	8002e9c <cli_rx_handle+0x4b8>
			if(0 == strcmp(command, CLI_commands[i].pCmd)) {
 8002d88:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002d8c:	495d      	ldr	r1, [pc, #372]	; (8002f04 <cli_rx_handle+0x520>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9e:	f7fd fa8f 	bl	80002c0 <strcmp>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d174      	bne.n	8002e92 <cli_rx_handle+0x4ae>
				cmd_match = true;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				//Split arguments string to argc/argv
				uint8_t argc = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				char 	*argv[MAX_ARGC];
				argv[0] = command;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	60bb      	str	r3, [r7, #8]

				char *token = strtok(NULL, " \t");
 8002db8:	4951      	ldr	r1, [pc, #324]	; (8002f00 <cli_rx_handle+0x51c>)
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f007 ff10 	bl	800abe0 <strtok>
 8002dc0:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 8002dc2:	e01d      	b.n	8002e00 <cli_rx_handle+0x41c>
					if(argc >= MAX_ARGC){
 8002dc4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d907      	bls.n	8002ddc <cli_rx_handle+0x3f8>
						printf(CLI_FONT_RED "Maximum number of arguments is %d. Ignoring the rest of the arguments."CLI_FONT_DEFAULT, MAX_ARGC-1);NL1();
 8002dcc:	2107      	movs	r1, #7
 8002dce:	484e      	ldr	r0, [pc, #312]	; (8002f08 <cli_rx_handle+0x524>)
 8002dd0:	f006 ff64 	bl	8009c9c <iprintf>
 8002dd4:	200a      	movs	r0, #10
 8002dd6:	f006 ff79 	bl	8009ccc <putchar>
						break;
 8002dda:	e014      	b.n	8002e06 <cli_rx_handle+0x422>
					}
					argv[argc] = token;
 8002ddc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	3340      	adds	r3, #64	; 0x40
 8002de4:	443b      	add	r3, r7
 8002de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de8:	f843 2c38 	str.w	r2, [r3, #-56]
					argc++;
 8002dec:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002df0:	3301      	adds	r3, #1
 8002df2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					token = strtok(NULL, " \t");
 8002df6:	4942      	ldr	r1, [pc, #264]	; (8002f00 <cli_rx_handle+0x51c>)
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f007 fef1 	bl	800abe0 <strtok>
 8002dfe:	6378      	str	r0, [r7, #52]	; 0x34
				while(token != NULL){
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1de      	bne.n	8002dc4 <cli_rx_handle+0x3e0>
				}

				if(CLI_commands[i].pFun != NULL) {
 8002e06:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e0a:	493e      	ldr	r1, [pc, #248]	; (8002f04 <cli_rx_handle+0x520>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3308      	adds	r3, #8
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d032      	beq.n	8002e84 <cli_rx_handle+0x4a0>
					/* call the func. */
					TERMINAL_HIDE_CURSOR();
 8002e1e:	483b      	ldr	r0, [pc, #236]	; (8002f0c <cli_rx_handle+0x528>)
 8002e20:	f006 ff3c 	bl	8009c9c <iprintf>
					uint8_t result = CLI_commands[i].pFun(argc, argv);
 8002e24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002e28:	4936      	ldr	r1, [pc, #216]	; (8002f04 <cli_rx_handle+0x520>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3308      	adds	r3, #8
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002e3c:	f107 0108 	add.w	r1, r7, #8
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if(result == EXIT_SUCCESS){
 8002e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <cli_rx_handle+0x484>
						printf(CLI_FONT_GREEN "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8002e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e56:	461a      	mov	r2, r3
 8002e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e5a:	482d      	ldr	r0, [pc, #180]	; (8002f10 <cli_rx_handle+0x52c>)
 8002e5c:	f006 ff1e 	bl	8009c9c <iprintf>
 8002e60:	200a      	movs	r0, #10
 8002e62:	f006 ff33 	bl	8009ccc <putchar>
 8002e66:	e009      	b.n	8002e7c <cli_rx_handle+0x498>
					}else{
						printf(CLI_FONT_RED "(%s returned %d)" CLI_FONT_DEFAULT, command, result);NL1();
 8002e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e70:	4828      	ldr	r0, [pc, #160]	; (8002f14 <cli_rx_handle+0x530>)
 8002e72:	f006 ff13 	bl	8009c9c <iprintf>
 8002e76:	200a      	movs	r0, #10
 8002e78:	f006 ff28 	bl	8009ccc <putchar>
					}
					TERMINAL_SHOW_CURSOR();
 8002e7c:	4826      	ldr	r0, [pc, #152]	; (8002f18 <cli_rx_handle+0x534>)
 8002e7e:	f006 ff0d 	bl	8009c9c <iprintf>
					break;
 8002e82:	e010      	b.n	8002ea6 <cli_rx_handle+0x4c2>
				} else {
					/* func. is void */
					printf(CLI_FONT_RED "Command %s exists but no function is associated to it.", command);NL1();
 8002e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e86:	4825      	ldr	r0, [pc, #148]	; (8002f1c <cli_rx_handle+0x538>)
 8002e88:	f006 ff08 	bl	8009c9c <iprintf>
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f006 ff1d 	bl	8009ccc <putchar>
		for(i = 0; i < MAX_COMMAND_NB; i++) {
 8002e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e96:	3301      	adds	r3, #1
 8002e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ea0:	2b1f      	cmp	r3, #31
 8002ea2:	f67f af71 	bls.w	8002d88 <cli_rx_handle+0x3a4>
				}
			}
		}

		if(!cmd_match) {
 8002ea6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <cli_rx_handle+0x4d8>
			/* no matching command */
			printf("\r\nCommand \"%s\" unknown, try: help", Handle.buff);NL1();
 8002eae:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <cli_rx_handle+0x514>)
 8002eb0:	481b      	ldr	r0, [pc, #108]	; (8002f20 <cli_rx_handle+0x53c>)
 8002eb2:	f006 fef3 	bl	8009c9c <iprintf>
 8002eb6:	200a      	movs	r0, #10
 8002eb8:	f006 ff08 	bl	8009ccc <putchar>
		}

		Handle.len = 0;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <cli_rx_handle+0x514>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		PRINT_CLI_NAME();
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <cli_rx_handle+0x518>)
 8002ec6:	f006 fee9 	bl	8009c9c <iprintf>

    }


    if(Handle.len >= MAX_LINE_LEN) {
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <cli_rx_handle+0x514>)
 8002ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed0:	2b4f      	cmp	r3, #79	; 0x4f
 8002ed2:	d90a      	bls.n	8002eea <cli_rx_handle+0x506>
        /* full, so restart the count */
    	printf(CLI_FONT_RED "\r\nMax command length is %d.\r\n" CLI_FONT_DEFAULT, MAX_LINE_LEN-1);
 8002ed4:	214f      	movs	r1, #79	; 0x4f
 8002ed6:	4813      	ldr	r0, [pc, #76]	; (8002f24 <cli_rx_handle+0x540>)
 8002ed8:	f006 fee0 	bl	8009c9c <iprintf>
    	PRINT_CLI_NAME();
 8002edc:	4807      	ldr	r0, [pc, #28]	; (8002efc <cli_rx_handle+0x518>)
 8002ede:	f006 fedd 	bl	8009c9c <iprintf>
        Handle.len = 0;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <cli_rx_handle+0x514>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
}
 8002eea:	bf00      	nop
 8002eec:	3744      	adds	r7, #68	; 0x44
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000082f 	.word	0x2000082f
 8002ef8:	20000834 	.word	0x20000834
 8002efc:	0800d454 	.word	0x0800d454
 8002f00:	0800d460 	.word	0x0800d460
 8002f04:	2000038c 	.word	0x2000038c
 8002f08:	0800d464 	.word	0x0800d464
 8002f0c:	0800d4bc 	.word	0x0800d4bc
 8002f10:	0800d4c4 	.word	0x0800d4c4
 8002f14:	0800d4e4 	.word	0x0800d4e4
 8002f18:	0800d504 	.word	0x0800d504
 8002f1c:	0800d50c 	.word	0x0800d50c
 8002f20:	0800d54c 	.word	0x0800d54c
 8002f24:	0800d570 	.word	0x0800d570

08002f28 <cli_tx_handle>:
  * @brief  tx handle, flushes stdout buffer
  * @param  null
  * @retval null
  */
static void cli_tx_handle(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
    fflush(stdout);
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <cli_tx_handle+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 fc74 	bl	8008820 <fflush>
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	2000002c 	.word	0x2000002c

08002f40 <cli_run>:

void cli_run(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
    cli_rx_handle(&cli_rx_buff);
 8002f44:	4803      	ldr	r0, [pc, #12]	; (8002f54 <cli_run+0x14>)
 8002f46:	f7ff fd4d 	bl	80029e4 <cli_rx_handle>
    cli_tx_handle();
 8002f4a:	f7ff ffed 	bl	8002f28 <cli_tx_handle>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000360 	.word	0x20000360

08002f58 <greet>:

void greet(void){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
    NL1();
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f006 feb5 	bl	8009ccc <putchar>
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8002f62:	484d      	ldr	r0, [pc, #308]	; (8003098 <greet+0x140>)
 8002f64:	f006 fe9a 	bl	8009c9c <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8002f68:	484c      	ldr	r0, [pc, #304]	; (800309c <greet+0x144>)
 8002f6a:	f006 fe97 	bl	8009c9c <iprintf>
    TERMINAL_RESET_CURSOR();
 8002f6e:	484c      	ldr	r0, [pc, #304]	; (80030a0 <greet+0x148>)
 8002f70:	f006 fe94 	bl	8009c9c <iprintf>
    TERMINAL_FONT_BLUE();
 8002f74:	484b      	ldr	r0, [pc, #300]	; (80030a4 <greet+0x14c>)
 8002f76:	f006 fe91 	bl	8009c9c <iprintf>
    printf("                             ///////////////////////////////////////////    ");NL1();
 8002f7a:	484b      	ldr	r0, [pc, #300]	; (80030a8 <greet+0x150>)
 8002f7c:	f006 fe8e 	bl	8009c9c <iprintf>
 8002f80:	200a      	movs	r0, #10
 8002f82:	f006 fea3 	bl	8009ccc <putchar>
    printf("                             /////*   .////////////////////////     *///    ");NL1();
 8002f86:	4849      	ldr	r0, [pc, #292]	; (80030ac <greet+0x154>)
 8002f88:	f006 fe88 	bl	8009c9c <iprintf>
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f006 fe9d 	bl	8009ccc <putchar>
    printf("            %%%%%%         %%%%%%  ///   ////  //   //////////  //   ////   //    ");NL1();
 8002f92:	4847      	ldr	r0, [pc, #284]	; (80030b0 <greet+0x158>)
 8002f94:	f006 fe82 	bl	8009c9c <iprintf>
 8002f98:	200a      	movs	r0, #10
 8002f9a:	f006 fe97 	bl	8009ccc <putchar>
    printf("            %%%%%%        %%%%%%   ///  //////////   ////////  ///  //////////    ");NL1();
 8002f9e:	4845      	ldr	r0, [pc, #276]	; (80030b4 <greet+0x15c>)
 8002fa0:	f006 fe7c 	bl	8009c9c <iprintf>
 8002fa4:	200a      	movs	r0, #10
 8002fa6:	f006 fe91 	bl	8009ccc <putchar>
    printf("           %%%%%%        %%%%%%%%   ((((   (((((((((   ((((((  (((((   .(((((((    ");NL1();
 8002faa:	4843      	ldr	r0, [pc, #268]	; (80030b8 <greet+0x160>)
 8002fac:	f006 fe76 	bl	8009c9c <iprintf>
 8002fb0:	200a      	movs	r0, #10
 8002fb2:	f006 fe8b 	bl	8009ccc <putchar>
    printf("          %%%%%%        %%%%%%%%    (((((((    (((((((  ((((  (((((((((    ((((    ");NL1();
 8002fb6:	4841      	ldr	r0, [pc, #260]	; (80030bc <greet+0x164>)
 8002fb8:	f006 fe70 	bl	8009c9c <iprintf>
 8002fbc:	200a      	movs	r0, #10
 8002fbe:	f006 fe85 	bl	8009ccc <putchar>
    printf("          %%%%%%      %%%%  %%%%    ((((((((((   ((((((  ((  ((((((((((((((  ((    ");NL1();
 8002fc2:	483f      	ldr	r0, [pc, #252]	; (80030c0 <greet+0x168>)
 8002fc4:	f006 fe6a 	bl	8009c9c <iprintf>
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f006 fe7f 	bl	8009ccc <putchar>
    printf("         %%%%%%%%    %%%%%%   %%%%%%%%  (((*((((((  .(((((((    ((((((( ((((((   ((    ");NL1();
 8002fce:	483d      	ldr	r0, [pc, #244]	; (80030c4 <greet+0x16c>)
 8002fd0:	f006 fe64 	bl	8009c9c <iprintf>
 8002fd4:	200a      	movs	r0, #10
 8002fd6:	f006 fe79 	bl	8009ccc <putchar>
    printf("         %%%%*%%%%%%%%%%%%           (((        (((((((((   ((((((((        ((((    ");NL1();
 8002fda:	483b      	ldr	r0, [pc, #236]	; (80030c8 <greet+0x170>)
 8002fdc:	f006 fe5e 	bl	8009c9c <iprintf>
 8002fe0:	200a      	movs	r0, #10
 8002fe2:	f006 fe73 	bl	8009ccc <putchar>
    printf("        %%%%   %%%%.             ###################   ##################### (((");NL1();
 8002fe6:	4839      	ldr	r0, [pc, #228]	; (80030cc <greet+0x174>)
 8002fe8:	f006 fe58 	bl	8009c9c <iprintf>
 8002fec:	200a      	movs	r0, #10
 8002fee:	f006 fe6d 	bl	8009ccc <putchar>
    printf("       %%%%%%          (((      ##################   ##################((((((( ");NL1();
 8002ff2:	4837      	ldr	r0, [pc, #220]	; (80030d0 <greet+0x178>)
 8002ff4:	f006 fe52 	bl	8009c9c <iprintf>
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f006 fe67 	bl	8009ccc <putchar>
    printf("       %%%%               (((( #################   ##############(((((((##    ");NL1();
 8002ffe:	4835      	ldr	r0, [pc, #212]	; (80030d4 <greet+0x17c>)
 8003000:	f006 fe4c 	bl	8009c9c <iprintf>
 8003004:	200a      	movs	r0, #10
 8003006:	f006 fe61 	bl	8009ccc <putchar>
    printf("      %%%%%%                   (((((((((##################((((((((((#######    ");NL1();
 800300a:	4833      	ldr	r0, [pc, #204]	; (80030d8 <greet+0x180>)
 800300c:	f006 fe46 	bl	8009c9c <iprintf>
 8003010:	200a      	movs	r0, #10
 8003012:	f006 fe5b 	bl	8009ccc <putchar>
    printf("     %%%%%%                     ########(((((((((((((((((((################    ");NL1();
 8003016:	4831      	ldr	r0, [pc, #196]	; (80030dc <greet+0x184>)
 8003018:	f006 fe40 	bl	8009c9c <iprintf>
 800301c:	200a      	movs	r0, #10
 800301e:	f006 fe55 	bl	8009ccc <putchar>
    printf("     %%%%%%                     ##%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%#%%    ");NL1();
 8003022:	482f      	ldr	r0, [pc, #188]	; (80030e0 <greet+0x188>)
 8003024:	f006 fe3a 	bl	8009c9c <iprintf>
 8003028:	200a      	movs	r0, #10
 800302a:	f006 fe4f 	bl	8009ccc <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800302e:	482d      	ldr	r0, [pc, #180]	; (80030e4 <greet+0x18c>)
 8003030:	f006 fe34 	bl	8009c9c <iprintf>
 8003034:	200a      	movs	r0, #10
 8003036:	f006 fe49 	bl	8009ccc <putchar>
    printf("    %%%%%%                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 800303a:	482a      	ldr	r0, [pc, #168]	; (80030e4 <greet+0x18c>)
 800303c:	f006 fe2e 	bl	8009c9c <iprintf>
 8003040:	200a      	movs	r0, #10
 8003042:	f006 fe43 	bl	8009ccc <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003046:	4828      	ldr	r0, [pc, #160]	; (80030e8 <greet+0x190>)
 8003048:	f006 fe28 	bl	8009c9c <iprintf>
 800304c:	200a      	movs	r0, #10
 800304e:	f006 fe3d 	bl	8009ccc <putchar>
    printf("                             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ");NL1();
 8003052:	4825      	ldr	r0, [pc, #148]	; (80030e8 <greet+0x190>)
 8003054:	f006 fe22 	bl	8009c9c <iprintf>
 8003058:	200a      	movs	r0, #10
 800305a:	f006 fe37 	bl	8009ccc <putchar>
    printf("µShell v0.1 - by Morgan Diepart (mdiepart@uliege.be)");NL1();
 800305e:	4823      	ldr	r0, [pc, #140]	; (80030ec <greet+0x194>)
 8003060:	f006 fe1c 	bl	8009c9c <iprintf>
 8003064:	200a      	movs	r0, #10
 8003066:	f006 fe31 	bl	8009ccc <putchar>
    printf("Original work from https://github.com/ShareCat/STM32CommandLine");NL1();
 800306a:	4821      	ldr	r0, [pc, #132]	; (80030f0 <greet+0x198>)
 800306c:	f006 fe16 	bl	8009c9c <iprintf>
 8003070:	200a      	movs	r0, #10
 8003072:	f006 fe2b 	bl	8009ccc <putchar>
    printf("-------------------------------");
 8003076:	481f      	ldr	r0, [pc, #124]	; (80030f4 <greet+0x19c>)
 8003078:	f006 fe10 	bl	8009c9c <iprintf>
    NL2();
 800307c:	481e      	ldr	r0, [pc, #120]	; (80030f8 <greet+0x1a0>)
 800307e:	f006 fea9 	bl	8009dd4 <puts>
    TERMINAL_FONT_DEFAULT();
 8003082:	481e      	ldr	r0, [pc, #120]	; (80030fc <greet+0x1a4>)
 8003084:	f006 fe0a 	bl	8009c9c <iprintf>
    PRINT_CLI_NAME();
 8003088:	481d      	ldr	r0, [pc, #116]	; (8003100 <greet+0x1a8>)
 800308a:	f006 fe07 	bl	8009c9c <iprintf>
    TERMINAL_SHOW_CURSOR();
 800308e:	481d      	ldr	r0, [pc, #116]	; (8003104 <greet+0x1ac>)
 8003090:	f006 fe04 	bl	8009c9c <iprintf>
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	0800d59c 	.word	0x0800d59c
 800309c:	0800d5a4 	.word	0x0800d5a4
 80030a0:	0800d5ac 	.word	0x0800d5ac
 80030a4:	0800d5b0 	.word	0x0800d5b0
 80030a8:	0800d5b8 	.word	0x0800d5b8
 80030ac:	0800d608 	.word	0x0800d608
 80030b0:	0800d658 	.word	0x0800d658
 80030b4:	0800d6ac 	.word	0x0800d6ac
 80030b8:	0800d700 	.word	0x0800d700
 80030bc:	0800d754 	.word	0x0800d754
 80030c0:	0800d7a8 	.word	0x0800d7a8
 80030c4:	0800d7fc 	.word	0x0800d7fc
 80030c8:	0800d854 	.word	0x0800d854
 80030cc:	0800d8ac 	.word	0x0800d8ac
 80030d0:	0800d900 	.word	0x0800d900
 80030d4:	0800d950 	.word	0x0800d950
 80030d8:	0800d9a0 	.word	0x0800d9a0
 80030dc:	0800d9f0 	.word	0x0800d9f0
 80030e0:	0800da40 	.word	0x0800da40
 80030e4:	0800daa8 	.word	0x0800daa8
 80030e8:	0800db24 	.word	0x0800db24
 80030ec:	0800db9c 	.word	0x0800db9c
 80030f0:	0800dbd4 	.word	0x0800dbd4
 80030f4:	0800dc14 	.word	0x0800dc14
 80030f8:	0800dc34 	.word	0x0800dc34
 80030fc:	0800dc38 	.word	0x0800dc38
 8003100:	0800d454 	.word	0x0800d454
 8003104:	0800d504 	.word	0x0800d504

08003108 <cli_help>:
  * @brief  printf the help info.
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_help(int argc, char *argv[])
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	if(argc == 1){
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d13e      	bne.n	8003196 <cli_help+0x8e>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e036      	b.n	800318c <cli_help+0x84>
	    	if(strcmp(CLI_commands[i].pCmd, "") != 0){
 800311e:	494a      	ldr	r1, [pc, #296]	; (8003248 <cli_help+0x140>)
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d028      	beq.n	8003186 <cli_help+0x7e>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 8003134:	4944      	ldr	r1, [pc, #272]	; (8003248 <cli_help+0x140>)
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	4841      	ldr	r0, [pc, #260]	; (800324c <cli_help+0x144>)
 8003148:	f006 fda8 	bl	8009c9c <iprintf>
 800314c:	200a      	movs	r0, #10
 800314e:	f006 fdbd 	bl	8009ccc <putchar>
		        if (CLI_commands[i].pHelp) {
 8003152:	493d      	ldr	r1, [pc, #244]	; (8003248 <cli_help+0x140>)
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <cli_help+0x7e>
		            printf(CLI_commands[i].pHelp);NL2();
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <cli_help+0x140>)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3304      	adds	r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f006 fd8e 	bl	8009c9c <iprintf>
 8003180:	4833      	ldr	r0, [pc, #204]	; (8003250 <cli_help+0x148>)
 8003182:	f006 fe27 	bl	8009dd4 <puts>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b1f      	cmp	r3, #31
 8003190:	d9c5      	bls.n	800311e <cli_help+0x16>
		        }
	    	}
	    }
	    return EXIT_SUCCESS;
 8003192:	2300      	movs	r3, #0
 8003194:	e053      	b.n	800323e <cli_help+0x136>
	}else if(argc == 2){
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d146      	bne.n	800322a <cli_help+0x122>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	e034      	b.n	800320c <cli_help+0x104>
	    	if(strcmp(CLI_commands[i].pCmd, argv[1]) == 0){
 80031a2:	4929      	ldr	r1, [pc, #164]	; (8003248 <cli_help+0x140>)
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	3304      	adds	r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fd f880 	bl	80002c0 <strcmp>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11f      	bne.n	8003206 <cli_help+0xfe>
		    	printf("[%s]", CLI_commands[i].pCmd);NL1();
 80031c6:	4920      	ldr	r1, [pc, #128]	; (8003248 <cli_help+0x140>)
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	481c      	ldr	r0, [pc, #112]	; (800324c <cli_help+0x144>)
 80031da:	f006 fd5f 	bl	8009c9c <iprintf>
 80031de:	200a      	movs	r0, #10
 80031e0:	f006 fd74 	bl	8009ccc <putchar>
	    		printf(CLI_commands[i].pHelp);NL1();
 80031e4:	4918      	ldr	r1, [pc, #96]	; (8003248 <cli_help+0x140>)
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3304      	adds	r3, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f006 fd50 	bl	8009c9c <iprintf>
 80031fc:	200a      	movs	r0, #10
 80031fe:	f006 fd65 	bl	8009ccc <putchar>
	    		return EXIT_SUCCESS;
 8003202:	2300      	movs	r3, #0
 8003204:	e01b      	b.n	800323e <cli_help+0x136>
	    for(size_t i = 0; i < MAX_COMMAND_NB; i++) {
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b1f      	cmp	r3, #31
 8003210:	d9c7      	bls.n	80031a2 <cli_help+0x9a>
	    	}
	    }
	    printf("No help found for command %s.", argv[1]);NL1();
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	480e      	ldr	r0, [pc, #56]	; (8003254 <cli_help+0x14c>)
 800321c:	f006 fd3e 	bl	8009c9c <iprintf>
 8003220:	200a      	movs	r0, #10
 8003222:	f006 fd53 	bl	8009ccc <putchar>
	    return EXIT_FAILURE;
 8003226:	2301      	movs	r3, #1
 8003228:	e009      	b.n	800323e <cli_help+0x136>
	}else{
		printf("Command \"%s\" takes at most 1 argument.", argv[0]);NL1();
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <cli_help+0x150>)
 8003232:	f006 fd33 	bl	8009c9c <iprintf>
 8003236:	200a      	movs	r0, #10
 8003238:	f006 fd48 	bl	8009ccc <putchar>
		return EXIT_FAILURE;
 800323c:	2301      	movs	r3, #1
	}
    return EXIT_FAILURE;
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	2000038c 	.word	0x2000038c
 800324c:	0800dc40 	.word	0x0800dc40
 8003250:	0800dc34 	.word	0x0800dc34
 8003254:	0800dc48 	.word	0x0800dc48
 8003258:	0800dc68 	.word	0x0800dc68

0800325c <cli_clear>:
  * @brief  clear the screen
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_clear(int argc, char *argv[])
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
	if(argc != 1){
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d00a      	beq.n	8003282 <cli_clear+0x26>
		printf("command \"%s\" does not take any argument.", argv[0]);NL1();
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <cli_clear+0x48>)
 8003274:	f006 fd12 	bl	8009c9c <iprintf>
 8003278:	200a      	movs	r0, #10
 800327a:	f006 fd27 	bl	8009ccc <putchar>
		return EXIT_FAILURE;
 800327e:	2301      	movs	r3, #1
 8003280:	e00c      	b.n	800329c <cli_clear+0x40>
	}
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <cli_clear+0x4c>)
 8003284:	f006 fd0a 	bl	8009c9c <iprintf>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8003288:	4808      	ldr	r0, [pc, #32]	; (80032ac <cli_clear+0x50>)
 800328a:	f006 fd07 	bl	8009c9c <iprintf>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 800328e:	4808      	ldr	r0, [pc, #32]	; (80032b0 <cli_clear+0x54>)
 8003290:	f006 fd04 	bl	8009c9c <iprintf>
    TERMINAL_DISPLAY_CLEAR();
 8003294:	4807      	ldr	r0, [pc, #28]	; (80032b4 <cli_clear+0x58>)
 8003296:	f006 fd01 	bl	8009c9c <iprintf>

    return EXIT_SUCCESS;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	0800dc90 	.word	0x0800dc90
 80032a8:	0800d59c 	.word	0x0800d59c
 80032ac:	0800dc38 	.word	0x0800dc38
 80032b0:	0800d5ac 	.word	0x0800d5ac
 80032b4:	0800d5a4 	.word	0x0800d5a4

080032b8 <cli_reset>:
  * @brief  MCU reboot
  * @param  para addr. & length
  * @retval True means OK
  */
uint8_t cli_reset(int argc, char *argv[])
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	if(argc > 1){
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	dd0a      	ble.n	80032de <cli_reset+0x26>
		printf("Command \"%s\" takes no argument.", argv[0]);NL1();
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	480c      	ldr	r0, [pc, #48]	; (8003300 <cli_reset+0x48>)
 80032d0:	f006 fce4 	bl	8009c9c <iprintf>
 80032d4:	200a      	movs	r0, #10
 80032d6:	f006 fcf9 	bl	8009ccc <putchar>
		return EXIT_FAILURE;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00b      	b.n	80032f6 <cli_reset+0x3e>
	}

	NL1();printf("[END]: System Rebooting");NL1();
 80032de:	200a      	movs	r0, #10
 80032e0:	f006 fcf4 	bl	8009ccc <putchar>
 80032e4:	4807      	ldr	r0, [pc, #28]	; (8003304 <cli_reset+0x4c>)
 80032e6:	f006 fcd9 	bl	8009c9c <iprintf>
 80032ea:	200a      	movs	r0, #10
 80032ec:	f006 fcee 	bl	8009ccc <putchar>
	HAL_NVIC_SystemReset();
 80032f0:	f000 fcf7 	bl	8003ce2 <HAL_NVIC_SystemReset>
	return EXIT_SUCCESS;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	0800dcbc 	.word	0x0800dcbc
 8003304:	0800dcdc 	.word	0x0800dcdc

08003308 <cli_add_command>:

void cli_add_command(const char *command, const char *help, uint8_t (*exec)(int argc, char *argv[])){
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
	for(; i < MAX_COMMAND_NB; i++){
 8003318:	e02b      	b.n	8003372 <cli_add_command+0x6a>
		if(strcmp(CLI_commands[i].pCmd, "") == 0){
 800331a:	4929      	ldr	r1, [pc, #164]	; (80033c0 <cli_add_command+0xb8>)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11d      	bne.n	800336c <cli_add_command+0x64>
			CLI_commands[i].pCmd = command;
 8003330:	4923      	ldr	r1, [pc, #140]	; (80033c0 <cli_add_command+0xb8>)
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pFun = exec;
 8003342:	491f      	ldr	r1, [pc, #124]	; (80033c0 <cli_add_command+0xb8>)
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3308      	adds	r3, #8
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
			CLI_commands[i].pHelp = help;
 8003356:	491a      	ldr	r1, [pc, #104]	; (80033c0 <cli_add_command+0xb8>)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3304      	adds	r3, #4
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	601a      	str	r2, [r3, #0]
			break;
 800336a:	e005      	b.n	8003378 <cli_add_command+0x70>
	for(; i < MAX_COMMAND_NB; i++){
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b1f      	cmp	r3, #31
 8003376:	d9d0      	bls.n	800331a <cli_add_command+0x12>
		}
	}
	if(i == MAX_COMMAND_NB){
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d10f      	bne.n	800339e <cli_add_command+0x96>
		ERR("Cannot add command %s, max number of commands "
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <cli_add_command+0xbc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	2320      	movs	r3, #32
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f240 237d 	movw	r3, #637	; 0x27d
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <cli_add_command+0xc0>)
 8003392:	490e      	ldr	r1, [pc, #56]	; (80033cc <cli_add_command+0xc4>)
 8003394:	f005 fb2c 	bl	80089f0 <fiprintf>
				"reached. The maximum number of command is set to %d.\n" CLI_FONT_DEFAULT,
				command, MAX_COMMAND_NB); NL1();
 8003398:	200a      	movs	r0, #10
 800339a:	f006 fc97 	bl	8009ccc <putchar>
	}
	LOG(CLI_LOG_SHELL, "Command %s added to shell.\n", command);
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <cli_add_command+0xc8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <cli_add_command+0xb0>
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <cli_add_command+0xcc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4619      	mov	r1, r3
 80033b2:	4809      	ldr	r0, [pc, #36]	; (80033d8 <cli_add_command+0xd0>)
 80033b4:	f006 fc72 	bl	8009c9c <iprintf>
}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000038c 	.word	0x2000038c
 80033c4:	2000002c 	.word	0x2000002c
 80033c8:	0800dcf4 	.word	0x0800dcf4
 80033cc:	0800dd14 	.word	0x0800dd14
 80033d0:	2000001c 	.word	0x2000001c
 80033d4:	20000000 	.word	0x20000000
 80033d8:	0800dd9c 	.word	0x0800dd9c

080033dc <cli_log>:

uint8_t cli_log(int argc, char *argv[]){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
	if(argc < 2){
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	dc09      	bgt.n	8003400 <cli_log+0x24>
		printf("Command %s takes at least one argument. Use \"help %s\" for usage.\n", argv[0], argv[0]);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4859      	ldr	r0, [pc, #356]	; (800355c <cli_log+0x180>)
 80033f8:	f006 fc50 	bl	8009c9c <iprintf>
		return EXIT_FAILURE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0a8      	b.n	8003552 <cli_log+0x176>
	}

	if(strcmp(argv[1], "on") == 0){
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3304      	adds	r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4956      	ldr	r1, [pc, #344]	; (8003560 <cli_log+0x184>)
 8003408:	4618      	mov	r0, r3
 800340a:	f7fc ff59 	bl	80002c0 <strcmp>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d131      	bne.n	8003478 <cli_log+0x9c>
		if(argc < 3){
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	dc07      	bgt.n	800342a <cli_log+0x4e>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	4850      	ldr	r0, [pc, #320]	; (8003564 <cli_log+0x188>)
 8003422:	f006 fc3b 	bl	8009c9c <iprintf>
			return EXIT_FAILURE;
 8003426:	2301      	movs	r3, #1
 8003428:	e093      	b.n	8003552 <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	494d      	ldr	r1, [pc, #308]	; (8003568 <cli_log+0x18c>)
 8003432:	4618      	mov	r0, r3
 8003434:	f7fc ff44 	bl	80002c0 <strcmp>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <cli_log+0x74>
			cli_log_stat = 0xFFFFFFFF;
 800343e:	4b4b      	ldr	r3, [pc, #300]	; (800356c <cli_log+0x190>)
 8003440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003444:	601a      	str	r2, [r3, #0]
			printf("All logs enabled.\n");
 8003446:	484a      	ldr	r0, [pc, #296]	; (8003570 <cli_log+0x194>)
 8003448:	f006 fcc4 	bl	8009dd4 <puts>
			return EXIT_SUCCESS;
 800344c:	2300      	movs	r3, #0
 800344e:	e080      	b.n	8003552 <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 8003450:	2302      	movs	r3, #2
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e00a      	b.n	800346c <cli_log+0x90>
				cli_enable_log_entry(argv[i]);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f8c9 	bl	80035f8 <cli_enable_log_entry>
			for(int i = 2; i < argc; i++){
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	dbf0      	blt.n	8003456 <cli_log+0x7a>
			}
			return EXIT_SUCCESS;
 8003474:	2300      	movs	r3, #0
 8003476:	e06c      	b.n	8003552 <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "off") == 0){
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	493d      	ldr	r1, [pc, #244]	; (8003574 <cli_log+0x198>)
 8003480:	4618      	mov	r0, r3
 8003482:	f7fc ff1d 	bl	80002c0 <strcmp>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d133      	bne.n	80034f4 <cli_log+0x118>
		printf("Turning off all logs\n");
 800348c:	483a      	ldr	r0, [pc, #232]	; (8003578 <cli_log+0x19c>)
 800348e:	f006 fca1 	bl	8009dd4 <puts>
		if(argc < 3){
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	dc07      	bgt.n	80034a8 <cli_log+0xcc>
			printf("Command %s on takes at least 3 arguments.\n", argv[0]);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4619      	mov	r1, r3
 800349e:	4831      	ldr	r0, [pc, #196]	; (8003564 <cli_log+0x188>)
 80034a0:	f006 fbfc 	bl	8009c9c <iprintf>
			return EXIT_FAILURE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e054      	b.n	8003552 <cli_log+0x176>
		}
		if(strcmp(argv[2], "all") == 0){
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	492e      	ldr	r1, [pc, #184]	; (8003568 <cli_log+0x18c>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fc ff05 	bl	80002c0 <strcmp>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <cli_log+0xf0>
			cli_log_stat = 0;
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <cli_log+0x190>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
			printf("All logs disabled.\n");
 80034c2:	482e      	ldr	r0, [pc, #184]	; (800357c <cli_log+0x1a0>)
 80034c4:	f006 fc86 	bl	8009dd4 <puts>
			return EXIT_SUCCESS;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e042      	b.n	8003552 <cli_log+0x176>
		}else{
			for(int i = 2; i < argc; i++){
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	e00a      	b.n	80034e8 <cli_log+0x10c>
				cli_disable_log_entry(argv[i]);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f859 	bl	8003594 <cli_disable_log_entry>
			for(int i = 2; i < argc; i++){
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	3301      	adds	r3, #1
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dbf0      	blt.n	80034d2 <cli_log+0xf6>
			}
			return EXIT_SUCCESS;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e02e      	b.n	8003552 <cli_log+0x176>
		}

	}else if(strcmp(argv[1], "show") == 0){
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	3304      	adds	r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4921      	ldr	r1, [pc, #132]	; (8003580 <cli_log+0x1a4>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fc fedf 	bl	80002c0 <strcmp>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d123      	bne.n	8003550 <cli_log+0x174>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e01b      	b.n	8003546 <cli_log+0x16a>
			printf("%16s:\t", cli_logs_names[i]);
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <cli_log+0x1a8>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	4619      	mov	r1, r3
 8003518:	481b      	ldr	r0, [pc, #108]	; (8003588 <cli_log+0x1ac>)
 800351a:	f006 fbbf 	bl	8009c9c <iprintf>
			if(cli_log_stat&(1<<i)){
 800351e:	2201      	movs	r2, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	461a      	mov	r2, r3
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <cli_log+0x190>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <cli_log+0x15e>
				printf(CLI_FONT_GREEN"Enabled"CLI_FONT_DEFAULT"\n");
 8003532:	4816      	ldr	r0, [pc, #88]	; (800358c <cli_log+0x1b0>)
 8003534:	f006 fc4e 	bl	8009dd4 <puts>
 8003538:	e002      	b.n	8003540 <cli_log+0x164>
			}else{
				printf(CLI_FONT_RED"Disabled"CLI_FONT_DEFAULT"\n");
 800353a:	4815      	ldr	r0, [pc, #84]	; (8003590 <cli_log+0x1b4>)
 800353c:	f006 fc4a 	bl	8009dd4 <puts>
		for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b06      	cmp	r3, #6
 800354a:	d9e0      	bls.n	800350e <cli_log+0x132>
			}
		}
		return EXIT_SUCCESS;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <cli_log+0x176>
	}

	return EXIT_FAILURE;
 8003550:	2301      	movs	r3, #1
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	0800ddcc 	.word	0x0800ddcc
 8003560:	0800de10 	.word	0x0800de10
 8003564:	0800de14 	.word	0x0800de14
 8003568:	0800de40 	.word	0x0800de40
 800356c:	2000001c 	.word	0x2000001c
 8003570:	0800de44 	.word	0x0800de44
 8003574:	0800de58 	.word	0x0800de58
 8003578:	0800de5c 	.word	0x0800de5c
 800357c:	0800de74 	.word	0x0800de74
 8003580:	0800de88 	.word	0x0800de88
 8003584:	20000000 	.word	0x20000000
 8003588:	0800de90 	.word	0x0800de90
 800358c:	0800de98 	.word	0x0800de98
 8003590:	0800deb0 	.word	0x0800deb0

08003594 <cli_disable_log_entry>:

void cli_disable_log_entry(char *str){
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e01c      	b.n	80035dc <cli_disable_log_entry+0x48>
		if(strcmp(str, cli_logs_names[i]) == 0){
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <cli_disable_log_entry+0x58>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fc fe87 	bl	80002c0 <strcmp>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <cli_disable_log_entry+0x42>
			printf("LOG disabled for category %s.\n", str);
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	480d      	ldr	r0, [pc, #52]	; (80035f0 <cli_disable_log_entry+0x5c>)
 80035bc:	f006 fb6e 	bl	8009c9c <iprintf>
			cli_log_stat &= ~(1<<i);
 80035c0:	2201      	movs	r2, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <cli_disable_log_entry+0x60>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4013      	ands	r3, r2
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <cli_disable_log_entry+0x60>)
 80035d4:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d9df      	bls.n	80035a2 <cli_disable_log_entry+0xe>
		}
	}
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000000 	.word	0x20000000
 80035f0:	0800dec8 	.word	0x0800dec8
 80035f4:	2000001c 	.word	0x2000001c

080035f8 <cli_enable_log_entry>:

void cli_enable_log_entry(char *str){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e01b      	b.n	800363e <cli_enable_log_entry+0x46>
		if(strcmp(str, cli_logs_names[i]) == 0){
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <cli_enable_log_entry+0x58>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fc fe55 	bl	80002c0 <strcmp>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <cli_enable_log_entry+0x40>
			printf("LOG enabled for category %s.\n", str);
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <cli_enable_log_entry+0x5c>)
 8003620:	f006 fb3c 	bl	8009c9c <iprintf>
			cli_log_stat |= (1<<i);
 8003624:	2201      	movs	r2, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	461a      	mov	r2, r3
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <cli_enable_log_entry+0x60>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <cli_enable_log_entry+0x60>)
 8003636:	6013      	str	r3, [r2, #0]
	for(unsigned int i = 0; i < CLI_LAST_LOG_CATEGORY; i++){
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d9e0      	bls.n	8003606 <cli_enable_log_entry+0xe>
		}
	}
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000
 8003654:	0800dee8 	.word	0x0800dee8
 8003658:	2000001c 	.word	0x2000001c

0800365c <shell_queue_init>:
 * @brief  shell_queue_init inits the contents of the queue to zeros
 * @param  queue
 * @retval True
 */
uint8_t shell_queue_init(shell_queue_s *queue)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = 0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]

    memset(queue->PBase, 0, SHELL_QUEUE_LENGTH);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3308      	adds	r3, #8
 8003676:	2220      	movs	r2, #32
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f005 fa52 	bl	8008b24 <memset>

    return true;
 8003680:	2301      	movs	r3, #1
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <shell_queue_full>:
 * @brief  shell_queue_full checks if the queue is full
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_full(shell_queue_s *queue)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
    if((((queue->Rear) + 1) % SHELL_QUEUE_LENGTH) == queue->Front) {
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d101      	bne.n	80036a8 <shell_queue_full+0x1e>
        return true;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <shell_queue_full+0x20>
    } else {
        return false;
 80036a8:	2300      	movs	r3, #0
    }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <shell_queue_empty>:
 * @brief  shell_queue_empty checks if the queue is empty
 * @param  queue
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_empty(shell_queue_s *queue)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
    if(queue->Front == queue->Rear) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d101      	bne.n	80036ce <shell_queue_empty+0x18>
        return true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <shell_queue_empty+0x1a>
    } else {
        return false;
 80036ce:	2300      	movs	r3, #0
    }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <shell_queue_in>:
 * @brief  shell_queue_in inserts a byte in the queue
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */
uint8_t shell_queue_in(shell_queue_s *queue, uint8_t *PData)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]

    if(shell_queue_full(queue)) {
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffcf 	bl	800368a <shell_queue_full>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <shell_queue_in+0x1a>
        return false;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e00f      	b.n	8003716 <shell_queue_in+0x3a>
    }

    queue->PBase[queue->Rear] = *PData;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	7811      	ldrb	r1, [r2, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	460a      	mov	r2, r1
 8003704:	721a      	strb	r2, [r3, #8]
    queue->Rear = ((queue->Rear) + 1) % SHELL_QUEUE_LENGTH;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	605a      	str	r2, [r3, #4]

    return true;
 8003714:	2301      	movs	r3, #1
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <shell_queue_out>:
 * @param  queue, PData
 * @retval Result of Queue Operation as bool
 */

uint8_t shell_queue_out(shell_queue_s *queue, uint8_t *PData)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
    if(shell_queue_empty(queue)) {
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc4 	bl	80036b6 <shell_queue_empty>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <shell_queue_out+0x1a>
        return false;
 8003734:	2300      	movs	r3, #0
 8003736:	e00e      	b.n	8003756 <shell_queue_out+0x38>
    }

    *PData = queue->PBase[queue->Front];
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	7a1a      	ldrb	r2, [r3, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	701a      	strb	r2, [r3, #0]
    queue->Front = ((queue->Front) + 1) % SHELL_QUEUE_LENGTH;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]

    return true;
 8003754:	2301      	movs	r3, #1
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
	return 1;
 8003762:	2301      	movs	r3, #1
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <_kill>:

int _kill(int pid, int sig)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003778:	f004 ff8a 	bl	8008690 <__errno>
 800377c:	4603      	mov	r3, r0
 800377e:	2216      	movs	r2, #22
 8003780:	601a      	str	r2, [r3, #0]
	return -1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_exit>:

void _exit (int status)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ffe7 	bl	800376e <_kill>
	while (1) {}		/* Make sure we hang here */
 80037a0:	e7fe      	b.n	80037a0 <_exit+0x12>

080037a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e00a      	b.n	80037ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037b4:	f3af 8000 	nop.w
 80037b8:	4601      	mov	r1, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	60ba      	str	r2, [r7, #8]
 80037c0:	b2ca      	uxtb	r2, r1
 80037c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	dbf0      	blt.n	80037b4 <_read+0x12>
	}

return len;
 80037d2:	687b      	ldr	r3, [r7, #4]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <_close>:
	}
	return len;
}

int _close(int file)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	return -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003804:	605a      	str	r2, [r3, #4]
	return 0;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <_isatty>:

int _isatty(int file)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
	return 0;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <_sbrk+0x5c>)
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <_sbrk+0x60>)
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <_sbrk+0x64>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <_sbrk+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d207      	bcs.n	8003884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003874:	f004 ff0c 	bl	8008690 <__errno>
 8003878:	4603      	mov	r3, r0
 800387a:	220c      	movs	r2, #12
 800387c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003882:	e009      	b.n	8003898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_sbrk+0x64>)
 8003894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20020000 	.word	0x20020000
 80038a4:	00000400 	.word	0x00000400
 80038a8:	20000888 	.word	0x20000888
 80038ac:	200008a0 	.word	0x200008a0

080038b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SystemInit+0x20>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <SystemInit+0x20>)
 80038bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d8:	480d      	ldr	r0, [pc, #52]	; (8003910 <LoopForever+0x6>)
  ldr r1, =_edata
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <LoopForever+0xe>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopForever+0x12>)
  ldr r4, =_ebss
 80038f0:	4c0b      	ldr	r4, [pc, #44]	; (8003920 <LoopForever+0x16>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038fe:	f7ff ffd7 	bl	80038b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f005 f8a7 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003906:	f7fe fa55 	bl	8001db4 <main>

0800390a <LoopForever>:

LoopForever:
    b LoopForever
 800390a:	e7fe      	b.n	800390a <LoopForever>
  ldr   r0, =_estack
 800390c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003914:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003918:	0800e564 	.word	0x0800e564
  ldr r2, =_sbss
 800391c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003920:	200008a0 	.word	0x200008a0

08003924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC1_2_IRQHandler>

08003926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003930:	2003      	movs	r0, #3
 8003932:	f000 f995 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003936:	2000      	movs	r0, #0
 8003938:	f000 f80e 	bl	8003958 <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	71fb      	strb	r3, [r7, #7]
 8003946:	e001      	b.n	800394c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003948:	f7fe fcf0 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800394c:	79fb      	ldrb	r3, [r7, #7]

}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_InitTick+0x68>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d022      	beq.n	80039b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_InitTick+0x6c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_InitTick+0x68>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f9b2 	bl	8003cea <HAL_SYSTICK_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d809      	bhi.n	80039a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003992:	2200      	movs	r2, #0
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399a:	f000 f96c 	bl	8003c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_InitTick+0x70>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e007      	b.n	80039b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e004      	b.n	80039b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000028 	.word	0x20000028
 80039c4:	20000020 	.word	0x20000020
 80039c8:	20000024 	.word	0x20000024

080039cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x1c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_IncTick+0x20>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_IncTick+0x1c>)
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	2000088c 	.word	0x2000088c
 80039ec:	20000028 	.word	0x20000028

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000088c 	.word	0x2000088c

08003a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7ff ffee 	bl	80039f0 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a20:	d004      	beq.n	8003a2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_Delay+0x40>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4413      	add	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2c:	bf00      	nop
 8003a2e:	f7ff ffdf 	bl	80039f0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d8f7      	bhi.n	8003a2e <HAL_Delay+0x26>
  {
  }
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000028 	.word	0x20000028

08003a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <__NVIC_SetPriorityGrouping+0x44>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a7e:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <__NVIC_SetPriorityGrouping+0x44>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	60d3      	str	r3, [r2, #12]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <__NVIC_GetPriorityGrouping+0x18>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	f003 0307 	and.w	r3, r3, #7
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	db0b      	blt.n	8003ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	4907      	ldr	r1, [pc, #28]	; (8003ae8 <__NVIC_EnableIRQ+0x38>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100

08003aec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	db12      	blt.n	8003b24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	490a      	ldr	r1, [pc, #40]	; (8003b30 <__NVIC_DisableIRQ+0x44>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b12:	3320      	adds	r3, #32
 8003b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b18:	f3bf 8f4f 	dsb	sy
}
 8003b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b1e:	f3bf 8f6f 	isb	sy
}
 8003b22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003bf4:	f3bf 8f4f 	dsb	sy
}
 8003bf8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <__NVIC_SystemReset+0x24>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c02:	4904      	ldr	r1, [pc, #16]	; (8003c14 <__NVIC_SystemReset+0x24>)
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <__NVIC_SystemReset+0x28>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0a:	f3bf 8f4f 	dsb	sy
}
 8003c0e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <__NVIC_SystemReset+0x20>
 8003c14:	e000ed00 	.word	0xe000ed00
 8003c18:	05fa0004 	.word	0x05fa0004

08003c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d301      	bcc.n	8003c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00f      	b.n	8003c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <SysTick_Config+0x40>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c40:	f7ff ff78 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SysTick_Config+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <SysTick_Config+0x40>)
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff feef 	bl	8003a4c <__NVIC_SetPriorityGrouping>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff06 	bl	8003a94 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff7a 	bl	8003b88 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff49 	bl	8003b34 <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fef9 	bl	8003ab0 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff09 	bl	8003aec <__NVIC_DisableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003ce6:	f7ff ff83 	bl	8003bf0 <__NVIC_SystemReset>

08003cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ff92 	bl	8003c1c <SysTick_Config>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d005      	beq.n	8003d26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e037      	b.n	8003d96 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 020e 	bic.w	r2, r2, #14
 8003d34:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d44:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d72:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00c      	beq.n	8003d96 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d94:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d00d      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e047      	b.n	8003e78 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 020e 	bic.w	r2, r2, #14
 8003df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
    }
  }
  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e147      	b.n	8004126 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe fa62 	bl	8002374 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0210 	bic.w	r2, r2, #16
 8003ebe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec0:	f7ff fd96 	bl	80039f0 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ec6:	e012      	b.n	8003eee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ec8:	f7ff fd92 	bl	80039f0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b0a      	cmp	r3, #10
 8003ed4:	d90b      	bls.n	8003eee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e11b      	b.n	8004126 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d0e5      	beq.n	8003ec8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0c:	f7ff fd70 	bl	80039f0 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f12:	e012      	b.n	8003f3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f14:	f7ff fd6c 	bl	80039f0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b0a      	cmp	r3, #10
 8003f20:	d90b      	bls.n	8003f3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2203      	movs	r2, #3
 8003f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0f5      	b.n	8004126 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0e5      	beq.n	8003f14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0202 	orr.w	r2, r2, #2
 8003f56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a74      	ldr	r2, [pc, #464]	; (8004130 <HAL_FDCAN_Init+0x2ac>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d103      	bne.n	8003f6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003f62:	4a74      	ldr	r2, [pc, #464]	; (8004134 <HAL_FDCAN_Init+0x2b0>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7c1b      	ldrb	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	619a      	str	r2, [r3, #24]
 8003f82:	e007      	b.n	8003f94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7c5b      	ldrb	r3, [r3, #17]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	e007      	b.n	8003fbe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fbc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7c9b      	ldrb	r3, [r3, #18]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd4:	619a      	str	r2, [r3, #24]
 8003fd6:	e007      	b.n	8003fe8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800400c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0210 	bic.w	r2, r2, #16
 800401c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0204 	orr.w	r2, r2, #4
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e02c      	b.n	8004092 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d028      	beq.n	8004092 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d01c      	beq.n	8004082 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004056:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0210 	orr.w	r2, r2, #16
 8004066:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d110      	bne.n	8004092 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0220 	orr.w	r2, r2, #32
 800407e:	619a      	str	r2, [r3, #24]
 8004080:	e007      	b.n	8004092 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0220 	orr.w	r2, r2, #32
 8004090:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	3b01      	subs	r3, #1
 8004098:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	3b01      	subs	r3, #1
 80040a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c6:	d115      	bne.n	80040f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	3b01      	subs	r3, #1
 80040d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	3b01      	subs	r3, #1
 80040de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	3b01      	subs	r3, #1
 80040ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f814 	bl	8004138 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40006400 	.word	0x40006400
 8004134:	40006500 	.word	0x40006500

08004138 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004142:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d103      	bne.n	8004156 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004154:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2c      	ldr	r2, [pc, #176]	; (800420c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d103      	bne.n	8004168 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004166:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004176:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	041a      	lsls	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	061a      	lsls	r2, r3, #24
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e005      	b.n	80041ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3304      	adds	r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3f3      	bcc.n	80041de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	4000a400 	.word	0x4000a400
 8004208:	40006800 	.word	0x40006800
 800420c:	40006c00 	.word	0x40006c00

08004210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800421e:	e15a      	b.n	80044d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2101      	movs	r1, #1
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 814c 	beq.w	80044d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d005      	beq.n	8004250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800424c:	2b02      	cmp	r3, #2
 800424e:	d130      	bne.n	80042b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004286:	2201      	movs	r2, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 0201 	and.w	r2, r3, #1
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d017      	beq.n	80042ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d123      	bne.n	8004342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3208      	adds	r2, #8
 800433c:	6939      	ldr	r1, [r7, #16]
 800433e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0203 	and.w	r2, r3, #3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a6 	beq.w	80044d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6613      	str	r3, [r2, #96]	; 0x60
 8004390:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439c:	4a56      	ldr	r2, [pc, #344]	; (80044f8 <HAL_GPIO_Init+0x2e8>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3302      	adds	r3, #2
 80043a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	220f      	movs	r2, #15
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043c6:	d01f      	beq.n	8004408 <HAL_GPIO_Init+0x1f8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <HAL_GPIO_Init+0x2ec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d019      	beq.n	8004404 <HAL_GPIO_Init+0x1f4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_GPIO_Init+0x2f0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_GPIO_Init+0x1f0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_GPIO_Init+0x2f4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00d      	beq.n	80043fc <HAL_GPIO_Init+0x1ec>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_GPIO_Init+0x2f8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <HAL_GPIO_Init+0x1e8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a48      	ldr	r2, [pc, #288]	; (800450c <HAL_GPIO_Init+0x2fc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_GPIO_Init+0x1e4>
 80043f0:	2305      	movs	r3, #5
 80043f2:	e00a      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043f4:	2306      	movs	r3, #6
 80043f6:	e008      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e006      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043fc:	2303      	movs	r3, #3
 80043fe:	e004      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004400:	2302      	movs	r3, #2
 8004402:	e002      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004408:	2300      	movs	r3, #0
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	f002 0203 	and.w	r2, r2, #3
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	4093      	lsls	r3, r2
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800441a:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_GPIO_Init+0x2e8>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_GPIO_Init+0x300>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <HAL_GPIO_Init+0x300>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_GPIO_Init+0x300>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004476:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x300>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_GPIO_Init+0x300>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ca:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f ae9d 	bne.w	8004220 <HAL_GPIO_Init+0x10>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40010000 	.word	0x40010000
 80044fc:	48000400 	.word	0x48000400
 8004500:	48000800 	.word	0x48000800
 8004504:	48000c00 	.word	0x48000c00
 8004508:	48001000 	.word	0x48001000
 800450c:	48001400 	.word	0x48001400
 8004510:	40010400 	.word	0x40010400

08004514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
 8004520:	4613      	mov	r3, r2
 8004522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004524:	787b      	ldrb	r3, [r7, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004530:	e002      	b.n	8004538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800455a:	4a05      	ldr	r2, [pc, #20]	; (8004570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f806 	bl	8004574 <HAL_GPIO_EXTI_Callback>
  }
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40010400 	.word	0x40010400

08004574 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e081      	b.n	80046a0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fd ff3b 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	e006      	b.n	8004612 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004610:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d104      	bne.n	8004624 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004622:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004646:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69d9      	ldr	r1, [r3, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	461a      	mov	r2, r3
 80046b4:	460b      	mov	r3, r1
 80046b6:	817b      	strh	r3, [r7, #10]
 80046b8:	4613      	mov	r3, r2
 80046ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	f040 80da 	bne.w	800487e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2C_Master_Transmit+0x30>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0d3      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046e0:	f7ff f986 	bl	80039f0 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2319      	movs	r3, #25
 80046ec:	2201      	movs	r2, #1
 80046ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f9e6 	bl	8004ac4 <I2C_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0be      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2210      	movs	r2, #16
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	893a      	ldrh	r2, [r7, #8]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	2bff      	cmp	r3, #255	; 0xff
 8004732:	d90e      	bls.n	8004752 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	22ff      	movs	r2, #255	; 0xff
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	8979      	ldrh	r1, [r7, #10]
 8004742:	4b51      	ldr	r3, [pc, #324]	; (8004888 <HAL_I2C_Master_Transmit+0x1e0>)
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fbdc 	bl	8004f08 <I2C_TransferConfig>
 8004750:	e06c      	b.n	800482c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8979      	ldrh	r1, [r7, #10]
 8004764:	4b48      	ldr	r3, [pc, #288]	; (8004888 <HAL_I2C_Master_Transmit+0x1e0>)
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fbcb 	bl	8004f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004772:	e05b      	b.n	800482c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	6a39      	ldr	r1, [r7, #32]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f9e3 	bl	8004b44 <I2C_WaitOnTXISFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e07b      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d034      	beq.n	800482c <HAL_I2C_Master_Transmit+0x184>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d130      	bne.n	800482c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f975 	bl	8004ac4 <I2C_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04d      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d90e      	bls.n	800480c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	8979      	ldrh	r1, [r7, #10]
 80047fc:	2300      	movs	r3, #0
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fb7f 	bl	8004f08 <I2C_TransferConfig>
 800480a:	e00f      	b.n	800482c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	b2da      	uxtb	r2, r3
 800481c:	8979      	ldrh	r1, [r7, #10]
 800481e:	2300      	movs	r3, #0
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb6e 	bl	8004f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d19e      	bne.n	8004774 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f9c2 	bl	8004bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e01a      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2220      	movs	r2, #32
 8004850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6859      	ldr	r1, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_I2C_Master_Transmit+0x1e4>)
 800485e:	400b      	ands	r3, r1
 8004860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e000      	b.n	8004880 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	80002000 	.word	0x80002000
 800488c:	fe00e800 	.word	0xfe00e800

08004890 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	460b      	mov	r3, r1
 800489e:	817b      	strh	r3, [r7, #10]
 80048a0:	4613      	mov	r3, r2
 80048a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	f040 80db 	bne.w	8004a68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_I2C_Master_Receive+0x30>
 80048bc:	2302      	movs	r3, #2
 80048be:	e0d4      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048c8:	f7ff f892 	bl	80039f0 <HAL_GetTick>
 80048cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	2319      	movs	r3, #25
 80048d4:	2201      	movs	r2, #1
 80048d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8f2 	bl	8004ac4 <I2C_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0bf      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2222      	movs	r2, #34	; 0x22
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2210      	movs	r2, #16
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	893a      	ldrh	r2, [r7, #8]
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	d90e      	bls.n	800493a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	22ff      	movs	r2, #255	; 0xff
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	b2da      	uxtb	r2, r3
 8004928:	8979      	ldrh	r1, [r7, #10]
 800492a:	4b52      	ldr	r3, [pc, #328]	; (8004a74 <HAL_I2C_Master_Receive+0x1e4>)
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fae8 	bl	8004f08 <I2C_TransferConfig>
 8004938:	e06d      	b.n	8004a16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	b2da      	uxtb	r2, r3
 800494a:	8979      	ldrh	r1, [r7, #10]
 800494c:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <HAL_I2C_Master_Receive+0x1e4>)
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fad7 	bl	8004f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800495a:	e05c      	b.n	8004a16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6a39      	ldr	r1, [r7, #32]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f96b 	bl	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e07c      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d034      	beq.n	8004a16 <HAL_I2C_Master_Receive+0x186>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d130      	bne.n	8004a16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f880 	bl	8004ac4 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e04d      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2bff      	cmp	r3, #255	; 0xff
 80049d6:	d90e      	bls.n	80049f6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	8979      	ldrh	r1, [r7, #10]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa8a 	bl	8004f08 <I2C_TransferConfig>
 80049f4:	e00f      	b.n	8004a16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	8979      	ldrh	r1, [r7, #10]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa79 	bl	8004f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d19d      	bne.n	800495c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6a39      	ldr	r1, [r7, #32]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f8cd 	bl	8004bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e01a      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_I2C_Master_Receive+0x1e8>)
 8004a48:	400b      	ands	r3, r1
 8004a4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	80002400 	.word	0x80002400
 8004a78:	fe00e800 	.word	0xfe00e800

08004a7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d103      	bne.n	8004a9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d007      	beq.n	8004ab8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	619a      	str	r2, [r3, #24]
  }
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad4:	e022      	b.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004adc:	d01e      	beq.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fe ff87 	bl	80039f0 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d113      	bne.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e00f      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d0cd      	beq.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b50:	e02c      	b.n	8004bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f8ea 	bl	8004d30 <I2C_IsErrorOccurred>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e02a      	b.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6c:	d01e      	beq.n	8004bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fe ff3f 	bl	80039f0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d113      	bne.n	8004bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e007      	b.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d1cb      	bne.n	8004b52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd0:	e028      	b.n	8004c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f8aa 	bl	8004d30 <I2C_IsErrorOccurred>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e026      	b.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fe ff03 	bl	80039f0 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e007      	b.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d1cf      	bne.n	8004bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c48:	e064      	b.n	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f86e 	bl	8004d30 <I2C_IsErrorOccurred>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e062      	b.n	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d138      	bne.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d105      	bne.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e04e      	b.n	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d107      	bne.n	8004ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ca2:	e002      	b.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e022      	b.n	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fe fe87 	bl	80039f0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e007      	b.n	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d193      	bne.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	fe00e800 	.word	0xfe00e800

08004d30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d075      	beq.n	8004e48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2210      	movs	r2, #16
 8004d62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d64:	e056      	b.n	8004e14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6c:	d052      	beq.n	8004e14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe fe3f 	bl	80039f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_IsErrorOccurred+0x54>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d147      	bne.n	8004e14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da6:	d12e      	bne.n	8004e06 <I2C_IsErrorOccurred+0xd6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dae:	d02a      	beq.n	8004e06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d027      	beq.n	8004e06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dc6:	f7fe fe13 	bl	80039f0 <HAL_GetTick>
 8004dca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dcc:	e01b      	b.n	8004e06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dce:	f7fe fe0f 	bl	80039f0 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b19      	cmp	r3, #25
 8004dda:	d914      	bls.n	8004e06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d1dc      	bne.n	8004dce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d003      	beq.n	8004e2a <I2C_IsErrorOccurred+0xfa>
 8004e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d09d      	beq.n	8004d66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f043 0308 	orr.w	r3, r3, #8
 8004e82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01c      	beq.n	8004ef8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fddc 	bl	8004a7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <I2C_IsErrorOccurred+0x1d4>)
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3728      	adds	r7, #40	; 0x28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	fe00e800 	.word	0xfe00e800

08004f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	817b      	strh	r3, [r7, #10]
 8004f16:	4613      	mov	r3, r2
 8004f18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f20:	7a7b      	ldrb	r3, [r7, #9]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f28:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	0d5b      	lsrs	r3, r3, #21
 8004f42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <I2C_TransferConfig+0x60>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	ea02 0103 	and.w	r1, r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	03ff63ff 	.word	0x03ff63ff

08004f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d138      	bne.n	8004ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e032      	b.n	8004ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b20      	cmp	r3, #32
 8005016:	d139      	bne.n	800508c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005022:	2302      	movs	r3, #2
 8005024:	e033      	b.n	800508e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2224      	movs	r2, #36	; 0x24
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d141      	bne.n	800512e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050aa:	4b4b      	ldr	r3, [pc, #300]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d131      	bne.n	800511c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b8:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050be:	4a46      	ldr	r2, [pc, #280]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050d0:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2232      	movs	r2, #50	; 0x32
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	4a3f      	ldr	r2, [pc, #252]	; (80051e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	0c9b      	lsrs	r3, r3, #18
 80050ea:	3301      	adds	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ee:	e002      	b.n	80050f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050f6:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005102:	d102      	bne.n	800510a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f2      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800510a:	4b33      	ldr	r3, [pc, #204]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	d158      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e057      	b.n	80051cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800511c:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005122:	4a2d      	ldr	r2, [pc, #180]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800512c:	e04d      	b.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005134:	d141      	bne.n	80051ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005136:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005142:	d131      	bne.n	80051a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514a:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005154:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800515c:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2232      	movs	r2, #50	; 0x32
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0c9b      	lsrs	r3, r3, #18
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800517a:	e002      	b.n	8005182 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d102      	bne.n	8005196 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f2      	bne.n	800517c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d112      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e011      	b.n	80051cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051b8:	e007      	b.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051c2:	4a05      	ldr	r2, [pc, #20]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40007000 	.word	0x40007000
 80051dc:	20000020 	.word	0x20000020
 80051e0:	431bde83 	.word	0x431bde83

080051e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f2:	6093      	str	r3, [r2, #8]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40007000 	.word	0x40007000

08005204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e306      	b.n	8005824 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	4b97      	ldr	r3, [pc, #604]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800522c:	4b94      	ldr	r3, [pc, #592]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	d102      	bne.n	8005242 <HAL_RCC_OscConfig+0x3e>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d002      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e2e1      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b85      	ldr	r3, [pc, #532]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a84      	ldr	r2, [pc, #528]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b7f      	ldr	r3, [pc, #508]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a7e      	ldr	r2, [pc, #504]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7b      	ldr	r2, [pc, #492]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a77      	ldr	r2, [pc, #476]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b75      	ldr	r3, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a74      	ldr	r2, [pc, #464]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fe fb98 	bl	80039f0 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fe fb94 	bl	80039f0 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e2a6      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fb84 	bl	80039f0 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fe fb80 	bl	80039f0 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e292      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052fe:	4b60      	ldr	r3, [pc, #384]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d075      	beq.n	8005406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b56      	ldr	r3, [pc, #344]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d102      	bne.n	800533a <HAL_RCC_OscConfig+0x136>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d002      	beq.n	8005340 <HAL_RCC_OscConfig+0x13c>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d11f      	bne.n	8005380 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005340:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_OscConfig+0x154>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e265      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	4946      	ldr	r1, [pc, #280]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800536c:	4b45      	ldr	r3, [pc, #276]	; (8005484 <HAL_RCC_OscConfig+0x280>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe faf1 	bl	8003958 <HAL_InitTick>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d043      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e251      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d023      	beq.n	80053d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800538e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fe fb2c 	bl	80039f0 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539c:	f7fe fb28 	bl	80039f0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e23a      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ba:	4b31      	ldr	r3, [pc, #196]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	492d      	ldr	r1, [pc, #180]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
 80053ce:	e01a      	b.n	8005406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fe fb08 	bl	80039f0 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e4:	f7fe fb04 	bl	80039f0 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e216      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x1e0>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d041      	beq.n	8005496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01c      	beq.n	8005454 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541a:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fe fae1 	bl	80039f0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005432:	f7fe fadd 	bl	80039f0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1ef      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <HAL_RCC_OscConfig+0x22e>
 8005452:	e020      	b.n	8005496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 8005456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <HAL_RCC_OscConfig+0x27c>)
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fe fac4 	bl	80039f0 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800546a:	e00d      	b.n	8005488 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546c:	f7fe fac0 	bl	80039f0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d906      	bls.n	8005488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1d2      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005488:	4b8c      	ldr	r3, [pc, #560]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1ea      	bne.n	800546c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80a6 	beq.w	80055f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a4:	2300      	movs	r3, #0
 80054a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054a8:	4b84      	ldr	r3, [pc, #528]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_OscConfig+0x2b4>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x2b6>
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4b7f      	ldr	r3, [pc, #508]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	4a7e      	ldr	r2, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ca:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d6:	2301      	movs	r3, #1
 80054d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054da:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <HAL_RCC_OscConfig+0x4bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d118      	bne.n	8005518 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054e6:	4b76      	ldr	r3, [pc, #472]	; (80056c0 <HAL_RCC_OscConfig+0x4bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a75      	ldr	r2, [pc, #468]	; (80056c0 <HAL_RCC_OscConfig+0x4bc>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f2:	f7fe fa7d 	bl	80039f0 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fe fa79 	bl	80039f0 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e18b      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550c:	4b6c      	ldr	r3, [pc, #432]	; (80056c0 <HAL_RCC_OscConfig+0x4bc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d108      	bne.n	8005532 <HAL_RCC_OscConfig+0x32e>
 8005520:	4b66      	ldr	r3, [pc, #408]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005530:	e024      	b.n	800557c <HAL_RCC_OscConfig+0x378>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d110      	bne.n	800555c <HAL_RCC_OscConfig+0x358>
 800553a:	4b60      	ldr	r3, [pc, #384]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f043 0304 	orr.w	r3, r3, #4
 8005546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800554a:	4b5c      	ldr	r3, [pc, #368]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	4a5a      	ldr	r2, [pc, #360]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800555a:	e00f      	b.n	800557c <HAL_RCC_OscConfig+0x378>
 800555c:	4b57      	ldr	r3, [pc, #348]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	4a56      	ldr	r2, [pc, #344]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800556c:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	4a52      	ldr	r2, [pc, #328]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d016      	beq.n	80055b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fe fa34 	bl	80039f0 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fe fa30 	bl	80039f0 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e140      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055a2:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0ed      	beq.n	800558c <HAL_RCC_OscConfig+0x388>
 80055b0:	e015      	b.n	80055de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b2:	f7fe fa1d 	bl	80039f0 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fe fa19 	bl	80039f0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e129      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055d0:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ed      	bne.n	80055ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055de:	7ffb      	ldrb	r3, [r7, #31]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03c      	beq.n	8005676 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01c      	beq.n	800563e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005604:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800560a:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fe f9ec 	bl	80039f0 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800561c:	f7fe f9e8 	bl	80039f0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0fa      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800562e:	4b23      	ldr	r3, [pc, #140]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ef      	beq.n	800561c <HAL_RCC_OscConfig+0x418>
 800563c:	e01b      	b.n	8005676 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800563e:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fe f9cf 	bl	80039f0 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005656:	f7fe f9cb 	bl	80039f0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e0dd      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1ef      	bne.n	8005656 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80d1 	beq.w	8005822 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b0c      	cmp	r3, #12
 800568a:	f000 808b 	beq.w	80057a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d15e      	bne.n	8005754 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a08      	ldr	r2, [pc, #32]	; (80056bc <HAL_RCC_OscConfig+0x4b8>)
 800569c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fe f9a5 	bl	80039f0 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a8:	e00c      	b.n	80056c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fe f9a1 	bl	80039f0 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d905      	bls.n	80056c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e0b3      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_OscConfig+0x628>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ec      	bne.n	80056aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d0:	4b56      	ldr	r3, [pc, #344]	; (800582c <HAL_RCC_OscConfig+0x628>)
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	4b56      	ldr	r3, [pc, #344]	; (8005830 <HAL_RCC_OscConfig+0x62c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6a11      	ldr	r1, [r2, #32]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056e0:	3a01      	subs	r2, #1
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	4311      	orrs	r1, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056ea:	0212      	lsls	r2, r2, #8
 80056ec:	4311      	orrs	r1, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056f2:	0852      	lsrs	r2, r2, #1
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0552      	lsls	r2, r2, #21
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056fe:	0852      	lsrs	r2, r2, #1
 8005700:	3a01      	subs	r2, #1
 8005702:	0652      	lsls	r2, r2, #25
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800570a:	06d2      	lsls	r2, r2, #27
 800570c:	430a      	orrs	r2, r1
 800570e:	4947      	ldr	r1, [pc, #284]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005710:	4313      	orrs	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b45      	ldr	r3, [pc, #276]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a44      	ldr	r2, [pc, #272]	; (800582c <HAL_RCC_OscConfig+0x628>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005720:	4b42      	ldr	r3, [pc, #264]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a41      	ldr	r2, [pc, #260]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe f960 	bl	80039f0 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005734:	f7fe f95c 	bl	80039f0 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e06e      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005746:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x530>
 8005752:	e066      	b.n	8005822 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a34      	ldr	r2, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x628>)
 800575a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800575e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005760:	4b32      	ldr	r3, [pc, #200]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a31      	ldr	r2, [pc, #196]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <HAL_RCC_OscConfig+0x628>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005772:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fe f938 	bl	80039f0 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fe f934 	bl	80039f0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e046      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <HAL_RCC_OscConfig+0x628>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x580>
 80057a2:	e03e      	b.n	8005822 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e039      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCC_OscConfig+0x628>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0203 	and.w	r2, r3, #3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d12c      	bne.n	800581e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	3b01      	subs	r3, #1
 80057d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d123      	bne.n	800581e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d11b      	bne.n	800581e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d113      	bne.n	800581e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	3b01      	subs	r3, #1
 8005804:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d109      	bne.n	800581e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	3b01      	subs	r3, #1
 8005818:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d001      	beq.n	8005822 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000
 8005830:	019f800c 	.word	0x019f800c

08005834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e11e      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800584c:	4b91      	ldr	r3, [pc, #580]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d910      	bls.n	800587c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b8e      	ldr	r3, [pc, #568]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 020f 	bic.w	r2, r3, #15
 8005862:	498c      	ldr	r1, [pc, #560]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b8a      	ldr	r3, [pc, #552]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e106      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d073      	beq.n	8005970 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d129      	bne.n	80058e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005890:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0f4      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058a0:	f000 f99e 	bl	8005be0 <RCC_GetSysClockFreqFromPLLSource>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4a7c      	ldr	r2, [pc, #496]	; (8005a9c <HAL_RCC_ClockConfig+0x268>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d93f      	bls.n	800592e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058ae:	4b7a      	ldr	r3, [pc, #488]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d033      	beq.n	800592e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d12f      	bne.n	800592e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ce:	4b72      	ldr	r3, [pc, #456]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d6:	4a70      	ldr	r2, [pc, #448]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e024      	b.n	800592e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d107      	bne.n	80058fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ec:	4b6a      	ldr	r3, [pc, #424]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0c6      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fc:	4b66      	ldr	r3, [pc, #408]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0be      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800590c:	f000 f8ce 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4a61      	ldr	r2, [pc, #388]	; (8005a9c <HAL_RCC_ClockConfig+0x268>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d909      	bls.n	800592e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005922:	4a5d      	ldr	r2, [pc, #372]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800592e:	4b5a      	ldr	r3, [pc, #360]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 0203 	bic.w	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4957      	ldr	r1, [pc, #348]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005940:	f7fe f856 	bl	80039f0 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005946:	e00a      	b.n	800595e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005948:	f7fe f852 	bl	80039f0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e095      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595e:	4b4e      	ldr	r3, [pc, #312]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 020c 	and.w	r2, r3, #12
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	429a      	cmp	r2, r3
 800596e:	d1eb      	bne.n	8005948 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d023      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a42      	ldr	r2, [pc, #264]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 800598e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005992:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059a0:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059a8:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4936      	ldr	r1, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d105      	bne.n	80059d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4a32      	ldr	r2, [pc, #200]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 80059d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d6:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d21d      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e4:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 020f 	bic.w	r2, r3, #15
 80059ec:	4929      	ldr	r1, [pc, #164]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059f4:	f7fd fffc 	bl	80039f0 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fd fff8 	bl	80039f0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e03b      	b.n	8005a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCC_ClockConfig+0x260>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d1ed      	bne.n	80059fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4917      	ldr	r1, [pc, #92]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490f      	ldr	r1, [pc, #60]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a5e:	f000 f825 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_RCC_ClockConfig+0x264>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490c      	ldr	r1, [pc, #48]	; (8005aa0 <HAL_RCC_ClockConfig+0x26c>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_RCC_ClockConfig+0x270>)
 8005a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_RCC_ClockConfig+0x274>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd ff68 	bl	8003958 <HAL_InitTick>
 8005a88:	4603      	mov	r3, r0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	04c4b400 	.word	0x04c4b400
 8005aa0:	0800e014 	.word	0x0800e014
 8005aa4:	20000020 	.word	0x20000020
 8005aa8:	20000024 	.word	0x20000024

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d102      	bne.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005abe:	4b2a      	ldr	r3, [pc, #168]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e047      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ad0:	4b26      	ldr	r3, [pc, #152]	; (8005b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	e03e      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005ad6:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b0c      	cmp	r3, #12
 8005ae0:	d136      	bne.n	8005b50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3301      	adds	r3, #1
 8005af8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b00:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0a:	68d2      	ldr	r2, [r2, #12]
 8005b0c:	0a12      	lsrs	r2, r2, #8
 8005b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	617b      	str	r3, [r7, #20]
      break;
 8005b18:	e00c      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b24:	68d2      	ldr	r2, [r2, #12]
 8005b26:	0a12      	lsrs	r2, r2, #8
 8005b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b2c:	fb02 f303 	mul.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
      break;
 8005b32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	0e5b      	lsrs	r3, r3, #25
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e001      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b54:	693b      	ldr	r3, [r7, #16]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	016e3600 	.word	0x016e3600

08005b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b76:	681b      	ldr	r3, [r3, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000020 	.word	0x20000020

08005b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b8c:	f7ff fff0 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800e024 	.word	0x0800e024

08005bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bb8:	f7ff ffda 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0adb      	lsrs	r3, r3, #11
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	0800e024 	.word	0x0800e024

08005be0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d10c      	bne.n	8005c1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c04:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c0e:	68d2      	ldr	r2, [r2, #12]
 8005c10:	0a12      	lsrs	r2, r2, #8
 8005c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	617b      	str	r3, [r7, #20]
    break;
 8005c1c:	e00c      	b.n	8005c38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c1e:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	0a12      	lsrs	r2, r2, #8
 8005c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c30:	fb02 f303 	mul.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    break;
 8005c36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	0e5b      	lsrs	r3, r3, #25
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	3301      	adds	r3, #1
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c52:	687b      	ldr	r3, [r7, #4]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40021000 	.word	0x40021000
 8005c64:	016e3600 	.word	0x016e3600
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c74:	2300      	movs	r3, #0
 8005c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c78:	2300      	movs	r3, #0
 8005c7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8098 	beq.w	8005dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8e:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9a:	4b40      	ldr	r3, [pc, #256]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	4a3f      	ldr	r2, [pc, #252]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ca6:	4b3d      	ldr	r3, [pc, #244]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cb6:	4b3a      	ldr	r3, [pc, #232]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a39      	ldr	r2, [pc, #228]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cc2:	f7fd fe95 	bl	80039f0 <HAL_GetTick>
 8005cc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc8:	e009      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cca:	f7fd fe91 	bl	80039f0 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d902      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	74fb      	strb	r3, [r7, #19]
        break;
 8005cdc:	e005      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ef      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cea:	7cfb      	ldrb	r3, [r7, #19]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d159      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01e      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d019      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d0c:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d28:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d38:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fd fe51 	bl	80039f0 <HAL_GetTick>
 8005d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d50:	e00b      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fd fe4d 	bl	80039f0 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d902      	bls.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	74fb      	strb	r3, [r7, #19]
            break;
 8005d68:	e006      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0ec      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	4903      	ldr	r1, [pc, #12]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	74bb      	strb	r3, [r7, #18]
 8005d9a:	e005      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005da8:	7c7b      	ldrb	r3, [r7, #17]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dae:	4ba7      	ldr	r3, [pc, #668]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	4aa6      	ldr	r2, [pc, #664]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dc6:	4ba1      	ldr	r3, [pc, #644]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f023 0203 	bic.w	r2, r3, #3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	499d      	ldr	r1, [pc, #628]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005de8:	4b98      	ldr	r3, [pc, #608]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	f023 020c 	bic.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4995      	ldr	r1, [pc, #596]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e0a:	4b90      	ldr	r3, [pc, #576]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	498c      	ldr	r1, [pc, #560]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e2c:	4b87      	ldr	r3, [pc, #540]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	4984      	ldr	r1, [pc, #528]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e4e:	4b7f      	ldr	r3, [pc, #508]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	497b      	ldr	r1, [pc, #492]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e70:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	4973      	ldr	r1, [pc, #460]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e92:	4b6e      	ldr	r3, [pc, #440]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	496a      	ldr	r1, [pc, #424]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eb4:	4b65      	ldr	r3, [pc, #404]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	4962      	ldr	r1, [pc, #392]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	4959      	ldr	r1, [pc, #356]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ef8:	4b54      	ldr	r3, [pc, #336]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005efe:	f023 0203 	bic.w	r2, r3, #3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	4951      	ldr	r1, [pc, #324]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f1a:	4b4c      	ldr	r3, [pc, #304]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4948      	ldr	r1, [pc, #288]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3c:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4940      	ldr	r1, [pc, #256]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5c:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a3a      	ldr	r2, [pc, #232]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f74:	4b35      	ldr	r3, [pc, #212]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	4932      	ldr	r1, [pc, #200]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4924      	ldr	r1, [pc, #144]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b1f      	ldr	r3, [pc, #124]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	4916      	ldr	r1, [pc, #88]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a10      	ldr	r2, [pc, #64]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d019      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800603a:	d109      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a02      	ldr	r2, [pc, #8]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800605c:	4b29      	ldr	r3, [pc, #164]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	4926      	ldr	r1, [pc, #152]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607a:	d105      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a20      	ldr	r2, [pc, #128]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006086:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a2:	4918      	ldr	r1, [pc, #96]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a12      	ldr	r2, [pc, #72]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d015      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060da:	490a      	ldr	r1, [pc, #40]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ea:	d105      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000

08006108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e042      	b.n	80061a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fc f9d7 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2224      	movs	r2, #36	; 0x24
 8006136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fcee 	bl	8006b2c <UART_SetConfig>
 8006150:	4603      	mov	r3, r0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e022      	b.n	80061a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 ffde 	bl	8007124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f865 	bl	8007268 <UART_CheckIdleState>
 800619e:	4603      	mov	r3, r0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061be:	2b20      	cmp	r3, #32
 80061c0:	f040 8083 	bne.w	80062ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_UART_Transmit+0x28>
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e07b      	b.n	80062cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Transmit+0x3a>
 80061de:	2302      	movs	r3, #2
 80061e0:	e074      	b.n	80062cc <HAL_UART_Transmit+0x124>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2221      	movs	r2, #33	; 0x21
 80061f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fa:	f7fd fbf9 	bl	80039f0 <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d108      	bne.n	800622c <HAL_UART_Transmit+0x84>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e003      	b.n	8006234 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800623c:	e02c      	b.n	8006298 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 f858 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e039      	b.n	80062cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3302      	adds	r3, #2
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e007      	b.n	8006286 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1cc      	bne.n	800623e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2200      	movs	r2, #0
 80062ac:	2140      	movs	r1, #64	; 0x40
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f001 f825 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e006      	b.n	80062cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b091      	sub	sp, #68	; 0x44
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 808c 	bne.w	8006406 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_UART_Transmit_IT+0x26>
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e084      	b.n	8006408 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_UART_Transmit_IT+0x38>
 8006308:	2302      	movs	r3, #2
 800630a:	e07d      	b.n	8006408 <HAL_UART_Transmit_IT+0x134>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2221      	movs	r2, #33	; 0x21
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006348:	d12e      	bne.n	80063a8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d107      	bne.n	8006364 <HAL_UART_Transmit_IT+0x90>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a2d      	ldr	r2, [pc, #180]	; (8006414 <HAL_UART_Transmit_IT+0x140>)
 8006360:	675a      	str	r2, [r3, #116]	; 0x74
 8006362:	e002      	b.n	800636a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a2c      	ldr	r2, [pc, #176]	; (8006418 <HAL_UART_Transmit_IT+0x144>)
 8006368:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006392:	637a      	str	r2, [r7, #52]	; 0x34
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <HAL_UART_Transmit_IT+0x9e>
 80063a6:	e02c      	b.n	8006402 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d107      	bne.n	80063c2 <HAL_UART_Transmit_IT+0xee>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a17      	ldr	r2, [pc, #92]	; (800641c <HAL_UART_Transmit_IT+0x148>)
 80063be:	675a      	str	r2, [r3, #116]	; 0x74
 80063c0:	e002      	b.n	80063c8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a16      	ldr	r2, [pc, #88]	; (8006420 <HAL_UART_Transmit_IT+0x14c>)
 80063c6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	613b      	str	r3, [r7, #16]
   return(result);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	623b      	str	r3, [r7, #32]
 80063f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69f9      	ldr	r1, [r7, #28]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3744      	adds	r7, #68	; 0x44
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	08007a37 	.word	0x08007a37
 8006418:	08007957 	.word	0x08007957
 800641c:	08007895 	.word	0x08007895
 8006420:	080077dd 	.word	0x080077dd

08006424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	2b20      	cmp	r3, #32
 800643a:	d142      	bne.n	80064c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Receive_IT+0x24>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e03b      	b.n	80064c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_UART_Receive_IT+0x36>
 8006456:	2302      	movs	r3, #2
 8006458:	e034      	b.n	80064c4 <HAL_UART_Receive_IT+0xa0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a17      	ldr	r2, [pc, #92]	; (80064cc <HAL_UART_Receive_IT+0xa8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01f      	beq.n	80064b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d018      	beq.n	80064b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	613b      	str	r3, [r7, #16]
   return(result);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	69f9      	ldr	r1, [r7, #28]
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 ffe9 	bl	8007490 <UART_Start_Receive_IT>
 80064be:	4603      	mov	r3, r0
 80064c0:	e000      	b.n	80064c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3728      	adds	r7, #40	; 0x28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40008000 	.word	0x40008000

080064d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b0ba      	sub	sp, #232	; 0xe8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80064fe:	4013      	ands	r3, r2
 8006500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d11b      	bne.n	8006544 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d015      	beq.n	8006544 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 82d6 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
      }
      return;
 8006542:	e2d0      	b.n	8006ae6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 811f 	beq.w	800678c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800654e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006552:	4b8b      	ldr	r3, [pc, #556]	; (8006780 <HAL_UART_IRQHandler+0x2b0>)
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800655a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800655e:	4b89      	ldr	r3, [pc, #548]	; (8006784 <HAL_UART_IRQHandler+0x2b4>)
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8112 	beq.w	800678c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d011      	beq.n	8006598 <HAL_UART_IRQHandler+0xc8>
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d011      	beq.n	80065c8 <HAL_UART_IRQHandler+0xf8>
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2202      	movs	r2, #2
 80065b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065be:	f043 0204 	orr.w	r2, r3, #4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d011      	beq.n	80065f8 <HAL_UART_IRQHandler+0x128>
 80065d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2204      	movs	r2, #4
 80065e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006610:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006614:	4b5a      	ldr	r3, [pc, #360]	; (8006780 <HAL_UART_IRQHandler+0x2b0>)
 8006616:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2208      	movs	r2, #8
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662a:	f043 0208 	orr.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800663c:	2b00      	cmp	r3, #0
 800663e:	d012      	beq.n	8006666 <HAL_UART_IRQHandler+0x196>
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00c      	beq.n	8006666 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 823c 	beq.w	8006aea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d013      	beq.n	80066a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800667e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800668a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d005      	beq.n	80066ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d04f      	beq.n	800676a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f80a 	bl	80076e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d141      	bne.n	8006762 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800670a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800670e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1d9      	bne.n	80066de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d013      	beq.n	800675a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <HAL_UART_IRQHandler+0x2b8>)
 8006738:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd fb38 	bl	8003db4 <HAL_DMA_Abort_IT>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d017      	beq.n	800677a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	e00f      	b.n	800677a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9d0 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006760:	e00b      	b.n	800677a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f9cc 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	e007      	b.n	800677a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f9c8 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006778:	e1b7      	b.n	8006aea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677a:	bf00      	nop
    return;
 800677c:	e1b5      	b.n	8006aea <HAL_UART_IRQHandler+0x61a>
 800677e:	bf00      	nop
 8006780:	10000001 	.word	0x10000001
 8006784:	04000120 	.word	0x04000120
 8006788:	080077b1 	.word	0x080077b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	2b01      	cmp	r3, #1
 8006792:	f040 814a 	bne.w	8006a2a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8143 	beq.w	8006a2a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 813c 	beq.w	8006a2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2210      	movs	r2, #16
 80067b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	f040 80b5 	bne.w	8006934 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8187 	beq.w	8006aee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ea:	429a      	cmp	r2, r3
 80067ec:	f080 817f 	bcs.w	8006aee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 8086 	bne.w	8006918 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800683a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800684e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1da      	bne.n	800680c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800687a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800687e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006882:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800688c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e1      	bne.n	8006856 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e3      	bne.n	8006892 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	f023 0310 	bic.w	r3, r3, #16
 80068ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80068fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e4      	bne.n	80068d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd f9f5 	bl	8003d02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006924:	b29b      	uxth	r3, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	b29b      	uxth	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8f1 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006932:	e0dc      	b.n	8006aee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006940:	b29b      	uxth	r3, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80ce 	beq.w	8006af2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 80c9 	beq.w	8006af2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006982:	647b      	str	r3, [r7, #68]	; 0x44
 8006984:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e4      	bne.n	8006960 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	623b      	str	r3, [r7, #32]
   return(result);
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069be:	633a      	str	r2, [r7, #48]	; 0x30
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e1      	bne.n	8006996 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	69b9      	ldr	r1, [r7, #24]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	617b      	str	r3, [r7, #20]
   return(result);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f876 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a28:	e063      	b.n	8006af2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <HAL_UART_IRQHandler+0x584>
 8006a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fcef 	bl	8008430 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a52:	e051      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d014      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d03a      	beq.n	8006af6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
    }
    return;
 8006a88:	e035      	b.n	8006af6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <HAL_UART_IRQHandler+0x5da>
 8006a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 f83c 	bl	8007b20 <UART_EndTransmit_IT>
    return;
 8006aa8:	e026      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_UART_IRQHandler+0x5fa>
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fcc8 	bl	8008458 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac8:	e016      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_UART_IRQHandler+0x628>
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da0c      	bge.n	8006af8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fcb0 	bl	8008444 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ae4:	e008      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ae6:	bf00      	nop
 8006ae8:	e006      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
    return;
 8006aea:	bf00      	nop
 8006aec:	e004      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
      return;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
      return;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <HAL_UART_IRQHandler+0x628>
    return;
 8006af6:	bf00      	nop
  }
}
 8006af8:	37e8      	adds	r7, #232	; 0xe8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b08c      	sub	sp, #48	; 0x30
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4baa      	ldr	r3, [pc, #680]	; (8006e04 <UART_SetConfig+0x2d8>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a9f      	ldr	r2, [pc, #636]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b94:	4313      	orrs	r3, r2
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f023 010f 	bic.w	r1, r3, #15
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a90      	ldr	r2, [pc, #576]	; (8006e0c <UART_SetConfig+0x2e0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d125      	bne.n	8006c1c <UART_SetConfig+0xf0>
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81a      	bhi.n	8006c14 <UART_SetConfig+0xe8>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xb8>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e116      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e112      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e10e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e10a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1a:	e106      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <UART_SetConfig+0x2e8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d138      	bne.n	8006c98 <UART_SetConfig+0x16c>
 8006c26:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d82d      	bhi.n	8006c90 <UART_SetConfig+0x164>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x110>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e0d8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e0d4      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e0d0      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e0cc      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e0c8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <UART_SetConfig+0x2ec>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d125      	bne.n	8006cee <UART_SetConfig+0x1c2>
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d016      	beq.n	8006cde <UART_SetConfig+0x1b2>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d818      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d00a      	beq.n	8006cce <UART_SetConfig+0x1a2>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d814      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0x19a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d008      	beq.n	8006cd6 <UART_SetConfig+0x1aa>
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ccc:	e0ad      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd4:	e0a9      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cdc:	e0a5      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cde:	2308      	movs	r3, #8
 8006ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce4:	e0a1      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cec:	e09d      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	; (8006e1c <UART_SetConfig+0x2f0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d125      	bne.n	8006d44 <UART_SetConfig+0x218>
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d016      	beq.n	8006d34 <UART_SetConfig+0x208>
 8006d06:	2bc0      	cmp	r3, #192	; 0xc0
 8006d08:	d818      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d00a      	beq.n	8006d24 <UART_SetConfig+0x1f8>
 8006d0e:	2b80      	cmp	r3, #128	; 0x80
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <UART_SetConfig+0x1f0>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x200>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x210>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e082      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e07e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e07a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e076      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e072      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <UART_SetConfig+0x2f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d12a      	bne.n	8006da4 <UART_SetConfig+0x278>
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5c:	d01a      	beq.n	8006d94 <UART_SetConfig+0x268>
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d00c      	beq.n	8006d84 <UART_SetConfig+0x258>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d815      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x250>
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x260>
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x270>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d82:	e052      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8a:	e04e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d92:	e04a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9a:	e046      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e042      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d13a      	bne.n	8006e24 <UART_SetConfig+0x2f8>
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbc:	d01a      	beq.n	8006df4 <UART_SetConfig+0x2c8>
 8006dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc2:	d81b      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	d00c      	beq.n	8006de4 <UART_SetConfig+0x2b8>
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d815      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0x2b0>
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d008      	beq.n	8006dec <UART_SetConfig+0x2c0>
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x2d0>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e022      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e01e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e01a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e016      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e012      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006e04:	cfff69f3 	.word	0xcfff69f3
 8006e08:	40008000 	.word	0x40008000
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4aae      	ldr	r2, [pc, #696]	; (80070e8 <UART_SetConfig+0x5bc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	f040 8097 	bne.w	8006f64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d823      	bhi.n	8006e86 <UART_SetConfig+0x35a>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x318>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e77 	.word	0x08006e77
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e87 	.word	0x08006e87
 8006e64:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe fe8e 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6e:	e010      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b9e      	ldr	r3, [pc, #632]	; (80070ec <UART_SetConfig+0x5c0>)
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fe fe19 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e7c:	e009      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8130 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	4a94      	ldr	r2, [pc, #592]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4413      	add	r3, r2
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d305      	bcc.n	8006eca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ed0:	e113      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	60fa      	str	r2, [r7, #12]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	4a84      	ldr	r2, [pc, #528]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ef4:	f7f9 fefa 	bl	8000cec <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	020b      	lsls	r3, r1, #8
 8006f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f0e:	0202      	lsls	r2, r0, #8
 8006f10:	6979      	ldr	r1, [r7, #20]
 8006f12:	6849      	ldr	r1, [r1, #4]
 8006f14:	0849      	lsrs	r1, r1, #1
 8006f16:	2000      	movs	r0, #0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	eb12 0804 	adds.w	r8, r2, r4
 8006f20:	eb43 0905 	adc.w	r9, r3, r5
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	4693      	mov	fp, r2
 8006f2e:	4652      	mov	r2, sl
 8006f30:	465b      	mov	r3, fp
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fed9 	bl	8000cec <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4613      	mov	r3, r2
 8006f40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f48:	d308      	bcc.n	8006f5c <UART_SetConfig+0x430>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f50:	d204      	bcs.n	8006f5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	e0ce      	b.n	80070fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f62:	e0ca      	b.n	80070fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d166      	bne.n	800703c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d827      	bhi.n	8006fc6 <UART_SetConfig+0x49a>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x450>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fe fdf2 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fe fe04 	bl	8005bb4 <HAL_RCC_GetPCLK2Freq>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b4e      	ldr	r3, [pc, #312]	; (80070ec <UART_SetConfig+0x5c0>)
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fe fd79 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8006fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8090 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4a44      	ldr	r2, [pc, #272]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fec:	005a      	lsls	r2, r3, #1
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d916      	bls.n	8007034 <UART_SetConfig+0x508>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d212      	bcs.n	8007034 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f023 030f 	bic.w	r3, r3, #15
 8007016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b29a      	uxth	r2, r3
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	4313      	orrs	r3, r2
 8007028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	8bfa      	ldrh	r2, [r7, #30]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e062      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703a:	e05e      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007040:	2b08      	cmp	r3, #8
 8007042:	d828      	bhi.n	8007096 <UART_SetConfig+0x56a>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x520>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fe fd8a 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007076:	e014      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fe fd9c 	bl	8005bb4 <HAL_RCC_GetPCLK2Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <UART_SetConfig+0x5c0>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe fd11 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a0:	bf00      	nop
    }

    if (pclk != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d028      	beq.n	80070fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <UART_SetConfig+0x5c4>)
 80070ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	441a      	add	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d910      	bls.n	80070f4 <UART_SetConfig+0x5c8>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d20c      	bcs.n	80070f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	e009      	b.n	80070fa <UART_SetConfig+0x5ce>
 80070e6:	bf00      	nop
 80070e8:	40008000 	.word	0x40008000
 80070ec:	00f42400 	.word	0x00f42400
 80070f0:	0800e02c 	.word	0x0800e02c
      }
      else
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2201      	movs	r2, #1
 8007106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2200      	movs	r2, #0
 8007114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d10a      	bne.n	800723a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007278:	f7fc fbba 	bl	80039f0 <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b08      	cmp	r3, #8
 800728a:	d10e      	bne.n	80072aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f82f 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e025      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d10e      	bne.n	80072d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f819 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e0a9      	b.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007316:	f000 80a5 	beq.w	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fc fb69 	bl	80039f0 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
 800732a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732c:	2b00      	cmp	r3, #0
 800732e:	d140      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007344:	667b      	str	r3, [r7, #100]	; 0x64
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007350:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800735c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e6      	bne.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	663b      	str	r3, [r7, #96]	; 0x60
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007382:	64ba      	str	r2, [r7, #72]	; 0x48
 8007384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e069      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d051      	beq.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ce:	d149      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	66bb      	str	r3, [r7, #104]	; 0x68
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800742c:	623a      	str	r2, [r7, #32]
 800742e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	69f9      	ldr	r1, [r7, #28]
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	61bb      	str	r3, [r7, #24]
   return(result);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e010      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	429a      	cmp	r2, r3
 8007480:	f43f af46 	beq.w	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3770      	adds	r7, #112	; 0x70
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007490:	b480      	push	{r7}
 8007492:	b0a3      	sub	sp, #140	; 0x8c
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c2:	d10e      	bne.n	80074e2 <UART_Start_Receive_IT+0x52>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <UART_Start_Receive_IT+0x48>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074d6:	e02d      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	22ff      	movs	r2, #255	; 0xff
 80074dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074e0:	e028      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10d      	bne.n	8007506 <UART_Start_Receive_IT+0x76>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <UART_Start_Receive_IT+0x6c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	22ff      	movs	r2, #255	; 0xff
 80074f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074fa:	e01b      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	227f      	movs	r2, #127	; 0x7f
 8007500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007504:	e016      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800750e:	d10d      	bne.n	800752c <UART_Start_Receive_IT+0x9c>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <UART_Start_Receive_IT+0x92>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	227f      	movs	r2, #127	; 0x7f
 800751c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007520:	e008      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	223f      	movs	r2, #63	; 0x3f
 8007526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800752a:	e003      	b.n	8007534 <UART_Start_Receive_IT+0xa4>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2222      	movs	r2, #34	; 0x22
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3308      	adds	r3, #8
 800754a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007568:	673a      	str	r2, [r7, #112]	; 0x70
 800756a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800756e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e3      	bne.n	8007544 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007584:	d153      	bne.n	800762e <UART_Start_Receive_IT+0x19e>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	429a      	cmp	r2, r3
 8007590:	d34d      	bcc.n	800762e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759a:	d107      	bne.n	80075ac <UART_Start_Receive_IT+0x11c>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a4b      	ldr	r2, [pc, #300]	; (80076d4 <UART_Start_Receive_IT+0x244>)
 80075a8:	671a      	str	r2, [r3, #112]	; 0x70
 80075aa:	e002      	b.n	80075b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a4a      	ldr	r2, [pc, #296]	; (80076d8 <UART_Start_Receive_IT+0x248>)
 80075b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01a      	beq.n	80075f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e4      	bne.n	80075c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007618:	64ba      	str	r2, [r7, #72]	; 0x48
 800761a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_Start_Receive_IT+0x168>
 800762c:	e04a      	b.n	80076c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d107      	bne.n	8007648 <UART_Start_Receive_IT+0x1b8>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a26      	ldr	r2, [pc, #152]	; (80076dc <UART_Start_Receive_IT+0x24c>)
 8007644:	671a      	str	r2, [r3, #112]	; 0x70
 8007646:	e002      	b.n	800764e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4a25      	ldr	r2, [pc, #148]	; (80076e0 <UART_Start_Receive_IT+0x250>)
 800764c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d019      	beq.n	8007692 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007672:	677b      	str	r3, [r7, #116]	; 0x74
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
 800767e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e6      	bne.n	800765e <UART_Start_Receive_IT+0x1ce>
 8007690:	e018      	b.n	80076c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f043 0320 	orr.w	r3, r3, #32
 80076a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b0:	623b      	str	r3, [r7, #32]
 80076b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e6      	bne.n	8007692 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	378c      	adds	r7, #140	; 0x8c
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	08008131 	.word	0x08008131
 80076d8:	08007e39 	.word	0x08007e39
 80076dc:	08007cd7 	.word	0x08007cd7
 80076e0:	08007b77 	.word	0x08007b77

080076e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b095      	sub	sp, #84	; 0x54
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	643b      	str	r3, [r7, #64]	; 0x40
 800770c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e6      	bne.n	80076ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	61fb      	str	r3, [r7, #28]
   return(result);
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	64bb      	str	r3, [r7, #72]	; 0x48
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e3      	bne.n	800771e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d118      	bne.n	8007790 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60bb      	str	r3, [r7, #8]
   return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 0310 	bic.w	r3, r3, #16
 8007772:	647b      	str	r3, [r7, #68]	; 0x44
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6979      	ldr	r1, [r7, #20]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	613b      	str	r3, [r7, #16]
   return(result);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80077a4:	bf00      	nop
 80077a6:	3754      	adds	r7, #84	; 0x54
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff f996 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b08f      	sub	sp, #60	; 0x3c
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ea:	2b21      	cmp	r3, #33	; 0x21
 80077ec:	d14c      	bne.n	8007888 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d132      	bne.n	8007860 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	61fb      	str	r3, [r7, #28]
   return(result);
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800781e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e6      	bne.n	80077fa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	60bb      	str	r3, [r7, #8]
   return(result);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6979      	ldr	r1, [r7, #20]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	613b      	str	r3, [r7, #16]
   return(result);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800785e:	e013      	b.n	8007888 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007888:	bf00      	nop
 800788a:	373c      	adds	r7, #60	; 0x3c
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b091      	sub	sp, #68	; 0x44
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a2:	2b21      	cmp	r3, #33	; 0x21
 80078a4:	d151      	bne.n	800794a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d132      	bne.n	8007918 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	623b      	str	r3, [r7, #32]
   return(result);
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
 80078d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e6      	bne.n	80078b2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	69b9      	ldr	r1, [r7, #24]
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	617b      	str	r3, [r7, #20]
   return(result);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007916:	e018      	b.n	800794a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800794a:	bf00      	nop
 800794c:	3744      	adds	r7, #68	; 0x44
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007956:	b480      	push	{r7}
 8007958:	b091      	sub	sp, #68	; 0x44
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007964:	2b21      	cmp	r3, #33	; 0x21
 8007966:	d160      	bne.n	8007a2a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800796e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007970:	e057      	b.n	8007a22 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d133      	bne.n	80079e6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	623b      	str	r3, [r7, #32]
   return(result);
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800799e:	633a      	str	r2, [r7, #48]	; 0x30
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	69b9      	ldr	r1, [r7, #24]
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	617b      	str	r3, [r7, #20]
   return(result);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80079e4:	e021      	b.n	8007a2a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d013      	beq.n	8007a1c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1a4      	bne.n	8007972 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007a28:	e7ff      	b.n	8007a2a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007a2a:	bf00      	nop
 8007a2c:	3744      	adds	r7, #68	; 0x44
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b091      	sub	sp, #68	; 0x44
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a44:	2b21      	cmp	r3, #33	; 0x21
 8007a46:	d165      	bne.n	8007b14 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a50:	e05c      	b.n	8007b0c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d133      	bne.n	8007ac6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	613b      	str	r3, [r7, #16]
   return(result);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ac4:	e026      	b.n	8007b14 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d018      	beq.n	8007b06 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ae8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d19f      	bne.n	8007a52 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007b12:	e7ff      	b.n	8007b14 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007b14:	bf00      	nop
 8007b16:	3744      	adds	r7, #68	; 0x44
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6979      	ldr	r1, [r7, #20]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	613b      	str	r3, [r7, #16]
   return(result);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e6      	bne.n	8007b28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fa ff2b 	bl	80029c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6e:	bf00      	nop
 8007b70:	3720      	adds	r7, #32
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b096      	sub	sp, #88	; 0x58
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8e:	2b22      	cmp	r3, #34	; 0x22
 8007b90:	f040 8095 	bne.w	8007cbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ba2:	b2d9      	uxtb	r1, r3
 8007ba4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	400a      	ands	r2, r1
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d178      	bne.n	8007cce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d12e      	bne.n	8007cb6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0310 	bic.w	r3, r3, #16
 8007c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	69b9      	ldr	r1, [r7, #24]
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d103      	bne.n	8007ca6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fe ff30 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cb4:	e00b      	b.n	8007cce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fa fe6e 	bl	8002998 <HAL_UART_RxCpltCallback>
}
 8007cbc:	e007      	b.n	8007cce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0208 	orr.w	r2, r2, #8
 8007ccc:	619a      	str	r2, [r3, #24]
}
 8007cce:	bf00      	nop
 8007cd0:	3758      	adds	r7, #88	; 0x58
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b096      	sub	sp, #88	; 0x58
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ce4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	2b22      	cmp	r3, #34	; 0x22
 8007cf0:	f040 8095 	bne.w	8007e1e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d18:	1c9a      	adds	r2, r3, #2
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d178      	bne.n	8007e2e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d12e      	bne.n	8007e16 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f023 0310 	bic.w	r3, r3, #16
 8007dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6979      	ldr	r1, [r7, #20]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b10      	cmp	r3, #16
 8007dfc:	d103      	bne.n	8007e06 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2210      	movs	r2, #16
 8007e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe fe80 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e14:	e00b      	b.n	8007e2e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fa fdbe 	bl	8002998 <HAL_UART_RxCpltCallback>
}
 8007e1c:	e007      	b.n	8007e2e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0208 	orr.w	r2, r2, #8
 8007e2c:	619a      	str	r2, [r3, #24]
}
 8007e2e:	bf00      	nop
 8007e30:	3758      	adds	r7, #88	; 0x58
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b0a6      	sub	sp, #152	; 0x98
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e46:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6e:	2b22      	cmp	r3, #34	; 0x22
 8007e70:	f040 814f 	bne.w	8008112 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e7a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e7e:	e0f6      	b.n	800806e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e8a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007e8e:	b2d9      	uxtb	r1, r3
 8007e90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	400a      	ands	r2, r1
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d053      	beq.n	8007f7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f043 0201 	orr.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f28:	f043 0204 	orr.w	r2, r3, #4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d011      	beq.n	8007f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f58:	f043 0202 	orr.w	r2, r3, #2
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7fe fdc7 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d173      	bne.n	800806e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007faa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e4      	bne.n	8007f86 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fe0:	657a      	str	r2, [r7, #84]	; 0x54
 8007fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e3      	bne.n	8007fbc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12e      	bne.n	8008068 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f023 0310 	bic.w	r3, r3, #16
 8008024:	67bb      	str	r3, [r7, #120]	; 0x78
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800802e:	643b      	str	r3, [r7, #64]	; 0x40
 8008030:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e6      	bne.n	8008010 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b10      	cmp	r3, #16
 800804e:	d103      	bne.n	8008058 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2210      	movs	r2, #16
 8008056:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fe fd57 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
 8008066:	e002      	b.n	800806e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7fa fc95 	bl	8002998 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800806e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008072:	2b00      	cmp	r3, #0
 8008074:	d006      	beq.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	f47f aefe 	bne.w	8007e80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800808a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800808e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008092:	2b00      	cmp	r3, #0
 8008094:	d045      	beq.n	8008122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800809c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d23e      	bcs.n	8008122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ba:	673b      	str	r3, [r7, #112]	; 0x70
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80080c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a14      	ldr	r2, [pc, #80]	; (800812c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80080dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f043 0320 	orr.w	r3, r3, #32
 80080f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6979      	ldr	r1, [r7, #20]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	613b      	str	r3, [r7, #16]
   return(result);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e6      	bne.n	80080de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008110:	e007      	b.n	8008122 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0208 	orr.w	r2, r2, #8
 8008120:	619a      	str	r2, [r3, #24]
}
 8008122:	bf00      	nop
 8008124:	3798      	adds	r7, #152	; 0x98
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	08007b77 	.word	0x08007b77

08008130 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b0a8      	sub	sp, #160	; 0xa0
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800813e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008166:	2b22      	cmp	r3, #34	; 0x22
 8008168:	f040 8153 	bne.w	8008412 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008172:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008176:	e0fa      	b.n	800836e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800818a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800818e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008192:	4013      	ands	r3, r2
 8008194:	b29a      	uxth	r2, r3
 8008196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800819a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a0:	1c9a      	adds	r2, r3, #2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d053      	beq.n	8008276 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d011      	beq.n	80081fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80081da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00b      	beq.n	80081fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2201      	movs	r2, #1
 80081ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f4:	f043 0201 	orr.w	r2, r3, #1
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d011      	beq.n	800822e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800820a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2202      	movs	r2, #2
 800821c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	f043 0204 	orr.w	r2, r3, #4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800822e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d011      	beq.n	800825e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800823a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00b      	beq.n	800825e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2204      	movs	r2, #4
 800824c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008254:	f043 0202 	orr.w	r2, r3, #2
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fe fc49 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d175      	bne.n	800836e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e4      	bne.n	8008282 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3308      	adds	r3, #8
 80082be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80082e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e1      	bne.n	80082b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d12e      	bne.n	8008368 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800832e:	647b      	str	r3, [r7, #68]	; 0x44
 8008330:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b10      	cmp	r3, #16
 800834e:	d103      	bne.n	8008358 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2210      	movs	r2, #16
 8008356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fe fbd7 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
 8008366:	e002      	b.n	800836e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fa fb15 	bl	8002998 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800836e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008372:	2b00      	cmp	r3, #0
 8008374:	d006      	beq.n	8008384 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	f47f aefa 	bne.w	8008178 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800838e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008392:	2b00      	cmp	r3, #0
 8008394:	d045      	beq.n	8008422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800839c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d23e      	bcs.n	8008422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	623b      	str	r3, [r7, #32]
   return(result);
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ba:	677b      	str	r3, [r7, #116]	; 0x74
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80083c4:	633a      	str	r2, [r7, #48]	; 0x30
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e5      	bne.n	80083a4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a14      	ldr	r2, [pc, #80]	; (800842c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80083dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f043 0320 	orr.w	r3, r3, #32
 80083f2:	673b      	str	r3, [r7, #112]	; 0x70
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	617b      	str	r3, [r7, #20]
   return(result);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008410:	e007      	b.n	8008422 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0208 	orr.w	r2, r2, #8
 8008420:	619a      	str	r2, [r3, #24]
}
 8008422:	bf00      	nop
 8008424:	37a0      	adds	r7, #160	; 0xa0
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	08007cd7 	.word	0x08007cd7

08008430 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800847a:	2b01      	cmp	r3, #1
 800847c:	d101      	bne.n	8008482 <HAL_UARTEx_DisableFifoMode+0x16>
 800847e:	2302      	movs	r3, #2
 8008480:	e027      	b.n	80084d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2224      	movs	r2, #36	; 0x24
 800848e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0201 	bic.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e02d      	b.n	8008552 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2224      	movs	r2, #36	; 0x24
 8008502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f850 	bl	80085d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800856e:	2302      	movs	r3, #2
 8008570:	e02d      	b.n	80085ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2224      	movs	r2, #36	; 0x24
 800857e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f812 	bl	80085d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d108      	bne.n	80085fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085f8:	e031      	b.n	800865e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085fa:	2308      	movs	r3, #8
 80085fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085fe:	2308      	movs	r3, #8
 8008600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	0e5b      	lsrs	r3, r3, #25
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	0f5b      	lsrs	r3, r3, #29
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	7b3a      	ldrb	r2, [r7, #12]
 8008626:	4911      	ldr	r1, [pc, #68]	; (800866c <UARTEx_SetNbDataToProcess+0x94>)
 8008628:	5c8a      	ldrb	r2, [r1, r2]
 800862a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800862e:	7b3a      	ldrb	r2, [r7, #12]
 8008630:	490f      	ldr	r1, [pc, #60]	; (8008670 <UARTEx_SetNbDataToProcess+0x98>)
 8008632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008634:	fb93 f3f2 	sdiv	r3, r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	7b7a      	ldrb	r2, [r7, #13]
 8008644:	4909      	ldr	r1, [pc, #36]	; (800866c <UARTEx_SetNbDataToProcess+0x94>)
 8008646:	5c8a      	ldrb	r2, [r1, r2]
 8008648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800864c:	7b7a      	ldrb	r2, [r7, #13]
 800864e:	4908      	ldr	r1, [pc, #32]	; (8008670 <UARTEx_SetNbDataToProcess+0x98>)
 8008650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008652:	fb93 f3f2 	sdiv	r3, r3, r2
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	0800e044 	.word	0x0800e044
 8008670:	0800e04c 	.word	0x0800e04c

08008674 <nanf>:
 8008674:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800867c <nanf+0x8>
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	7fc00000 	.word	0x7fc00000

08008680 <abort>:
 8008680:	b508      	push	{r3, lr}
 8008682:	2006      	movs	r0, #6
 8008684:	f001 fbe6 	bl	8009e54 <raise>
 8008688:	2001      	movs	r0, #1
 800868a:	f7fb f880 	bl	800378e <_exit>
	...

08008690 <__errno>:
 8008690:	4b01      	ldr	r3, [pc, #4]	; (8008698 <__errno+0x8>)
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	2000002c 	.word	0x2000002c

0800869c <__sflush_r>:
 800869c:	898a      	ldrh	r2, [r1, #12]
 800869e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a2:	4605      	mov	r5, r0
 80086a4:	0710      	lsls	r0, r2, #28
 80086a6:	460c      	mov	r4, r1
 80086a8:	d458      	bmi.n	800875c <__sflush_r+0xc0>
 80086aa:	684b      	ldr	r3, [r1, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dc05      	bgt.n	80086bc <__sflush_r+0x20>
 80086b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dc02      	bgt.n	80086bc <__sflush_r+0x20>
 80086b6:	2000      	movs	r0, #0
 80086b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086be:	2e00      	cmp	r6, #0
 80086c0:	d0f9      	beq.n	80086b6 <__sflush_r+0x1a>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086c8:	682f      	ldr	r7, [r5, #0]
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	d032      	beq.n	8008734 <__sflush_r+0x98>
 80086ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	075a      	lsls	r2, r3, #29
 80086d4:	d505      	bpl.n	80086e2 <__sflush_r+0x46>
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	1ac0      	subs	r0, r0, r3
 80086da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086dc:	b10b      	cbz	r3, 80086e2 <__sflush_r+0x46>
 80086de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086e0:	1ac0      	subs	r0, r0, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	4602      	mov	r2, r0
 80086e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e8:	6a21      	ldr	r1, [r4, #32]
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b0      	blx	r6
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	d106      	bne.n	8008702 <__sflush_r+0x66>
 80086f4:	6829      	ldr	r1, [r5, #0]
 80086f6:	291d      	cmp	r1, #29
 80086f8:	d82c      	bhi.n	8008754 <__sflush_r+0xb8>
 80086fa:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <__sflush_r+0x108>)
 80086fc:	40ca      	lsrs	r2, r1
 80086fe:	07d6      	lsls	r6, r2, #31
 8008700:	d528      	bpl.n	8008754 <__sflush_r+0xb8>
 8008702:	2200      	movs	r2, #0
 8008704:	6062      	str	r2, [r4, #4]
 8008706:	04d9      	lsls	r1, r3, #19
 8008708:	6922      	ldr	r2, [r4, #16]
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	d504      	bpl.n	8008718 <__sflush_r+0x7c>
 800870e:	1c42      	adds	r2, r0, #1
 8008710:	d101      	bne.n	8008716 <__sflush_r+0x7a>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	b903      	cbnz	r3, 8008718 <__sflush_r+0x7c>
 8008716:	6560      	str	r0, [r4, #84]	; 0x54
 8008718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800871a:	602f      	str	r7, [r5, #0]
 800871c:	2900      	cmp	r1, #0
 800871e:	d0ca      	beq.n	80086b6 <__sflush_r+0x1a>
 8008720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008724:	4299      	cmp	r1, r3
 8008726:	d002      	beq.n	800872e <__sflush_r+0x92>
 8008728:	4628      	mov	r0, r5
 800872a:	f000 fa03 	bl	8008b34 <_free_r>
 800872e:	2000      	movs	r0, #0
 8008730:	6360      	str	r0, [r4, #52]	; 0x34
 8008732:	e7c1      	b.n	80086b8 <__sflush_r+0x1c>
 8008734:	6a21      	ldr	r1, [r4, #32]
 8008736:	2301      	movs	r3, #1
 8008738:	4628      	mov	r0, r5
 800873a:	47b0      	blx	r6
 800873c:	1c41      	adds	r1, r0, #1
 800873e:	d1c7      	bne.n	80086d0 <__sflush_r+0x34>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0c4      	beq.n	80086d0 <__sflush_r+0x34>
 8008746:	2b1d      	cmp	r3, #29
 8008748:	d001      	beq.n	800874e <__sflush_r+0xb2>
 800874a:	2b16      	cmp	r3, #22
 800874c:	d101      	bne.n	8008752 <__sflush_r+0xb6>
 800874e:	602f      	str	r7, [r5, #0]
 8008750:	e7b1      	b.n	80086b6 <__sflush_r+0x1a>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	e7ad      	b.n	80086b8 <__sflush_r+0x1c>
 800875c:	690f      	ldr	r7, [r1, #16]
 800875e:	2f00      	cmp	r7, #0
 8008760:	d0a9      	beq.n	80086b6 <__sflush_r+0x1a>
 8008762:	0793      	lsls	r3, r2, #30
 8008764:	680e      	ldr	r6, [r1, #0]
 8008766:	bf08      	it	eq
 8008768:	694b      	ldreq	r3, [r1, #20]
 800876a:	600f      	str	r7, [r1, #0]
 800876c:	bf18      	it	ne
 800876e:	2300      	movne	r3, #0
 8008770:	eba6 0807 	sub.w	r8, r6, r7
 8008774:	608b      	str	r3, [r1, #8]
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	dd9c      	ble.n	80086b6 <__sflush_r+0x1a>
 800877c:	6a21      	ldr	r1, [r4, #32]
 800877e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008780:	4643      	mov	r3, r8
 8008782:	463a      	mov	r2, r7
 8008784:	4628      	mov	r0, r5
 8008786:	47b0      	blx	r6
 8008788:	2800      	cmp	r0, #0
 800878a:	dc06      	bgt.n	800879a <__sflush_r+0xfe>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008798:	e78e      	b.n	80086b8 <__sflush_r+0x1c>
 800879a:	4407      	add	r7, r0
 800879c:	eba8 0800 	sub.w	r8, r8, r0
 80087a0:	e7e9      	b.n	8008776 <__sflush_r+0xda>
 80087a2:	bf00      	nop
 80087a4:	20400001 	.word	0x20400001

080087a8 <_fflush_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	690b      	ldr	r3, [r1, #16]
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b913      	cbnz	r3, 80087b8 <_fflush_r+0x10>
 80087b2:	2500      	movs	r5, #0
 80087b4:	4628      	mov	r0, r5
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	b118      	cbz	r0, 80087c2 <_fflush_r+0x1a>
 80087ba:	6983      	ldr	r3, [r0, #24]
 80087bc:	b90b      	cbnz	r3, 80087c2 <_fflush_r+0x1a>
 80087be:	f000 f899 	bl	80088f4 <__sinit>
 80087c2:	4b14      	ldr	r3, [pc, #80]	; (8008814 <_fflush_r+0x6c>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d11b      	bne.n	8008800 <_fflush_r+0x58>
 80087c8:	686c      	ldr	r4, [r5, #4]
 80087ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0ef      	beq.n	80087b2 <_fflush_r+0xa>
 80087d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087d4:	07d0      	lsls	r0, r2, #31
 80087d6:	d404      	bmi.n	80087e2 <_fflush_r+0x3a>
 80087d8:	0599      	lsls	r1, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_fflush_r+0x3a>
 80087dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087de:	f000 f95e 	bl	8008a9e <__retarget_lock_acquire_recursive>
 80087e2:	4628      	mov	r0, r5
 80087e4:	4621      	mov	r1, r4
 80087e6:	f7ff ff59 	bl	800869c <__sflush_r>
 80087ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087ec:	07da      	lsls	r2, r3, #31
 80087ee:	4605      	mov	r5, r0
 80087f0:	d4e0      	bmi.n	80087b4 <_fflush_r+0xc>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	059b      	lsls	r3, r3, #22
 80087f6:	d4dd      	bmi.n	80087b4 <_fflush_r+0xc>
 80087f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087fa:	f000 f951 	bl	8008aa0 <__retarget_lock_release_recursive>
 80087fe:	e7d9      	b.n	80087b4 <_fflush_r+0xc>
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <_fflush_r+0x70>)
 8008802:	429c      	cmp	r4, r3
 8008804:	d101      	bne.n	800880a <_fflush_r+0x62>
 8008806:	68ac      	ldr	r4, [r5, #8]
 8008808:	e7df      	b.n	80087ca <_fflush_r+0x22>
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <_fflush_r+0x74>)
 800880c:	429c      	cmp	r4, r3
 800880e:	bf08      	it	eq
 8008810:	68ec      	ldreq	r4, [r5, #12]
 8008812:	e7da      	b.n	80087ca <_fflush_r+0x22>
 8008814:	0800e074 	.word	0x0800e074
 8008818:	0800e094 	.word	0x0800e094
 800881c:	0800e054 	.word	0x0800e054

08008820 <fflush>:
 8008820:	4601      	mov	r1, r0
 8008822:	b920      	cbnz	r0, 800882e <fflush+0xe>
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <fflush+0x18>)
 8008826:	4905      	ldr	r1, [pc, #20]	; (800883c <fflush+0x1c>)
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f000 b8f3 	b.w	8008a14 <_fwalk_reent>
 800882e:	4b04      	ldr	r3, [pc, #16]	; (8008840 <fflush+0x20>)
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f7ff bfb9 	b.w	80087a8 <_fflush_r>
 8008836:	bf00      	nop
 8008838:	0800e0b4 	.word	0x0800e0b4
 800883c:	080087a9 	.word	0x080087a9
 8008840:	2000002c 	.word	0x2000002c

08008844 <std>:
 8008844:	2300      	movs	r3, #0
 8008846:	b510      	push	{r4, lr}
 8008848:	4604      	mov	r4, r0
 800884a:	e9c0 3300 	strd	r3, r3, [r0]
 800884e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008852:	6083      	str	r3, [r0, #8]
 8008854:	8181      	strh	r1, [r0, #12]
 8008856:	6643      	str	r3, [r0, #100]	; 0x64
 8008858:	81c2      	strh	r2, [r0, #14]
 800885a:	6183      	str	r3, [r0, #24]
 800885c:	4619      	mov	r1, r3
 800885e:	2208      	movs	r2, #8
 8008860:	305c      	adds	r0, #92	; 0x5c
 8008862:	f000 f95f 	bl	8008b24 <memset>
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <std+0x38>)
 8008868:	6263      	str	r3, [r4, #36]	; 0x24
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x3c>)
 800886c:	62a3      	str	r3, [r4, #40]	; 0x28
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x40>)
 8008870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x44>)
 8008874:	6224      	str	r4, [r4, #32]
 8008876:	6323      	str	r3, [r4, #48]	; 0x30
 8008878:	bd10      	pop	{r4, pc}
 800887a:	bf00      	nop
 800887c:	08009ecd 	.word	0x08009ecd
 8008880:	08009eef 	.word	0x08009eef
 8008884:	08009f27 	.word	0x08009f27
 8008888:	08009f4b 	.word	0x08009f4b

0800888c <_cleanup_r>:
 800888c:	4901      	ldr	r1, [pc, #4]	; (8008894 <_cleanup_r+0x8>)
 800888e:	f000 b8c1 	b.w	8008a14 <_fwalk_reent>
 8008892:	bf00      	nop
 8008894:	080087a9 	.word	0x080087a9

08008898 <__sfmoreglue>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	2268      	movs	r2, #104	; 0x68
 800889c:	1e4d      	subs	r5, r1, #1
 800889e:	4355      	muls	r5, r2
 80088a0:	460e      	mov	r6, r1
 80088a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088a6:	f000 f9b1 	bl	8008c0c <_malloc_r>
 80088aa:	4604      	mov	r4, r0
 80088ac:	b140      	cbz	r0, 80088c0 <__sfmoreglue+0x28>
 80088ae:	2100      	movs	r1, #0
 80088b0:	e9c0 1600 	strd	r1, r6, [r0]
 80088b4:	300c      	adds	r0, #12
 80088b6:	60a0      	str	r0, [r4, #8]
 80088b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088bc:	f000 f932 	bl	8008b24 <memset>
 80088c0:	4620      	mov	r0, r4
 80088c2:	bd70      	pop	{r4, r5, r6, pc}

080088c4 <__sfp_lock_acquire>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__sfp_lock_acquire+0x8>)
 80088c6:	f000 b8ea 	b.w	8008a9e <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	20000891 	.word	0x20000891

080088d0 <__sfp_lock_release>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__sfp_lock_release+0x8>)
 80088d2:	f000 b8e5 	b.w	8008aa0 <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000891 	.word	0x20000891

080088dc <__sinit_lock_acquire>:
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <__sinit_lock_acquire+0x8>)
 80088de:	f000 b8de 	b.w	8008a9e <__retarget_lock_acquire_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000892 	.word	0x20000892

080088e8 <__sinit_lock_release>:
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <__sinit_lock_release+0x8>)
 80088ea:	f000 b8d9 	b.w	8008aa0 <__retarget_lock_release_recursive>
 80088ee:	bf00      	nop
 80088f0:	20000892 	.word	0x20000892

080088f4 <__sinit>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4604      	mov	r4, r0
 80088f8:	f7ff fff0 	bl	80088dc <__sinit_lock_acquire>
 80088fc:	69a3      	ldr	r3, [r4, #24]
 80088fe:	b11b      	cbz	r3, 8008908 <__sinit+0x14>
 8008900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008904:	f7ff bff0 	b.w	80088e8 <__sinit_lock_release>
 8008908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800890c:	6523      	str	r3, [r4, #80]	; 0x50
 800890e:	4b13      	ldr	r3, [pc, #76]	; (800895c <__sinit+0x68>)
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <__sinit+0x6c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	62a2      	str	r2, [r4, #40]	; 0x28
 8008916:	42a3      	cmp	r3, r4
 8008918:	bf04      	itt	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	61a3      	streq	r3, [r4, #24]
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f820 	bl	8008964 <__sfp>
 8008924:	6060      	str	r0, [r4, #4]
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f81c 	bl	8008964 <__sfp>
 800892c:	60a0      	str	r0, [r4, #8]
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f818 	bl	8008964 <__sfp>
 8008934:	2200      	movs	r2, #0
 8008936:	60e0      	str	r0, [r4, #12]
 8008938:	2104      	movs	r1, #4
 800893a:	6860      	ldr	r0, [r4, #4]
 800893c:	f7ff ff82 	bl	8008844 <std>
 8008940:	68a0      	ldr	r0, [r4, #8]
 8008942:	2201      	movs	r2, #1
 8008944:	2109      	movs	r1, #9
 8008946:	f7ff ff7d 	bl	8008844 <std>
 800894a:	68e0      	ldr	r0, [r4, #12]
 800894c:	2202      	movs	r2, #2
 800894e:	2112      	movs	r1, #18
 8008950:	f7ff ff78 	bl	8008844 <std>
 8008954:	2301      	movs	r3, #1
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	e7d2      	b.n	8008900 <__sinit+0xc>
 800895a:	bf00      	nop
 800895c:	0800e0b4 	.word	0x0800e0b4
 8008960:	0800888d 	.word	0x0800888d

08008964 <__sfp>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	4607      	mov	r7, r0
 8008968:	f7ff ffac 	bl	80088c4 <__sfp_lock_acquire>
 800896c:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <__sfp+0x84>)
 800896e:	681e      	ldr	r6, [r3, #0]
 8008970:	69b3      	ldr	r3, [r6, #24]
 8008972:	b913      	cbnz	r3, 800897a <__sfp+0x16>
 8008974:	4630      	mov	r0, r6
 8008976:	f7ff ffbd 	bl	80088f4 <__sinit>
 800897a:	3648      	adds	r6, #72	; 0x48
 800897c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008980:	3b01      	subs	r3, #1
 8008982:	d503      	bpl.n	800898c <__sfp+0x28>
 8008984:	6833      	ldr	r3, [r6, #0]
 8008986:	b30b      	cbz	r3, 80089cc <__sfp+0x68>
 8008988:	6836      	ldr	r6, [r6, #0]
 800898a:	e7f7      	b.n	800897c <__sfp+0x18>
 800898c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008990:	b9d5      	cbnz	r5, 80089c8 <__sfp+0x64>
 8008992:	4b16      	ldr	r3, [pc, #88]	; (80089ec <__sfp+0x88>)
 8008994:	60e3      	str	r3, [r4, #12]
 8008996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800899a:	6665      	str	r5, [r4, #100]	; 0x64
 800899c:	f000 f87e 	bl	8008a9c <__retarget_lock_init_recursive>
 80089a0:	f7ff ff96 	bl	80088d0 <__sfp_lock_release>
 80089a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089ac:	6025      	str	r5, [r4, #0]
 80089ae:	61a5      	str	r5, [r4, #24]
 80089b0:	2208      	movs	r2, #8
 80089b2:	4629      	mov	r1, r5
 80089b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089b8:	f000 f8b4 	bl	8008b24 <memset>
 80089bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089c4:	4620      	mov	r0, r4
 80089c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c8:	3468      	adds	r4, #104	; 0x68
 80089ca:	e7d9      	b.n	8008980 <__sfp+0x1c>
 80089cc:	2104      	movs	r1, #4
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7ff ff62 	bl	8008898 <__sfmoreglue>
 80089d4:	4604      	mov	r4, r0
 80089d6:	6030      	str	r0, [r6, #0]
 80089d8:	2800      	cmp	r0, #0
 80089da:	d1d5      	bne.n	8008988 <__sfp+0x24>
 80089dc:	f7ff ff78 	bl	80088d0 <__sfp_lock_release>
 80089e0:	230c      	movs	r3, #12
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	e7ee      	b.n	80089c4 <__sfp+0x60>
 80089e6:	bf00      	nop
 80089e8:	0800e0b4 	.word	0x0800e0b4
 80089ec:	ffff0001 	.word	0xffff0001

080089f0 <fiprintf>:
 80089f0:	b40e      	push	{r1, r2, r3}
 80089f2:	b503      	push	{r0, r1, lr}
 80089f4:	4601      	mov	r1, r0
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <fiprintf+0x20>)
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	f000 f9a1 	bl	8008d48 <_vfiprintf_r>
 8008a06:	b002      	add	sp, #8
 8008a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a0c:	b003      	add	sp, #12
 8008a0e:	4770      	bx	lr
 8008a10:	2000002c 	.word	0x2000002c

08008a14 <_fwalk_reent>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	4606      	mov	r6, r0
 8008a1a:	4688      	mov	r8, r1
 8008a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a20:	2700      	movs	r7, #0
 8008a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a26:	f1b9 0901 	subs.w	r9, r9, #1
 8008a2a:	d505      	bpl.n	8008a38 <_fwalk_reent+0x24>
 8008a2c:	6824      	ldr	r4, [r4, #0]
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d1f7      	bne.n	8008a22 <_fwalk_reent+0xe>
 8008a32:	4638      	mov	r0, r7
 8008a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a38:	89ab      	ldrh	r3, [r5, #12]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d907      	bls.n	8008a4e <_fwalk_reent+0x3a>
 8008a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a42:	3301      	adds	r3, #1
 8008a44:	d003      	beq.n	8008a4e <_fwalk_reent+0x3a>
 8008a46:	4629      	mov	r1, r5
 8008a48:	4630      	mov	r0, r6
 8008a4a:	47c0      	blx	r8
 8008a4c:	4307      	orrs	r7, r0
 8008a4e:	3568      	adds	r5, #104	; 0x68
 8008a50:	e7e9      	b.n	8008a26 <_fwalk_reent+0x12>
	...

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4d0d      	ldr	r5, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2600      	movs	r6, #0
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4d0b      	ldr	r5, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f004 fc2e 	bl	800d2c8 <_init>
 8008a6c:	1b64      	subs	r4, r4, r5
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2600      	movs	r6, #0
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7c:	4798      	blx	r3
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a86:	4798      	blx	r3
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	0800e55c 	.word	0x0800e55c
 8008a90:	0800e55c 	.word	0x0800e55c
 8008a94:	0800e55c 	.word	0x0800e55c
 8008a98:	0800e560 	.word	0x0800e560

08008a9c <__retarget_lock_init_recursive>:
 8008a9c:	4770      	bx	lr

08008a9e <__retarget_lock_acquire_recursive>:
 8008a9e:	4770      	bx	lr

08008aa0 <__retarget_lock_release_recursive>:
 8008aa0:	4770      	bx	lr
	...

08008aa4 <malloc>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <malloc+0xc>)
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f000 b8af 	b.w	8008c0c <_malloc_r>
 8008aae:	bf00      	nop
 8008ab0:	2000002c 	.word	0x2000002c

08008ab4 <memcmp>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	3901      	subs	r1, #1
 8008ab8:	4402      	add	r2, r0
 8008aba:	4290      	cmp	r0, r2
 8008abc:	d101      	bne.n	8008ac2 <memcmp+0xe>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e005      	b.n	8008ace <memcmp+0x1a>
 8008ac2:	7803      	ldrb	r3, [r0, #0]
 8008ac4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d001      	beq.n	8008ad0 <memcmp+0x1c>
 8008acc:	1b18      	subs	r0, r3, r4
 8008ace:	bd10      	pop	{r4, pc}
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	e7f2      	b.n	8008aba <memcmp+0x6>

08008ad4 <memcpy>:
 8008ad4:	440a      	add	r2, r1
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008adc:	d100      	bne.n	8008ae0 <memcpy+0xc>
 8008ade:	4770      	bx	lr
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aea:	4291      	cmp	r1, r2
 8008aec:	d1f9      	bne.n	8008ae2 <memcpy+0xe>
 8008aee:	bd10      	pop	{r4, pc}

08008af0 <memmove>:
 8008af0:	4288      	cmp	r0, r1
 8008af2:	b510      	push	{r4, lr}
 8008af4:	eb01 0402 	add.w	r4, r1, r2
 8008af8:	d902      	bls.n	8008b00 <memmove+0x10>
 8008afa:	4284      	cmp	r4, r0
 8008afc:	4623      	mov	r3, r4
 8008afe:	d807      	bhi.n	8008b10 <memmove+0x20>
 8008b00:	1e43      	subs	r3, r0, #1
 8008b02:	42a1      	cmp	r1, r4
 8008b04:	d008      	beq.n	8008b18 <memmove+0x28>
 8008b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b0e:	e7f8      	b.n	8008b02 <memmove+0x12>
 8008b10:	4402      	add	r2, r0
 8008b12:	4601      	mov	r1, r0
 8008b14:	428a      	cmp	r2, r1
 8008b16:	d100      	bne.n	8008b1a <memmove+0x2a>
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b22:	e7f7      	b.n	8008b14 <memmove+0x24>

08008b24 <memset>:
 8008b24:	4402      	add	r2, r0
 8008b26:	4603      	mov	r3, r0
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d100      	bne.n	8008b2e <memset+0xa>
 8008b2c:	4770      	bx	lr
 8008b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b32:	e7f9      	b.n	8008b28 <memset+0x4>

08008b34 <_free_r>:
 8008b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d044      	beq.n	8008bc4 <_free_r+0x90>
 8008b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3e:	9001      	str	r0, [sp, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f1a1 0404 	sub.w	r4, r1, #4
 8008b46:	bfb8      	it	lt
 8008b48:	18e4      	addlt	r4, r4, r3
 8008b4a:	f003 fca1 	bl	800c490 <__malloc_lock>
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x30>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b60:	f003 bc9c 	b.w	800c49c <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x46>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x22>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x50>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x46>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1855      	adds	r5, r2, r1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x70>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	4421      	add	r1, r4
 8008b90:	1854      	adds	r4, r2, r1
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x26>
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4421      	add	r1, r4
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x26>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x78>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x26>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1949      	addeq	r1, r1, r5
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x26>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	20000894 	.word	0x20000894

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f001 f904 	bl	8009de4 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f001 f8ff 	bl	8009de4 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f001 f8f4 	bl	8009de4 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	20000898 	.word	0x20000898

08008c0c <_malloc_r>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	4e2e      	ldr	r6, [pc, #184]	; (8008cf0 <_malloc_r+0xe4>)
 8008c36:	f003 fc2b 	bl	800c490 <__malloc_lock>
 8008c3a:	6833      	ldr	r3, [r6, #0]
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	bb34      	cbnz	r4, 8008c8e <_malloc_r+0x82>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ffc2 	bl	8008bcc <sbrk_aligned>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d14d      	bne.n	8008cea <_malloc_r+0xde>
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	4626      	mov	r6, r4
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d140      	bne.n	8008cd8 <_malloc_r+0xcc>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	eb04 0803 	add.w	r8, r4, r3
 8008c60:	f001 f8c0 	bl	8009de4 <_sbrk_r>
 8008c64:	4580      	cmp	r8, r0
 8008c66:	d13a      	bne.n	8008cde <_malloc_r+0xd2>
 8008c68:	6821      	ldr	r1, [r4, #0]
 8008c6a:	3503      	adds	r5, #3
 8008c6c:	1a6d      	subs	r5, r5, r1
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <sbrk_aligned>
 8008c82:	3001      	adds	r0, #1
 8008c84:	d02b      	beq.n	8008cde <_malloc_r+0xd2>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	442b      	add	r3, r5
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	e00e      	b.n	8008cac <_malloc_r+0xa0>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	d41e      	bmi.n	8008cd2 <_malloc_r+0xc6>
 8008c94:	2a0b      	cmp	r2, #11
 8008c96:	d916      	bls.n	8008cc6 <_malloc_r+0xba>
 8008c98:	1961      	adds	r1, r4, r5
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6025      	str	r5, [r4, #0]
 8008c9e:	bf18      	it	ne
 8008ca0:	6059      	strne	r1, [r3, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	bf08      	it	eq
 8008ca6:	6031      	streq	r1, [r6, #0]
 8008ca8:	5162      	str	r2, [r4, r5]
 8008caa:	604b      	str	r3, [r1, #4]
 8008cac:	4638      	mov	r0, r7
 8008cae:	f104 060b 	add.w	r6, r4, #11
 8008cb2:	f003 fbf3 	bl	800c49c <__malloc_unlock>
 8008cb6:	f026 0607 	bic.w	r6, r6, #7
 8008cba:	1d23      	adds	r3, r4, #4
 8008cbc:	1af2      	subs	r2, r6, r3
 8008cbe:	d0b6      	beq.n	8008c2e <_malloc_r+0x22>
 8008cc0:	1b9b      	subs	r3, r3, r6
 8008cc2:	50a3      	str	r3, [r4, r2]
 8008cc4:	e7b3      	b.n	8008c2e <_malloc_r+0x22>
 8008cc6:	6862      	ldr	r2, [r4, #4]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	bf0c      	ite	eq
 8008ccc:	6032      	streq	r2, [r6, #0]
 8008cce:	605a      	strne	r2, [r3, #4]
 8008cd0:	e7ec      	b.n	8008cac <_malloc_r+0xa0>
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	6864      	ldr	r4, [r4, #4]
 8008cd6:	e7b2      	b.n	8008c3e <_malloc_r+0x32>
 8008cd8:	4634      	mov	r4, r6
 8008cda:	6876      	ldr	r6, [r6, #4]
 8008cdc:	e7b9      	b.n	8008c52 <_malloc_r+0x46>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f003 fbda 	bl	800c49c <__malloc_unlock>
 8008ce8:	e7a1      	b.n	8008c2e <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7de      	b.n	8008cac <_malloc_r+0xa0>
 8008cee:	bf00      	nop
 8008cf0:	20000894 	.word	0x20000894

08008cf4 <__sfputc_r>:
 8008cf4:	6893      	ldr	r3, [r2, #8]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	b410      	push	{r4}
 8008cfc:	6093      	str	r3, [r2, #8]
 8008cfe:	da08      	bge.n	8008d12 <__sfputc_r+0x1e>
 8008d00:	6994      	ldr	r4, [r2, #24]
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	db01      	blt.n	8008d0a <__sfputc_r+0x16>
 8008d06:	290a      	cmp	r1, #10
 8008d08:	d103      	bne.n	8008d12 <__sfputc_r+0x1e>
 8008d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0e:	f002 b847 	b.w	800ada0 <__swbuf_r>
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	1c58      	adds	r0, r3, #1
 8008d16:	6010      	str	r0, [r2, #0]
 8008d18:	7019      	strb	r1, [r3, #0]
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <__sfputs_r>:
 8008d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d24:	4606      	mov	r6, r0
 8008d26:	460f      	mov	r7, r1
 8008d28:	4614      	mov	r4, r2
 8008d2a:	18d5      	adds	r5, r2, r3
 8008d2c:	42ac      	cmp	r4, r5
 8008d2e:	d101      	bne.n	8008d34 <__sfputs_r+0x12>
 8008d30:	2000      	movs	r0, #0
 8008d32:	e007      	b.n	8008d44 <__sfputs_r+0x22>
 8008d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d38:	463a      	mov	r2, r7
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff ffda 	bl	8008cf4 <__sfputc_r>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d1f3      	bne.n	8008d2c <__sfputs_r+0xa>
 8008d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d48 <_vfiprintf_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	b09d      	sub	sp, #116	; 0x74
 8008d50:	4614      	mov	r4, r2
 8008d52:	4698      	mov	r8, r3
 8008d54:	4606      	mov	r6, r0
 8008d56:	b118      	cbz	r0, 8008d60 <_vfiprintf_r+0x18>
 8008d58:	6983      	ldr	r3, [r0, #24]
 8008d5a:	b90b      	cbnz	r3, 8008d60 <_vfiprintf_r+0x18>
 8008d5c:	f7ff fdca 	bl	80088f4 <__sinit>
 8008d60:	4b89      	ldr	r3, [pc, #548]	; (8008f88 <_vfiprintf_r+0x240>)
 8008d62:	429d      	cmp	r5, r3
 8008d64:	d11b      	bne.n	8008d9e <_vfiprintf_r+0x56>
 8008d66:	6875      	ldr	r5, [r6, #4]
 8008d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_vfiprintf_r+0x32>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_vfiprintf_r+0x32>
 8008d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d76:	f7ff fe92 	bl	8008a9e <__retarget_lock_acquire_recursive>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	071b      	lsls	r3, r3, #28
 8008d7e:	d501      	bpl.n	8008d84 <_vfiprintf_r+0x3c>
 8008d80:	692b      	ldr	r3, [r5, #16]
 8008d82:	b9eb      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x78>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4630      	mov	r0, r6
 8008d88:	f002 f86e 	bl	800ae68 <__swsetup_r>
 8008d8c:	b1c0      	cbz	r0, 8008dc0 <_vfiprintf_r+0x78>
 8008d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d90:	07dc      	lsls	r4, r3, #31
 8008d92:	d50e      	bpl.n	8008db2 <_vfiprintf_r+0x6a>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d98:	b01d      	add	sp, #116	; 0x74
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	4b7b      	ldr	r3, [pc, #492]	; (8008f8c <_vfiprintf_r+0x244>)
 8008da0:	429d      	cmp	r5, r3
 8008da2:	d101      	bne.n	8008da8 <_vfiprintf_r+0x60>
 8008da4:	68b5      	ldr	r5, [r6, #8]
 8008da6:	e7df      	b.n	8008d68 <_vfiprintf_r+0x20>
 8008da8:	4b79      	ldr	r3, [pc, #484]	; (8008f90 <_vfiprintf_r+0x248>)
 8008daa:	429d      	cmp	r5, r3
 8008dac:	bf08      	it	eq
 8008dae:	68f5      	ldreq	r5, [r6, #12]
 8008db0:	e7da      	b.n	8008d68 <_vfiprintf_r+0x20>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	0598      	lsls	r0, r3, #22
 8008db6:	d4ed      	bmi.n	8008d94 <_vfiprintf_r+0x4c>
 8008db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dba:	f7ff fe71 	bl	8008aa0 <__retarget_lock_release_recursive>
 8008dbe:	e7e9      	b.n	8008d94 <_vfiprintf_r+0x4c>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dce:	2330      	movs	r3, #48	; 0x30
 8008dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f94 <_vfiprintf_r+0x24c>
 8008dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd8:	f04f 0901 	mov.w	r9, #1
 8008ddc:	4623      	mov	r3, r4
 8008dde:	469a      	mov	sl, r3
 8008de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de4:	b10a      	cbz	r2, 8008dea <_vfiprintf_r+0xa2>
 8008de6:	2a25      	cmp	r2, #37	; 0x25
 8008de8:	d1f9      	bne.n	8008dde <_vfiprintf_r+0x96>
 8008dea:	ebba 0b04 	subs.w	fp, sl, r4
 8008dee:	d00b      	beq.n	8008e08 <_vfiprintf_r+0xc0>
 8008df0:	465b      	mov	r3, fp
 8008df2:	4622      	mov	r2, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff93 	bl	8008d22 <__sfputs_r>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f000 80aa 	beq.w	8008f56 <_vfiprintf_r+0x20e>
 8008e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e04:	445a      	add	r2, fp
 8008e06:	9209      	str	r2, [sp, #36]	; 0x24
 8008e08:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80a2 	beq.w	8008f56 <_vfiprintf_r+0x20e>
 8008e12:	2300      	movs	r3, #0
 8008e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e1c:	f10a 0a01 	add.w	sl, sl, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e28:	931a      	str	r3, [sp, #104]	; 0x68
 8008e2a:	4654      	mov	r4, sl
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e32:	4858      	ldr	r0, [pc, #352]	; (8008f94 <_vfiprintf_r+0x24c>)
 8008e34:	f7f7 f9f4 	bl	8000220 <memchr>
 8008e38:	9a04      	ldr	r2, [sp, #16]
 8008e3a:	b9d8      	cbnz	r0, 8008e74 <_vfiprintf_r+0x12c>
 8008e3c:	06d1      	lsls	r1, r2, #27
 8008e3e:	bf44      	itt	mi
 8008e40:	2320      	movmi	r3, #32
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	0713      	lsls	r3, r2, #28
 8008e48:	bf44      	itt	mi
 8008e4a:	232b      	movmi	r3, #43	; 0x2b
 8008e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e50:	f89a 3000 	ldrb.w	r3, [sl]
 8008e54:	2b2a      	cmp	r3, #42	; 0x2a
 8008e56:	d015      	beq.n	8008e84 <_vfiprintf_r+0x13c>
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	4654      	mov	r4, sl
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f04f 0c0a 	mov.w	ip, #10
 8008e62:	4621      	mov	r1, r4
 8008e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e68:	3b30      	subs	r3, #48	; 0x30
 8008e6a:	2b09      	cmp	r3, #9
 8008e6c:	d94e      	bls.n	8008f0c <_vfiprintf_r+0x1c4>
 8008e6e:	b1b0      	cbz	r0, 8008e9e <_vfiprintf_r+0x156>
 8008e70:	9207      	str	r2, [sp, #28]
 8008e72:	e014      	b.n	8008e9e <_vfiprintf_r+0x156>
 8008e74:	eba0 0308 	sub.w	r3, r0, r8
 8008e78:	fa09 f303 	lsl.w	r3, r9, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	46a2      	mov	sl, r4
 8008e82:	e7d2      	b.n	8008e2a <_vfiprintf_r+0xe2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9103      	str	r1, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfbb      	ittet	lt
 8008e90:	425b      	neglt	r3, r3
 8008e92:	f042 0202 	orrlt.w	r2, r2, #2
 8008e96:	9307      	strge	r3, [sp, #28]
 8008e98:	9307      	strlt	r3, [sp, #28]
 8008e9a:	bfb8      	it	lt
 8008e9c:	9204      	strlt	r2, [sp, #16]
 8008e9e:	7823      	ldrb	r3, [r4, #0]
 8008ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea2:	d10c      	bne.n	8008ebe <_vfiprintf_r+0x176>
 8008ea4:	7863      	ldrb	r3, [r4, #1]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d135      	bne.n	8008f16 <_vfiprintf_r+0x1ce>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	9203      	str	r2, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfb8      	it	lt
 8008eb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008eba:	3402      	adds	r4, #2
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fa4 <_vfiprintf_r+0x25c>
 8008ec2:	7821      	ldrb	r1, [r4, #0]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	f7f7 f9aa 	bl	8000220 <memchr>
 8008ecc:	b140      	cbz	r0, 8008ee0 <_vfiprintf_r+0x198>
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	eba0 000a 	sub.w	r0, r0, sl
 8008ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	4303      	orrs	r3, r0
 8008edc:	3401      	adds	r4, #1
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee4:	482c      	ldr	r0, [pc, #176]	; (8008f98 <_vfiprintf_r+0x250>)
 8008ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eea:	2206      	movs	r2, #6
 8008eec:	f7f7 f998 	bl	8000220 <memchr>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d03f      	beq.n	8008f74 <_vfiprintf_r+0x22c>
 8008ef4:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <_vfiprintf_r+0x254>)
 8008ef6:	bb1b      	cbnz	r3, 8008f40 <_vfiprintf_r+0x1f8>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	3307      	adds	r3, #7
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f06:	443b      	add	r3, r7
 8008f08:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0a:	e767      	b.n	8008ddc <_vfiprintf_r+0x94>
 8008f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f10:	460c      	mov	r4, r1
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7a5      	b.n	8008e62 <_vfiprintf_r+0x11a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	3401      	adds	r4, #1
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4620      	mov	r0, r4
 8008f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f28:	3a30      	subs	r2, #48	; 0x30
 8008f2a:	2a09      	cmp	r2, #9
 8008f2c:	d903      	bls.n	8008f36 <_vfiprintf_r+0x1ee>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0c5      	beq.n	8008ebe <_vfiprintf_r+0x176>
 8008f32:	9105      	str	r1, [sp, #20]
 8008f34:	e7c3      	b.n	8008ebe <_vfiprintf_r+0x176>
 8008f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7f0      	b.n	8008f22 <_vfiprintf_r+0x1da>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <_vfiprintf_r+0x258>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 f8cc 	bl	80090e8 <_printf_float>
 8008f50:	4607      	mov	r7, r0
 8008f52:	1c78      	adds	r0, r7, #1
 8008f54:	d1d6      	bne.n	8008f04 <_vfiprintf_r+0x1bc>
 8008f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f58:	07d9      	lsls	r1, r3, #31
 8008f5a:	d405      	bmi.n	8008f68 <_vfiprintf_r+0x220>
 8008f5c:	89ab      	ldrh	r3, [r5, #12]
 8008f5e:	059a      	lsls	r2, r3, #22
 8008f60:	d402      	bmi.n	8008f68 <_vfiprintf_r+0x220>
 8008f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f64:	f7ff fd9c 	bl	8008aa0 <__retarget_lock_release_recursive>
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	065b      	lsls	r3, r3, #25
 8008f6c:	f53f af12 	bmi.w	8008d94 <_vfiprintf_r+0x4c>
 8008f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f72:	e711      	b.n	8008d98 <_vfiprintf_r+0x50>
 8008f74:	ab03      	add	r3, sp, #12
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <_vfiprintf_r+0x258>)
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 fb56 	bl	8009630 <_printf_i>
 8008f84:	e7e4      	b.n	8008f50 <_vfiprintf_r+0x208>
 8008f86:	bf00      	nop
 8008f88:	0800e074 	.word	0x0800e074
 8008f8c:	0800e094 	.word	0x0800e094
 8008f90:	0800e054 	.word	0x0800e054
 8008f94:	0800e0b8 	.word	0x0800e0b8
 8008f98:	0800e0c2 	.word	0x0800e0c2
 8008f9c:	080090e9 	.word	0x080090e9
 8008fa0:	08008d23 	.word	0x08008d23
 8008fa4:	0800e0be 	.word	0x0800e0be

08008fa8 <__cvt>:
 8008fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	ec55 4b10 	vmov	r4, r5, d0
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	460e      	mov	r6, r1
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	bfbb      	ittet	lt
 8008fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fbe:	461d      	movlt	r5, r3
 8008fc0:	2300      	movge	r3, #0
 8008fc2:	232d      	movlt	r3, #45	; 0x2d
 8008fc4:	700b      	strb	r3, [r1, #0]
 8008fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fcc:	4691      	mov	r9, r2
 8008fce:	f023 0820 	bic.w	r8, r3, #32
 8008fd2:	bfbc      	itt	lt
 8008fd4:	4622      	movlt	r2, r4
 8008fd6:	4614      	movlt	r4, r2
 8008fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fdc:	d005      	beq.n	8008fea <__cvt+0x42>
 8008fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fe2:	d100      	bne.n	8008fe6 <__cvt+0x3e>
 8008fe4:	3601      	adds	r6, #1
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	e000      	b.n	8008fec <__cvt+0x44>
 8008fea:	2103      	movs	r1, #3
 8008fec:	ab03      	add	r3, sp, #12
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	ab02      	add	r3, sp, #8
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	ec45 4b10 	vmov	d0, r4, r5
 8008ff8:	4653      	mov	r3, sl
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	f002 f85c 	bl	800b0b8 <_dtoa_r>
 8009000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009004:	4607      	mov	r7, r0
 8009006:	d102      	bne.n	800900e <__cvt+0x66>
 8009008:	f019 0f01 	tst.w	r9, #1
 800900c:	d022      	beq.n	8009054 <__cvt+0xac>
 800900e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009012:	eb07 0906 	add.w	r9, r7, r6
 8009016:	d110      	bne.n	800903a <__cvt+0x92>
 8009018:	783b      	ldrb	r3, [r7, #0]
 800901a:	2b30      	cmp	r3, #48	; 0x30
 800901c:	d10a      	bne.n	8009034 <__cvt+0x8c>
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 fd81 	bl	8000b2c <__aeabi_dcmpeq>
 800902a:	b918      	cbnz	r0, 8009034 <__cvt+0x8c>
 800902c:	f1c6 0601 	rsb	r6, r6, #1
 8009030:	f8ca 6000 	str.w	r6, [sl]
 8009034:	f8da 3000 	ldr.w	r3, [sl]
 8009038:	4499      	add	r9, r3
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 fd73 	bl	8000b2c <__aeabi_dcmpeq>
 8009046:	b108      	cbz	r0, 800904c <__cvt+0xa4>
 8009048:	f8cd 900c 	str.w	r9, [sp, #12]
 800904c:	2230      	movs	r2, #48	; 0x30
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	454b      	cmp	r3, r9
 8009052:	d307      	bcc.n	8009064 <__cvt+0xbc>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009058:	1bdb      	subs	r3, r3, r7
 800905a:	4638      	mov	r0, r7
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	b004      	add	sp, #16
 8009060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009064:	1c59      	adds	r1, r3, #1
 8009066:	9103      	str	r1, [sp, #12]
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e7f0      	b.n	800904e <__cvt+0xa6>

0800906c <__exponent>:
 800906c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906e:	4603      	mov	r3, r0
 8009070:	2900      	cmp	r1, #0
 8009072:	bfb8      	it	lt
 8009074:	4249      	neglt	r1, r1
 8009076:	f803 2b02 	strb.w	r2, [r3], #2
 800907a:	bfb4      	ite	lt
 800907c:	222d      	movlt	r2, #45	; 0x2d
 800907e:	222b      	movge	r2, #43	; 0x2b
 8009080:	2909      	cmp	r1, #9
 8009082:	7042      	strb	r2, [r0, #1]
 8009084:	dd2a      	ble.n	80090dc <__exponent+0x70>
 8009086:	f10d 0407 	add.w	r4, sp, #7
 800908a:	46a4      	mov	ip, r4
 800908c:	270a      	movs	r7, #10
 800908e:	46a6      	mov	lr, r4
 8009090:	460a      	mov	r2, r1
 8009092:	fb91 f6f7 	sdiv	r6, r1, r7
 8009096:	fb07 1516 	mls	r5, r7, r6, r1
 800909a:	3530      	adds	r5, #48	; 0x30
 800909c:	2a63      	cmp	r2, #99	; 0x63
 800909e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80090a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090a6:	4631      	mov	r1, r6
 80090a8:	dcf1      	bgt.n	800908e <__exponent+0x22>
 80090aa:	3130      	adds	r1, #48	; 0x30
 80090ac:	f1ae 0502 	sub.w	r5, lr, #2
 80090b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090b4:	1c44      	adds	r4, r0, #1
 80090b6:	4629      	mov	r1, r5
 80090b8:	4561      	cmp	r1, ip
 80090ba:	d30a      	bcc.n	80090d2 <__exponent+0x66>
 80090bc:	f10d 0209 	add.w	r2, sp, #9
 80090c0:	eba2 020e 	sub.w	r2, r2, lr
 80090c4:	4565      	cmp	r5, ip
 80090c6:	bf88      	it	hi
 80090c8:	2200      	movhi	r2, #0
 80090ca:	4413      	add	r3, r2
 80090cc:	1a18      	subs	r0, r3, r0
 80090ce:	b003      	add	sp, #12
 80090d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090da:	e7ed      	b.n	80090b8 <__exponent+0x4c>
 80090dc:	2330      	movs	r3, #48	; 0x30
 80090de:	3130      	adds	r1, #48	; 0x30
 80090e0:	7083      	strb	r3, [r0, #2]
 80090e2:	70c1      	strb	r1, [r0, #3]
 80090e4:	1d03      	adds	r3, r0, #4
 80090e6:	e7f1      	b.n	80090cc <__exponent+0x60>

080090e8 <_printf_float>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	ed2d 8b02 	vpush	{d8}
 80090f0:	b08d      	sub	sp, #52	; 0x34
 80090f2:	460c      	mov	r4, r1
 80090f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090f8:	4616      	mov	r6, r2
 80090fa:	461f      	mov	r7, r3
 80090fc:	4605      	mov	r5, r0
 80090fe:	f003 f939 	bl	800c374 <_localeconv_r>
 8009102:	f8d0 a000 	ldr.w	sl, [r0]
 8009106:	4650      	mov	r0, sl
 8009108:	f7f7 f8e4 	bl	80002d4 <strlen>
 800910c:	2300      	movs	r3, #0
 800910e:	930a      	str	r3, [sp, #40]	; 0x28
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	f8d8 3000 	ldr.w	r3, [r8]
 8009118:	f894 b018 	ldrb.w	fp, [r4, #24]
 800911c:	3307      	adds	r3, #7
 800911e:	f023 0307 	bic.w	r3, r3, #7
 8009122:	f103 0208 	add.w	r2, r3, #8
 8009126:	f8c8 2000 	str.w	r2, [r8]
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009140:	ee08 0a10 	vmov	s16, r0
 8009144:	4b9f      	ldr	r3, [pc, #636]	; (80093c4 <_printf_float+0x2dc>)
 8009146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800914a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800914e:	f7f7 fd1f 	bl	8000b90 <__aeabi_dcmpun>
 8009152:	bb88      	cbnz	r0, 80091b8 <_printf_float+0xd0>
 8009154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009158:	4b9a      	ldr	r3, [pc, #616]	; (80093c4 <_printf_float+0x2dc>)
 800915a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800915e:	f7f7 fcf9 	bl	8000b54 <__aeabi_dcmple>
 8009162:	bb48      	cbnz	r0, 80091b8 <_printf_float+0xd0>
 8009164:	2200      	movs	r2, #0
 8009166:	2300      	movs	r3, #0
 8009168:	4640      	mov	r0, r8
 800916a:	4649      	mov	r1, r9
 800916c:	f7f7 fce8 	bl	8000b40 <__aeabi_dcmplt>
 8009170:	b110      	cbz	r0, 8009178 <_printf_float+0x90>
 8009172:	232d      	movs	r3, #45	; 0x2d
 8009174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009178:	4b93      	ldr	r3, [pc, #588]	; (80093c8 <_printf_float+0x2e0>)
 800917a:	4894      	ldr	r0, [pc, #592]	; (80093cc <_printf_float+0x2e4>)
 800917c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009180:	bf94      	ite	ls
 8009182:	4698      	movls	r8, r3
 8009184:	4680      	movhi	r8, r0
 8009186:	2303      	movs	r3, #3
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	f023 0204 	bic.w	r2, r3, #4
 8009190:	6022      	str	r2, [r4, #0]
 8009192:	f04f 0900 	mov.w	r9, #0
 8009196:	9700      	str	r7, [sp, #0]
 8009198:	4633      	mov	r3, r6
 800919a:	aa0b      	add	r2, sp, #44	; 0x2c
 800919c:	4621      	mov	r1, r4
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 f9d8 	bl	8009554 <_printf_common>
 80091a4:	3001      	adds	r0, #1
 80091a6:	f040 8090 	bne.w	80092ca <_printf_float+0x1e2>
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ae:	b00d      	add	sp, #52	; 0x34
 80091b0:	ecbd 8b02 	vpop	{d8}
 80091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 fce6 	bl	8000b90 <__aeabi_dcmpun>
 80091c4:	b140      	cbz	r0, 80091d8 <_printf_float+0xf0>
 80091c6:	464b      	mov	r3, r9
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfbc      	itt	lt
 80091cc:	232d      	movlt	r3, #45	; 0x2d
 80091ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091d2:	487f      	ldr	r0, [pc, #508]	; (80093d0 <_printf_float+0x2e8>)
 80091d4:	4b7f      	ldr	r3, [pc, #508]	; (80093d4 <_printf_float+0x2ec>)
 80091d6:	e7d1      	b.n	800917c <_printf_float+0x94>
 80091d8:	6863      	ldr	r3, [r4, #4]
 80091da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091de:	9206      	str	r2, [sp, #24]
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	d13f      	bne.n	8009264 <_printf_float+0x17c>
 80091e4:	2306      	movs	r3, #6
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	6861      	ldr	r1, [r4, #4]
 80091ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091f0:	2300      	movs	r3, #0
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	ab0a      	add	r3, sp, #40	; 0x28
 80091f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091fa:	ab09      	add	r3, sp, #36	; 0x24
 80091fc:	ec49 8b10 	vmov	d0, r8, r9
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009208:	4628      	mov	r0, r5
 800920a:	f7ff fecd 	bl	8008fa8 <__cvt>
 800920e:	9b06      	ldr	r3, [sp, #24]
 8009210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009212:	2b47      	cmp	r3, #71	; 0x47
 8009214:	4680      	mov	r8, r0
 8009216:	d108      	bne.n	800922a <_printf_float+0x142>
 8009218:	1cc8      	adds	r0, r1, #3
 800921a:	db02      	blt.n	8009222 <_printf_float+0x13a>
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	4299      	cmp	r1, r3
 8009220:	dd41      	ble.n	80092a6 <_printf_float+0x1be>
 8009222:	f1ab 0b02 	sub.w	fp, fp, #2
 8009226:	fa5f fb8b 	uxtb.w	fp, fp
 800922a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800922e:	d820      	bhi.n	8009272 <_printf_float+0x18a>
 8009230:	3901      	subs	r1, #1
 8009232:	465a      	mov	r2, fp
 8009234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009238:	9109      	str	r1, [sp, #36]	; 0x24
 800923a:	f7ff ff17 	bl	800906c <__exponent>
 800923e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009240:	1813      	adds	r3, r2, r0
 8009242:	2a01      	cmp	r2, #1
 8009244:	4681      	mov	r9, r0
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	dc02      	bgt.n	8009250 <_printf_float+0x168>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	07d2      	lsls	r2, r2, #31
 800924e:	d501      	bpl.n	8009254 <_printf_float+0x16c>
 8009250:	3301      	adds	r3, #1
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009258:	2b00      	cmp	r3, #0
 800925a:	d09c      	beq.n	8009196 <_printf_float+0xae>
 800925c:	232d      	movs	r3, #45	; 0x2d
 800925e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009262:	e798      	b.n	8009196 <_printf_float+0xae>
 8009264:	9a06      	ldr	r2, [sp, #24]
 8009266:	2a47      	cmp	r2, #71	; 0x47
 8009268:	d1be      	bne.n	80091e8 <_printf_float+0x100>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1bc      	bne.n	80091e8 <_printf_float+0x100>
 800926e:	2301      	movs	r3, #1
 8009270:	e7b9      	b.n	80091e6 <_printf_float+0xfe>
 8009272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009276:	d118      	bne.n	80092aa <_printf_float+0x1c2>
 8009278:	2900      	cmp	r1, #0
 800927a:	6863      	ldr	r3, [r4, #4]
 800927c:	dd0b      	ble.n	8009296 <_printf_float+0x1ae>
 800927e:	6121      	str	r1, [r4, #16]
 8009280:	b913      	cbnz	r3, 8009288 <_printf_float+0x1a0>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	07d0      	lsls	r0, r2, #31
 8009286:	d502      	bpl.n	800928e <_printf_float+0x1a6>
 8009288:	3301      	adds	r3, #1
 800928a:	440b      	add	r3, r1
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009290:	f04f 0900 	mov.w	r9, #0
 8009294:	e7de      	b.n	8009254 <_printf_float+0x16c>
 8009296:	b913      	cbnz	r3, 800929e <_printf_float+0x1b6>
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	07d2      	lsls	r2, r2, #31
 800929c:	d501      	bpl.n	80092a2 <_printf_float+0x1ba>
 800929e:	3302      	adds	r3, #2
 80092a0:	e7f4      	b.n	800928c <_printf_float+0x1a4>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e7f2      	b.n	800928c <_printf_float+0x1a4>
 80092a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ac:	4299      	cmp	r1, r3
 80092ae:	db05      	blt.n	80092bc <_printf_float+0x1d4>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	6121      	str	r1, [r4, #16]
 80092b4:	07d8      	lsls	r0, r3, #31
 80092b6:	d5ea      	bpl.n	800928e <_printf_float+0x1a6>
 80092b8:	1c4b      	adds	r3, r1, #1
 80092ba:	e7e7      	b.n	800928c <_printf_float+0x1a4>
 80092bc:	2900      	cmp	r1, #0
 80092be:	bfd4      	ite	le
 80092c0:	f1c1 0202 	rsble	r2, r1, #2
 80092c4:	2201      	movgt	r2, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	e7e0      	b.n	800928c <_printf_float+0x1a4>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	055a      	lsls	r2, r3, #21
 80092ce:	d407      	bmi.n	80092e0 <_printf_float+0x1f8>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	4642      	mov	r2, r8
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	d12c      	bne.n	8009338 <_printf_float+0x250>
 80092de:	e764      	b.n	80091aa <_printf_float+0xc2>
 80092e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092e4:	f240 80e0 	bls.w	80094a8 <_printf_float+0x3c0>
 80092e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	f7f7 fc1c 	bl	8000b2c <__aeabi_dcmpeq>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d034      	beq.n	8009362 <_printf_float+0x27a>
 80092f8:	4a37      	ldr	r2, [pc, #220]	; (80093d8 <_printf_float+0x2f0>)
 80092fa:	2301      	movs	r3, #1
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af51 	beq.w	80091aa <_printf_float+0xc2>
 8009308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800930c:	429a      	cmp	r2, r3
 800930e:	db02      	blt.n	8009316 <_printf_float+0x22e>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	07d8      	lsls	r0, r3, #31
 8009314:	d510      	bpl.n	8009338 <_printf_float+0x250>
 8009316:	ee18 3a10 	vmov	r3, s16
 800931a:	4652      	mov	r2, sl
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f af41 	beq.w	80091aa <_printf_float+0xc2>
 8009328:	f04f 0800 	mov.w	r8, #0
 800932c:	f104 091a 	add.w	r9, r4, #26
 8009330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009332:	3b01      	subs	r3, #1
 8009334:	4543      	cmp	r3, r8
 8009336:	dc09      	bgt.n	800934c <_printf_float+0x264>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	079b      	lsls	r3, r3, #30
 800933c:	f100 8105 	bmi.w	800954a <_printf_float+0x462>
 8009340:	68e0      	ldr	r0, [r4, #12]
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	4298      	cmp	r0, r3
 8009346:	bfb8      	it	lt
 8009348:	4618      	movlt	r0, r3
 800934a:	e730      	b.n	80091ae <_printf_float+0xc6>
 800934c:	2301      	movs	r3, #1
 800934e:	464a      	mov	r2, r9
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	f43f af27 	beq.w	80091aa <_printf_float+0xc2>
 800935c:	f108 0801 	add.w	r8, r8, #1
 8009360:	e7e6      	b.n	8009330 <_printf_float+0x248>
 8009362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc39      	bgt.n	80093dc <_printf_float+0x2f4>
 8009368:	4a1b      	ldr	r2, [pc, #108]	; (80093d8 <_printf_float+0x2f0>)
 800936a:	2301      	movs	r3, #1
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af19 	beq.w	80091aa <_printf_float+0xc2>
 8009378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800937c:	4313      	orrs	r3, r2
 800937e:	d102      	bne.n	8009386 <_printf_float+0x29e>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d5d8      	bpl.n	8009338 <_printf_float+0x250>
 8009386:	ee18 3a10 	vmov	r3, s16
 800938a:	4652      	mov	r2, sl
 800938c:	4631      	mov	r1, r6
 800938e:	4628      	mov	r0, r5
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f af09 	beq.w	80091aa <_printf_float+0xc2>
 8009398:	f04f 0900 	mov.w	r9, #0
 800939c:	f104 0a1a 	add.w	sl, r4, #26
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	425b      	negs	r3, r3
 80093a4:	454b      	cmp	r3, r9
 80093a6:	dc01      	bgt.n	80093ac <_printf_float+0x2c4>
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	e792      	b.n	80092d2 <_printf_float+0x1ea>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4652      	mov	r2, sl
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f aef7 	beq.w	80091aa <_printf_float+0xc2>
 80093bc:	f109 0901 	add.w	r9, r9, #1
 80093c0:	e7ee      	b.n	80093a0 <_printf_float+0x2b8>
 80093c2:	bf00      	nop
 80093c4:	7fefffff 	.word	0x7fefffff
 80093c8:	0800e0c9 	.word	0x0800e0c9
 80093cc:	0800e0cd 	.word	0x0800e0cd
 80093d0:	0800e0d5 	.word	0x0800e0d5
 80093d4:	0800e0d1 	.word	0x0800e0d1
 80093d8:	0800e0d9 	.word	0x0800e0d9
 80093dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093e0:	429a      	cmp	r2, r3
 80093e2:	bfa8      	it	ge
 80093e4:	461a      	movge	r2, r3
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	4691      	mov	r9, r2
 80093ea:	dc37      	bgt.n	800945c <_printf_float+0x374>
 80093ec:	f04f 0b00 	mov.w	fp, #0
 80093f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093f4:	f104 021a 	add.w	r2, r4, #26
 80093f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093fa:	9305      	str	r3, [sp, #20]
 80093fc:	eba3 0309 	sub.w	r3, r3, r9
 8009400:	455b      	cmp	r3, fp
 8009402:	dc33      	bgt.n	800946c <_printf_float+0x384>
 8009404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009408:	429a      	cmp	r2, r3
 800940a:	db3b      	blt.n	8009484 <_printf_float+0x39c>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	07da      	lsls	r2, r3, #31
 8009410:	d438      	bmi.n	8009484 <_printf_float+0x39c>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	9a05      	ldr	r2, [sp, #20]
 8009416:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009418:	1a9a      	subs	r2, r3, r2
 800941a:	eba3 0901 	sub.w	r9, r3, r1
 800941e:	4591      	cmp	r9, r2
 8009420:	bfa8      	it	ge
 8009422:	4691      	movge	r9, r2
 8009424:	f1b9 0f00 	cmp.w	r9, #0
 8009428:	dc35      	bgt.n	8009496 <_printf_float+0x3ae>
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009432:	f104 0a1a 	add.w	sl, r4, #26
 8009436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	eba3 0309 	sub.w	r3, r3, r9
 8009440:	4543      	cmp	r3, r8
 8009442:	f77f af79 	ble.w	8009338 <_printf_float+0x250>
 8009446:	2301      	movs	r3, #1
 8009448:	4652      	mov	r2, sl
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f aeaa 	beq.w	80091aa <_printf_float+0xc2>
 8009456:	f108 0801 	add.w	r8, r8, #1
 800945a:	e7ec      	b.n	8009436 <_printf_float+0x34e>
 800945c:	4613      	mov	r3, r2
 800945e:	4631      	mov	r1, r6
 8009460:	4642      	mov	r2, r8
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	d1c0      	bne.n	80093ec <_printf_float+0x304>
 800946a:	e69e      	b.n	80091aa <_printf_float+0xc2>
 800946c:	2301      	movs	r3, #1
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	9205      	str	r2, [sp, #20]
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	f43f ae97 	beq.w	80091aa <_printf_float+0xc2>
 800947c:	9a05      	ldr	r2, [sp, #20]
 800947e:	f10b 0b01 	add.w	fp, fp, #1
 8009482:	e7b9      	b.n	80093f8 <_printf_float+0x310>
 8009484:	ee18 3a10 	vmov	r3, s16
 8009488:	4652      	mov	r2, sl
 800948a:	4631      	mov	r1, r6
 800948c:	4628      	mov	r0, r5
 800948e:	47b8      	blx	r7
 8009490:	3001      	adds	r0, #1
 8009492:	d1be      	bne.n	8009412 <_printf_float+0x32a>
 8009494:	e689      	b.n	80091aa <_printf_float+0xc2>
 8009496:	9a05      	ldr	r2, [sp, #20]
 8009498:	464b      	mov	r3, r9
 800949a:	4442      	add	r2, r8
 800949c:	4631      	mov	r1, r6
 800949e:	4628      	mov	r0, r5
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	d1c1      	bne.n	800942a <_printf_float+0x342>
 80094a6:	e680      	b.n	80091aa <_printf_float+0xc2>
 80094a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094aa:	2a01      	cmp	r2, #1
 80094ac:	dc01      	bgt.n	80094b2 <_printf_float+0x3ca>
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d538      	bpl.n	8009524 <_printf_float+0x43c>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4642      	mov	r2, r8
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	f43f ae74 	beq.w	80091aa <_printf_float+0xc2>
 80094c2:	ee18 3a10 	vmov	r3, s16
 80094c6:	4652      	mov	r2, sl
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	f43f ae6b 	beq.w	80091aa <_printf_float+0xc2>
 80094d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	f7f7 fb26 	bl	8000b2c <__aeabi_dcmpeq>
 80094e0:	b9d8      	cbnz	r0, 800951a <_printf_float+0x432>
 80094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e4:	f108 0201 	add.w	r2, r8, #1
 80094e8:	3b01      	subs	r3, #1
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	d10e      	bne.n	8009512 <_printf_float+0x42a>
 80094f4:	e659      	b.n	80091aa <_printf_float+0xc2>
 80094f6:	2301      	movs	r3, #1
 80094f8:	4652      	mov	r2, sl
 80094fa:	4631      	mov	r1, r6
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	f43f ae52 	beq.w	80091aa <_printf_float+0xc2>
 8009506:	f108 0801 	add.w	r8, r8, #1
 800950a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800950c:	3b01      	subs	r3, #1
 800950e:	4543      	cmp	r3, r8
 8009510:	dcf1      	bgt.n	80094f6 <_printf_float+0x40e>
 8009512:	464b      	mov	r3, r9
 8009514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009518:	e6dc      	b.n	80092d4 <_printf_float+0x1ec>
 800951a:	f04f 0800 	mov.w	r8, #0
 800951e:	f104 0a1a 	add.w	sl, r4, #26
 8009522:	e7f2      	b.n	800950a <_printf_float+0x422>
 8009524:	2301      	movs	r3, #1
 8009526:	4642      	mov	r2, r8
 8009528:	e7df      	b.n	80094ea <_printf_float+0x402>
 800952a:	2301      	movs	r3, #1
 800952c:	464a      	mov	r2, r9
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	47b8      	blx	r7
 8009534:	3001      	adds	r0, #1
 8009536:	f43f ae38 	beq.w	80091aa <_printf_float+0xc2>
 800953a:	f108 0801 	add.w	r8, r8, #1
 800953e:	68e3      	ldr	r3, [r4, #12]
 8009540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009542:	1a5b      	subs	r3, r3, r1
 8009544:	4543      	cmp	r3, r8
 8009546:	dcf0      	bgt.n	800952a <_printf_float+0x442>
 8009548:	e6fa      	b.n	8009340 <_printf_float+0x258>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	f104 0919 	add.w	r9, r4, #25
 8009552:	e7f4      	b.n	800953e <_printf_float+0x456>

08009554 <_printf_common>:
 8009554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	4616      	mov	r6, r2
 800955a:	4699      	mov	r9, r3
 800955c:	688a      	ldr	r2, [r1, #8]
 800955e:	690b      	ldr	r3, [r1, #16]
 8009560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009564:	4293      	cmp	r3, r2
 8009566:	bfb8      	it	lt
 8009568:	4613      	movlt	r3, r2
 800956a:	6033      	str	r3, [r6, #0]
 800956c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009570:	4607      	mov	r7, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b10a      	cbz	r2, 800957a <_printf_common+0x26>
 8009576:	3301      	adds	r3, #1
 8009578:	6033      	str	r3, [r6, #0]
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	0699      	lsls	r1, r3, #26
 800957e:	bf42      	ittt	mi
 8009580:	6833      	ldrmi	r3, [r6, #0]
 8009582:	3302      	addmi	r3, #2
 8009584:	6033      	strmi	r3, [r6, #0]
 8009586:	6825      	ldr	r5, [r4, #0]
 8009588:	f015 0506 	ands.w	r5, r5, #6
 800958c:	d106      	bne.n	800959c <_printf_common+0x48>
 800958e:	f104 0a19 	add.w	sl, r4, #25
 8009592:	68e3      	ldr	r3, [r4, #12]
 8009594:	6832      	ldr	r2, [r6, #0]
 8009596:	1a9b      	subs	r3, r3, r2
 8009598:	42ab      	cmp	r3, r5
 800959a:	dc26      	bgt.n	80095ea <_printf_common+0x96>
 800959c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095a0:	1e13      	subs	r3, r2, #0
 80095a2:	6822      	ldr	r2, [r4, #0]
 80095a4:	bf18      	it	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	0692      	lsls	r2, r2, #26
 80095aa:	d42b      	bmi.n	8009604 <_printf_common+0xb0>
 80095ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095b0:	4649      	mov	r1, r9
 80095b2:	4638      	mov	r0, r7
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d01e      	beq.n	80095f8 <_printf_common+0xa4>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	68e5      	ldr	r5, [r4, #12]
 80095be:	6832      	ldr	r2, [r6, #0]
 80095c0:	f003 0306 	and.w	r3, r3, #6
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	bf08      	it	eq
 80095c8:	1aad      	subeq	r5, r5, r2
 80095ca:	68a3      	ldr	r3, [r4, #8]
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	bf0c      	ite	eq
 80095d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d4:	2500      	movne	r5, #0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfc4      	itt	gt
 80095da:	1a9b      	subgt	r3, r3, r2
 80095dc:	18ed      	addgt	r5, r5, r3
 80095de:	2600      	movs	r6, #0
 80095e0:	341a      	adds	r4, #26
 80095e2:	42b5      	cmp	r5, r6
 80095e4:	d11a      	bne.n	800961c <_printf_common+0xc8>
 80095e6:	2000      	movs	r0, #0
 80095e8:	e008      	b.n	80095fc <_printf_common+0xa8>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4652      	mov	r2, sl
 80095ee:	4649      	mov	r1, r9
 80095f0:	4638      	mov	r0, r7
 80095f2:	47c0      	blx	r8
 80095f4:	3001      	adds	r0, #1
 80095f6:	d103      	bne.n	8009600 <_printf_common+0xac>
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	3501      	adds	r5, #1
 8009602:	e7c6      	b.n	8009592 <_printf_common+0x3e>
 8009604:	18e1      	adds	r1, r4, r3
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	2030      	movs	r0, #48	; 0x30
 800960a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800960e:	4422      	add	r2, r4
 8009610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009618:	3302      	adds	r3, #2
 800961a:	e7c7      	b.n	80095ac <_printf_common+0x58>
 800961c:	2301      	movs	r3, #1
 800961e:	4622      	mov	r2, r4
 8009620:	4649      	mov	r1, r9
 8009622:	4638      	mov	r0, r7
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d0e6      	beq.n	80095f8 <_printf_common+0xa4>
 800962a:	3601      	adds	r6, #1
 800962c:	e7d9      	b.n	80095e2 <_printf_common+0x8e>
	...

08009630 <_printf_i>:
 8009630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	7e0f      	ldrb	r7, [r1, #24]
 8009636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009638:	2f78      	cmp	r7, #120	; 0x78
 800963a:	4691      	mov	r9, r2
 800963c:	4680      	mov	r8, r0
 800963e:	460c      	mov	r4, r1
 8009640:	469a      	mov	sl, r3
 8009642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009646:	d807      	bhi.n	8009658 <_printf_i+0x28>
 8009648:	2f62      	cmp	r7, #98	; 0x62
 800964a:	d80a      	bhi.n	8009662 <_printf_i+0x32>
 800964c:	2f00      	cmp	r7, #0
 800964e:	f000 80d8 	beq.w	8009802 <_printf_i+0x1d2>
 8009652:	2f58      	cmp	r7, #88	; 0x58
 8009654:	f000 80a3 	beq.w	800979e <_printf_i+0x16e>
 8009658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800965c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009660:	e03a      	b.n	80096d8 <_printf_i+0xa8>
 8009662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009666:	2b15      	cmp	r3, #21
 8009668:	d8f6      	bhi.n	8009658 <_printf_i+0x28>
 800966a:	a101      	add	r1, pc, #4	; (adr r1, 8009670 <_printf_i+0x40>)
 800966c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009670:	080096c9 	.word	0x080096c9
 8009674:	080096dd 	.word	0x080096dd
 8009678:	08009659 	.word	0x08009659
 800967c:	08009659 	.word	0x08009659
 8009680:	08009659 	.word	0x08009659
 8009684:	08009659 	.word	0x08009659
 8009688:	080096dd 	.word	0x080096dd
 800968c:	08009659 	.word	0x08009659
 8009690:	08009659 	.word	0x08009659
 8009694:	08009659 	.word	0x08009659
 8009698:	08009659 	.word	0x08009659
 800969c:	080097e9 	.word	0x080097e9
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	080097cb 	.word	0x080097cb
 80096a8:	08009659 	.word	0x08009659
 80096ac:	08009659 	.word	0x08009659
 80096b0:	0800980b 	.word	0x0800980b
 80096b4:	08009659 	.word	0x08009659
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009659 	.word	0x08009659
 80096c0:	08009659 	.word	0x08009659
 80096c4:	080097d3 	.word	0x080097d3
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	1d1a      	adds	r2, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	602a      	str	r2, [r5, #0]
 80096d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096d8:	2301      	movs	r3, #1
 80096da:	e0a3      	b.n	8009824 <_printf_i+0x1f4>
 80096dc:	6820      	ldr	r0, [r4, #0]
 80096de:	6829      	ldr	r1, [r5, #0]
 80096e0:	0606      	lsls	r6, r0, #24
 80096e2:	f101 0304 	add.w	r3, r1, #4
 80096e6:	d50a      	bpl.n	80096fe <_printf_i+0xce>
 80096e8:	680e      	ldr	r6, [r1, #0]
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	da03      	bge.n	80096f8 <_printf_i+0xc8>
 80096f0:	232d      	movs	r3, #45	; 0x2d
 80096f2:	4276      	negs	r6, r6
 80096f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f8:	485e      	ldr	r0, [pc, #376]	; (8009874 <_printf_i+0x244>)
 80096fa:	230a      	movs	r3, #10
 80096fc:	e019      	b.n	8009732 <_printf_i+0x102>
 80096fe:	680e      	ldr	r6, [r1, #0]
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009706:	bf18      	it	ne
 8009708:	b236      	sxthne	r6, r6
 800970a:	e7ef      	b.n	80096ec <_printf_i+0xbc>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	1d19      	adds	r1, r3, #4
 8009712:	6029      	str	r1, [r5, #0]
 8009714:	0601      	lsls	r1, r0, #24
 8009716:	d501      	bpl.n	800971c <_printf_i+0xec>
 8009718:	681e      	ldr	r6, [r3, #0]
 800971a:	e002      	b.n	8009722 <_printf_i+0xf2>
 800971c:	0646      	lsls	r6, r0, #25
 800971e:	d5fb      	bpl.n	8009718 <_printf_i+0xe8>
 8009720:	881e      	ldrh	r6, [r3, #0]
 8009722:	4854      	ldr	r0, [pc, #336]	; (8009874 <_printf_i+0x244>)
 8009724:	2f6f      	cmp	r7, #111	; 0x6f
 8009726:	bf0c      	ite	eq
 8009728:	2308      	moveq	r3, #8
 800972a:	230a      	movne	r3, #10
 800972c:	2100      	movs	r1, #0
 800972e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009732:	6865      	ldr	r5, [r4, #4]
 8009734:	60a5      	str	r5, [r4, #8]
 8009736:	2d00      	cmp	r5, #0
 8009738:	bfa2      	ittt	ge
 800973a:	6821      	ldrge	r1, [r4, #0]
 800973c:	f021 0104 	bicge.w	r1, r1, #4
 8009740:	6021      	strge	r1, [r4, #0]
 8009742:	b90e      	cbnz	r6, 8009748 <_printf_i+0x118>
 8009744:	2d00      	cmp	r5, #0
 8009746:	d04d      	beq.n	80097e4 <_printf_i+0x1b4>
 8009748:	4615      	mov	r5, r2
 800974a:	fbb6 f1f3 	udiv	r1, r6, r3
 800974e:	fb03 6711 	mls	r7, r3, r1, r6
 8009752:	5dc7      	ldrb	r7, [r0, r7]
 8009754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009758:	4637      	mov	r7, r6
 800975a:	42bb      	cmp	r3, r7
 800975c:	460e      	mov	r6, r1
 800975e:	d9f4      	bls.n	800974a <_printf_i+0x11a>
 8009760:	2b08      	cmp	r3, #8
 8009762:	d10b      	bne.n	800977c <_printf_i+0x14c>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	07de      	lsls	r6, r3, #31
 8009768:	d508      	bpl.n	800977c <_printf_i+0x14c>
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	6861      	ldr	r1, [r4, #4]
 800976e:	4299      	cmp	r1, r3
 8009770:	bfde      	ittt	le
 8009772:	2330      	movle	r3, #48	; 0x30
 8009774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800977c:	1b52      	subs	r2, r2, r5
 800977e:	6122      	str	r2, [r4, #16]
 8009780:	f8cd a000 	str.w	sl, [sp]
 8009784:	464b      	mov	r3, r9
 8009786:	aa03      	add	r2, sp, #12
 8009788:	4621      	mov	r1, r4
 800978a:	4640      	mov	r0, r8
 800978c:	f7ff fee2 	bl	8009554 <_printf_common>
 8009790:	3001      	adds	r0, #1
 8009792:	d14c      	bne.n	800982e <_printf_i+0x1fe>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009798:	b004      	add	sp, #16
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	4835      	ldr	r0, [pc, #212]	; (8009874 <_printf_i+0x244>)
 80097a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097a4:	6829      	ldr	r1, [r5, #0]
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097ac:	6029      	str	r1, [r5, #0]
 80097ae:	061d      	lsls	r5, r3, #24
 80097b0:	d514      	bpl.n	80097dc <_printf_i+0x1ac>
 80097b2:	07df      	lsls	r7, r3, #31
 80097b4:	bf44      	itt	mi
 80097b6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ba:	6023      	strmi	r3, [r4, #0]
 80097bc:	b91e      	cbnz	r6, 80097c6 <_printf_i+0x196>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f023 0320 	bic.w	r3, r3, #32
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	2310      	movs	r3, #16
 80097c8:	e7b0      	b.n	800972c <_printf_i+0xfc>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	2378      	movs	r3, #120	; 0x78
 80097d4:	4828      	ldr	r0, [pc, #160]	; (8009878 <_printf_i+0x248>)
 80097d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097da:	e7e3      	b.n	80097a4 <_printf_i+0x174>
 80097dc:	0659      	lsls	r1, r3, #25
 80097de:	bf48      	it	mi
 80097e0:	b2b6      	uxthmi	r6, r6
 80097e2:	e7e6      	b.n	80097b2 <_printf_i+0x182>
 80097e4:	4615      	mov	r5, r2
 80097e6:	e7bb      	b.n	8009760 <_printf_i+0x130>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	6826      	ldr	r6, [r4, #0]
 80097ec:	6961      	ldr	r1, [r4, #20]
 80097ee:	1d18      	adds	r0, r3, #4
 80097f0:	6028      	str	r0, [r5, #0]
 80097f2:	0635      	lsls	r5, r6, #24
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0x1cc>
 80097f8:	6019      	str	r1, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0x1d2>
 80097fc:	0670      	lsls	r0, r6, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0x1c8>
 8009800:	8019      	strh	r1, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	4615      	mov	r5, r2
 8009808:	e7ba      	b.n	8009780 <_printf_i+0x150>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	602a      	str	r2, [r5, #0]
 8009810:	681d      	ldr	r5, [r3, #0]
 8009812:	6862      	ldr	r2, [r4, #4]
 8009814:	2100      	movs	r1, #0
 8009816:	4628      	mov	r0, r5
 8009818:	f7f6 fd02 	bl	8000220 <memchr>
 800981c:	b108      	cbz	r0, 8009822 <_printf_i+0x1f2>
 800981e:	1b40      	subs	r0, r0, r5
 8009820:	6060      	str	r0, [r4, #4]
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	2300      	movs	r3, #0
 8009828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982c:	e7a8      	b.n	8009780 <_printf_i+0x150>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	462a      	mov	r2, r5
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d0ab      	beq.n	8009794 <_printf_i+0x164>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	079b      	lsls	r3, r3, #30
 8009840:	d413      	bmi.n	800986a <_printf_i+0x23a>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	4298      	cmp	r0, r3
 8009848:	bfb8      	it	lt
 800984a:	4618      	movlt	r0, r3
 800984c:	e7a4      	b.n	8009798 <_printf_i+0x168>
 800984e:	2301      	movs	r3, #1
 8009850:	4632      	mov	r2, r6
 8009852:	4649      	mov	r1, r9
 8009854:	4640      	mov	r0, r8
 8009856:	47d0      	blx	sl
 8009858:	3001      	adds	r0, #1
 800985a:	d09b      	beq.n	8009794 <_printf_i+0x164>
 800985c:	3501      	adds	r5, #1
 800985e:	68e3      	ldr	r3, [r4, #12]
 8009860:	9903      	ldr	r1, [sp, #12]
 8009862:	1a5b      	subs	r3, r3, r1
 8009864:	42ab      	cmp	r3, r5
 8009866:	dcf2      	bgt.n	800984e <_printf_i+0x21e>
 8009868:	e7eb      	b.n	8009842 <_printf_i+0x212>
 800986a:	2500      	movs	r5, #0
 800986c:	f104 0619 	add.w	r6, r4, #25
 8009870:	e7f5      	b.n	800985e <_printf_i+0x22e>
 8009872:	bf00      	nop
 8009874:	0800e0db 	.word	0x0800e0db
 8009878:	0800e0ec 	.word	0x0800e0ec

0800987c <_scanf_float>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	b087      	sub	sp, #28
 8009882:	4617      	mov	r7, r2
 8009884:	9303      	str	r3, [sp, #12]
 8009886:	688b      	ldr	r3, [r1, #8]
 8009888:	1e5a      	subs	r2, r3, #1
 800988a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800988e:	bf83      	ittte	hi
 8009890:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009894:	195b      	addhi	r3, r3, r5
 8009896:	9302      	strhi	r3, [sp, #8]
 8009898:	2300      	movls	r3, #0
 800989a:	bf86      	itte	hi
 800989c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098a0:	608b      	strhi	r3, [r1, #8]
 80098a2:	9302      	strls	r3, [sp, #8]
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	468b      	mov	fp, r1
 80098a8:	2500      	movs	r5, #0
 80098aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80098ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80098b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098b6:	4680      	mov	r8, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	465e      	mov	r6, fp
 80098bc:	46aa      	mov	sl, r5
 80098be:	46a9      	mov	r9, r5
 80098c0:	9501      	str	r5, [sp, #4]
 80098c2:	68a2      	ldr	r2, [r4, #8]
 80098c4:	b152      	cbz	r2, 80098dc <_scanf_float+0x60>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b4e      	cmp	r3, #78	; 0x4e
 80098cc:	d864      	bhi.n	8009998 <_scanf_float+0x11c>
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d83c      	bhi.n	800994c <_scanf_float+0xd0>
 80098d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80098d6:	b2c8      	uxtb	r0, r1
 80098d8:	280e      	cmp	r0, #14
 80098da:	d93a      	bls.n	8009952 <_scanf_float+0xd6>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	d003      	beq.n	80098ea <_scanf_float+0x6e>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098ee:	f1ba 0f01 	cmp.w	sl, #1
 80098f2:	f200 8113 	bhi.w	8009b1c <_scanf_float+0x2a0>
 80098f6:	455e      	cmp	r6, fp
 80098f8:	f200 8105 	bhi.w	8009b06 <_scanf_float+0x28a>
 80098fc:	2501      	movs	r5, #1
 80098fe:	4628      	mov	r0, r5
 8009900:	b007      	add	sp, #28
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800990a:	2a0d      	cmp	r2, #13
 800990c:	d8e6      	bhi.n	80098dc <_scanf_float+0x60>
 800990e:	a101      	add	r1, pc, #4	; (adr r1, 8009914 <_scanf_float+0x98>)
 8009910:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009914:	08009a53 	.word	0x08009a53
 8009918:	080098dd 	.word	0x080098dd
 800991c:	080098dd 	.word	0x080098dd
 8009920:	080098dd 	.word	0x080098dd
 8009924:	08009ab3 	.word	0x08009ab3
 8009928:	08009a8b 	.word	0x08009a8b
 800992c:	080098dd 	.word	0x080098dd
 8009930:	080098dd 	.word	0x080098dd
 8009934:	08009a61 	.word	0x08009a61
 8009938:	080098dd 	.word	0x080098dd
 800993c:	080098dd 	.word	0x080098dd
 8009940:	080098dd 	.word	0x080098dd
 8009944:	080098dd 	.word	0x080098dd
 8009948:	08009a19 	.word	0x08009a19
 800994c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009950:	e7db      	b.n	800990a <_scanf_float+0x8e>
 8009952:	290e      	cmp	r1, #14
 8009954:	d8c2      	bhi.n	80098dc <_scanf_float+0x60>
 8009956:	a001      	add	r0, pc, #4	; (adr r0, 800995c <_scanf_float+0xe0>)
 8009958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800995c:	08009a0b 	.word	0x08009a0b
 8009960:	080098dd 	.word	0x080098dd
 8009964:	08009a0b 	.word	0x08009a0b
 8009968:	08009a9f 	.word	0x08009a9f
 800996c:	080098dd 	.word	0x080098dd
 8009970:	080099b9 	.word	0x080099b9
 8009974:	080099f5 	.word	0x080099f5
 8009978:	080099f5 	.word	0x080099f5
 800997c:	080099f5 	.word	0x080099f5
 8009980:	080099f5 	.word	0x080099f5
 8009984:	080099f5 	.word	0x080099f5
 8009988:	080099f5 	.word	0x080099f5
 800998c:	080099f5 	.word	0x080099f5
 8009990:	080099f5 	.word	0x080099f5
 8009994:	080099f5 	.word	0x080099f5
 8009998:	2b6e      	cmp	r3, #110	; 0x6e
 800999a:	d809      	bhi.n	80099b0 <_scanf_float+0x134>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d8b2      	bhi.n	8009906 <_scanf_float+0x8a>
 80099a0:	2b54      	cmp	r3, #84	; 0x54
 80099a2:	d077      	beq.n	8009a94 <_scanf_float+0x218>
 80099a4:	2b59      	cmp	r3, #89	; 0x59
 80099a6:	d199      	bne.n	80098dc <_scanf_float+0x60>
 80099a8:	2d07      	cmp	r5, #7
 80099aa:	d197      	bne.n	80098dc <_scanf_float+0x60>
 80099ac:	2508      	movs	r5, #8
 80099ae:	e029      	b.n	8009a04 <_scanf_float+0x188>
 80099b0:	2b74      	cmp	r3, #116	; 0x74
 80099b2:	d06f      	beq.n	8009a94 <_scanf_float+0x218>
 80099b4:	2b79      	cmp	r3, #121	; 0x79
 80099b6:	e7f6      	b.n	80099a6 <_scanf_float+0x12a>
 80099b8:	6821      	ldr	r1, [r4, #0]
 80099ba:	05c8      	lsls	r0, r1, #23
 80099bc:	d51a      	bpl.n	80099f4 <_scanf_float+0x178>
 80099be:	9b02      	ldr	r3, [sp, #8]
 80099c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80099c4:	6021      	str	r1, [r4, #0]
 80099c6:	f109 0901 	add.w	r9, r9, #1
 80099ca:	b11b      	cbz	r3, 80099d4 <_scanf_float+0x158>
 80099cc:	3b01      	subs	r3, #1
 80099ce:	3201      	adds	r2, #1
 80099d0:	9302      	str	r3, [sp, #8]
 80099d2:	60a2      	str	r2, [r4, #8]
 80099d4:	68a3      	ldr	r3, [r4, #8]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	60a3      	str	r3, [r4, #8]
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	3301      	adds	r3, #1
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	f340 8084 	ble.w	8009af4 <_scanf_float+0x278>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	3301      	adds	r3, #1
 80099f0:	603b      	str	r3, [r7, #0]
 80099f2:	e766      	b.n	80098c2 <_scanf_float+0x46>
 80099f4:	eb1a 0f05 	cmn.w	sl, r5
 80099f8:	f47f af70 	bne.w	80098dc <_scanf_float+0x60>
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	f806 3b01 	strb.w	r3, [r6], #1
 8009a08:	e7e4      	b.n	80099d4 <_scanf_float+0x158>
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	0610      	lsls	r0, r2, #24
 8009a0e:	f57f af65 	bpl.w	80098dc <_scanf_float+0x60>
 8009a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a16:	e7f4      	b.n	8009a02 <_scanf_float+0x186>
 8009a18:	f1ba 0f00 	cmp.w	sl, #0
 8009a1c:	d10e      	bne.n	8009a3c <_scanf_float+0x1c0>
 8009a1e:	f1b9 0f00 	cmp.w	r9, #0
 8009a22:	d10e      	bne.n	8009a42 <_scanf_float+0x1c6>
 8009a24:	6822      	ldr	r2, [r4, #0]
 8009a26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a2e:	d108      	bne.n	8009a42 <_scanf_float+0x1c6>
 8009a30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a34:	6022      	str	r2, [r4, #0]
 8009a36:	f04f 0a01 	mov.w	sl, #1
 8009a3a:	e7e3      	b.n	8009a04 <_scanf_float+0x188>
 8009a3c:	f1ba 0f02 	cmp.w	sl, #2
 8009a40:	d055      	beq.n	8009aee <_scanf_float+0x272>
 8009a42:	2d01      	cmp	r5, #1
 8009a44:	d002      	beq.n	8009a4c <_scanf_float+0x1d0>
 8009a46:	2d04      	cmp	r5, #4
 8009a48:	f47f af48 	bne.w	80098dc <_scanf_float+0x60>
 8009a4c:	3501      	adds	r5, #1
 8009a4e:	b2ed      	uxtb	r5, r5
 8009a50:	e7d8      	b.n	8009a04 <_scanf_float+0x188>
 8009a52:	f1ba 0f01 	cmp.w	sl, #1
 8009a56:	f47f af41 	bne.w	80098dc <_scanf_float+0x60>
 8009a5a:	f04f 0a02 	mov.w	sl, #2
 8009a5e:	e7d1      	b.n	8009a04 <_scanf_float+0x188>
 8009a60:	b97d      	cbnz	r5, 8009a82 <_scanf_float+0x206>
 8009a62:	f1b9 0f00 	cmp.w	r9, #0
 8009a66:	f47f af3c 	bne.w	80098e2 <_scanf_float+0x66>
 8009a6a:	6822      	ldr	r2, [r4, #0]
 8009a6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a74:	f47f af39 	bne.w	80098ea <_scanf_float+0x6e>
 8009a78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	2501      	movs	r5, #1
 8009a80:	e7c0      	b.n	8009a04 <_scanf_float+0x188>
 8009a82:	2d03      	cmp	r5, #3
 8009a84:	d0e2      	beq.n	8009a4c <_scanf_float+0x1d0>
 8009a86:	2d05      	cmp	r5, #5
 8009a88:	e7de      	b.n	8009a48 <_scanf_float+0x1cc>
 8009a8a:	2d02      	cmp	r5, #2
 8009a8c:	f47f af26 	bne.w	80098dc <_scanf_float+0x60>
 8009a90:	2503      	movs	r5, #3
 8009a92:	e7b7      	b.n	8009a04 <_scanf_float+0x188>
 8009a94:	2d06      	cmp	r5, #6
 8009a96:	f47f af21 	bne.w	80098dc <_scanf_float+0x60>
 8009a9a:	2507      	movs	r5, #7
 8009a9c:	e7b2      	b.n	8009a04 <_scanf_float+0x188>
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	0591      	lsls	r1, r2, #22
 8009aa2:	f57f af1b 	bpl.w	80098dc <_scanf_float+0x60>
 8009aa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009aaa:	6022      	str	r2, [r4, #0]
 8009aac:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ab0:	e7a8      	b.n	8009a04 <_scanf_float+0x188>
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ab8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009abc:	d006      	beq.n	8009acc <_scanf_float+0x250>
 8009abe:	0550      	lsls	r0, r2, #21
 8009ac0:	f57f af0c 	bpl.w	80098dc <_scanf_float+0x60>
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	f43f af0f 	beq.w	80098ea <_scanf_float+0x6e>
 8009acc:	0591      	lsls	r1, r2, #22
 8009ace:	bf58      	it	pl
 8009ad0:	9901      	ldrpl	r1, [sp, #4]
 8009ad2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ad6:	bf58      	it	pl
 8009ad8:	eba9 0101 	subpl.w	r1, r9, r1
 8009adc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ae0:	bf58      	it	pl
 8009ae2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	f04f 0900 	mov.w	r9, #0
 8009aec:	e78a      	b.n	8009a04 <_scanf_float+0x188>
 8009aee:	f04f 0a03 	mov.w	sl, #3
 8009af2:	e787      	b.n	8009a04 <_scanf_float+0x188>
 8009af4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009af8:	4639      	mov	r1, r7
 8009afa:	4640      	mov	r0, r8
 8009afc:	4798      	blx	r3
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f aedf 	beq.w	80098c2 <_scanf_float+0x46>
 8009b04:	e6ea      	b.n	80098dc <_scanf_float+0x60>
 8009b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b0e:	463a      	mov	r2, r7
 8009b10:	4640      	mov	r0, r8
 8009b12:	4798      	blx	r3
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	e6ec      	b.n	80098f6 <_scanf_float+0x7a>
 8009b1c:	1e6b      	subs	r3, r5, #1
 8009b1e:	2b06      	cmp	r3, #6
 8009b20:	d825      	bhi.n	8009b6e <_scanf_float+0x2f2>
 8009b22:	2d02      	cmp	r5, #2
 8009b24:	d836      	bhi.n	8009b94 <_scanf_float+0x318>
 8009b26:	455e      	cmp	r6, fp
 8009b28:	f67f aee8 	bls.w	80098fc <_scanf_float+0x80>
 8009b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b34:	463a      	mov	r2, r7
 8009b36:	4640      	mov	r0, r8
 8009b38:	4798      	blx	r3
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	e7f1      	b.n	8009b26 <_scanf_float+0x2aa>
 8009b42:	9802      	ldr	r0, [sp, #8]
 8009b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b4c:	9002      	str	r0, [sp, #8]
 8009b4e:	463a      	mov	r2, r7
 8009b50:	4640      	mov	r0, r8
 8009b52:	4798      	blx	r3
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b5e:	fa5f fa8a 	uxtb.w	sl, sl
 8009b62:	f1ba 0f02 	cmp.w	sl, #2
 8009b66:	d1ec      	bne.n	8009b42 <_scanf_float+0x2c6>
 8009b68:	3d03      	subs	r5, #3
 8009b6a:	b2ed      	uxtb	r5, r5
 8009b6c:	1b76      	subs	r6, r6, r5
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	05da      	lsls	r2, r3, #23
 8009b72:	d52f      	bpl.n	8009bd4 <_scanf_float+0x358>
 8009b74:	055b      	lsls	r3, r3, #21
 8009b76:	d510      	bpl.n	8009b9a <_scanf_float+0x31e>
 8009b78:	455e      	cmp	r6, fp
 8009b7a:	f67f aebf 	bls.w	80098fc <_scanf_float+0x80>
 8009b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b86:	463a      	mov	r2, r7
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4798      	blx	r3
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	e7f1      	b.n	8009b78 <_scanf_float+0x2fc>
 8009b94:	46aa      	mov	sl, r5
 8009b96:	9602      	str	r6, [sp, #8]
 8009b98:	e7df      	b.n	8009b5a <_scanf_float+0x2de>
 8009b9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	2965      	cmp	r1, #101	; 0x65
 8009ba2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009ba6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	d00c      	beq.n	8009bc8 <_scanf_float+0x34c>
 8009bae:	2945      	cmp	r1, #69	; 0x45
 8009bb0:	d00a      	beq.n	8009bc8 <_scanf_float+0x34c>
 8009bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bb6:	463a      	mov	r2, r7
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4798      	blx	r3
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	1eb5      	subs	r5, r6, #2
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bcc:	463a      	mov	r2, r7
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4798      	blx	r3
 8009bd2:	462e      	mov	r6, r5
 8009bd4:	6825      	ldr	r5, [r4, #0]
 8009bd6:	f015 0510 	ands.w	r5, r5, #16
 8009bda:	d159      	bne.n	8009c90 <_scanf_float+0x414>
 8009bdc:	7035      	strb	r5, [r6, #0]
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be8:	d11b      	bne.n	8009c22 <_scanf_float+0x3a6>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	454b      	cmp	r3, r9
 8009bee:	eba3 0209 	sub.w	r2, r3, r9
 8009bf2:	d123      	bne.n	8009c3c <_scanf_float+0x3c0>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4659      	mov	r1, fp
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	f000 ffeb 	bl	800abd4 <_strtod_r>
 8009bfe:	6822      	ldr	r2, [r4, #0]
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	f012 0f02 	tst.w	r2, #2
 8009c06:	ec57 6b10 	vmov	r6, r7, d0
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	d021      	beq.n	8009c52 <_scanf_float+0x3d6>
 8009c0e:	9903      	ldr	r1, [sp, #12]
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	600a      	str	r2, [r1, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	e9c3 6700 	strd	r6, r7, [r3]
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60e3      	str	r3, [r4, #12]
 8009c20:	e66d      	b.n	80098fe <_scanf_float+0x82>
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0e5      	beq.n	8009bf4 <_scanf_float+0x378>
 8009c28:	9905      	ldr	r1, [sp, #20]
 8009c2a:	230a      	movs	r3, #10
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	3101      	adds	r1, #1
 8009c30:	4640      	mov	r0, r8
 8009c32:	f001 f8b3 	bl	800ad9c <_strtol_r>
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	9e05      	ldr	r6, [sp, #20]
 8009c3a:	1ac2      	subs	r2, r0, r3
 8009c3c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c40:	429e      	cmp	r6, r3
 8009c42:	bf28      	it	cs
 8009c44:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c48:	4912      	ldr	r1, [pc, #72]	; (8009c94 <_scanf_float+0x418>)
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f000 f91e 	bl	8009e8c <siprintf>
 8009c50:	e7d0      	b.n	8009bf4 <_scanf_float+0x378>
 8009c52:	9903      	ldr	r1, [sp, #12]
 8009c54:	f012 0f04 	tst.w	r2, #4
 8009c58:	f103 0204 	add.w	r2, r3, #4
 8009c5c:	600a      	str	r2, [r1, #0]
 8009c5e:	d1d9      	bne.n	8009c14 <_scanf_float+0x398>
 8009c60:	f8d3 8000 	ldr.w	r8, [r3]
 8009c64:	ee10 2a10 	vmov	r2, s0
 8009c68:	ee10 0a10 	vmov	r0, s0
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff8e 	bl	8000b90 <__aeabi_dcmpun>
 8009c74:	b128      	cbz	r0, 8009c82 <_scanf_float+0x406>
 8009c76:	4808      	ldr	r0, [pc, #32]	; (8009c98 <_scanf_float+0x41c>)
 8009c78:	f7fe fcfc 	bl	8008674 <nanf>
 8009c7c:	ed88 0a00 	vstr	s0, [r8]
 8009c80:	e7cb      	b.n	8009c1a <_scanf_float+0x39e>
 8009c82:	4630      	mov	r0, r6
 8009c84:	4639      	mov	r1, r7
 8009c86:	f7f6 ffe1 	bl	8000c4c <__aeabi_d2f>
 8009c8a:	f8c8 0000 	str.w	r0, [r8]
 8009c8e:	e7c4      	b.n	8009c1a <_scanf_float+0x39e>
 8009c90:	2500      	movs	r5, #0
 8009c92:	e634      	b.n	80098fe <_scanf_float+0x82>
 8009c94:	0800e0fd 	.word	0x0800e0fd
 8009c98:	0800e207 	.word	0x0800e207

08009c9c <iprintf>:
 8009c9c:	b40f      	push	{r0, r1, r2, r3}
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <iprintf+0x2c>)
 8009ca0:	b513      	push	{r0, r1, r4, lr}
 8009ca2:	681c      	ldr	r4, [r3, #0]
 8009ca4:	b124      	cbz	r4, 8009cb0 <iprintf+0x14>
 8009ca6:	69a3      	ldr	r3, [r4, #24]
 8009ca8:	b913      	cbnz	r3, 8009cb0 <iprintf+0x14>
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7fe fe22 	bl	80088f4 <__sinit>
 8009cb0:	ab05      	add	r3, sp, #20
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	68a1      	ldr	r1, [r4, #8]
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7ff f845 	bl	8008d48 <_vfiprintf_r>
 8009cbe:	b002      	add	sp, #8
 8009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc4:	b004      	add	sp, #16
 8009cc6:	4770      	bx	lr
 8009cc8:	2000002c 	.word	0x2000002c

08009ccc <putchar>:
 8009ccc:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <putchar+0x28>)
 8009cce:	b513      	push	{r0, r1, r4, lr}
 8009cd0:	681c      	ldr	r4, [r3, #0]
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	b134      	cbz	r4, 8009ce4 <putchar+0x18>
 8009cd6:	69a3      	ldr	r3, [r4, #24]
 8009cd8:	b923      	cbnz	r3, 8009ce4 <putchar+0x18>
 8009cda:	9001      	str	r0, [sp, #4]
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7fe fe09 	bl	80088f4 <__sinit>
 8009ce2:	9901      	ldr	r1, [sp, #4]
 8009ce4:	68a2      	ldr	r2, [r4, #8]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	b002      	add	sp, #8
 8009cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cee:	f003 ba3d 	b.w	800d16c <_putc_r>
 8009cf2:	bf00      	nop
 8009cf4:	2000002c 	.word	0x2000002c

08009cf8 <_puts_r>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	460e      	mov	r6, r1
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b118      	cbz	r0, 8009d08 <_puts_r+0x10>
 8009d00:	6983      	ldr	r3, [r0, #24]
 8009d02:	b90b      	cbnz	r3, 8009d08 <_puts_r+0x10>
 8009d04:	f7fe fdf6 	bl	80088f4 <__sinit>
 8009d08:	69ab      	ldr	r3, [r5, #24]
 8009d0a:	68ac      	ldr	r4, [r5, #8]
 8009d0c:	b913      	cbnz	r3, 8009d14 <_puts_r+0x1c>
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f7fe fdf0 	bl	80088f4 <__sinit>
 8009d14:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <_puts_r+0xd0>)
 8009d16:	429c      	cmp	r4, r3
 8009d18:	d120      	bne.n	8009d5c <_puts_r+0x64>
 8009d1a:	686c      	ldr	r4, [r5, #4]
 8009d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d1e:	07db      	lsls	r3, r3, #31
 8009d20:	d405      	bmi.n	8009d2e <_puts_r+0x36>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	0598      	lsls	r0, r3, #22
 8009d26:	d402      	bmi.n	8009d2e <_puts_r+0x36>
 8009d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2a:	f7fe feb8 	bl	8008a9e <__retarget_lock_acquire_recursive>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	0719      	lsls	r1, r3, #28
 8009d32:	d51d      	bpl.n	8009d70 <_puts_r+0x78>
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	b1db      	cbz	r3, 8009d70 <_puts_r+0x78>
 8009d38:	3e01      	subs	r6, #1
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d40:	3b01      	subs	r3, #1
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	bb39      	cbnz	r1, 8009d96 <_puts_r+0x9e>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da38      	bge.n	8009dbc <_puts_r+0xc4>
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	210a      	movs	r1, #10
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f001 f826 	bl	800ada0 <__swbuf_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d011      	beq.n	8009d7c <_puts_r+0x84>
 8009d58:	250a      	movs	r5, #10
 8009d5a:	e011      	b.n	8009d80 <_puts_r+0x88>
 8009d5c:	4b1b      	ldr	r3, [pc, #108]	; (8009dcc <_puts_r+0xd4>)
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	d101      	bne.n	8009d66 <_puts_r+0x6e>
 8009d62:	68ac      	ldr	r4, [r5, #8]
 8009d64:	e7da      	b.n	8009d1c <_puts_r+0x24>
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <_puts_r+0xd8>)
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	bf08      	it	eq
 8009d6c:	68ec      	ldreq	r4, [r5, #12]
 8009d6e:	e7d5      	b.n	8009d1c <_puts_r+0x24>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f001 f878 	bl	800ae68 <__swsetup_r>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d0dd      	beq.n	8009d38 <_puts_r+0x40>
 8009d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d82:	07da      	lsls	r2, r3, #31
 8009d84:	d405      	bmi.n	8009d92 <_puts_r+0x9a>
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	059b      	lsls	r3, r3, #22
 8009d8a:	d402      	bmi.n	8009d92 <_puts_r+0x9a>
 8009d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8e:	f7fe fe87 	bl	8008aa0 <__retarget_lock_release_recursive>
 8009d92:	4628      	mov	r0, r5
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da04      	bge.n	8009da4 <_puts_r+0xac>
 8009d9a:	69a2      	ldr	r2, [r4, #24]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	dc06      	bgt.n	8009dae <_puts_r+0xb6>
 8009da0:	290a      	cmp	r1, #10
 8009da2:	d004      	beq.n	8009dae <_puts_r+0xb6>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	6022      	str	r2, [r4, #0]
 8009daa:	7019      	strb	r1, [r3, #0]
 8009dac:	e7c5      	b.n	8009d3a <_puts_r+0x42>
 8009dae:	4622      	mov	r2, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 fff5 	bl	800ada0 <__swbuf_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	d1bf      	bne.n	8009d3a <_puts_r+0x42>
 8009dba:	e7df      	b.n	8009d7c <_puts_r+0x84>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	250a      	movs	r5, #10
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	6022      	str	r2, [r4, #0]
 8009dc4:	701d      	strb	r5, [r3, #0]
 8009dc6:	e7db      	b.n	8009d80 <_puts_r+0x88>
 8009dc8:	0800e074 	.word	0x0800e074
 8009dcc:	0800e094 	.word	0x0800e094
 8009dd0:	0800e054 	.word	0x0800e054

08009dd4 <puts>:
 8009dd4:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <puts+0xc>)
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f7ff bf8d 	b.w	8009cf8 <_puts_r>
 8009dde:	bf00      	nop
 8009de0:	2000002c 	.word	0x2000002c

08009de4 <_sbrk_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d06      	ldr	r5, [pc, #24]	; (8009e00 <_sbrk_r+0x1c>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	f7f9 fd28 	bl	8003844 <_sbrk>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_sbrk_r+0x1a>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_sbrk_r+0x1a>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	2000089c 	.word	0x2000089c

08009e04 <_raise_r>:
 8009e04:	291f      	cmp	r1, #31
 8009e06:	b538      	push	{r3, r4, r5, lr}
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	d904      	bls.n	8009e18 <_raise_r+0x14>
 8009e0e:	2316      	movs	r3, #22
 8009e10:	6003      	str	r3, [r0, #0]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e1a:	b112      	cbz	r2, 8009e22 <_raise_r+0x1e>
 8009e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e20:	b94b      	cbnz	r3, 8009e36 <_raise_r+0x32>
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 f830 	bl	8009e88 <_getpid_r>
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e32:	f000 b817 	b.w	8009e64 <_kill_r>
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d00a      	beq.n	8009e50 <_raise_r+0x4c>
 8009e3a:	1c59      	adds	r1, r3, #1
 8009e3c:	d103      	bne.n	8009e46 <_raise_r+0x42>
 8009e3e:	2316      	movs	r3, #22
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	2001      	movs	r0, #1
 8009e44:	e7e7      	b.n	8009e16 <_raise_r+0x12>
 8009e46:	2400      	movs	r4, #0
 8009e48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	4798      	blx	r3
 8009e50:	2000      	movs	r0, #0
 8009e52:	e7e0      	b.n	8009e16 <_raise_r+0x12>

08009e54 <raise>:
 8009e54:	4b02      	ldr	r3, [pc, #8]	; (8009e60 <raise+0xc>)
 8009e56:	4601      	mov	r1, r0
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	f7ff bfd3 	b.w	8009e04 <_raise_r>
 8009e5e:	bf00      	nop
 8009e60:	2000002c 	.word	0x2000002c

08009e64 <_kill_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d07      	ldr	r5, [pc, #28]	; (8009e84 <_kill_r+0x20>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	4611      	mov	r1, r2
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	f7f9 fc7c 	bl	800376e <_kill>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	d102      	bne.n	8009e80 <_kill_r+0x1c>
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	b103      	cbz	r3, 8009e80 <_kill_r+0x1c>
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	bf00      	nop
 8009e84:	2000089c 	.word	0x2000089c

08009e88 <_getpid_r>:
 8009e88:	f7f9 bc69 	b.w	800375e <_getpid>

08009e8c <siprintf>:
 8009e8c:	b40e      	push	{r1, r2, r3}
 8009e8e:	b500      	push	{lr}
 8009e90:	b09c      	sub	sp, #112	; 0x70
 8009e92:	ab1d      	add	r3, sp, #116	; 0x74
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e9c:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <siprintf+0x38>)
 8009e9e:	9107      	str	r1, [sp, #28]
 8009ea0:	9104      	str	r1, [sp, #16]
 8009ea2:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <siprintf+0x3c>)
 8009ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea8:	9105      	str	r1, [sp, #20]
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	a902      	add	r1, sp, #8
 8009eb0:	f003 f85c 	bl	800cf6c <_svfiprintf_r>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	b01c      	add	sp, #112	; 0x70
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	2000002c 	.word	0x2000002c
 8009ec8:	ffff0208 	.word	0xffff0208

08009ecc <__sread>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed4:	f003 f992 	bl	800d1fc <_read_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	bfab      	itete	ge
 8009edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ede:	89a3      	ldrhlt	r3, [r4, #12]
 8009ee0:	181b      	addge	r3, r3, r0
 8009ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ee6:	bfac      	ite	ge
 8009ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eea:	81a3      	strhlt	r3, [r4, #12]
 8009eec:	bd10      	pop	{r4, pc}

08009eee <__swrite>:
 8009eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	898b      	ldrh	r3, [r1, #12]
 8009ef6:	05db      	lsls	r3, r3, #23
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	4616      	mov	r6, r2
 8009efe:	d505      	bpl.n	8009f0c <__swrite+0x1e>
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	2302      	movs	r3, #2
 8009f06:	2200      	movs	r2, #0
 8009f08:	f002 fa38 	bl	800c37c <_lseek_r>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	4632      	mov	r2, r6
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f22:	f000 bf8f 	b.w	800ae44 <_write_r>

08009f26 <__sseek>:
 8009f26:	b510      	push	{r4, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2e:	f002 fa25 	bl	800c37c <_lseek_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	bf15      	itete	ne
 8009f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f42:	81a3      	strheq	r3, [r4, #12]
 8009f44:	bf18      	it	ne
 8009f46:	81a3      	strhne	r3, [r4, #12]
 8009f48:	bd10      	pop	{r4, pc}

08009f4a <__sclose>:
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f001 b817 	b.w	800af80 <_close_r>

08009f52 <strcpy>:
 8009f52:	4603      	mov	r3, r0
 8009f54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f58:	f803 2b01 	strb.w	r2, [r3], #1
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	d1f9      	bne.n	8009f54 <strcpy+0x2>
 8009f60:	4770      	bx	lr

08009f62 <strstr>:
 8009f62:	780a      	ldrb	r2, [r1, #0]
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	b96a      	cbnz	r2, 8009f84 <strstr+0x22>
 8009f68:	bd70      	pop	{r4, r5, r6, pc}
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d109      	bne.n	8009f82 <strstr+0x20>
 8009f6e:	460c      	mov	r4, r1
 8009f70:	4605      	mov	r5, r0
 8009f72:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0f6      	beq.n	8009f68 <strstr+0x6>
 8009f7a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009f7e:	429e      	cmp	r6, r3
 8009f80:	d0f7      	beq.n	8009f72 <strstr+0x10>
 8009f82:	3001      	adds	r0, #1
 8009f84:	7803      	ldrb	r3, [r0, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1ef      	bne.n	8009f6a <strstr+0x8>
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	e7ec      	b.n	8009f68 <strstr+0x6>

08009f8e <sulp>:
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	ec45 4b10 	vmov	d0, r4, r5
 8009f98:	4616      	mov	r6, r2
 8009f9a:	f002 fdf7 	bl	800cb8c <__ulp>
 8009f9e:	ec51 0b10 	vmov	r0, r1, d0
 8009fa2:	b17e      	cbz	r6, 8009fc4 <sulp+0x36>
 8009fa4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dd09      	ble.n	8009fc4 <sulp+0x36>
 8009fb0:	051b      	lsls	r3, r3, #20
 8009fb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009fb6:	2400      	movs	r4, #0
 8009fb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	f7f6 fb4c 	bl	800065c <__aeabi_dmul>
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fc8 <_strtod_l>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	ed2d 8b02 	vpush	{d8}
 8009fd0:	b09d      	sub	sp, #116	; 0x74
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9318      	str	r3, [sp, #96]	; 0x60
 8009fd8:	4ba2      	ldr	r3, [pc, #648]	; (800a264 <_strtod_l+0x29c>)
 8009fda:	9213      	str	r2, [sp, #76]	; 0x4c
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	4688      	mov	r8, r1
 8009fe6:	f7f6 f975 	bl	80002d4 <strlen>
 8009fea:	f04f 0a00 	mov.w	sl, #0
 8009fee:	4605      	mov	r5, r0
 8009ff0:	f04f 0b00 	mov.w	fp, #0
 8009ff4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ffa:	781a      	ldrb	r2, [r3, #0]
 8009ffc:	2a2b      	cmp	r2, #43	; 0x2b
 8009ffe:	d04e      	beq.n	800a09e <_strtod_l+0xd6>
 800a000:	d83b      	bhi.n	800a07a <_strtod_l+0xb2>
 800a002:	2a0d      	cmp	r2, #13
 800a004:	d834      	bhi.n	800a070 <_strtod_l+0xa8>
 800a006:	2a08      	cmp	r2, #8
 800a008:	d834      	bhi.n	800a074 <_strtod_l+0xac>
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d03e      	beq.n	800a08c <_strtod_l+0xc4>
 800a00e:	2300      	movs	r3, #0
 800a010:	930a      	str	r3, [sp, #40]	; 0x28
 800a012:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a014:	7833      	ldrb	r3, [r6, #0]
 800a016:	2b30      	cmp	r3, #48	; 0x30
 800a018:	f040 80b0 	bne.w	800a17c <_strtod_l+0x1b4>
 800a01c:	7873      	ldrb	r3, [r6, #1]
 800a01e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a022:	2b58      	cmp	r3, #88	; 0x58
 800a024:	d168      	bne.n	800a0f8 <_strtod_l+0x130>
 800a026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	ab18      	add	r3, sp, #96	; 0x60
 800a02c:	9702      	str	r7, [sp, #8]
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	4a8d      	ldr	r2, [pc, #564]	; (800a268 <_strtod_l+0x2a0>)
 800a032:	ab19      	add	r3, sp, #100	; 0x64
 800a034:	a917      	add	r1, sp, #92	; 0x5c
 800a036:	4620      	mov	r0, r4
 800a038:	f001 fe94 	bl	800bd64 <__gethex>
 800a03c:	f010 0707 	ands.w	r7, r0, #7
 800a040:	4605      	mov	r5, r0
 800a042:	d005      	beq.n	800a050 <_strtod_l+0x88>
 800a044:	2f06      	cmp	r7, #6
 800a046:	d12c      	bne.n	800a0a2 <_strtod_l+0xda>
 800a048:	3601      	adds	r6, #1
 800a04a:	2300      	movs	r3, #0
 800a04c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a04e:	930a      	str	r3, [sp, #40]	; 0x28
 800a050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 8590 	bne.w	800ab78 <_strtod_l+0xbb0>
 800a058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05a:	b1eb      	cbz	r3, 800a098 <_strtod_l+0xd0>
 800a05c:	4652      	mov	r2, sl
 800a05e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a062:	ec43 2b10 	vmov	d0, r2, r3
 800a066:	b01d      	add	sp, #116	; 0x74
 800a068:	ecbd 8b02 	vpop	{d8}
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	2a20      	cmp	r2, #32
 800a072:	d1cc      	bne.n	800a00e <_strtod_l+0x46>
 800a074:	3301      	adds	r3, #1
 800a076:	9317      	str	r3, [sp, #92]	; 0x5c
 800a078:	e7be      	b.n	8009ff8 <_strtod_l+0x30>
 800a07a:	2a2d      	cmp	r2, #45	; 0x2d
 800a07c:	d1c7      	bne.n	800a00e <_strtod_l+0x46>
 800a07e:	2201      	movs	r2, #1
 800a080:	920a      	str	r2, [sp, #40]	; 0x28
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	9217      	str	r2, [sp, #92]	; 0x5c
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1c2      	bne.n	800a012 <_strtod_l+0x4a>
 800a08c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a08e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a092:	2b00      	cmp	r3, #0
 800a094:	f040 856e 	bne.w	800ab74 <_strtod_l+0xbac>
 800a098:	4652      	mov	r2, sl
 800a09a:	465b      	mov	r3, fp
 800a09c:	e7e1      	b.n	800a062 <_strtod_l+0x9a>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	e7ee      	b.n	800a080 <_strtod_l+0xb8>
 800a0a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0a4:	b13a      	cbz	r2, 800a0b6 <_strtod_l+0xee>
 800a0a6:	2135      	movs	r1, #53	; 0x35
 800a0a8:	a81a      	add	r0, sp, #104	; 0x68
 800a0aa:	f002 fe7a 	bl	800cda2 <__copybits>
 800a0ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f002 fa39 	bl	800c528 <_Bfree>
 800a0b6:	3f01      	subs	r7, #1
 800a0b8:	2f04      	cmp	r7, #4
 800a0ba:	d806      	bhi.n	800a0ca <_strtod_l+0x102>
 800a0bc:	e8df f007 	tbb	[pc, r7]
 800a0c0:	1714030a 	.word	0x1714030a
 800a0c4:	0a          	.byte	0x0a
 800a0c5:	00          	.byte	0x00
 800a0c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a0ca:	0728      	lsls	r0, r5, #28
 800a0cc:	d5c0      	bpl.n	800a050 <_strtod_l+0x88>
 800a0ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a0d2:	e7bd      	b.n	800a050 <_strtod_l+0x88>
 800a0d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a0d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0e6:	e7f0      	b.n	800a0ca <_strtod_l+0x102>
 800a0e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a26c <_strtod_l+0x2a4>
 800a0ec:	e7ed      	b.n	800a0ca <_strtod_l+0x102>
 800a0ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a0f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a0f6:	e7e8      	b.n	800a0ca <_strtod_l+0x102>
 800a0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b30      	cmp	r3, #48	; 0x30
 800a102:	d0f9      	beq.n	800a0f8 <_strtod_l+0x130>
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0a3      	beq.n	800a050 <_strtod_l+0x88>
 800a108:	2301      	movs	r3, #1
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a112:	9308      	str	r3, [sp, #32]
 800a114:	f8cd 901c 	str.w	r9, [sp, #28]
 800a118:	464f      	mov	r7, r9
 800a11a:	220a      	movs	r2, #10
 800a11c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a11e:	7806      	ldrb	r6, [r0, #0]
 800a120:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a124:	b2d9      	uxtb	r1, r3
 800a126:	2909      	cmp	r1, #9
 800a128:	d92a      	bls.n	800a180 <_strtod_l+0x1b8>
 800a12a:	9905      	ldr	r1, [sp, #20]
 800a12c:	462a      	mov	r2, r5
 800a12e:	f003 f87f 	bl	800d230 <strncmp>
 800a132:	b398      	cbz	r0, 800a19c <_strtod_l+0x1d4>
 800a134:	2000      	movs	r0, #0
 800a136:	4632      	mov	r2, r6
 800a138:	463d      	mov	r5, r7
 800a13a:	9005      	str	r0, [sp, #20]
 800a13c:	4603      	mov	r3, r0
 800a13e:	2a65      	cmp	r2, #101	; 0x65
 800a140:	d001      	beq.n	800a146 <_strtod_l+0x17e>
 800a142:	2a45      	cmp	r2, #69	; 0x45
 800a144:	d118      	bne.n	800a178 <_strtod_l+0x1b0>
 800a146:	b91d      	cbnz	r5, 800a150 <_strtod_l+0x188>
 800a148:	9a04      	ldr	r2, [sp, #16]
 800a14a:	4302      	orrs	r2, r0
 800a14c:	d09e      	beq.n	800a08c <_strtod_l+0xc4>
 800a14e:	2500      	movs	r5, #0
 800a150:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a154:	f108 0201 	add.w	r2, r8, #1
 800a158:	9217      	str	r2, [sp, #92]	; 0x5c
 800a15a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a15e:	2a2b      	cmp	r2, #43	; 0x2b
 800a160:	d075      	beq.n	800a24e <_strtod_l+0x286>
 800a162:	2a2d      	cmp	r2, #45	; 0x2d
 800a164:	d07b      	beq.n	800a25e <_strtod_l+0x296>
 800a166:	f04f 0c00 	mov.w	ip, #0
 800a16a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a16e:	2909      	cmp	r1, #9
 800a170:	f240 8082 	bls.w	800a278 <_strtod_l+0x2b0>
 800a174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a178:	2600      	movs	r6, #0
 800a17a:	e09d      	b.n	800a2b8 <_strtod_l+0x2f0>
 800a17c:	2300      	movs	r3, #0
 800a17e:	e7c4      	b.n	800a10a <_strtod_l+0x142>
 800a180:	2f08      	cmp	r7, #8
 800a182:	bfd8      	it	le
 800a184:	9907      	ldrle	r1, [sp, #28]
 800a186:	f100 0001 	add.w	r0, r0, #1
 800a18a:	bfda      	itte	le
 800a18c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a190:	9307      	strle	r3, [sp, #28]
 800a192:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a196:	3701      	adds	r7, #1
 800a198:	9017      	str	r0, [sp, #92]	; 0x5c
 800a19a:	e7bf      	b.n	800a11c <_strtod_l+0x154>
 800a19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a19e:	195a      	adds	r2, r3, r5
 800a1a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1a2:	5d5a      	ldrb	r2, [r3, r5]
 800a1a4:	2f00      	cmp	r7, #0
 800a1a6:	d037      	beq.n	800a218 <_strtod_l+0x250>
 800a1a8:	9005      	str	r0, [sp, #20]
 800a1aa:	463d      	mov	r5, r7
 800a1ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a1b0:	2b09      	cmp	r3, #9
 800a1b2:	d912      	bls.n	800a1da <_strtod_l+0x212>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e7c2      	b.n	800a13e <_strtod_l+0x176>
 800a1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1be:	785a      	ldrb	r2, [r3, #1]
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	2a30      	cmp	r2, #48	; 0x30
 800a1c4:	d0f8      	beq.n	800a1b8 <_strtod_l+0x1f0>
 800a1c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1ca:	2b08      	cmp	r3, #8
 800a1cc:	f200 84d9 	bhi.w	800ab82 <_strtod_l+0xbba>
 800a1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1d2:	9005      	str	r0, [sp, #20]
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	9308      	str	r3, [sp, #32]
 800a1d8:	4605      	mov	r5, r0
 800a1da:	3a30      	subs	r2, #48	; 0x30
 800a1dc:	f100 0301 	add.w	r3, r0, #1
 800a1e0:	d014      	beq.n	800a20c <_strtod_l+0x244>
 800a1e2:	9905      	ldr	r1, [sp, #20]
 800a1e4:	4419      	add	r1, r3
 800a1e6:	9105      	str	r1, [sp, #20]
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	eb00 0e05 	add.w	lr, r0, r5
 800a1ee:	210a      	movs	r1, #10
 800a1f0:	4573      	cmp	r3, lr
 800a1f2:	d113      	bne.n	800a21c <_strtod_l+0x254>
 800a1f4:	182b      	adds	r3, r5, r0
 800a1f6:	2b08      	cmp	r3, #8
 800a1f8:	f105 0501 	add.w	r5, r5, #1
 800a1fc:	4405      	add	r5, r0
 800a1fe:	dc1c      	bgt.n	800a23a <_strtod_l+0x272>
 800a200:	9907      	ldr	r1, [sp, #28]
 800a202:	230a      	movs	r3, #10
 800a204:	fb03 2301 	mla	r3, r3, r1, r2
 800a208:	9307      	str	r3, [sp, #28]
 800a20a:	2300      	movs	r3, #0
 800a20c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a20e:	1c51      	adds	r1, r2, #1
 800a210:	9117      	str	r1, [sp, #92]	; 0x5c
 800a212:	7852      	ldrb	r2, [r2, #1]
 800a214:	4618      	mov	r0, r3
 800a216:	e7c9      	b.n	800a1ac <_strtod_l+0x1e4>
 800a218:	4638      	mov	r0, r7
 800a21a:	e7d2      	b.n	800a1c2 <_strtod_l+0x1fa>
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	dc04      	bgt.n	800a22a <_strtod_l+0x262>
 800a220:	9e07      	ldr	r6, [sp, #28]
 800a222:	434e      	muls	r6, r1
 800a224:	9607      	str	r6, [sp, #28]
 800a226:	3301      	adds	r3, #1
 800a228:	e7e2      	b.n	800a1f0 <_strtod_l+0x228>
 800a22a:	f103 0c01 	add.w	ip, r3, #1
 800a22e:	f1bc 0f10 	cmp.w	ip, #16
 800a232:	bfd8      	it	le
 800a234:	fb01 f909 	mulle.w	r9, r1, r9
 800a238:	e7f5      	b.n	800a226 <_strtod_l+0x25e>
 800a23a:	2d10      	cmp	r5, #16
 800a23c:	bfdc      	itt	le
 800a23e:	230a      	movle	r3, #10
 800a240:	fb03 2909 	mlale	r9, r3, r9, r2
 800a244:	e7e1      	b.n	800a20a <_strtod_l+0x242>
 800a246:	2300      	movs	r3, #0
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	2301      	movs	r3, #1
 800a24c:	e77c      	b.n	800a148 <_strtod_l+0x180>
 800a24e:	f04f 0c00 	mov.w	ip, #0
 800a252:	f108 0202 	add.w	r2, r8, #2
 800a256:	9217      	str	r2, [sp, #92]	; 0x5c
 800a258:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a25c:	e785      	b.n	800a16a <_strtod_l+0x1a2>
 800a25e:	f04f 0c01 	mov.w	ip, #1
 800a262:	e7f6      	b.n	800a252 <_strtod_l+0x28a>
 800a264:	0800e3e8 	.word	0x0800e3e8
 800a268:	0800e104 	.word	0x0800e104
 800a26c:	7ff00000 	.word	0x7ff00000
 800a270:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a272:	1c51      	adds	r1, r2, #1
 800a274:	9117      	str	r1, [sp, #92]	; 0x5c
 800a276:	7852      	ldrb	r2, [r2, #1]
 800a278:	2a30      	cmp	r2, #48	; 0x30
 800a27a:	d0f9      	beq.n	800a270 <_strtod_l+0x2a8>
 800a27c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a280:	2908      	cmp	r1, #8
 800a282:	f63f af79 	bhi.w	800a178 <_strtod_l+0x1b0>
 800a286:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a28a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a28c:	9206      	str	r2, [sp, #24]
 800a28e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a290:	1c51      	adds	r1, r2, #1
 800a292:	9117      	str	r1, [sp, #92]	; 0x5c
 800a294:	7852      	ldrb	r2, [r2, #1]
 800a296:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a29a:	2e09      	cmp	r6, #9
 800a29c:	d937      	bls.n	800a30e <_strtod_l+0x346>
 800a29e:	9e06      	ldr	r6, [sp, #24]
 800a2a0:	1b89      	subs	r1, r1, r6
 800a2a2:	2908      	cmp	r1, #8
 800a2a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a2a8:	dc02      	bgt.n	800a2b0 <_strtod_l+0x2e8>
 800a2aa:	4576      	cmp	r6, lr
 800a2ac:	bfa8      	it	ge
 800a2ae:	4676      	movge	r6, lr
 800a2b0:	f1bc 0f00 	cmp.w	ip, #0
 800a2b4:	d000      	beq.n	800a2b8 <_strtod_l+0x2f0>
 800a2b6:	4276      	negs	r6, r6
 800a2b8:	2d00      	cmp	r5, #0
 800a2ba:	d14d      	bne.n	800a358 <_strtod_l+0x390>
 800a2bc:	9904      	ldr	r1, [sp, #16]
 800a2be:	4301      	orrs	r1, r0
 800a2c0:	f47f aec6 	bne.w	800a050 <_strtod_l+0x88>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f47f aee1 	bne.w	800a08c <_strtod_l+0xc4>
 800a2ca:	2a69      	cmp	r2, #105	; 0x69
 800a2cc:	d027      	beq.n	800a31e <_strtod_l+0x356>
 800a2ce:	dc24      	bgt.n	800a31a <_strtod_l+0x352>
 800a2d0:	2a49      	cmp	r2, #73	; 0x49
 800a2d2:	d024      	beq.n	800a31e <_strtod_l+0x356>
 800a2d4:	2a4e      	cmp	r2, #78	; 0x4e
 800a2d6:	f47f aed9 	bne.w	800a08c <_strtod_l+0xc4>
 800a2da:	499f      	ldr	r1, [pc, #636]	; (800a558 <_strtod_l+0x590>)
 800a2dc:	a817      	add	r0, sp, #92	; 0x5c
 800a2de:	f001 ff99 	bl	800c214 <__match>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f43f aed2 	beq.w	800a08c <_strtod_l+0xc4>
 800a2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b28      	cmp	r3, #40	; 0x28
 800a2ee:	d12d      	bne.n	800a34c <_strtod_l+0x384>
 800a2f0:	499a      	ldr	r1, [pc, #616]	; (800a55c <_strtod_l+0x594>)
 800a2f2:	aa1a      	add	r2, sp, #104	; 0x68
 800a2f4:	a817      	add	r0, sp, #92	; 0x5c
 800a2f6:	f001 ffa1 	bl	800c23c <__hexnan>
 800a2fa:	2805      	cmp	r0, #5
 800a2fc:	d126      	bne.n	800a34c <_strtod_l+0x384>
 800a2fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a300:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a304:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a308:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a30c:	e6a0      	b.n	800a050 <_strtod_l+0x88>
 800a30e:	210a      	movs	r1, #10
 800a310:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a314:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a318:	e7b9      	b.n	800a28e <_strtod_l+0x2c6>
 800a31a:	2a6e      	cmp	r2, #110	; 0x6e
 800a31c:	e7db      	b.n	800a2d6 <_strtod_l+0x30e>
 800a31e:	4990      	ldr	r1, [pc, #576]	; (800a560 <_strtod_l+0x598>)
 800a320:	a817      	add	r0, sp, #92	; 0x5c
 800a322:	f001 ff77 	bl	800c214 <__match>
 800a326:	2800      	cmp	r0, #0
 800a328:	f43f aeb0 	beq.w	800a08c <_strtod_l+0xc4>
 800a32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a32e:	498d      	ldr	r1, [pc, #564]	; (800a564 <_strtod_l+0x59c>)
 800a330:	3b01      	subs	r3, #1
 800a332:	a817      	add	r0, sp, #92	; 0x5c
 800a334:	9317      	str	r3, [sp, #92]	; 0x5c
 800a336:	f001 ff6d 	bl	800c214 <__match>
 800a33a:	b910      	cbnz	r0, 800a342 <_strtod_l+0x37a>
 800a33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a33e:	3301      	adds	r3, #1
 800a340:	9317      	str	r3, [sp, #92]	; 0x5c
 800a342:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a574 <_strtod_l+0x5ac>
 800a346:	f04f 0a00 	mov.w	sl, #0
 800a34a:	e681      	b.n	800a050 <_strtod_l+0x88>
 800a34c:	4886      	ldr	r0, [pc, #536]	; (800a568 <_strtod_l+0x5a0>)
 800a34e:	f002 ff67 	bl	800d220 <nan>
 800a352:	ec5b ab10 	vmov	sl, fp, d0
 800a356:	e67b      	b.n	800a050 <_strtod_l+0x88>
 800a358:	9b05      	ldr	r3, [sp, #20]
 800a35a:	9807      	ldr	r0, [sp, #28]
 800a35c:	1af3      	subs	r3, r6, r3
 800a35e:	2f00      	cmp	r7, #0
 800a360:	bf08      	it	eq
 800a362:	462f      	moveq	r7, r5
 800a364:	2d10      	cmp	r5, #16
 800a366:	9306      	str	r3, [sp, #24]
 800a368:	46a8      	mov	r8, r5
 800a36a:	bfa8      	it	ge
 800a36c:	f04f 0810 	movge.w	r8, #16
 800a370:	f7f6 f8fa 	bl	8000568 <__aeabi_ui2d>
 800a374:	2d09      	cmp	r5, #9
 800a376:	4682      	mov	sl, r0
 800a378:	468b      	mov	fp, r1
 800a37a:	dd13      	ble.n	800a3a4 <_strtod_l+0x3dc>
 800a37c:	4b7b      	ldr	r3, [pc, #492]	; (800a56c <_strtod_l+0x5a4>)
 800a37e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a382:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a386:	f7f6 f969 	bl	800065c <__aeabi_dmul>
 800a38a:	4682      	mov	sl, r0
 800a38c:	4648      	mov	r0, r9
 800a38e:	468b      	mov	fp, r1
 800a390:	f7f6 f8ea 	bl	8000568 <__aeabi_ui2d>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4650      	mov	r0, sl
 800a39a:	4659      	mov	r1, fp
 800a39c:	f7f5 ffa8 	bl	80002f0 <__adddf3>
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	468b      	mov	fp, r1
 800a3a4:	2d0f      	cmp	r5, #15
 800a3a6:	dc38      	bgt.n	800a41a <_strtod_l+0x452>
 800a3a8:	9b06      	ldr	r3, [sp, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f43f ae50 	beq.w	800a050 <_strtod_l+0x88>
 800a3b0:	dd24      	ble.n	800a3fc <_strtod_l+0x434>
 800a3b2:	2b16      	cmp	r3, #22
 800a3b4:	dc0b      	bgt.n	800a3ce <_strtod_l+0x406>
 800a3b6:	496d      	ldr	r1, [pc, #436]	; (800a56c <_strtod_l+0x5a4>)
 800a3b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	465b      	mov	r3, fp
 800a3c4:	f7f6 f94a 	bl	800065c <__aeabi_dmul>
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	468b      	mov	fp, r1
 800a3cc:	e640      	b.n	800a050 <_strtod_l+0x88>
 800a3ce:	9a06      	ldr	r2, [sp, #24]
 800a3d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	db20      	blt.n	800a41a <_strtod_l+0x452>
 800a3d8:	4c64      	ldr	r4, [pc, #400]	; (800a56c <_strtod_l+0x5a4>)
 800a3da:	f1c5 050f 	rsb	r5, r5, #15
 800a3de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3e2:	4652      	mov	r2, sl
 800a3e4:	465b      	mov	r3, fp
 800a3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ea:	f7f6 f937 	bl	800065c <__aeabi_dmul>
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	1b5d      	subs	r5, r3, r5
 800a3f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3fa:	e7e3      	b.n	800a3c4 <_strtod_l+0x3fc>
 800a3fc:	9b06      	ldr	r3, [sp, #24]
 800a3fe:	3316      	adds	r3, #22
 800a400:	db0b      	blt.n	800a41a <_strtod_l+0x452>
 800a402:	9b05      	ldr	r3, [sp, #20]
 800a404:	1b9e      	subs	r6, r3, r6
 800a406:	4b59      	ldr	r3, [pc, #356]	; (800a56c <_strtod_l+0x5a4>)
 800a408:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a40c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a410:	4650      	mov	r0, sl
 800a412:	4659      	mov	r1, fp
 800a414:	f7f6 fa4c 	bl	80008b0 <__aeabi_ddiv>
 800a418:	e7d6      	b.n	800a3c8 <_strtod_l+0x400>
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	eba5 0808 	sub.w	r8, r5, r8
 800a420:	4498      	add	r8, r3
 800a422:	f1b8 0f00 	cmp.w	r8, #0
 800a426:	dd74      	ble.n	800a512 <_strtod_l+0x54a>
 800a428:	f018 030f 	ands.w	r3, r8, #15
 800a42c:	d00a      	beq.n	800a444 <_strtod_l+0x47c>
 800a42e:	494f      	ldr	r1, [pc, #316]	; (800a56c <_strtod_l+0x5a4>)
 800a430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43c:	f7f6 f90e 	bl	800065c <__aeabi_dmul>
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	f038 080f 	bics.w	r8, r8, #15
 800a448:	d04f      	beq.n	800a4ea <_strtod_l+0x522>
 800a44a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a44e:	dd22      	ble.n	800a496 <_strtod_l+0x4ce>
 800a450:	2500      	movs	r5, #0
 800a452:	462e      	mov	r6, r5
 800a454:	9507      	str	r5, [sp, #28]
 800a456:	9505      	str	r5, [sp, #20]
 800a458:	2322      	movs	r3, #34	; 0x22
 800a45a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a574 <_strtod_l+0x5ac>
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	f04f 0a00 	mov.w	sl, #0
 800a464:	9b07      	ldr	r3, [sp, #28]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f43f adf2 	beq.w	800a050 <_strtod_l+0x88>
 800a46c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a46e:	4620      	mov	r0, r4
 800a470:	f002 f85a 	bl	800c528 <_Bfree>
 800a474:	9905      	ldr	r1, [sp, #20]
 800a476:	4620      	mov	r0, r4
 800a478:	f002 f856 	bl	800c528 <_Bfree>
 800a47c:	4631      	mov	r1, r6
 800a47e:	4620      	mov	r0, r4
 800a480:	f002 f852 	bl	800c528 <_Bfree>
 800a484:	9907      	ldr	r1, [sp, #28]
 800a486:	4620      	mov	r0, r4
 800a488:	f002 f84e 	bl	800c528 <_Bfree>
 800a48c:	4629      	mov	r1, r5
 800a48e:	4620      	mov	r0, r4
 800a490:	f002 f84a 	bl	800c528 <_Bfree>
 800a494:	e5dc      	b.n	800a050 <_strtod_l+0x88>
 800a496:	4b36      	ldr	r3, [pc, #216]	; (800a570 <_strtod_l+0x5a8>)
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	2300      	movs	r3, #0
 800a49c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	4659      	mov	r1, fp
 800a4a4:	4699      	mov	r9, r3
 800a4a6:	f1b8 0f01 	cmp.w	r8, #1
 800a4aa:	dc21      	bgt.n	800a4f0 <_strtod_l+0x528>
 800a4ac:	b10b      	cbz	r3, 800a4b2 <_strtod_l+0x4ea>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	468b      	mov	fp, r1
 800a4b2:	4b2f      	ldr	r3, [pc, #188]	; (800a570 <_strtod_l+0x5a8>)
 800a4b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a4b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a4bc:	4652      	mov	r2, sl
 800a4be:	465b      	mov	r3, fp
 800a4c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a4c4:	f7f6 f8ca 	bl	800065c <__aeabi_dmul>
 800a4c8:	4b2a      	ldr	r3, [pc, #168]	; (800a574 <_strtod_l+0x5ac>)
 800a4ca:	460a      	mov	r2, r1
 800a4cc:	400b      	ands	r3, r1
 800a4ce:	492a      	ldr	r1, [pc, #168]	; (800a578 <_strtod_l+0x5b0>)
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	d8bc      	bhi.n	800a450 <_strtod_l+0x488>
 800a4d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4da:	428b      	cmp	r3, r1
 800a4dc:	bf86      	itte	hi
 800a4de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a57c <_strtod_l+0x5b4>
 800a4e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a4e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	e084      	b.n	800a5fa <_strtod_l+0x632>
 800a4f0:	f018 0f01 	tst.w	r8, #1
 800a4f4:	d005      	beq.n	800a502 <_strtod_l+0x53a>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f6 f8ae 	bl	800065c <__aeabi_dmul>
 800a500:	2301      	movs	r3, #1
 800a502:	9a04      	ldr	r2, [sp, #16]
 800a504:	3208      	adds	r2, #8
 800a506:	f109 0901 	add.w	r9, r9, #1
 800a50a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a50e:	9204      	str	r2, [sp, #16]
 800a510:	e7c9      	b.n	800a4a6 <_strtod_l+0x4de>
 800a512:	d0ea      	beq.n	800a4ea <_strtod_l+0x522>
 800a514:	f1c8 0800 	rsb	r8, r8, #0
 800a518:	f018 020f 	ands.w	r2, r8, #15
 800a51c:	d00a      	beq.n	800a534 <_strtod_l+0x56c>
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <_strtod_l+0x5a4>)
 800a520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a524:	4650      	mov	r0, sl
 800a526:	4659      	mov	r1, fp
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f6 f9c0 	bl	80008b0 <__aeabi_ddiv>
 800a530:	4682      	mov	sl, r0
 800a532:	468b      	mov	fp, r1
 800a534:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a538:	d0d7      	beq.n	800a4ea <_strtod_l+0x522>
 800a53a:	f1b8 0f1f 	cmp.w	r8, #31
 800a53e:	dd1f      	ble.n	800a580 <_strtod_l+0x5b8>
 800a540:	2500      	movs	r5, #0
 800a542:	462e      	mov	r6, r5
 800a544:	9507      	str	r5, [sp, #28]
 800a546:	9505      	str	r5, [sp, #20]
 800a548:	2322      	movs	r3, #34	; 0x22
 800a54a:	f04f 0a00 	mov.w	sl, #0
 800a54e:	f04f 0b00 	mov.w	fp, #0
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	e786      	b.n	800a464 <_strtod_l+0x49c>
 800a556:	bf00      	nop
 800a558:	0800e0d6 	.word	0x0800e0d6
 800a55c:	0800e118 	.word	0x0800e118
 800a560:	0800e0ce 	.word	0x0800e0ce
 800a564:	0800e30c 	.word	0x0800e30c
 800a568:	0800e207 	.word	0x0800e207
 800a56c:	0800e480 	.word	0x0800e480
 800a570:	0800e458 	.word	0x0800e458
 800a574:	7ff00000 	.word	0x7ff00000
 800a578:	7ca00000 	.word	0x7ca00000
 800a57c:	7fefffff 	.word	0x7fefffff
 800a580:	f018 0310 	ands.w	r3, r8, #16
 800a584:	bf18      	it	ne
 800a586:	236a      	movne	r3, #106	; 0x6a
 800a588:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a938 <_strtod_l+0x970>
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	4650      	mov	r0, sl
 800a590:	4659      	mov	r1, fp
 800a592:	2300      	movs	r3, #0
 800a594:	f018 0f01 	tst.w	r8, #1
 800a598:	d004      	beq.n	800a5a4 <_strtod_l+0x5dc>
 800a59a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a59e:	f7f6 f85d 	bl	800065c <__aeabi_dmul>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a5a8:	f109 0908 	add.w	r9, r9, #8
 800a5ac:	d1f2      	bne.n	800a594 <_strtod_l+0x5cc>
 800a5ae:	b10b      	cbz	r3, 800a5b4 <_strtod_l+0x5ec>
 800a5b0:	4682      	mov	sl, r0
 800a5b2:	468b      	mov	fp, r1
 800a5b4:	9b04      	ldr	r3, [sp, #16]
 800a5b6:	b1c3      	cbz	r3, 800a5ea <_strtod_l+0x622>
 800a5b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a5bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	4659      	mov	r1, fp
 800a5c4:	dd11      	ble.n	800a5ea <_strtod_l+0x622>
 800a5c6:	2b1f      	cmp	r3, #31
 800a5c8:	f340 8124 	ble.w	800a814 <_strtod_l+0x84c>
 800a5cc:	2b34      	cmp	r3, #52	; 0x34
 800a5ce:	bfde      	ittt	le
 800a5d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a5d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a5d8:	fa03 f202 	lslle.w	r2, r3, r2
 800a5dc:	f04f 0a00 	mov.w	sl, #0
 800a5e0:	bfcc      	ite	gt
 800a5e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a5e6:	ea02 0b01 	andle.w	fp, r2, r1
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	4659      	mov	r1, fp
 800a5f2:	f7f6 fa9b 	bl	8000b2c <__aeabi_dcmpeq>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d1a2      	bne.n	800a540 <_strtod_l+0x578>
 800a5fa:	9b07      	ldr	r3, [sp, #28]
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	9908      	ldr	r1, [sp, #32]
 800a600:	462b      	mov	r3, r5
 800a602:	463a      	mov	r2, r7
 800a604:	4620      	mov	r0, r4
 800a606:	f001 fff7 	bl	800c5f8 <__s2b>
 800a60a:	9007      	str	r0, [sp, #28]
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f43f af1f 	beq.w	800a450 <_strtod_l+0x488>
 800a612:	9b05      	ldr	r3, [sp, #20]
 800a614:	1b9e      	subs	r6, r3, r6
 800a616:	9b06      	ldr	r3, [sp, #24]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bfb4      	ite	lt
 800a61c:	4633      	movlt	r3, r6
 800a61e:	2300      	movge	r3, #0
 800a620:	930c      	str	r3, [sp, #48]	; 0x30
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	2500      	movs	r5, #0
 800a626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a62a:	9312      	str	r3, [sp, #72]	; 0x48
 800a62c:	462e      	mov	r6, r5
 800a62e:	9b07      	ldr	r3, [sp, #28]
 800a630:	4620      	mov	r0, r4
 800a632:	6859      	ldr	r1, [r3, #4]
 800a634:	f001 ff38 	bl	800c4a8 <_Balloc>
 800a638:	9005      	str	r0, [sp, #20]
 800a63a:	2800      	cmp	r0, #0
 800a63c:	f43f af0c 	beq.w	800a458 <_strtod_l+0x490>
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	3202      	adds	r2, #2
 800a646:	f103 010c 	add.w	r1, r3, #12
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	300c      	adds	r0, #12
 800a64e:	f7fe fa41 	bl	8008ad4 <memcpy>
 800a652:	ec4b ab10 	vmov	d0, sl, fp
 800a656:	aa1a      	add	r2, sp, #104	; 0x68
 800a658:	a919      	add	r1, sp, #100	; 0x64
 800a65a:	4620      	mov	r0, r4
 800a65c:	f002 fb12 	bl	800cc84 <__d2b>
 800a660:	ec4b ab18 	vmov	d8, sl, fp
 800a664:	9018      	str	r0, [sp, #96]	; 0x60
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f aef6 	beq.w	800a458 <_strtod_l+0x490>
 800a66c:	2101      	movs	r1, #1
 800a66e:	4620      	mov	r0, r4
 800a670:	f002 f85c 	bl	800c72c <__i2b>
 800a674:	4606      	mov	r6, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	f43f aeee 	beq.w	800a458 <_strtod_l+0x490>
 800a67c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a67e:	9904      	ldr	r1, [sp, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfab      	itete	ge
 800a684:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a686:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a68a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a68e:	bfac      	ite	ge
 800a690:	eb03 0902 	addge.w	r9, r3, r2
 800a694:	1ad7      	sublt	r7, r2, r3
 800a696:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a698:	eba3 0801 	sub.w	r8, r3, r1
 800a69c:	4490      	add	r8, r2
 800a69e:	4ba1      	ldr	r3, [pc, #644]	; (800a924 <_strtod_l+0x95c>)
 800a6a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6a4:	4598      	cmp	r8, r3
 800a6a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6aa:	f280 80c7 	bge.w	800a83c <_strtod_l+0x874>
 800a6ae:	eba3 0308 	sub.w	r3, r3, r8
 800a6b2:	2b1f      	cmp	r3, #31
 800a6b4:	eba2 0203 	sub.w	r2, r2, r3
 800a6b8:	f04f 0101 	mov.w	r1, #1
 800a6bc:	f300 80b1 	bgt.w	800a822 <_strtod_l+0x85a>
 800a6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	eb09 0802 	add.w	r8, r9, r2
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	45c1      	cmp	r9, r8
 800a6d2:	4417      	add	r7, r2
 800a6d4:	441f      	add	r7, r3
 800a6d6:	464b      	mov	r3, r9
 800a6d8:	bfa8      	it	ge
 800a6da:	4643      	movge	r3, r8
 800a6dc:	42bb      	cmp	r3, r7
 800a6de:	bfa8      	it	ge
 800a6e0:	463b      	movge	r3, r7
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfc2      	ittt	gt
 800a6e6:	eba8 0803 	subgt.w	r8, r8, r3
 800a6ea:	1aff      	subgt	r7, r7, r3
 800a6ec:	eba9 0903 	subgt.w	r9, r9, r3
 800a6f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd17      	ble.n	800a726 <_strtod_l+0x75e>
 800a6f6:	4631      	mov	r1, r6
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f002 f8d6 	bl	800c8ac <__pow5mult>
 800a700:	4606      	mov	r6, r0
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f aea8 	beq.w	800a458 <_strtod_l+0x490>
 800a708:	4601      	mov	r1, r0
 800a70a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a70c:	4620      	mov	r0, r4
 800a70e:	f002 f823 	bl	800c758 <__multiply>
 800a712:	900b      	str	r0, [sp, #44]	; 0x2c
 800a714:	2800      	cmp	r0, #0
 800a716:	f43f ae9f 	beq.w	800a458 <_strtod_l+0x490>
 800a71a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 ff03 	bl	800c528 <_Bfree>
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	9318      	str	r3, [sp, #96]	; 0x60
 800a726:	f1b8 0f00 	cmp.w	r8, #0
 800a72a:	f300 808c 	bgt.w	800a846 <_strtod_l+0x87e>
 800a72e:	9b06      	ldr	r3, [sp, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	dd08      	ble.n	800a746 <_strtod_l+0x77e>
 800a734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a736:	9905      	ldr	r1, [sp, #20]
 800a738:	4620      	mov	r0, r4
 800a73a:	f002 f8b7 	bl	800c8ac <__pow5mult>
 800a73e:	9005      	str	r0, [sp, #20]
 800a740:	2800      	cmp	r0, #0
 800a742:	f43f ae89 	beq.w	800a458 <_strtod_l+0x490>
 800a746:	2f00      	cmp	r7, #0
 800a748:	dd08      	ble.n	800a75c <_strtod_l+0x794>
 800a74a:	9905      	ldr	r1, [sp, #20]
 800a74c:	463a      	mov	r2, r7
 800a74e:	4620      	mov	r0, r4
 800a750:	f002 f906 	bl	800c960 <__lshift>
 800a754:	9005      	str	r0, [sp, #20]
 800a756:	2800      	cmp	r0, #0
 800a758:	f43f ae7e 	beq.w	800a458 <_strtod_l+0x490>
 800a75c:	f1b9 0f00 	cmp.w	r9, #0
 800a760:	dd08      	ble.n	800a774 <_strtod_l+0x7ac>
 800a762:	4631      	mov	r1, r6
 800a764:	464a      	mov	r2, r9
 800a766:	4620      	mov	r0, r4
 800a768:	f002 f8fa 	bl	800c960 <__lshift>
 800a76c:	4606      	mov	r6, r0
 800a76e:	2800      	cmp	r0, #0
 800a770:	f43f ae72 	beq.w	800a458 <_strtod_l+0x490>
 800a774:	9a05      	ldr	r2, [sp, #20]
 800a776:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a778:	4620      	mov	r0, r4
 800a77a:	f002 f97d 	bl	800ca78 <__mdiff>
 800a77e:	4605      	mov	r5, r0
 800a780:	2800      	cmp	r0, #0
 800a782:	f43f ae69 	beq.w	800a458 <_strtod_l+0x490>
 800a786:	68c3      	ldr	r3, [r0, #12]
 800a788:	930b      	str	r3, [sp, #44]	; 0x2c
 800a78a:	2300      	movs	r3, #0
 800a78c:	60c3      	str	r3, [r0, #12]
 800a78e:	4631      	mov	r1, r6
 800a790:	f002 f956 	bl	800ca40 <__mcmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	da60      	bge.n	800a85a <_strtod_l+0x892>
 800a798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79a:	ea53 030a 	orrs.w	r3, r3, sl
 800a79e:	f040 8082 	bne.w	800a8a6 <_strtod_l+0x8de>
 800a7a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d17d      	bne.n	800a8a6 <_strtod_l+0x8de>
 800a7aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7ae:	0d1b      	lsrs	r3, r3, #20
 800a7b0:	051b      	lsls	r3, r3, #20
 800a7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7b6:	d976      	bls.n	800a8a6 <_strtod_l+0x8de>
 800a7b8:	696b      	ldr	r3, [r5, #20]
 800a7ba:	b913      	cbnz	r3, 800a7c2 <_strtod_l+0x7fa>
 800a7bc:	692b      	ldr	r3, [r5, #16]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	dd71      	ble.n	800a8a6 <_strtod_l+0x8de>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f002 f8ca 	bl	800c960 <__lshift>
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	f002 f936 	bl	800ca40 <__mcmp>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	dd66      	ble.n	800a8a6 <_strtod_l+0x8de>
 800a7d8:	9904      	ldr	r1, [sp, #16]
 800a7da:	4a53      	ldr	r2, [pc, #332]	; (800a928 <_strtod_l+0x960>)
 800a7dc:	465b      	mov	r3, fp
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	f000 8081 	beq.w	800a8e6 <_strtod_l+0x91e>
 800a7e4:	ea02 010b 	and.w	r1, r2, fp
 800a7e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a7ec:	dc7b      	bgt.n	800a8e6 <_strtod_l+0x91e>
 800a7ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7f2:	f77f aea9 	ble.w	800a548 <_strtod_l+0x580>
 800a7f6:	4b4d      	ldr	r3, [pc, #308]	; (800a92c <_strtod_l+0x964>)
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	4659      	mov	r1, fp
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f7f5 ff2d 	bl	800065c <__aeabi_dmul>
 800a802:	460b      	mov	r3, r1
 800a804:	4303      	orrs	r3, r0
 800a806:	bf08      	it	eq
 800a808:	2322      	moveq	r3, #34	; 0x22
 800a80a:	4682      	mov	sl, r0
 800a80c:	468b      	mov	fp, r1
 800a80e:	bf08      	it	eq
 800a810:	6023      	streq	r3, [r4, #0]
 800a812:	e62b      	b.n	800a46c <_strtod_l+0x4a4>
 800a814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	ea03 0a0a 	and.w	sl, r3, sl
 800a820:	e6e3      	b.n	800a5ea <_strtod_l+0x622>
 800a822:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a826:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a82a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a82e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a832:	fa01 f308 	lsl.w	r3, r1, r8
 800a836:	9308      	str	r3, [sp, #32]
 800a838:	910d      	str	r1, [sp, #52]	; 0x34
 800a83a:	e746      	b.n	800a6ca <_strtod_l+0x702>
 800a83c:	2300      	movs	r3, #0
 800a83e:	9308      	str	r3, [sp, #32]
 800a840:	2301      	movs	r3, #1
 800a842:	930d      	str	r3, [sp, #52]	; 0x34
 800a844:	e741      	b.n	800a6ca <_strtod_l+0x702>
 800a846:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a848:	4642      	mov	r2, r8
 800a84a:	4620      	mov	r0, r4
 800a84c:	f002 f888 	bl	800c960 <__lshift>
 800a850:	9018      	str	r0, [sp, #96]	; 0x60
 800a852:	2800      	cmp	r0, #0
 800a854:	f47f af6b 	bne.w	800a72e <_strtod_l+0x766>
 800a858:	e5fe      	b.n	800a458 <_strtod_l+0x490>
 800a85a:	465f      	mov	r7, fp
 800a85c:	d16e      	bne.n	800a93c <_strtod_l+0x974>
 800a85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a864:	b342      	cbz	r2, 800a8b8 <_strtod_l+0x8f0>
 800a866:	4a32      	ldr	r2, [pc, #200]	; (800a930 <_strtod_l+0x968>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d128      	bne.n	800a8be <_strtod_l+0x8f6>
 800a86c:	9b04      	ldr	r3, [sp, #16]
 800a86e:	4651      	mov	r1, sl
 800a870:	b1eb      	cbz	r3, 800a8ae <_strtod_l+0x8e6>
 800a872:	4b2d      	ldr	r3, [pc, #180]	; (800a928 <_strtod_l+0x960>)
 800a874:	403b      	ands	r3, r7
 800a876:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a87a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a87e:	d819      	bhi.n	800a8b4 <_strtod_l+0x8ec>
 800a880:	0d1b      	lsrs	r3, r3, #20
 800a882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a886:	fa02 f303 	lsl.w	r3, r2, r3
 800a88a:	4299      	cmp	r1, r3
 800a88c:	d117      	bne.n	800a8be <_strtod_l+0x8f6>
 800a88e:	4b29      	ldr	r3, [pc, #164]	; (800a934 <_strtod_l+0x96c>)
 800a890:	429f      	cmp	r7, r3
 800a892:	d102      	bne.n	800a89a <_strtod_l+0x8d2>
 800a894:	3101      	adds	r1, #1
 800a896:	f43f addf 	beq.w	800a458 <_strtod_l+0x490>
 800a89a:	4b23      	ldr	r3, [pc, #140]	; (800a928 <_strtod_l+0x960>)
 800a89c:	403b      	ands	r3, r7
 800a89e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a8a2:	f04f 0a00 	mov.w	sl, #0
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1a4      	bne.n	800a7f6 <_strtod_l+0x82e>
 800a8ac:	e5de      	b.n	800a46c <_strtod_l+0x4a4>
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8b2:	e7ea      	b.n	800a88a <_strtod_l+0x8c2>
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	e7e8      	b.n	800a88a <_strtod_l+0x8c2>
 800a8b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a8bc:	d08c      	beq.n	800a7d8 <_strtod_l+0x810>
 800a8be:	9b08      	ldr	r3, [sp, #32]
 800a8c0:	b1db      	cbz	r3, 800a8fa <_strtod_l+0x932>
 800a8c2:	423b      	tst	r3, r7
 800a8c4:	d0ef      	beq.n	800a8a6 <_strtod_l+0x8de>
 800a8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c8:	9a04      	ldr	r2, [sp, #16]
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	4659      	mov	r1, fp
 800a8ce:	b1c3      	cbz	r3, 800a902 <_strtod_l+0x93a>
 800a8d0:	f7ff fb5d 	bl	8009f8e <sulp>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	ec51 0b18 	vmov	r0, r1, d8
 800a8dc:	f7f5 fd08 	bl	80002f0 <__adddf3>
 800a8e0:	4682      	mov	sl, r0
 800a8e2:	468b      	mov	fp, r1
 800a8e4:	e7df      	b.n	800a8a6 <_strtod_l+0x8de>
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a8ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a8f8:	e7d5      	b.n	800a8a6 <_strtod_l+0x8de>
 800a8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8fc:	ea13 0f0a 	tst.w	r3, sl
 800a900:	e7e0      	b.n	800a8c4 <_strtod_l+0x8fc>
 800a902:	f7ff fb44 	bl	8009f8e <sulp>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	ec51 0b18 	vmov	r0, r1, d8
 800a90e:	f7f5 fced 	bl	80002ec <__aeabi_dsub>
 800a912:	2200      	movs	r2, #0
 800a914:	2300      	movs	r3, #0
 800a916:	4682      	mov	sl, r0
 800a918:	468b      	mov	fp, r1
 800a91a:	f7f6 f907 	bl	8000b2c <__aeabi_dcmpeq>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0c1      	beq.n	800a8a6 <_strtod_l+0x8de>
 800a922:	e611      	b.n	800a548 <_strtod_l+0x580>
 800a924:	fffffc02 	.word	0xfffffc02
 800a928:	7ff00000 	.word	0x7ff00000
 800a92c:	39500000 	.word	0x39500000
 800a930:	000fffff 	.word	0x000fffff
 800a934:	7fefffff 	.word	0x7fefffff
 800a938:	0800e130 	.word	0x0800e130
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	f002 f9fc 	bl	800cd3c <__ratio>
 800a944:	ec59 8b10 	vmov	r8, r9, d0
 800a948:	ee10 0a10 	vmov	r0, s0
 800a94c:	2200      	movs	r2, #0
 800a94e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a952:	4649      	mov	r1, r9
 800a954:	f7f6 f8fe 	bl	8000b54 <__aeabi_dcmple>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d07a      	beq.n	800aa52 <_strtod_l+0xa8a>
 800a95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d04a      	beq.n	800a9f8 <_strtod_l+0xa30>
 800a962:	4b95      	ldr	r3, [pc, #596]	; (800abb8 <_strtod_l+0xbf0>)
 800a964:	2200      	movs	r2, #0
 800a966:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a96a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800abb8 <_strtod_l+0xbf0>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	4b92      	ldr	r3, [pc, #584]	; (800abbc <_strtod_l+0xbf4>)
 800a974:	403b      	ands	r3, r7
 800a976:	930d      	str	r3, [sp, #52]	; 0x34
 800a978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a97a:	4b91      	ldr	r3, [pc, #580]	; (800abc0 <_strtod_l+0xbf8>)
 800a97c:	429a      	cmp	r2, r3
 800a97e:	f040 80b0 	bne.w	800aae2 <_strtod_l+0xb1a>
 800a982:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a986:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a98a:	ec4b ab10 	vmov	d0, sl, fp
 800a98e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a992:	f002 f8fb 	bl	800cb8c <__ulp>
 800a996:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a99a:	ec53 2b10 	vmov	r2, r3, d0
 800a99e:	f7f5 fe5d 	bl	800065c <__aeabi_dmul>
 800a9a2:	4652      	mov	r2, sl
 800a9a4:	465b      	mov	r3, fp
 800a9a6:	f7f5 fca3 	bl	80002f0 <__adddf3>
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4983      	ldr	r1, [pc, #524]	; (800abbc <_strtod_l+0xbf4>)
 800a9ae:	4a85      	ldr	r2, [pc, #532]	; (800abc4 <_strtod_l+0xbfc>)
 800a9b0:	4019      	ands	r1, r3
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	d960      	bls.n	800aa7a <_strtod_l+0xab2>
 800a9b8:	ee18 3a90 	vmov	r3, s17
 800a9bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d104      	bne.n	800a9ce <_strtod_l+0xa06>
 800a9c4:	ee18 3a10 	vmov	r3, s16
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f43f ad45 	beq.w	800a458 <_strtod_l+0x490>
 800a9ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800abd0 <_strtod_l+0xc08>
 800a9d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f001 fda5 	bl	800c528 <_Bfree>
 800a9de:	9905      	ldr	r1, [sp, #20]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f001 fda1 	bl	800c528 <_Bfree>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f001 fd9d 	bl	800c528 <_Bfree>
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 fd99 	bl	800c528 <_Bfree>
 800a9f6:	e61a      	b.n	800a62e <_strtod_l+0x666>
 800a9f8:	f1ba 0f00 	cmp.w	sl, #0
 800a9fc:	d11b      	bne.n	800aa36 <_strtod_l+0xa6e>
 800a9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa02:	b9f3      	cbnz	r3, 800aa42 <_strtod_l+0xa7a>
 800aa04:	4b6c      	ldr	r3, [pc, #432]	; (800abb8 <_strtod_l+0xbf0>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	4640      	mov	r0, r8
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	f7f6 f898 	bl	8000b40 <__aeabi_dcmplt>
 800aa10:	b9d0      	cbnz	r0, 800aa48 <_strtod_l+0xa80>
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	4b6c      	ldr	r3, [pc, #432]	; (800abc8 <_strtod_l+0xc00>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fe1f 	bl	800065c <__aeabi_dmul>
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4689      	mov	r9, r1
 800aa22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aa2a:	9315      	str	r3, [sp, #84]	; 0x54
 800aa2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa34:	e79d      	b.n	800a972 <_strtod_l+0x9aa>
 800aa36:	f1ba 0f01 	cmp.w	sl, #1
 800aa3a:	d102      	bne.n	800aa42 <_strtod_l+0xa7a>
 800aa3c:	2f00      	cmp	r7, #0
 800aa3e:	f43f ad83 	beq.w	800a548 <_strtod_l+0x580>
 800aa42:	4b62      	ldr	r3, [pc, #392]	; (800abcc <_strtod_l+0xc04>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	e78e      	b.n	800a966 <_strtod_l+0x99e>
 800aa48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800abc8 <_strtod_l+0xc00>
 800aa4c:	f04f 0800 	mov.w	r8, #0
 800aa50:	e7e7      	b.n	800aa22 <_strtod_l+0xa5a>
 800aa52:	4b5d      	ldr	r3, [pc, #372]	; (800abc8 <_strtod_l+0xc00>)
 800aa54:	4640      	mov	r0, r8
 800aa56:	4649      	mov	r1, r9
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f7f5 fdff 	bl	800065c <__aeabi_dmul>
 800aa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa60:	4680      	mov	r8, r0
 800aa62:	4689      	mov	r9, r1
 800aa64:	b933      	cbnz	r3, 800aa74 <_strtod_l+0xaac>
 800aa66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa6a:	900e      	str	r0, [sp, #56]	; 0x38
 800aa6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa72:	e7dd      	b.n	800aa30 <_strtod_l+0xa68>
 800aa74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aa78:	e7f9      	b.n	800aa6e <_strtod_l+0xaa6>
 800aa7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1a8      	bne.n	800a9d6 <_strtod_l+0xa0e>
 800aa84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa8a:	0d1b      	lsrs	r3, r3, #20
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d1a1      	bne.n	800a9d6 <_strtod_l+0xa0e>
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f6 f941 	bl	8000d1c <__aeabi_d2lz>
 800aa9a:	f7f5 fdb1 	bl	8000600 <__aeabi_l2d>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f5 fc21 	bl	80002ec <__aeabi_dsub>
 800aaaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aab0:	ea43 030a 	orr.w	r3, r3, sl
 800aab4:	4313      	orrs	r3, r2
 800aab6:	4680      	mov	r8, r0
 800aab8:	4689      	mov	r9, r1
 800aaba:	d055      	beq.n	800ab68 <_strtod_l+0xba0>
 800aabc:	a336      	add	r3, pc, #216	; (adr r3, 800ab98 <_strtod_l+0xbd0>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f6 f83d 	bl	8000b40 <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f47f acd0 	bne.w	800a46c <_strtod_l+0x4a4>
 800aacc:	a334      	add	r3, pc, #208	; (adr r3, 800aba0 <_strtod_l+0xbd8>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	f7f6 f851 	bl	8000b7c <__aeabi_dcmpgt>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f43f af7b 	beq.w	800a9d6 <_strtod_l+0xa0e>
 800aae0:	e4c4      	b.n	800a46c <_strtod_l+0x4a4>
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	b333      	cbz	r3, 800ab34 <_strtod_l+0xb6c>
 800aae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aaec:	d822      	bhi.n	800ab34 <_strtod_l+0xb6c>
 800aaee:	a32e      	add	r3, pc, #184	; (adr r3, 800aba8 <_strtod_l+0xbe0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f6 f82c 	bl	8000b54 <__aeabi_dcmple>
 800aafc:	b1a0      	cbz	r0, 800ab28 <_strtod_l+0xb60>
 800aafe:	4649      	mov	r1, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	f7f6 f883 	bl	8000c0c <__aeabi_d2uiz>
 800ab06:	2801      	cmp	r0, #1
 800ab08:	bf38      	it	cc
 800ab0a:	2001      	movcc	r0, #1
 800ab0c:	f7f5 fd2c 	bl	8000568 <__aeabi_ui2d>
 800ab10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab12:	4680      	mov	r8, r0
 800ab14:	4689      	mov	r9, r1
 800ab16:	bb23      	cbnz	r3, 800ab62 <_strtod_l+0xb9a>
 800ab18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab1c:	9010      	str	r0, [sp, #64]	; 0x40
 800ab1e:	9311      	str	r3, [sp, #68]	; 0x44
 800ab20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab30:	1a9b      	subs	r3, r3, r2
 800ab32:	9309      	str	r3, [sp, #36]	; 0x24
 800ab34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab38:	eeb0 0a48 	vmov.f32	s0, s16
 800ab3c:	eef0 0a68 	vmov.f32	s1, s17
 800ab40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab44:	f002 f822 	bl	800cb8c <__ulp>
 800ab48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab4c:	ec53 2b10 	vmov	r2, r3, d0
 800ab50:	f7f5 fd84 	bl	800065c <__aeabi_dmul>
 800ab54:	ec53 2b18 	vmov	r2, r3, d8
 800ab58:	f7f5 fbca 	bl	80002f0 <__adddf3>
 800ab5c:	4682      	mov	sl, r0
 800ab5e:	468b      	mov	fp, r1
 800ab60:	e78d      	b.n	800aa7e <_strtod_l+0xab6>
 800ab62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ab66:	e7db      	b.n	800ab20 <_strtod_l+0xb58>
 800ab68:	a311      	add	r3, pc, #68	; (adr r3, 800abb0 <_strtod_l+0xbe8>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 ffe7 	bl	8000b40 <__aeabi_dcmplt>
 800ab72:	e7b2      	b.n	800aada <_strtod_l+0xb12>
 800ab74:	2300      	movs	r3, #0
 800ab76:	930a      	str	r3, [sp, #40]	; 0x28
 800ab78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	f7ff ba6b 	b.w	800a058 <_strtod_l+0x90>
 800ab82:	2a65      	cmp	r2, #101	; 0x65
 800ab84:	f43f ab5f 	beq.w	800a246 <_strtod_l+0x27e>
 800ab88:	2a45      	cmp	r2, #69	; 0x45
 800ab8a:	f43f ab5c 	beq.w	800a246 <_strtod_l+0x27e>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f7ff bb94 	b.w	800a2bc <_strtod_l+0x2f4>
 800ab94:	f3af 8000 	nop.w
 800ab98:	94a03595 	.word	0x94a03595
 800ab9c:	3fdfffff 	.word	0x3fdfffff
 800aba0:	35afe535 	.word	0x35afe535
 800aba4:	3fe00000 	.word	0x3fe00000
 800aba8:	ffc00000 	.word	0xffc00000
 800abac:	41dfffff 	.word	0x41dfffff
 800abb0:	94a03595 	.word	0x94a03595
 800abb4:	3fcfffff 	.word	0x3fcfffff
 800abb8:	3ff00000 	.word	0x3ff00000
 800abbc:	7ff00000 	.word	0x7ff00000
 800abc0:	7fe00000 	.word	0x7fe00000
 800abc4:	7c9fffff 	.word	0x7c9fffff
 800abc8:	3fe00000 	.word	0x3fe00000
 800abcc:	bff00000 	.word	0xbff00000
 800abd0:	7fefffff 	.word	0x7fefffff

0800abd4 <_strtod_r>:
 800abd4:	4b01      	ldr	r3, [pc, #4]	; (800abdc <_strtod_r+0x8>)
 800abd6:	f7ff b9f7 	b.w	8009fc8 <_strtod_l>
 800abda:	bf00      	nop
 800abdc:	20000094 	.word	0x20000094

0800abe0 <strtok>:
 800abe0:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <strtok+0x5c>)
 800abe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abe4:	681e      	ldr	r6, [r3, #0]
 800abe6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800abe8:	4605      	mov	r5, r0
 800abea:	b9fc      	cbnz	r4, 800ac2c <strtok+0x4c>
 800abec:	2050      	movs	r0, #80	; 0x50
 800abee:	9101      	str	r1, [sp, #4]
 800abf0:	f7fd ff58 	bl	8008aa4 <malloc>
 800abf4:	9901      	ldr	r1, [sp, #4]
 800abf6:	65b0      	str	r0, [r6, #88]	; 0x58
 800abf8:	4602      	mov	r2, r0
 800abfa:	b920      	cbnz	r0, 800ac06 <strtok+0x26>
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <strtok+0x60>)
 800abfe:	4811      	ldr	r0, [pc, #68]	; (800ac44 <strtok+0x64>)
 800ac00:	2157      	movs	r1, #87	; 0x57
 800ac02:	f000 f99f 	bl	800af44 <__assert_func>
 800ac06:	e9c0 4400 	strd	r4, r4, [r0]
 800ac0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ac16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ac1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac26:	6184      	str	r4, [r0, #24]
 800ac28:	7704      	strb	r4, [r0, #28]
 800ac2a:	6244      	str	r4, [r0, #36]	; 0x24
 800ac2c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4628      	mov	r0, r5
 800ac32:	b002      	add	sp, #8
 800ac34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac38:	f000 b806 	b.w	800ac48 <__strtok_r>
 800ac3c:	2000002c 	.word	0x2000002c
 800ac40:	0800e158 	.word	0x0800e158
 800ac44:	0800e16f 	.word	0x0800e16f

0800ac48 <__strtok_r>:
 800ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4a:	b908      	cbnz	r0, 800ac50 <__strtok_r+0x8>
 800ac4c:	6810      	ldr	r0, [r2, #0]
 800ac4e:	b188      	cbz	r0, 800ac74 <__strtok_r+0x2c>
 800ac50:	4604      	mov	r4, r0
 800ac52:	4620      	mov	r0, r4
 800ac54:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac58:	460f      	mov	r7, r1
 800ac5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac5e:	b91e      	cbnz	r6, 800ac68 <__strtok_r+0x20>
 800ac60:	b965      	cbnz	r5, 800ac7c <__strtok_r+0x34>
 800ac62:	6015      	str	r5, [r2, #0]
 800ac64:	4628      	mov	r0, r5
 800ac66:	e005      	b.n	800ac74 <__strtok_r+0x2c>
 800ac68:	42b5      	cmp	r5, r6
 800ac6a:	d1f6      	bne.n	800ac5a <__strtok_r+0x12>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1f0      	bne.n	800ac52 <__strtok_r+0xa>
 800ac70:	6014      	str	r4, [r2, #0]
 800ac72:	7003      	strb	r3, [r0, #0]
 800ac74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac76:	461c      	mov	r4, r3
 800ac78:	e00c      	b.n	800ac94 <__strtok_r+0x4c>
 800ac7a:	b915      	cbnz	r5, 800ac82 <__strtok_r+0x3a>
 800ac7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac80:	460e      	mov	r6, r1
 800ac82:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac86:	42ab      	cmp	r3, r5
 800ac88:	d1f7      	bne.n	800ac7a <__strtok_r+0x32>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f3      	beq.n	800ac76 <__strtok_r+0x2e>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac94:	6014      	str	r4, [r2, #0]
 800ac96:	e7ed      	b.n	800ac74 <__strtok_r+0x2c>

0800ac98 <_strtol_l.constprop.0>:
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9e:	d001      	beq.n	800aca4 <_strtol_l.constprop.0+0xc>
 800aca0:	2b24      	cmp	r3, #36	; 0x24
 800aca2:	d906      	bls.n	800acb2 <_strtol_l.constprop.0+0x1a>
 800aca4:	f7fd fcf4 	bl	8008690 <__errno>
 800aca8:	2316      	movs	r3, #22
 800acaa:	6003      	str	r3, [r0, #0]
 800acac:	2000      	movs	r0, #0
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad98 <_strtol_l.constprop.0+0x100>
 800acb6:	460d      	mov	r5, r1
 800acb8:	462e      	mov	r6, r5
 800acba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800acc2:	f017 0708 	ands.w	r7, r7, #8
 800acc6:	d1f7      	bne.n	800acb8 <_strtol_l.constprop.0+0x20>
 800acc8:	2c2d      	cmp	r4, #45	; 0x2d
 800acca:	d132      	bne.n	800ad32 <_strtol_l.constprop.0+0x9a>
 800accc:	782c      	ldrb	r4, [r5, #0]
 800acce:	2701      	movs	r7, #1
 800acd0:	1cb5      	adds	r5, r6, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d05b      	beq.n	800ad8e <_strtol_l.constprop.0+0xf6>
 800acd6:	2b10      	cmp	r3, #16
 800acd8:	d109      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800acda:	2c30      	cmp	r4, #48	; 0x30
 800acdc:	d107      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800acde:	782c      	ldrb	r4, [r5, #0]
 800ace0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ace4:	2c58      	cmp	r4, #88	; 0x58
 800ace6:	d14d      	bne.n	800ad84 <_strtol_l.constprop.0+0xec>
 800ace8:	786c      	ldrb	r4, [r5, #1]
 800acea:	2310      	movs	r3, #16
 800acec:	3502      	adds	r5, #2
 800acee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800acf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800acfe:	4666      	mov	r6, ip
 800ad00:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad08:	f1be 0f09 	cmp.w	lr, #9
 800ad0c:	d816      	bhi.n	800ad3c <_strtol_l.constprop.0+0xa4>
 800ad0e:	4674      	mov	r4, lr
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	dd24      	ble.n	800ad5e <_strtol_l.constprop.0+0xc6>
 800ad14:	f1bc 0f00 	cmp.w	ip, #0
 800ad18:	db1e      	blt.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad1a:	45b1      	cmp	r9, r6
 800ad1c:	d31c      	bcc.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad1e:	d101      	bne.n	800ad24 <_strtol_l.constprop.0+0x8c>
 800ad20:	45a2      	cmp	sl, r4
 800ad22:	db19      	blt.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad24:	fb06 4603 	mla	r6, r6, r3, r4
 800ad28:	f04f 0c01 	mov.w	ip, #1
 800ad2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad30:	e7e8      	b.n	800ad04 <_strtol_l.constprop.0+0x6c>
 800ad32:	2c2b      	cmp	r4, #43	; 0x2b
 800ad34:	bf04      	itt	eq
 800ad36:	782c      	ldrbeq	r4, [r5, #0]
 800ad38:	1cb5      	addeq	r5, r6, #2
 800ad3a:	e7ca      	b.n	800acd2 <_strtol_l.constprop.0+0x3a>
 800ad3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad40:	f1be 0f19 	cmp.w	lr, #25
 800ad44:	d801      	bhi.n	800ad4a <_strtol_l.constprop.0+0xb2>
 800ad46:	3c37      	subs	r4, #55	; 0x37
 800ad48:	e7e2      	b.n	800ad10 <_strtol_l.constprop.0+0x78>
 800ad4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad4e:	f1be 0f19 	cmp.w	lr, #25
 800ad52:	d804      	bhi.n	800ad5e <_strtol_l.constprop.0+0xc6>
 800ad54:	3c57      	subs	r4, #87	; 0x57
 800ad56:	e7db      	b.n	800ad10 <_strtol_l.constprop.0+0x78>
 800ad58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad5c:	e7e6      	b.n	800ad2c <_strtol_l.constprop.0+0x94>
 800ad5e:	f1bc 0f00 	cmp.w	ip, #0
 800ad62:	da05      	bge.n	800ad70 <_strtol_l.constprop.0+0xd8>
 800ad64:	2322      	movs	r3, #34	; 0x22
 800ad66:	6003      	str	r3, [r0, #0]
 800ad68:	4646      	mov	r6, r8
 800ad6a:	b942      	cbnz	r2, 800ad7e <_strtol_l.constprop.0+0xe6>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e79e      	b.n	800acae <_strtol_l.constprop.0+0x16>
 800ad70:	b107      	cbz	r7, 800ad74 <_strtol_l.constprop.0+0xdc>
 800ad72:	4276      	negs	r6, r6
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	d0f9      	beq.n	800ad6c <_strtol_l.constprop.0+0xd4>
 800ad78:	f1bc 0f00 	cmp.w	ip, #0
 800ad7c:	d000      	beq.n	800ad80 <_strtol_l.constprop.0+0xe8>
 800ad7e:	1e69      	subs	r1, r5, #1
 800ad80:	6011      	str	r1, [r2, #0]
 800ad82:	e7f3      	b.n	800ad6c <_strtol_l.constprop.0+0xd4>
 800ad84:	2430      	movs	r4, #48	; 0x30
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1b1      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800ad8a:	2308      	movs	r3, #8
 800ad8c:	e7af      	b.n	800acee <_strtol_l.constprop.0+0x56>
 800ad8e:	2c30      	cmp	r4, #48	; 0x30
 800ad90:	d0a5      	beq.n	800acde <_strtol_l.constprop.0+0x46>
 800ad92:	230a      	movs	r3, #10
 800ad94:	e7ab      	b.n	800acee <_strtol_l.constprop.0+0x56>
 800ad96:	bf00      	nop
 800ad98:	0800e209 	.word	0x0800e209

0800ad9c <_strtol_r>:
 800ad9c:	f7ff bf7c 	b.w	800ac98 <_strtol_l.constprop.0>

0800ada0 <__swbuf_r>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	460e      	mov	r6, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	4605      	mov	r5, r0
 800ada8:	b118      	cbz	r0, 800adb2 <__swbuf_r+0x12>
 800adaa:	6983      	ldr	r3, [r0, #24]
 800adac:	b90b      	cbnz	r3, 800adb2 <__swbuf_r+0x12>
 800adae:	f7fd fda1 	bl	80088f4 <__sinit>
 800adb2:	4b21      	ldr	r3, [pc, #132]	; (800ae38 <__swbuf_r+0x98>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d12b      	bne.n	800ae10 <__swbuf_r+0x70>
 800adb8:	686c      	ldr	r4, [r5, #4]
 800adba:	69a3      	ldr	r3, [r4, #24]
 800adbc:	60a3      	str	r3, [r4, #8]
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	071a      	lsls	r2, r3, #28
 800adc2:	d52f      	bpl.n	800ae24 <__swbuf_r+0x84>
 800adc4:	6923      	ldr	r3, [r4, #16]
 800adc6:	b36b      	cbz	r3, 800ae24 <__swbuf_r+0x84>
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	1ac0      	subs	r0, r0, r3
 800adce:	6963      	ldr	r3, [r4, #20]
 800add0:	b2f6      	uxtb	r6, r6
 800add2:	4283      	cmp	r3, r0
 800add4:	4637      	mov	r7, r6
 800add6:	dc04      	bgt.n	800ade2 <__swbuf_r+0x42>
 800add8:	4621      	mov	r1, r4
 800adda:	4628      	mov	r0, r5
 800addc:	f7fd fce4 	bl	80087a8 <_fflush_r>
 800ade0:	bb30      	cbnz	r0, 800ae30 <__swbuf_r+0x90>
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	3b01      	subs	r3, #1
 800ade6:	60a3      	str	r3, [r4, #8]
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	6022      	str	r2, [r4, #0]
 800adee:	701e      	strb	r6, [r3, #0]
 800adf0:	6963      	ldr	r3, [r4, #20]
 800adf2:	3001      	adds	r0, #1
 800adf4:	4283      	cmp	r3, r0
 800adf6:	d004      	beq.n	800ae02 <__swbuf_r+0x62>
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	07db      	lsls	r3, r3, #31
 800adfc:	d506      	bpl.n	800ae0c <__swbuf_r+0x6c>
 800adfe:	2e0a      	cmp	r6, #10
 800ae00:	d104      	bne.n	800ae0c <__swbuf_r+0x6c>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4628      	mov	r0, r5
 800ae06:	f7fd fccf 	bl	80087a8 <_fflush_r>
 800ae0a:	b988      	cbnz	r0, 800ae30 <__swbuf_r+0x90>
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae10:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <__swbuf_r+0x9c>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <__swbuf_r+0x7a>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7cf      	b.n	800adba <__swbuf_r+0x1a>
 800ae1a:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <__swbuf_r+0xa0>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7ca      	b.n	800adba <__swbuf_r+0x1a>
 800ae24:	4621      	mov	r1, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 f81e 	bl	800ae68 <__swsetup_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d0cb      	beq.n	800adc8 <__swbuf_r+0x28>
 800ae30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ae34:	e7ea      	b.n	800ae0c <__swbuf_r+0x6c>
 800ae36:	bf00      	nop
 800ae38:	0800e074 	.word	0x0800e074
 800ae3c:	0800e094 	.word	0x0800e094
 800ae40:	0800e054 	.word	0x0800e054

0800ae44 <_write_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d07      	ldr	r5, [pc, #28]	; (800ae64 <_write_r+0x20>)
 800ae48:	4604      	mov	r4, r0
 800ae4a:	4608      	mov	r0, r1
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	2200      	movs	r2, #0
 800ae50:	602a      	str	r2, [r5, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	f7f7 fbe0 	bl	8002618 <_write>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_write_r+0x1e>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_write_r+0x1e>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	2000089c 	.word	0x2000089c

0800ae68 <__swsetup_r>:
 800ae68:	4b32      	ldr	r3, [pc, #200]	; (800af34 <__swsetup_r+0xcc>)
 800ae6a:	b570      	push	{r4, r5, r6, lr}
 800ae6c:	681d      	ldr	r5, [r3, #0]
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460c      	mov	r4, r1
 800ae72:	b125      	cbz	r5, 800ae7e <__swsetup_r+0x16>
 800ae74:	69ab      	ldr	r3, [r5, #24]
 800ae76:	b913      	cbnz	r3, 800ae7e <__swsetup_r+0x16>
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f7fd fd3b 	bl	80088f4 <__sinit>
 800ae7e:	4b2e      	ldr	r3, [pc, #184]	; (800af38 <__swsetup_r+0xd0>)
 800ae80:	429c      	cmp	r4, r3
 800ae82:	d10f      	bne.n	800aea4 <__swsetup_r+0x3c>
 800ae84:	686c      	ldr	r4, [r5, #4]
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae8c:	0719      	lsls	r1, r3, #28
 800ae8e:	d42c      	bmi.n	800aeea <__swsetup_r+0x82>
 800ae90:	06dd      	lsls	r5, r3, #27
 800ae92:	d411      	bmi.n	800aeb8 <__swsetup_r+0x50>
 800ae94:	2309      	movs	r3, #9
 800ae96:	6033      	str	r3, [r6, #0]
 800ae98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aea2:	e03e      	b.n	800af22 <__swsetup_r+0xba>
 800aea4:	4b25      	ldr	r3, [pc, #148]	; (800af3c <__swsetup_r+0xd4>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d101      	bne.n	800aeae <__swsetup_r+0x46>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	e7eb      	b.n	800ae86 <__swsetup_r+0x1e>
 800aeae:	4b24      	ldr	r3, [pc, #144]	; (800af40 <__swsetup_r+0xd8>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	bf08      	it	eq
 800aeb4:	68ec      	ldreq	r4, [r5, #12]
 800aeb6:	e7e6      	b.n	800ae86 <__swsetup_r+0x1e>
 800aeb8:	0758      	lsls	r0, r3, #29
 800aeba:	d512      	bpl.n	800aee2 <__swsetup_r+0x7a>
 800aebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aebe:	b141      	cbz	r1, 800aed2 <__swsetup_r+0x6a>
 800aec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec4:	4299      	cmp	r1, r3
 800aec6:	d002      	beq.n	800aece <__swsetup_r+0x66>
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7fd fe33 	bl	8008b34 <_free_r>
 800aece:	2300      	movs	r3, #0
 800aed0:	6363      	str	r3, [r4, #52]	; 0x34
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	2300      	movs	r3, #0
 800aedc:	6063      	str	r3, [r4, #4]
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f043 0308 	orr.w	r3, r3, #8
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	b94b      	cbnz	r3, 800af02 <__swsetup_r+0x9a>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aef8:	d003      	beq.n	800af02 <__swsetup_r+0x9a>
 800aefa:	4621      	mov	r1, r4
 800aefc:	4630      	mov	r0, r6
 800aefe:	f001 fa75 	bl	800c3ec <__smakebuf_r>
 800af02:	89a0      	ldrh	r0, [r4, #12]
 800af04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af08:	f010 0301 	ands.w	r3, r0, #1
 800af0c:	d00a      	beq.n	800af24 <__swsetup_r+0xbc>
 800af0e:	2300      	movs	r3, #0
 800af10:	60a3      	str	r3, [r4, #8]
 800af12:	6963      	ldr	r3, [r4, #20]
 800af14:	425b      	negs	r3, r3
 800af16:	61a3      	str	r3, [r4, #24]
 800af18:	6923      	ldr	r3, [r4, #16]
 800af1a:	b943      	cbnz	r3, 800af2e <__swsetup_r+0xc6>
 800af1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af20:	d1ba      	bne.n	800ae98 <__swsetup_r+0x30>
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	0781      	lsls	r1, r0, #30
 800af26:	bf58      	it	pl
 800af28:	6963      	ldrpl	r3, [r4, #20]
 800af2a:	60a3      	str	r3, [r4, #8]
 800af2c:	e7f4      	b.n	800af18 <__swsetup_r+0xb0>
 800af2e:	2000      	movs	r0, #0
 800af30:	e7f7      	b.n	800af22 <__swsetup_r+0xba>
 800af32:	bf00      	nop
 800af34:	2000002c 	.word	0x2000002c
 800af38:	0800e074 	.word	0x0800e074
 800af3c:	0800e094 	.word	0x0800e094
 800af40:	0800e054 	.word	0x0800e054

0800af44 <__assert_func>:
 800af44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af46:	4614      	mov	r4, r2
 800af48:	461a      	mov	r2, r3
 800af4a:	4b09      	ldr	r3, [pc, #36]	; (800af70 <__assert_func+0x2c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4605      	mov	r5, r0
 800af50:	68d8      	ldr	r0, [r3, #12]
 800af52:	b14c      	cbz	r4, 800af68 <__assert_func+0x24>
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <__assert_func+0x30>)
 800af56:	9100      	str	r1, [sp, #0]
 800af58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af5c:	4906      	ldr	r1, [pc, #24]	; (800af78 <__assert_func+0x34>)
 800af5e:	462b      	mov	r3, r5
 800af60:	f7fd fd46 	bl	80089f0 <fiprintf>
 800af64:	f7fd fb8c 	bl	8008680 <abort>
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <__assert_func+0x38>)
 800af6a:	461c      	mov	r4, r3
 800af6c:	e7f3      	b.n	800af56 <__assert_func+0x12>
 800af6e:	bf00      	nop
 800af70:	2000002c 	.word	0x2000002c
 800af74:	0800e1cc 	.word	0x0800e1cc
 800af78:	0800e1d9 	.word	0x0800e1d9
 800af7c:	0800e207 	.word	0x0800e207

0800af80 <_close_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_close_r+0x1c>)
 800af84:	2300      	movs	r3, #0
 800af86:	4604      	mov	r4, r0
 800af88:	4608      	mov	r0, r1
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f8 fc26 	bl	80037dc <_close>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_close_r+0x1a>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_close_r+0x1a>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	2000089c 	.word	0x2000089c

0800afa0 <quorem>:
 800afa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	6903      	ldr	r3, [r0, #16]
 800afa6:	690c      	ldr	r4, [r1, #16]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	4607      	mov	r7, r0
 800afac:	f2c0 8081 	blt.w	800b0b2 <quorem+0x112>
 800afb0:	3c01      	subs	r4, #1
 800afb2:	f101 0814 	add.w	r8, r1, #20
 800afb6:	f100 0514 	add.w	r5, r0, #20
 800afba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afc8:	3301      	adds	r3, #1
 800afca:	429a      	cmp	r2, r3
 800afcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800afd8:	d331      	bcc.n	800b03e <quorem+0x9e>
 800afda:	f04f 0e00 	mov.w	lr, #0
 800afde:	4640      	mov	r0, r8
 800afe0:	46ac      	mov	ip, r5
 800afe2:	46f2      	mov	sl, lr
 800afe4:	f850 2b04 	ldr.w	r2, [r0], #4
 800afe8:	b293      	uxth	r3, r2
 800afea:	fb06 e303 	mla	r3, r6, r3, lr
 800afee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ebaa 0303 	sub.w	r3, sl, r3
 800aff8:	f8dc a000 	ldr.w	sl, [ip]
 800affc:	0c12      	lsrs	r2, r2, #16
 800affe:	fa13 f38a 	uxtah	r3, r3, sl
 800b002:	fb06 e202 	mla	r2, r6, r2, lr
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	9b00      	ldr	r3, [sp, #0]
 800b00a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b00e:	b292      	uxth	r2, r2
 800b010:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b018:	f8bd 3000 	ldrh.w	r3, [sp]
 800b01c:	4581      	cmp	r9, r0
 800b01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b022:	f84c 3b04 	str.w	r3, [ip], #4
 800b026:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b02a:	d2db      	bcs.n	800afe4 <quorem+0x44>
 800b02c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b030:	b92b      	cbnz	r3, 800b03e <quorem+0x9e>
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	3b04      	subs	r3, #4
 800b036:	429d      	cmp	r5, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	d32e      	bcc.n	800b09a <quorem+0xfa>
 800b03c:	613c      	str	r4, [r7, #16]
 800b03e:	4638      	mov	r0, r7
 800b040:	f001 fcfe 	bl	800ca40 <__mcmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	db24      	blt.n	800b092 <quorem+0xf2>
 800b048:	3601      	adds	r6, #1
 800b04a:	4628      	mov	r0, r5
 800b04c:	f04f 0c00 	mov.w	ip, #0
 800b050:	f858 2b04 	ldr.w	r2, [r8], #4
 800b054:	f8d0 e000 	ldr.w	lr, [r0]
 800b058:	b293      	uxth	r3, r2
 800b05a:	ebac 0303 	sub.w	r3, ip, r3
 800b05e:	0c12      	lsrs	r2, r2, #16
 800b060:	fa13 f38e 	uxtah	r3, r3, lr
 800b064:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b072:	45c1      	cmp	r9, r8
 800b074:	f840 3b04 	str.w	r3, [r0], #4
 800b078:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b07c:	d2e8      	bcs.n	800b050 <quorem+0xb0>
 800b07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b086:	b922      	cbnz	r2, 800b092 <quorem+0xf2>
 800b088:	3b04      	subs	r3, #4
 800b08a:	429d      	cmp	r5, r3
 800b08c:	461a      	mov	r2, r3
 800b08e:	d30a      	bcc.n	800b0a6 <quorem+0x106>
 800b090:	613c      	str	r4, [r7, #16]
 800b092:	4630      	mov	r0, r6
 800b094:	b003      	add	sp, #12
 800b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	3b04      	subs	r3, #4
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d1cc      	bne.n	800b03c <quorem+0x9c>
 800b0a2:	3c01      	subs	r4, #1
 800b0a4:	e7c7      	b.n	800b036 <quorem+0x96>
 800b0a6:	6812      	ldr	r2, [r2, #0]
 800b0a8:	3b04      	subs	r3, #4
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	d1f0      	bne.n	800b090 <quorem+0xf0>
 800b0ae:	3c01      	subs	r4, #1
 800b0b0:	e7eb      	b.n	800b08a <quorem+0xea>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e7ee      	b.n	800b094 <quorem+0xf4>
	...

0800b0b8 <_dtoa_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	ed2d 8b04 	vpush	{d8-d9}
 800b0c0:	ec57 6b10 	vmov	r6, r7, d0
 800b0c4:	b093      	sub	sp, #76	; 0x4c
 800b0c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b0c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b0cc:	9106      	str	r1, [sp, #24]
 800b0ce:	ee10 aa10 	vmov	sl, s0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b0d8:	46bb      	mov	fp, r7
 800b0da:	b975      	cbnz	r5, 800b0fa <_dtoa_r+0x42>
 800b0dc:	2010      	movs	r0, #16
 800b0de:	f7fd fce1 	bl	8008aa4 <malloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b0e6:	b920      	cbnz	r0, 800b0f2 <_dtoa_r+0x3a>
 800b0e8:	4ba7      	ldr	r3, [pc, #668]	; (800b388 <_dtoa_r+0x2d0>)
 800b0ea:	21ea      	movs	r1, #234	; 0xea
 800b0ec:	48a7      	ldr	r0, [pc, #668]	; (800b38c <_dtoa_r+0x2d4>)
 800b0ee:	f7ff ff29 	bl	800af44 <__assert_func>
 800b0f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0f6:	6005      	str	r5, [r0, #0]
 800b0f8:	60c5      	str	r5, [r0, #12]
 800b0fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0fc:	6819      	ldr	r1, [r3, #0]
 800b0fe:	b151      	cbz	r1, 800b116 <_dtoa_r+0x5e>
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	604a      	str	r2, [r1, #4]
 800b104:	2301      	movs	r3, #1
 800b106:	4093      	lsls	r3, r2
 800b108:	608b      	str	r3, [r1, #8]
 800b10a:	4620      	mov	r0, r4
 800b10c:	f001 fa0c 	bl	800c528 <_Bfree>
 800b110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	1e3b      	subs	r3, r7, #0
 800b118:	bfaa      	itet	ge
 800b11a:	2300      	movge	r3, #0
 800b11c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b120:	f8c8 3000 	strge.w	r3, [r8]
 800b124:	4b9a      	ldr	r3, [pc, #616]	; (800b390 <_dtoa_r+0x2d8>)
 800b126:	bfbc      	itt	lt
 800b128:	2201      	movlt	r2, #1
 800b12a:	f8c8 2000 	strlt.w	r2, [r8]
 800b12e:	ea33 030b 	bics.w	r3, r3, fp
 800b132:	d11b      	bne.n	800b16c <_dtoa_r+0xb4>
 800b134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b136:	f242 730f 	movw	r3, #9999	; 0x270f
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b140:	4333      	orrs	r3, r6
 800b142:	f000 8592 	beq.w	800bc6a <_dtoa_r+0xbb2>
 800b146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b148:	b963      	cbnz	r3, 800b164 <_dtoa_r+0xac>
 800b14a:	4b92      	ldr	r3, [pc, #584]	; (800b394 <_dtoa_r+0x2dc>)
 800b14c:	e022      	b.n	800b194 <_dtoa_r+0xdc>
 800b14e:	4b92      	ldr	r3, [pc, #584]	; (800b398 <_dtoa_r+0x2e0>)
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	3308      	adds	r3, #8
 800b154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	9801      	ldr	r0, [sp, #4]
 800b15a:	b013      	add	sp, #76	; 0x4c
 800b15c:	ecbd 8b04 	vpop	{d8-d9}
 800b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	4b8b      	ldr	r3, [pc, #556]	; (800b394 <_dtoa_r+0x2dc>)
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	3303      	adds	r3, #3
 800b16a:	e7f3      	b.n	800b154 <_dtoa_r+0x9c>
 800b16c:	2200      	movs	r2, #0
 800b16e:	2300      	movs	r3, #0
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	f7f5 fcda 	bl	8000b2c <__aeabi_dcmpeq>
 800b178:	ec4b ab19 	vmov	d9, sl, fp
 800b17c:	4680      	mov	r8, r0
 800b17e:	b158      	cbz	r0, 800b198 <_dtoa_r+0xe0>
 800b180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b182:	2301      	movs	r3, #1
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 856b 	beq.w	800bc64 <_dtoa_r+0xbac>
 800b18e:	4883      	ldr	r0, [pc, #524]	; (800b39c <_dtoa_r+0x2e4>)
 800b190:	6018      	str	r0, [r3, #0]
 800b192:	1e43      	subs	r3, r0, #1
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	e7df      	b.n	800b158 <_dtoa_r+0xa0>
 800b198:	ec4b ab10 	vmov	d0, sl, fp
 800b19c:	aa10      	add	r2, sp, #64	; 0x40
 800b19e:	a911      	add	r1, sp, #68	; 0x44
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 fd6f 	bl	800cc84 <__d2b>
 800b1a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b1aa:	ee08 0a10 	vmov	s16, r0
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	f000 8084 	beq.w	800b2bc <_dtoa_r+0x204>
 800b1b4:	ee19 3a90 	vmov	r3, s19
 800b1b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b1c0:	4656      	mov	r6, sl
 800b1c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b1c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b1ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b1ce:	4b74      	ldr	r3, [pc, #464]	; (800b3a0 <_dtoa_r+0x2e8>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 f889 	bl	80002ec <__aeabi_dsub>
 800b1da:	a365      	add	r3, pc, #404	; (adr r3, 800b370 <_dtoa_r+0x2b8>)
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	f7f5 fa3c 	bl	800065c <__aeabi_dmul>
 800b1e4:	a364      	add	r3, pc, #400	; (adr r3, 800b378 <_dtoa_r+0x2c0>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f881 	bl	80002f0 <__adddf3>
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	f7f5 f9c8 	bl	8000588 <__aeabi_i2d>
 800b1f8:	a361      	add	r3, pc, #388	; (adr r3, 800b380 <_dtoa_r+0x2c8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 fa2d 	bl	800065c <__aeabi_dmul>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 f871 	bl	80002f0 <__adddf3>
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	f7f5 fcd3 	bl	8000bbc <__aeabi_d2iz>
 800b216:	2200      	movs	r2, #0
 800b218:	9000      	str	r0, [sp, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	4630      	mov	r0, r6
 800b21e:	4639      	mov	r1, r7
 800b220:	f7f5 fc8e 	bl	8000b40 <__aeabi_dcmplt>
 800b224:	b150      	cbz	r0, 800b23c <_dtoa_r+0x184>
 800b226:	9800      	ldr	r0, [sp, #0]
 800b228:	f7f5 f9ae 	bl	8000588 <__aeabi_i2d>
 800b22c:	4632      	mov	r2, r6
 800b22e:	463b      	mov	r3, r7
 800b230:	f7f5 fc7c 	bl	8000b2c <__aeabi_dcmpeq>
 800b234:	b910      	cbnz	r0, 800b23c <_dtoa_r+0x184>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	3b01      	subs	r3, #1
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	9b00      	ldr	r3, [sp, #0]
 800b23e:	2b16      	cmp	r3, #22
 800b240:	d85a      	bhi.n	800b2f8 <_dtoa_r+0x240>
 800b242:	9a00      	ldr	r2, [sp, #0]
 800b244:	4b57      	ldr	r3, [pc, #348]	; (800b3a4 <_dtoa_r+0x2ec>)
 800b246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	ec51 0b19 	vmov	r0, r1, d9
 800b252:	f7f5 fc75 	bl	8000b40 <__aeabi_dcmplt>
 800b256:	2800      	cmp	r0, #0
 800b258:	d050      	beq.n	800b2fc <_dtoa_r+0x244>
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	2300      	movs	r3, #0
 800b262:	930b      	str	r3, [sp, #44]	; 0x2c
 800b264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b266:	1b5d      	subs	r5, r3, r5
 800b268:	1e6b      	subs	r3, r5, #1
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	bf45      	ittet	mi
 800b26e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b272:	9304      	strmi	r3, [sp, #16]
 800b274:	2300      	movpl	r3, #0
 800b276:	2300      	movmi	r3, #0
 800b278:	bf4c      	ite	mi
 800b27a:	9305      	strmi	r3, [sp, #20]
 800b27c:	9304      	strpl	r3, [sp, #16]
 800b27e:	9b00      	ldr	r3, [sp, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	db3d      	blt.n	800b300 <_dtoa_r+0x248>
 800b284:	9b05      	ldr	r3, [sp, #20]
 800b286:	9a00      	ldr	r2, [sp, #0]
 800b288:	920a      	str	r2, [sp, #40]	; 0x28
 800b28a:	4413      	add	r3, r2
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	2300      	movs	r3, #0
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	9b06      	ldr	r3, [sp, #24]
 800b294:	2b09      	cmp	r3, #9
 800b296:	f200 8089 	bhi.w	800b3ac <_dtoa_r+0x2f4>
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	bfc4      	itt	gt
 800b29e:	3b04      	subgt	r3, #4
 800b2a0:	9306      	strgt	r3, [sp, #24]
 800b2a2:	9b06      	ldr	r3, [sp, #24]
 800b2a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b2a8:	bfcc      	ite	gt
 800b2aa:	2500      	movgt	r5, #0
 800b2ac:	2501      	movle	r5, #1
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	f200 8087 	bhi.w	800b3c2 <_dtoa_r+0x30a>
 800b2b4:	e8df f003 	tbb	[pc, r3]
 800b2b8:	59383a2d 	.word	0x59383a2d
 800b2bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b2c0:	441d      	add	r5, r3
 800b2c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	bfc1      	itttt	gt
 800b2ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b2d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b2d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b2da:	bfda      	itte	le
 800b2dc:	f1c3 0320 	rsble	r3, r3, #32
 800b2e0:	fa06 f003 	lslle.w	r0, r6, r3
 800b2e4:	4318      	orrgt	r0, r3
 800b2e6:	f7f5 f93f 	bl	8000568 <__aeabi_ui2d>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2f2:	3d01      	subs	r5, #1
 800b2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2f6:	e76a      	b.n	800b1ce <_dtoa_r+0x116>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e7b2      	b.n	800b262 <_dtoa_r+0x1aa>
 800b2fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2fe:	e7b1      	b.n	800b264 <_dtoa_r+0x1ac>
 800b300:	9b04      	ldr	r3, [sp, #16]
 800b302:	9a00      	ldr	r2, [sp, #0]
 800b304:	1a9b      	subs	r3, r3, r2
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	4253      	negs	r3, r2
 800b30a:	9307      	str	r3, [sp, #28]
 800b30c:	2300      	movs	r3, #0
 800b30e:	930a      	str	r3, [sp, #40]	; 0x28
 800b310:	e7bf      	b.n	800b292 <_dtoa_r+0x1da>
 800b312:	2300      	movs	r3, #0
 800b314:	9308      	str	r3, [sp, #32]
 800b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dc55      	bgt.n	800b3c8 <_dtoa_r+0x310>
 800b31c:	2301      	movs	r3, #1
 800b31e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b322:	461a      	mov	r2, r3
 800b324:	9209      	str	r2, [sp, #36]	; 0x24
 800b326:	e00c      	b.n	800b342 <_dtoa_r+0x28a>
 800b328:	2301      	movs	r3, #1
 800b32a:	e7f3      	b.n	800b314 <_dtoa_r+0x25c>
 800b32c:	2300      	movs	r3, #0
 800b32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b330:	9308      	str	r3, [sp, #32]
 800b332:	9b00      	ldr	r3, [sp, #0]
 800b334:	4413      	add	r3, r2
 800b336:	9302      	str	r3, [sp, #8]
 800b338:	3301      	adds	r3, #1
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	9303      	str	r3, [sp, #12]
 800b33e:	bfb8      	it	lt
 800b340:	2301      	movlt	r3, #1
 800b342:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b344:	2200      	movs	r2, #0
 800b346:	6042      	str	r2, [r0, #4]
 800b348:	2204      	movs	r2, #4
 800b34a:	f102 0614 	add.w	r6, r2, #20
 800b34e:	429e      	cmp	r6, r3
 800b350:	6841      	ldr	r1, [r0, #4]
 800b352:	d93d      	bls.n	800b3d0 <_dtoa_r+0x318>
 800b354:	4620      	mov	r0, r4
 800b356:	f001 f8a7 	bl	800c4a8 <_Balloc>
 800b35a:	9001      	str	r0, [sp, #4]
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d13b      	bne.n	800b3d8 <_dtoa_r+0x320>
 800b360:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <_dtoa_r+0x2f0>)
 800b362:	4602      	mov	r2, r0
 800b364:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b368:	e6c0      	b.n	800b0ec <_dtoa_r+0x34>
 800b36a:	2301      	movs	r3, #1
 800b36c:	e7df      	b.n	800b32e <_dtoa_r+0x276>
 800b36e:	bf00      	nop
 800b370:	636f4361 	.word	0x636f4361
 800b374:	3fd287a7 	.word	0x3fd287a7
 800b378:	8b60c8b3 	.word	0x8b60c8b3
 800b37c:	3fc68a28 	.word	0x3fc68a28
 800b380:	509f79fb 	.word	0x509f79fb
 800b384:	3fd34413 	.word	0x3fd34413
 800b388:	0800e158 	.word	0x0800e158
 800b38c:	0800e316 	.word	0x0800e316
 800b390:	7ff00000 	.word	0x7ff00000
 800b394:	0800e312 	.word	0x0800e312
 800b398:	0800e309 	.word	0x0800e309
 800b39c:	0800e0da 	.word	0x0800e0da
 800b3a0:	3ff80000 	.word	0x3ff80000
 800b3a4:	0800e480 	.word	0x0800e480
 800b3a8:	0800e371 	.word	0x0800e371
 800b3ac:	2501      	movs	r5, #1
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9306      	str	r3, [sp, #24]
 800b3b2:	9508      	str	r5, [sp, #32]
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2312      	movs	r3, #18
 800b3c0:	e7b0      	b.n	800b324 <_dtoa_r+0x26c>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	9308      	str	r3, [sp, #32]
 800b3c6:	e7f5      	b.n	800b3b4 <_dtoa_r+0x2fc>
 800b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3ce:	e7b8      	b.n	800b342 <_dtoa_r+0x28a>
 800b3d0:	3101      	adds	r1, #1
 800b3d2:	6041      	str	r1, [r0, #4]
 800b3d4:	0052      	lsls	r2, r2, #1
 800b3d6:	e7b8      	b.n	800b34a <_dtoa_r+0x292>
 800b3d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3da:	9a01      	ldr	r2, [sp, #4]
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	2b0e      	cmp	r3, #14
 800b3e2:	f200 809d 	bhi.w	800b520 <_dtoa_r+0x468>
 800b3e6:	2d00      	cmp	r5, #0
 800b3e8:	f000 809a 	beq.w	800b520 <_dtoa_r+0x468>
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dd32      	ble.n	800b458 <_dtoa_r+0x3a0>
 800b3f2:	4ab7      	ldr	r2, [pc, #732]	; (800b6d0 <_dtoa_r+0x618>)
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b400:	9b00      	ldr	r3, [sp, #0]
 800b402:	05d8      	lsls	r0, r3, #23
 800b404:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b408:	d516      	bpl.n	800b438 <_dtoa_r+0x380>
 800b40a:	4bb2      	ldr	r3, [pc, #712]	; (800b6d4 <_dtoa_r+0x61c>)
 800b40c:	ec51 0b19 	vmov	r0, r1, d9
 800b410:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b414:	f7f5 fa4c 	bl	80008b0 <__aeabi_ddiv>
 800b418:	f007 070f 	and.w	r7, r7, #15
 800b41c:	4682      	mov	sl, r0
 800b41e:	468b      	mov	fp, r1
 800b420:	2503      	movs	r5, #3
 800b422:	4eac      	ldr	r6, [pc, #688]	; (800b6d4 <_dtoa_r+0x61c>)
 800b424:	b957      	cbnz	r7, 800b43c <_dtoa_r+0x384>
 800b426:	4642      	mov	r2, r8
 800b428:	464b      	mov	r3, r9
 800b42a:	4650      	mov	r0, sl
 800b42c:	4659      	mov	r1, fp
 800b42e:	f7f5 fa3f 	bl	80008b0 <__aeabi_ddiv>
 800b432:	4682      	mov	sl, r0
 800b434:	468b      	mov	fp, r1
 800b436:	e028      	b.n	800b48a <_dtoa_r+0x3d2>
 800b438:	2502      	movs	r5, #2
 800b43a:	e7f2      	b.n	800b422 <_dtoa_r+0x36a>
 800b43c:	07f9      	lsls	r1, r7, #31
 800b43e:	d508      	bpl.n	800b452 <_dtoa_r+0x39a>
 800b440:	4640      	mov	r0, r8
 800b442:	4649      	mov	r1, r9
 800b444:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b448:	f7f5 f908 	bl	800065c <__aeabi_dmul>
 800b44c:	3501      	adds	r5, #1
 800b44e:	4680      	mov	r8, r0
 800b450:	4689      	mov	r9, r1
 800b452:	107f      	asrs	r7, r7, #1
 800b454:	3608      	adds	r6, #8
 800b456:	e7e5      	b.n	800b424 <_dtoa_r+0x36c>
 800b458:	f000 809b 	beq.w	800b592 <_dtoa_r+0x4da>
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	4f9d      	ldr	r7, [pc, #628]	; (800b6d4 <_dtoa_r+0x61c>)
 800b460:	425e      	negs	r6, r3
 800b462:	4b9b      	ldr	r3, [pc, #620]	; (800b6d0 <_dtoa_r+0x618>)
 800b464:	f006 020f 	and.w	r2, r6, #15
 800b468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	ec51 0b19 	vmov	r0, r1, d9
 800b474:	f7f5 f8f2 	bl	800065c <__aeabi_dmul>
 800b478:	1136      	asrs	r6, r6, #4
 800b47a:	4682      	mov	sl, r0
 800b47c:	468b      	mov	fp, r1
 800b47e:	2300      	movs	r3, #0
 800b480:	2502      	movs	r5, #2
 800b482:	2e00      	cmp	r6, #0
 800b484:	d17a      	bne.n	800b57c <_dtoa_r+0x4c4>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1d3      	bne.n	800b432 <_dtoa_r+0x37a>
 800b48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8082 	beq.w	800b596 <_dtoa_r+0x4de>
 800b492:	4b91      	ldr	r3, [pc, #580]	; (800b6d8 <_dtoa_r+0x620>)
 800b494:	2200      	movs	r2, #0
 800b496:	4650      	mov	r0, sl
 800b498:	4659      	mov	r1, fp
 800b49a:	f7f5 fb51 	bl	8000b40 <__aeabi_dcmplt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d079      	beq.n	800b596 <_dtoa_r+0x4de>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d076      	beq.n	800b596 <_dtoa_r+0x4de>
 800b4a8:	9b02      	ldr	r3, [sp, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dd36      	ble.n	800b51c <_dtoa_r+0x464>
 800b4ae:	9b00      	ldr	r3, [sp, #0]
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	4659      	mov	r1, fp
 800b4b4:	1e5f      	subs	r7, r3, #1
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4b88      	ldr	r3, [pc, #544]	; (800b6dc <_dtoa_r+0x624>)
 800b4ba:	f7f5 f8cf 	bl	800065c <__aeabi_dmul>
 800b4be:	9e02      	ldr	r6, [sp, #8]
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	468b      	mov	fp, r1
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7f5 f85e 	bl	8000588 <__aeabi_i2d>
 800b4cc:	4652      	mov	r2, sl
 800b4ce:	465b      	mov	r3, fp
 800b4d0:	f7f5 f8c4 	bl	800065c <__aeabi_dmul>
 800b4d4:	4b82      	ldr	r3, [pc, #520]	; (800b6e0 <_dtoa_r+0x628>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f7f4 ff0a 	bl	80002f0 <__adddf3>
 800b4dc:	46d0      	mov	r8, sl
 800b4de:	46d9      	mov	r9, fp
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	d158      	bne.n	800b59c <_dtoa_r+0x4e4>
 800b4ea:	4b7e      	ldr	r3, [pc, #504]	; (800b6e4 <_dtoa_r+0x62c>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	f7f4 fefb 	bl	80002ec <__aeabi_dsub>
 800b4f6:	4652      	mov	r2, sl
 800b4f8:	465b      	mov	r3, fp
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4689      	mov	r9, r1
 800b4fe:	f7f5 fb3d 	bl	8000b7c <__aeabi_dcmpgt>
 800b502:	2800      	cmp	r0, #0
 800b504:	f040 8295 	bne.w	800ba32 <_dtoa_r+0x97a>
 800b508:	4652      	mov	r2, sl
 800b50a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b50e:	4640      	mov	r0, r8
 800b510:	4649      	mov	r1, r9
 800b512:	f7f5 fb15 	bl	8000b40 <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	f040 8289 	bne.w	800ba2e <_dtoa_r+0x976>
 800b51c:	ec5b ab19 	vmov	sl, fp, d9
 800b520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b522:	2b00      	cmp	r3, #0
 800b524:	f2c0 8148 	blt.w	800b7b8 <_dtoa_r+0x700>
 800b528:	9a00      	ldr	r2, [sp, #0]
 800b52a:	2a0e      	cmp	r2, #14
 800b52c:	f300 8144 	bgt.w	800b7b8 <_dtoa_r+0x700>
 800b530:	4b67      	ldr	r3, [pc, #412]	; (800b6d0 <_dtoa_r+0x618>)
 800b532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b536:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f280 80d5 	bge.w	800b6ec <_dtoa_r+0x634>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	f300 80d1 	bgt.w	800b6ec <_dtoa_r+0x634>
 800b54a:	f040 826f 	bne.w	800ba2c <_dtoa_r+0x974>
 800b54e:	4b65      	ldr	r3, [pc, #404]	; (800b6e4 <_dtoa_r+0x62c>)
 800b550:	2200      	movs	r2, #0
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f7f5 f881 	bl	800065c <__aeabi_dmul>
 800b55a:	4652      	mov	r2, sl
 800b55c:	465b      	mov	r3, fp
 800b55e:	f7f5 fb03 	bl	8000b68 <__aeabi_dcmpge>
 800b562:	9e03      	ldr	r6, [sp, #12]
 800b564:	4637      	mov	r7, r6
 800b566:	2800      	cmp	r0, #0
 800b568:	f040 8245 	bne.w	800b9f6 <_dtoa_r+0x93e>
 800b56c:	9d01      	ldr	r5, [sp, #4]
 800b56e:	2331      	movs	r3, #49	; 0x31
 800b570:	f805 3b01 	strb.w	r3, [r5], #1
 800b574:	9b00      	ldr	r3, [sp, #0]
 800b576:	3301      	adds	r3, #1
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	e240      	b.n	800b9fe <_dtoa_r+0x946>
 800b57c:	07f2      	lsls	r2, r6, #31
 800b57e:	d505      	bpl.n	800b58c <_dtoa_r+0x4d4>
 800b580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b584:	f7f5 f86a 	bl	800065c <__aeabi_dmul>
 800b588:	3501      	adds	r5, #1
 800b58a:	2301      	movs	r3, #1
 800b58c:	1076      	asrs	r6, r6, #1
 800b58e:	3708      	adds	r7, #8
 800b590:	e777      	b.n	800b482 <_dtoa_r+0x3ca>
 800b592:	2502      	movs	r5, #2
 800b594:	e779      	b.n	800b48a <_dtoa_r+0x3d2>
 800b596:	9f00      	ldr	r7, [sp, #0]
 800b598:	9e03      	ldr	r6, [sp, #12]
 800b59a:	e794      	b.n	800b4c6 <_dtoa_r+0x40e>
 800b59c:	9901      	ldr	r1, [sp, #4]
 800b59e:	4b4c      	ldr	r3, [pc, #304]	; (800b6d0 <_dtoa_r+0x618>)
 800b5a0:	4431      	add	r1, r6
 800b5a2:	910d      	str	r1, [sp, #52]	; 0x34
 800b5a4:	9908      	ldr	r1, [sp, #32]
 800b5a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d043      	beq.n	800b63a <_dtoa_r+0x582>
 800b5b2:	494d      	ldr	r1, [pc, #308]	; (800b6e8 <_dtoa_r+0x630>)
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	f7f5 f97b 	bl	80008b0 <__aeabi_ddiv>
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	465b      	mov	r3, fp
 800b5be:	f7f4 fe95 	bl	80002ec <__aeabi_dsub>
 800b5c2:	9d01      	ldr	r5, [sp, #4]
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	468b      	mov	fp, r1
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	f7f5 faf6 	bl	8000bbc <__aeabi_d2iz>
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	f7f4 ffd9 	bl	8000588 <__aeabi_i2d>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f4 fe85 	bl	80002ec <__aeabi_dsub>
 800b5e2:	3630      	adds	r6, #48	; 0x30
 800b5e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4680      	mov	r8, r0
 800b5ee:	4689      	mov	r9, r1
 800b5f0:	f7f5 faa6 	bl	8000b40 <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d163      	bne.n	800b6c0 <_dtoa_r+0x608>
 800b5f8:	4642      	mov	r2, r8
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	4936      	ldr	r1, [pc, #216]	; (800b6d8 <_dtoa_r+0x620>)
 800b5fe:	2000      	movs	r0, #0
 800b600:	f7f4 fe74 	bl	80002ec <__aeabi_dsub>
 800b604:	4652      	mov	r2, sl
 800b606:	465b      	mov	r3, fp
 800b608:	f7f5 fa9a 	bl	8000b40 <__aeabi_dcmplt>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	f040 80b5 	bne.w	800b77c <_dtoa_r+0x6c4>
 800b612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b614:	429d      	cmp	r5, r3
 800b616:	d081      	beq.n	800b51c <_dtoa_r+0x464>
 800b618:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <_dtoa_r+0x624>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	4650      	mov	r0, sl
 800b61e:	4659      	mov	r1, fp
 800b620:	f7f5 f81c 	bl	800065c <__aeabi_dmul>
 800b624:	4b2d      	ldr	r3, [pc, #180]	; (800b6dc <_dtoa_r+0x624>)
 800b626:	4682      	mov	sl, r0
 800b628:	468b      	mov	fp, r1
 800b62a:	4640      	mov	r0, r8
 800b62c:	4649      	mov	r1, r9
 800b62e:	2200      	movs	r2, #0
 800b630:	f7f5 f814 	bl	800065c <__aeabi_dmul>
 800b634:	4680      	mov	r8, r0
 800b636:	4689      	mov	r9, r1
 800b638:	e7c6      	b.n	800b5c8 <_dtoa_r+0x510>
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	f7f5 f80d 	bl	800065c <__aeabi_dmul>
 800b642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b644:	9d01      	ldr	r5, [sp, #4]
 800b646:	930f      	str	r3, [sp, #60]	; 0x3c
 800b648:	4682      	mov	sl, r0
 800b64a:	468b      	mov	fp, r1
 800b64c:	4649      	mov	r1, r9
 800b64e:	4640      	mov	r0, r8
 800b650:	f7f5 fab4 	bl	8000bbc <__aeabi_d2iz>
 800b654:	4606      	mov	r6, r0
 800b656:	f7f4 ff97 	bl	8000588 <__aeabi_i2d>
 800b65a:	3630      	adds	r6, #48	; 0x30
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4640      	mov	r0, r8
 800b662:	4649      	mov	r1, r9
 800b664:	f7f4 fe42 	bl	80002ec <__aeabi_dsub>
 800b668:	f805 6b01 	strb.w	r6, [r5], #1
 800b66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66e:	429d      	cmp	r5, r3
 800b670:	4680      	mov	r8, r0
 800b672:	4689      	mov	r9, r1
 800b674:	f04f 0200 	mov.w	r2, #0
 800b678:	d124      	bne.n	800b6c4 <_dtoa_r+0x60c>
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <_dtoa_r+0x630>)
 800b67c:	4650      	mov	r0, sl
 800b67e:	4659      	mov	r1, fp
 800b680:	f7f4 fe36 	bl	80002f0 <__adddf3>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f5 fa76 	bl	8000b7c <__aeabi_dcmpgt>
 800b690:	2800      	cmp	r0, #0
 800b692:	d173      	bne.n	800b77c <_dtoa_r+0x6c4>
 800b694:	4652      	mov	r2, sl
 800b696:	465b      	mov	r3, fp
 800b698:	4913      	ldr	r1, [pc, #76]	; (800b6e8 <_dtoa_r+0x630>)
 800b69a:	2000      	movs	r0, #0
 800b69c:	f7f4 fe26 	bl	80002ec <__aeabi_dsub>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f7f5 fa4a 	bl	8000b40 <__aeabi_dcmplt>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f43f af35 	beq.w	800b51c <_dtoa_r+0x464>
 800b6b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b6b4:	1e6b      	subs	r3, r5, #1
 800b6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6bc:	2b30      	cmp	r3, #48	; 0x30
 800b6be:	d0f8      	beq.n	800b6b2 <_dtoa_r+0x5fa>
 800b6c0:	9700      	str	r7, [sp, #0]
 800b6c2:	e049      	b.n	800b758 <_dtoa_r+0x6a0>
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <_dtoa_r+0x624>)
 800b6c6:	f7f4 ffc9 	bl	800065c <__aeabi_dmul>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	4689      	mov	r9, r1
 800b6ce:	e7bd      	b.n	800b64c <_dtoa_r+0x594>
 800b6d0:	0800e480 	.word	0x0800e480
 800b6d4:	0800e458 	.word	0x0800e458
 800b6d8:	3ff00000 	.word	0x3ff00000
 800b6dc:	40240000 	.word	0x40240000
 800b6e0:	401c0000 	.word	0x401c0000
 800b6e4:	40140000 	.word	0x40140000
 800b6e8:	3fe00000 	.word	0x3fe00000
 800b6ec:	9d01      	ldr	r5, [sp, #4]
 800b6ee:	4656      	mov	r6, sl
 800b6f0:	465f      	mov	r7, fp
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	4639      	mov	r1, r7
 800b6fa:	f7f5 f8d9 	bl	80008b0 <__aeabi_ddiv>
 800b6fe:	f7f5 fa5d 	bl	8000bbc <__aeabi_d2iz>
 800b702:	4682      	mov	sl, r0
 800b704:	f7f4 ff40 	bl	8000588 <__aeabi_i2d>
 800b708:	4642      	mov	r2, r8
 800b70a:	464b      	mov	r3, r9
 800b70c:	f7f4 ffa6 	bl	800065c <__aeabi_dmul>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b71c:	f7f4 fde6 	bl	80002ec <__aeabi_dsub>
 800b720:	f805 6b01 	strb.w	r6, [r5], #1
 800b724:	9e01      	ldr	r6, [sp, #4]
 800b726:	9f03      	ldr	r7, [sp, #12]
 800b728:	1bae      	subs	r6, r5, r6
 800b72a:	42b7      	cmp	r7, r6
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	d135      	bne.n	800b79e <_dtoa_r+0x6e6>
 800b732:	f7f4 fddd 	bl	80002f0 <__adddf3>
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	f7f5 fa1d 	bl	8000b7c <__aeabi_dcmpgt>
 800b742:	b9d0      	cbnz	r0, 800b77a <_dtoa_r+0x6c2>
 800b744:	4642      	mov	r2, r8
 800b746:	464b      	mov	r3, r9
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f5 f9ee 	bl	8000b2c <__aeabi_dcmpeq>
 800b750:	b110      	cbz	r0, 800b758 <_dtoa_r+0x6a0>
 800b752:	f01a 0f01 	tst.w	sl, #1
 800b756:	d110      	bne.n	800b77a <_dtoa_r+0x6c2>
 800b758:	4620      	mov	r0, r4
 800b75a:	ee18 1a10 	vmov	r1, s16
 800b75e:	f000 fee3 	bl	800c528 <_Bfree>
 800b762:	2300      	movs	r3, #0
 800b764:	9800      	ldr	r0, [sp, #0]
 800b766:	702b      	strb	r3, [r5, #0]
 800b768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b76a:	3001      	adds	r0, #1
 800b76c:	6018      	str	r0, [r3, #0]
 800b76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b770:	2b00      	cmp	r3, #0
 800b772:	f43f acf1 	beq.w	800b158 <_dtoa_r+0xa0>
 800b776:	601d      	str	r5, [r3, #0]
 800b778:	e4ee      	b.n	800b158 <_dtoa_r+0xa0>
 800b77a:	9f00      	ldr	r7, [sp, #0]
 800b77c:	462b      	mov	r3, r5
 800b77e:	461d      	mov	r5, r3
 800b780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b784:	2a39      	cmp	r2, #57	; 0x39
 800b786:	d106      	bne.n	800b796 <_dtoa_r+0x6de>
 800b788:	9a01      	ldr	r2, [sp, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d1f7      	bne.n	800b77e <_dtoa_r+0x6c6>
 800b78e:	9901      	ldr	r1, [sp, #4]
 800b790:	2230      	movs	r2, #48	; 0x30
 800b792:	3701      	adds	r7, #1
 800b794:	700a      	strb	r2, [r1, #0]
 800b796:	781a      	ldrb	r2, [r3, #0]
 800b798:	3201      	adds	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e790      	b.n	800b6c0 <_dtoa_r+0x608>
 800b79e:	4ba6      	ldr	r3, [pc, #664]	; (800ba38 <_dtoa_r+0x980>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f7f4 ff5b 	bl	800065c <__aeabi_dmul>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	f7f5 f9bd 	bl	8000b2c <__aeabi_dcmpeq>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d09d      	beq.n	800b6f2 <_dtoa_r+0x63a>
 800b7b6:	e7cf      	b.n	800b758 <_dtoa_r+0x6a0>
 800b7b8:	9a08      	ldr	r2, [sp, #32]
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	f000 80d7 	beq.w	800b96e <_dtoa_r+0x8b6>
 800b7c0:	9a06      	ldr	r2, [sp, #24]
 800b7c2:	2a01      	cmp	r2, #1
 800b7c4:	f300 80ba 	bgt.w	800b93c <_dtoa_r+0x884>
 800b7c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	f000 80b2 	beq.w	800b934 <_dtoa_r+0x87c>
 800b7d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7d4:	9e07      	ldr	r6, [sp, #28]
 800b7d6:	9d04      	ldr	r5, [sp, #16]
 800b7d8:	9a04      	ldr	r2, [sp, #16]
 800b7da:	441a      	add	r2, r3
 800b7dc:	9204      	str	r2, [sp, #16]
 800b7de:	9a05      	ldr	r2, [sp, #20]
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	441a      	add	r2, r3
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	9205      	str	r2, [sp, #20]
 800b7e8:	f000 ffa0 	bl	800c72c <__i2b>
 800b7ec:	4607      	mov	r7, r0
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	dd0c      	ble.n	800b80c <_dtoa_r+0x754>
 800b7f2:	9b05      	ldr	r3, [sp, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd09      	ble.n	800b80c <_dtoa_r+0x754>
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	9a04      	ldr	r2, [sp, #16]
 800b7fc:	bfa8      	it	ge
 800b7fe:	462b      	movge	r3, r5
 800b800:	1ad2      	subs	r2, r2, r3
 800b802:	9204      	str	r2, [sp, #16]
 800b804:	9a05      	ldr	r2, [sp, #20]
 800b806:	1aed      	subs	r5, r5, r3
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	9305      	str	r3, [sp, #20]
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	b31b      	cbz	r3, 800b858 <_dtoa_r+0x7a0>
 800b810:	9b08      	ldr	r3, [sp, #32]
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 80af 	beq.w	800b976 <_dtoa_r+0x8be>
 800b818:	2e00      	cmp	r6, #0
 800b81a:	dd13      	ble.n	800b844 <_dtoa_r+0x78c>
 800b81c:	4639      	mov	r1, r7
 800b81e:	4632      	mov	r2, r6
 800b820:	4620      	mov	r0, r4
 800b822:	f001 f843 	bl	800c8ac <__pow5mult>
 800b826:	ee18 2a10 	vmov	r2, s16
 800b82a:	4601      	mov	r1, r0
 800b82c:	4607      	mov	r7, r0
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 ff92 	bl	800c758 <__multiply>
 800b834:	ee18 1a10 	vmov	r1, s16
 800b838:	4680      	mov	r8, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fe74 	bl	800c528 <_Bfree>
 800b840:	ee08 8a10 	vmov	s16, r8
 800b844:	9b07      	ldr	r3, [sp, #28]
 800b846:	1b9a      	subs	r2, r3, r6
 800b848:	d006      	beq.n	800b858 <_dtoa_r+0x7a0>
 800b84a:	ee18 1a10 	vmov	r1, s16
 800b84e:	4620      	mov	r0, r4
 800b850:	f001 f82c 	bl	800c8ac <__pow5mult>
 800b854:	ee08 0a10 	vmov	s16, r0
 800b858:	2101      	movs	r1, #1
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 ff66 	bl	800c72c <__i2b>
 800b860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	4606      	mov	r6, r0
 800b866:	f340 8088 	ble.w	800b97a <_dtoa_r+0x8c2>
 800b86a:	461a      	mov	r2, r3
 800b86c:	4601      	mov	r1, r0
 800b86e:	4620      	mov	r0, r4
 800b870:	f001 f81c 	bl	800c8ac <__pow5mult>
 800b874:	9b06      	ldr	r3, [sp, #24]
 800b876:	2b01      	cmp	r3, #1
 800b878:	4606      	mov	r6, r0
 800b87a:	f340 8081 	ble.w	800b980 <_dtoa_r+0x8c8>
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	6933      	ldr	r3, [r6, #16]
 800b884:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b888:	6918      	ldr	r0, [r3, #16]
 800b88a:	f000 feff 	bl	800c68c <__hi0bits>
 800b88e:	f1c0 0020 	rsb	r0, r0, #32
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	4418      	add	r0, r3
 800b896:	f010 001f 	ands.w	r0, r0, #31
 800b89a:	f000 8092 	beq.w	800b9c2 <_dtoa_r+0x90a>
 800b89e:	f1c0 0320 	rsb	r3, r0, #32
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	f340 808a 	ble.w	800b9bc <_dtoa_r+0x904>
 800b8a8:	f1c0 001c 	rsb	r0, r0, #28
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	4403      	add	r3, r0
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	9b05      	ldr	r3, [sp, #20]
 800b8b4:	4403      	add	r3, r0
 800b8b6:	4405      	add	r5, r0
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dd07      	ble.n	800b8d0 <_dtoa_r+0x818>
 800b8c0:	ee18 1a10 	vmov	r1, s16
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f001 f84a 	bl	800c960 <__lshift>
 800b8cc:	ee08 0a10 	vmov	s16, r0
 800b8d0:	9b05      	ldr	r3, [sp, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	dd05      	ble.n	800b8e2 <_dtoa_r+0x82a>
 800b8d6:	4631      	mov	r1, r6
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f001 f840 	bl	800c960 <__lshift>
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d06e      	beq.n	800b9c6 <_dtoa_r+0x90e>
 800b8e8:	ee18 0a10 	vmov	r0, s16
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	f001 f8a7 	bl	800ca40 <__mcmp>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	da67      	bge.n	800b9c6 <_dtoa_r+0x90e>
 800b8f6:	9b00      	ldr	r3, [sp, #0]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	220a      	movs	r2, #10
 800b902:	2300      	movs	r3, #0
 800b904:	4620      	mov	r0, r4
 800b906:	f000 fe31 	bl	800c56c <__multadd>
 800b90a:	9b08      	ldr	r3, [sp, #32]
 800b90c:	ee08 0a10 	vmov	s16, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 81b1 	beq.w	800bc78 <_dtoa_r+0xbc0>
 800b916:	2300      	movs	r3, #0
 800b918:	4639      	mov	r1, r7
 800b91a:	220a      	movs	r2, #10
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fe25 	bl	800c56c <__multadd>
 800b922:	9b02      	ldr	r3, [sp, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	4607      	mov	r7, r0
 800b928:	f300 808e 	bgt.w	800ba48 <_dtoa_r+0x990>
 800b92c:	9b06      	ldr	r3, [sp, #24]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	dc51      	bgt.n	800b9d6 <_dtoa_r+0x91e>
 800b932:	e089      	b.n	800ba48 <_dtoa_r+0x990>
 800b934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b93a:	e74b      	b.n	800b7d4 <_dtoa_r+0x71c>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	1e5e      	subs	r6, r3, #1
 800b940:	9b07      	ldr	r3, [sp, #28]
 800b942:	42b3      	cmp	r3, r6
 800b944:	bfbf      	itttt	lt
 800b946:	9b07      	ldrlt	r3, [sp, #28]
 800b948:	9607      	strlt	r6, [sp, #28]
 800b94a:	1af2      	sublt	r2, r6, r3
 800b94c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b94e:	bfb6      	itet	lt
 800b950:	189b      	addlt	r3, r3, r2
 800b952:	1b9e      	subge	r6, r3, r6
 800b954:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	bfb8      	it	lt
 800b95a:	2600      	movlt	r6, #0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bfb7      	itett	lt
 800b960:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b964:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b968:	1a9d      	sublt	r5, r3, r2
 800b96a:	2300      	movlt	r3, #0
 800b96c:	e734      	b.n	800b7d8 <_dtoa_r+0x720>
 800b96e:	9e07      	ldr	r6, [sp, #28]
 800b970:	9d04      	ldr	r5, [sp, #16]
 800b972:	9f08      	ldr	r7, [sp, #32]
 800b974:	e73b      	b.n	800b7ee <_dtoa_r+0x736>
 800b976:	9a07      	ldr	r2, [sp, #28]
 800b978:	e767      	b.n	800b84a <_dtoa_r+0x792>
 800b97a:	9b06      	ldr	r3, [sp, #24]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	dc18      	bgt.n	800b9b2 <_dtoa_r+0x8fa>
 800b980:	f1ba 0f00 	cmp.w	sl, #0
 800b984:	d115      	bne.n	800b9b2 <_dtoa_r+0x8fa>
 800b986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b98a:	b993      	cbnz	r3, 800b9b2 <_dtoa_r+0x8fa>
 800b98c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	051b      	lsls	r3, r3, #20
 800b994:	b183      	cbz	r3, 800b9b8 <_dtoa_r+0x900>
 800b996:	9b04      	ldr	r3, [sp, #16]
 800b998:	3301      	adds	r3, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	f04f 0801 	mov.w	r8, #1
 800b9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f47f af6a 	bne.w	800b882 <_dtoa_r+0x7ca>
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e76f      	b.n	800b892 <_dtoa_r+0x7da>
 800b9b2:	f04f 0800 	mov.w	r8, #0
 800b9b6:	e7f6      	b.n	800b9a6 <_dtoa_r+0x8ee>
 800b9b8:	4698      	mov	r8, r3
 800b9ba:	e7f4      	b.n	800b9a6 <_dtoa_r+0x8ee>
 800b9bc:	f43f af7d 	beq.w	800b8ba <_dtoa_r+0x802>
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	301c      	adds	r0, #28
 800b9c4:	e772      	b.n	800b8ac <_dtoa_r+0x7f4>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	dc37      	bgt.n	800ba3c <_dtoa_r+0x984>
 800b9cc:	9b06      	ldr	r3, [sp, #24]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	dd34      	ble.n	800ba3c <_dtoa_r+0x984>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	9302      	str	r3, [sp, #8]
 800b9d6:	9b02      	ldr	r3, [sp, #8]
 800b9d8:	b96b      	cbnz	r3, 800b9f6 <_dtoa_r+0x93e>
 800b9da:	4631      	mov	r1, r6
 800b9dc:	2205      	movs	r2, #5
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 fdc4 	bl	800c56c <__multadd>
 800b9e4:	4601      	mov	r1, r0
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	ee18 0a10 	vmov	r0, s16
 800b9ec:	f001 f828 	bl	800ca40 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	f73f adbb 	bgt.w	800b56c <_dtoa_r+0x4b4>
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	9d01      	ldr	r5, [sp, #4]
 800b9fa:	43db      	mvns	r3, r3
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	f04f 0800 	mov.w	r8, #0
 800ba02:	4631      	mov	r1, r6
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fd8f 	bl	800c528 <_Bfree>
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	f43f aea4 	beq.w	800b758 <_dtoa_r+0x6a0>
 800ba10:	f1b8 0f00 	cmp.w	r8, #0
 800ba14:	d005      	beq.n	800ba22 <_dtoa_r+0x96a>
 800ba16:	45b8      	cmp	r8, r7
 800ba18:	d003      	beq.n	800ba22 <_dtoa_r+0x96a>
 800ba1a:	4641      	mov	r1, r8
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 fd83 	bl	800c528 <_Bfree>
 800ba22:	4639      	mov	r1, r7
 800ba24:	4620      	mov	r0, r4
 800ba26:	f000 fd7f 	bl	800c528 <_Bfree>
 800ba2a:	e695      	b.n	800b758 <_dtoa_r+0x6a0>
 800ba2c:	2600      	movs	r6, #0
 800ba2e:	4637      	mov	r7, r6
 800ba30:	e7e1      	b.n	800b9f6 <_dtoa_r+0x93e>
 800ba32:	9700      	str	r7, [sp, #0]
 800ba34:	4637      	mov	r7, r6
 800ba36:	e599      	b.n	800b56c <_dtoa_r+0x4b4>
 800ba38:	40240000 	.word	0x40240000
 800ba3c:	9b08      	ldr	r3, [sp, #32]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 80ca 	beq.w	800bbd8 <_dtoa_r+0xb20>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	9302      	str	r3, [sp, #8]
 800ba48:	2d00      	cmp	r5, #0
 800ba4a:	dd05      	ble.n	800ba58 <_dtoa_r+0x9a0>
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	462a      	mov	r2, r5
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 ff85 	bl	800c960 <__lshift>
 800ba56:	4607      	mov	r7, r0
 800ba58:	f1b8 0f00 	cmp.w	r8, #0
 800ba5c:	d05b      	beq.n	800bb16 <_dtoa_r+0xa5e>
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fd21 	bl	800c4a8 <_Balloc>
 800ba66:	4605      	mov	r5, r0
 800ba68:	b928      	cbnz	r0, 800ba76 <_dtoa_r+0x9be>
 800ba6a:	4b87      	ldr	r3, [pc, #540]	; (800bc88 <_dtoa_r+0xbd0>)
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba72:	f7ff bb3b 	b.w	800b0ec <_dtoa_r+0x34>
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	3202      	adds	r2, #2
 800ba7a:	0092      	lsls	r2, r2, #2
 800ba7c:	f107 010c 	add.w	r1, r7, #12
 800ba80:	300c      	adds	r0, #12
 800ba82:	f7fd f827 	bl	8008ad4 <memcpy>
 800ba86:	2201      	movs	r2, #1
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 ff68 	bl	800c960 <__lshift>
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	f103 0901 	add.w	r9, r3, #1
 800ba96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	9305      	str	r3, [sp, #20]
 800ba9e:	f00a 0301 	and.w	r3, sl, #1
 800baa2:	46b8      	mov	r8, r7
 800baa4:	9304      	str	r3, [sp, #16]
 800baa6:	4607      	mov	r7, r0
 800baa8:	4631      	mov	r1, r6
 800baaa:	ee18 0a10 	vmov	r0, s16
 800baae:	f7ff fa77 	bl	800afa0 <quorem>
 800bab2:	4641      	mov	r1, r8
 800bab4:	9002      	str	r0, [sp, #8]
 800bab6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800baba:	ee18 0a10 	vmov	r0, s16
 800babe:	f000 ffbf 	bl	800ca40 <__mcmp>
 800bac2:	463a      	mov	r2, r7
 800bac4:	9003      	str	r0, [sp, #12]
 800bac6:	4631      	mov	r1, r6
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 ffd5 	bl	800ca78 <__mdiff>
 800bace:	68c2      	ldr	r2, [r0, #12]
 800bad0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800bad4:	4605      	mov	r5, r0
 800bad6:	bb02      	cbnz	r2, 800bb1a <_dtoa_r+0xa62>
 800bad8:	4601      	mov	r1, r0
 800bada:	ee18 0a10 	vmov	r0, s16
 800bade:	f000 ffaf 	bl	800ca40 <__mcmp>
 800bae2:	4602      	mov	r2, r0
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	9207      	str	r2, [sp, #28]
 800baea:	f000 fd1d 	bl	800c528 <_Bfree>
 800baee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800baf2:	ea43 0102 	orr.w	r1, r3, r2
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	430b      	orrs	r3, r1
 800bafa:	464d      	mov	r5, r9
 800bafc:	d10f      	bne.n	800bb1e <_dtoa_r+0xa66>
 800bafe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb02:	d02a      	beq.n	800bb5a <_dtoa_r+0xaa2>
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd02      	ble.n	800bb10 <_dtoa_r+0xa58>
 800bb0a:	9b02      	ldr	r3, [sp, #8]
 800bb0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb10:	f88b a000 	strb.w	sl, [fp]
 800bb14:	e775      	b.n	800ba02 <_dtoa_r+0x94a>
 800bb16:	4638      	mov	r0, r7
 800bb18:	e7ba      	b.n	800ba90 <_dtoa_r+0x9d8>
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	e7e2      	b.n	800bae4 <_dtoa_r+0xa2c>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	db04      	blt.n	800bb2e <_dtoa_r+0xa76>
 800bb24:	9906      	ldr	r1, [sp, #24]
 800bb26:	430b      	orrs	r3, r1
 800bb28:	9904      	ldr	r1, [sp, #16]
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	d122      	bne.n	800bb74 <_dtoa_r+0xabc>
 800bb2e:	2a00      	cmp	r2, #0
 800bb30:	ddee      	ble.n	800bb10 <_dtoa_r+0xa58>
 800bb32:	ee18 1a10 	vmov	r1, s16
 800bb36:	2201      	movs	r2, #1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 ff11 	bl	800c960 <__lshift>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	ee08 0a10 	vmov	s16, r0
 800bb44:	f000 ff7c 	bl	800ca40 <__mcmp>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	dc03      	bgt.n	800bb54 <_dtoa_r+0xa9c>
 800bb4c:	d1e0      	bne.n	800bb10 <_dtoa_r+0xa58>
 800bb4e:	f01a 0f01 	tst.w	sl, #1
 800bb52:	d0dd      	beq.n	800bb10 <_dtoa_r+0xa58>
 800bb54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb58:	d1d7      	bne.n	800bb0a <_dtoa_r+0xa52>
 800bb5a:	2339      	movs	r3, #57	; 0x39
 800bb5c:	f88b 3000 	strb.w	r3, [fp]
 800bb60:	462b      	mov	r3, r5
 800bb62:	461d      	mov	r5, r3
 800bb64:	3b01      	subs	r3, #1
 800bb66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb6a:	2a39      	cmp	r2, #57	; 0x39
 800bb6c:	d071      	beq.n	800bc52 <_dtoa_r+0xb9a>
 800bb6e:	3201      	adds	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	e746      	b.n	800ba02 <_dtoa_r+0x94a>
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	dd07      	ble.n	800bb88 <_dtoa_r+0xad0>
 800bb78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb7c:	d0ed      	beq.n	800bb5a <_dtoa_r+0xaa2>
 800bb7e:	f10a 0301 	add.w	r3, sl, #1
 800bb82:	f88b 3000 	strb.w	r3, [fp]
 800bb86:	e73c      	b.n	800ba02 <_dtoa_r+0x94a>
 800bb88:	9b05      	ldr	r3, [sp, #20]
 800bb8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb8e:	4599      	cmp	r9, r3
 800bb90:	d047      	beq.n	800bc22 <_dtoa_r+0xb6a>
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	2300      	movs	r3, #0
 800bb98:	220a      	movs	r2, #10
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fce6 	bl	800c56c <__multadd>
 800bba0:	45b8      	cmp	r8, r7
 800bba2:	ee08 0a10 	vmov	s16, r0
 800bba6:	f04f 0300 	mov.w	r3, #0
 800bbaa:	f04f 020a 	mov.w	r2, #10
 800bbae:	4641      	mov	r1, r8
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	d106      	bne.n	800bbc2 <_dtoa_r+0xb0a>
 800bbb4:	f000 fcda 	bl	800c56c <__multadd>
 800bbb8:	4680      	mov	r8, r0
 800bbba:	4607      	mov	r7, r0
 800bbbc:	f109 0901 	add.w	r9, r9, #1
 800bbc0:	e772      	b.n	800baa8 <_dtoa_r+0x9f0>
 800bbc2:	f000 fcd3 	bl	800c56c <__multadd>
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	4680      	mov	r8, r0
 800bbca:	2300      	movs	r3, #0
 800bbcc:	220a      	movs	r2, #10
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 fccc 	bl	800c56c <__multadd>
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	e7f1      	b.n	800bbbc <_dtoa_r+0xb04>
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	9302      	str	r3, [sp, #8]
 800bbdc:	9d01      	ldr	r5, [sp, #4]
 800bbde:	ee18 0a10 	vmov	r0, s16
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	f7ff f9dc 	bl	800afa0 <quorem>
 800bbe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	f805 ab01 	strb.w	sl, [r5], #1
 800bbf2:	1aea      	subs	r2, r5, r3
 800bbf4:	9b02      	ldr	r3, [sp, #8]
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	dd09      	ble.n	800bc0e <_dtoa_r+0xb56>
 800bbfa:	ee18 1a10 	vmov	r1, s16
 800bbfe:	2300      	movs	r3, #0
 800bc00:	220a      	movs	r2, #10
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 fcb2 	bl	800c56c <__multadd>
 800bc08:	ee08 0a10 	vmov	s16, r0
 800bc0c:	e7e7      	b.n	800bbde <_dtoa_r+0xb26>
 800bc0e:	9b02      	ldr	r3, [sp, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfc8      	it	gt
 800bc14:	461d      	movgt	r5, r3
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	bfd8      	it	le
 800bc1a:	2501      	movle	r5, #1
 800bc1c:	441d      	add	r5, r3
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	ee18 1a10 	vmov	r1, s16
 800bc26:	2201      	movs	r2, #1
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fe99 	bl	800c960 <__lshift>
 800bc2e:	4631      	mov	r1, r6
 800bc30:	ee08 0a10 	vmov	s16, r0
 800bc34:	f000 ff04 	bl	800ca40 <__mcmp>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	dc91      	bgt.n	800bb60 <_dtoa_r+0xaa8>
 800bc3c:	d102      	bne.n	800bc44 <_dtoa_r+0xb8c>
 800bc3e:	f01a 0f01 	tst.w	sl, #1
 800bc42:	d18d      	bne.n	800bb60 <_dtoa_r+0xaa8>
 800bc44:	462b      	mov	r3, r5
 800bc46:	461d      	mov	r5, r3
 800bc48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc4c:	2a30      	cmp	r2, #48	; 0x30
 800bc4e:	d0fa      	beq.n	800bc46 <_dtoa_r+0xb8e>
 800bc50:	e6d7      	b.n	800ba02 <_dtoa_r+0x94a>
 800bc52:	9a01      	ldr	r2, [sp, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d184      	bne.n	800bb62 <_dtoa_r+0xaaa>
 800bc58:	9b00      	ldr	r3, [sp, #0]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2331      	movs	r3, #49	; 0x31
 800bc60:	7013      	strb	r3, [r2, #0]
 800bc62:	e6ce      	b.n	800ba02 <_dtoa_r+0x94a>
 800bc64:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <_dtoa_r+0xbd4>)
 800bc66:	f7ff ba95 	b.w	800b194 <_dtoa_r+0xdc>
 800bc6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f47f aa6e 	bne.w	800b14e <_dtoa_r+0x96>
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <_dtoa_r+0xbd8>)
 800bc74:	f7ff ba8e 	b.w	800b194 <_dtoa_r+0xdc>
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dcae      	bgt.n	800bbdc <_dtoa_r+0xb24>
 800bc7e:	9b06      	ldr	r3, [sp, #24]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	f73f aea8 	bgt.w	800b9d6 <_dtoa_r+0x91e>
 800bc86:	e7a9      	b.n	800bbdc <_dtoa_r+0xb24>
 800bc88:	0800e371 	.word	0x0800e371
 800bc8c:	0800e0d9 	.word	0x0800e0d9
 800bc90:	0800e309 	.word	0x0800e309

0800bc94 <rshift>:
 800bc94:	6903      	ldr	r3, [r0, #16]
 800bc96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bca2:	f100 0414 	add.w	r4, r0, #20
 800bca6:	dd45      	ble.n	800bd34 <rshift+0xa0>
 800bca8:	f011 011f 	ands.w	r1, r1, #31
 800bcac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcb4:	d10c      	bne.n	800bcd0 <rshift+0x3c>
 800bcb6:	f100 0710 	add.w	r7, r0, #16
 800bcba:	4629      	mov	r1, r5
 800bcbc:	42b1      	cmp	r1, r6
 800bcbe:	d334      	bcc.n	800bd2a <rshift+0x96>
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	1eea      	subs	r2, r5, #3
 800bcc6:	4296      	cmp	r6, r2
 800bcc8:	bf38      	it	cc
 800bcca:	2300      	movcc	r3, #0
 800bccc:	4423      	add	r3, r4
 800bcce:	e015      	b.n	800bcfc <rshift+0x68>
 800bcd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcd4:	f1c1 0820 	rsb	r8, r1, #32
 800bcd8:	40cf      	lsrs	r7, r1
 800bcda:	f105 0e04 	add.w	lr, r5, #4
 800bcde:	46a1      	mov	r9, r4
 800bce0:	4576      	cmp	r6, lr
 800bce2:	46f4      	mov	ip, lr
 800bce4:	d815      	bhi.n	800bd12 <rshift+0x7e>
 800bce6:	1a9a      	subs	r2, r3, r2
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	3a04      	subs	r2, #4
 800bcec:	3501      	adds	r5, #1
 800bcee:	42ae      	cmp	r6, r5
 800bcf0:	bf38      	it	cc
 800bcf2:	2200      	movcc	r2, #0
 800bcf4:	18a3      	adds	r3, r4, r2
 800bcf6:	50a7      	str	r7, [r4, r2]
 800bcf8:	b107      	cbz	r7, 800bcfc <rshift+0x68>
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	1b1a      	subs	r2, r3, r4
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd04:	bf08      	it	eq
 800bd06:	2300      	moveq	r3, #0
 800bd08:	6102      	str	r2, [r0, #16]
 800bd0a:	bf08      	it	eq
 800bd0c:	6143      	streq	r3, [r0, #20]
 800bd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd12:	f8dc c000 	ldr.w	ip, [ip]
 800bd16:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd1a:	ea4c 0707 	orr.w	r7, ip, r7
 800bd1e:	f849 7b04 	str.w	r7, [r9], #4
 800bd22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd26:	40cf      	lsrs	r7, r1
 800bd28:	e7da      	b.n	800bce0 <rshift+0x4c>
 800bd2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd32:	e7c3      	b.n	800bcbc <rshift+0x28>
 800bd34:	4623      	mov	r3, r4
 800bd36:	e7e1      	b.n	800bcfc <rshift+0x68>

0800bd38 <__hexdig_fun>:
 800bd38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d802      	bhi.n	800bd46 <__hexdig_fun+0xe>
 800bd40:	3820      	subs	r0, #32
 800bd42:	b2c0      	uxtb	r0, r0
 800bd44:	4770      	bx	lr
 800bd46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d801      	bhi.n	800bd52 <__hexdig_fun+0x1a>
 800bd4e:	3847      	subs	r0, #71	; 0x47
 800bd50:	e7f7      	b.n	800bd42 <__hexdig_fun+0xa>
 800bd52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d801      	bhi.n	800bd5e <__hexdig_fun+0x26>
 800bd5a:	3827      	subs	r0, #39	; 0x27
 800bd5c:	e7f1      	b.n	800bd42 <__hexdig_fun+0xa>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	4770      	bx	lr
	...

0800bd64 <__gethex>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	ed2d 8b02 	vpush	{d8}
 800bd6c:	b089      	sub	sp, #36	; 0x24
 800bd6e:	ee08 0a10 	vmov	s16, r0
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	4bb4      	ldr	r3, [pc, #720]	; (800c048 <__gethex+0x2e4>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	468b      	mov	fp, r1
 800bd7e:	4690      	mov	r8, r2
 800bd80:	f7f4 faa8 	bl	80002d4 <strlen>
 800bd84:	9b01      	ldr	r3, [sp, #4]
 800bd86:	f8db 2000 	ldr.w	r2, [fp]
 800bd8a:	4403      	add	r3, r0
 800bd8c:	4682      	mov	sl, r0
 800bd8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	1c93      	adds	r3, r2, #2
 800bd96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd9e:	32fe      	adds	r2, #254	; 0xfe
 800bda0:	18d1      	adds	r1, r2, r3
 800bda2:	461f      	mov	r7, r3
 800bda4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bda8:	9100      	str	r1, [sp, #0]
 800bdaa:	2830      	cmp	r0, #48	; 0x30
 800bdac:	d0f8      	beq.n	800bda0 <__gethex+0x3c>
 800bdae:	f7ff ffc3 	bl	800bd38 <__hexdig_fun>
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d13a      	bne.n	800be2e <__gethex+0xca>
 800bdb8:	9901      	ldr	r1, [sp, #4]
 800bdba:	4652      	mov	r2, sl
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	f001 fa37 	bl	800d230 <strncmp>
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d168      	bne.n	800be9a <__gethex+0x136>
 800bdc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bdcc:	eb07 060a 	add.w	r6, r7, sl
 800bdd0:	f7ff ffb2 	bl	800bd38 <__hexdig_fun>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d062      	beq.n	800be9e <__gethex+0x13a>
 800bdd8:	4633      	mov	r3, r6
 800bdda:	7818      	ldrb	r0, [r3, #0]
 800bddc:	2830      	cmp	r0, #48	; 0x30
 800bdde:	461f      	mov	r7, r3
 800bde0:	f103 0301 	add.w	r3, r3, #1
 800bde4:	d0f9      	beq.n	800bdda <__gethex+0x76>
 800bde6:	f7ff ffa7 	bl	800bd38 <__hexdig_fun>
 800bdea:	2301      	movs	r3, #1
 800bdec:	fab0 f480 	clz	r4, r0
 800bdf0:	0964      	lsrs	r4, r4, #5
 800bdf2:	4635      	mov	r5, r6
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	463a      	mov	r2, r7
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	7830      	ldrb	r0, [r6, #0]
 800bdfe:	f7ff ff9b 	bl	800bd38 <__hexdig_fun>
 800be02:	2800      	cmp	r0, #0
 800be04:	d1f8      	bne.n	800bdf8 <__gethex+0x94>
 800be06:	9901      	ldr	r1, [sp, #4]
 800be08:	4652      	mov	r2, sl
 800be0a:	4630      	mov	r0, r6
 800be0c:	f001 fa10 	bl	800d230 <strncmp>
 800be10:	b980      	cbnz	r0, 800be34 <__gethex+0xd0>
 800be12:	b94d      	cbnz	r5, 800be28 <__gethex+0xc4>
 800be14:	eb06 050a 	add.w	r5, r6, sl
 800be18:	462a      	mov	r2, r5
 800be1a:	4616      	mov	r6, r2
 800be1c:	3201      	adds	r2, #1
 800be1e:	7830      	ldrb	r0, [r6, #0]
 800be20:	f7ff ff8a 	bl	800bd38 <__hexdig_fun>
 800be24:	2800      	cmp	r0, #0
 800be26:	d1f8      	bne.n	800be1a <__gethex+0xb6>
 800be28:	1bad      	subs	r5, r5, r6
 800be2a:	00ad      	lsls	r5, r5, #2
 800be2c:	e004      	b.n	800be38 <__gethex+0xd4>
 800be2e:	2400      	movs	r4, #0
 800be30:	4625      	mov	r5, r4
 800be32:	e7e0      	b.n	800bdf6 <__gethex+0x92>
 800be34:	2d00      	cmp	r5, #0
 800be36:	d1f7      	bne.n	800be28 <__gethex+0xc4>
 800be38:	7833      	ldrb	r3, [r6, #0]
 800be3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be3e:	2b50      	cmp	r3, #80	; 0x50
 800be40:	d13b      	bne.n	800beba <__gethex+0x156>
 800be42:	7873      	ldrb	r3, [r6, #1]
 800be44:	2b2b      	cmp	r3, #43	; 0x2b
 800be46:	d02c      	beq.n	800bea2 <__gethex+0x13e>
 800be48:	2b2d      	cmp	r3, #45	; 0x2d
 800be4a:	d02e      	beq.n	800beaa <__gethex+0x146>
 800be4c:	1c71      	adds	r1, r6, #1
 800be4e:	f04f 0900 	mov.w	r9, #0
 800be52:	7808      	ldrb	r0, [r1, #0]
 800be54:	f7ff ff70 	bl	800bd38 <__hexdig_fun>
 800be58:	1e43      	subs	r3, r0, #1
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b18      	cmp	r3, #24
 800be5e:	d82c      	bhi.n	800beba <__gethex+0x156>
 800be60:	f1a0 0210 	sub.w	r2, r0, #16
 800be64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be68:	f7ff ff66 	bl	800bd38 <__hexdig_fun>
 800be6c:	1e43      	subs	r3, r0, #1
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b18      	cmp	r3, #24
 800be72:	d91d      	bls.n	800beb0 <__gethex+0x14c>
 800be74:	f1b9 0f00 	cmp.w	r9, #0
 800be78:	d000      	beq.n	800be7c <__gethex+0x118>
 800be7a:	4252      	negs	r2, r2
 800be7c:	4415      	add	r5, r2
 800be7e:	f8cb 1000 	str.w	r1, [fp]
 800be82:	b1e4      	cbz	r4, 800bebe <__gethex+0x15a>
 800be84:	9b00      	ldr	r3, [sp, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	bf14      	ite	ne
 800be8a:	2700      	movne	r7, #0
 800be8c:	2706      	moveq	r7, #6
 800be8e:	4638      	mov	r0, r7
 800be90:	b009      	add	sp, #36	; 0x24
 800be92:	ecbd 8b02 	vpop	{d8}
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	463e      	mov	r6, r7
 800be9c:	4625      	mov	r5, r4
 800be9e:	2401      	movs	r4, #1
 800bea0:	e7ca      	b.n	800be38 <__gethex+0xd4>
 800bea2:	f04f 0900 	mov.w	r9, #0
 800bea6:	1cb1      	adds	r1, r6, #2
 800bea8:	e7d3      	b.n	800be52 <__gethex+0xee>
 800beaa:	f04f 0901 	mov.w	r9, #1
 800beae:	e7fa      	b.n	800bea6 <__gethex+0x142>
 800beb0:	230a      	movs	r3, #10
 800beb2:	fb03 0202 	mla	r2, r3, r2, r0
 800beb6:	3a10      	subs	r2, #16
 800beb8:	e7d4      	b.n	800be64 <__gethex+0x100>
 800beba:	4631      	mov	r1, r6
 800bebc:	e7df      	b.n	800be7e <__gethex+0x11a>
 800bebe:	1bf3      	subs	r3, r6, r7
 800bec0:	3b01      	subs	r3, #1
 800bec2:	4621      	mov	r1, r4
 800bec4:	2b07      	cmp	r3, #7
 800bec6:	dc0b      	bgt.n	800bee0 <__gethex+0x17c>
 800bec8:	ee18 0a10 	vmov	r0, s16
 800becc:	f000 faec 	bl	800c4a8 <_Balloc>
 800bed0:	4604      	mov	r4, r0
 800bed2:	b940      	cbnz	r0, 800bee6 <__gethex+0x182>
 800bed4:	4b5d      	ldr	r3, [pc, #372]	; (800c04c <__gethex+0x2e8>)
 800bed6:	4602      	mov	r2, r0
 800bed8:	21de      	movs	r1, #222	; 0xde
 800beda:	485d      	ldr	r0, [pc, #372]	; (800c050 <__gethex+0x2ec>)
 800bedc:	f7ff f832 	bl	800af44 <__assert_func>
 800bee0:	3101      	adds	r1, #1
 800bee2:	105b      	asrs	r3, r3, #1
 800bee4:	e7ee      	b.n	800bec4 <__gethex+0x160>
 800bee6:	f100 0914 	add.w	r9, r0, #20
 800beea:	f04f 0b00 	mov.w	fp, #0
 800beee:	f1ca 0301 	rsb	r3, sl, #1
 800bef2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bef6:	f8cd b000 	str.w	fp, [sp]
 800befa:	9306      	str	r3, [sp, #24]
 800befc:	42b7      	cmp	r7, r6
 800befe:	d340      	bcc.n	800bf82 <__gethex+0x21e>
 800bf00:	9802      	ldr	r0, [sp, #8]
 800bf02:	9b00      	ldr	r3, [sp, #0]
 800bf04:	f840 3b04 	str.w	r3, [r0], #4
 800bf08:	eba0 0009 	sub.w	r0, r0, r9
 800bf0c:	1080      	asrs	r0, r0, #2
 800bf0e:	0146      	lsls	r6, r0, #5
 800bf10:	6120      	str	r0, [r4, #16]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fbba 	bl	800c68c <__hi0bits>
 800bf18:	1a30      	subs	r0, r6, r0
 800bf1a:	f8d8 6000 	ldr.w	r6, [r8]
 800bf1e:	42b0      	cmp	r0, r6
 800bf20:	dd63      	ble.n	800bfea <__gethex+0x286>
 800bf22:	1b87      	subs	r7, r0, r6
 800bf24:	4639      	mov	r1, r7
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 ff5e 	bl	800cde8 <__any_on>
 800bf2c:	4682      	mov	sl, r0
 800bf2e:	b1a8      	cbz	r0, 800bf5c <__gethex+0x1f8>
 800bf30:	1e7b      	subs	r3, r7, #1
 800bf32:	1159      	asrs	r1, r3, #5
 800bf34:	f003 021f 	and.w	r2, r3, #31
 800bf38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf3c:	f04f 0a01 	mov.w	sl, #1
 800bf40:	fa0a f202 	lsl.w	r2, sl, r2
 800bf44:	420a      	tst	r2, r1
 800bf46:	d009      	beq.n	800bf5c <__gethex+0x1f8>
 800bf48:	4553      	cmp	r3, sl
 800bf4a:	dd05      	ble.n	800bf58 <__gethex+0x1f4>
 800bf4c:	1eb9      	subs	r1, r7, #2
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 ff4a 	bl	800cde8 <__any_on>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d145      	bne.n	800bfe4 <__gethex+0x280>
 800bf58:	f04f 0a02 	mov.w	sl, #2
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f7ff fe98 	bl	800bc94 <rshift>
 800bf64:	443d      	add	r5, r7
 800bf66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf6a:	42ab      	cmp	r3, r5
 800bf6c:	da4c      	bge.n	800c008 <__gethex+0x2a4>
 800bf6e:	ee18 0a10 	vmov	r0, s16
 800bf72:	4621      	mov	r1, r4
 800bf74:	f000 fad8 	bl	800c528 <_Bfree>
 800bf78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	27a3      	movs	r7, #163	; 0xa3
 800bf80:	e785      	b.n	800be8e <__gethex+0x12a>
 800bf82:	1e73      	subs	r3, r6, #1
 800bf84:	9a05      	ldr	r2, [sp, #20]
 800bf86:	9303      	str	r3, [sp, #12]
 800bf88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d019      	beq.n	800bfc4 <__gethex+0x260>
 800bf90:	f1bb 0f20 	cmp.w	fp, #32
 800bf94:	d107      	bne.n	800bfa6 <__gethex+0x242>
 800bf96:	9b02      	ldr	r3, [sp, #8]
 800bf98:	9a00      	ldr	r2, [sp, #0]
 800bf9a:	f843 2b04 	str.w	r2, [r3], #4
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	469b      	mov	fp, r3
 800bfa6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bfaa:	f7ff fec5 	bl	800bd38 <__hexdig_fun>
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	f000 000f 	and.w	r0, r0, #15
 800bfb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bfb8:	4303      	orrs	r3, r0
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	f10b 0b04 	add.w	fp, fp, #4
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	e00d      	b.n	800bfe0 <__gethex+0x27c>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	9a06      	ldr	r2, [sp, #24]
 800bfc8:	4413      	add	r3, r2
 800bfca:	42bb      	cmp	r3, r7
 800bfcc:	d3e0      	bcc.n	800bf90 <__gethex+0x22c>
 800bfce:	4618      	mov	r0, r3
 800bfd0:	9901      	ldr	r1, [sp, #4]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	f001 f92b 	bl	800d230 <strncmp>
 800bfda:	9b07      	ldr	r3, [sp, #28]
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d1d7      	bne.n	800bf90 <__gethex+0x22c>
 800bfe0:	461e      	mov	r6, r3
 800bfe2:	e78b      	b.n	800befc <__gethex+0x198>
 800bfe4:	f04f 0a03 	mov.w	sl, #3
 800bfe8:	e7b8      	b.n	800bf5c <__gethex+0x1f8>
 800bfea:	da0a      	bge.n	800c002 <__gethex+0x29e>
 800bfec:	1a37      	subs	r7, r6, r0
 800bfee:	4621      	mov	r1, r4
 800bff0:	ee18 0a10 	vmov	r0, s16
 800bff4:	463a      	mov	r2, r7
 800bff6:	f000 fcb3 	bl	800c960 <__lshift>
 800bffa:	1bed      	subs	r5, r5, r7
 800bffc:	4604      	mov	r4, r0
 800bffe:	f100 0914 	add.w	r9, r0, #20
 800c002:	f04f 0a00 	mov.w	sl, #0
 800c006:	e7ae      	b.n	800bf66 <__gethex+0x202>
 800c008:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c00c:	42a8      	cmp	r0, r5
 800c00e:	dd72      	ble.n	800c0f6 <__gethex+0x392>
 800c010:	1b45      	subs	r5, r0, r5
 800c012:	42ae      	cmp	r6, r5
 800c014:	dc36      	bgt.n	800c084 <__gethex+0x320>
 800c016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d02a      	beq.n	800c074 <__gethex+0x310>
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d02c      	beq.n	800c07c <__gethex+0x318>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d11c      	bne.n	800c060 <__gethex+0x2fc>
 800c026:	42ae      	cmp	r6, r5
 800c028:	d11a      	bne.n	800c060 <__gethex+0x2fc>
 800c02a:	2e01      	cmp	r6, #1
 800c02c:	d112      	bne.n	800c054 <__gethex+0x2f0>
 800c02e:	9a04      	ldr	r2, [sp, #16]
 800c030:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	2301      	movs	r3, #1
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	f8c9 3000 	str.w	r3, [r9]
 800c03e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c040:	2762      	movs	r7, #98	; 0x62
 800c042:	601c      	str	r4, [r3, #0]
 800c044:	e723      	b.n	800be8e <__gethex+0x12a>
 800c046:	bf00      	nop
 800c048:	0800e3e8 	.word	0x0800e3e8
 800c04c:	0800e371 	.word	0x0800e371
 800c050:	0800e382 	.word	0x0800e382
 800c054:	1e71      	subs	r1, r6, #1
 800c056:	4620      	mov	r0, r4
 800c058:	f000 fec6 	bl	800cde8 <__any_on>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1e6      	bne.n	800c02e <__gethex+0x2ca>
 800c060:	ee18 0a10 	vmov	r0, s16
 800c064:	4621      	mov	r1, r4
 800c066:	f000 fa5f 	bl	800c528 <_Bfree>
 800c06a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c06c:	2300      	movs	r3, #0
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	2750      	movs	r7, #80	; 0x50
 800c072:	e70c      	b.n	800be8e <__gethex+0x12a>
 800c074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f2      	bne.n	800c060 <__gethex+0x2fc>
 800c07a:	e7d8      	b.n	800c02e <__gethex+0x2ca>
 800c07c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1d5      	bne.n	800c02e <__gethex+0x2ca>
 800c082:	e7ed      	b.n	800c060 <__gethex+0x2fc>
 800c084:	1e6f      	subs	r7, r5, #1
 800c086:	f1ba 0f00 	cmp.w	sl, #0
 800c08a:	d131      	bne.n	800c0f0 <__gethex+0x38c>
 800c08c:	b127      	cbz	r7, 800c098 <__gethex+0x334>
 800c08e:	4639      	mov	r1, r7
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fea9 	bl	800cde8 <__any_on>
 800c096:	4682      	mov	sl, r0
 800c098:	117b      	asrs	r3, r7, #5
 800c09a:	2101      	movs	r1, #1
 800c09c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c0a0:	f007 071f 	and.w	r7, r7, #31
 800c0a4:	fa01 f707 	lsl.w	r7, r1, r7
 800c0a8:	421f      	tst	r7, r3
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	bf18      	it	ne
 800c0b0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c0b4:	1b76      	subs	r6, r6, r5
 800c0b6:	f7ff fded 	bl	800bc94 <rshift>
 800c0ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0be:	2702      	movs	r7, #2
 800c0c0:	f1ba 0f00 	cmp.w	sl, #0
 800c0c4:	d048      	beq.n	800c158 <__gethex+0x3f4>
 800c0c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d015      	beq.n	800c0fa <__gethex+0x396>
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d017      	beq.n	800c102 <__gethex+0x39e>
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d109      	bne.n	800c0ea <__gethex+0x386>
 800c0d6:	f01a 0f02 	tst.w	sl, #2
 800c0da:	d006      	beq.n	800c0ea <__gethex+0x386>
 800c0dc:	f8d9 0000 	ldr.w	r0, [r9]
 800c0e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c0e4:	f01a 0f01 	tst.w	sl, #1
 800c0e8:	d10e      	bne.n	800c108 <__gethex+0x3a4>
 800c0ea:	f047 0710 	orr.w	r7, r7, #16
 800c0ee:	e033      	b.n	800c158 <__gethex+0x3f4>
 800c0f0:	f04f 0a01 	mov.w	sl, #1
 800c0f4:	e7d0      	b.n	800c098 <__gethex+0x334>
 800c0f6:	2701      	movs	r7, #1
 800c0f8:	e7e2      	b.n	800c0c0 <__gethex+0x35c>
 800c0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0fc:	f1c3 0301 	rsb	r3, r3, #1
 800c100:	9315      	str	r3, [sp, #84]	; 0x54
 800c102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0f0      	beq.n	800c0ea <__gethex+0x386>
 800c108:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c10c:	f104 0314 	add.w	r3, r4, #20
 800c110:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c114:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c118:	f04f 0c00 	mov.w	ip, #0
 800c11c:	4618      	mov	r0, r3
 800c11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c122:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c126:	d01c      	beq.n	800c162 <__gethex+0x3fe>
 800c128:	3201      	adds	r2, #1
 800c12a:	6002      	str	r2, [r0, #0]
 800c12c:	2f02      	cmp	r7, #2
 800c12e:	f104 0314 	add.w	r3, r4, #20
 800c132:	d13f      	bne.n	800c1b4 <__gethex+0x450>
 800c134:	f8d8 2000 	ldr.w	r2, [r8]
 800c138:	3a01      	subs	r2, #1
 800c13a:	42b2      	cmp	r2, r6
 800c13c:	d10a      	bne.n	800c154 <__gethex+0x3f0>
 800c13e:	1171      	asrs	r1, r6, #5
 800c140:	2201      	movs	r2, #1
 800c142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c146:	f006 061f 	and.w	r6, r6, #31
 800c14a:	fa02 f606 	lsl.w	r6, r2, r6
 800c14e:	421e      	tst	r6, r3
 800c150:	bf18      	it	ne
 800c152:	4617      	movne	r7, r2
 800c154:	f047 0720 	orr.w	r7, r7, #32
 800c158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c15a:	601c      	str	r4, [r3, #0]
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	601d      	str	r5, [r3, #0]
 800c160:	e695      	b.n	800be8e <__gethex+0x12a>
 800c162:	4299      	cmp	r1, r3
 800c164:	f843 cc04 	str.w	ip, [r3, #-4]
 800c168:	d8d8      	bhi.n	800c11c <__gethex+0x3b8>
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	459b      	cmp	fp, r3
 800c16e:	db19      	blt.n	800c1a4 <__gethex+0x440>
 800c170:	6861      	ldr	r1, [r4, #4]
 800c172:	ee18 0a10 	vmov	r0, s16
 800c176:	3101      	adds	r1, #1
 800c178:	f000 f996 	bl	800c4a8 <_Balloc>
 800c17c:	4681      	mov	r9, r0
 800c17e:	b918      	cbnz	r0, 800c188 <__gethex+0x424>
 800c180:	4b1a      	ldr	r3, [pc, #104]	; (800c1ec <__gethex+0x488>)
 800c182:	4602      	mov	r2, r0
 800c184:	2184      	movs	r1, #132	; 0x84
 800c186:	e6a8      	b.n	800beda <__gethex+0x176>
 800c188:	6922      	ldr	r2, [r4, #16]
 800c18a:	3202      	adds	r2, #2
 800c18c:	f104 010c 	add.w	r1, r4, #12
 800c190:	0092      	lsls	r2, r2, #2
 800c192:	300c      	adds	r0, #12
 800c194:	f7fc fc9e 	bl	8008ad4 <memcpy>
 800c198:	4621      	mov	r1, r4
 800c19a:	ee18 0a10 	vmov	r0, s16
 800c19e:	f000 f9c3 	bl	800c528 <_Bfree>
 800c1a2:	464c      	mov	r4, r9
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1ac:	6122      	str	r2, [r4, #16]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	615a      	str	r2, [r3, #20]
 800c1b2:	e7bb      	b.n	800c12c <__gethex+0x3c8>
 800c1b4:	6922      	ldr	r2, [r4, #16]
 800c1b6:	455a      	cmp	r2, fp
 800c1b8:	dd0b      	ble.n	800c1d2 <__gethex+0x46e>
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7ff fd69 	bl	800bc94 <rshift>
 800c1c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	42ab      	cmp	r3, r5
 800c1ca:	f6ff aed0 	blt.w	800bf6e <__gethex+0x20a>
 800c1ce:	2701      	movs	r7, #1
 800c1d0:	e7c0      	b.n	800c154 <__gethex+0x3f0>
 800c1d2:	f016 061f 	ands.w	r6, r6, #31
 800c1d6:	d0fa      	beq.n	800c1ce <__gethex+0x46a>
 800c1d8:	4453      	add	r3, sl
 800c1da:	f1c6 0620 	rsb	r6, r6, #32
 800c1de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1e2:	f000 fa53 	bl	800c68c <__hi0bits>
 800c1e6:	42b0      	cmp	r0, r6
 800c1e8:	dbe7      	blt.n	800c1ba <__gethex+0x456>
 800c1ea:	e7f0      	b.n	800c1ce <__gethex+0x46a>
 800c1ec:	0800e371 	.word	0x0800e371

0800c1f0 <L_shift>:
 800c1f0:	f1c2 0208 	rsb	r2, r2, #8
 800c1f4:	0092      	lsls	r2, r2, #2
 800c1f6:	b570      	push	{r4, r5, r6, lr}
 800c1f8:	f1c2 0620 	rsb	r6, r2, #32
 800c1fc:	6843      	ldr	r3, [r0, #4]
 800c1fe:	6804      	ldr	r4, [r0, #0]
 800c200:	fa03 f506 	lsl.w	r5, r3, r6
 800c204:	432c      	orrs	r4, r5
 800c206:	40d3      	lsrs	r3, r2
 800c208:	6004      	str	r4, [r0, #0]
 800c20a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c20e:	4288      	cmp	r0, r1
 800c210:	d3f4      	bcc.n	800c1fc <L_shift+0xc>
 800c212:	bd70      	pop	{r4, r5, r6, pc}

0800c214 <__match>:
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	6803      	ldr	r3, [r0, #0]
 800c218:	3301      	adds	r3, #1
 800c21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c21e:	b914      	cbnz	r4, 800c226 <__match+0x12>
 800c220:	6003      	str	r3, [r0, #0]
 800c222:	2001      	movs	r0, #1
 800c224:	bd30      	pop	{r4, r5, pc}
 800c226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c22e:	2d19      	cmp	r5, #25
 800c230:	bf98      	it	ls
 800c232:	3220      	addls	r2, #32
 800c234:	42a2      	cmp	r2, r4
 800c236:	d0f0      	beq.n	800c21a <__match+0x6>
 800c238:	2000      	movs	r0, #0
 800c23a:	e7f3      	b.n	800c224 <__match+0x10>

0800c23c <__hexnan>:
 800c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	680b      	ldr	r3, [r1, #0]
 800c242:	115e      	asrs	r6, r3, #5
 800c244:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c248:	f013 031f 	ands.w	r3, r3, #31
 800c24c:	b087      	sub	sp, #28
 800c24e:	bf18      	it	ne
 800c250:	3604      	addne	r6, #4
 800c252:	2500      	movs	r5, #0
 800c254:	1f37      	subs	r7, r6, #4
 800c256:	4690      	mov	r8, r2
 800c258:	6802      	ldr	r2, [r0, #0]
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	4682      	mov	sl, r0
 800c25e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c262:	46b9      	mov	r9, r7
 800c264:	463c      	mov	r4, r7
 800c266:	9502      	str	r5, [sp, #8]
 800c268:	46ab      	mov	fp, r5
 800c26a:	7851      	ldrb	r1, [r2, #1]
 800c26c:	1c53      	adds	r3, r2, #1
 800c26e:	9303      	str	r3, [sp, #12]
 800c270:	b341      	cbz	r1, 800c2c4 <__hexnan+0x88>
 800c272:	4608      	mov	r0, r1
 800c274:	9205      	str	r2, [sp, #20]
 800c276:	9104      	str	r1, [sp, #16]
 800c278:	f7ff fd5e 	bl	800bd38 <__hexdig_fun>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d14f      	bne.n	800c320 <__hexnan+0xe4>
 800c280:	9904      	ldr	r1, [sp, #16]
 800c282:	9a05      	ldr	r2, [sp, #20]
 800c284:	2920      	cmp	r1, #32
 800c286:	d818      	bhi.n	800c2ba <__hexnan+0x7e>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	459b      	cmp	fp, r3
 800c28c:	dd13      	ble.n	800c2b6 <__hexnan+0x7a>
 800c28e:	454c      	cmp	r4, r9
 800c290:	d206      	bcs.n	800c2a0 <__hexnan+0x64>
 800c292:	2d07      	cmp	r5, #7
 800c294:	dc04      	bgt.n	800c2a0 <__hexnan+0x64>
 800c296:	462a      	mov	r2, r5
 800c298:	4649      	mov	r1, r9
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff ffa8 	bl	800c1f0 <L_shift>
 800c2a0:	4544      	cmp	r4, r8
 800c2a2:	d950      	bls.n	800c346 <__hexnan+0x10a>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f1a4 0904 	sub.w	r9, r4, #4
 800c2aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ae:	f8cd b008 	str.w	fp, [sp, #8]
 800c2b2:	464c      	mov	r4, r9
 800c2b4:	461d      	mov	r5, r3
 800c2b6:	9a03      	ldr	r2, [sp, #12]
 800c2b8:	e7d7      	b.n	800c26a <__hexnan+0x2e>
 800c2ba:	2929      	cmp	r1, #41	; 0x29
 800c2bc:	d156      	bne.n	800c36c <__hexnan+0x130>
 800c2be:	3202      	adds	r2, #2
 800c2c0:	f8ca 2000 	str.w	r2, [sl]
 800c2c4:	f1bb 0f00 	cmp.w	fp, #0
 800c2c8:	d050      	beq.n	800c36c <__hexnan+0x130>
 800c2ca:	454c      	cmp	r4, r9
 800c2cc:	d206      	bcs.n	800c2dc <__hexnan+0xa0>
 800c2ce:	2d07      	cmp	r5, #7
 800c2d0:	dc04      	bgt.n	800c2dc <__hexnan+0xa0>
 800c2d2:	462a      	mov	r2, r5
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f7ff ff8a 	bl	800c1f0 <L_shift>
 800c2dc:	4544      	cmp	r4, r8
 800c2de:	d934      	bls.n	800c34a <__hexnan+0x10e>
 800c2e0:	f1a8 0204 	sub.w	r2, r8, #4
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2ee:	429f      	cmp	r7, r3
 800c2f0:	d2f9      	bcs.n	800c2e6 <__hexnan+0xaa>
 800c2f2:	1b3b      	subs	r3, r7, r4
 800c2f4:	f023 0303 	bic.w	r3, r3, #3
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	3401      	adds	r4, #1
 800c2fc:	3e03      	subs	r6, #3
 800c2fe:	42b4      	cmp	r4, r6
 800c300:	bf88      	it	hi
 800c302:	2304      	movhi	r3, #4
 800c304:	4443      	add	r3, r8
 800c306:	2200      	movs	r2, #0
 800c308:	f843 2b04 	str.w	r2, [r3], #4
 800c30c:	429f      	cmp	r7, r3
 800c30e:	d2fb      	bcs.n	800c308 <__hexnan+0xcc>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	b91b      	cbnz	r3, 800c31c <__hexnan+0xe0>
 800c314:	4547      	cmp	r7, r8
 800c316:	d127      	bne.n	800c368 <__hexnan+0x12c>
 800c318:	2301      	movs	r3, #1
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	2005      	movs	r0, #5
 800c31e:	e026      	b.n	800c36e <__hexnan+0x132>
 800c320:	3501      	adds	r5, #1
 800c322:	2d08      	cmp	r5, #8
 800c324:	f10b 0b01 	add.w	fp, fp, #1
 800c328:	dd06      	ble.n	800c338 <__hexnan+0xfc>
 800c32a:	4544      	cmp	r4, r8
 800c32c:	d9c3      	bls.n	800c2b6 <__hexnan+0x7a>
 800c32e:	2300      	movs	r3, #0
 800c330:	f844 3c04 	str.w	r3, [r4, #-4]
 800c334:	2501      	movs	r5, #1
 800c336:	3c04      	subs	r4, #4
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	f000 000f 	and.w	r0, r0, #15
 800c33e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c342:	6022      	str	r2, [r4, #0]
 800c344:	e7b7      	b.n	800c2b6 <__hexnan+0x7a>
 800c346:	2508      	movs	r5, #8
 800c348:	e7b5      	b.n	800c2b6 <__hexnan+0x7a>
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0df      	beq.n	800c310 <__hexnan+0xd4>
 800c350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c354:	f1c3 0320 	rsb	r3, r3, #32
 800c358:	fa22 f303 	lsr.w	r3, r2, r3
 800c35c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c360:	401a      	ands	r2, r3
 800c362:	f846 2c04 	str.w	r2, [r6, #-4]
 800c366:	e7d3      	b.n	800c310 <__hexnan+0xd4>
 800c368:	3f04      	subs	r7, #4
 800c36a:	e7d1      	b.n	800c310 <__hexnan+0xd4>
 800c36c:	2004      	movs	r0, #4
 800c36e:	b007      	add	sp, #28
 800c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c374 <_localeconv_r>:
 800c374:	4800      	ldr	r0, [pc, #0]	; (800c378 <_localeconv_r+0x4>)
 800c376:	4770      	bx	lr
 800c378:	20000184 	.word	0x20000184

0800c37c <_lseek_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d07      	ldr	r5, [pc, #28]	; (800c39c <_lseek_r+0x20>)
 800c380:	4604      	mov	r4, r0
 800c382:	4608      	mov	r0, r1
 800c384:	4611      	mov	r1, r2
 800c386:	2200      	movs	r2, #0
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f7f7 fa4d 	bl	800382a <_lseek>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_lseek_r+0x1e>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_lseek_r+0x1e>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	2000089c 	.word	0x2000089c

0800c3a0 <__swhatbuf_r>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	460e      	mov	r6, r1
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	b096      	sub	sp, #88	; 0x58
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	461d      	mov	r5, r3
 800c3b0:	da08      	bge.n	800c3c4 <__swhatbuf_r+0x24>
 800c3b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	602a      	str	r2, [r5, #0]
 800c3ba:	061a      	lsls	r2, r3, #24
 800c3bc:	d410      	bmi.n	800c3e0 <__swhatbuf_r+0x40>
 800c3be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3c2:	e00e      	b.n	800c3e2 <__swhatbuf_r+0x42>
 800c3c4:	466a      	mov	r2, sp
 800c3c6:	f000 ff55 	bl	800d274 <_fstat_r>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	dbf1      	blt.n	800c3b2 <__swhatbuf_r+0x12>
 800c3ce:	9a01      	ldr	r2, [sp, #4]
 800c3d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3d8:	425a      	negs	r2, r3
 800c3da:	415a      	adcs	r2, r3
 800c3dc:	602a      	str	r2, [r5, #0]
 800c3de:	e7ee      	b.n	800c3be <__swhatbuf_r+0x1e>
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	b016      	add	sp, #88	; 0x58
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3ec <__smakebuf_r>:
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3f0:	079d      	lsls	r5, r3, #30
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	d507      	bpl.n	800c408 <__smakebuf_r+0x1c>
 800c3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	2301      	movs	r3, #1
 800c402:	6163      	str	r3, [r4, #20]
 800c404:	b002      	add	sp, #8
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	ab01      	add	r3, sp, #4
 800c40a:	466a      	mov	r2, sp
 800c40c:	f7ff ffc8 	bl	800c3a0 <__swhatbuf_r>
 800c410:	9900      	ldr	r1, [sp, #0]
 800c412:	4605      	mov	r5, r0
 800c414:	4630      	mov	r0, r6
 800c416:	f7fc fbf9 	bl	8008c0c <_malloc_r>
 800c41a:	b948      	cbnz	r0, 800c430 <__smakebuf_r+0x44>
 800c41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c420:	059a      	lsls	r2, r3, #22
 800c422:	d4ef      	bmi.n	800c404 <__smakebuf_r+0x18>
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	f043 0302 	orr.w	r3, r3, #2
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	e7e3      	b.n	800c3f8 <__smakebuf_r+0xc>
 800c430:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <__smakebuf_r+0x7c>)
 800c432:	62b3      	str	r3, [r6, #40]	; 0x28
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	6020      	str	r0, [r4, #0]
 800c438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	6163      	str	r3, [r4, #20]
 800c442:	9b01      	ldr	r3, [sp, #4]
 800c444:	6120      	str	r0, [r4, #16]
 800c446:	b15b      	cbz	r3, 800c460 <__smakebuf_r+0x74>
 800c448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c44c:	4630      	mov	r0, r6
 800c44e:	f000 ff23 	bl	800d298 <_isatty_r>
 800c452:	b128      	cbz	r0, 800c460 <__smakebuf_r+0x74>
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	f023 0303 	bic.w	r3, r3, #3
 800c45a:	f043 0301 	orr.w	r3, r3, #1
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	89a0      	ldrh	r0, [r4, #12]
 800c462:	4305      	orrs	r5, r0
 800c464:	81a5      	strh	r5, [r4, #12]
 800c466:	e7cd      	b.n	800c404 <__smakebuf_r+0x18>
 800c468:	0800888d 	.word	0x0800888d

0800c46c <__ascii_mbtowc>:
 800c46c:	b082      	sub	sp, #8
 800c46e:	b901      	cbnz	r1, 800c472 <__ascii_mbtowc+0x6>
 800c470:	a901      	add	r1, sp, #4
 800c472:	b142      	cbz	r2, 800c486 <__ascii_mbtowc+0x1a>
 800c474:	b14b      	cbz	r3, 800c48a <__ascii_mbtowc+0x1e>
 800c476:	7813      	ldrb	r3, [r2, #0]
 800c478:	600b      	str	r3, [r1, #0]
 800c47a:	7812      	ldrb	r2, [r2, #0]
 800c47c:	1e10      	subs	r0, r2, #0
 800c47e:	bf18      	it	ne
 800c480:	2001      	movne	r0, #1
 800c482:	b002      	add	sp, #8
 800c484:	4770      	bx	lr
 800c486:	4610      	mov	r0, r2
 800c488:	e7fb      	b.n	800c482 <__ascii_mbtowc+0x16>
 800c48a:	f06f 0001 	mvn.w	r0, #1
 800c48e:	e7f8      	b.n	800c482 <__ascii_mbtowc+0x16>

0800c490 <__malloc_lock>:
 800c490:	4801      	ldr	r0, [pc, #4]	; (800c498 <__malloc_lock+0x8>)
 800c492:	f7fc bb04 	b.w	8008a9e <__retarget_lock_acquire_recursive>
 800c496:	bf00      	nop
 800c498:	20000890 	.word	0x20000890

0800c49c <__malloc_unlock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_unlock+0x8>)
 800c49e:	f7fc baff 	b.w	8008aa0 <__retarget_lock_release_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20000890 	.word	0x20000890

0800c4a8 <_Balloc>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	b976      	cbnz	r6, 800c4d0 <_Balloc+0x28>
 800c4b2:	2010      	movs	r0, #16
 800c4b4:	f7fc faf6 	bl	8008aa4 <malloc>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	6260      	str	r0, [r4, #36]	; 0x24
 800c4bc:	b920      	cbnz	r0, 800c4c8 <_Balloc+0x20>
 800c4be:	4b18      	ldr	r3, [pc, #96]	; (800c520 <_Balloc+0x78>)
 800c4c0:	4818      	ldr	r0, [pc, #96]	; (800c524 <_Balloc+0x7c>)
 800c4c2:	2166      	movs	r1, #102	; 0x66
 800c4c4:	f7fe fd3e 	bl	800af44 <__assert_func>
 800c4c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4cc:	6006      	str	r6, [r0, #0]
 800c4ce:	60c6      	str	r6, [r0, #12]
 800c4d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4d2:	68f3      	ldr	r3, [r6, #12]
 800c4d4:	b183      	cbz	r3, 800c4f8 <_Balloc+0x50>
 800c4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4de:	b9b8      	cbnz	r0, 800c510 <_Balloc+0x68>
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4e6:	1d72      	adds	r2, r6, #5
 800c4e8:	0092      	lsls	r2, r2, #2
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fc9d 	bl	800ce2a <_calloc_r>
 800c4f0:	b160      	cbz	r0, 800c50c <_Balloc+0x64>
 800c4f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4f6:	e00e      	b.n	800c516 <_Balloc+0x6e>
 800c4f8:	2221      	movs	r2, #33	; 0x21
 800c4fa:	2104      	movs	r1, #4
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f000 fc94 	bl	800ce2a <_calloc_r>
 800c502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c504:	60f0      	str	r0, [r6, #12]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1e4      	bne.n	800c4d6 <_Balloc+0x2e>
 800c50c:	2000      	movs	r0, #0
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	6802      	ldr	r2, [r0, #0]
 800c512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c516:	2300      	movs	r3, #0
 800c518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c51c:	e7f7      	b.n	800c50e <_Balloc+0x66>
 800c51e:	bf00      	nop
 800c520:	0800e158 	.word	0x0800e158
 800c524:	0800e3fc 	.word	0x0800e3fc

0800c528 <_Bfree>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c52c:	4605      	mov	r5, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	b976      	cbnz	r6, 800c550 <_Bfree+0x28>
 800c532:	2010      	movs	r0, #16
 800c534:	f7fc fab6 	bl	8008aa4 <malloc>
 800c538:	4602      	mov	r2, r0
 800c53a:	6268      	str	r0, [r5, #36]	; 0x24
 800c53c:	b920      	cbnz	r0, 800c548 <_Bfree+0x20>
 800c53e:	4b09      	ldr	r3, [pc, #36]	; (800c564 <_Bfree+0x3c>)
 800c540:	4809      	ldr	r0, [pc, #36]	; (800c568 <_Bfree+0x40>)
 800c542:	218a      	movs	r1, #138	; 0x8a
 800c544:	f7fe fcfe 	bl	800af44 <__assert_func>
 800c548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c54c:	6006      	str	r6, [r0, #0]
 800c54e:	60c6      	str	r6, [r0, #12]
 800c550:	b13c      	cbz	r4, 800c562 <_Bfree+0x3a>
 800c552:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c554:	6862      	ldr	r2, [r4, #4]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c55c:	6021      	str	r1, [r4, #0]
 800c55e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	0800e158 	.word	0x0800e158
 800c568:	0800e3fc 	.word	0x0800e3fc

0800c56c <__multadd>:
 800c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c570:	690d      	ldr	r5, [r1, #16]
 800c572:	4607      	mov	r7, r0
 800c574:	460c      	mov	r4, r1
 800c576:	461e      	mov	r6, r3
 800c578:	f101 0c14 	add.w	ip, r1, #20
 800c57c:	2000      	movs	r0, #0
 800c57e:	f8dc 3000 	ldr.w	r3, [ip]
 800c582:	b299      	uxth	r1, r3
 800c584:	fb02 6101 	mla	r1, r2, r1, r6
 800c588:	0c1e      	lsrs	r6, r3, #16
 800c58a:	0c0b      	lsrs	r3, r1, #16
 800c58c:	fb02 3306 	mla	r3, r2, r6, r3
 800c590:	b289      	uxth	r1, r1
 800c592:	3001      	adds	r0, #1
 800c594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c598:	4285      	cmp	r5, r0
 800c59a:	f84c 1b04 	str.w	r1, [ip], #4
 800c59e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5a2:	dcec      	bgt.n	800c57e <__multadd+0x12>
 800c5a4:	b30e      	cbz	r6, 800c5ea <__multadd+0x7e>
 800c5a6:	68a3      	ldr	r3, [r4, #8]
 800c5a8:	42ab      	cmp	r3, r5
 800c5aa:	dc19      	bgt.n	800c5e0 <__multadd+0x74>
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	3101      	adds	r1, #1
 800c5b2:	f7ff ff79 	bl	800c4a8 <_Balloc>
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	b928      	cbnz	r0, 800c5c6 <__multadd+0x5a>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <__multadd+0x84>)
 800c5be:	480d      	ldr	r0, [pc, #52]	; (800c5f4 <__multadd+0x88>)
 800c5c0:	21b5      	movs	r1, #181	; 0xb5
 800c5c2:	f7fe fcbf 	bl	800af44 <__assert_func>
 800c5c6:	6922      	ldr	r2, [r4, #16]
 800c5c8:	3202      	adds	r2, #2
 800c5ca:	f104 010c 	add.w	r1, r4, #12
 800c5ce:	0092      	lsls	r2, r2, #2
 800c5d0:	300c      	adds	r0, #12
 800c5d2:	f7fc fa7f 	bl	8008ad4 <memcpy>
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff ffa5 	bl	800c528 <_Bfree>
 800c5de:	4644      	mov	r4, r8
 800c5e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5e4:	3501      	adds	r5, #1
 800c5e6:	615e      	str	r6, [r3, #20]
 800c5e8:	6125      	str	r5, [r4, #16]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f0:	0800e371 	.word	0x0800e371
 800c5f4:	0800e3fc 	.word	0x0800e3fc

0800c5f8 <__s2b>:
 800c5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	4615      	mov	r5, r2
 800c600:	461f      	mov	r7, r3
 800c602:	2209      	movs	r2, #9
 800c604:	3308      	adds	r3, #8
 800c606:	4606      	mov	r6, r0
 800c608:	fb93 f3f2 	sdiv	r3, r3, r2
 800c60c:	2100      	movs	r1, #0
 800c60e:	2201      	movs	r2, #1
 800c610:	429a      	cmp	r2, r3
 800c612:	db09      	blt.n	800c628 <__s2b+0x30>
 800c614:	4630      	mov	r0, r6
 800c616:	f7ff ff47 	bl	800c4a8 <_Balloc>
 800c61a:	b940      	cbnz	r0, 800c62e <__s2b+0x36>
 800c61c:	4602      	mov	r2, r0
 800c61e:	4b19      	ldr	r3, [pc, #100]	; (800c684 <__s2b+0x8c>)
 800c620:	4819      	ldr	r0, [pc, #100]	; (800c688 <__s2b+0x90>)
 800c622:	21ce      	movs	r1, #206	; 0xce
 800c624:	f7fe fc8e 	bl	800af44 <__assert_func>
 800c628:	0052      	lsls	r2, r2, #1
 800c62a:	3101      	adds	r1, #1
 800c62c:	e7f0      	b.n	800c610 <__s2b+0x18>
 800c62e:	9b08      	ldr	r3, [sp, #32]
 800c630:	6143      	str	r3, [r0, #20]
 800c632:	2d09      	cmp	r5, #9
 800c634:	f04f 0301 	mov.w	r3, #1
 800c638:	6103      	str	r3, [r0, #16]
 800c63a:	dd16      	ble.n	800c66a <__s2b+0x72>
 800c63c:	f104 0909 	add.w	r9, r4, #9
 800c640:	46c8      	mov	r8, r9
 800c642:	442c      	add	r4, r5
 800c644:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c648:	4601      	mov	r1, r0
 800c64a:	3b30      	subs	r3, #48	; 0x30
 800c64c:	220a      	movs	r2, #10
 800c64e:	4630      	mov	r0, r6
 800c650:	f7ff ff8c 	bl	800c56c <__multadd>
 800c654:	45a0      	cmp	r8, r4
 800c656:	d1f5      	bne.n	800c644 <__s2b+0x4c>
 800c658:	f1a5 0408 	sub.w	r4, r5, #8
 800c65c:	444c      	add	r4, r9
 800c65e:	1b2d      	subs	r5, r5, r4
 800c660:	1963      	adds	r3, r4, r5
 800c662:	42bb      	cmp	r3, r7
 800c664:	db04      	blt.n	800c670 <__s2b+0x78>
 800c666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c66a:	340a      	adds	r4, #10
 800c66c:	2509      	movs	r5, #9
 800c66e:	e7f6      	b.n	800c65e <__s2b+0x66>
 800c670:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c674:	4601      	mov	r1, r0
 800c676:	3b30      	subs	r3, #48	; 0x30
 800c678:	220a      	movs	r2, #10
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ff76 	bl	800c56c <__multadd>
 800c680:	e7ee      	b.n	800c660 <__s2b+0x68>
 800c682:	bf00      	nop
 800c684:	0800e371 	.word	0x0800e371
 800c688:	0800e3fc 	.word	0x0800e3fc

0800c68c <__hi0bits>:
 800c68c:	0c03      	lsrs	r3, r0, #16
 800c68e:	041b      	lsls	r3, r3, #16
 800c690:	b9d3      	cbnz	r3, 800c6c8 <__hi0bits+0x3c>
 800c692:	0400      	lsls	r0, r0, #16
 800c694:	2310      	movs	r3, #16
 800c696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c69a:	bf04      	itt	eq
 800c69c:	0200      	lsleq	r0, r0, #8
 800c69e:	3308      	addeq	r3, #8
 800c6a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6a4:	bf04      	itt	eq
 800c6a6:	0100      	lsleq	r0, r0, #4
 800c6a8:	3304      	addeq	r3, #4
 800c6aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6ae:	bf04      	itt	eq
 800c6b0:	0080      	lsleq	r0, r0, #2
 800c6b2:	3302      	addeq	r3, #2
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	db05      	blt.n	800c6c4 <__hi0bits+0x38>
 800c6b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6bc:	f103 0301 	add.w	r3, r3, #1
 800c6c0:	bf08      	it	eq
 800c6c2:	2320      	moveq	r3, #32
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	4770      	bx	lr
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	e7e4      	b.n	800c696 <__hi0bits+0xa>

0800c6cc <__lo0bits>:
 800c6cc:	6803      	ldr	r3, [r0, #0]
 800c6ce:	f013 0207 	ands.w	r2, r3, #7
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	d00b      	beq.n	800c6ee <__lo0bits+0x22>
 800c6d6:	07da      	lsls	r2, r3, #31
 800c6d8:	d423      	bmi.n	800c722 <__lo0bits+0x56>
 800c6da:	0798      	lsls	r0, r3, #30
 800c6dc:	bf49      	itett	mi
 800c6de:	085b      	lsrmi	r3, r3, #1
 800c6e0:	089b      	lsrpl	r3, r3, #2
 800c6e2:	2001      	movmi	r0, #1
 800c6e4:	600b      	strmi	r3, [r1, #0]
 800c6e6:	bf5c      	itt	pl
 800c6e8:	600b      	strpl	r3, [r1, #0]
 800c6ea:	2002      	movpl	r0, #2
 800c6ec:	4770      	bx	lr
 800c6ee:	b298      	uxth	r0, r3
 800c6f0:	b9a8      	cbnz	r0, 800c71e <__lo0bits+0x52>
 800c6f2:	0c1b      	lsrs	r3, r3, #16
 800c6f4:	2010      	movs	r0, #16
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	b90a      	cbnz	r2, 800c6fe <__lo0bits+0x32>
 800c6fa:	3008      	adds	r0, #8
 800c6fc:	0a1b      	lsrs	r3, r3, #8
 800c6fe:	071a      	lsls	r2, r3, #28
 800c700:	bf04      	itt	eq
 800c702:	091b      	lsreq	r3, r3, #4
 800c704:	3004      	addeq	r0, #4
 800c706:	079a      	lsls	r2, r3, #30
 800c708:	bf04      	itt	eq
 800c70a:	089b      	lsreq	r3, r3, #2
 800c70c:	3002      	addeq	r0, #2
 800c70e:	07da      	lsls	r2, r3, #31
 800c710:	d403      	bmi.n	800c71a <__lo0bits+0x4e>
 800c712:	085b      	lsrs	r3, r3, #1
 800c714:	f100 0001 	add.w	r0, r0, #1
 800c718:	d005      	beq.n	800c726 <__lo0bits+0x5a>
 800c71a:	600b      	str	r3, [r1, #0]
 800c71c:	4770      	bx	lr
 800c71e:	4610      	mov	r0, r2
 800c720:	e7e9      	b.n	800c6f6 <__lo0bits+0x2a>
 800c722:	2000      	movs	r0, #0
 800c724:	4770      	bx	lr
 800c726:	2020      	movs	r0, #32
 800c728:	4770      	bx	lr
	...

0800c72c <__i2b>:
 800c72c:	b510      	push	{r4, lr}
 800c72e:	460c      	mov	r4, r1
 800c730:	2101      	movs	r1, #1
 800c732:	f7ff feb9 	bl	800c4a8 <_Balloc>
 800c736:	4602      	mov	r2, r0
 800c738:	b928      	cbnz	r0, 800c746 <__i2b+0x1a>
 800c73a:	4b05      	ldr	r3, [pc, #20]	; (800c750 <__i2b+0x24>)
 800c73c:	4805      	ldr	r0, [pc, #20]	; (800c754 <__i2b+0x28>)
 800c73e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c742:	f7fe fbff 	bl	800af44 <__assert_func>
 800c746:	2301      	movs	r3, #1
 800c748:	6144      	str	r4, [r0, #20]
 800c74a:	6103      	str	r3, [r0, #16]
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	bf00      	nop
 800c750:	0800e371 	.word	0x0800e371
 800c754:	0800e3fc 	.word	0x0800e3fc

0800c758 <__multiply>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	4691      	mov	r9, r2
 800c75e:	690a      	ldr	r2, [r1, #16]
 800c760:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c764:	429a      	cmp	r2, r3
 800c766:	bfb8      	it	lt
 800c768:	460b      	movlt	r3, r1
 800c76a:	460c      	mov	r4, r1
 800c76c:	bfbc      	itt	lt
 800c76e:	464c      	movlt	r4, r9
 800c770:	4699      	movlt	r9, r3
 800c772:	6927      	ldr	r7, [r4, #16]
 800c774:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	6861      	ldr	r1, [r4, #4]
 800c77c:	eb07 060a 	add.w	r6, r7, sl
 800c780:	42b3      	cmp	r3, r6
 800c782:	b085      	sub	sp, #20
 800c784:	bfb8      	it	lt
 800c786:	3101      	addlt	r1, #1
 800c788:	f7ff fe8e 	bl	800c4a8 <_Balloc>
 800c78c:	b930      	cbnz	r0, 800c79c <__multiply+0x44>
 800c78e:	4602      	mov	r2, r0
 800c790:	4b44      	ldr	r3, [pc, #272]	; (800c8a4 <__multiply+0x14c>)
 800c792:	4845      	ldr	r0, [pc, #276]	; (800c8a8 <__multiply+0x150>)
 800c794:	f240 115d 	movw	r1, #349	; 0x15d
 800c798:	f7fe fbd4 	bl	800af44 <__assert_func>
 800c79c:	f100 0514 	add.w	r5, r0, #20
 800c7a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7a4:	462b      	mov	r3, r5
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	4543      	cmp	r3, r8
 800c7aa:	d321      	bcc.n	800c7f0 <__multiply+0x98>
 800c7ac:	f104 0314 	add.w	r3, r4, #20
 800c7b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7b4:	f109 0314 	add.w	r3, r9, #20
 800c7b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7bc:	9202      	str	r2, [sp, #8]
 800c7be:	1b3a      	subs	r2, r7, r4
 800c7c0:	3a15      	subs	r2, #21
 800c7c2:	f022 0203 	bic.w	r2, r2, #3
 800c7c6:	3204      	adds	r2, #4
 800c7c8:	f104 0115 	add.w	r1, r4, #21
 800c7cc:	428f      	cmp	r7, r1
 800c7ce:	bf38      	it	cc
 800c7d0:	2204      	movcc	r2, #4
 800c7d2:	9201      	str	r2, [sp, #4]
 800c7d4:	9a02      	ldr	r2, [sp, #8]
 800c7d6:	9303      	str	r3, [sp, #12]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d80c      	bhi.n	800c7f6 <__multiply+0x9e>
 800c7dc:	2e00      	cmp	r6, #0
 800c7de:	dd03      	ble.n	800c7e8 <__multiply+0x90>
 800c7e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d05a      	beq.n	800c89e <__multiply+0x146>
 800c7e8:	6106      	str	r6, [r0, #16]
 800c7ea:	b005      	add	sp, #20
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	f843 2b04 	str.w	r2, [r3], #4
 800c7f4:	e7d8      	b.n	800c7a8 <__multiply+0x50>
 800c7f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7fa:	f1ba 0f00 	cmp.w	sl, #0
 800c7fe:	d024      	beq.n	800c84a <__multiply+0xf2>
 800c800:	f104 0e14 	add.w	lr, r4, #20
 800c804:	46a9      	mov	r9, r5
 800c806:	f04f 0c00 	mov.w	ip, #0
 800c80a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c80e:	f8d9 1000 	ldr.w	r1, [r9]
 800c812:	fa1f fb82 	uxth.w	fp, r2
 800c816:	b289      	uxth	r1, r1
 800c818:	fb0a 110b 	mla	r1, sl, fp, r1
 800c81c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c820:	f8d9 2000 	ldr.w	r2, [r9]
 800c824:	4461      	add	r1, ip
 800c826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c82a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c82e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c832:	b289      	uxth	r1, r1
 800c834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c838:	4577      	cmp	r7, lr
 800c83a:	f849 1b04 	str.w	r1, [r9], #4
 800c83e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c842:	d8e2      	bhi.n	800c80a <__multiply+0xb2>
 800c844:	9a01      	ldr	r2, [sp, #4]
 800c846:	f845 c002 	str.w	ip, [r5, r2]
 800c84a:	9a03      	ldr	r2, [sp, #12]
 800c84c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c850:	3304      	adds	r3, #4
 800c852:	f1b9 0f00 	cmp.w	r9, #0
 800c856:	d020      	beq.n	800c89a <__multiply+0x142>
 800c858:	6829      	ldr	r1, [r5, #0]
 800c85a:	f104 0c14 	add.w	ip, r4, #20
 800c85e:	46ae      	mov	lr, r5
 800c860:	f04f 0a00 	mov.w	sl, #0
 800c864:	f8bc b000 	ldrh.w	fp, [ip]
 800c868:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c86c:	fb09 220b 	mla	r2, r9, fp, r2
 800c870:	4492      	add	sl, r2
 800c872:	b289      	uxth	r1, r1
 800c874:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c878:	f84e 1b04 	str.w	r1, [lr], #4
 800c87c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c880:	f8be 1000 	ldrh.w	r1, [lr]
 800c884:	0c12      	lsrs	r2, r2, #16
 800c886:	fb09 1102 	mla	r1, r9, r2, r1
 800c88a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c88e:	4567      	cmp	r7, ip
 800c890:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c894:	d8e6      	bhi.n	800c864 <__multiply+0x10c>
 800c896:	9a01      	ldr	r2, [sp, #4]
 800c898:	50a9      	str	r1, [r5, r2]
 800c89a:	3504      	adds	r5, #4
 800c89c:	e79a      	b.n	800c7d4 <__multiply+0x7c>
 800c89e:	3e01      	subs	r6, #1
 800c8a0:	e79c      	b.n	800c7dc <__multiply+0x84>
 800c8a2:	bf00      	nop
 800c8a4:	0800e371 	.word	0x0800e371
 800c8a8:	0800e3fc 	.word	0x0800e3fc

0800c8ac <__pow5mult>:
 800c8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b0:	4615      	mov	r5, r2
 800c8b2:	f012 0203 	ands.w	r2, r2, #3
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	d007      	beq.n	800c8cc <__pow5mult+0x20>
 800c8bc:	4c25      	ldr	r4, [pc, #148]	; (800c954 <__pow5mult+0xa8>)
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8c6:	f7ff fe51 	bl	800c56c <__multadd>
 800c8ca:	4607      	mov	r7, r0
 800c8cc:	10ad      	asrs	r5, r5, #2
 800c8ce:	d03d      	beq.n	800c94c <__pow5mult+0xa0>
 800c8d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8d2:	b97c      	cbnz	r4, 800c8f4 <__pow5mult+0x48>
 800c8d4:	2010      	movs	r0, #16
 800c8d6:	f7fc f8e5 	bl	8008aa4 <malloc>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	6270      	str	r0, [r6, #36]	; 0x24
 800c8de:	b928      	cbnz	r0, 800c8ec <__pow5mult+0x40>
 800c8e0:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <__pow5mult+0xac>)
 800c8e2:	481e      	ldr	r0, [pc, #120]	; (800c95c <__pow5mult+0xb0>)
 800c8e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8e8:	f7fe fb2c 	bl	800af44 <__assert_func>
 800c8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8f0:	6004      	str	r4, [r0, #0]
 800c8f2:	60c4      	str	r4, [r0, #12]
 800c8f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8fc:	b94c      	cbnz	r4, 800c912 <__pow5mult+0x66>
 800c8fe:	f240 2171 	movw	r1, #625	; 0x271
 800c902:	4630      	mov	r0, r6
 800c904:	f7ff ff12 	bl	800c72c <__i2b>
 800c908:	2300      	movs	r3, #0
 800c90a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c90e:	4604      	mov	r4, r0
 800c910:	6003      	str	r3, [r0, #0]
 800c912:	f04f 0900 	mov.w	r9, #0
 800c916:	07eb      	lsls	r3, r5, #31
 800c918:	d50a      	bpl.n	800c930 <__pow5mult+0x84>
 800c91a:	4639      	mov	r1, r7
 800c91c:	4622      	mov	r2, r4
 800c91e:	4630      	mov	r0, r6
 800c920:	f7ff ff1a 	bl	800c758 <__multiply>
 800c924:	4639      	mov	r1, r7
 800c926:	4680      	mov	r8, r0
 800c928:	4630      	mov	r0, r6
 800c92a:	f7ff fdfd 	bl	800c528 <_Bfree>
 800c92e:	4647      	mov	r7, r8
 800c930:	106d      	asrs	r5, r5, #1
 800c932:	d00b      	beq.n	800c94c <__pow5mult+0xa0>
 800c934:	6820      	ldr	r0, [r4, #0]
 800c936:	b938      	cbnz	r0, 800c948 <__pow5mult+0x9c>
 800c938:	4622      	mov	r2, r4
 800c93a:	4621      	mov	r1, r4
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff ff0b 	bl	800c758 <__multiply>
 800c942:	6020      	str	r0, [r4, #0]
 800c944:	f8c0 9000 	str.w	r9, [r0]
 800c948:	4604      	mov	r4, r0
 800c94a:	e7e4      	b.n	800c916 <__pow5mult+0x6a>
 800c94c:	4638      	mov	r0, r7
 800c94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c952:	bf00      	nop
 800c954:	0800e548 	.word	0x0800e548
 800c958:	0800e158 	.word	0x0800e158
 800c95c:	0800e3fc 	.word	0x0800e3fc

0800c960 <__lshift>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	460c      	mov	r4, r1
 800c966:	6849      	ldr	r1, [r1, #4]
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	4607      	mov	r7, r0
 800c972:	4691      	mov	r9, r2
 800c974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c978:	f108 0601 	add.w	r6, r8, #1
 800c97c:	42b3      	cmp	r3, r6
 800c97e:	db0b      	blt.n	800c998 <__lshift+0x38>
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff fd91 	bl	800c4a8 <_Balloc>
 800c986:	4605      	mov	r5, r0
 800c988:	b948      	cbnz	r0, 800c99e <__lshift+0x3e>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b2a      	ldr	r3, [pc, #168]	; (800ca38 <__lshift+0xd8>)
 800c98e:	482b      	ldr	r0, [pc, #172]	; (800ca3c <__lshift+0xdc>)
 800c990:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c994:	f7fe fad6 	bl	800af44 <__assert_func>
 800c998:	3101      	adds	r1, #1
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	e7ee      	b.n	800c97c <__lshift+0x1c>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f100 0114 	add.w	r1, r0, #20
 800c9a4:	f100 0210 	add.w	r2, r0, #16
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	4553      	cmp	r3, sl
 800c9ac:	db37      	blt.n	800ca1e <__lshift+0xbe>
 800c9ae:	6920      	ldr	r0, [r4, #16]
 800c9b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9b4:	f104 0314 	add.w	r3, r4, #20
 800c9b8:	f019 091f 	ands.w	r9, r9, #31
 800c9bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c9c4:	d02f      	beq.n	800ca26 <__lshift+0xc6>
 800c9c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c9ca:	468a      	mov	sl, r1
 800c9cc:	f04f 0c00 	mov.w	ip, #0
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	fa02 f209 	lsl.w	r2, r2, r9
 800c9d6:	ea42 020c 	orr.w	r2, r2, ip
 800c9da:	f84a 2b04 	str.w	r2, [sl], #4
 800c9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e2:	4298      	cmp	r0, r3
 800c9e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9e8:	d8f2      	bhi.n	800c9d0 <__lshift+0x70>
 800c9ea:	1b03      	subs	r3, r0, r4
 800c9ec:	3b15      	subs	r3, #21
 800c9ee:	f023 0303 	bic.w	r3, r3, #3
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	f104 0215 	add.w	r2, r4, #21
 800c9f8:	4290      	cmp	r0, r2
 800c9fa:	bf38      	it	cc
 800c9fc:	2304      	movcc	r3, #4
 800c9fe:	f841 c003 	str.w	ip, [r1, r3]
 800ca02:	f1bc 0f00 	cmp.w	ip, #0
 800ca06:	d001      	beq.n	800ca0c <__lshift+0xac>
 800ca08:	f108 0602 	add.w	r6, r8, #2
 800ca0c:	3e01      	subs	r6, #1
 800ca0e:	4638      	mov	r0, r7
 800ca10:	612e      	str	r6, [r5, #16]
 800ca12:	4621      	mov	r1, r4
 800ca14:	f7ff fd88 	bl	800c528 <_Bfree>
 800ca18:	4628      	mov	r0, r5
 800ca1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca22:	3301      	adds	r3, #1
 800ca24:	e7c1      	b.n	800c9aa <__lshift+0x4a>
 800ca26:	3904      	subs	r1, #4
 800ca28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca30:	4298      	cmp	r0, r3
 800ca32:	d8f9      	bhi.n	800ca28 <__lshift+0xc8>
 800ca34:	e7ea      	b.n	800ca0c <__lshift+0xac>
 800ca36:	bf00      	nop
 800ca38:	0800e371 	.word	0x0800e371
 800ca3c:	0800e3fc 	.word	0x0800e3fc

0800ca40 <__mcmp>:
 800ca40:	b530      	push	{r4, r5, lr}
 800ca42:	6902      	ldr	r2, [r0, #16]
 800ca44:	690c      	ldr	r4, [r1, #16]
 800ca46:	1b12      	subs	r2, r2, r4
 800ca48:	d10e      	bne.n	800ca68 <__mcmp+0x28>
 800ca4a:	f100 0314 	add.w	r3, r0, #20
 800ca4e:	3114      	adds	r1, #20
 800ca50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca60:	42a5      	cmp	r5, r4
 800ca62:	d003      	beq.n	800ca6c <__mcmp+0x2c>
 800ca64:	d305      	bcc.n	800ca72 <__mcmp+0x32>
 800ca66:	2201      	movs	r2, #1
 800ca68:	4610      	mov	r0, r2
 800ca6a:	bd30      	pop	{r4, r5, pc}
 800ca6c:	4283      	cmp	r3, r0
 800ca6e:	d3f3      	bcc.n	800ca58 <__mcmp+0x18>
 800ca70:	e7fa      	b.n	800ca68 <__mcmp+0x28>
 800ca72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca76:	e7f7      	b.n	800ca68 <__mcmp+0x28>

0800ca78 <__mdiff>:
 800ca78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	4606      	mov	r6, r0
 800ca80:	4611      	mov	r1, r2
 800ca82:	4620      	mov	r0, r4
 800ca84:	4690      	mov	r8, r2
 800ca86:	f7ff ffdb 	bl	800ca40 <__mcmp>
 800ca8a:	1e05      	subs	r5, r0, #0
 800ca8c:	d110      	bne.n	800cab0 <__mdiff+0x38>
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff fd09 	bl	800c4a8 <_Balloc>
 800ca96:	b930      	cbnz	r0, 800caa6 <__mdiff+0x2e>
 800ca98:	4b3a      	ldr	r3, [pc, #232]	; (800cb84 <__mdiff+0x10c>)
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	f240 2132 	movw	r1, #562	; 0x232
 800caa0:	4839      	ldr	r0, [pc, #228]	; (800cb88 <__mdiff+0x110>)
 800caa2:	f7fe fa4f 	bl	800af44 <__assert_func>
 800caa6:	2301      	movs	r3, #1
 800caa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab0:	bfa4      	itt	ge
 800cab2:	4643      	movge	r3, r8
 800cab4:	46a0      	movge	r8, r4
 800cab6:	4630      	mov	r0, r6
 800cab8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cabc:	bfa6      	itte	ge
 800cabe:	461c      	movge	r4, r3
 800cac0:	2500      	movge	r5, #0
 800cac2:	2501      	movlt	r5, #1
 800cac4:	f7ff fcf0 	bl	800c4a8 <_Balloc>
 800cac8:	b920      	cbnz	r0, 800cad4 <__mdiff+0x5c>
 800caca:	4b2e      	ldr	r3, [pc, #184]	; (800cb84 <__mdiff+0x10c>)
 800cacc:	4602      	mov	r2, r0
 800cace:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cad2:	e7e5      	b.n	800caa0 <__mdiff+0x28>
 800cad4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cad8:	6926      	ldr	r6, [r4, #16]
 800cada:	60c5      	str	r5, [r0, #12]
 800cadc:	f104 0914 	add.w	r9, r4, #20
 800cae0:	f108 0514 	add.w	r5, r8, #20
 800cae4:	f100 0e14 	add.w	lr, r0, #20
 800cae8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800caec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caf0:	f108 0210 	add.w	r2, r8, #16
 800caf4:	46f2      	mov	sl, lr
 800caf6:	2100      	movs	r1, #0
 800caf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cafc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb00:	fa1f f883 	uxth.w	r8, r3
 800cb04:	fa11 f18b 	uxtah	r1, r1, fp
 800cb08:	0c1b      	lsrs	r3, r3, #16
 800cb0a:	eba1 0808 	sub.w	r8, r1, r8
 800cb0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb16:	fa1f f888 	uxth.w	r8, r8
 800cb1a:	1419      	asrs	r1, r3, #16
 800cb1c:	454e      	cmp	r6, r9
 800cb1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb22:	f84a 3b04 	str.w	r3, [sl], #4
 800cb26:	d8e7      	bhi.n	800caf8 <__mdiff+0x80>
 800cb28:	1b33      	subs	r3, r6, r4
 800cb2a:	3b15      	subs	r3, #21
 800cb2c:	f023 0303 	bic.w	r3, r3, #3
 800cb30:	3304      	adds	r3, #4
 800cb32:	3415      	adds	r4, #21
 800cb34:	42a6      	cmp	r6, r4
 800cb36:	bf38      	it	cc
 800cb38:	2304      	movcc	r3, #4
 800cb3a:	441d      	add	r5, r3
 800cb3c:	4473      	add	r3, lr
 800cb3e:	469e      	mov	lr, r3
 800cb40:	462e      	mov	r6, r5
 800cb42:	4566      	cmp	r6, ip
 800cb44:	d30e      	bcc.n	800cb64 <__mdiff+0xec>
 800cb46:	f10c 0203 	add.w	r2, ip, #3
 800cb4a:	1b52      	subs	r2, r2, r5
 800cb4c:	f022 0203 	bic.w	r2, r2, #3
 800cb50:	3d03      	subs	r5, #3
 800cb52:	45ac      	cmp	ip, r5
 800cb54:	bf38      	it	cc
 800cb56:	2200      	movcc	r2, #0
 800cb58:	441a      	add	r2, r3
 800cb5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb5e:	b17b      	cbz	r3, 800cb80 <__mdiff+0x108>
 800cb60:	6107      	str	r7, [r0, #16]
 800cb62:	e7a3      	b.n	800caac <__mdiff+0x34>
 800cb64:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb68:	fa11 f288 	uxtah	r2, r1, r8
 800cb6c:	1414      	asrs	r4, r2, #16
 800cb6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb72:	b292      	uxth	r2, r2
 800cb74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb78:	f84e 2b04 	str.w	r2, [lr], #4
 800cb7c:	1421      	asrs	r1, r4, #16
 800cb7e:	e7e0      	b.n	800cb42 <__mdiff+0xca>
 800cb80:	3f01      	subs	r7, #1
 800cb82:	e7ea      	b.n	800cb5a <__mdiff+0xe2>
 800cb84:	0800e371 	.word	0x0800e371
 800cb88:	0800e3fc 	.word	0x0800e3fc

0800cb8c <__ulp>:
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	ed8d 0b00 	vstr	d0, [sp]
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	4912      	ldr	r1, [pc, #72]	; (800cbe0 <__ulp+0x54>)
 800cb96:	4019      	ands	r1, r3
 800cb98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	dd05      	ble.n	800cbac <__ulp+0x20>
 800cba0:	2200      	movs	r2, #0
 800cba2:	460b      	mov	r3, r1
 800cba4:	ec43 2b10 	vmov	d0, r2, r3
 800cba8:	b002      	add	sp, #8
 800cbaa:	4770      	bx	lr
 800cbac:	4249      	negs	r1, r1
 800cbae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cbb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cbb6:	f04f 0200 	mov.w	r2, #0
 800cbba:	f04f 0300 	mov.w	r3, #0
 800cbbe:	da04      	bge.n	800cbca <__ulp+0x3e>
 800cbc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cbc4:	fa41 f300 	asr.w	r3, r1, r0
 800cbc8:	e7ec      	b.n	800cba4 <__ulp+0x18>
 800cbca:	f1a0 0114 	sub.w	r1, r0, #20
 800cbce:	291e      	cmp	r1, #30
 800cbd0:	bfda      	itte	le
 800cbd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cbd6:	fa20 f101 	lsrle.w	r1, r0, r1
 800cbda:	2101      	movgt	r1, #1
 800cbdc:	460a      	mov	r2, r1
 800cbde:	e7e1      	b.n	800cba4 <__ulp+0x18>
 800cbe0:	7ff00000 	.word	0x7ff00000

0800cbe4 <__b2d>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	6905      	ldr	r5, [r0, #16]
 800cbe8:	f100 0714 	add.w	r7, r0, #20
 800cbec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cbf0:	1f2e      	subs	r6, r5, #4
 800cbf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff fd48 	bl	800c68c <__hi0bits>
 800cbfc:	f1c0 0320 	rsb	r3, r0, #32
 800cc00:	280a      	cmp	r0, #10
 800cc02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc80 <__b2d+0x9c>
 800cc06:	600b      	str	r3, [r1, #0]
 800cc08:	dc14      	bgt.n	800cc34 <__b2d+0x50>
 800cc0a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cc0e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cc12:	42b7      	cmp	r7, r6
 800cc14:	ea41 030c 	orr.w	r3, r1, ip
 800cc18:	bf34      	ite	cc
 800cc1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc1e:	2100      	movcs	r1, #0
 800cc20:	3015      	adds	r0, #21
 800cc22:	fa04 f000 	lsl.w	r0, r4, r0
 800cc26:	fa21 f10e 	lsr.w	r1, r1, lr
 800cc2a:	ea40 0201 	orr.w	r2, r0, r1
 800cc2e:	ec43 2b10 	vmov	d0, r2, r3
 800cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc34:	42b7      	cmp	r7, r6
 800cc36:	bf3a      	itte	cc
 800cc38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc3c:	f1a5 0608 	subcc.w	r6, r5, #8
 800cc40:	2100      	movcs	r1, #0
 800cc42:	380b      	subs	r0, #11
 800cc44:	d017      	beq.n	800cc76 <__b2d+0x92>
 800cc46:	f1c0 0c20 	rsb	ip, r0, #32
 800cc4a:	fa04 f500 	lsl.w	r5, r4, r0
 800cc4e:	42be      	cmp	r6, r7
 800cc50:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc54:	ea45 0504 	orr.w	r5, r5, r4
 800cc58:	bf8c      	ite	hi
 800cc5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc5e:	2400      	movls	r4, #0
 800cc60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc64:	fa01 f000 	lsl.w	r0, r1, r0
 800cc68:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc70:	ea40 0204 	orr.w	r2, r0, r4
 800cc74:	e7db      	b.n	800cc2e <__b2d+0x4a>
 800cc76:	ea44 030c 	orr.w	r3, r4, ip
 800cc7a:	460a      	mov	r2, r1
 800cc7c:	e7d7      	b.n	800cc2e <__b2d+0x4a>
 800cc7e:	bf00      	nop
 800cc80:	3ff00000 	.word	0x3ff00000

0800cc84 <__d2b>:
 800cc84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc88:	4689      	mov	r9, r1
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	ec57 6b10 	vmov	r6, r7, d0
 800cc90:	4690      	mov	r8, r2
 800cc92:	f7ff fc09 	bl	800c4a8 <_Balloc>
 800cc96:	4604      	mov	r4, r0
 800cc98:	b930      	cbnz	r0, 800cca8 <__d2b+0x24>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b25      	ldr	r3, [pc, #148]	; (800cd34 <__d2b+0xb0>)
 800cc9e:	4826      	ldr	r0, [pc, #152]	; (800cd38 <__d2b+0xb4>)
 800cca0:	f240 310a 	movw	r1, #778	; 0x30a
 800cca4:	f7fe f94e 	bl	800af44 <__assert_func>
 800cca8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ccac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccb0:	bb35      	cbnz	r5, 800cd00 <__d2b+0x7c>
 800ccb2:	2e00      	cmp	r6, #0
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	d028      	beq.n	800cd0a <__d2b+0x86>
 800ccb8:	4668      	mov	r0, sp
 800ccba:	9600      	str	r6, [sp, #0]
 800ccbc:	f7ff fd06 	bl	800c6cc <__lo0bits>
 800ccc0:	9900      	ldr	r1, [sp, #0]
 800ccc2:	b300      	cbz	r0, 800cd06 <__d2b+0x82>
 800ccc4:	9a01      	ldr	r2, [sp, #4]
 800ccc6:	f1c0 0320 	rsb	r3, r0, #32
 800ccca:	fa02 f303 	lsl.w	r3, r2, r3
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	40c2      	lsrs	r2, r0
 800ccd2:	6163      	str	r3, [r4, #20]
 800ccd4:	9201      	str	r2, [sp, #4]
 800ccd6:	9b01      	ldr	r3, [sp, #4]
 800ccd8:	61a3      	str	r3, [r4, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	bf14      	ite	ne
 800ccde:	2202      	movne	r2, #2
 800cce0:	2201      	moveq	r2, #1
 800cce2:	6122      	str	r2, [r4, #16]
 800cce4:	b1d5      	cbz	r5, 800cd1c <__d2b+0x98>
 800cce6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccea:	4405      	add	r5, r0
 800ccec:	f8c9 5000 	str.w	r5, [r9]
 800ccf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccf4:	f8c8 0000 	str.w	r0, [r8]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	b003      	add	sp, #12
 800ccfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd04:	e7d5      	b.n	800ccb2 <__d2b+0x2e>
 800cd06:	6161      	str	r1, [r4, #20]
 800cd08:	e7e5      	b.n	800ccd6 <__d2b+0x52>
 800cd0a:	a801      	add	r0, sp, #4
 800cd0c:	f7ff fcde 	bl	800c6cc <__lo0bits>
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	6163      	str	r3, [r4, #20]
 800cd14:	2201      	movs	r2, #1
 800cd16:	6122      	str	r2, [r4, #16]
 800cd18:	3020      	adds	r0, #32
 800cd1a:	e7e3      	b.n	800cce4 <__d2b+0x60>
 800cd1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd24:	f8c9 0000 	str.w	r0, [r9]
 800cd28:	6918      	ldr	r0, [r3, #16]
 800cd2a:	f7ff fcaf 	bl	800c68c <__hi0bits>
 800cd2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd32:	e7df      	b.n	800ccf4 <__d2b+0x70>
 800cd34:	0800e371 	.word	0x0800e371
 800cd38:	0800e3fc 	.word	0x0800e3fc

0800cd3c <__ratio>:
 800cd3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	4688      	mov	r8, r1
 800cd42:	4669      	mov	r1, sp
 800cd44:	4681      	mov	r9, r0
 800cd46:	f7ff ff4d 	bl	800cbe4 <__b2d>
 800cd4a:	a901      	add	r1, sp, #4
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	ec55 4b10 	vmov	r4, r5, d0
 800cd52:	f7ff ff47 	bl	800cbe4 <__b2d>
 800cd56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd5e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd62:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd66:	1a9b      	subs	r3, r3, r2
 800cd68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd6c:	ec51 0b10 	vmov	r0, r1, d0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	bfd6      	itet	le
 800cd74:	460a      	movle	r2, r1
 800cd76:	462a      	movgt	r2, r5
 800cd78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd7c:	468b      	mov	fp, r1
 800cd7e:	462f      	mov	r7, r5
 800cd80:	bfd4      	ite	le
 800cd82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	ee10 2a10 	vmov	r2, s0
 800cd90:	465b      	mov	r3, fp
 800cd92:	4639      	mov	r1, r7
 800cd94:	f7f3 fd8c 	bl	80008b0 <__aeabi_ddiv>
 800cd98:	ec41 0b10 	vmov	d0, r0, r1
 800cd9c:	b003      	add	sp, #12
 800cd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cda2 <__copybits>:
 800cda2:	3901      	subs	r1, #1
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	1149      	asrs	r1, r1, #5
 800cda8:	6914      	ldr	r4, [r2, #16]
 800cdaa:	3101      	adds	r1, #1
 800cdac:	f102 0314 	add.w	r3, r2, #20
 800cdb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdb8:	1f05      	subs	r5, r0, #4
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	d30c      	bcc.n	800cdd8 <__copybits+0x36>
 800cdbe:	1aa3      	subs	r3, r4, r2
 800cdc0:	3b11      	subs	r3, #17
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	3211      	adds	r2, #17
 800cdc8:	42a2      	cmp	r2, r4
 800cdca:	bf88      	it	hi
 800cdcc:	2300      	movhi	r3, #0
 800cdce:	4418      	add	r0, r3
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4288      	cmp	r0, r1
 800cdd4:	d305      	bcc.n	800cde2 <__copybits+0x40>
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	f853 6b04 	ldr.w	r6, [r3], #4
 800cddc:	f845 6f04 	str.w	r6, [r5, #4]!
 800cde0:	e7eb      	b.n	800cdba <__copybits+0x18>
 800cde2:	f840 3b04 	str.w	r3, [r0], #4
 800cde6:	e7f4      	b.n	800cdd2 <__copybits+0x30>

0800cde8 <__any_on>:
 800cde8:	f100 0214 	add.w	r2, r0, #20
 800cdec:	6900      	ldr	r0, [r0, #16]
 800cdee:	114b      	asrs	r3, r1, #5
 800cdf0:	4298      	cmp	r0, r3
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	db11      	blt.n	800ce1a <__any_on+0x32>
 800cdf6:	dd0a      	ble.n	800ce0e <__any_on+0x26>
 800cdf8:	f011 011f 	ands.w	r1, r1, #31
 800cdfc:	d007      	beq.n	800ce0e <__any_on+0x26>
 800cdfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce02:	fa24 f001 	lsr.w	r0, r4, r1
 800ce06:	fa00 f101 	lsl.w	r1, r0, r1
 800ce0a:	428c      	cmp	r4, r1
 800ce0c:	d10b      	bne.n	800ce26 <__any_on+0x3e>
 800ce0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d803      	bhi.n	800ce1e <__any_on+0x36>
 800ce16:	2000      	movs	r0, #0
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	e7f7      	b.n	800ce0e <__any_on+0x26>
 800ce1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce22:	2900      	cmp	r1, #0
 800ce24:	d0f5      	beq.n	800ce12 <__any_on+0x2a>
 800ce26:	2001      	movs	r0, #1
 800ce28:	e7f6      	b.n	800ce18 <__any_on+0x30>

0800ce2a <_calloc_r>:
 800ce2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce2c:	fba1 2402 	umull	r2, r4, r1, r2
 800ce30:	b94c      	cbnz	r4, 800ce46 <_calloc_r+0x1c>
 800ce32:	4611      	mov	r1, r2
 800ce34:	9201      	str	r2, [sp, #4]
 800ce36:	f7fb fee9 	bl	8008c0c <_malloc_r>
 800ce3a:	9a01      	ldr	r2, [sp, #4]
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	b930      	cbnz	r0, 800ce4e <_calloc_r+0x24>
 800ce40:	4628      	mov	r0, r5
 800ce42:	b003      	add	sp, #12
 800ce44:	bd30      	pop	{r4, r5, pc}
 800ce46:	220c      	movs	r2, #12
 800ce48:	6002      	str	r2, [r0, #0]
 800ce4a:	2500      	movs	r5, #0
 800ce4c:	e7f8      	b.n	800ce40 <_calloc_r+0x16>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	f7fb fe68 	bl	8008b24 <memset>
 800ce54:	e7f4      	b.n	800ce40 <_calloc_r+0x16>

0800ce56 <_realloc_r>:
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	4680      	mov	r8, r0
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	460e      	mov	r6, r1
 800ce60:	b921      	cbnz	r1, 800ce6c <_realloc_r+0x16>
 800ce62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce66:	4611      	mov	r1, r2
 800ce68:	f7fb bed0 	b.w	8008c0c <_malloc_r>
 800ce6c:	b92a      	cbnz	r2, 800ce7a <_realloc_r+0x24>
 800ce6e:	f7fb fe61 	bl	8008b34 <_free_r>
 800ce72:	4625      	mov	r5, r4
 800ce74:	4628      	mov	r0, r5
 800ce76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7a:	f000 fa1d 	bl	800d2b8 <_malloc_usable_size_r>
 800ce7e:	4284      	cmp	r4, r0
 800ce80:	4607      	mov	r7, r0
 800ce82:	d802      	bhi.n	800ce8a <_realloc_r+0x34>
 800ce84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce88:	d812      	bhi.n	800ceb0 <_realloc_r+0x5a>
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	f7fb febd 	bl	8008c0c <_malloc_r>
 800ce92:	4605      	mov	r5, r0
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d0ed      	beq.n	800ce74 <_realloc_r+0x1e>
 800ce98:	42bc      	cmp	r4, r7
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	bf28      	it	cs
 800cea0:	463a      	movcs	r2, r7
 800cea2:	f7fb fe17 	bl	8008ad4 <memcpy>
 800cea6:	4631      	mov	r1, r6
 800cea8:	4640      	mov	r0, r8
 800ceaa:	f7fb fe43 	bl	8008b34 <_free_r>
 800ceae:	e7e1      	b.n	800ce74 <_realloc_r+0x1e>
 800ceb0:	4635      	mov	r5, r6
 800ceb2:	e7df      	b.n	800ce74 <_realloc_r+0x1e>

0800ceb4 <__ssputs_r>:
 800ceb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	688e      	ldr	r6, [r1, #8]
 800ceba:	429e      	cmp	r6, r3
 800cebc:	4682      	mov	sl, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	4690      	mov	r8, r2
 800cec2:	461f      	mov	r7, r3
 800cec4:	d838      	bhi.n	800cf38 <__ssputs_r+0x84>
 800cec6:	898a      	ldrh	r2, [r1, #12]
 800cec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cecc:	d032      	beq.n	800cf34 <__ssputs_r+0x80>
 800cece:	6825      	ldr	r5, [r4, #0]
 800ced0:	6909      	ldr	r1, [r1, #16]
 800ced2:	eba5 0901 	sub.w	r9, r5, r1
 800ced6:	6965      	ldr	r5, [r4, #20]
 800ced8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cedc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cee0:	3301      	adds	r3, #1
 800cee2:	444b      	add	r3, r9
 800cee4:	106d      	asrs	r5, r5, #1
 800cee6:	429d      	cmp	r5, r3
 800cee8:	bf38      	it	cc
 800ceea:	461d      	movcc	r5, r3
 800ceec:	0553      	lsls	r3, r2, #21
 800ceee:	d531      	bpl.n	800cf54 <__ssputs_r+0xa0>
 800cef0:	4629      	mov	r1, r5
 800cef2:	f7fb fe8b 	bl	8008c0c <_malloc_r>
 800cef6:	4606      	mov	r6, r0
 800cef8:	b950      	cbnz	r0, 800cf10 <__ssputs_r+0x5c>
 800cefa:	230c      	movs	r3, #12
 800cefc:	f8ca 3000 	str.w	r3, [sl]
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf10:	6921      	ldr	r1, [r4, #16]
 800cf12:	464a      	mov	r2, r9
 800cf14:	f7fb fdde 	bl	8008ad4 <memcpy>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	6126      	str	r6, [r4, #16]
 800cf26:	6165      	str	r5, [r4, #20]
 800cf28:	444e      	add	r6, r9
 800cf2a:	eba5 0509 	sub.w	r5, r5, r9
 800cf2e:	6026      	str	r6, [r4, #0]
 800cf30:	60a5      	str	r5, [r4, #8]
 800cf32:	463e      	mov	r6, r7
 800cf34:	42be      	cmp	r6, r7
 800cf36:	d900      	bls.n	800cf3a <__ssputs_r+0x86>
 800cf38:	463e      	mov	r6, r7
 800cf3a:	6820      	ldr	r0, [r4, #0]
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	4641      	mov	r1, r8
 800cf40:	f7fb fdd6 	bl	8008af0 <memmove>
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	1b9b      	subs	r3, r3, r6
 800cf48:	60a3      	str	r3, [r4, #8]
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	4433      	add	r3, r6
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	2000      	movs	r0, #0
 800cf52:	e7db      	b.n	800cf0c <__ssputs_r+0x58>
 800cf54:	462a      	mov	r2, r5
 800cf56:	f7ff ff7e 	bl	800ce56 <_realloc_r>
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d1e1      	bne.n	800cf24 <__ssputs_r+0x70>
 800cf60:	6921      	ldr	r1, [r4, #16]
 800cf62:	4650      	mov	r0, sl
 800cf64:	f7fb fde6 	bl	8008b34 <_free_r>
 800cf68:	e7c7      	b.n	800cefa <__ssputs_r+0x46>
	...

0800cf6c <_svfiprintf_r>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	4698      	mov	r8, r3
 800cf72:	898b      	ldrh	r3, [r1, #12]
 800cf74:	061b      	lsls	r3, r3, #24
 800cf76:	b09d      	sub	sp, #116	; 0x74
 800cf78:	4607      	mov	r7, r0
 800cf7a:	460d      	mov	r5, r1
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	d50e      	bpl.n	800cf9e <_svfiprintf_r+0x32>
 800cf80:	690b      	ldr	r3, [r1, #16]
 800cf82:	b963      	cbnz	r3, 800cf9e <_svfiprintf_r+0x32>
 800cf84:	2140      	movs	r1, #64	; 0x40
 800cf86:	f7fb fe41 	bl	8008c0c <_malloc_r>
 800cf8a:	6028      	str	r0, [r5, #0]
 800cf8c:	6128      	str	r0, [r5, #16]
 800cf8e:	b920      	cbnz	r0, 800cf9a <_svfiprintf_r+0x2e>
 800cf90:	230c      	movs	r3, #12
 800cf92:	603b      	str	r3, [r7, #0]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf98:	e0d1      	b.n	800d13e <_svfiprintf_r+0x1d2>
 800cf9a:	2340      	movs	r3, #64	; 0x40
 800cf9c:	616b      	str	r3, [r5, #20]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa2:	2320      	movs	r3, #32
 800cfa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfac:	2330      	movs	r3, #48	; 0x30
 800cfae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d158 <_svfiprintf_r+0x1ec>
 800cfb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfb6:	f04f 0901 	mov.w	r9, #1
 800cfba:	4623      	mov	r3, r4
 800cfbc:	469a      	mov	sl, r3
 800cfbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc2:	b10a      	cbz	r2, 800cfc8 <_svfiprintf_r+0x5c>
 800cfc4:	2a25      	cmp	r2, #37	; 0x25
 800cfc6:	d1f9      	bne.n	800cfbc <_svfiprintf_r+0x50>
 800cfc8:	ebba 0b04 	subs.w	fp, sl, r4
 800cfcc:	d00b      	beq.n	800cfe6 <_svfiprintf_r+0x7a>
 800cfce:	465b      	mov	r3, fp
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff ff6d 	bl	800ceb4 <__ssputs_r>
 800cfda:	3001      	adds	r0, #1
 800cfdc:	f000 80aa 	beq.w	800d134 <_svfiprintf_r+0x1c8>
 800cfe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfe2:	445a      	add	r2, fp
 800cfe4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 80a2 	beq.w	800d134 <_svfiprintf_r+0x1c8>
 800cff0:	2300      	movs	r3, #0
 800cff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cffa:	f10a 0a01 	add.w	sl, sl, #1
 800cffe:	9304      	str	r3, [sp, #16]
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d006:	931a      	str	r3, [sp, #104]	; 0x68
 800d008:	4654      	mov	r4, sl
 800d00a:	2205      	movs	r2, #5
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	4851      	ldr	r0, [pc, #324]	; (800d158 <_svfiprintf_r+0x1ec>)
 800d012:	f7f3 f905 	bl	8000220 <memchr>
 800d016:	9a04      	ldr	r2, [sp, #16]
 800d018:	b9d8      	cbnz	r0, 800d052 <_svfiprintf_r+0xe6>
 800d01a:	06d0      	lsls	r0, r2, #27
 800d01c:	bf44      	itt	mi
 800d01e:	2320      	movmi	r3, #32
 800d020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d024:	0711      	lsls	r1, r2, #28
 800d026:	bf44      	itt	mi
 800d028:	232b      	movmi	r3, #43	; 0x2b
 800d02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d02e:	f89a 3000 	ldrb.w	r3, [sl]
 800d032:	2b2a      	cmp	r3, #42	; 0x2a
 800d034:	d015      	beq.n	800d062 <_svfiprintf_r+0xf6>
 800d036:	9a07      	ldr	r2, [sp, #28]
 800d038:	4654      	mov	r4, sl
 800d03a:	2000      	movs	r0, #0
 800d03c:	f04f 0c0a 	mov.w	ip, #10
 800d040:	4621      	mov	r1, r4
 800d042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d046:	3b30      	subs	r3, #48	; 0x30
 800d048:	2b09      	cmp	r3, #9
 800d04a:	d94e      	bls.n	800d0ea <_svfiprintf_r+0x17e>
 800d04c:	b1b0      	cbz	r0, 800d07c <_svfiprintf_r+0x110>
 800d04e:	9207      	str	r2, [sp, #28]
 800d050:	e014      	b.n	800d07c <_svfiprintf_r+0x110>
 800d052:	eba0 0308 	sub.w	r3, r0, r8
 800d056:	fa09 f303 	lsl.w	r3, r9, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	9304      	str	r3, [sp, #16]
 800d05e:	46a2      	mov	sl, r4
 800d060:	e7d2      	b.n	800d008 <_svfiprintf_r+0x9c>
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	1d19      	adds	r1, r3, #4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	9103      	str	r1, [sp, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfbb      	ittet	lt
 800d06e:	425b      	neglt	r3, r3
 800d070:	f042 0202 	orrlt.w	r2, r2, #2
 800d074:	9307      	strge	r3, [sp, #28]
 800d076:	9307      	strlt	r3, [sp, #28]
 800d078:	bfb8      	it	lt
 800d07a:	9204      	strlt	r2, [sp, #16]
 800d07c:	7823      	ldrb	r3, [r4, #0]
 800d07e:	2b2e      	cmp	r3, #46	; 0x2e
 800d080:	d10c      	bne.n	800d09c <_svfiprintf_r+0x130>
 800d082:	7863      	ldrb	r3, [r4, #1]
 800d084:	2b2a      	cmp	r3, #42	; 0x2a
 800d086:	d135      	bne.n	800d0f4 <_svfiprintf_r+0x188>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	1d1a      	adds	r2, r3, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	9203      	str	r2, [sp, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfb8      	it	lt
 800d094:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d098:	3402      	adds	r4, #2
 800d09a:	9305      	str	r3, [sp, #20]
 800d09c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d168 <_svfiprintf_r+0x1fc>
 800d0a0:	7821      	ldrb	r1, [r4, #0]
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	4650      	mov	r0, sl
 800d0a6:	f7f3 f8bb 	bl	8000220 <memchr>
 800d0aa:	b140      	cbz	r0, 800d0be <_svfiprintf_r+0x152>
 800d0ac:	2340      	movs	r3, #64	; 0x40
 800d0ae:	eba0 000a 	sub.w	r0, r0, sl
 800d0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800d0b6:	9b04      	ldr	r3, [sp, #16]
 800d0b8:	4303      	orrs	r3, r0
 800d0ba:	3401      	adds	r4, #1
 800d0bc:	9304      	str	r3, [sp, #16]
 800d0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c2:	4826      	ldr	r0, [pc, #152]	; (800d15c <_svfiprintf_r+0x1f0>)
 800d0c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0c8:	2206      	movs	r2, #6
 800d0ca:	f7f3 f8a9 	bl	8000220 <memchr>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d038      	beq.n	800d144 <_svfiprintf_r+0x1d8>
 800d0d2:	4b23      	ldr	r3, [pc, #140]	; (800d160 <_svfiprintf_r+0x1f4>)
 800d0d4:	bb1b      	cbnz	r3, 800d11e <_svfiprintf_r+0x1b2>
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	3307      	adds	r3, #7
 800d0da:	f023 0307 	bic.w	r3, r3, #7
 800d0de:	3308      	adds	r3, #8
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e4:	4433      	add	r3, r6
 800d0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e8:	e767      	b.n	800cfba <_svfiprintf_r+0x4e>
 800d0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	e7a5      	b.n	800d040 <_svfiprintf_r+0xd4>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	3401      	adds	r4, #1
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f04f 0c0a 	mov.w	ip, #10
 800d100:	4620      	mov	r0, r4
 800d102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d106:	3a30      	subs	r2, #48	; 0x30
 800d108:	2a09      	cmp	r2, #9
 800d10a:	d903      	bls.n	800d114 <_svfiprintf_r+0x1a8>
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0c5      	beq.n	800d09c <_svfiprintf_r+0x130>
 800d110:	9105      	str	r1, [sp, #20]
 800d112:	e7c3      	b.n	800d09c <_svfiprintf_r+0x130>
 800d114:	fb0c 2101 	mla	r1, ip, r1, r2
 800d118:	4604      	mov	r4, r0
 800d11a:	2301      	movs	r3, #1
 800d11c:	e7f0      	b.n	800d100 <_svfiprintf_r+0x194>
 800d11e:	ab03      	add	r3, sp, #12
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	462a      	mov	r2, r5
 800d124:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <_svfiprintf_r+0x1f8>)
 800d126:	a904      	add	r1, sp, #16
 800d128:	4638      	mov	r0, r7
 800d12a:	f7fb ffdd 	bl	80090e8 <_printf_float>
 800d12e:	1c42      	adds	r2, r0, #1
 800d130:	4606      	mov	r6, r0
 800d132:	d1d6      	bne.n	800d0e2 <_svfiprintf_r+0x176>
 800d134:	89ab      	ldrh	r3, [r5, #12]
 800d136:	065b      	lsls	r3, r3, #25
 800d138:	f53f af2c 	bmi.w	800cf94 <_svfiprintf_r+0x28>
 800d13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d13e:	b01d      	add	sp, #116	; 0x74
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	ab03      	add	r3, sp, #12
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	462a      	mov	r2, r5
 800d14a:	4b06      	ldr	r3, [pc, #24]	; (800d164 <_svfiprintf_r+0x1f8>)
 800d14c:	a904      	add	r1, sp, #16
 800d14e:	4638      	mov	r0, r7
 800d150:	f7fc fa6e 	bl	8009630 <_printf_i>
 800d154:	e7eb      	b.n	800d12e <_svfiprintf_r+0x1c2>
 800d156:	bf00      	nop
 800d158:	0800e0b8 	.word	0x0800e0b8
 800d15c:	0800e0c2 	.word	0x0800e0c2
 800d160:	080090e9 	.word	0x080090e9
 800d164:	0800ceb5 	.word	0x0800ceb5
 800d168:	0800e0be 	.word	0x0800e0be

0800d16c <_putc_r>:
 800d16c:	b570      	push	{r4, r5, r6, lr}
 800d16e:	460d      	mov	r5, r1
 800d170:	4614      	mov	r4, r2
 800d172:	4606      	mov	r6, r0
 800d174:	b118      	cbz	r0, 800d17e <_putc_r+0x12>
 800d176:	6983      	ldr	r3, [r0, #24]
 800d178:	b90b      	cbnz	r3, 800d17e <_putc_r+0x12>
 800d17a:	f7fb fbbb 	bl	80088f4 <__sinit>
 800d17e:	4b1c      	ldr	r3, [pc, #112]	; (800d1f0 <_putc_r+0x84>)
 800d180:	429c      	cmp	r4, r3
 800d182:	d124      	bne.n	800d1ce <_putc_r+0x62>
 800d184:	6874      	ldr	r4, [r6, #4]
 800d186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d188:	07d8      	lsls	r0, r3, #31
 800d18a:	d405      	bmi.n	800d198 <_putc_r+0x2c>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	0599      	lsls	r1, r3, #22
 800d190:	d402      	bmi.n	800d198 <_putc_r+0x2c>
 800d192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d194:	f7fb fc83 	bl	8008a9e <__retarget_lock_acquire_recursive>
 800d198:	68a3      	ldr	r3, [r4, #8]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	60a3      	str	r3, [r4, #8]
 800d1a0:	da05      	bge.n	800d1ae <_putc_r+0x42>
 800d1a2:	69a2      	ldr	r2, [r4, #24]
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	db1c      	blt.n	800d1e2 <_putc_r+0x76>
 800d1a8:	b2eb      	uxtb	r3, r5
 800d1aa:	2b0a      	cmp	r3, #10
 800d1ac:	d019      	beq.n	800d1e2 <_putc_r+0x76>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	6022      	str	r2, [r4, #0]
 800d1b4:	701d      	strb	r5, [r3, #0]
 800d1b6:	b2ed      	uxtb	r5, r5
 800d1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1ba:	07da      	lsls	r2, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <_putc_r+0x5e>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	059b      	lsls	r3, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_putc_r+0x5e>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f7fb fc6b 	bl	8008aa0 <__retarget_lock_release_recursive>
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <_putc_r+0x88>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	d101      	bne.n	800d1d8 <_putc_r+0x6c>
 800d1d4:	68b4      	ldr	r4, [r6, #8]
 800d1d6:	e7d6      	b.n	800d186 <_putc_r+0x1a>
 800d1d8:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <_putc_r+0x8c>)
 800d1da:	429c      	cmp	r4, r3
 800d1dc:	bf08      	it	eq
 800d1de:	68f4      	ldreq	r4, [r6, #12]
 800d1e0:	e7d1      	b.n	800d186 <_putc_r+0x1a>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7fd fdda 	bl	800ada0 <__swbuf_r>
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	e7e3      	b.n	800d1b8 <_putc_r+0x4c>
 800d1f0:	0800e074 	.word	0x0800e074
 800d1f4:	0800e094 	.word	0x0800e094
 800d1f8:	0800e054 	.word	0x0800e054

0800d1fc <_read_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d07      	ldr	r5, [pc, #28]	; (800d21c <_read_r+0x20>)
 800d200:	4604      	mov	r4, r0
 800d202:	4608      	mov	r0, r1
 800d204:	4611      	mov	r1, r2
 800d206:	2200      	movs	r2, #0
 800d208:	602a      	str	r2, [r5, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	f7f6 fac9 	bl	80037a2 <_read>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_read_r+0x1e>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b103      	cbz	r3, 800d21a <_read_r+0x1e>
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	2000089c 	.word	0x2000089c

0800d220 <nan>:
 800d220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d228 <nan+0x8>
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	00000000 	.word	0x00000000
 800d22c:	7ff80000 	.word	0x7ff80000

0800d230 <strncmp>:
 800d230:	b510      	push	{r4, lr}
 800d232:	b17a      	cbz	r2, 800d254 <strncmp+0x24>
 800d234:	4603      	mov	r3, r0
 800d236:	3901      	subs	r1, #1
 800d238:	1884      	adds	r4, r0, r2
 800d23a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d23e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d242:	4290      	cmp	r0, r2
 800d244:	d101      	bne.n	800d24a <strncmp+0x1a>
 800d246:	42a3      	cmp	r3, r4
 800d248:	d101      	bne.n	800d24e <strncmp+0x1e>
 800d24a:	1a80      	subs	r0, r0, r2
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	2800      	cmp	r0, #0
 800d250:	d1f3      	bne.n	800d23a <strncmp+0xa>
 800d252:	e7fa      	b.n	800d24a <strncmp+0x1a>
 800d254:	4610      	mov	r0, r2
 800d256:	e7f9      	b.n	800d24c <strncmp+0x1c>

0800d258 <__ascii_wctomb>:
 800d258:	b149      	cbz	r1, 800d26e <__ascii_wctomb+0x16>
 800d25a:	2aff      	cmp	r2, #255	; 0xff
 800d25c:	bf85      	ittet	hi
 800d25e:	238a      	movhi	r3, #138	; 0x8a
 800d260:	6003      	strhi	r3, [r0, #0]
 800d262:	700a      	strbls	r2, [r1, #0]
 800d264:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d268:	bf98      	it	ls
 800d26a:	2001      	movls	r0, #1
 800d26c:	4770      	bx	lr
 800d26e:	4608      	mov	r0, r1
 800d270:	4770      	bx	lr
	...

0800d274 <_fstat_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4d07      	ldr	r5, [pc, #28]	; (800d294 <_fstat_r+0x20>)
 800d278:	2300      	movs	r3, #0
 800d27a:	4604      	mov	r4, r0
 800d27c:	4608      	mov	r0, r1
 800d27e:	4611      	mov	r1, r2
 800d280:	602b      	str	r3, [r5, #0]
 800d282:	f7f6 fab7 	bl	80037f4 <_fstat>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d102      	bne.n	800d290 <_fstat_r+0x1c>
 800d28a:	682b      	ldr	r3, [r5, #0]
 800d28c:	b103      	cbz	r3, 800d290 <_fstat_r+0x1c>
 800d28e:	6023      	str	r3, [r4, #0]
 800d290:	bd38      	pop	{r3, r4, r5, pc}
 800d292:	bf00      	nop
 800d294:	2000089c 	.word	0x2000089c

0800d298 <_isatty_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d06      	ldr	r5, [pc, #24]	; (800d2b4 <_isatty_r+0x1c>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	f7f6 fab6 	bl	8003814 <_isatty>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_isatty_r+0x1a>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_isatty_r+0x1a>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	2000089c 	.word	0x2000089c

0800d2b8 <_malloc_usable_size_r>:
 800d2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2bc:	1f18      	subs	r0, r3, #4
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bfbc      	itt	lt
 800d2c2:	580b      	ldrlt	r3, [r1, r0]
 800d2c4:	18c0      	addlt	r0, r0, r3
 800d2c6:	4770      	bx	lr

0800d2c8 <_init>:
 800d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ca:	bf00      	nop
 800d2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ce:	bc08      	pop	{r3}
 800d2d0:	469e      	mov	lr, r3
 800d2d2:	4770      	bx	lr

0800d2d4 <_fini>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	bf00      	nop
 800d2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2da:	bc08      	pop	{r3}
 800d2dc:	469e      	mov	lr, r3
 800d2de:	4770      	bx	lr
